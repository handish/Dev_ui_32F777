
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a24c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002794  0801a450  0801a450  0002a450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cbe4  0801cbe4  00030428  2**0
                  CONTENTS
  4 .ARM          00000008  0801cbe4  0801cbe4  0002cbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cbec  0801cbec  00030428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cbec  0801cbec  0002cbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cbf0  0801cbf0  0002cbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  0801cbf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030e5c  20000428  0801d01c  00030428  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20031284  0801d01c  00031284  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a8c7  00000000  00000000  00030456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006425  00000000  00000000  0006ad1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024c0  00000000  00000000  00071148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002278  00000000  00000000  00073608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000080c3  00000000  00000000  00075880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d436  00000000  00000000  0007d943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e8df  00000000  00000000  000aad79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c9658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b048  00000000  00000000  001c96ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000428 	.word	0x20000428
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a434 	.word	0x0801a434

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000042c 	.word	0x2000042c
 800023c:	0801a434 	.word	0x0801a434

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	fa93 f3a3 	rbit	r3, r3
 80009e4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	0e1b      	lsrs	r3, r3, #24
 80009ea:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <SMLCD_InitGPIO+0x34>)
 8000a02:	f008 fe5b 	bl	80096bc <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <SMLCD_InitGPIO+0x38>)
 8000a0c:	f008 fe56 	bl	80096bc <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <SMLCD_InitGPIO+0x34>)
 8000a16:	f008 fe51 	bl	80096bc <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <SMLCD_InitGPIO+0x3c>)
 8000a22:	f008 fe4b 	bl	80096bc <HAL_GPIO_WritePin>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022400 	.word	0x40022400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40021c00 	.word	0x40021c00

08000a38 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000a38:	b084      	sub	sp, #16
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	f107 0c08 	add.w	ip, r7, #8
 8000a42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SMLCD_Init+0x38>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <SMLCD_Init+0x3c>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2264      	movs	r2, #100	; 0x64
 8000a56:	4619      	mov	r1, r3
 8000a58:	f015 f978 	bl	8015d4c <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 f9c3 	bl	8000de8 <SMLCD_Orientation>
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a6a:	b004      	add	sp, #16
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20028b60 	.word	0x20028b60
 8000a74:	20028b68 	.word	0x20028b68

08000a78 <SMLCD_Clear>:

// Clear display memory (clear screen)
HAL_StatusTypeDef SMLCD_Clear(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	HAL_StatusTypeDef Status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
	SMLCD_SCS_H;
 8000a82:	2201      	movs	r2, #1
 8000a84:	2110      	movs	r1, #16
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <SMLCD_Clear+0x40>)
 8000a88:	f008 fe18 	bl	80096bc <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 8000a90:	2300      	movs	r3, #0
 8000a92:	717b      	strb	r3, [r7, #5]
	Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 8000a94:	1d39      	adds	r1, r7, #4
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	2202      	movs	r2, #2
 8000a9a:	4808      	ldr	r0, [pc, #32]	; (8000abc <SMLCD_Clear+0x44>)
 8000a9c:	f00b f95c 	bl	800bd58 <HAL_SPI_Transmit>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <SMLCD_Clear+0x40>)
 8000aaa:	f008 fe07 	bl	80096bc <HAL_GPIO_WritePin>
	return Status;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	20028b68 	.word	0x20028b68

08000ac0 <SMLCD_Flush>:
	return HAL_OK;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
HAL_StatusTypeDef SMLCD_Flush(void) {
 8000ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac4:	b08c      	sub	sp, #48	; 0x30
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	466b      	mov	r3, sp
 8000aca:	4698      	mov	r8, r3
	HAL_StatusTypeDef Status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	int commandByte=1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
	int lineByte=1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
	int lineAmount=SCR_H;
 8000ada:	23f0      	movs	r3, #240	; 0xf0
 8000adc:	61fb      	str	r3, [r7, #28]
	int nopBytesPerLine= 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
	int dataBytesPerLine=SCR_W/8;
 8000ae2:	2332      	movs	r3, #50	; 0x32
 8000ae4:	617b      	str	r3, [r7, #20]
	int finalNOPByte=1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 8000aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	441a      	add	r2, r3
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	441a      	add	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	441a      	add	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	18d6      	adds	r6, r2, r3
 8000afc:	1e73      	subs	r3, r6, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4633      	mov	r3, r6
 8000b02:	4618      	mov	r0, r3
 8000b04:	f04f 0100 	mov.w	r1, #0
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	00cb      	lsls	r3, r1, #3
 8000b12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b16:	00c2      	lsls	r2, r0, #3
 8000b18:	4633      	mov	r3, r6
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f04f 0100 	mov.w	r1, #0
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	00cb      	lsls	r3, r1, #3
 8000b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b2e:	00c2      	lsls	r2, r0, #3
 8000b30:	4633      	mov	r3, r6
 8000b32:	3307      	adds	r3, #7
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3c:	466b      	mov	r3, sp
 8000b3e:	3300      	adds	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	4632      	mov	r2, r6
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f015 f90d 	bl	8015d68 <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000b4e:	4da1      	ldr	r5, [pc, #644]	; (8000dd4 <SMLCD_Flush+0x314>)
	register uint8_t line = 0;
 8000b50:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
	int x=0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2288      	movs	r2, #136	; 0x88
 8000b5e:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000b60:	4b9d      	ldr	r3, [pc, #628]	; (8000dd8 <SMLCD_Flush+0x318>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	f000 809c 	beq.w	8000ca2 <SMLCD_Flush+0x1e2>
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	f300 80e8 	bgt.w	8000d40 <SMLCD_Flush+0x280>
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d002      	beq.n	8000b7a <SMLCD_Flush+0xba>
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d041      	beq.n	8000bfc <SMLCD_Flush+0x13c>
 8000b78:	e0e2      	b.n	8000d40 <SMLCD_Flush+0x280>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000b7a:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000b7c:	e039      	b.n	8000bf2 <SMLCD_Flush+0x132>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b92:	e009      	b.n	8000ba8 <SMLCD_Flush+0xe8>
					transmitBuffer[x]=*ptr;
 8000b94:	7829      	ldrb	r1, [r5, #0]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	4413      	add	r3, r2
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
					ptr++;
 8000ba0:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	2b33      	cmp	r3, #51	; 0x33
 8000bac:	ddf2      	ble.n	8000b94 <SMLCD_Flush+0xd4>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	4886      	ldr	r0, [pc, #536]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000bc4:	f008 fd7a 	bl	80096bc <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	b2b2      	uxth	r2, r6
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	4884      	ldr	r0, [pc, #528]	; (8000de0 <SMLCD_Flush+0x320>)
 8000bd0:	f00b f8c2 	bl	800bd58 <HAL_SPI_Transmit>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	487f      	ldr	r0, [pc, #508]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000be0:	f008 fd6c 	bl	80096bc <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 8000be4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <SMLCD_Flush+0x132>
				{
					return Status;
 8000bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bf0:	e0e9      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (--line > 0) {
 8000bf2:	1e63      	subs	r3, r4, #1
 8000bf4:	b2dc      	uxtb	r4, r3
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d1c1      	bne.n	8000b7e <SMLCD_Flush+0xbe>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 8000bfa:	e0e3      	b.n	8000dc4 <SMLCD_Flush+0x304>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 8000bfc:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000bfe:	4d79      	ldr	r5, [pc, #484]	; (8000de4 <SMLCD_Flush+0x324>)
			while (--line > 0) {
 8000c00:	e04a      	b.n	8000c98 <SMLCD_Flush+0x1d8>

				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff fee4 	bl	80009d0 <__reverse8bit>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4873      	ldr	r0, [pc, #460]	; (8000de0 <SMLCD_Flush+0x320>)
 8000c12:	f00b f8a1 	bl	800bd58 <HAL_SPI_Transmit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <SMLCD_Flush+0x174>
				{
					SMLCD_SCS_L;
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	486c      	ldr	r0, [pc, #432]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000c2a:	f008 fd47 	bl	80096bc <HAL_GPIO_WritePin>
					return Status;
 8000c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c32:	e0c8      	b.n	8000dc6 <SMLCD_Flush+0x306>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000c34:	2600      	movs	r6, #0
 8000c36:	e018      	b.n	8000c6a <SMLCD_Flush+0x1aa>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000c38:	462b      	mov	r3, r5
 8000c3a:	1e5d      	subs	r5, r3, #1
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2201      	movs	r2, #1
 8000c44:	4866      	ldr	r0, [pc, #408]	; (8000de0 <SMLCD_Flush+0x320>)
 8000c46:	f00b f887 	bl	800bd58 <HAL_SPI_Transmit>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 8000c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d007      	beq.n	8000c68 <SMLCD_Flush+0x1a8>
					{
						SMLCD_SCS_L;
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	485f      	ldr	r0, [pc, #380]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000c5e:	f008 fd2d 	bl	80096bc <HAL_GPIO_WritePin>
						return Status;
 8000c62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c66:	e0ae      	b.n	8000dc6 <SMLCD_Flush+0x306>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000c68:	3601      	adds	r6, #1
 8000c6a:	2e31      	cmp	r6, #49	; 0x31
 8000c6c:	d9e4      	bls.n	8000c38 <SMLCD_Flush+0x178>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2201      	movs	r2, #1
 8000c72:	2100      	movs	r1, #0
 8000c74:	485a      	ldr	r0, [pc, #360]	; (8000de0 <SMLCD_Flush+0x320>)
 8000c76:	f00b f86f 	bl	800bd58 <HAL_SPI_Transmit>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <SMLCD_Flush+0x1d8>
				{
					SMLCD_SCS_L;
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4853      	ldr	r0, [pc, #332]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000c8e:	f008 fd15 	bl	80096bc <HAL_GPIO_WritePin>
					return Status;
 8000c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c96:	e096      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (--line > 0) {
 8000c98:	1e63      	subs	r3, r4, #1
 8000c9a:	b2dc      	uxtb	r4, r3
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d1b0      	bne.n	8000c02 <SMLCD_Flush+0x142>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 8000ca0:	e090      	b.n	8000dc4 <SMLCD_Flush+0x304>
		case LCD_ORIENT_180:
			line = 0;
 8000ca2:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000ca4:	4d4f      	ldr	r5, [pc, #316]	; (8000de4 <SMLCD_Flush+0x324>)
			while (line++ < SCR_H + 1) {
 8000ca6:	e045      	b.n	8000d34 <SMLCD_Flush+0x274>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fe91 	bl	80009d0 <__reverse8bit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	484a      	ldr	r0, [pc, #296]	; (8000de0 <SMLCD_Flush+0x320>)
 8000cb8:	f00b f84e 	bl	800bd58 <HAL_SPI_Transmit>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <SMLCD_Flush+0x21a>
				{
					SMLCD_SCS_L;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4843      	ldr	r0, [pc, #268]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000cd0:	f008 fcf4 	bl	80096bc <HAL_GPIO_WritePin>
					return Status;
 8000cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cd8:	e075      	b.n	8000dc6 <SMLCD_Flush+0x306>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e013      	b.n	8000d06 <SMLCD_Flush+0x246>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000cde:	462b      	mov	r3, r5
 8000ce0:	1e5d      	subs	r5, r3, #1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	2201      	movs	r2, #1
 8000cea:	483d      	ldr	r0, [pc, #244]	; (8000de0 <SMLCD_Flush+0x320>)
 8000cec:	f00b f834 	bl	800bd58 <HAL_SPI_Transmit>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 8000cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SMLCD_Flush+0x244>
					{
						return Status;
 8000cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d02:	e060      	b.n	8000dc6 <SMLCD_Flush+0x306>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000d04:	3601      	adds	r6, #1
 8000d06:	2e31      	cmp	r6, #49	; 0x31
 8000d08:	d9e9      	bls.n	8000cde <SMLCD_Flush+0x21e>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4833      	ldr	r0, [pc, #204]	; (8000de0 <SMLCD_Flush+0x320>)
 8000d12:	f00b f821 	bl	800bd58 <HAL_SPI_Transmit>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <SMLCD_Flush+0x274>
				{
					SMLCD_SCS_L;
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000d2a:	f008 fcc7 	bl	80096bc <HAL_GPIO_WritePin>
					return Status;
 8000d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d32:	e048      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (line++ < SCR_H + 1) {
 8000d34:	4623      	mov	r3, r4
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	b2d4      	uxtb	r4, r2
 8000d3a:	2bf0      	cmp	r3, #240	; 0xf0
 8000d3c:	d9b4      	bls.n	8000ca8 <SMLCD_Flush+0x1e8>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 8000d3e:	e041      	b.n	8000dc4 <SMLCD_Flush+0x304>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 8000d40:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 8000d42:	e039      	b.n	8000db8 <SMLCD_Flush+0x2f8>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2288      	movs	r2, #136	; 0x88
 8000d48:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4622      	mov	r2, r4
 8000d52:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000d54:	2302      	movs	r3, #2
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d58:	e009      	b.n	8000d6e <SMLCD_Flush+0x2ae>
					transmitBuffer[x]=*ptr;
 8000d5a:	7829      	ldrb	r1, [r5, #0]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	4413      	add	r3, r2
 8000d62:	460a      	mov	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
					ptr++;
 8000d66:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2b33      	cmp	r3, #51	; 0x33
 8000d72:	ddf2      	ble.n	8000d5a <SMLCD_Flush+0x29a>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000d8a:	f008 fc97 	bl	80096bc <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	b2b2      	uxth	r2, r6
 8000d92:	2364      	movs	r3, #100	; 0x64
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <SMLCD_Flush+0x320>)
 8000d96:	f00a ffdf 	bl	800bd58 <HAL_SPI_Transmit>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 8000da0:	2200      	movs	r2, #0
 8000da2:	2110      	movs	r1, #16
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000da6:	f008 fc89 	bl	80096bc <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 8000daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <SMLCD_Flush+0x2f8>
				{
					return Status;
 8000db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000db6:	e006      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (line++ < SCR_H + 1) {
 8000db8:	4623      	mov	r3, r4
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	b2d4      	uxtb	r4, r2
 8000dbe:	2bf0      	cmp	r3, #240	; 0xf0
 8000dc0:	d9c0      	bls.n	8000d44 <SMLCD_Flush+0x284>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 8000dc2:	bf00      	nop
	}
	return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000444 	.word	0x20000444
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	20028b68 	.word	0x20028b68
 8000de4:	20003323 	.word	0x20003323

08000de8 <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <SMLCD_Orientation+0x44>)
 8000dfe:	22f0      	movs	r2, #240	; 0xf0
 8000e00:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <SMLCD_Orientation+0x48>)
 8000e04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e08:	801a      	strh	r2, [r3, #0]
 8000e0a:	e006      	b.n	8000e1a <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <SMLCD_Orientation+0x44>)
 8000e0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e12:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SMLCD_Orientation+0x48>)
 8000e16:	22f0      	movs	r2, #240	; 0xf0
 8000e18:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <SMLCD_Orientation+0x4c>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	7013      	strb	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20028b62 	.word	0x20028b62
 8000e30:	20028b64 	.word	0x20028b64
 8000e34:	20000000 	.word	0x20000000

08000e38 <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000e3c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <LCD_Clear+0x18>)
 8000e46:	f014 ff8f 	bl	8015d68 <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000444 	.word	0x20000444

08000e54 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000e54:	b4b0      	push	{r4, r5, r7}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000e5c:	4929      	ldr	r1, [pc, #164]	; (8000f04 <LCD_Pixel+0xb0>)
 8000e5e:	7809      	ldrb	r1, [r1, #0]
 8000e60:	2908      	cmp	r1, #8
 8000e62:	d006      	beq.n	8000e72 <LCD_Pixel+0x1e>
 8000e64:	2908      	cmp	r1, #8
 8000e66:	dc15      	bgt.n	8000e94 <LCD_Pixel+0x40>
 8000e68:	2902      	cmp	r1, #2
 8000e6a:	d00f      	beq.n	8000e8c <LCD_Pixel+0x38>
 8000e6c:	2904      	cmp	r1, #4
 8000e6e:	d005      	beq.n	8000e7c <LCD_Pixel+0x28>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000e70:	e010      	b.n	8000e94 <LCD_Pixel+0x40>
			X = SCR_W - 1 - X;
 8000e72:	f240 118f 	movw	r1, #399	; 0x18f
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	460b      	mov	r3, r1
			break;
 8000e7a:	e00c      	b.n	8000e96 <LCD_Pixel+0x42>
			SWAP_VARS(X, Y);
 8000e7c:	4053      	eors	r3, r2
 8000e7e:	405a      	eors	r2, r3
 8000e80:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 8000e82:	f240 118f 	movw	r1, #399	; 0x18f
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	460b      	mov	r3, r1
			break;
 8000e8a:	e004      	b.n	8000e96 <LCD_Pixel+0x42>
			SWAP_VARS(X, Y);
 8000e8c:	4053      	eors	r3, r2
 8000e8e:	405a      	eors	r2, r3
 8000e90:	4053      	eors	r3, r2
			break;
 8000e92:	e000      	b.n	8000e96 <LCD_Pixel+0x42>
			break;
 8000e94:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 8000e96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e9a:	fb01 f202 	mul.w	r2, r1, r2
 8000e9e:	441a      	add	r2, r3
 8000ea0:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 8000ea2:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000ea6:	4294      	cmp	r4, r2
 8000ea8:	d828      	bhi.n	8000efc <LCD_Pixel+0xa8>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <LCD_Pixel+0xb4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d002      	beq.n	8000ec0 <LCD_Pixel+0x6c>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d00a      	beq.n	8000ed4 <LCD_Pixel+0x80>
 8000ebe:	e013      	b.n	8000ee8 <LCD_Pixel+0x94>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ec2:	5d1a      	ldrb	r2, [r3, r4]
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <LCD_Pixel+0xbc>)
 8000ec8:	5c5b      	ldrb	r3, [r3, r1]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ed0:	551a      	strb	r2, [r3, r4]
			break;
 8000ed2:	e014      	b.n	8000efe <LCD_Pixel+0xaa>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ed6:	5d1a      	ldrb	r2, [r3, r4]
 8000ed8:	4629      	mov	r1, r5
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <LCD_Pixel+0xbc>)
 8000edc:	5c5b      	ldrb	r3, [r3, r1]
 8000ede:	4053      	eors	r3, r2
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ee4:	551a      	strb	r2, [r3, r4]
			break;
 8000ee6:	e00a      	b.n	8000efe <LCD_Pixel+0xaa>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <LCD_Pixel+0xb8>)
 8000eea:	5d1a      	ldrb	r2, [r3, r4]
 8000eec:	4629      	mov	r1, r5
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LCD_Pixel+0xc0>)
 8000ef0:	5c5b      	ldrb	r3, [r3, r1]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ef8:	551a      	strb	r2, [r3, r4]
			break;
 8000efa:	e000      	b.n	8000efe <LCD_Pixel+0xaa>
		return;
 8000efc:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bcb0      	pop	{r4, r5, r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20028b60 	.word	0x20028b60
 8000f0c:	20000444 	.word	0x20000444
 8000f10:	0801b220 	.word	0x0801b220
 8000f14:	0801b218 	.word	0x0801b218

08000f18 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000f18:	b4b0      	push	{r4, r5, r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	460b      	mov	r3, r1
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f30:	fb02 f203 	mul.w	r2, r2, r3
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	4413      	add	r3, r2
 8000f38:	10db      	asrs	r3, r3, #3
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <LCD_VLineInt+0xa0>)
 8000f3c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <LCD_VLineInt+0xa4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d002      	beq.n	8000f54 <LCD_VLineInt+0x3c>
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d00f      	beq.n	8000f72 <LCD_VLineInt+0x5a>
 8000f52:	e01d      	b.n	8000f90 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <LCD_VLineInt+0xa8>)
 8000f58:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000f5a:	e004      	b.n	8000f66 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000f5c:	7823      	ldrb	r3, [r4, #0]
 8000f5e:	432b      	orrs	r3, r5
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000f64:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	807a      	strh	r2, [r7, #2]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f5      	bne.n	8000f5c <LCD_VLineInt+0x44>
			}
			break;
 8000f70:	e01d      	b.n	8000fae <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <LCD_VLineInt+0xa8>)
 8000f76:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000f78:	e004      	b.n	8000f84 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000f7a:	7823      	ldrb	r3, [r4, #0]
 8000f7c:	406b      	eors	r3, r5
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000f82:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	807a      	strh	r2, [r7, #2]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <LCD_VLineInt+0x62>
			}
			break;
 8000f8e:	e00e      	b.n	8000fae <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <LCD_VLineInt+0xac>)
 8000f94:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000f96:	e004      	b.n	8000fa2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000f98:	7823      	ldrb	r3, [r4, #0]
 8000f9a:	402b      	ands	r3, r5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000fa0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	807a      	strh	r2, [r7, #2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f5      	bne.n	8000f98 <LCD_VLineInt+0x80>
			}
			break;
 8000fac:	bf00      	nop
	}
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bcb0      	pop	{r4, r5, r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000444 	.word	0x20000444
 8000fbc:	20028b60 	.word	0x20028b60
 8000fc0:	0801b220 	.word	0x0801b220
 8000fc4:	0801b218 	.word	0x0801b218

08000fc8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000fc8:	b4f0      	push	{r4, r5, r6, r7}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	80bb      	strh	r3, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fe0:	fb02 f203 	mul.w	r2, r2, r3
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	10db      	asrs	r3, r3, #3
 8000fea:	4a66      	ldr	r2, [pc, #408]	; (8001184 <LCD_HLineInt+0x1bc>)
 8000fec:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d037      	beq.n	800106c <LCD_HLineInt+0xa4>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000ffc:	f1c6 0308 	rsb	r3, r6, #8
 8001000:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8001002:	4632      	mov	r2, r6
 8001004:	4b60      	ldr	r3, [pc, #384]	; (8001188 <LCD_HLineInt+0x1c0>)
 8001006:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8001008:	b2b3      	uxth	r3, r6
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	429a      	cmp	r2, r3
 800100e:	d206      	bcs.n	800101e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8001010:	4632      	mov	r2, r6
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4a5d      	ldr	r2, [pc, #372]	; (800118c <LCD_HLineInt+0x1c4>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	432b      	orrs	r3, r5
 800101c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <LCD_HLineInt+0x1c8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d002      	beq.n	800102c <LCD_HLineInt+0x64>
 8001026:	2b02      	cmp	r3, #2
 8001028:	d00a      	beq.n	8001040 <LCD_HLineInt+0x78>
 800102a:	e010      	b.n	800104e <LCD_HLineInt+0x86>
			case LCD_PRES:
				*ptr |= ~mask;
 800102c:	7823      	ldrb	r3, [r4, #0]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	b26b      	sxtb	r3, r5
 8001032:	43db      	mvns	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	7023      	strb	r3, [r4, #0]
				break;
 800103e:	e00b      	b.n	8001058 <LCD_HLineInt+0x90>
			case LCD_PINV:
				*ptr ^= ~mask;
 8001040:	7823      	ldrb	r3, [r4, #0]
 8001042:	406b      	eors	r3, r5
 8001044:	b2db      	uxtb	r3, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	7023      	strb	r3, [r4, #0]
				break;
 800104c:	e004      	b.n	8001058 <LCD_HLineInt+0x90>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 800104e:	7823      	ldrb	r3, [r4, #0]
 8001050:	402b      	ands	r3, r5
 8001052:	b2db      	uxtb	r3, r3
 8001054:	7023      	strb	r3, [r4, #0]
				break;
 8001056:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8001058:	b2b3      	uxth	r3, r6
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	f0c0 808b 	bcc.w	8001178 <LCD_HLineInt+0x1b0>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8001062:	3401      	adds	r4, #1
		W -= modulo;
 8001064:	b2b3      	uxth	r3, r6
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	2b20      	cmp	r3, #32
 8001070:	d92c      	bls.n	80010cc <LCD_HLineInt+0x104>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <LCD_HLineInt+0x1c8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d003      	beq.n	8001082 <LCD_HLineInt+0xba>
 800107a:	2b02      	cmp	r3, #2
 800107c:	d00e      	beq.n	800109c <LCD_HLineInt+0xd4>
 800107e:	e01a      	b.n	80010b6 <LCD_HLineInt+0xee>
			case LCD_PRES:
 8001080:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8001082:	4623      	mov	r3, r4
 8001084:	1d1c      	adds	r4, r3, #4
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	601a      	str	r2, [r3, #0]
					W -= 32;
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	3b20      	subs	r3, #32
 8001090:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	2b1f      	cmp	r3, #31
 8001096:	d8f3      	bhi.n	8001080 <LCD_HLineInt+0xb8>
				break;
 8001098:	e018      	b.n	80010cc <LCD_HLineInt+0x104>
			case LCD_PINV:
 800109a:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 800109c:	4623      	mov	r3, r4
 800109e:	1d1c      	adds	r4, r3, #4
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	43d2      	mvns	r2, r2
 80010a4:	601a      	str	r2, [r3, #0]
					W -= 32;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	3b20      	subs	r3, #32
 80010aa:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	2b1f      	cmp	r3, #31
 80010b0:	d8f3      	bhi.n	800109a <LCD_HLineInt+0xd2>
				break;
 80010b2:	e00b      	b.n	80010cc <LCD_HLineInt+0x104>
			case LCD_PSET:
 80010b4:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 80010b6:	4623      	mov	r3, r4
 80010b8:	1d1c      	adds	r4, r3, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
					W -= 32;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	3b20      	subs	r3, #32
 80010c2:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	2b1f      	cmp	r3, #31
 80010c8:	d8f4      	bhi.n	80010b4 <LCD_HLineInt+0xec>
				break;
 80010ca:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	2b07      	cmp	r3, #7
 80010d0:	d92c      	bls.n	800112c <LCD_HLineInt+0x164>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <LCD_HLineInt+0x1c8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d003      	beq.n	80010e2 <LCD_HLineInt+0x11a>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d00d      	beq.n	80010fa <LCD_HLineInt+0x132>
 80010de:	e01a      	b.n	8001116 <LCD_HLineInt+0x14e>
			case LCD_PRES:
 80010e0:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 80010e2:	4623      	mov	r3, r4
 80010e4:	1c5c      	adds	r4, r3, #1
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	701a      	strb	r2, [r3, #0]
					W -= 8;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	3b08      	subs	r3, #8
 80010ee:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d8f4      	bhi.n	80010e0 <LCD_HLineInt+0x118>
				break;
 80010f6:	e01a      	b.n	800112e <LCD_HLineInt+0x166>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 80010fa:	4623      	mov	r3, r4
 80010fc:	1c5c      	adds	r4, r3, #1
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	43d2      	mvns	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	3b08      	subs	r3, #8
 800110a:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	2b07      	cmp	r3, #7
 8001110:	d8f2      	bhi.n	80010f8 <LCD_HLineInt+0x130>
				break;
 8001112:	e00c      	b.n	800112e <LCD_HLineInt+0x166>
			case LCD_PSET:
 8001114:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8001116:	4623      	mov	r3, r4
 8001118:	1c5c      	adds	r4, r3, #1
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
					W -= 8;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	3b08      	subs	r3, #8
 8001122:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	2b07      	cmp	r3, #7
 8001128:	d8f4      	bhi.n	8001114 <LCD_HLineInt+0x14c>
				break;
 800112a:	e000      	b.n	800112e <LCD_HLineInt+0x166>
		}
	}
 800112c:	bf00      	nop

	// Last partial byte?
	if (W) {
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d022      	beq.n	800117a <LCD_HLineInt+0x1b2>
		mask = LUT_B2[8 - W];
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	f1c3 0308 	rsb	r3, r3, #8
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <LCD_HLineInt+0x1c4>)
 800113c:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <LCD_HLineInt+0x1c8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d002      	beq.n	800114c <LCD_HLineInt+0x184>
 8001146:	2b02      	cmp	r3, #2
 8001148:	d00a      	beq.n	8001160 <LCD_HLineInt+0x198>
 800114a:	e010      	b.n	800116e <LCD_HLineInt+0x1a6>
			case LCD_PRES:
				*ptr |= ~mask;
 800114c:	7823      	ldrb	r3, [r4, #0]
 800114e:	b25a      	sxtb	r2, r3
 8001150:	b26b      	sxtb	r3, r5
 8001152:	43db      	mvns	r3, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	7023      	strb	r3, [r4, #0]
				break;
 800115e:	e00c      	b.n	800117a <LCD_HLineInt+0x1b2>
			case LCD_PINV:
				*ptr ^= ~mask;
 8001160:	7823      	ldrb	r3, [r4, #0]
 8001162:	406b      	eors	r3, r5
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	7023      	strb	r3, [r4, #0]
				break;
 800116c:	e005      	b.n	800117a <LCD_HLineInt+0x1b2>
			case LCD_PSET:
			default:
				*ptr &= mask;
 800116e:	7823      	ldrb	r3, [r4, #0]
 8001170:	402b      	ands	r3, r5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	7023      	strb	r3, [r4, #0]
				break;
 8001176:	e000      	b.n	800117a <LCD_HLineInt+0x1b2>
			return;
 8001178:	bf00      	nop
		}
	}
}
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bcf0      	pop	{r4, r5, r6, r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000444 	.word	0x20000444
 8001188:	0801b228 	.word	0x0801b228
 800118c:	0801b230 	.word	0x0801b230
 8001190:	20028b60 	.word	0x20028b60

08001194 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	460b      	mov	r3, r1
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 80011a6:	88fa      	ldrh	r2, [r7, #6]
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d905      	bls.n	80011ba <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 80011ae:	88bd      	ldrh	r5, [r7, #4]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	88bb      	ldrh	r3, [r7, #4]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29c      	uxth	r4, r3
 80011b8:	e004      	b.n	80011c4 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 80011ba:	88fd      	ldrh	r5, [r7, #6]
 80011bc:	88ba      	ldrh	r2, [r7, #4]
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29c      	uxth	r4, r3
	}
	L++;
 80011c4:	4623      	mov	r3, r4
 80011c6:	3301      	adds	r3, #1
 80011c8:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <LCD_HLine+0x9c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d018      	beq.n	8001204 <LCD_HLine+0x70>
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	dc21      	bgt.n	800121a <LCD_HLine+0x86>
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d002      	beq.n	80011e0 <LCD_HLine+0x4c>
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d007      	beq.n	80011ee <LCD_HLine+0x5a>
 80011de:	e01c      	b.n	800121a <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4622      	mov	r2, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe96 	bl	8000f18 <LCD_VLineInt>
			break;
 80011ec:	e01c      	b.n	8001228 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4622      	mov	r2, r4
 80011fa:	4629      	mov	r1, r5
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe8b 	bl	8000f18 <LCD_VLineInt>
			break;
 8001202:	e011      	b.n	8001228 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8001204:	192b      	adds	r3, r5, r4
 8001206:	b29b      	uxth	r3, r3
 8001208:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800120c:	b29b      	uxth	r3, r3
 800120e:	8879      	ldrh	r1, [r7, #2]
 8001210:	4622      	mov	r2, r4
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fed8 	bl	8000fc8 <LCD_HLineInt>
			break;
 8001218:	e006      	b.n	8001228 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	4622      	mov	r2, r4
 800121e:	4619      	mov	r1, r3
 8001220:	4628      	mov	r0, r5
 8001222:	f7ff fed1 	bl	8000fc8 <LCD_HLineInt>
			break;
 8001226:	bf00      	nop
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	20000000 	.word	0x20000000

08001234 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	460b      	mov	r3, r1
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	d905      	bls.n	800125a <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 800124e:	887d      	ldrh	r5, [r7, #2]
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29c      	uxth	r4, r3
 8001258:	e004      	b.n	8001264 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 800125a:	88bd      	ldrh	r5, [r7, #4]
 800125c:	887a      	ldrh	r2, [r7, #2]
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29c      	uxth	r4, r3
	}
	L++;
 8001264:	4623      	mov	r3, r4
 8001266:	3301      	adds	r3, #1
 8001268:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <LCD_VLine+0x9c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b08      	cmp	r3, #8
 8001270:	d018      	beq.n	80012a4 <LCD_VLine+0x70>
 8001272:	2b08      	cmp	r3, #8
 8001274:	dc21      	bgt.n	80012ba <LCD_VLine+0x86>
 8001276:	2b02      	cmp	r3, #2
 8001278:	d002      	beq.n	8001280 <LCD_VLine+0x4c>
 800127a:	2b04      	cmp	r3, #4
 800127c:	d007      	beq.n	800128e <LCD_VLine+0x5a>
 800127e:	e01c      	b.n	80012ba <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4622      	mov	r2, r4
 8001284:	4619      	mov	r1, r3
 8001286:	4628      	mov	r0, r5
 8001288:	f7ff fe9e 	bl	8000fc8 <LCD_HLineInt>
			break;
 800128c:	e01c      	b.n	80012c8 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 800128e:	192b      	adds	r3, r5, r4
 8001290:	b29b      	uxth	r3, r3
 8001292:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001296:	b29b      	uxth	r3, r3
 8001298:	88f9      	ldrh	r1, [r7, #6]
 800129a:	4622      	mov	r2, r4
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe93 	bl	8000fc8 <LCD_HLineInt>
			break;
 80012a2:	e011      	b.n	80012c8 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80012aa:	3301      	adds	r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4622      	mov	r2, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe30 	bl	8000f18 <LCD_VLineInt>
			break;
 80012b8:	e006      	b.n	80012c8 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4622      	mov	r2, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe29 	bl	8000f18 <LCD_VLineInt>
			break;
 80012c6:	bf00      	nop
	}
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	20000000 	.word	0x20000000

080012d4 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	4603      	mov	r3, r0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	8879      	ldrh	r1, [r7, #2]
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff4b 	bl	8001194 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 80012fe:	883a      	ldrh	r2, [r7, #0]
 8001300:	8879      	ldrh	r1, [r7, #2]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff45 	bl	8001194 <LCD_HLine>
	if (Y1 > Y2) {
 800130a:	88ba      	ldrh	r2, [r7, #4]
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d90b      	bls.n	800132a <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8001312:	88ba      	ldrh	r2, [r7, #4]
 8001314:	883b      	ldrh	r3, [r7, #0]
 8001316:	4053      	eors	r3, r2
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	883a      	ldrh	r2, [r7, #0]
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	4053      	eors	r3, r2
 8001320:	803b      	strh	r3, [r7, #0]
 8001322:	88ba      	ldrh	r2, [r7, #4]
 8001324:	883b      	ldrh	r3, [r7, #0]
 8001326:	4053      	eors	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	3b01      	subs	r3, #1
 8001334:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8001336:	883a      	ldrh	r2, [r7, #0]
 8001338:	88b9      	ldrh	r1, [r7, #4]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff79 	bl	8001234 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8001342:	883a      	ldrh	r2, [r7, #0]
 8001344:	88b9      	ldrh	r1, [r7, #4]
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff73 	bl	8001234 <LCD_VLine>
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
	...

08001358 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8001358:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	4604      	mov	r4, r0
 8001362:	4608      	mov	r0, r1
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4603      	mov	r3, r0
 800136e:	80bb      	strh	r3, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	429a      	cmp	r2, r3
 800137e:	d90b      	bls.n	8001398 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	4053      	eors	r3, r2
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4053      	eors	r3, r2
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	4053      	eors	r3, r2
 8001396:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d90b      	bls.n	80013b8 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	883b      	ldrh	r3, [r7, #0]
 80013a4:	4053      	eors	r3, r2
 80013a6:	80bb      	strh	r3, [r7, #4]
 80013a8:	883a      	ldrh	r2, [r7, #0]
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	4053      	eors	r3, r2
 80013ae:	803b      	strh	r3, [r7, #0]
 80013b0:	88ba      	ldrh	r2, [r7, #4]
 80013b2:	883b      	ldrh	r3, [r7, #0]
 80013b4:	4053      	eors	r3, r2
 80013b6:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 80013b8:	4b96      	ldr	r3, [pc, #600]	; (8001614 <LCD_FillRect+0x2bc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d006      	beq.n	80013ce <LCD_FillRect+0x76>
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	dc4f      	bgt.n	8001464 <LCD_FillRect+0x10c>
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d034      	beq.n	8001432 <LCD_FillRect+0xda>
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00d      	beq.n	80013e8 <LCD_FillRect+0x90>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80013cc:	e04a      	b.n	8001464 <LCD_FillRect+0x10c>
			dW = SCR_W - 1 - X2;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80013d4:	3301      	adds	r3, #1
 80013d6:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80013de:	3301      	adds	r3, #1
 80013e0:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 80013e2:	897b      	ldrh	r3, [r7, #10]
 80013e4:	80fb      	strh	r3, [r7, #6]
			break;
 80013e6:	e03e      	b.n	8001466 <LCD_FillRect+0x10e>
			SWAP_VARS(X1, Y1);
 80013e8:	88fa      	ldrh	r2, [r7, #6]
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	4053      	eors	r3, r2
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	88ba      	ldrh	r2, [r7, #4]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4053      	eors	r3, r2
 80013f6:	80bb      	strh	r3, [r7, #4]
 80013f8:	88fa      	ldrh	r2, [r7, #6]
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	4053      	eors	r3, r2
 80013fe:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	883b      	ldrh	r3, [r7, #0]
 8001404:	4053      	eors	r3, r2
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	883a      	ldrh	r2, [r7, #0]
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	4053      	eors	r3, r2
 800140e:	803b      	strh	r3, [r7, #0]
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	883b      	ldrh	r3, [r7, #0]
 8001414:	4053      	eors	r3, r2
 8001416:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 800141e:	3301      	adds	r3, #1
 8001420:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001428:	3301      	adds	r3, #1
 800142a:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 800142c:	897b      	ldrh	r3, [r7, #10]
 800142e:	80fb      	strh	r3, [r7, #6]
			break;
 8001430:	e019      	b.n	8001466 <LCD_FillRect+0x10e>
			SWAP_VARS(X1, Y1);
 8001432:	88fa      	ldrh	r2, [r7, #6]
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	4053      	eors	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	88ba      	ldrh	r2, [r7, #4]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4053      	eors	r3, r2
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	4053      	eors	r3, r2
 8001448:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	4053      	eors	r3, r2
 8001450:	807b      	strh	r3, [r7, #2]
 8001452:	883a      	ldrh	r2, [r7, #0]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4053      	eors	r3, r2
 8001458:	803b      	strh	r3, [r7, #0]
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	4053      	eors	r3, r2
 8001460:	807b      	strh	r3, [r7, #2]
			break;
 8001462:	e000      	b.n	8001466 <LCD_FillRect+0x10e>
			break;
 8001464:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <LCD_FillRect+0x2c0>)
 800146e:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	4a69      	ldr	r2, [pc, #420]	; (800161c <LCD_FillRect+0x2c4>)
 8001478:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001482:	fb02 f203 	mul.w	r2, r2, r3
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	4413      	add	r3, r2
 800148a:	10db      	asrs	r3, r3, #3
 800148c:	4a64      	ldr	r2, [pc, #400]	; (8001620 <LCD_FillRect+0x2c8>)
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	b29a      	uxth	r2, r3
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b29b      	uxth	r3, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	817b      	strh	r3, [r7, #10]

	if (dW) {
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d070      	beq.n	800158a <LCD_FillRect+0x232>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <LCD_FillRect+0x2cc>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d003      	beq.n	80014b8 <LCD_FillRect+0x160>
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d022      	beq.n	80014fa <LCD_FillRect+0x1a2>
 80014b4:	e043      	b.n	800153e <LCD_FillRect+0x1e6>
			case LCD_PRES:
 80014b6:	bf00      	nop
				do {
					cntr = dW;
 80014b8:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 80014ba:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 80014bc:	4623      	mov	r3, r4
 80014be:	1c5c      	adds	r4, r3, #1
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	432a      	orrs	r2, r5
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80014c8:	e003      	b.n	80014d2 <LCD_FillRect+0x17a>
						*ptr++ = 0xFF;
 80014ca:	4623      	mov	r3, r4
 80014cc:	1c5c      	adds	r4, r3, #1
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80014d2:	1e73      	subs	r3, r6, #1
 80014d4:	b29e      	uxth	r6, r3
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d1f7      	bne.n	80014ca <LCD_FillRect+0x172>
					};
					*ptr |= mask_lb;
 80014da:	7823      	ldrb	r3, [r4, #0]
 80014dc:	ea48 0303 	orr.w	r3, r8, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3332      	adds	r3, #50	; 0x32
 80014e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	80ba      	strh	r2, [r7, #4]
 80014f0:	883a      	ldrh	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d8df      	bhi.n	80014b6 <LCD_FillRect+0x15e>
				break;
 80014f6:	e086      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PINV:
 80014f8:	bf00      	nop
				do {
					cntr = dW;
 80014fa:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 80014fc:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 80014fe:	4623      	mov	r3, r4
 8001500:	1c5c      	adds	r4, r3, #1
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	406a      	eors	r2, r5
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800150a:	e005      	b.n	8001518 <LCD_FillRect+0x1c0>
						*ptr++ ^= 0xFF;
 800150c:	4623      	mov	r3, r4
 800150e:	1c5c      	adds	r4, r3, #1
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	43d2      	mvns	r2, r2
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001518:	1e73      	subs	r3, r6, #1
 800151a:	b29e      	uxth	r6, r3
 800151c:	2e00      	cmp	r6, #0
 800151e:	d1f5      	bne.n	800150c <LCD_FillRect+0x1b4>
					};
					*ptr ^= mask_lb;
 8001520:	7823      	ldrb	r3, [r4, #0]
 8001522:	ea88 0303 	eor.w	r3, r8, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3332      	adds	r3, #50	; 0x32
 800152e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001530:	88bb      	ldrh	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	80ba      	strh	r2, [r7, #4]
 8001536:	883a      	ldrh	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8dd      	bhi.n	80014f8 <LCD_FillRect+0x1a0>
				break;
 800153c:	e063      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800153e:	43eb      	mvns	r3, r5
 8001540:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001542:	ea6f 0308 	mvn.w	r3, r8
 8001546:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 800154a:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 800154c:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 800154e:	4623      	mov	r3, r4
 8001550:	1c5c      	adds	r4, r3, #1
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	402a      	ands	r2, r5
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800155a:	e003      	b.n	8001564 <LCD_FillRect+0x20c>
						*ptr++ = 0x00;
 800155c:	4623      	mov	r3, r4
 800155e:	1c5c      	adds	r4, r3, #1
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001564:	1e73      	subs	r3, r6, #1
 8001566:	b29e      	uxth	r6, r3
 8001568:	2e00      	cmp	r6, #0
 800156a:	d1f7      	bne.n	800155c <LCD_FillRect+0x204>
					};
					*ptr &= mask_lb;
 800156c:	7823      	ldrb	r3, [r4, #0]
 800156e:	ea08 0303 	and.w	r3, r8, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3332      	adds	r3, #50	; 0x32
 800157a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	80ba      	strh	r2, [r7, #4]
 8001582:	883a      	ldrh	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8e0      	bhi.n	800154a <LCD_FillRect+0x1f2>
				break;
 8001588:	e03d      	b.n	8001606 <LCD_FillRect+0x2ae>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 800158a:	ea05 0308 	and.w	r3, r5, r8
 800158e:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <LCD_FillRect+0x2cc>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d003      	beq.n	80015a0 <LCD_FillRect+0x248>
 8001598:	2b02      	cmp	r3, #2
 800159a:	d012      	beq.n	80015c2 <LCD_FillRect+0x26a>
 800159c:	e021      	b.n	80015e2 <LCD_FillRect+0x28a>
			case LCD_PRES:
 800159e:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	432b      	orrs	r3, r5
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3332      	adds	r3, #50	; 0x32
 80015b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	80ba      	strh	r2, [r7, #4]
 80015b8:	883a      	ldrh	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d8ef      	bhi.n	800159e <LCD_FillRect+0x246>
				break;
 80015be:	e022      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PINV:
 80015c0:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	406b      	eors	r3, r5
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3332      	adds	r3, #50	; 0x32
 80015d2:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	80ba      	strh	r2, [r7, #4]
 80015da:	883a      	ldrh	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8ef      	bhi.n	80015c0 <LCD_FillRect+0x268>
				break;
 80015e0:	e011      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 80015e2:	43eb      	mvns	r3, r5
 80015e4:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	402b      	ands	r3, r5
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	80ba      	strh	r2, [r7, #4]
 80015fe:	883a      	ldrh	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f0      	bhi.n	80015e6 <LCD_FillRect+0x28e>
				break;
 8001604:	bf00      	nop
		}
	}
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000
 8001618:	0801b238 	.word	0x0801b238
 800161c:	0801b240 	.word	0x0801b240
 8001620:	20000444 	.word	0x20000444
 8001624:	20028b60 	.word	0x20028b60

08001628 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	4604      	mov	r4, r0
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4623      	mov	r3, r4
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	4603      	mov	r3, r0
 800163c:	80bb      	strh	r3, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001650:	883a      	ldrh	r2, [r7, #0]
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 800165a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	dd01      	ble.n	8001666 <LCD_Line+0x3e>
 8001662:	2301      	movs	r3, #1
 8001664:	e001      	b.n	800166a <LCD_Line+0x42>
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 800166c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001670:	2b00      	cmp	r3, #0
 8001672:	dd01      	ble.n	8001678 <LCD_Line+0x50>
 8001674:	2301      	movs	r3, #1
 8001676:	e001      	b.n	800167c <LCD_Line+0x54>
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 800167e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	88b9      	ldrh	r1, [r7, #4]
 800168a:	883a      	ldrh	r2, [r7, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fdd1 	bl	8001234 <LCD_VLine>
		return;
 8001692:	e08d      	b.n	80017b0 <LCD_Line+0x188>
	}
	if (dY == 0) {
 8001694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	8879      	ldrh	r1, [r7, #2]
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd76 	bl	8001194 <LCD_HLine>
		return;
 80016a8:	e082      	b.n	80017b0 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80016aa:	8aba      	ldrh	r2, [r7, #20]
 80016ac:	8a3b      	ldrh	r3, [r7, #16]
 80016ae:	fb12 f303 	smulbb	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80016b6:	8a7a      	ldrh	r2, [r7, #18]
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	fb12 f303 	smulbb	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80016c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 80016ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 80016d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016da:	429a      	cmp	r2, r3
 80016dc:	db30      	blt.n	8001740 <LCD_Line+0x118>
		di = dY2 - dX;
 80016de:	897a      	ldrh	r2, [r7, #10]
 80016e0:	8abb      	ldrh	r3, [r7, #20]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 80016e8:	e023      	b.n	8001732 <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbad 	bl	8000e54 <LCD_Pixel>
			X1 += dXsym;
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 8001704:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da05      	bge.n	8001718 <LCD_Line+0xf0>
				di += dY2;
 800170c:	8afa      	ldrh	r2, [r7, #22]
 800170e:	897b      	ldrh	r3, [r7, #10]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
 8001716:	e00c      	b.n	8001732 <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001718:	897a      	ldrh	r2, [r7, #10]
 800171a:	89bb      	ldrh	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b29a      	uxth	r2, r3
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 8001732:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800173a:	429a      	cmp	r2, r3
 800173c:	d1d5      	bne.n	80016ea <LCD_Line+0xc2>
 800173e:	e02f      	b.n	80017a0 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001740:	89ba      	ldrh	r2, [r7, #12]
 8001742:	8a7b      	ldrh	r3, [r7, #18]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 800174a:	e023      	b.n	8001794 <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 800174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001750:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb7c 	bl	8000e54 <LCD_Pixel>
			Y1 += dYsym;
 800175c:	88ba      	ldrh	r2, [r7, #4]
 800175e:	89fb      	ldrh	r3, [r7, #14]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	2b00      	cmp	r3, #0
 800176c:	da05      	bge.n	800177a <LCD_Line+0x152>
				di += dX2;
 800176e:	8afa      	ldrh	r2, [r7, #22]
 8001770:	89bb      	ldrh	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	82fb      	strh	r3, [r7, #22]
 8001778:	e00c      	b.n	8001794 <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 800177a:	89ba      	ldrh	r2, [r7, #12]
 800177c:	897b      	ldrh	r3, [r7, #10]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29a      	uxth	r2, r3
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	8a3b      	ldrh	r3, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 8001794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001798:	f9b7 3000 	ldrsh.w	r3, [r7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d1d5      	bne.n	800174c <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80017a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fb52 	bl	8000e54 <LCD_Pixel>
}
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}

080017b6 <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b088      	sub	sp, #32
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]
 80017c2:	460b      	mov	r3, r1
 80017c4:	81bb      	strh	r3, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	791b      	ldrb	r3, [r3, #4]
 80017ce:	7afa      	ldrb	r2, [r7, #11]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d304      	bcc.n	80017de <LCD_PutChar+0x28>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	7afa      	ldrb	r2, [r7, #11]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d902      	bls.n	80017e4 <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	799b      	ldrb	r3, [r3, #6]
 80017e2:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	7912      	ldrb	r2, [r2, #4]
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	7892      	ldrb	r2, [r2, #2]
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	3307      	adds	r3, #7
 80017fa:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	78db      	ldrb	r3, [r3, #3]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d177      	bne.n	80018f4 <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d829      	bhi.n	8001860 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001810:	e01e      	b.n	8001850 <LCD_PutChar+0x9a>
				pY = Y;
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	617a      	str	r2, [r7, #20]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001820:	e010      	b.n	8001844 <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 8001822:	7efb      	ldrb	r3, [r7, #27]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 800182c:	8bfb      	ldrh	r3, [r7, #30]
 800182e:	8bba      	ldrh	r2, [r7, #28]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb0e 	bl	8000e54 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001838:	7efb      	ldrb	r3, [r7, #27]
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	76fb      	strb	r3, [r7, #27]
					pY++;
 800183e:	8bbb      	ldrh	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 8001844:	7efb      	ldrb	r3, [r7, #27]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1eb      	bne.n	8001822 <LCD_PutChar+0x6c>
				}
				pX++;
 800184a:	8bfb      	ldrh	r3, [r7, #30]
 800184c:	3301      	adds	r3, #1
 800184e:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001850:	8bfa      	ldrh	r2, [r7, #30]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	7809      	ldrb	r1, [r1, #0]
 8001858:	440b      	add	r3, r1
 800185a:	429a      	cmp	r2, r3
 800185c:	dbd9      	blt.n	8001812 <LCD_PutChar+0x5c>
 800185e:	e0c0      	b.n	80019e2 <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001864:	e03e      	b.n	80018e4 <LCD_PutChar+0x12e>
				pY = Y;
 8001866:	89bb      	ldrh	r3, [r7, #12]
 8001868:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 800186a:	e031      	b.n	80018d0 <LCD_PutChar+0x11a>
					bL = 8;
 800186c:	2308      	movs	r3, #8
 800186e:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	617a      	str	r2, [r7, #20]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 800187a:	7efb      	ldrb	r3, [r7, #27]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d022      	beq.n	80018c6 <LCD_PutChar+0x110>
						while (bL) {
 8001880:	e01d      	b.n	80018be <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 8001882:	7efb      	ldrb	r3, [r7, #27]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 800188c:	8bfb      	ldrh	r3, [r7, #30]
 800188e:	8bba      	ldrh	r2, [r7, #28]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fade 	bl	8000e54 <LCD_Pixel>
							}
							tmpCh >>= 1;
 8001898:	7efb      	ldrb	r3, [r7, #27]
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 800189e:	7efb      	ldrb	r3, [r7, #27]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <LCD_PutChar+0xfc>
								pY++;
 80018a4:	8bbb      	ldrh	r3, [r7, #28]
 80018a6:	3301      	adds	r3, #1
 80018a8:	83bb      	strh	r3, [r7, #28]
								bL--;
 80018aa:	7ebb      	ldrb	r3, [r7, #26]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	76bb      	strb	r3, [r7, #26]
 80018b0:	e005      	b.n	80018be <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80018b2:	7ebb      	ldrb	r3, [r7, #26]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	8bbb      	ldrh	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	83bb      	strh	r3, [r7, #28]
								break;
 80018bc:	e008      	b.n	80018d0 <LCD_PutChar+0x11a>
						while (bL) {
 80018be:	7ebb      	ldrb	r3, [r7, #26]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1de      	bne.n	8001882 <LCD_PutChar+0xcc>
 80018c4:	e004      	b.n	80018d0 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80018c6:	7ebb      	ldrb	r3, [r7, #26]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	8bbb      	ldrh	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80018d0:	8bba      	ldrh	r2, [r7, #28]
 80018d2:	89bb      	ldrh	r3, [r7, #12]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	7849      	ldrb	r1, [r1, #1]
 80018d8:	440b      	add	r3, r1
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbc6      	blt.n	800186c <LCD_PutChar+0xb6>
					}
				}
				pX++;
 80018de:	8bfb      	ldrh	r3, [r7, #30]
 80018e0:	3301      	adds	r3, #1
 80018e2:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 80018e4:	8bfa      	ldrh	r2, [r7, #30]
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	7809      	ldrb	r1, [r1, #0]
 80018ec:	440b      	add	r3, r1
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbb9      	blt.n	8001866 <LCD_PutChar+0xb0>
 80018f2:	e076      	b.n	80019e2 <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d829      	bhi.n	8001950 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 80018fc:	89bb      	ldrh	r3, [r7, #12]
 80018fe:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001900:	e01e      	b.n	8001940 <LCD_PutChar+0x18a>
				pX = X;
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001910:	e010      	b.n	8001934 <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 8001912:	7efb      	ldrb	r3, [r7, #27]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 800191c:	8bfb      	ldrh	r3, [r7, #30]
 800191e:	8bba      	ldrh	r2, [r7, #28]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa96 	bl	8000e54 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001928:	7efb      	ldrb	r3, [r7, #27]
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	76fb      	strb	r3, [r7, #27]
					pX++;
 800192e:	8bfb      	ldrh	r3, [r7, #30]
 8001930:	3301      	adds	r3, #1
 8001932:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 8001934:	7efb      	ldrb	r3, [r7, #27]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1eb      	bne.n	8001912 <LCD_PutChar+0x15c>
				}
				pY++;
 800193a:	8bbb      	ldrh	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001940:	8bba      	ldrh	r2, [r7, #28]
 8001942:	89bb      	ldrh	r3, [r7, #12]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	7849      	ldrb	r1, [r1, #1]
 8001948:	440b      	add	r3, r1
 800194a:	429a      	cmp	r2, r3
 800194c:	dbd9      	blt.n	8001902 <LCD_PutChar+0x14c>
 800194e:	e048      	b.n	80019e2 <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001950:	89bb      	ldrh	r3, [r7, #12]
 8001952:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001954:	e03e      	b.n	80019d4 <LCD_PutChar+0x21e>
				pX = X;
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 800195a:	e031      	b.n	80019c0 <LCD_PutChar+0x20a>
					bL = 8;
 800195c:	2308      	movs	r3, #8
 800195e:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	617a      	str	r2, [r7, #20]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 800196a:	7efb      	ldrb	r3, [r7, #27]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d022      	beq.n	80019b6 <LCD_PutChar+0x200>
						while (bL) {
 8001970:	e01d      	b.n	80019ae <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 8001972:	7efb      	ldrb	r3, [r7, #27]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 800197c:	8bfb      	ldrh	r3, [r7, #30]
 800197e:	8bba      	ldrh	r2, [r7, #28]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fa66 	bl	8000e54 <LCD_Pixel>
							}
							tmpCh >>= 1;
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 800198e:	7efb      	ldrb	r3, [r7, #27]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <LCD_PutChar+0x1ec>
								pX++;
 8001994:	8bfb      	ldrh	r3, [r7, #30]
 8001996:	3301      	adds	r3, #1
 8001998:	83fb      	strh	r3, [r7, #30]
								bL--;
 800199a:	7ebb      	ldrb	r3, [r7, #26]
 800199c:	3b01      	subs	r3, #1
 800199e:	76bb      	strb	r3, [r7, #26]
 80019a0:	e005      	b.n	80019ae <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80019a2:	7ebb      	ldrb	r3, [r7, #26]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	8bfb      	ldrh	r3, [r7, #30]
 80019a8:	4413      	add	r3, r2
 80019aa:	83fb      	strh	r3, [r7, #30]
								break;
 80019ac:	e008      	b.n	80019c0 <LCD_PutChar+0x20a>
						while (bL) {
 80019ae:	7ebb      	ldrb	r3, [r7, #26]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1de      	bne.n	8001972 <LCD_PutChar+0x1bc>
 80019b4:	e004      	b.n	80019c0 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80019b6:	7ebb      	ldrb	r3, [r7, #26]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	4413      	add	r3, r2
 80019be:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80019c0:	8bfa      	ldrh	r2, [r7, #30]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	7809      	ldrb	r1, [r1, #0]
 80019c8:	440b      	add	r3, r1
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbc6      	blt.n	800195c <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 80019ce:	8bbb      	ldrh	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 80019d4:	8bba      	ldrh	r2, [r7, #28]
 80019d6:	89bb      	ldrh	r3, [r7, #12]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	7849      	ldrb	r1, [r1, #1]
 80019dc:	440b      	add	r3, r1
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbb9      	blt.n	8001956 <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4603      	mov	r3, r0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	460b      	mov	r3, r1
 8001a04:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <LCD_PutStr+0x6c>)
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001a1c:	e011      	b.n	8001a42 <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	89b9      	ldrh	r1, [r7, #12]
 8001a28:	8af8      	ldrh	r0, [r7, #22]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f7ff fec3 	bl	80017b6 <LCD_PutChar>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	4413      	add	r3, r2
 8001a38:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001a3a:	8afa      	ldrh	r2, [r7, #22]
 8001a3c:	8abb      	ldrh	r3, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d804      	bhi.n	8001a4c <LCD_PutStr+0x58>
	while (*str) {
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e9      	bne.n	8001a1e <LCD_PutStr+0x2a>
 8001a4a:	e000      	b.n	8001a4e <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001a4c:	bf00      	nop
	}

	return (pX - X);
 8001a4e:	8afa      	ldrh	r2, [r7, #22]
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20028b62 	.word	0x20028b62

08001a64 <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60ba      	str	r2, [r7, #8]
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	81fb      	strh	r3, [r7, #14]
 8001a72:	460b      	mov	r3, r1
 8001a74:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da05      	bge.n	8001aa2 <LCD_PutInt+0x3e>
		neg = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <LCD_PutInt+0xc8>)
 8001aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8001aaa:	1099      	asrs	r1, r3, #2
 8001aac:	17d3      	asrs	r3, r2, #31
 8001aae:	1ac9      	subs	r1, r1, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	1ad1      	subs	r1, r2, r3
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	6279      	str	r1, [r7, #36]	; 0x24
 8001ac2:	3230      	adds	r2, #48	; 0x30
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <LCD_PutInt+0xc8>)
 8001acc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad0:	1092      	asrs	r2, r2, #2
 8001ad2:	17db      	asrs	r3, r3, #31
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e1      	bne.n	8001aa2 <LCD_PutInt+0x3e>
	if (neg) {
 8001ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d011      	beq.n	8001b0a <LCD_PutInt+0xa6>
		*pStr++ = '-';
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	627a      	str	r2, [r7, #36]	; 0x24
 8001aec:	222d      	movs	r2, #45	; 0x2d
 8001aee:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001af0:	e00b      	b.n	8001b0a <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	89b9      	ldrh	r1, [r7, #12]
 8001af8:	8c38      	ldrh	r0, [r7, #32]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f7ff fe5b 	bl	80017b6 <LCD_PutChar>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	8c3b      	ldrh	r3, [r7, #32]
 8001b06:	4413      	add	r3, r2
 8001b08:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ec      	bne.n	8001af2 <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001b18:	8c3b      	ldrh	r3, [r7, #32]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b2db      	uxtb	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	66666667 	.word	0x66666667

08001b30 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b08b      	sub	sp, #44	; 0x2c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	81fb      	strh	r3, [r7, #14]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	81bb      	strh	r3, [r7, #12]
 8001b42:	4613      	mov	r3, r2
 8001b44:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	627a      	str	r2, [r7, #36]	; 0x24
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da05      	bge.n	8001b78 <LCD_PutIntF+0x48>
		neg = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	425b      	negs	r3, r3
 8001b76:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <LCD_PutIntF+0x160>)
 8001b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b80:	1099      	asrs	r1, r3, #2
 8001b82:	17d3      	asrs	r3, r2, #31
 8001b84:	1ac9      	subs	r1, r1, r3
 8001b86:	460b      	mov	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	1ad1      	subs	r1, r2, r3
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1c59      	adds	r1, r3, #1
 8001b96:	6279      	str	r1, [r7, #36]	; 0x24
 8001b98:	3230      	adds	r2, #48	; 0x30
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001b9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <LCD_PutIntF+0x160>)
 8001bac:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb0:	1092      	asrs	r2, r2, #2
 8001bb2:	17db      	asrs	r3, r3, #31
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1dc      	bne.n	8001b78 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 8001bbe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d80f      	bhi.n	8001be8 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001bc8:	e009      	b.n	8001bde <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	627a      	str	r2, [r7, #36]	; 0x24
 8001bd0:	2230      	movs	r2, #48	; 0x30
 8001bd2:	701a      	strb	r2, [r3, #0]
			strLen++;
 8001bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001bde:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d9f0      	bls.n	8001bca <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03d      	beq.n	8001c6c <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8001bf6:	222d      	movs	r2, #45	; 0x2d
 8001bf8:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001bfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 8001c04:	e032      	b.n	8001c6c <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	89b9      	ldrh	r1, [r7, #12]
 8001c0c:	8c38      	ldrh	r0, [r7, #32]
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c10:	f7ff fdd1 	bl	80017b6 <LCD_PutChar>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	8c3b      	ldrh	r3, [r7, #32]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <LCD_PutIntF+0x13c>
 8001c24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c2e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d119      	bne.n	8001c6c <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	89bb      	ldrh	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b02      	subs	r3, #2
 8001c46:	b299      	uxth	r1, r3
 8001c48:	8c3b      	ldrh	r3, [r7, #32]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29c      	uxth	r4, r3
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	89bb      	ldrh	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	8c38      	ldrh	r0, [r7, #32]
 8001c60:	4622      	mov	r2, r4
 8001c62:	f7ff fb37 	bl	80012d4 <LCD_Rect>
			pX += 3;
 8001c66:	8c3b      	ldrh	r3, [r7, #32]
 8001c68:	3303      	adds	r3, #3
 8001c6a:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1c5      	bne.n	8001c06 <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 8001c7a:	8c3b      	ldrh	r3, [r7, #32]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b2db      	uxtb	r3, r3
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	372c      	adds	r7, #44	; 0x2c
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	66666667 	.word	0x66666667

08001c94 <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	80fb      	strh	r3, [r7, #6]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80bb      	strh	r3, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	803b      	strh	r3, [r7, #0]
	int i=X;
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	61bb      	str	r3, [r7, #24]
	int j=Y;
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	617b      	str	r3, [r7, #20]
	int size=S;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	613b      	str	r3, [r7, #16]
	int direction = dir;
 8001cbe:	883b      	ldrh	r3, [r7, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <drawUpDownArrow+0x3a>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d11f      	bne.n	8001d0e <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b29c      	uxth	r4, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4622      	mov	r2, r4
 8001d08:	f7ff fb26 	bl	8001358 <LCD_FillRect>
 8001d0c:	e01e      	b.n	8001d4c <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	b29c      	uxth	r4, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4622      	mov	r2, r4
 8001d48:	f7ff fb06 	bl	8001358 <LCD_FillRect>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	f200 8234 	bhi.w	80021bc <drawUpDownArrow+0x528>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <drawUpDownArrow+0xc8>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001e83 	.word	0x08001e83
 8001d64:	08001f99 	.word	0x08001f99
 8001d68:	080020ab 	.word	0x080020ab
	}
	switch(direction)
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e03d      	b.n	8001dee <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b218      	sxth	r0, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b219      	sxth	r1, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b21c      	sxth	r4, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4622      	mov	r2, r4
 8001de4:	f7ff fc20 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbbc      	blt.n	8001d72 <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b218      	sxth	r0, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b219      	sxth	r1, r3
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	b21c      	sxth	r4, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4622      	mov	r2, r4
 8001e38:	f7ff fbf6 	bl	8001628 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b218      	sxth	r0, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b219      	sxth	r1, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	b21c      	sxth	r4, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	f7ff fbd4 	bl	8001628 <LCD_Line>
		break;
 8001e80:	e19c      	b.n	80021bc <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e03d      	b.n	8001f04 <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b218      	sxth	r0, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b219      	sxth	r1, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	b21c      	sxth	r4, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	4622      	mov	r2, r4
 8001efa:	f7ff fb95 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbbc      	blt.n	8001e88 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b218      	sxth	r0, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b219      	sxth	r1, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	b21c      	sxth	r4, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	f7ff fb6b 	bl	8001628 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b218      	sxth	r0, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b219      	sxth	r1, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	b21c      	sxth	r4, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4622      	mov	r2, r4
 8001f92:	f7ff fb49 	bl	8001628 <LCD_Line>
		break;
 8001f96:	e111      	b.n	80021bc <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e03d      	b.n	800201a <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b218      	sxth	r0, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b219      	sxth	r1, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b21c      	sxth	r4, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21b      	sxth	r3, r3
 800200e:	4622      	mov	r2, r4
 8002010:	f7ff fb0a 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	3301      	adds	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbbc      	blt.n	8001f9e <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	b218      	sxth	r0, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	b29b      	uxth	r3, r3
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	b219      	sxth	r1, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	b29b      	uxth	r3, r3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	b29a      	uxth	r2, r3
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21a      	sxth	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	b21b      	sxth	r3, r3
 8002062:	f7ff fae1 	bl	8001628 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	b29b      	uxth	r3, r3
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	b29b      	uxth	r3, r3
 800207a:	b218      	sxth	r0, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	b29a      	uxth	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	b29b      	uxth	r3, r3
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	b29b      	uxth	r3, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	b219      	sxth	r1, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	b29b      	uxth	r3, r3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	b29a      	uxth	r2, r3
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4413      	add	r3, r2
 800209c:	b29b      	uxth	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	f7ff fac0 	bl	8001628 <LCD_Line>
		break;
 80020a8:	e088      	b.n	80021bc <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e03d      	b.n	800212c <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	b29a      	uxth	r2, r3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b218      	sxth	r0, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4413      	add	r3, r2
 80020dc:	b29a      	uxth	r2, r3
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b219      	sxth	r1, r3
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	b21c      	sxth	r4, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	b29a      	uxth	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	b29b      	uxth	r3, r3
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	b21b      	sxth	r3, r3
 8002120:	4622      	mov	r2, r4
 8002122:	f7ff fa81 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbbc      	blt.n	80020b0 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	b29a      	uxth	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	b29b      	uxth	r3, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b29b      	uxth	r3, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29b      	uxth	r3, r3
 800214a:	b218      	sxth	r0, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	b29b      	uxth	r3, r3
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	b219      	sxth	r1, r3
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	b29a      	uxth	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	b29b      	uxth	r3, r3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	b29b      	uxth	r3, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	b29b      	uxth	r3, r3
 800216e:	b21a      	sxth	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	b21b      	sxth	r3, r3
 8002174:	f7ff fa58 	bl	8001628 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	b29a      	uxth	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	b29b      	uxth	r3, r3
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	b218      	sxth	r0, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	b29a      	uxth	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	b29b      	uxth	r3, r3
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	b219      	sxth	r1, r3
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	f7ff fa37 	bl	8001628 <LCD_Line>
		break;
 80021ba:	bf00      	nop
	}
	}

}
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}

080021c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 //static _Bool ON = 1;
 //static _Bool OFF = 0;
  HAL_StatusTypeDef Status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ce:	f005 fdc8 	bl	8007d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d2:	f000 f9a3 	bl	800251c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d6:	f000 ffe9 	bl	80031ac <MX_GPIO_Init>
  MX_DMA_Init();
 80021da:	f000 ff95 	bl	8003108 <MX_DMA_Init>
  MX_ADC1_Init();
 80021de:	f000 fa45 	bl	800266c <MX_ADC1_Init>
  MX_ADC2_Init();
 80021e2:	f000 fb21 	bl	8002828 <MX_ADC2_Init>
  MX_ADC3_Init();
 80021e6:	f000 fb9b 	bl	8002920 <MX_ADC3_Init>
  MX_I2C1_Init();
 80021ea:	f000 fc31 	bl	8002a50 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021ee:	f000 fc6f 	bl	8002ad0 <MX_I2C2_Init>
  MX_I2C3_Init();
 80021f2:	f000 fcad 	bl	8002b50 <MX_I2C3_Init>
  MX_I2C4_Init();
 80021f6:	f000 fced 	bl	8002bd4 <MX_I2C4_Init>
  MX_RTC_Init();
 80021fa:	f000 fd2b 	bl	8002c54 <MX_RTC_Init>
  MX_SPI4_Init();
 80021fe:	f000 fd4f 	bl	8002ca0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002202:	f000 fd8b 	bl	8002d1c <MX_SPI5_Init>
  MX_TIM4_Init();
 8002206:	f000 fdc7 	bl	8002d98 <MX_TIM4_Init>
  MX_TIM5_Init();
 800220a:	f000 fe3d 	bl	8002e88 <MX_TIM5_Init>
  MX_UART4_Init();
 800220e:	f000 febd 	bl	8002f8c <MX_UART4_Init>
  MX_UART5_Init();
 8002212:	f000 feeb 	bl	8002fec <MX_UART5_Init>
  MX_UART7_Init();
 8002216:	f000 ff19 	bl	800304c <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 800221a:	f000 ff47 	bl	80030ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 800221e:	f001 f999 	bl	8003554 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8002222:	220c      	movs	r2, #12
 8002224:	2100      	movs	r1, #0
 8002226:	488a      	ldr	r0, [pc, #552]	; (8002450 <main+0x28c>)
 8002228:	f013 fd9e 	bl	8015d68 <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4988      	ldr	r1, [pc, #544]	; (8002454 <main+0x290>)
 8002232:	4889      	ldr	r0, [pc, #548]	; (8002458 <main+0x294>)
 8002234:	f005 ff6c 	bl	8008110 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <main+0x8a>
  {
  	  DevUI_Error_Handler("ADC1 Failed to start.", Status, 0, 0, true);
 800223e:	78f9      	ldrb	r1, [r7, #3]
 8002240:	2301      	movs	r3, #1
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	2200      	movs	r2, #0
 8002248:	4884      	ldr	r0, [pc, #528]	; (800245c <main+0x298>)
 800224a:	f001 f94d 	bl	80034e8 <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4983      	ldr	r1, [pc, #524]	; (8002460 <main+0x29c>)
 8002254:	4883      	ldr	r0, [pc, #524]	; (8002464 <main+0x2a0>)
 8002256:	f005 ff5b 	bl	8008110 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <main+0xac>
  {
  	  DevUI_Error_Handler("ADC2 Failed to start.", Status, 0, 0, true);
 8002260:	78f9      	ldrb	r1, [r7, #3]
 8002262:	2301      	movs	r3, #1
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2200      	movs	r2, #0
 800226a:	487f      	ldr	r0, [pc, #508]	; (8002468 <main+0x2a4>)
 800226c:	f001 f93c 	bl	80034e8 <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	497d      	ldr	r1, [pc, #500]	; (800246c <main+0x2a8>)
 8002276:	487e      	ldr	r0, [pc, #504]	; (8002470 <main+0x2ac>)
 8002278:	f005 ff4a 	bl	8008110 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <main+0xce>
  {
  	  DevUI_Error_Handler("ADC3 Failed to start.", Status, 0, 0, true);
 8002282:	78f9      	ldrb	r1, [r7, #3]
 8002284:	2301      	movs	r3, #1
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	4879      	ldr	r0, [pc, #484]	; (8002474 <main+0x2b0>)
 800228e:	f001 f92b 	bl	80034e8 <DevUI_Error_Handler>
  }
   int x=1;
 8002292:	2301      	movs	r3, #1
 8002294:	607b      	str	r3, [r7, #4]

   HAL_UART_Receive_DMA(&SPARE_UART, spare_Uart_RX_Buf, sizeof(spare_Uart_RX_Buf));
 8002296:	22c8      	movs	r2, #200	; 0xc8
 8002298:	4977      	ldr	r1, [pc, #476]	; (8002478 <main+0x2b4>)
 800229a:	4878      	ldr	r0, [pc, #480]	; (800247c <main+0x2b8>)
 800229c:	f00b f9d2 	bl	800d644 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&SOC_UART, soc_Uart_RX_Buf, sizeof(soc_Uart_RX_Buf));
 80022a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a4:	4976      	ldr	r1, [pc, #472]	; (8002480 <main+0x2bc>)
 80022a6:	4877      	ldr	r0, [pc, #476]	; (8002484 <main+0x2c0>)
 80022a8:	f00b f9cc 	bl	800d644 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&DEBUG_UART, debug_Uart_RX_Buf, sizeof(debug_Uart_RX_Buf));
 80022ac:	22c8      	movs	r2, #200	; 0xc8
 80022ae:	4976      	ldr	r1, [pc, #472]	; (8002488 <main+0x2c4>)
 80022b0:	4876      	ldr	r0, [pc, #472]	; (800248c <main+0x2c8>)
 80022b2:	f00b f9c7 	bl	800d644 <HAL_UART_Receive_DMA>
//  winbondSPIDeviceIDRead(hspi5,(uint8_t*)spiDataRead);
//  //char buf[30];
//  spareUartTransmitRead("Lets see what comes out!");
//  x=0;

  configureLEDDriver();
 80022b6:	f001 fc45 	bl	8003b44 <configureLEDDriver>
  
    setErrorLED(0,ON);
 80022ba:	2101      	movs	r1, #1
 80022bc:	2000      	movs	r0, #0
 80022be:	f001 fcf3 	bl	8003ca8 <setErrorLED>
    HAL_Delay(400);
 80022c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022c6:	f005 fd79 	bl	8007dbc <HAL_Delay>
    setErrorLED(1,OFF);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2001      	movs	r0, #1
 80022ce:	f001 fceb 	bl	8003ca8 <setErrorLED>
    setErrorLED(8,ON);
 80022d2:	2101      	movs	r1, #1
 80022d4:	2008      	movs	r0, #8
 80022d6:	f001 fce7 	bl	8003ca8 <setErrorLED>
    HAL_Delay(400);
 80022da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022de:	f005 fd6d 	bl	8007dbc <HAL_Delay>
    setErrorLED(8,OFF);
 80022e2:	2100      	movs	r1, #0
 80022e4:	2008      	movs	r0, #8
 80022e6:	f001 fcdf 	bl	8003ca8 <setErrorLED>
    setErrorLED(9,ON);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2009      	movs	r0, #9
 80022ee:	f001 fcdb 	bl	8003ca8 <setErrorLED>
    HAL_Delay(400);
 80022f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022f6:	f005 fd61 	bl	8007dbc <HAL_Delay>
    setErrorLED(8,ON);
 80022fa:	2101      	movs	r1, #1
 80022fc:	2008      	movs	r0, #8
 80022fe:	f001 fcd3 	bl	8003ca8 <setErrorLED>
    setErrorLED(9,ON);
 8002302:	2101      	movs	r1, #1
 8002304:	2009      	movs	r0, #9
 8002306:	f001 fccf 	bl	8003ca8 <setErrorLED>
    HAL_Delay(400);
 800230a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800230e:	f005 fd55 	bl	8007dbc <HAL_Delay>
    setErrorLED(9,OFF);
 8002312:	2100      	movs	r1, #0
 8002314:	2009      	movs	r0, #9
 8002316:	f001 fcc7 	bl	8003ca8 <setErrorLED>
//    EX_SW_OFF;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800231a:	f00c f9ad 	bl	800e678 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 800231e:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <main+0x2cc>)
 8002320:	2100      	movs	r1, #0
 8002322:	485c      	ldr	r0, [pc, #368]	; (8002494 <main+0x2d0>)
 8002324:	f00c fa12 	bl	800e74c <osThreadNew>
 8002328:	4603      	mov	r3, r0
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <main+0x2d4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 800232e:	4a5b      	ldr	r2, [pc, #364]	; (800249c <main+0x2d8>)
 8002330:	2100      	movs	r1, #0
 8002332:	485b      	ldr	r0, [pc, #364]	; (80024a0 <main+0x2dc>)
 8002334:	f00c fa0a 	bl	800e74c <osThreadNew>
 8002338:	4603      	mov	r3, r0
 800233a:	4a5a      	ldr	r2, [pc, #360]	; (80024a4 <main+0x2e0>)
 800233c:	6013      	str	r3, [r2, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <main+0x2e4>)
 8002340:	2100      	movs	r1, #0
 8002342:	485a      	ldr	r0, [pc, #360]	; (80024ac <main+0x2e8>)
 8002344:	f00c fa02 	bl	800e74c <osThreadNew>
 8002348:	4603      	mov	r3, r0
 800234a:	4a59      	ldr	r2, [pc, #356]	; (80024b0 <main+0x2ec>)
 800234c:	6013      	str	r3, [r2, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 800234e:	4a59      	ldr	r2, [pc, #356]	; (80024b4 <main+0x2f0>)
 8002350:	2100      	movs	r1, #0
 8002352:	4859      	ldr	r0, [pc, #356]	; (80024b8 <main+0x2f4>)
 8002354:	f00c f9fa 	bl	800e74c <osThreadNew>
 8002358:	4603      	mov	r3, r0
 800235a:	4a58      	ldr	r2, [pc, #352]	; (80024bc <main+0x2f8>)
 800235c:	6013      	str	r3, [r2, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 800235e:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <main+0x2fc>)
 8002360:	2100      	movs	r1, #0
 8002362:	4858      	ldr	r0, [pc, #352]	; (80024c4 <main+0x300>)
 8002364:	f00c f9f2 	bl	800e74c <osThreadNew>
 8002368:	4603      	mov	r3, r0
 800236a:	4a57      	ldr	r2, [pc, #348]	; (80024c8 <main+0x304>)
 800236c:	6013      	str	r3, [r2, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 800236e:	4a57      	ldr	r2, [pc, #348]	; (80024cc <main+0x308>)
 8002370:	2100      	movs	r1, #0
 8002372:	4857      	ldr	r0, [pc, #348]	; (80024d0 <main+0x30c>)
 8002374:	f00c f9ea 	bl	800e74c <osThreadNew>
 8002378:	4603      	mov	r3, r0
 800237a:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <main+0x310>)
 800237c:	6013      	str	r3, [r2, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 800237e:	4a56      	ldr	r2, [pc, #344]	; (80024d8 <main+0x314>)
 8002380:	2100      	movs	r1, #0
 8002382:	4856      	ldr	r0, [pc, #344]	; (80024dc <main+0x318>)
 8002384:	f00c f9e2 	bl	800e74c <osThreadNew>
 8002388:	4603      	mov	r3, r0
 800238a:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <main+0x31c>)
 800238c:	6013      	str	r3, [r2, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 800238e:	4a55      	ldr	r2, [pc, #340]	; (80024e4 <main+0x320>)
 8002390:	2100      	movs	r1, #0
 8002392:	4855      	ldr	r0, [pc, #340]	; (80024e8 <main+0x324>)
 8002394:	f00c f9da 	bl	800e74c <osThreadNew>
 8002398:	4603      	mov	r3, r0
 800239a:	4a54      	ldr	r2, [pc, #336]	; (80024ec <main+0x328>)
 800239c:	6013      	str	r3, [r2, #0]

  /* creation of socUart */
  socUartHandle = osThreadNew(startSocUart, NULL, &socUart_attributes);
 800239e:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <main+0x32c>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4854      	ldr	r0, [pc, #336]	; (80024f4 <main+0x330>)
 80023a4:	f00c f9d2 	bl	800e74c <osThreadNew>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <main+0x334>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* creation of debugUart */
  debugUartHandle = osThreadNew(startDebugUart, NULL, &debugUart_attributes);
 80023ae:	4a53      	ldr	r2, [pc, #332]	; (80024fc <main+0x338>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	4853      	ldr	r0, [pc, #332]	; (8002500 <main+0x33c>)
 80023b4:	f00c f9ca 	bl	800e74c <osThreadNew>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a52      	ldr	r2, [pc, #328]	; (8002504 <main+0x340>)
 80023bc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Fault_Events */
  Fault_EventsHandle = osEventFlagsNew(&Fault_Events_attributes);
 80023be:	4852      	ldr	r0, [pc, #328]	; (8002508 <main+0x344>)
 80023c0:	f00c fa9e 	bl	800e900 <osEventFlagsNew>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a51      	ldr	r2, [pc, #324]	; (800250c <main+0x348>)
 80023c8:	6013      	str	r3, [r2, #0]
	   bit 8: fault 9
	   bit 9: standard boot
	   bit 10: edl boot
	   bit 11: uefi boot
   */
  if (Fault_EventsHandle == NULL)
 80023ca:	4b50      	ldr	r3, [pc, #320]	; (800250c <main+0x348>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <main+0x220>
  {
	  // Event flags object not created, handle failure.
	  DevUI_Error_Handler("Faults Event Flag could not be created.\r\n",HAL_ERROR,0,0,true);
 80023d2:	2301      	movs	r3, #1
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	484c      	ldr	r0, [pc, #304]	; (8002510 <main+0x34c>)
 80023de:	f001 f883 	bl	80034e8 <DevUI_Error_Handler>
 80023e2:	e006      	b.n	80023f2 <main+0x22e>
  }
  else
  {
	  // clear all event flags
	  osEventFlagsClear(Fault_EventsHandle, 0xFFFF);
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <main+0x348>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00c fad9 	bl	800e9a4 <osEventFlagsClear>
  }
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80023f2:	f00c f975 	bl	800e6e0 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 80023f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fa:	f005 fcdf 	bl	8007dbc <HAL_Delay>
	  if (!x) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d112      	bne.n	800242a <main+0x266>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240a:	4842      	ldr	r0, [pc, #264]	; (8002514 <main+0x350>)
 800240c:	f007 f956 	bl	80096bc <HAL_GPIO_WritePin>
		  x=1;
 8002410:	2301      	movs	r3, #1
 8002412:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	2110      	movs	r1, #16
 8002418:	483f      	ldr	r0, [pc, #252]	; (8002518 <main+0x354>)
 800241a:	f007 f94f 	bl	80096bc <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2110      	movs	r1, #16
 8002422:	483d      	ldr	r0, [pc, #244]	; (8002518 <main+0x354>)
 8002424:	f007 f94a 	bl	80096bc <HAL_GPIO_WritePin>
 8002428:	e7e5      	b.n	80023f6 <main+0x232>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002430:	4838      	ldr	r0, [pc, #224]	; (8002514 <main+0x350>)
 8002432:	f007 f943 	bl	80096bc <HAL_GPIO_WritePin>
		  x=0;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
 800243c:	2110      	movs	r1, #16
 800243e:	4836      	ldr	r0, [pc, #216]	; (8002518 <main+0x354>)
 8002440:	f007 f93c 	bl	80096bc <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	2110      	movs	r1, #16
 8002448:	4833      	ldr	r0, [pc, #204]	; (8002518 <main+0x354>)
 800244a:	f007 f937 	bl	80096bc <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800244e:	e7d2      	b.n	80023f6 <main+0x232>
 8002450:	2002e92c 	.word	0x2002e92c
 8002454:	2002976c 	.word	0x2002976c
 8002458:	2002bf00 	.word	0x2002bf00
 800245c:	0801a4dc 	.word	0x0801a4dc
 8002460:	2002e9c4 	.word	0x2002e9c4
 8002464:	20028dfc 	.word	0x20028dfc
 8002468:	0801a4f4 	.word	0x0801a4f4
 800246c:	2002c21c 	.word	0x2002c21c
 8002470:	2002bfac 	.word	0x2002bfac
 8002474:	0801a50c 	.word	0x0801a50c
 8002478:	2002bff4 	.word	0x2002bff4
 800247c:	2002e940 	.word	0x2002e940
 8002480:	20029384 	.word	0x20029384
 8002484:	2002be80 	.word	0x2002be80
 8002488:	2002c154 	.word	0x2002c154
 800248c:	20028cc4 	.word	0x20028cc4
 8002490:	0801b248 	.word	0x0801b248
 8002494:	08004949 	.word	0x08004949
 8002498:	2002e9c0 	.word	0x2002e9c0
 800249c:	0801b26c 	.word	0x0801b26c
 80024a0:	08004995 	.word	0x08004995
 80024a4:	20031198 	.word	0x20031198
 80024a8:	0801b290 	.word	0x0801b290
 80024ac:	08004a71 	.word	0x08004a71
 80024b0:	20031194 	.word	0x20031194
 80024b4:	0801b2b4 	.word	0x0801b2b4
 80024b8:	08004b19 	.word	0x08004b19
 80024bc:	2002bfa8 	.word	0x2002bfa8
 80024c0:	0801b2d8 	.word	0x0801b2d8
 80024c4:	08004c5d 	.word	0x08004c5d
 80024c8:	2002c150 	.word	0x2002c150
 80024cc:	0801b2fc 	.word	0x0801b2fc
 80024d0:	08004ddd 	.word	0x08004ddd
 80024d4:	20028dec 	.word	0x20028dec
 80024d8:	0801b320 	.word	0x0801b320
 80024dc:	08004e51 	.word	0x08004e51
 80024e0:	2002e938 	.word	0x2002e938
 80024e4:	0801b344 	.word	0x0801b344
 80024e8:	08005061 	.word	0x08005061
 80024ec:	2002be7c 	.word	0x2002be7c
 80024f0:	0801b368 	.word	0x0801b368
 80024f4:	080050d9 	.word	0x080050d9
 80024f8:	2002e93c 	.word	0x2002e93c
 80024fc:	0801b38c 	.word	0x0801b38c
 8002500:	08005121 	.word	0x08005121
 8002504:	2002c0bc 	.word	0x2002c0bc
 8002508:	0801b3b0 	.word	0x0801b3b0
 800250c:	20028d44 	.word	0x20028d44
 8002510:	0801a524 	.word	0x0801a524
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000

0800251c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0b8      	sub	sp, #224	; 0xe0
 8002520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002522:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002526:	2234      	movs	r2, #52	; 0x34
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f013 fc1c 	bl	8015d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002530:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	2290      	movs	r2, #144	; 0x90
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f013 fc0d 	bl	8015d68 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800254e:	f008 f9dd 	bl	800a90c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <SystemClock_Config+0x144>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	4a42      	ldr	r2, [pc, #264]	; (8002660 <SystemClock_Config+0x144>)
 8002558:	f023 0318 	bic.w	r3, r3, #24
 800255c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <SystemClock_Config+0x144>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a3f      	ldr	r2, [pc, #252]	; (8002660 <SystemClock_Config+0x144>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <SystemClock_Config+0x144>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <SystemClock_Config+0x148>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800257e:	4a39      	ldr	r2, [pc, #228]	; (8002664 <SystemClock_Config+0x148>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <SystemClock_Config+0x148>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002592:	2305      	movs	r3, #5
 8002594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800259c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 80025b4:	230f      	movs	r3, #15
 80025b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80025ba:	2390      	movs	r3, #144	; 0x90
 80025bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80025c6:	2305      	movs	r3, #5
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025d0:	4618      	mov	r0, r3
 80025d2:	f008 f9ab 	bl	800a92c <HAL_RCC_OscConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025dc:	f002 ff0c 	bl	80053f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e0:	230f      	movs	r3, #15
 80025e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002602:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002606:	2103      	movs	r1, #3
 8002608:	4618      	mov	r0, r3
 800260a:	f008 fc3d 	bl	800ae88 <HAL_RCC_ClockConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002614:	f002 fef0 	bl	80053f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <SystemClock_Config+0x14c>)
 800261a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800261c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002620:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002622:	2300      	movs	r3, #0
 8002624:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002626:	2300      	movs	r3, #0
 8002628:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800262a:	2300      	movs	r3, #0
 800262c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800262e:	2300      	movs	r3, #0
 8002630:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002632:	2300      	movs	r3, #0
 8002634:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002636:	2300      	movs	r3, #0
 8002638:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800263a:	2300      	movs	r3, #0
 800263c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4618      	mov	r0, r3
 800264a:	f008 fe25 	bl	800b298 <HAL_RCCEx_PeriphCLKConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002654:	f002 fed0 	bl	80053f8 <Error_Handler>
  }
}
 8002658:	bf00      	nop
 800265a:	37e0      	adds	r7, #224	; 0xe0
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	0023d620 	.word	0x0023d620

0800266c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002672:	463b      	mov	r3, r7
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002680:	4a67      	ldr	r2, [pc, #412]	; (8002820 <MX_ADC1_Init+0x1b4>)
 8002682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002684:	4b65      	ldr	r3, [pc, #404]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800268a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800268c:	4b63      	ldr	r3, [pc, #396]	; (800281c <MX_ADC1_Init+0x1b0>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002692:	4b62      	ldr	r3, [pc, #392]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002694:	2201      	movs	r2, #1
 8002696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002698:	4b60      	ldr	r3, [pc, #384]	; (800281c <MX_ADC1_Init+0x1b0>)
 800269a:	2201      	movs	r2, #1
 800269c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800269e:	4b5f      	ldr	r3, [pc, #380]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026a6:	4b5d      	ldr	r3, [pc, #372]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026ac:	4b5b      	ldr	r3, [pc, #364]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026ae:	4a5d      	ldr	r2, [pc, #372]	; (8002824 <MX_ADC1_Init+0x1b8>)
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80026b8:	4b58      	ldr	r3, [pc, #352]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026ba:	220b      	movs	r2, #11
 80026bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026c6:	4b55      	ldr	r3, [pc, #340]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026cc:	4853      	ldr	r0, [pc, #332]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026ce:	f005 fb99 	bl	8007e04 <HAL_ADC_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80026d8:	f002 fe8e 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026dc:	2303      	movs	r3, #3
 80026de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026e0:	2301      	movs	r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80026e4:	2307      	movs	r3, #7
 80026e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e8:	463b      	mov	r3, r7
 80026ea:	4619      	mov	r1, r3
 80026ec:	484b      	ldr	r0, [pc, #300]	; (800281c <MX_ADC1_Init+0x1b0>)
 80026ee:	f005 fe65 	bl	80083bc <HAL_ADC_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80026f8:	f002 fe7e 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026fc:	2304      	movs	r3, #4
 80026fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002700:	2302      	movs	r3, #2
 8002702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002704:	463b      	mov	r3, r7
 8002706:	4619      	mov	r1, r3
 8002708:	4844      	ldr	r0, [pc, #272]	; (800281c <MX_ADC1_Init+0x1b0>)
 800270a:	f005 fe57 	bl	80083bc <HAL_ADC_ConfigChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002714:	f002 fe70 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002718:	2305      	movs	r3, #5
 800271a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800271c:	2303      	movs	r3, #3
 800271e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	483d      	ldr	r0, [pc, #244]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002726:	f005 fe49 	bl	80083bc <HAL_ADC_ConfigChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002730:	f002 fe62 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002734:	2306      	movs	r3, #6
 8002736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002738:	2304      	movs	r3, #4
 800273a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800273c:	463b      	mov	r3, r7
 800273e:	4619      	mov	r1, r3
 8002740:	4836      	ldr	r0, [pc, #216]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002742:	f005 fe3b 	bl	80083bc <HAL_ADC_ConfigChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800274c:	f002 fe54 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002750:	2307      	movs	r3, #7
 8002752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002754:	2305      	movs	r3, #5
 8002756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002758:	463b      	mov	r3, r7
 800275a:	4619      	mov	r1, r3
 800275c:	482f      	ldr	r0, [pc, #188]	; (800281c <MX_ADC1_Init+0x1b0>)
 800275e:	f005 fe2d 	bl	80083bc <HAL_ADC_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002768:	f002 fe46 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800276c:	2308      	movs	r3, #8
 800276e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002770:	2306      	movs	r3, #6
 8002772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002774:	463b      	mov	r3, r7
 8002776:	4619      	mov	r1, r3
 8002778:	4828      	ldr	r0, [pc, #160]	; (800281c <MX_ADC1_Init+0x1b0>)
 800277a:	f005 fe1f 	bl	80083bc <HAL_ADC_ConfigChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002784:	f002 fe38 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002788:	2309      	movs	r3, #9
 800278a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800278c:	2307      	movs	r3, #7
 800278e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002790:	463b      	mov	r3, r7
 8002792:	4619      	mov	r1, r3
 8002794:	4821      	ldr	r0, [pc, #132]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002796:	f005 fe11 	bl	80083bc <HAL_ADC_ConfigChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80027a0:	f002 fe2a 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80027a4:	230a      	movs	r3, #10
 80027a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ac:	463b      	mov	r3, r7
 80027ae:	4619      	mov	r1, r3
 80027b0:	481a      	ldr	r0, [pc, #104]	; (800281c <MX_ADC1_Init+0x1b0>)
 80027b2:	f005 fe03 	bl	80083bc <HAL_ADC_ConfigChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80027bc:	f002 fe1c 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80027c0:	230b      	movs	r3, #11
 80027c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80027c4:	2309      	movs	r3, #9
 80027c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c8:	463b      	mov	r3, r7
 80027ca:	4619      	mov	r1, r3
 80027cc:	4813      	ldr	r0, [pc, #76]	; (800281c <MX_ADC1_Init+0x1b0>)
 80027ce:	f005 fdf5 	bl	80083bc <HAL_ADC_ConfigChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80027d8:	f002 fe0e 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80027dc:	230c      	movs	r3, #12
 80027de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80027e0:	230a      	movs	r3, #10
 80027e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e4:	463b      	mov	r3, r7
 80027e6:	4619      	mov	r1, r3
 80027e8:	480c      	ldr	r0, [pc, #48]	; (800281c <MX_ADC1_Init+0x1b0>)
 80027ea:	f005 fde7 	bl	80083bc <HAL_ADC_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80027f4:	f002 fe00 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80027f8:	230d      	movs	r3, #13
 80027fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80027fc:	230b      	movs	r3, #11
 80027fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002800:	463b      	mov	r3, r7
 8002802:	4619      	mov	r1, r3
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_ADC1_Init+0x1b0>)
 8002806:	f005 fdd9 	bl	80083bc <HAL_ADC_ConfigChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002810:	f002 fdf2 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2002bf00 	.word	0x2002bf00
 8002820:	40012000 	.word	0x40012000
 8002824:	0f000001 	.word	0x0f000001

08002828 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800282e:	463b      	mov	r3, r7
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <MX_ADC2_Init+0xec>)
 800283c:	4a36      	ldr	r2, [pc, #216]	; (8002918 <MX_ADC2_Init+0xf0>)
 800283e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002840:	4b34      	ldr	r3, [pc, #208]	; (8002914 <MX_ADC2_Init+0xec>)
 8002842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002846:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <MX_ADC2_Init+0xec>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <MX_ADC2_Init+0xec>)
 8002850:	2201      	movs	r2, #1
 8002852:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <MX_ADC2_Init+0xec>)
 8002856:	2201      	movs	r2, #1
 8002858:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800285a:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <MX_ADC2_Init+0xec>)
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <MX_ADC2_Init+0xec>)
 8002864:	2200      	movs	r2, #0
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <MX_ADC2_Init+0xec>)
 800286a:	4a2c      	ldr	r2, [pc, #176]	; (800291c <MX_ADC2_Init+0xf4>)
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <MX_ADC2_Init+0xec>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <MX_ADC2_Init+0xec>)
 8002876:	2204      	movs	r2, #4
 8002878:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <MX_ADC2_Init+0xec>)
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <MX_ADC2_Init+0xec>)
 8002884:	2201      	movs	r2, #1
 8002886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002888:	4822      	ldr	r0, [pc, #136]	; (8002914 <MX_ADC2_Init+0xec>)
 800288a:	f005 fabb 	bl	8007e04 <HAL_ADC_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002894:	f002 fdb0 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800289c:	2301      	movs	r3, #1
 800289e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80028a0:	2307      	movs	r3, #7
 80028a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028a4:	463b      	mov	r3, r7
 80028a6:	4619      	mov	r1, r3
 80028a8:	481a      	ldr	r0, [pc, #104]	; (8002914 <MX_ADC2_Init+0xec>)
 80028aa:	f005 fd87 	bl	80083bc <HAL_ADC_ConfigChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80028b4:	f002 fda0 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028bc:	2302      	movs	r3, #2
 80028be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	4619      	mov	r1, r3
 80028c4:	4813      	ldr	r0, [pc, #76]	; (8002914 <MX_ADC2_Init+0xec>)
 80028c6:	f005 fd79 	bl	80083bc <HAL_ADC_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80028d0:	f002 fd92 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80028d4:	230e      	movs	r3, #14
 80028d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028d8:	2303      	movs	r3, #3
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <MX_ADC2_Init+0xec>)
 80028e2:	f005 fd6b 	bl	80083bc <HAL_ADC_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80028ec:	f002 fd84 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80028f0:	230f      	movs	r3, #15
 80028f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028f4:	2304      	movs	r3, #4
 80028f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028f8:	463b      	mov	r3, r7
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_ADC2_Init+0xec>)
 80028fe:	f005 fd5d 	bl	80083bc <HAL_ADC_ConfigChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002908:	f002 fd76 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20028dfc 	.word	0x20028dfc
 8002918:	40012100 	.word	0x40012100
 800291c:	0f000001 	.word	0x0f000001

08002920 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002926:	463b      	mov	r3, r7
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002934:	4a44      	ldr	r2, [pc, #272]	; (8002a48 <MX_ADC3_Init+0x128>)
 8002936:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002938:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <MX_ADC3_Init+0x124>)
 800293a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800293e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002948:	2201      	movs	r2, #1
 800294a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800294c:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <MX_ADC3_Init+0x124>)
 800294e:	2201      	movs	r2, #1
 8002950:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002952:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800295a:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <MX_ADC3_Init+0x124>)
 800295c:	2200      	movs	r2, #0
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002960:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002962:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <MX_ADC3_Init+0x12c>)
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <MX_ADC3_Init+0x124>)
 800296e:	2206      	movs	r2, #6
 8002970:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <MX_ADC3_Init+0x124>)
 800297c:	2201      	movs	r2, #1
 800297e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002980:	4830      	ldr	r0, [pc, #192]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002982:	f005 fa3f 	bl	8007e04 <HAL_ADC_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800298c:	f002 fd34 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002990:	2302      	movs	r3, #2
 8002992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002994:	2301      	movs	r3, #1
 8002996:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002998:	2307      	movs	r3, #7
 800299a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800299c:	463b      	mov	r3, r7
 800299e:	4619      	mov	r1, r3
 80029a0:	4828      	ldr	r0, [pc, #160]	; (8002a44 <MX_ADC3_Init+0x124>)
 80029a2:	f005 fd0b 	bl	80083bc <HAL_ADC_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80029ac:	f002 fd24 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029b0:	2304      	movs	r3, #4
 80029b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80029b4:	2302      	movs	r3, #2
 80029b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029b8:	463b      	mov	r3, r7
 80029ba:	4619      	mov	r1, r3
 80029bc:	4821      	ldr	r0, [pc, #132]	; (8002a44 <MX_ADC3_Init+0x124>)
 80029be:	f005 fcfd 	bl	80083bc <HAL_ADC_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80029c8:	f002 fd16 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029cc:	2305      	movs	r3, #5
 80029ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029d0:	2303      	movs	r3, #3
 80029d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029d4:	463b      	mov	r3, r7
 80029d6:	4619      	mov	r1, r3
 80029d8:	481a      	ldr	r0, [pc, #104]	; (8002a44 <MX_ADC3_Init+0x124>)
 80029da:	f005 fcef 	bl	80083bc <HAL_ADC_ConfigChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80029e4:	f002 fd08 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80029e8:	2306      	movs	r3, #6
 80029ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80029ec:	2304      	movs	r3, #4
 80029ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029f0:	463b      	mov	r3, r7
 80029f2:	4619      	mov	r1, r3
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <MX_ADC3_Init+0x124>)
 80029f6:	f005 fce1 	bl	80083bc <HAL_ADC_ConfigChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8002a00:	f002 fcfa 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002a04:	2307      	movs	r3, #7
 8002a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002a08:	2305      	movs	r3, #5
 8002a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002a12:	f005 fcd3 	bl	80083bc <HAL_ADC_ConfigChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002a1c:	f002 fcec 	bl	80053f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a20:	2308      	movs	r3, #8
 8002a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002a24:	2306      	movs	r3, #6
 8002a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a28:	463b      	mov	r3, r7
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_ADC3_Init+0x124>)
 8002a2e:	f005 fcc5 	bl	80083bc <HAL_ADC_ConfigChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002a38:	f002 fcde 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2002bfac 	.word	0x2002bfac
 8002a48:	40012200 	.word	0x40012200
 8002a4c:	0f000001 	.word	0x0f000001

08002a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a56:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <MX_I2C1_Init+0x78>)
 8002a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <MX_I2C1_Init+0x7c>)
 8002a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a8a:	480e      	ldr	r0, [pc, #56]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a8c:	f006 fe6e 	bl	800976c <HAL_I2C_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a96:	f002 fcaf 	bl	80053f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002a9e:	f007 fd35 	bl	800a50c <HAL_I2CEx_ConfigAnalogFilter>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002aa8:	f002 fca6 	bl	80053f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002aac:	2100      	movs	r1, #0
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_I2C1_Init+0x74>)
 8002ab0:	f007 fd77 	bl	800a5a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002aba:	f002 fc9d 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20028e44 	.word	0x20028e44
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	007074af 	.word	0x007074af

08002ad0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <MX_I2C2_Init+0x78>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <MX_I2C2_Init+0x7c>)
 8002ade:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002b0c:	f006 fe2e 	bl	800976c <HAL_I2C_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002b16:	f002 fc6f 	bl	80053f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002b1e:	f007 fcf5 	bl	800a50c <HAL_I2CEx_ConfigAnalogFilter>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002b28:	f002 fc66 	bl	80053f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_I2C2_Init+0x74>)
 8002b30:	f007 fd37 	bl	800a5a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002b3a:	f002 fc5d 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20029294 	.word	0x20029294
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	007074af 	.word	0x007074af

08002b50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <MX_I2C3_Init+0x7c>)
 8002b58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <MX_I2C3_Init+0x80>)
 8002b5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b62:	2298      	movs	r2, #152	; 0x98
 8002b64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b8a:	480f      	ldr	r0, [pc, #60]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b8c:	f006 fdee 	bl	800976c <HAL_I2C_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002b96:	f002 fc2f 	bl	80053f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	480a      	ldr	r0, [pc, #40]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002b9e:	f007 fcb5 	bl	800a50c <HAL_I2CEx_ConfigAnalogFilter>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002ba8:	f002 fc26 	bl	80053f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bac:	2100      	movs	r1, #0
 8002bae:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <MX_I2C3_Init+0x78>)
 8002bb0:	f007 fcf7 	bl	800a5a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002bba:	f002 fc1d 	bl	80053f8 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002bbe:	2004      	movs	r0, #4
 8002bc0:	f007 fd3c 	bl	800a63c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20028c2c 	.word	0x20028c2c
 8002bcc:	40005c00 	.word	0x40005c00
 8002bd0:	100029fe 	.word	0x100029fe

08002bd4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <MX_I2C4_Init+0x78>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <MX_I2C4_Init+0x7c>)
 8002be2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002c0e:	480e      	ldr	r0, [pc, #56]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002c10:	f006 fdac 	bl	800976c <HAL_I2C_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002c1a:	f002 fbed 	bl	80053f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002c22:	f007 fc73 	bl	800a50c <HAL_I2CEx_ConfigAnalogFilter>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002c2c:	f002 fbe4 	bl	80053f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002c30:	2100      	movs	r1, #0
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_I2C4_Init+0x74>)
 8002c34:	f007 fcb5 	bl	800a5a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002c3e:	f002 fbdb 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20028c78 	.word	0x20028c78
 8002c4c:	40006000 	.word	0x40006000
 8002c50:	007074af 	.word	0x007074af

08002c54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <MX_RTC_Init+0x48>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c66:	227f      	movs	r2, #127	; 0x7f
 8002c68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c82:	4805      	ldr	r0, [pc, #20]	; (8002c98 <MX_RTC_Init+0x44>)
 8002c84:	f008 ff2e 	bl	800bae4 <HAL_RTC_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002c8e:	f002 fbb3 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2002c130 	.word	0x2002c130
 8002c9c:	40002800 	.word	0x40002800

08002ca0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <MX_SPI4_Init+0x78>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cbe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cee:	2207      	movs	r2, #7
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <MX_SPI4_Init+0x74>)
 8002d00:	f008 ff98 	bl	800bc34 <HAL_SPI_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002d0a:	f002 fb75 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20028b68 	.word	0x20028b68
 8002d18:	40013400 	.word	0x40013400

08002d1c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <MX_SPI5_Init+0x78>)
 8002d24:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d2c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d3a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d4e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d52:	2218      	movs	r2, #24
 8002d54:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d6a:	2207      	movs	r2, #7
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_SPI5_Init+0x74>)
 8002d7c:	f008 ff5a 	bl	800bc34 <HAL_SPI_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002d86:	f002 fb37 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20028d48 	.word	0x20028d48
 8002d94:	40015000 	.word	0x40015000

08002d98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	463b      	mov	r3, r7
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dca:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <MX_TIM4_Init+0xec>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ddc:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002df0:	4823      	ldr	r0, [pc, #140]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002df2:	f009 fb53 	bl	800c49c <HAL_TIM_Base_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002dfc:	f002 fafc 	bl	80053f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481c      	ldr	r0, [pc, #112]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002e0e:	f009 fe07 	bl	800ca20 <HAL_TIM_ConfigClockSource>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002e18:	f002 faee 	bl	80053f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e1c:	4818      	ldr	r0, [pc, #96]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002e1e:	f009 fb93 	bl	800c548 <HAL_TIM_PWM_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002e28:	f002 fae6 	bl	80053f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4811      	ldr	r0, [pc, #68]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002e3c:	f00a fa76 	bl	800d32c <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002e46:	f002 fad7 	bl	80053f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4a:	2360      	movs	r3, #96	; 0x60
 8002e4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4807      	ldr	r0, [pc, #28]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002e62:	f009 fcc5 	bl	800c7f0 <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002e6c:	f002 fac4 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <MX_TIM4_Init+0xe8>)
 8002e72:	f004 f82b 	bl	8006ecc <HAL_TIM_MspPostInit>

}
 8002e76:	bf00      	nop
 8002e78:	3738      	adds	r7, #56	; 0x38
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20028dac 	.word	0x20028dac
 8002e84:	40000800 	.word	0x40000800

08002e88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	615a      	str	r2, [r3, #20]
 8002eb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002ebc:	4a32      	ldr	r2, [pc, #200]	; (8002f88 <MX_TIM5_Init+0x100>)
 8002ebe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002ece:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ee0:	4828      	ldr	r0, [pc, #160]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002ee2:	f009 fadb 	bl	800c49c <HAL_TIM_Base_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002eec:	f002 fa84 	bl	80053f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002efa:	4619      	mov	r1, r3
 8002efc:	4821      	ldr	r0, [pc, #132]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002efe:	f009 fd8f 	bl	800ca20 <HAL_TIM_ConfigClockSource>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002f08:	f002 fa76 	bl	80053f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002f0c:	481d      	ldr	r0, [pc, #116]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002f0e:	f009 fb1b 	bl	800c548 <HAL_TIM_PWM_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002f18:	f002 fa6e 	bl	80053f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4816      	ldr	r0, [pc, #88]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002f2c:	f00a f9fe 	bl	800d32c <HAL_TIMEx_MasterConfigSynchronization>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002f36:	f002 fa5f 	bl	80053f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f3a:	2360      	movs	r3, #96	; 0x60
 8002f3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	480c      	ldr	r0, [pc, #48]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002f52:	f009 fc4d 	bl	800c7f0 <HAL_TIM_PWM_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002f5c:	f002 fa4c 	bl	80053f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f60:	463b      	mov	r3, r7
 8002f62:	2204      	movs	r2, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4807      	ldr	r0, [pc, #28]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002f68:	f009 fc42 	bl	800c7f0 <HAL_TIM_PWM_ConfigChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002f72:	f002 fa41 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002f76:	4803      	ldr	r0, [pc, #12]	; (8002f84 <MX_TIM5_Init+0xfc>)
 8002f78:	f003 ffa8 	bl	8006ecc <HAL_TIM_MspPostInit>

}
 8002f7c:	bf00      	nop
 8002f7e:	3738      	adds	r7, #56	; 0x38
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20029344 	.word	0x20029344
 8002f88:	40000c00 	.word	0x40000c00

08002f8c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002f92:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <MX_UART4_Init+0x5c>)
 8002f94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_UART4_Init+0x58>)
 8002fd0:	f00a fa58 	bl	800d484 <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002fda:	f002 fa0d 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2002e940 	.word	0x2002e940
 8002fe8:	40004c00 	.word	0x40004c00

08002fec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <MX_UART5_Init+0x58>)
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <MX_UART5_Init+0x5c>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <MX_UART5_Init+0x58>)
 8002ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ffc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MX_UART5_Init+0x58>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <MX_UART5_Init+0x58>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_UART5_Init+0x58>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <MX_UART5_Init+0x58>)
 8003012:	220c      	movs	r2, #12
 8003014:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <MX_UART5_Init+0x58>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <MX_UART5_Init+0x58>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <MX_UART5_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <MX_UART5_Init+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800302e:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_UART5_Init+0x58>)
 8003030:	f00a fa28 	bl	800d484 <HAL_UART_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800303a:	f002 f9dd 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	2002be80 	.word	0x2002be80
 8003048:	40005000 	.word	0x40005000

0800304c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <MX_UART7_Init+0x58>)
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <MX_UART7_Init+0x5c>)
 8003054:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <MX_UART7_Init+0x58>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <MX_UART7_Init+0x58>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <MX_UART7_Init+0x58>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <MX_UART7_Init+0x58>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <MX_UART7_Init+0x58>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <MX_UART7_Init+0x58>)
 8003078:	f44f 7240 	mov.w	r2, #768	; 0x300
 800307c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <MX_UART7_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <MX_UART7_Init+0x58>)
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <MX_UART7_Init+0x58>)
 800308c:	2200      	movs	r2, #0
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <MX_UART7_Init+0x58>)
 8003092:	f00a f9f7 	bl	800d484 <HAL_UART_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 800309c:	f002 f9ac 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20028cc4 	.word	0x20028cc4
 80030a8:	40007800 	.word	0x40007800

080030ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80030b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ba:	2206      	movs	r2, #6
 80030bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030c0:	2202      	movs	r2, #2
 80030c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030cc:	2202      	movs	r2, #2
 80030ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030d8:	2200      	movs	r2, #0
 80030da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030de:	2200      	movs	r2, #0
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030f0:	f007 fac4 	bl	800a67c <HAL_PCD_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80030fa:	f002 f97d 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20028e90 	.word	0x20028e90

08003108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <MX_DMA_Init+0xa0>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <MX_DMA_Init+0xa0>)
 8003114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <MX_DMA_Init+0xa0>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <MX_DMA_Init+0xa0>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <MX_DMA_Init+0xa0>)
 800312c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <MX_DMA_Init+0xa0>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2105      	movs	r1, #5
 8003142:	200b      	movs	r0, #11
 8003144:	f005 fcc2 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003148:	200b      	movs	r0, #11
 800314a:	f005 fcdb 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	200d      	movs	r0, #13
 8003154:	f005 fcba 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003158:	200d      	movs	r0, #13
 800315a:	f005 fcd3 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2105      	movs	r1, #5
 8003162:	200e      	movs	r0, #14
 8003164:	f005 fcb2 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003168:	200e      	movs	r0, #14
 800316a:	f005 fccb 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2105      	movs	r1, #5
 8003172:	2038      	movs	r0, #56	; 0x38
 8003174:	f005 fcaa 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003178:	2038      	movs	r0, #56	; 0x38
 800317a:	f005 fcc3 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2105      	movs	r1, #5
 8003182:	2039      	movs	r0, #57	; 0x39
 8003184:	f005 fca2 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003188:	2039      	movs	r0, #57	; 0x39
 800318a:	f005 fcbb 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2105      	movs	r1, #5
 8003192:	203a      	movs	r0, #58	; 0x3a
 8003194:	f005 fc9a 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003198:	203a      	movs	r0, #58	; 0x3a
 800319a:	f005 fcb3 	bl	8008b04 <HAL_NVIC_EnableIRQ>

}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b090      	sub	sp, #64	; 0x40
 80031b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031c2:	4bb0      	ldr	r3, [pc, #704]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4aaf      	ldr	r2, [pc, #700]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031c8:	f043 0310 	orr.w	r3, r3, #16
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4bad      	ldr	r3, [pc, #692]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031da:	4baa      	ldr	r3, [pc, #680]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4aa9      	ldr	r2, [pc, #676]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4ba7      	ldr	r3, [pc, #668]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	4ba4      	ldr	r3, [pc, #656]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4aa3      	ldr	r2, [pc, #652]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4ba1      	ldr	r3, [pc, #644]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	4b9e      	ldr	r3, [pc, #632]	; (8003484 <MX_GPIO_Init+0x2d8>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a9d      	ldr	r2, [pc, #628]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b9b      	ldr	r3, [pc, #620]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	4b98      	ldr	r3, [pc, #608]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a97      	ldr	r2, [pc, #604]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b95      	ldr	r3, [pc, #596]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800323a:	4b92      	ldr	r3, [pc, #584]	; (8003484 <MX_GPIO_Init+0x2d8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a91      	ldr	r2, [pc, #580]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003252:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a8b      	ldr	r2, [pc, #556]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b89      	ldr	r3, [pc, #548]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800326a:	4b86      	ldr	r3, [pc, #536]	; (8003484 <MX_GPIO_Init+0x2d8>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a85      	ldr	r2, [pc, #532]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b83      	ldr	r3, [pc, #524]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003282:	4b80      	ldr	r3, [pc, #512]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a7f      	ldr	r2, [pc, #508]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b7d      	ldr	r3, [pc, #500]	; (8003484 <MX_GPIO_Init+0x2d8>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800329a:	4b7a      	ldr	r3, [pc, #488]	; (8003484 <MX_GPIO_Init+0x2d8>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a79      	ldr	r2, [pc, #484]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80032a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b77      	ldr	r3, [pc, #476]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032b2:	4b74      	ldr	r3, [pc, #464]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a73      	ldr	r2, [pc, #460]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80032b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b71      	ldr	r3, [pc, #452]	; (8003484 <MX_GPIO_Init+0x2d8>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2110      	movs	r1, #16
 80032ce:	486e      	ldr	r0, [pc, #440]	; (8003488 <MX_GPIO_Init+0x2dc>)
 80032d0:	f006 f9f4 	bl	80096bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 80032d4:	2200      	movs	r2, #0
 80032d6:	f244 012f 	movw	r1, #16431	; 0x402f
 80032da:	486c      	ldr	r0, [pc, #432]	; (800348c <MX_GPIO_Init+0x2e0>)
 80032dc:	f006 f9ee 	bl	80096bc <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	f241 1150 	movw	r1, #4432	; 0x1150
 80032e6:	486a      	ldr	r0, [pc, #424]	; (8003490 <MX_GPIO_Init+0x2e4>)
 80032e8:	f006 f9e8 	bl	80096bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2103      	movs	r1, #3
 80032f0:	4868      	ldr	r0, [pc, #416]	; (8003494 <MX_GPIO_Init+0x2e8>)
 80032f2:	f006 f9e3 	bl	80096bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 80032f6:	2200      	movs	r2, #0
 80032f8:	f243 013c 	movw	r1, #12348	; 0x303c
 80032fc:	4866      	ldr	r0, [pc, #408]	; (8003498 <MX_GPIO_Init+0x2ec>)
 80032fe:	f006 f9dd 	bl	80096bc <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	f241 0104 	movw	r1, #4100	; 0x1004
 8003308:	4864      	ldr	r0, [pc, #400]	; (800349c <MX_GPIO_Init+0x2f0>)
 800330a:	f006 f9d7 	bl	80096bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 800330e:	2200      	movs	r2, #0
 8003310:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003314:	4862      	ldr	r0, [pc, #392]	; (80034a0 <MX_GPIO_Init+0x2f4>)
 8003316:	f006 f9d1 	bl	80096bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800331a:	2200      	movs	r2, #0
 800331c:	211b      	movs	r1, #27
 800331e:	4861      	ldr	r0, [pc, #388]	; (80034a4 <MX_GPIO_Init+0x2f8>)
 8003320:	f006 f9cc 	bl	80096bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8003324:	2310      	movs	r3, #16
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003330:	2302      	movs	r3, #2
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003338:	4619      	mov	r1, r3
 800333a:	4853      	ldr	r0, [pc, #332]	; (8003488 <MX_GPIO_Init+0x2dc>)
 800333c:	f005 fffa 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8003340:	2308      	movs	r3, #8
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003344:	2300      	movs	r3, #0
 8003346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 800334c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003350:	4619      	mov	r1, r3
 8003352:	484d      	ldr	r0, [pc, #308]	; (8003488 <MX_GPIO_Init+0x2dc>)
 8003354:	f005 ffee 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8003358:	f244 032f 	movw	r3, #16431	; 0x402f
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	2301      	movs	r3, #1
 8003360:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800336a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800336e:	4619      	mov	r1, r3
 8003370:	4846      	ldr	r0, [pc, #280]	; (800348c <MX_GPIO_Init+0x2e0>)
 8003372:	f005 ffdf 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800337a:	2300      	movs	r3, #0
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8003382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003386:	4619      	mov	r1, r3
 8003388:	4845      	ldr	r0, [pc, #276]	; (80034a0 <MX_GPIO_Init+0x2f4>)
 800338a:	f005 ffd3 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 800338e:	f241 1350 	movw	r3, #4432	; 0x1150
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003394:	2301      	movs	r3, #1
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a4:	4619      	mov	r1, r3
 80033a6:	483a      	ldr	r0, [pc, #232]	; (8003490 <MX_GPIO_Init+0x2e4>)
 80033a8:	f005 ffc4 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 80033ac:	23f0      	movs	r3, #240	; 0xf0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033b0:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <MX_GPIO_Init+0x2fc>)
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80033b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033bc:	4619      	mov	r1, r3
 80033be:	4835      	ldr	r0, [pc, #212]	; (8003494 <MX_GPIO_Init+0x2e8>)
 80033c0:	f005 ffb8 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 80033c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ca:	2300      	movs	r3, #0
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033d6:	4619      	mov	r1, r3
 80033d8:	4834      	ldr	r0, [pc, #208]	; (80034ac <MX_GPIO_Init+0x300>)
 80033da:	f005 ffab 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 80033de:	f64f 7310 	movw	r3, #65296	; 0xff10
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033e4:	2300      	movs	r3, #0
 80033e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033f0:	4619      	mov	r1, r3
 80033f2:	482f      	ldr	r0, [pc, #188]	; (80034b0 <MX_GPIO_Init+0x304>)
 80033f4:	f005 ff9e 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 80033f8:	2303      	movs	r3, #3
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800340c:	4619      	mov	r1, r3
 800340e:	4821      	ldr	r0, [pc, #132]	; (8003494 <MX_GPIO_Init+0x2e8>)
 8003410:	f005 ff90 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8003414:	f243 033c 	movw	r3, #12348	; 0x303c
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341a:	2301      	movs	r3, #1
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800342a:	4619      	mov	r1, r3
 800342c:	481a      	ldr	r0, [pc, #104]	; (8003498 <MX_GPIO_Init+0x2ec>)
 800342e:	f005 ff81 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8003432:	f241 0304 	movw	r3, #4100	; 0x1004
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	2301      	movs	r3, #1
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003448:	4619      	mov	r1, r3
 800344a:	4814      	ldr	r0, [pc, #80]	; (800349c <MX_GPIO_Init+0x2f0>)
 800344c:	f005 ff72 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8003450:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003456:	2301      	movs	r3, #1
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003466:	4619      	mov	r1, r3
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <MX_GPIO_Init+0x2f4>)
 800346a:	f005 ff63 	bl	8009334 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 800346e:	231b      	movs	r3, #27
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003472:	2301      	movs	r3, #1
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	2300      	movs	r3, #0
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800347e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003482:	e017      	b.n	80034b4 <MX_GPIO_Init+0x308>
 8003484:	40023800 	.word	0x40023800
 8003488:	40021000 	.word	0x40021000
 800348c:	40021800 	.word	0x40021800
 8003490:	40022000 	.word	0x40022000
 8003494:	40022800 	.word	0x40022800
 8003498:	40021400 	.word	0x40021400
 800349c:	40021c00 	.word	0x40021c00
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40022400 	.word	0x40022400
 80034a8:	10210000 	.word	0x10210000
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	4619      	mov	r1, r3
 80034b6:	480b      	ldr	r0, [pc, #44]	; (80034e4 <MX_GPIO_Init+0x338>)
 80034b8:	f005 ff3c 	bl	8009334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	2105      	movs	r1, #5
 80034c0:	200a      	movs	r0, #10
 80034c2:	f005 fb03 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80034c6:	200a      	movs	r0, #10
 80034c8:	f005 fb1c 	bl	8008b04 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2105      	movs	r1, #5
 80034d0:	2017      	movs	r0, #23
 80034d2:	f005 fafb 	bl	8008acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034d6:	2017      	movs	r0, #23
 80034d8:	f005 fb14 	bl	8008b04 <HAL_NVIC_EnableIRQ>

}
 80034dc:	bf00      	nop
 80034de:	3740      	adds	r7, #64	; 0x40
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40022400 	.word	0x40022400

080034e8 <DevUI_Error_Handler>:
// Generic Error Handler for DevUI HAL hardware.
// char *msg is an error message that can be sent to the handler from the caller.
// err_param1 & err_param2 are additional error parameters that can be printed.
// For I2C errors, I2C device address in param1 and register address in param2.
void DevUI_Error_Handler(char *msg, HAL_StatusTypeDef ErrorCode, uint8_t err_param1, uint8_t err_param2, uint8_t critical_fault)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	70fb      	strb	r3, [r7, #3]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70bb      	strb	r3, [r7, #2]
 80034fe:	4613      	mov	r3, r2
 8003500:	707b      	strb	r3, [r7, #1]
  __ASM volatile ("cpsid i" : : : "memory");
 8003502:	b672      	cpsid	i
}
 8003504:	bf00      	nop
	__disable_irq();
	printf("ERROR: %s" " Code: %d Param1: 0x%x Param2: 0x%x\r\n", msg, ErrorCode, err_param1, err_param2);
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	78b9      	ldrb	r1, [r7, #2]
 800350a:	787b      	ldrb	r3, [r7, #1]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	460b      	mov	r3, r1
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <DevUI_Error_Handler+0x44>)
 8003514:	f013 fa76 	bl	8016a04 <iprintf>
	// Set error LED
	//errorLED.fault9 = true;
	// Use event group flag to indicate an error for the startErrorLED task.

	// If the fault is labeled as "critical" stay here.  Else keep running RTOS.
	if (critical_fault == true)
 8003518:	7c3b      	ldrb	r3, [r7, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d100      	bne.n	8003520 <DevUI_Error_Handler+0x38>
	{
	  while (1)
 800351e:	e7fe      	b.n	800351e <DevUI_Error_Handler+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8003520:	b662      	cpsie	i
}
 8003522:	bf00      	nop
	  }
	}
	else
	{
		__enable_irq();
		return;
 8003524:	bf00      	nop
	}
}
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	0801a550 	.word	0x0801a550

08003530 <__io_putchar>:

int __io_putchar(int ch)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 100);
 8003538:	1d39      	adds	r1, r7, #4
 800353a:	2364      	movs	r3, #100	; 0x64
 800353c:	2201      	movs	r2, #1
 800353e:	4804      	ldr	r0, [pc, #16]	; (8003550 <__io_putchar+0x20>)
 8003540:	f009 ffee 	bl	800d520 <HAL_UART_Transmit>

	return ch;
 8003544:	687b      	ldr	r3, [r7, #4]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20028cc4 	.word	0x20028cc4

08003554 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8003558:	220e      	movs	r2, #14
 800355a:	2100      	movs	r1, #0
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <outputGPIOBufInitialization+0x40>)
 800355e:	f012 fc03 	bl	8015d68 <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <outputGPIOBufInitialization+0x44>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f817 	bl	800359c <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <outputGPIOBufInitialization+0x44>)
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f811 	bl	800359c <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <outputGPIOBufInitialization+0x44>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <outputGPIOBufInitialization+0x40>)
 8003580:	2101      	movs	r1, #1
 8003582:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <outputGPIOBufInitialization+0x44>)
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	4a02      	ldr	r2, [pc, #8]	; (8003594 <outputGPIOBufInitialization+0x40>)
 800358a:	2101      	movs	r1, #1
 800358c:	54d1      	strb	r1, [r2, r3]
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	2002c120 	.word	0x2002c120
 8003598:	20000020 	.word	0x20000020

0800359c <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 80035a6:	4b87      	ldr	r3, [pc, #540]	; (80037c4 <setOutputGPIOState+0x228>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10d      	bne.n	80035cc <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	2104      	movs	r1, #4
 80035b8:	4883      	ldr	r0, [pc, #524]	; (80037c8 <setOutputGPIOState+0x22c>)
 80035ba:	f006 f87f 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <setOutputGPIOState+0x228>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	b2d1      	uxtb	r1, r2
 80035c6:	4a81      	ldr	r2, [pc, #516]	; (80037cc <setOutputGPIOState+0x230>)
 80035c8:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80035ca:	e0f7      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80035cc:	4b7d      	ldr	r3, [pc, #500]	; (80037c4 <setOutputGPIOState+0x228>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10d      	bne.n	80035f2 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	2110      	movs	r1, #16
 80035de:	487c      	ldr	r0, [pc, #496]	; (80037d0 <setOutputGPIOState+0x234>)
 80035e0:	f006 f86c 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 80035e4:	4b77      	ldr	r3, [pc, #476]	; (80037c4 <setOutputGPIOState+0x228>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d1      	uxtb	r1, r2
 80035ec:	4a77      	ldr	r2, [pc, #476]	; (80037cc <setOutputGPIOState+0x230>)
 80035ee:	54d1      	strb	r1, [r2, r3]
}
 80035f0:	e0e4      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 80035f2:	4b74      	ldr	r3, [pc, #464]	; (80037c4 <setOutputGPIOState+0x228>)
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d10d      	bne.n	8003618 <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	2140      	movs	r1, #64	; 0x40
 8003604:	4872      	ldr	r0, [pc, #456]	; (80037d0 <setOutputGPIOState+0x234>)
 8003606:	f006 f859 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 800360a:	4b6e      	ldr	r3, [pc, #440]	; (80037c4 <setOutputGPIOState+0x228>)
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	b2d1      	uxtb	r1, r2
 8003612:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <setOutputGPIOState+0x230>)
 8003614:	54d1      	strb	r1, [r2, r3]
}
 8003616:	e0d1      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <setOutputGPIOState+0x228>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d10e      	bne.n	8003640 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800362c:	4868      	ldr	r0, [pc, #416]	; (80037d0 <setOutputGPIOState+0x234>)
 800362e:	f006 f845 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003632:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <setOutputGPIOState+0x228>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	b2d1      	uxtb	r1, r2
 800363a:	4a64      	ldr	r2, [pc, #400]	; (80037cc <setOutputGPIOState+0x230>)
 800363c:	54d1      	strb	r1, [r2, r3]
}
 800363e:	e0bd      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003640:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <setOutputGPIOState+0x228>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d10d      	bne.n	8003666 <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	2110      	movs	r1, #16
 8003652:	4860      	ldr	r0, [pc, #384]	; (80037d4 <setOutputGPIOState+0x238>)
 8003654:	f006 f832 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 8003658:	4b5a      	ldr	r3, [pc, #360]	; (80037c4 <setOutputGPIOState+0x228>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d1      	uxtb	r1, r2
 8003660:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <setOutputGPIOState+0x230>)
 8003662:	54d1      	strb	r1, [r2, r3]
}
 8003664:	e0aa      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 8003666:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <setOutputGPIOState+0x228>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d10d      	bne.n	800368c <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	2101      	movs	r1, #1
 8003678:	4857      	ldr	r0, [pc, #348]	; (80037d8 <setOutputGPIOState+0x23c>)
 800367a:	f006 f81f 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 800367e:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <setOutputGPIOState+0x228>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	b2d1      	uxtb	r1, r2
 8003686:	4a51      	ldr	r2, [pc, #324]	; (80037cc <setOutputGPIOState+0x230>)
 8003688:	54d1      	strb	r1, [r2, r3]
}
 800368a:	e097      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 800368c:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <setOutputGPIOState+0x228>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d10d      	bne.n	80036b2 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	2102      	movs	r1, #2
 800369e:	484e      	ldr	r0, [pc, #312]	; (80037d8 <setOutputGPIOState+0x23c>)
 80036a0:	f006 f80c 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 80036a4:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <setOutputGPIOState+0x228>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d1      	uxtb	r1, r2
 80036ac:	4a47      	ldr	r2, [pc, #284]	; (80037cc <setOutputGPIOState+0x230>)
 80036ae:	54d1      	strb	r1, [r2, r3]
}
 80036b0:	e084      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <setOutputGPIOState+0x228>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d10d      	bne.n	80036d8 <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	2108      	movs	r1, #8
 80036c4:	4843      	ldr	r0, [pc, #268]	; (80037d4 <setOutputGPIOState+0x238>)
 80036c6:	f005 fff9 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <setOutputGPIOState+0x228>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	b2d1      	uxtb	r1, r2
 80036d2:	4a3e      	ldr	r2, [pc, #248]	; (80037cc <setOutputGPIOState+0x230>)
 80036d4:	54d1      	strb	r1, [r2, r3]
}
 80036d6:	e071      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80036d8:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <setOutputGPIOState+0x228>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d10d      	bne.n	80036fe <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	2101      	movs	r1, #1
 80036ea:	483c      	ldr	r0, [pc, #240]	; (80037dc <setOutputGPIOState+0x240>)
 80036ec:	f005 ffe6 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <setOutputGPIOState+0x228>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d1      	uxtb	r1, r2
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <setOutputGPIOState+0x230>)
 80036fa:	54d1      	strb	r1, [r2, r3]
}
 80036fc:	e05e      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <setOutputGPIOState+0x228>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d10d      	bne.n	8003724 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	2102      	movs	r1, #2
 8003710:	4832      	ldr	r0, [pc, #200]	; (80037dc <setOutputGPIOState+0x240>)
 8003712:	f005 ffd3 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <setOutputGPIOState+0x228>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	b2d1      	uxtb	r1, r2
 800371e:	4a2b      	ldr	r2, [pc, #172]	; (80037cc <setOutputGPIOState+0x230>)
 8003720:	54d1      	strb	r1, [r2, r3]
}
 8003722:	e04b      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <setOutputGPIOState+0x228>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d10d      	bne.n	800374a <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	2120      	movs	r1, #32
 8003736:	4829      	ldr	r0, [pc, #164]	; (80037dc <setOutputGPIOState+0x240>)
 8003738:	f005 ffc0 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <setOutputGPIOState+0x228>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d1      	uxtb	r1, r2
 8003744:	4a21      	ldr	r2, [pc, #132]	; (80037cc <setOutputGPIOState+0x230>)
 8003746:	54d1      	strb	r1, [r2, r3]
}
 8003748:	e038      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <setOutputGPIOState+0x228>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d10e      	bne.n	8003772 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800375e:	481f      	ldr	r0, [pc, #124]	; (80037dc <setOutputGPIOState+0x240>)
 8003760:	f005 ffac 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003764:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <setOutputGPIOState+0x228>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d1      	uxtb	r1, r2
 800376c:	4a17      	ldr	r2, [pc, #92]	; (80037cc <setOutputGPIOState+0x230>)
 800376e:	54d1      	strb	r1, [r2, r3]
}
 8003770:	e024      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <setOutputGPIOState+0x228>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d10d      	bne.n	8003798 <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	2104      	movs	r1, #4
 8003784:	4815      	ldr	r0, [pc, #84]	; (80037dc <setOutputGPIOState+0x240>)
 8003786:	f005 ff99 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <setOutputGPIOState+0x228>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	b2d1      	uxtb	r1, r2
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <setOutputGPIOState+0x230>)
 8003794:	54d1      	strb	r1, [r2, r3]
}
 8003796:	e011      	b.n	80037bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <setOutputGPIOState+0x228>)
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10c      	bne.n	80037bc <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	2108      	movs	r1, #8
 80037aa:	480c      	ldr	r0, [pc, #48]	; (80037dc <setOutputGPIOState+0x240>)
 80037ac:	f005 ff86 	bl	80096bc <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <setOutputGPIOState+0x228>)
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d1      	uxtb	r1, r2
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <setOutputGPIOState+0x230>)
 80037ba:	54d1      	strb	r1, [r2, r3]
}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20000020 	.word	0x20000020
 80037c8:	40021c00 	.word	0x40021c00
 80037cc:	2002c120 	.word	0x2002c120
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40022400 	.word	0x40022400
 80037d8:	40022800 	.word	0x40022800
 80037dc:	40021800 	.word	0x40021800

080037e0 <debugUartTransmitChar>:

void debugUartTransmitChar(char *message){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b0b6      	sub	sp, #216	; 0xd8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f013 f926 	bl	8016a40 <siprintf>
 80037f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, uart_buf_len,100);
 80037f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	f107 010c 	add.w	r1, r7, #12
 8003802:	2364      	movs	r3, #100	; 0x64
 8003804:	4803      	ldr	r0, [pc, #12]	; (8003814 <debugUartTransmitChar+0x34>)
 8003806:	f009 fe8b 	bl	800d520 <HAL_UART_Transmit>
}
 800380a:	bf00      	nop
 800380c:	37d8      	adds	r7, #216	; 0xd8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20028cc4 	.word	0x20028cc4

08003818 <debugUartTransmitStuff>:
void debugUartTransmitStuff(char *message, int size){
 8003818:	b580      	push	{r7, lr}
 800381a:	b0b6      	sub	sp, #216	; 0xd8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	f013 f909 	bl	8016a40 <siprintf>
 800382e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, size,100);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b29a      	uxth	r2, r3
 8003836:	f107 010c 	add.w	r1, r7, #12
 800383a:	2364      	movs	r3, #100	; 0x64
 800383c:	4803      	ldr	r0, [pc, #12]	; (800384c <debugUartTransmitStuff+0x34>)
 800383e:	f009 fe6f 	bl	800d520 <HAL_UART_Transmit>
}
 8003842:	bf00      	nop
 8003844:	37d8      	adds	r7, #216	; 0xd8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20028cc4 	.word	0x20028cc4

08003850 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60ba      	str	r2, [r7, #8]
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	4603      	mov	r3, r0
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	460b      	mov	r3, r1
 8003860:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003862:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <readI2CRegister+0x17c>)
 8003864:	7bbb      	ldrb	r3, [r7, #14]
 8003866:	7013      	strb	r3, [r2, #0]
	char *err_msg;
  	if(i2CBank == 1){
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10e      	bne.n	800388c <readI2CRegister+0x3c>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	b299      	uxth	r1, r3
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2301      	movs	r3, #1
 800387a:	4a54      	ldr	r2, [pc, #336]	; (80039cc <readI2CRegister+0x17c>)
 800387c:	4854      	ldr	r0, [pc, #336]	; (80039d0 <readI2CRegister+0x180>)
 800387e:	f006 f805 	bl	800988c <HAL_I2C_Master_Transmit>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 1.";
 8003886:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <readI2CRegister+0x184>)
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e034      	b.n	80038f6 <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 2){
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d10e      	bne.n	80038b0 <readI2CRegister+0x60>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	b299      	uxth	r1, r3
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2301      	movs	r3, #1
 800389e:	4a4b      	ldr	r2, [pc, #300]	; (80039cc <readI2CRegister+0x17c>)
 80038a0:	484d      	ldr	r0, [pc, #308]	; (80039d8 <readI2CRegister+0x188>)
 80038a2:	f005 fff3 	bl	800988c <HAL_I2C_Master_Transmit>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 2.";
 80038aa:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <readI2CRegister+0x18c>)
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	e022      	b.n	80038f6 <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 3){
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d10e      	bne.n	80038d4 <readI2CRegister+0x84>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	b299      	uxth	r1, r3
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2301      	movs	r3, #1
 80038c2:	4a42      	ldr	r2, [pc, #264]	; (80039cc <readI2CRegister+0x17c>)
 80038c4:	4846      	ldr	r0, [pc, #280]	; (80039e0 <readI2CRegister+0x190>)
 80038c6:	f005 ffe1 	bl	800988c <HAL_I2C_Master_Transmit>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 3.";
 80038ce:	4b45      	ldr	r3, [pc, #276]	; (80039e4 <readI2CRegister+0x194>)
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e010      	b.n	80038f6 <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 4){
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d10d      	bne.n	80038f6 <readI2CRegister+0xa6>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	b299      	uxth	r1, r3
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2301      	movs	r3, #1
 80038e6:	4a39      	ldr	r2, [pc, #228]	; (80039cc <readI2CRegister+0x17c>)
 80038e8:	483f      	ldr	r0, [pc, #252]	; (80039e8 <readI2CRegister+0x198>)
 80038ea:	f005 ffcf 	bl	800988c <HAL_I2C_Master_Transmit>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 4.";
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <readI2CRegister+0x19c>)
 80038f4:	613b      	str	r3, [r7, #16]
  	}
	  if ( ret != HAL_OK ) {
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <readI2CRegister+0xc0>
		  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	7df9      	ldrb	r1, [r7, #23]
 8003902:	2000      	movs	r0, #0
 8003904:	9000      	str	r0, [sp, #0]
 8003906:	6938      	ldr	r0, [r7, #16]
 8003908:	f7ff fdee 	bl	80034e8 <DevUI_Error_Handler>
	          return (uint8_t*)0xfe;
 800390c:	23fe      	movs	r3, #254	; 0xfe
 800390e:	e058      	b.n	80039c2 <readI2CRegister+0x172>
	        }
	  else {
		  if(i2CBank == 1){
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10f      	bne.n	8003936 <readI2CRegister+0xe6>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	b299      	uxth	r1, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f04f 32ff 	mov.w	r2, #4294967295
 8003922:	9200      	str	r2, [sp, #0]
 8003924:	4a29      	ldr	r2, [pc, #164]	; (80039cc <readI2CRegister+0x17c>)
 8003926:	482a      	ldr	r0, [pc, #168]	; (80039d0 <readI2CRegister+0x180>)
 8003928:	f006 f8a4 	bl	8009a74 <HAL_I2C_Master_Receive>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 1.";
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <readI2CRegister+0x1a0>)
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e037      	b.n	80039a6 <readI2CRegister+0x156>
			}
			else if(i2CBank == 2){
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d10f      	bne.n	800395c <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	b299      	uxth	r1, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	4a20      	ldr	r2, [pc, #128]	; (80039cc <readI2CRegister+0x17c>)
 800394c:	4822      	ldr	r0, [pc, #136]	; (80039d8 <readI2CRegister+0x188>)
 800394e:	f006 f891 	bl	8009a74 <HAL_I2C_Master_Receive>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 2.";
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <readI2CRegister+0x1a4>)
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e024      	b.n	80039a6 <readI2CRegister+0x156>
			}
			else if(i2CBank == 3){
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d10f      	bne.n	8003982 <readI2CRegister+0x132>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	b299      	uxth	r1, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f04f 32ff 	mov.w	r2, #4294967295
 800396e:	9200      	str	r2, [sp, #0]
 8003970:	4a16      	ldr	r2, [pc, #88]	; (80039cc <readI2CRegister+0x17c>)
 8003972:	481b      	ldr	r0, [pc, #108]	; (80039e0 <readI2CRegister+0x190>)
 8003974:	f006 f87e 	bl	8009a74 <HAL_I2C_Master_Receive>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 3.";
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <readI2CRegister+0x1a8>)
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e011      	b.n	80039a6 <readI2CRegister+0x156>
			}
			else if(i2CBank == 4){
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d10e      	bne.n	80039a6 <readI2CRegister+0x156>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	b299      	uxth	r1, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f04f 32ff 	mov.w	r2, #4294967295
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <readI2CRegister+0x17c>)
 8003998:	4813      	ldr	r0, [pc, #76]	; (80039e8 <readI2CRegister+0x198>)
 800399a:	f006 f86b 	bl	8009a74 <HAL_I2C_Master_Receive>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 4.";
 80039a2:	4b16      	ldr	r3, [pc, #88]	; (80039fc <readI2CRegister+0x1ac>)
 80039a4:	613b      	str	r3, [r7, #16]
			}
		  if ( ret != HAL_OK ) {
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <readI2CRegister+0x170>
			  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 80039ac:	7bbb      	ldrb	r3, [r7, #14]
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	7df9      	ldrb	r1, [r7, #23]
 80039b2:	2000      	movs	r0, #0
 80039b4:	9000      	str	r0, [sp, #0]
 80039b6:	6938      	ldr	r0, [r7, #16]
 80039b8:	f7ff fd96 	bl	80034e8 <DevUI_Error_Handler>
		          return (uint8_t*)0xfe;
 80039bc:	23fe      	movs	r3, #254	; 0xfe
 80039be:	e000      	b.n	80039c2 <readI2CRegister+0x172>
		        }
		  else{
			  //uartTransmitInt(buf[0],7);
			  return buf;
 80039c0:	4b02      	ldr	r3, [pc, #8]	; (80039cc <readI2CRegister+0x17c>)
		  }
}
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000339c 	.word	0x2000339c
 80039d0:	20028e44 	.word	0x20028e44
 80039d4:	0801a590 	.word	0x0801a590
 80039d8:	20029294 	.word	0x20029294
 80039dc:	0801a5b4 	.word	0x0801a5b4
 80039e0:	20028c2c 	.word	0x20028c2c
 80039e4:	0801a5d8 	.word	0x0801a5d8
 80039e8:	20028c78 	.word	0x20028c78
 80039ec:	0801a5fc 	.word	0x0801a5fc
 80039f0:	0801a620 	.word	0x0801a620
 80039f4:	0801a644 	.word	0x0801a644
 80039f8:	0801a668 	.word	0x0801a668
 80039fc:	0801a68c 	.word	0x0801a68c

08003a00 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08e      	sub	sp, #56	; 0x38
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60ba      	str	r2, [r7, #8]
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	73bb      	strb	r3, [r7, #14]
  	uint8_t buf[20];
  	HAL_StatusTypeDef ret;
  	buf[0]=reg;
 8003a12:	7bbb      	ldrb	r3, [r7, #14]
 8003a14:	743b      	strb	r3, [r7, #16]
  	int x = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  	char *err_msg;
  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1e:	e00d      	b.n	8003a3c <writeI2CRegister+0x3c>
  		buf[1+x] = bytes[x];
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	441a      	add	r2, r3
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	3301      	adds	r3, #1
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003a30:	440b      	add	r3, r1
 8003a32:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	3301      	adds	r3, #1
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d9ee      	bls.n	8003a20 <writeI2CRegister+0x20>
  	}
  	if(i2CBank == 1){
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d113      	bne.n	8003a70 <writeI2CRegister+0x70>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	b299      	uxth	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3301      	adds	r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f107 0210 	add.w	r2, r7, #16
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	9000      	str	r0, [sp, #0]
 8003a5e:	4831      	ldr	r0, [pc, #196]	; (8003b24 <writeI2CRegister+0x124>)
 8003a60:	f005 ff14 	bl	800988c <HAL_I2C_Master_Transmit>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 1.";
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <writeI2CRegister+0x128>)
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e043      	b.n	8003af8 <writeI2CRegister+0xf8>
  	}
  	else if(i2CBank == 2){
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d113      	bne.n	8003a9e <writeI2CRegister+0x9e>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f107 0210 	add.w	r2, r7, #16
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8a:	9000      	str	r0, [sp, #0]
 8003a8c:	4827      	ldr	r0, [pc, #156]	; (8003b2c <writeI2CRegister+0x12c>)
 8003a8e:	f005 fefd 	bl	800988c <HAL_I2C_Master_Transmit>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 2.";
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <writeI2CRegister+0x130>)
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e02c      	b.n	8003af8 <writeI2CRegister+0xf8>
  	}
  	else if(i2CBank == 3){
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d113      	bne.n	8003acc <writeI2CRegister+0xcc>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	b299      	uxth	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f107 0210 	add.w	r2, r7, #16
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	9000      	str	r0, [sp, #0]
 8003aba:	481e      	ldr	r0, [pc, #120]	; (8003b34 <writeI2CRegister+0x134>)
 8003abc:	f005 fee6 	bl	800988c <HAL_I2C_Master_Transmit>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 3.";
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <writeI2CRegister+0x138>)
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	e015      	b.n	8003af8 <writeI2CRegister+0xf8>
  	}
  	else if(i2CBank == 4){
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d112      	bne.n	8003af8 <writeI2CRegister+0xf8>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	b299      	uxth	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f107 0210 	add.w	r2, r7, #16
 8003ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae6:	9000      	str	r0, [sp, #0]
 8003ae8:	4814      	ldr	r0, [pc, #80]	; (8003b3c <writeI2CRegister+0x13c>)
 8003aea:	f005 fecf 	bl	800988c <HAL_I2C_Master_Transmit>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 4.";
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <writeI2CRegister+0x140>)
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  	}
  	if (ret != HAL_OK)
 8003af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <writeI2CRegister+0x118>
  	{
  		DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003b08:	2000      	movs	r0, #0
 8003b0a:	9000      	str	r0, [sp, #0]
 8003b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b0e:	f7ff fceb 	bl	80034e8 <DevUI_Error_Handler>
  		return ret;
 8003b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b16:	e000      	b.n	8003b1a <writeI2CRegister+0x11a>
  	}
  	else
  	{
  		return HAL_OK;
 8003b18:	2300      	movs	r3, #0
  	}
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3730      	adds	r7, #48	; 0x30
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20028e44 	.word	0x20028e44
 8003b28:	0801a6b0 	.word	0x0801a6b0
 8003b2c:	20029294 	.word	0x20029294
 8003b30:	0801a6cc 	.word	0x0801a6cc
 8003b34:	20028c2c 	.word	0x20028c2c
 8003b38:	0801a6e8 	.word	0x0801a6e8
 8003b3c:	20028c78 	.word	0x20028c78
 8003b40:	0801a704 	.word	0x0801a704

08003b44 <configureLEDDriver>:
void configureLEDDriver(){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <configureLEDDriver+0x104>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 8003b54:	4b3d      	ldr	r3, [pc, #244]	; (8003c4c <configureLEDDriver+0x108>)
 8003b56:	7818      	ldrb	r0, [r3, #0]
 8003b58:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <configureLEDDriver+0x108>)
 8003b5a:	7999      	ldrb	r1, [r3, #6]
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <configureLEDDriver+0x108>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2301      	movs	r3, #1
 8003b68:	f7ff ff4a 	bl	8003a00 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8003b6c:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <configureLEDDriver+0x108>)
 8003b6e:	7818      	ldrb	r0, [r3, #0]
 8003b70:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <configureLEDDriver+0x108>)
 8003b72:	7999      	ldrb	r1, [r3, #6]
 8003b74:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <configureLEDDriver+0x108>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f7ff fe69 	bl	8003850 <readI2CRegister>
 8003b7e:	6038      	str	r0, [r7, #0]
	//uartTransmitInt(buf[0],7);
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 8003b80:	4b32      	ldr	r3, [pc, #200]	; (8003c4c <configureLEDDriver+0x108>)
 8003b82:	7818      	ldrb	r0, [r3, #0]
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <configureLEDDriver+0x108>)
 8003b86:	7859      	ldrb	r1, [r3, #1]
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <configureLEDDriver+0x108>)
 8003b8a:	79db      	ldrb	r3, [r3, #7]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <configureLEDDriver+0x108>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2301      	movs	r3, #1
 8003b96:	f7ff ff33 	bl	8003a00 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <configureLEDDriver+0x108>)
 8003b9c:	7818      	ldrb	r0, [r3, #0]
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <configureLEDDriver+0x108>)
 8003ba0:	7899      	ldrb	r1, [r3, #2]
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <configureLEDDriver+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <configureLEDDriver+0x104>)
 8003bac:	f7ff ff28 	bl	8003a00 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bb0:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <configureLEDDriver+0x108>)
 8003bb2:	7818      	ldrb	r0, [r3, #0]
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <configureLEDDriver+0x108>)
 8003bb6:	78d9      	ldrb	r1, [r3, #3]
 8003bb8:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <configureLEDDriver+0x108>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <configureLEDDriver+0x104>)
 8003bc2:	f7ff ff1d 	bl	8003a00 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bc6:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <configureLEDDriver+0x108>)
 8003bc8:	7818      	ldrb	r0, [r3, #0]
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <configureLEDDriver+0x108>)
 8003bcc:	7919      	ldrb	r1, [r3, #4]
 8003bce:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <configureLEDDriver+0x108>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <configureLEDDriver+0x104>)
 8003bd8:	f7ff ff12 	bl	8003a00 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <configureLEDDriver+0x108>)
 8003bde:	7818      	ldrb	r0, [r3, #0]
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <configureLEDDriver+0x108>)
 8003be2:	7959      	ldrb	r1, [r3, #5]
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <configureLEDDriver+0x108>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2301      	movs	r3, #1
 8003bec:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <configureLEDDriver+0x104>)
 8003bee:	f7ff ff07 	bl	8003a00 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <configureLEDDriver+0x108>)
 8003bf4:	7818      	ldrb	r0, [r3, #0]
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <configureLEDDriver+0x108>)
 8003bf8:	7a19      	ldrb	r1, [r3, #8]
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <configureLEDDriver+0x108>)
 8003bfc:	7adb      	ldrb	r3, [r3, #11]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <configureLEDDriver+0x108>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2301      	movs	r3, #1
 8003c08:	f7ff fefa 	bl	8003a00 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <configureLEDDriver+0x108>)
 8003c0e:	7818      	ldrb	r0, [r3, #0]
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <configureLEDDriver+0x108>)
 8003c12:	7a59      	ldrb	r1, [r3, #9]
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <configureLEDDriver+0x108>)
 8003c16:	7adb      	ldrb	r3, [r3, #11]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <configureLEDDriver+0x108>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2301      	movs	r3, #1
 8003c22:	f7ff feed 	bl	8003a00 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <configureLEDDriver+0x108>)
 8003c28:	7818      	ldrb	r0, [r3, #0]
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <configureLEDDriver+0x108>)
 8003c2c:	7a99      	ldrb	r1, [r3, #10]
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <configureLEDDriver+0x108>)
 8003c30:	7adb      	ldrb	r3, [r3, #11]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <configureLEDDriver+0x108>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f7ff fee0 	bl	8003a00 <writeI2CRegister>
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200033b0 	.word	0x200033b0
 8003c4c:	20000004 	.word	0x20000004

08003c50 <setRGBLED>:

//Configure & set RGB LED
void setRGBLED(uint8_t R, uint8_t G, uint8_t B)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	71bb      	strb	r3, [r7, #6]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	717b      	strb	r3, [r7, #5]
	setErrorLED(RED, R);
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	2007      	movs	r0, #7
 8003c72:	f000 f819 	bl	8003ca8 <setErrorLED>
	setErrorLED(GREEN, G);
 8003c76:	79bb      	ldrb	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	2008      	movs	r0, #8
 8003c86:	f000 f80f 	bl	8003ca8 <setErrorLED>
	setErrorLED(BLUE, B);
 8003c8a:	797b      	ldrb	r3, [r7, #5]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4619      	mov	r1, r3
 8003c98:	2009      	movs	r0, #9
 8003c9a:	f000 f805 	bl	8003ca8 <setErrorLED>

	return;
 8003c9e:	bf00      	nop
}
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 8003cb8:	2304      	movs	r3, #4
 8003cba:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8003cc8:	2308      	movs	r3, #8
 8003cca:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8003ccc:	2320      	movs	r3, #32
 8003cce:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	dc05      	bgt.n	8003ce6 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8003cda:	4b80      	ldr	r3, [pc, #512]	; (8003edc <setErrorLED+0x234>)
 8003cdc:	789b      	ldrb	r3, [r3, #2]
 8003cde:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e019      	b.n	8003d1a <setErrorLED+0x72>
	}
	else if(led <8){
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	dc06      	bgt.n	8003cfa <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8003cec:	4b7b      	ldr	r3, [pc, #492]	; (8003edc <setErrorLED+0x234>)
 8003cee:	78db      	ldrb	r3, [r3, #3]
 8003cf0:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3b04      	subs	r3, #4
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e00f      	b.n	8003d1a <setErrorLED+0x72>
	}
	else if(led <12){
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b0b      	cmp	r3, #11
 8003cfe:	dc06      	bgt.n	8003d0e <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <setErrorLED+0x234>)
 8003d02:	791b      	ldrb	r3, [r3, #4]
 8003d04:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3b08      	subs	r3, #8
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	e005      	b.n	8003d1a <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003d0e:	4b73      	ldr	r3, [pc, #460]	; (8003edc <setErrorLED+0x234>)
 8003d10:	795b      	ldrb	r3, [r3, #5]
 8003d12:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b0c      	subs	r3, #12
 8003d18:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003d1a:	4b70      	ldr	r3, [pc, #448]	; (8003edc <setErrorLED+0x234>)
 8003d1c:	7818      	ldrb	r0, [r3, #0]
 8003d1e:	4b6f      	ldr	r3, [pc, #444]	; (8003edc <setErrorLED+0x234>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	7ef9      	ldrb	r1, [r7, #27]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f7ff fd93 	bl	8003850 <readI2CRegister>
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	f200 80bd 	bhi.w	8003eae <setErrorLED+0x206>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <setErrorLED+0x94>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003db3 	.word	0x08003db3
 8003d44:	08003e19 	.word	0x08003e19
 8003d48:	08003e49 	.word	0x08003e49
	switch(ledBitNumber){

	case 0:
		if(change){
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d012      	beq.n	8003d78 <setErrorLED+0xd0>
			if(led == 8){
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d107      	bne.n	8003d68 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	7dbb      	ldrb	r3, [r7, #22]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003d66:	e0a2      	b.n	8003eae <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	7ebb      	ldrb	r3, [r7, #26]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	701a      	strb	r2, [r3, #0]
		break;
 8003d76:	e09a      	b.n	8003eae <setErrorLED+0x206>
			if(led == 8){
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d10c      	bne.n	8003d98 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b25a      	sxtb	r2, r3
 8003d84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b25b      	sxtb	r3, r3
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	701a      	strb	r2, [r3, #0]
		break;
 8003d96:	e08a      	b.n	8003eae <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b25a      	sxtb	r2, r3
 8003d9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	4013      	ands	r3, r2
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	701a      	strb	r2, [r3, #0]
		break;
 8003db0:	e07d      	b.n	8003eae <setErrorLED+0x206>

	case 1:
		if(change){
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <setErrorLED+0x136>
			if(led == 9){
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	d107      	bne.n	8003dce <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	7d7b      	ldrb	r3, [r7, #21]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8003dcc:	e06f      	b.n	8003eae <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	7e7b      	ldrb	r3, [r7, #25]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	701a      	strb	r2, [r3, #0]
		break;
 8003ddc:	e067      	b.n	8003eae <setErrorLED+0x206>
			if(led == 9){
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d10c      	bne.n	8003dfe <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b25a      	sxtb	r2, r3
 8003dea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	4013      	ands	r3, r2
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	701a      	strb	r2, [r3, #0]
		break;
 8003dfc:	e057      	b.n	8003eae <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b25a      	sxtb	r2, r3
 8003e04:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	b25b      	sxtb	r3, r3
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	701a      	strb	r2, [r3, #0]
		break;
 8003e16:	e04a      	b.n	8003eae <setErrorLED+0x206>

	case 2:
		if(change){
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	7e3b      	ldrb	r3, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003e2c:	e03f      	b.n	8003eae <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b25a      	sxtb	r2, r3
 8003e34:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	701a      	strb	r2, [r3, #0]
		break;
 8003e46:	e032      	b.n	8003eae <setErrorLED+0x206>

	case 3:
		if(change){
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <setErrorLED+0x1cc>
			if(led == 7){
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d107      	bne.n	8003e64 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003e62:	e023      	b.n	8003eac <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	701a      	strb	r2, [r3, #0]
		break;
 8003e72:	e01b      	b.n	8003eac <setErrorLED+0x204>
			if(led == 7){
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b07      	cmp	r3, #7
 8003e78:	d10c      	bne.n	8003e94 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b25a      	sxtb	r2, r3
 8003e80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]
		break;
 8003e92:	e00b      	b.n	8003eac <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b25a      	sxtb	r2, r3
 8003e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	701a      	strb	r2, [r3, #0]
		break;
 8003eac:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <setErrorLED+0x234>)
 8003eb0:	7818      	ldrb	r0, [r3, #0]
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <setErrorLED+0x234>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	7ef9      	ldrb	r1, [r7, #27]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2301      	movs	r3, #1
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	f7ff fd9f 	bl	8003a00 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <setErrorLED+0x234>)
 8003ec4:	7818      	ldrb	r0, [r3, #0]
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <setErrorLED+0x234>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	7ef9      	ldrb	r1, [r7, #27]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f7ff fcbf 	bl	8003850 <readI2CRegister>
 8003ed2:	60f8      	str	r0, [r7, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000004 	.word	0x20000004

08003ee0 <getADCValues>:


float* getADCValues(){
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b09e      	sub	sp, #120	; 0x78
 8003ee4:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	2254      	movs	r2, #84	; 0x54
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f011 ff3b 	bl	8015d68 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 8003ef2:	2316      	movs	r3, #22
 8003ef4:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003efa:	230c      	movs	r3, #12
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003efe:	2300      	movs	r3, #0
 8003f00:	677b      	str	r3, [r7, #116]	; 0x74
 8003f02:	e171      	b.n	80041e8 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003f04:	4b97      	ldr	r3, [pc, #604]	; (8004164 <getADCValues+0x284>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d009      	beq.n	8003f22 <getADCValues+0x42>
 8003f0e:	4b95      	ldr	r3, [pc, #596]	; (8004164 <getADCValues+0x284>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d004      	beq.n	8003f22 <getADCValues+0x42>
 8003f18:	4b92      	ldr	r3, [pc, #584]	; (8004164 <getADCValues+0x284>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d102      	bne.n	8003f28 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f26:	e071      	b.n	800400c <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003f28:	4b8e      	ldr	r3, [pc, #568]	; (8004164 <getADCValues+0x284>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d009      	beq.n	8003f46 <getADCValues+0x66>
 8003f32:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <getADCValues+0x284>)
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d004      	beq.n	8003f46 <getADCValues+0x66>
 8003f3c:	4b89      	ldr	r3, [pc, #548]	; (8004164 <getADCValues+0x284>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d102      	bne.n	8003f4c <getADCValues+0x6c>
			adcIndex=2;
 8003f46:	2302      	movs	r3, #2
 8003f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4a:	e05f      	b.n	800400c <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003f4c:	4b85      	ldr	r3, [pc, #532]	; (8004164 <getADCValues+0x284>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d009      	beq.n	8003f6a <getADCValues+0x8a>
 8003f56:	4b83      	ldr	r3, [pc, #524]	; (8004164 <getADCValues+0x284>)
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d004      	beq.n	8003f6a <getADCValues+0x8a>
 8003f60:	4b80      	ldr	r3, [pc, #512]	; (8004164 <getADCValues+0x284>)
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d102      	bne.n	8003f70 <getADCValues+0x90>
			adcIndex=4;
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6e:	e04d      	b.n	800400c <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003f70:	4b7c      	ldr	r3, [pc, #496]	; (8004164 <getADCValues+0x284>)
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d009      	beq.n	8003f8e <getADCValues+0xae>
 8003f7a:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <getADCValues+0x284>)
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d004      	beq.n	8003f8e <getADCValues+0xae>
 8003f84:	4b77      	ldr	r3, [pc, #476]	; (8004164 <getADCValues+0x284>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d102      	bne.n	8003f94 <getADCValues+0xb4>
			adcIndex=6;
 8003f8e:	2306      	movs	r3, #6
 8003f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f92:	e03b      	b.n	800400c <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003f94:	4b73      	ldr	r3, [pc, #460]	; (8004164 <getADCValues+0x284>)
 8003f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d004      	beq.n	8003fa8 <getADCValues+0xc8>
 8003f9e:	4b71      	ldr	r3, [pc, #452]	; (8004164 <getADCValues+0x284>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d102      	bne.n	8003fae <getADCValues+0xce>
			adcIndex=8;
 8003fa8:	2308      	movs	r3, #8
 8003faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fac:	e02e      	b.n	800400c <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 8003fae:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <getADCValues+0x284>)
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d004      	beq.n	8003fc2 <getADCValues+0xe2>
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <getADCValues+0x284>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d102      	bne.n	8003fc8 <getADCValues+0xe8>
			adcIndex=10;
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc6:	e021      	b.n	800400c <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <getADCValues+0x284>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d102      	bne.n	8003fd8 <getADCValues+0xf8>
			adcIndex=12;
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd6:	e019      	b.n	800400c <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003fd8:	4b62      	ldr	r3, [pc, #392]	; (8004164 <getADCValues+0x284>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d102      	bne.n	8003fe8 <getADCValues+0x108>
			adcIndex=14;
 8003fe2:	230e      	movs	r3, #14
 8003fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe6:	e011      	b.n	800400c <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003fe8:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <getADCValues+0x284>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d102      	bne.n	8003ff8 <getADCValues+0x118>
			adcIndex=16;
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff6:	e009      	b.n	800400c <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003ff8:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <getADCValues+0x284>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d102      	bne.n	8004008 <getADCValues+0x128>
			adcIndex=18;
 8004002:	2312      	movs	r3, #18
 8004004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004006:	e001      	b.n	800400c <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8004008:	2314      	movs	r3, #20
 800400a:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 800400c:	4b55      	ldr	r3, [pc, #340]	; (8004164 <getADCValues+0x284>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004012:	429a      	cmp	r2, r3
 8004014:	d00e      	beq.n	8004034 <getADCValues+0x154>
 8004016:	4b53      	ldr	r3, [pc, #332]	; (8004164 <getADCValues+0x284>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800401c:	429a      	cmp	r2, r3
 800401e:	d009      	beq.n	8004034 <getADCValues+0x154>
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <getADCValues+0x284>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004026:	429a      	cmp	r2, r3
 8004028:	d004      	beq.n	8004034 <getADCValues+0x154>
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <getADCValues+0x284>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004030:	429a      	cmp	r2, r3
 8004032:	d13a      	bne.n	80040aa <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8004034:	2300      	movs	r3, #0
 8004036:	673b      	str	r3, [r7, #112]	; 0x70
 8004038:	e033      	b.n	80040a2 <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800403a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004044:	4413      	add	r3, r2
 8004046:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8004048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004050:	4413      	add	r3, r2
 8004052:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004056:	4944      	ldr	r1, [pc, #272]	; (8004168 <getADCValues+0x288>)
 8004058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800405a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800405e:	441a      	add	r2, r3
 8004060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004068:	440b      	add	r3, r1
 800406a:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 800406e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004070:	2b13      	cmp	r3, #19
 8004072:	d113      	bne.n	800409c <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800407c:	4413      	add	r3, r2
 800407e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004082:	4a3a      	ldr	r2, [pc, #232]	; (800416c <getADCValues+0x28c>)
 8004084:	fb82 1203 	smull	r1, r2, r2, r3
 8004088:	10d2      	asrs	r2, r2, #3
 800408a:	17db      	asrs	r3, r3, #31
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004096:	440b      	add	r3, r1
 8004098:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800409c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409e:	3301      	adds	r3, #1
 80040a0:	673b      	str	r3, [r7, #112]	; 0x70
 80040a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a4:	2b13      	cmp	r3, #19
 80040a6:	ddc8      	ble.n	800403a <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80040a8:	e09b      	b.n	80041e2 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <getADCValues+0x284>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d018      	beq.n	80040e6 <getADCValues+0x206>
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <getADCValues+0x284>)
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d013      	beq.n	80040e6 <getADCValues+0x206>
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <getADCValues+0x284>)
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d00e      	beq.n	80040e6 <getADCValues+0x206>
 80040c8:	4b26      	ldr	r3, [pc, #152]	; (8004164 <getADCValues+0x284>)
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d009      	beq.n	80040e6 <getADCValues+0x206>
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <getADCValues+0x284>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040d8:	429a      	cmp	r2, r3
 80040da:	d004      	beq.n	80040e6 <getADCValues+0x206>
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <getADCValues+0x284>)
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d13a      	bne.n	800415c <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80040e6:	2300      	movs	r3, #0
 80040e8:	673b      	str	r3, [r7, #112]	; 0x70
 80040ea:	e033      	b.n	8004154 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 80040ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040f6:	4413      	add	r3, r2
 80040f8:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 80040fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004102:	4413      	add	r3, r2
 8004104:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004108:	4919      	ldr	r1, [pc, #100]	; (8004170 <getADCValues+0x290>)
 800410a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800410c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004110:	441a      	add	r2, r3
 8004112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800411a:	440b      	add	r3, r1
 800411c:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8004120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004122:	2b13      	cmp	r3, #19
 8004124:	d113      	bne.n	800414e <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800412e:	4413      	add	r3, r2
 8004130:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <getADCValues+0x28c>)
 8004136:	fb82 1203 	smull	r1, r2, r2, r3
 800413a:	10d2      	asrs	r2, r2, #3
 800413c:	17db      	asrs	r3, r3, #31
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004148:	440b      	add	r3, r1
 800414a:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800414e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004150:	3301      	adds	r3, #1
 8004152:	673b      	str	r3, [r7, #112]	; 0x70
 8004154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004156:	2b13      	cmp	r3, #19
 8004158:	ddc8      	ble.n	80040ec <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800415a:	e042      	b.n	80041e2 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800415c:	2300      	movs	r3, #0
 800415e:	673b      	str	r3, [r7, #112]	; 0x70
 8004160:	e03c      	b.n	80041dc <getADCValues+0x2fc>
 8004162:	bf00      	nop
 8004164:	20000058 	.word	0x20000058
 8004168:	2002e9c4 	.word	0x2002e9c4
 800416c:	66666667 	.word	0x66666667
 8004170:	2002c21c 	.word	0x2002c21c
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8004174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004176:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800417e:	4413      	add	r3, r2
 8004180:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8004182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800418a:	4413      	add	r3, r2
 800418c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004190:	49c9      	ldr	r1, [pc, #804]	; (80044b8 <getADCValues+0x5d8>)
 8004192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004194:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004198:	441a      	add	r2, r3
 800419a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80041a2:	440b      	add	r3, r1
 80041a4:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80041a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041aa:	2b13      	cmp	r3, #19
 80041ac:	d113      	bne.n	80041d6 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041b6:	4413      	add	r3, r2
 80041b8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041bc:	4abf      	ldr	r2, [pc, #764]	; (80044bc <getADCValues+0x5dc>)
 80041be:	fb82 1203 	smull	r1, r2, r2, r3
 80041c2:	10d2      	asrs	r2, r2, #3
 80041c4:	17db      	asrs	r3, r3, #31
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80041d0:	440b      	add	r3, r1
 80041d2:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80041d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d8:	3301      	adds	r3, #1
 80041da:	673b      	str	r3, [r7, #112]	; 0x70
 80041dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041de:	2b13      	cmp	r3, #19
 80041e0:	ddc8      	ble.n	8004174 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80041e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e4:	3301      	adds	r3, #1
 80041e6:	677b      	str	r3, [r7, #116]	; 0x74
 80041e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ea:	2b14      	cmp	r3, #20
 80041ec:	f77f ae8a 	ble.w	8003f04 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80041f0:	4bb3      	ldr	r3, [pc, #716]	; (80044c0 <getADCValues+0x5e0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041fa:	4413      	add	r3, r2
 80041fc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004208:	4bad      	ldr	r3, [pc, #692]	; (80044c0 <getADCValues+0x5e0>)
 800420a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800420e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004212:	4bab      	ldr	r3, [pc, #684]	; (80044c0 <getADCValues+0x5e0>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421e:	4ba8      	ldr	r3, [pc, #672]	; (80044c0 <getADCValues+0x5e0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004226:	4aa7      	ldr	r2, [pc, #668]	; (80044c4 <getADCValues+0x5e4>)
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004230:	4ba3      	ldr	r3, [pc, #652]	; (80044c0 <getADCValues+0x5e0>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800423a:	4413      	add	r3, r2
 800423c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004248:	4b9d      	ldr	r3, [pc, #628]	; (80044c0 <getADCValues+0x5e0>)
 800424a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800424e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004252:	4b9b      	ldr	r3, [pc, #620]	; (80044c0 <getADCValues+0x5e0>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425e:	4b98      	ldr	r3, [pc, #608]	; (80044c0 <getADCValues+0x5e0>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	4a97      	ldr	r2, [pc, #604]	; (80044c4 <getADCValues+0x5e4>)
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004270:	4b93      	ldr	r3, [pc, #588]	; (80044c0 <getADCValues+0x5e0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800427a:	4413      	add	r3, r2
 800427c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004288:	4b8d      	ldr	r3, [pc, #564]	; (80044c0 <getADCValues+0x5e0>)
 800428a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800428e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004292:	4b8b      	ldr	r3, [pc, #556]	; (80044c0 <getADCValues+0x5e0>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429e:	4b88      	ldr	r3, [pc, #544]	; (80044c0 <getADCValues+0x5e0>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	4a87      	ldr	r2, [pc, #540]	; (80044c4 <getADCValues+0x5e4>)
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80042b0:	4b83      	ldr	r3, [pc, #524]	; (80044c0 <getADCValues+0x5e0>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80042ba:	4413      	add	r3, r2
 80042bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042c8:	4b7d      	ldr	r3, [pc, #500]	; (80044c0 <getADCValues+0x5e0>)
 80042ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80042ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d2:	4b7b      	ldr	r3, [pc, #492]	; (80044c0 <getADCValues+0x5e0>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042de:	4b78      	ldr	r3, [pc, #480]	; (80044c0 <getADCValues+0x5e0>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <getADCValues+0x5e4>)
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80042f0:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <getADCValues+0x5e0>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80042fa:	4413      	add	r3, r2
 80042fc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004308:	4b6d      	ldr	r3, [pc, #436]	; (80044c0 <getADCValues+0x5e0>)
 800430a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800430e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004312:	4b6b      	ldr	r3, [pc, #428]	; (80044c0 <getADCValues+0x5e0>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431e:	4b68      	ldr	r3, [pc, #416]	; (80044c0 <getADCValues+0x5e0>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	4a67      	ldr	r2, [pc, #412]	; (80044c4 <getADCValues+0x5e4>)
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004330:	4b63      	ldr	r3, [pc, #396]	; (80044c0 <getADCValues+0x5e0>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800433a:	4413      	add	r3, r2
 800433c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004348:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <getADCValues+0x5e0>)
 800434a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800434e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004352:	4b5b      	ldr	r3, [pc, #364]	; (80044c0 <getADCValues+0x5e0>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800435e:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <getADCValues+0x5e0>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004366:	4a57      	ldr	r2, [pc, #348]	; (80044c4 <getADCValues+0x5e4>)
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004370:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <getADCValues+0x5e0>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800437a:	4413      	add	r3, r2
 800437c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004388:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <getADCValues+0x5e0>)
 800438a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800438e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004392:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <getADCValues+0x5e0>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439e:	4b48      	ldr	r3, [pc, #288]	; (80044c0 <getADCValues+0x5e0>)
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	4a47      	ldr	r2, [pc, #284]	; (80044c4 <getADCValues+0x5e4>)
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80043b0:	4b43      	ldr	r3, [pc, #268]	; (80044c0 <getADCValues+0x5e0>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80043ba:	4413      	add	r3, r2
 80043bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80043c0:	ee07 3a90 	vmov	s15, r3
 80043c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c8:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <getADCValues+0x5e0>)
 80043ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <getADCValues+0x5e0>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043de:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <getADCValues+0x5e0>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	4a37      	ldr	r2, [pc, #220]	; (80044c4 <getADCValues+0x5e4>)
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80043f0:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <getADCValues+0x5e0>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80043fa:	4413      	add	r3, r2
 80043fc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004408:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <getADCValues+0x5e0>)
 800440a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800440e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <getADCValues+0x5e0>)
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <getADCValues+0x5e0>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <getADCValues+0x5e4>)
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <getADCValues+0x5e0>)
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800443a:	4413      	add	r3, r2
 800443c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004440:	ee07 3a90 	vmov	s15, r3
 8004444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <getADCValues+0x5e0>)
 800444a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800444e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004452:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <getADCValues+0x5e0>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <getADCValues+0x5e0>)
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <getADCValues+0x5e4>)
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004470:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <getADCValues+0x5e0>)
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800447a:	4413      	add	r3, r2
 800447c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004480:	ee07 3a90 	vmov	s15, r3
 8004484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <getADCValues+0x5e0>)
 800448a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800448e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <getADCValues+0x5e0>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <getADCValues+0x5e0>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <getADCValues+0x5e4>)
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <getADCValues+0x5e0>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	e007      	b.n	80044c8 <getADCValues+0x5e8>
 80044b8:	2002976c 	.word	0x2002976c
 80044bc:	66666667 	.word	0x66666667
 80044c0:	20000058 	.word	0x20000058
 80044c4:	200033b4 	.word	0x200033b4
 80044c8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80044cc:	4413      	add	r3, r2
 80044ce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044da:	4b9c      	ldr	r3, [pc, #624]	; (800474c <getADCValues+0x86c>)
 80044dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80044e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044e4:	4b99      	ldr	r3, [pc, #612]	; (800474c <getADCValues+0x86c>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	ee07 3a90 	vmov	s15, r3
 80044ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f0:	4b96      	ldr	r3, [pc, #600]	; (800474c <getADCValues+0x86c>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f8:	4a95      	ldr	r2, [pc, #596]	; (8004750 <getADCValues+0x870>)
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004502:	4b92      	ldr	r3, [pc, #584]	; (800474c <getADCValues+0x86c>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800450c:	4413      	add	r3, r2
 800450e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800451a:	4b8c      	ldr	r3, [pc, #560]	; (800474c <getADCValues+0x86c>)
 800451c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004524:	4b89      	ldr	r3, [pc, #548]	; (800474c <getADCValues+0x86c>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004530:	4b86      	ldr	r3, [pc, #536]	; (800474c <getADCValues+0x86c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004538:	4a85      	ldr	r2, [pc, #532]	; (8004750 <getADCValues+0x870>)
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004542:	4b82      	ldr	r3, [pc, #520]	; (800474c <getADCValues+0x86c>)
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800454c:	4413      	add	r3, r2
 800454e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800455a:	4b7c      	ldr	r3, [pc, #496]	; (800474c <getADCValues+0x86c>)
 800455c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004564:	4b79      	ldr	r3, [pc, #484]	; (800474c <getADCValues+0x86c>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004570:	4b76      	ldr	r3, [pc, #472]	; (800474c <getADCValues+0x86c>)
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004578:	4a75      	ldr	r2, [pc, #468]	; (8004750 <getADCValues+0x870>)
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004582:	4b72      	ldr	r3, [pc, #456]	; (800474c <getADCValues+0x86c>)
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800458c:	4413      	add	r3, r2
 800458e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800459a:	4b6c      	ldr	r3, [pc, #432]	; (800474c <getADCValues+0x86c>)
 800459c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80045a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045a4:	4b69      	ldr	r3, [pc, #420]	; (800474c <getADCValues+0x86c>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b0:	4b66      	ldr	r3, [pc, #408]	; (800474c <getADCValues+0x86c>)
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b8:	4a65      	ldr	r2, [pc, #404]	; (8004750 <getADCValues+0x870>)
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <getADCValues+0x86c>)
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80045cc:	4413      	add	r3, r2
 80045ce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045da:	4b5c      	ldr	r3, [pc, #368]	; (800474c <getADCValues+0x86c>)
 80045dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80045e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045e4:	4b59      	ldr	r3, [pc, #356]	; (800474c <getADCValues+0x86c>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f0:	4b56      	ldr	r3, [pc, #344]	; (800474c <getADCValues+0x86c>)
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	4a55      	ldr	r2, [pc, #340]	; (8004750 <getADCValues+0x870>)
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004602:	4b52      	ldr	r3, [pc, #328]	; (800474c <getADCValues+0x86c>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800460c:	4413      	add	r3, r2
 800460e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461a:	4b4c      	ldr	r3, [pc, #304]	; (800474c <getADCValues+0x86c>)
 800461c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004624:	4b49      	ldr	r3, [pc, #292]	; (800474c <getADCValues+0x86c>)
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <getADCValues+0x86c>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	4a45      	ldr	r2, [pc, #276]	; (8004750 <getADCValues+0x870>)
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004642:	4b42      	ldr	r3, [pc, #264]	; (800474c <getADCValues+0x86c>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800464c:	4413      	add	r3, r2
 800464e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800465a:	4b3c      	ldr	r3, [pc, #240]	; (800474c <getADCValues+0x86c>)
 800465c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <getADCValues+0x86c>)
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <getADCValues+0x86c>)
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004678:	4a35      	ldr	r2, [pc, #212]	; (8004750 <getADCValues+0x870>)
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004682:	4b32      	ldr	r3, [pc, #200]	; (800474c <getADCValues+0x86c>)
 8004684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800468c:	4413      	add	r3, r2
 800468e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <getADCValues+0x86c>)
 800469c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <getADCValues+0x86c>)
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <getADCValues+0x86c>)
 80046b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <getADCValues+0x870>)
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <getADCValues+0x86c>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80046cc:	4413      	add	r3, r2
 80046ce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <getADCValues+0x86c>)
 80046dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <getADCValues+0x86c>)
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f0:	4b16      	ldr	r3, [pc, #88]	; (800474c <getADCValues+0x86c>)
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <getADCValues+0x870>)
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <getADCValues+0x86c>)
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800470c:	4413      	add	r3, r2
 800470e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <getADCValues+0x86c>)
 800471c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <getADCValues+0x86c>)
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <getADCValues+0x86c>)
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004738:	4a05      	ldr	r2, [pc, #20]	; (8004750 <getADCValues+0x870>)
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <getADCValues+0x870>)
}
 8004744:	4618      	mov	r0, r3
 8004746:	3778      	adds	r7, #120	; 0x78
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000058 	.word	0x20000058
 8004750:	200033b4 	.word	0x200033b4

08004754 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <debugUartParser>:
	uart_buf_len = sprintf(uart_buf, message);
	HAL_UART_Transmit(&SPARE_UART,(uint8_t *)uart_buf, uart_buf_len,100);
	//HAL_UART_Receive(&SPARE_UART,(uint8_t*)uart_receive_buf, sizeof(uart_receive_buf),1000);
}

uint8_t debugUartParser(){
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	uint8_t var_Seen[4];
	key_uint8[0] = (uint8_t)'G';
 800476e:	2347      	movs	r3, #71	; 0x47
 8004770:	723b      	strb	r3, [r7, #8]
	key_uint8[1] = (uint8_t)'I';
 8004772:	2349      	movs	r3, #73	; 0x49
 8004774:	727b      	strb	r3, [r7, #9]
	key_uint8[2] = (uint8_t)'V';
 8004776:	2356      	movs	r3, #86	; 0x56
 8004778:	72bb      	strb	r3, [r7, #10]
	key_uint8[3] = (uint8_t)'E';
 800477a:	2345      	movs	r3, #69	; 0x45
 800477c:	72fb      	strb	r3, [r7, #11]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 800477e:	2305      	movs	r3, #5
 8004780:	60fb      	str	r3, [r7, #12]

	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e039      	b.n	80047fc <debugUartParser+0x94>
		if(debug_Uart_RX_Buf[x]==key_uint8[0]){
 8004788:	4a25      	ldr	r2, [pc, #148]	; (8004820 <debugUartParser+0xb8>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	7a3b      	ldrb	r3, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d102      	bne.n	800479c <debugUartParser+0x34>
			var_Seen[0] = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	713b      	strb	r3, [r7, #4]
 800479a:	e02c      	b.n	80047f6 <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 800479c:	4a20      	ldr	r2, [pc, #128]	; (8004820 <debugUartParser+0xb8>)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	7a7b      	ldrb	r3, [r7, #9]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d105      	bne.n	80047b6 <debugUartParser+0x4e>
 80047aa:	793b      	ldrb	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <debugUartParser+0x4e>
			var_Seen[1] = 1;
 80047b0:	2301      	movs	r3, #1
 80047b2:	717b      	strb	r3, [r7, #5]
 80047b4:	e01f      	b.n	80047f6 <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <debugUartParser+0xb8>)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	7abb      	ldrb	r3, [r7, #10]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d105      	bne.n	80047d0 <debugUartParser+0x68>
 80047c4:	797b      	ldrb	r3, [r7, #5]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <debugUartParser+0x68>
			var_Seen[2] = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	71bb      	strb	r3, [r7, #6]
 80047ce:	e012      	b.n	80047f6 <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <debugUartParser+0xb8>)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	7afb      	ldrb	r3, [r7, #11]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d105      	bne.n	80047ea <debugUartParser+0x82>
 80047de:	79bb      	ldrb	r3, [r7, #6]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <debugUartParser+0x82>
			var_Seen[3] = 1;
 80047e4:	2301      	movs	r3, #1
 80047e6:	71fb      	strb	r3, [r7, #7]
			break;
 80047e8:	e00b      	b.n	8004802 <debugUartParser+0x9a>
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	2204      	movs	r2, #4
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f011 fab9 	bl	8015d68 <memset>
	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2bc7      	cmp	r3, #199	; 0xc7
 8004800:	d9c2      	bls.n	8004788 <debugUartParser+0x20>
		}
	}
	if(var_Seen[3]){
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d006      	beq.n	8004816 <debugUartParser+0xae>
		memset(debug_Uart_RX_Buf,0x00,sizeof(debug_Uart_RX_Buf));
 8004808:	22c8      	movs	r2, #200	; 0xc8
 800480a:	2100      	movs	r1, #0
 800480c:	4804      	ldr	r0, [pc, #16]	; (8004820 <debugUartParser+0xb8>)
 800480e:	f011 faab 	bl	8015d68 <memset>
		return true;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <debugUartParser+0xb0>
	}
	else{
		return false;
 8004816:	2300      	movs	r3, #0
	}
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2002c154 	.word	0x2002c154

08004824 <socUartParser>:

uint8_t * socUartParser(){
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	static uint8_t var_Seen[15];
	memset(var_Seen,0x00,sizeof(var_Seen));
 800482a:	220f      	movs	r2, #15
 800482c:	2100      	movs	r1, #0
 800482e:	4843      	ldr	r0, [pc, #268]	; (800493c <socUartParser+0x118>)
 8004830:	f011 fa9a 	bl	8015d68 <memset>
	static uint8_t failure[15];
	memset(failure, 0xff,sizeof(failure));
 8004834:	220f      	movs	r2, #15
 8004836:	21ff      	movs	r1, #255	; 0xff
 8004838:	4841      	ldr	r0, [pc, #260]	; (8004940 <socUartParser+0x11c>)
 800483a:	f011 fa95 	bl	8015d68 <memset>
	key_uint8[0] = (uint8_t)'F';
 800483e:	2346      	movs	r3, #70	; 0x46
 8004840:	713b      	strb	r3, [r7, #4]
	key_uint8[1] = (uint8_t)'F';
 8004842:	2346      	movs	r3, #70	; 0x46
 8004844:	717b      	strb	r3, [r7, #5]
	key_uint8[2] = (uint8_t)'U';
 8004846:	2355      	movs	r3, #85	; 0x55
 8004848:	71bb      	strb	r3, [r7, #6]
	key_uint8[3] = (uint8_t)':';
 800484a:	233a      	movs	r3, #58	; 0x3a
 800484c:	71fb      	strb	r3, [r7, #7]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 800484e:	2305      	movs	r3, #5
 8004850:	60fb      	str	r3, [r7, #12]
	int ffuBytes=4;
 8004852:	2304      	movs	r3, #4
 8004854:	60bb      	str	r3, [r7, #8]
	for(x=0;x<sizeof(soc_Uart_RX_Buf);x++){
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e057      	b.n	800490c <socUartParser+0xe8>
		if(soc_Uart_RX_Buf[x]==key_uint8[0] && var_Seen[0]==0){
 800485c:	4a39      	ldr	r2, [pc, #228]	; (8004944 <socUartParser+0x120>)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	781a      	ldrb	r2, [r3, #0]
 8004864:	793b      	ldrb	r3, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d107      	bne.n	800487a <socUartParser+0x56>
 800486a:	4b34      	ldr	r3, [pc, #208]	; (800493c <socUartParser+0x118>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d103      	bne.n	800487a <socUartParser+0x56>
			var_Seen[0] = 1;
 8004872:	4b32      	ldr	r3, [pc, #200]	; (800493c <socUartParser+0x118>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e045      	b.n	8004906 <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 800487a:	4a32      	ldr	r2, [pc, #200]	; (8004944 <socUartParser+0x120>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	797b      	ldrb	r3, [r7, #5]
 8004884:	429a      	cmp	r2, r3
 8004886:	d107      	bne.n	8004898 <socUartParser+0x74>
 8004888:	4b2c      	ldr	r3, [pc, #176]	; (800493c <socUartParser+0x118>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <socUartParser+0x74>
			var_Seen[1] = 1;
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <socUartParser+0x118>)
 8004892:	2201      	movs	r2, #1
 8004894:	705a      	strb	r2, [r3, #1]
 8004896:	e036      	b.n	8004906 <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <socUartParser+0x120>)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	79bb      	ldrb	r3, [r7, #6]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d107      	bne.n	80048b6 <socUartParser+0x92>
 80048a6:	4b25      	ldr	r3, [pc, #148]	; (800493c <socUartParser+0x118>)
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <socUartParser+0x92>
			var_Seen[2] = 1;
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <socUartParser+0x118>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	709a      	strb	r2, [r3, #2]
 80048b4:	e027      	b.n	8004906 <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 80048b6:	4a23      	ldr	r2, [pc, #140]	; (8004944 <socUartParser+0x120>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <socUartParser+0xb0>
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <socUartParser+0x118>)
 80048c6:	789b      	ldrb	r3, [r3, #2]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <socUartParser+0xb0>
			var_Seen[3] = 1;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <socUartParser+0x118>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	70da      	strb	r2, [r3, #3]
 80048d2:	e018      	b.n	8004906 <socUartParser+0xe2>
			//break;
		}
		else if(var_Seen[3]){
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <socUartParser+0x118>)
 80048d6:	78db      	ldrb	r3, [r3, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00f      	beq.n	80048fc <socUartParser+0xd8>
			if(ffuBytes<sizeof(var_Seen)){
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b0e      	cmp	r3, #14
 80048e0:	d819      	bhi.n	8004916 <socUartParser+0xf2>
				var_Seen[ffuBytes] = soc_Uart_RX_Buf[x];
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <socUartParser+0x120>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	7819      	ldrb	r1, [r3, #0]
 80048ea:	4a14      	ldr	r2, [pc, #80]	; (800493c <socUartParser+0x118>)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4413      	add	r3, r2
 80048f0:	460a      	mov	r2, r1
 80048f2:	701a      	strb	r2, [r3, #0]
				ffuBytes++;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	3301      	adds	r3, #1
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	e004      	b.n	8004906 <socUartParser+0xe2>
			else{
				break;
			}
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 80048fc:	220f      	movs	r2, #15
 80048fe:	2100      	movs	r1, #0
 8004900:	480e      	ldr	r0, [pc, #56]	; (800493c <socUartParser+0x118>)
 8004902:	f011 fa31 	bl	8015d68 <memset>
	for(x=0;x<sizeof(soc_Uart_RX_Buf);x++){
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004912:	d3a3      	bcc.n	800485c <socUartParser+0x38>
 8004914:	e000      	b.n	8004918 <socUartParser+0xf4>
				break;
 8004916:	bf00      	nop
		}
	}
	if(var_Seen[3]){
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <socUartParser+0x118>)
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <socUartParser+0x10c>

		memset(soc_Uart_RX_Buf,0x00,sizeof(soc_Uart_RX_Buf));
 8004920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004924:	2100      	movs	r1, #0
 8004926:	4807      	ldr	r0, [pc, #28]	; (8004944 <socUartParser+0x120>)
 8004928:	f011 fa1e 	bl	8015d68 <memset>
		return var_Seen;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <socUartParser+0x118>)
 800492e:	e000      	b.n	8004932 <socUartParser+0x10e>
	}
	else{
		return failure;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <socUartParser+0x11c>)
	}
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20003408 	.word	0x20003408
 8004940:	20003418 	.word	0x20003418
 8004944:	20029384 	.word	0x20029384

08004948 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int x=0;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8004954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004958:	480c      	ldr	r0, [pc, #48]	; (800498c <startHeartbeat+0x44>)
 800495a:	f004 fec8 	bl	80096ee <HAL_GPIO_TogglePin>
	  //display needs to alternate EXCOMM to avoid burn in.
	  if(x){
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <startHeartbeat+0x2c>
		  LCD_EXCOMM_L;
 8004964:	2200      	movs	r2, #0
 8004966:	2101      	movs	r1, #1
 8004968:	4809      	ldr	r0, [pc, #36]	; (8004990 <startHeartbeat+0x48>)
 800496a:	f004 fea7 	bl	80096bc <HAL_GPIO_WritePin>
		  x=0;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e006      	b.n	8004982 <startHeartbeat+0x3a>
	  }
	  else{
		  LCD_EXCOMM_H
 8004974:	2201      	movs	r2, #1
 8004976:	2101      	movs	r1, #1
 8004978:	4805      	ldr	r0, [pc, #20]	; (8004990 <startHeartbeat+0x48>)
 800497a:	f004 fe9f 	bl	80096bc <HAL_GPIO_WritePin>
		  x=1;
 800497e:	2301      	movs	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]
	  }
	  //spareUartTransmitRead("YOYOYO!\r\n");
	  osDelay(500);
 8004982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004986:	f009 ff8d 	bl	800e8a4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800498a:	e7e3      	b.n	8004954 <startHeartbeat+0xc>
 800498c:	40022000 	.word	0x40022000
 8004990:	40022400 	.word	0x40022400

08004994 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af02      	add	r7, sp, #8
 800499a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  HAL_StatusTypeDef Status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  // Clear HAL fault LED
	  //errorLED.fault9 = false;
	  //empty out the data ready variables and the adc3_bufs
	  adcStates.adcBank1Finished=0;
 80049a0:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <startADCRead+0xb4>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
	  adcStates.adcBank2Finished=0;
 80049a6:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <startADCRead+0xb4>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	705a      	strb	r2, [r3, #1]
	  adcStates.adcBank3Finished=0;
 80049ac:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <startADCRead+0xb4>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	709a      	strb	r2, [r3, #2]
	//memset(adcRestart,0,sizeof(adcRestart));
	memset(adc1_buf, 0, sizeof(adc1_buf));
 80049b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80049b6:	2100      	movs	r1, #0
 80049b8:	4824      	ldr	r0, [pc, #144]	; (8004a4c <startADCRead+0xb8>)
 80049ba:	f011 f9d5 	bl	8015d68 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80049be:	f242 7210 	movw	r2, #10000	; 0x2710
 80049c2:	2100      	movs	r1, #0
 80049c4:	4822      	ldr	r0, [pc, #136]	; (8004a50 <startADCRead+0xbc>)
 80049c6:	f011 f9cf 	bl	8015d68 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80049ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80049ce:	2100      	movs	r1, #0
 80049d0:	4820      	ldr	r0, [pc, #128]	; (8004a54 <startADCRead+0xc0>)
 80049d2:	f011 f9c9 	bl	8015d68 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	491c      	ldr	r1, [pc, #112]	; (8004a4c <startADCRead+0xb8>)
 80049dc:	481e      	ldr	r0, [pc, #120]	; (8004a58 <startADCRead+0xc4>)
 80049de:	f003 fb97 	bl	8008110 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <startADCRead+0x64>
	{
		DevUI_Error_Handler("ADC1 Failed read.", Status, 0, 0, true);
 80049e8:	7bf9      	ldrb	r1, [r7, #15]
 80049ea:	2301      	movs	r3, #1
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	2200      	movs	r2, #0
 80049f2:	481a      	ldr	r0, [pc, #104]	; (8004a5c <startADCRead+0xc8>)
 80049f4:	f7fe fd78 	bl	80034e8 <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4914      	ldr	r1, [pc, #80]	; (8004a50 <startADCRead+0xbc>)
 80049fe:	4818      	ldr	r0, [pc, #96]	; (8004a60 <startADCRead+0xcc>)
 8004a00:	f003 fb86 	bl	8008110 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <startADCRead+0x86>
	{
		DevUI_Error_Handler("ADC2 Failed read.", Status, 0, 0, true);
 8004a0a:	7bf9      	ldrb	r1, [r7, #15]
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2300      	movs	r3, #0
 8004a12:	2200      	movs	r2, #0
 8004a14:	4813      	ldr	r0, [pc, #76]	; (8004a64 <startADCRead+0xd0>)
 8004a16:	f7fe fd67 	bl	80034e8 <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	490d      	ldr	r1, [pc, #52]	; (8004a54 <startADCRead+0xc0>)
 8004a20:	4811      	ldr	r0, [pc, #68]	; (8004a68 <startADCRead+0xd4>)
 8004a22:	f003 fb75 	bl	8008110 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <startADCRead+0xa8>
	{
		DevUI_Error_Handler("ADC3 Failed read.", Status, 0, 0, true);
 8004a2c:	7bf9      	ldrb	r1, [r7, #15]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	2200      	movs	r2, #0
 8004a36:	480d      	ldr	r0, [pc, #52]	; (8004a6c <startADCRead+0xd8>)
 8004a38:	f7fe fd56 	bl	80034e8 <DevUI_Error_Handler>
	}
    osDelay(600);
 8004a3c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004a40:	f009 ff30 	bl	800e8a4 <osDelay>
	  adcStates.adcBank1Finished=0;
 8004a44:	e7ac      	b.n	80049a0 <startADCRead+0xc>
 8004a46:	bf00      	nop
 8004a48:	20003324 	.word	0x20003324
 8004a4c:	2002976c 	.word	0x2002976c
 8004a50:	2002e9c4 	.word	0x2002e9c4
 8004a54:	2002c21c 	.word	0x2002c21c
 8004a58:	2002bf00 	.word	0x2002bf00
 8004a5c:	0801a720 	.word	0x0801a720
 8004a60:	20028dfc 	.word	0x20028dfc
 8004a64:	0801a734 	.word	0x0801a734
 8004a68:	2002bfac 	.word	0x2002bfac
 8004a6c:	0801a748 	.word	0x0801a748

08004a70 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 initializeDisplay();
 8004a78:	f000 fcd0 	bl	800541c <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
	 uint8_t menu_val = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75bb      	strb	r3, [r7, #22]
	 uint8_t running_menu = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	757b      	strb	r3, [r7, #21]

	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8004a8c:	f107 020c 	add.w	r2, r7, #12
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	21ff      	movs	r1, #255	; 0xff
 8004a96:	2000      	movs	r0, #0
 8004a98:	f00b fdd6 	bl	8010648 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	75fb      	strb	r3, [r7, #23]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	75bb      	strb	r3, [r7, #22]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	757b      	strb	r3, [r7, #21]
	 	  //}
	 	  //setVoltageMux(COMA,socI2cVoltageMux.enableSW2,0);

	 	  //readI2c = parseZionEEPROM(SOC_ADDRESS);
	 	  //int blah = *(readI2c+4);
	 	  int x = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
//	 	  printf(readI2c[0]);
//	 	  readDataFromEEPROM((uint8_t*)readI2c,ASIC_ADDRESS,0x0,sizeof(readI2c), 500);
//	 	  printf(readI2c[0]);
//	 	  readDataFromEEPROM((uint8_t*)readI2c,DISPLAY_ADDRESS,0x0,sizeof(readI2c), 500);
//	 	  printf(readI2c[0]);
	 	  x = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8004ac6:	7d7b      	ldrb	r3, [r7, #21]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d820      	bhi.n	8004b10 <GetDaScreenBlink+0xa0>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <GetDaScreenBlink+0x64>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004af3 	.word	0x08004af3
 8004ad8:	08004ae5 	.word	0x08004ae5
 8004adc:	08004afd 	.word	0x08004afd
 8004ae0:	08004b07 	.word	0x08004b07
		  {
		  case BOOT_MENU:
		  {
			  //printf("BOOT_MENU\r\n");
			  drawBootMenu(menu_val, button_val, running_menu);
 8004ae4:	7dbb      	ldrb	r3, [r7, #22]
 8004ae6:	7d7a      	ldrb	r2, [r7, #21]
 8004ae8:	7df9      	ldrb	r1, [r7, #23]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fc42 	bl	8006374 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8004af0:	e00e      	b.n	8004b10 <GetDaScreenBlink+0xa0>
		  }
		  case MAIN_MENU:
		  {
			  //printf("MAIN_MENU\r\n");
			  drawMainMenu(menu_val);
 8004af2:	7dbb      	ldrb	r3, [r7, #22]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fccb 	bl	8005490 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8004afa:	e009      	b.n	8004b10 <GetDaScreenBlink+0xa0>
		  }
		  case STATUS_MENU:
		  {
			  //printf("STATUS_MENU\r\n");
			  drawStatusMenu(menu_val);
 8004afc:	7dbb      	ldrb	r3, [r7, #22]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fe60 	bl	80057c4 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8004b04:	e004      	b.n	8004b10 <GetDaScreenBlink+0xa0>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  //printf("SYSTEM INFO MENU\r\n");
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8004b06:	7dbb      	ldrb	r3, [r7, #22]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 f917 	bl	8005d3c <drawSystemInfoMenu>
			  break;
 8004b0e:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8004b10:	2064      	movs	r0, #100	; 0x64
 8004b12:	f009 fec7 	bl	800e8a4 <osDelay>
	   {
 8004b16:	e7b7      	b.n	8004a88 <GetDaScreenBlink+0x18>

08004b18 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004b20:	4b48      	ldr	r3, [pc, #288]	; (8004c44 <startGpioInputRead+0x12c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	461c      	mov	r4, r3
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	4847      	ldr	r0, [pc, #284]	; (8004c48 <startGpioInputRead+0x130>)
 8004b2a:	f004 fdaf 	bl	800968c <HAL_GPIO_ReadPin>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b46      	ldr	r3, [pc, #280]	; (8004c4c <startGpioInputRead+0x134>)
 8004b34:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <startGpioInputRead+0x12c>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b40:	4843      	ldr	r0, [pc, #268]	; (8004c50 <startGpioInputRead+0x138>)
 8004b42:	f004 fda3 	bl	800968c <HAL_GPIO_ReadPin>
 8004b46:	4603      	mov	r3, r0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <startGpioInputRead+0x134>)
 8004b4c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8004b4e:	4b3d      	ldr	r3, [pc, #244]	; (8004c44 <startGpioInputRead+0x12c>)
 8004b50:	789b      	ldrb	r3, [r3, #2]
 8004b52:	461c      	mov	r4, r3
 8004b54:	2110      	movs	r1, #16
 8004b56:	483f      	ldr	r0, [pc, #252]	; (8004c54 <startGpioInputRead+0x13c>)
 8004b58:	f004 fd98 	bl	800968c <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <startGpioInputRead+0x134>)
 8004b62:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <startGpioInputRead+0x12c>)
 8004b66:	78db      	ldrb	r3, [r3, #3]
 8004b68:	461c      	mov	r4, r3
 8004b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b6e:	4839      	ldr	r0, [pc, #228]	; (8004c54 <startGpioInputRead+0x13c>)
 8004b70:	f004 fd8c 	bl	800968c <HAL_GPIO_ReadPin>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <startGpioInputRead+0x134>)
 8004b7a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <startGpioInputRead+0x12c>)
 8004b7e:	791b      	ldrb	r3, [r3, #4]
 8004b80:	461c      	mov	r4, r3
 8004b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b86:	4833      	ldr	r0, [pc, #204]	; (8004c54 <startGpioInputRead+0x13c>)
 8004b88:	f004 fd80 	bl	800968c <HAL_GPIO_ReadPin>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <startGpioInputRead+0x134>)
 8004b92:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8004b94:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <startGpioInputRead+0x12c>)
 8004b96:	795b      	ldrb	r3, [r3, #5]
 8004b98:	461c      	mov	r4, r3
 8004b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b9e:	482d      	ldr	r0, [pc, #180]	; (8004c54 <startGpioInputRead+0x13c>)
 8004ba0:	f004 fd74 	bl	800968c <HAL_GPIO_ReadPin>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4b28      	ldr	r3, [pc, #160]	; (8004c4c <startGpioInputRead+0x134>)
 8004baa:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004bac:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <startGpioInputRead+0x12c>)
 8004bae:	799b      	ldrb	r3, [r3, #6]
 8004bb0:	461c      	mov	r4, r3
 8004bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bb6:	4827      	ldr	r0, [pc, #156]	; (8004c54 <startGpioInputRead+0x13c>)
 8004bb8:	f004 fd68 	bl	800968c <HAL_GPIO_ReadPin>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <startGpioInputRead+0x134>)
 8004bc2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <startGpioInputRead+0x12c>)
 8004bc6:	79db      	ldrb	r3, [r3, #7]
 8004bc8:	461c      	mov	r4, r3
 8004bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bce:	4821      	ldr	r0, [pc, #132]	; (8004c54 <startGpioInputRead+0x13c>)
 8004bd0:	f004 fd5c 	bl	800968c <HAL_GPIO_ReadPin>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <startGpioInputRead+0x134>)
 8004bda:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8004bdc:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <startGpioInputRead+0x12c>)
 8004bde:	7a1b      	ldrb	r3, [r3, #8]
 8004be0:	461c      	mov	r4, r3
 8004be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004be6:	481b      	ldr	r0, [pc, #108]	; (8004c54 <startGpioInputRead+0x13c>)
 8004be8:	f004 fd50 	bl	800968c <HAL_GPIO_ReadPin>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <startGpioInputRead+0x134>)
 8004bf2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <startGpioInputRead+0x12c>)
 8004bf6:	7a5b      	ldrb	r3, [r3, #9]
 8004bf8:	461c      	mov	r4, r3
 8004bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bfe:	4815      	ldr	r0, [pc, #84]	; (8004c54 <startGpioInputRead+0x13c>)
 8004c00:	f004 fd44 	bl	800968c <HAL_GPIO_ReadPin>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <startGpioInputRead+0x134>)
 8004c0a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <startGpioInputRead+0x12c>)
 8004c0e:	7a9b      	ldrb	r3, [r3, #10]
 8004c10:	461c      	mov	r4, r3
 8004c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c16:	480f      	ldr	r0, [pc, #60]	; (8004c54 <startGpioInputRead+0x13c>)
 8004c18:	f004 fd38 	bl	800968c <HAL_GPIO_ReadPin>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <startGpioInputRead+0x134>)
 8004c22:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <startGpioInputRead+0x12c>)
 8004c26:	7adb      	ldrb	r3, [r3, #11]
 8004c28:	461c      	mov	r4, r3
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	480a      	ldr	r0, [pc, #40]	; (8004c58 <startGpioInputRead+0x140>)
 8004c2e:	f004 fd2d 	bl	800968c <HAL_GPIO_ReadPin>
 8004c32:	4603      	mov	r3, r0
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <startGpioInputRead+0x134>)
 8004c38:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004c3a:	f240 30b6 	movw	r0, #950	; 0x3b6
 8004c3e:	f009 fe31 	bl	800e8a4 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004c42:	e76d      	b.n	8004b20 <startGpioInputRead+0x8>
 8004c44:	20000014 	.word	0x20000014
 8004c48:	40020400 	.word	0x40020400
 8004c4c:	20028df0 	.word	0x20028df0
 8004c50:	40020800 	.word	0x40020800
 8004c54:	40020c00 	.word	0x40020c00
 8004c58:	40021000 	.word	0x40021000

08004c5c <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004c70:	2303      	movs	r3, #3
 8004c72:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004c78:	4b55      	ldr	r3, [pc, #340]	; (8004dd0 <startNavigationTask+0x174>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d86f      	bhi.n	8004d62 <startNavigationTask+0x106>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <startNavigationTask+0x2c>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cff 	.word	0x08004cff
 8004c94:	08004d2d 	.word	0x08004d2d
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d070      	beq.n	8004d80 <startNavigationTask+0x124>
 8004c9e:	4b4d      	ldr	r3, [pc, #308]	; (8004dd4 <startNavigationTask+0x178>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d16c      	bne.n	8004d80 <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004cac:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <startNavigationTask+0x17c>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	f00b fd1a 	bl	80106fc <xTaskGenericNotify>
		}
		break;
 8004cc8:	e05a      	b.n	8004d80 <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	7b3b      	ldrb	r3, [r7, #12]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d258      	bcs.n	8004d84 <startNavigationTask+0x128>
 8004cd2:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <startNavigationTask+0x178>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d154      	bne.n	8004d84 <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004ce0:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <startNavigationTask+0x17c>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	f043 0202 	orr.w	r2, r3, #2
 8004cec:	7bbb      	ldrb	r3, [r7, #14]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	f00b fd00 	bl	80106fc <xTaskGenericNotify>
		}
		break;
 8004cfc:	e042      	b.n	8004d84 <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 8004cfe:	4b35      	ldr	r3, [pc, #212]	; (8004dd4 <startNavigationTask+0x178>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <startNavigationTask+0xb2>
			menu_run = prev_menu;
 8004d06:	7b7b      	ldrb	r3, [r7, #13]
 8004d08:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004d0e:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <startNavigationTask+0x17c>)
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	f043 0203 	orr.w	r2, r3, #3
 8004d1a:	7bbb      	ldrb	r3, [r7, #14]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	2204      	movs	r2, #4
 8004d26:	f00b fce9 	bl	80106fc <xTaskGenericNotify>
		break;
 8004d2a:	e02c      	b.n	8004d86 <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d108      	bne.n	8004d44 <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 8004d32:	7bbb      	ldrb	r3, [r7, #14]
 8004d34:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <startNavigationTask+0x17c>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	7bbb      	ldrb	r3, [r7, #14]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4313      	orrs	r3, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f00b fcce 	bl	80106fc <xTaskGenericNotify>
		break;
 8004d60:	e011      	b.n	8004d86 <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <startNavigationTask+0x17c>)
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	f043 0205 	orr.w	r2, r3, #5
 8004d6e:	7bbb      	ldrb	r3, [r7, #14]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	4313      	orrs	r3, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	2300      	movs	r3, #0
 8004d78:	2204      	movs	r2, #4
 8004d7a:	f00b fcbf 	bl	80106fc <xTaskGenericNotify>
		break;
 8004d7e:	e002      	b.n	8004d86 <startNavigationTask+0x12a>
		break;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <startNavigationTask+0x12a>
		break;
 8004d84:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004d86:	7bbb      	ldrb	r3, [r7, #14]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d816      	bhi.n	8004dbc <startNavigationTask+0x160>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <startNavigationTask+0x138>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004dab 	.word	0x08004dab
 8004d98:	08004da5 	.word	0x08004da5
 8004d9c:	08004db1 	.word	0x08004db1
 8004da0:	08004db7 	.word	0x08004db7

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004da4:	2305      	movs	r3, #5
 8004da6:	733b      	strb	r3, [r7, #12]
		break;
 8004da8:	e00b      	b.n	8004dc2 <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004daa:	2303      	movs	r3, #3
 8004dac:	733b      	strb	r3, [r7, #12]
		break;
 8004dae:	e008      	b.n	8004dc2 <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004db0:	2303      	movs	r3, #3
 8004db2:	733b      	strb	r3, [r7, #12]
		break;
 8004db4:	e005      	b.n	8004dc2 <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004db6:	2302      	movs	r3, #2
 8004db8:	733b      	strb	r3, [r7, #12]
		break;
 8004dba:	e002      	b.n	8004dc2 <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004dbc:	2305      	movs	r3, #5
 8004dbe:	733b      	strb	r3, [r7, #12]
		break;
 8004dc0:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <startNavigationTask+0x174>)
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004dc8:	20c8      	movs	r0, #200	; 0xc8
 8004dca:	f009 fd6b 	bl	800e8a4 <osDelay>
	switch(inputButtonSet)
 8004dce:	e753      	b.n	8004c78 <startNavigationTask+0x1c>
 8004dd0:	200000b8 	.word	0x200000b8
 8004dd4:	20003360 	.word	0x20003360
 8004dd8:	20031194 	.word	0x20031194

08004ddc <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b08e      	sub	sp, #56	; 0x38
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	uint8_t B;
	float * presentADCValues;

	// An array of voltage rails that are monitored for faults.  Each element maps to the apporpriate ADC channel for monitoring
	// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
	uint8_t monitor_rails[] = {VSYS, VREG_BOB, VREG_S5A, VREG_S6C};
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <startErrorLEDs+0x64>)
 8004de6:	633b      	str	r3, [r7, #48]	; 0x30

	// An array of falling edge fault thresholds for the voltage rails that are monitored for faults.  Size of the array and index for each fault should match the voltage name in monitor_rails[].
	double monitor_fault_thresholds[] = {VSYS_FLT, VREG_BOB_FLT, VREG_S5A_FLT, VREG_S6C_FLT};
 8004de8:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <startErrorLEDs+0x68>)
 8004dea:	f107 0410 	add.w	r4, r7, #16
 8004dee:	461d      	mov	r5, r3
 8004df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// An array of platform gpio inputs that are monitored for faults.  Each element maps to the appropriate STM GPIO input for monitoring
	// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
	uint8_t monitor_gpio[] = {SOC_IN0, SOC_IN3, SOC_IN8, SOC_IN11};
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <startErrorLEDs+0x6c>)
 8004dfe:	60fb      	str	r3, [r7, #12]

	// An array of logic fault thresholds for the GPIO input rails that are monitored for faults.  The fault thresholds should match the mapping used in monitor_gpio[].
	uint8_t gpio_thresholds[] = {SOC_IN0_FLT, SOC_IN3_FLT, SOC_IN8_FLT, SOC_IN11_FLT};
 8004e00:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004e04:	60bb      	str	r3, [r7, #8]

	uint8_t * errorLEDptr;

  for(;;)
  {
	  int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <startErrorLEDs+0x70>)
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d007      	beq.n	8004e1e <startErrorLEDs+0x42>
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <startErrorLEDs+0x70>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d003      	beq.n	8004e1e <startErrorLEDs+0x42>
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <startErrorLEDs+0x70>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <startErrorLEDs+0x46>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <startErrorLEDs+0x48>
 8004e22:	2300      	movs	r3, #0
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
	  if(weAreAtlas){
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <startErrorLEDs+0x56>
		  atlasErrorLEDs();
 8004e2c:	f00e fed0 	bl	8013bd0 <atlasErrorLEDs>
 8004e30:	e001      	b.n	8004e36 <startErrorLEDs+0x5a>
	  }
	  else{
		  defaultErrorLEDs();
 8004e32:	f010 fe55 	bl	8015ae0 <defaultErrorLEDs>
	  }
    osDelay(500);
 8004e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e3a:	f009 fd33 	bl	800e8a4 <osDelay>
  {
 8004e3e:	e7e2      	b.n	8004e06 <startErrorLEDs+0x2a>
 8004e40:	03020100 	.word	0x03020100
 8004e44:	0801a760 	.word	0x0801a760
 8004e48:	0b080300 	.word	0x0b080300
 8004e4c:	20003328 	.word	0x20003328

08004e50 <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004e5c:	4b79      	ldr	r3, [pc, #484]	; (8005044 <startZionRead+0x1f4>)
 8004e5e:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 8004e60:	4b79      	ldr	r3, [pc, #484]	; (8005048 <startZionRead+0x1f8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 80e5 	bne.w	8005034 <startZionRead+0x1e4>
		  if (ADC_FINISHED){
 8004e6a:	4b78      	ldr	r3, [pc, #480]	; (800504c <startZionRead+0x1fc>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <startZionRead+0x46>
 8004e72:	4b76      	ldr	r3, [pc, #472]	; (800504c <startZionRead+0x1fc>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <startZionRead+0x46>
 8004e7a:	4b74      	ldr	r3, [pc, #464]	; (800504c <startZionRead+0x1fc>)
 8004e7c:	789b      	ldrb	r3, [r3, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 8004e82:	f7ff f82d 	bl	8003ee0 <getADCValues>
 8004e86:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 8004e88:	4b71      	ldr	r3, [pc, #452]	; (8005050 <startZionRead+0x200>)
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4413      	add	r3, r2
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 8004e96:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e9a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005054 <startZionRead+0x204>
 8004e9e:	eef4 7a47 	vcmp.f32	s15, s14
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	f000 80c8 	beq.w	800503a <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8004eae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	dd5d      	ble.n	8004f78 <startZionRead+0x128>
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d15a      	bne.n	8004f78 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 8004ec2:	f002 ff6f 	bl	8007da4 <HAL_GetTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4a63      	ldr	r2, [pc, #396]	; (8005058 <startZionRead+0x208>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	613b      	str	r3, [r7, #16]
				  if(runtime > 3){
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	f340 80af 	ble.w	8005038 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004eda:	f002 fc65 	bl	80077a8 <zionEEPROMPresence>
 8004ede:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004ee8:	4b57      	ldr	r3, [pc, #348]	; (8005048 <startZionRead+0x1f8>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004eee:	20a6      	movs	r0, #166	; 0xa6
 8004ef0:	f002 fcaa 	bl	8007848 <parseZionEEPROM>
 8004ef4:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a53      	ldr	r2, [pc, #332]	; (8005048 <startZionRead+0x1f8>)
 8004efc:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	4a51      	ldr	r2, [pc, #324]	; (8005048 <startZionRead+0x1f8>)
 8004f04:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	4a4f      	ldr	r2, [pc, #316]	; (8005048 <startZionRead+0x1f8>)
 8004f0c:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3304      	adds	r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004f18:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <startZionRead+0x1f8>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004f1e:	20a8      	movs	r0, #168	; 0xa8
 8004f20:	f002 fc92 	bl	8007848 <parseZionEEPROM>
 8004f24:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a47      	ldr	r2, [pc, #284]	; (8005048 <startZionRead+0x1f8>)
 8004f2c:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4a45      	ldr	r2, [pc, #276]	; (8005048 <startZionRead+0x1f8>)
 8004f34:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	4a43      	ldr	r2, [pc, #268]	; (8005048 <startZionRead+0x1f8>)
 8004f3c:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3308      	adds	r3, #8
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004f48:	4b3f      	ldr	r3, [pc, #252]	; (8005048 <startZionRead+0x1f8>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004f4e:	20aa      	movs	r0, #170	; 0xaa
 8004f50:	f002 fc7a 	bl	8007848 <parseZionEEPROM>
 8004f54:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3b      	ldr	r2, [pc, #236]	; (8005048 <startZionRead+0x1f8>)
 8004f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a39      	ldr	r2, [pc, #228]	; (8005048 <startZionRead+0x1f8>)
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	4a37      	ldr	r2, [pc, #220]	; (8005048 <startZionRead+0x1f8>)
 8004f6c:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004f6e:	4b36      	ldr	r3, [pc, #216]	; (8005048 <startZionRead+0x1f8>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004f74:	f009 fc90 	bl	800e898 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f84:	4835      	ldr	r0, [pc, #212]	; (800505c <startZionRead+0x20c>)
 8004f86:	f004 fb99 	bl	80096bc <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <startZionRead+0x1f8>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004f90:	2301      	movs	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e051      	b.n	800503a <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004f96:	f002 fc07 	bl	80077a8 <zionEEPROMPresence>
 8004f9a:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004fa4:	4b28      	ldr	r3, [pc, #160]	; (8005048 <startZionRead+0x1f8>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004faa:	20a6      	movs	r0, #166	; 0xa6
 8004fac:	f002 fc4c 	bl	8007848 <parseZionEEPROM>
 8004fb0:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a24      	ldr	r2, [pc, #144]	; (8005048 <startZionRead+0x1f8>)
 8004fb8:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	4a22      	ldr	r2, [pc, #136]	; (8005048 <startZionRead+0x1f8>)
 8004fc0:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4a20      	ldr	r2, [pc, #128]	; (8005048 <startZionRead+0x1f8>)
 8004fc8:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <startZionRead+0x1f8>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004fda:	20a8      	movs	r0, #168	; 0xa8
 8004fdc:	f002 fc34 	bl	8007848 <parseZionEEPROM>
 8004fe0:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <startZionRead+0x1f8>)
 8004fe8:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <startZionRead+0x1f8>)
 8004ff0:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <startZionRead+0x1f8>)
 8004ff8:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8005004:	4b10      	ldr	r3, [pc, #64]	; (8005048 <startZionRead+0x1f8>)
 8005006:	2201      	movs	r2, #1
 8005008:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 800500a:	20aa      	movs	r0, #170	; 0xaa
 800500c:	f002 fc1c 	bl	8007848 <parseZionEEPROM>
 8005010:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <startZionRead+0x1f8>)
 8005018:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <startZionRead+0x1f8>)
 8005020:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4a08      	ldr	r2, [pc, #32]	; (8005048 <startZionRead+0x1f8>)
 8005028:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <startZionRead+0x1f8>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8005030:	f009 fc32 	bl	800e898 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8005034:	f009 fc30 	bl	800e898 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8005038:	bf00      	nop
	  }
    osDelay(400);
 800503a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800503e:	f009 fc31 	bl	800e8a4 <osDelay>
	  if(!ZION.zionFinished){
 8005042:	e70d      	b.n	8004e60 <startZionRead+0x10>
 8005044:	429a0000 	.word	0x429a0000
 8005048:	20003328 	.word	0x20003328
 800504c:	20003324 	.word	0x20003324
 8005050:	20000058 	.word	0x20000058
 8005054:	429a0000 	.word	0x429a0000
 8005058:	10624dd3 	.word	0x10624dd3
 800505c:	40020400 	.word	0x40020400

08005060 <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
	int presentTime=0;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8005074:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <startBootButtons+0x70>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d024      	beq.n	80050c6 <startBootButtons+0x66>
		  int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <startBootButtons+0x74>)
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d007      	beq.n	8005094 <startBootButtons+0x34>
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <startBootButtons+0x74>)
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b01      	cmp	r3, #1
 800508a:	d003      	beq.n	8005094 <startBootButtons+0x34>
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <startBootButtons+0x74>)
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <startBootButtons+0x38>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <startBootButtons+0x3a>
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
		  presentTime = (HAL_GetTick());
 800509c:	f002 fe82 	bl	8007da4 <HAL_GetTick>
 80050a0:	4603      	mov	r3, r0
 80050a2:	60fb      	str	r3, [r7, #12]
		  if(timeTurnedOn==0){
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <startBootButtons+0x4e>
			  timeTurnedOn=presentTime;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	613b      	str	r3, [r7, #16]
		  }
		  if(weAreAtlas){
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <startBootButtons+0x5e>
			  pwrBtnReady=atlasBootButtons(pwrBtnReady);
 80050b4:	6978      	ldr	r0, [r7, #20]
 80050b6:	f00e fb5d 	bl	8013774 <atlasBootButtons>
 80050ba:	6178      	str	r0, [r7, #20]
 80050bc:	e003      	b.n	80050c6 <startBootButtons+0x66>
		  }
		  else{
			  pwrBtnReady=defaultBootButtons(pwrBtnReady);
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f010 fbf6 	bl	80158b0 <defaultBootButtons>
 80050c4:	6178      	str	r0, [r7, #20]
		  }
	  }
    osDelay(800);
 80050c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80050ca:	f009 fbeb 	bl	800e8a4 <osDelay>
	  if(bootButtons.bootModeSet){
 80050ce:	e7d1      	b.n	8005074 <startBootButtons+0x14>
 80050d0:	20003360 	.word	0x20003360
 80050d4:	20003328 	.word	0x20003328

080050d8 <startSocUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSocUart */
void startSocUart(void *argument)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	uint8_t * receivedBytes;
	uint8_t values[11];
  /* Infinite loop */
  for(;;)
  {
	  receivedBytes = socUartParser();
 80050e0:	f7ff fba0 	bl	8004824 <socUartParser>
 80050e4:	61b8      	str	r0, [r7, #24]
	  if((*receivedBytes) != 0xff){
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2bff      	cmp	r3, #255	; 0xff
 80050ec:	d013      	beq.n	8005116 <startSocUart+0x3e>
		  for(int x=4;x<15;x++){
 80050ee:	2304      	movs	r3, #4
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e00d      	b.n	8005110 <startSocUart+0x38>
			  values[x-4] = *(receivedBytes+x);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	441a      	add	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3b04      	subs	r3, #4
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	f107 0120 	add.w	r1, r7, #32
 8005104:	440b      	add	r3, r1
 8005106:	f803 2c14 	strb.w	r2, [r3, #-20]
		  for(int x=4;x<15;x++){
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b0e      	cmp	r3, #14
 8005114:	ddee      	ble.n	80050f4 <startSocUart+0x1c>
		  }
	  }
	  //int x = 0;
    osDelay(400);
 8005116:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800511a:	f009 fbc3 	bl	800e8a4 <osDelay>
	  receivedBytes = socUartParser();
 800511e:	e7df      	b.n	80050e0 <startSocUart+0x8>

08005120 <startDebugUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDebugUart */
void startDebugUart(void *argument)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0a2      	sub	sp, #136	; 0x88
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	float adcValues[21];


  for(;;)
  {
	  if(ADC_FINISHED){
 8005128:	4b9b      	ldr	r3, [pc, #620]	; (8005398 <startDebugUart+0x278>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <startDebugUart+0x28>
 8005130:	4b99      	ldr	r3, [pc, #612]	; (8005398 <startDebugUart+0x278>)
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <startDebugUart+0x28>
 8005138:	4b97      	ldr	r3, [pc, #604]	; (8005398 <startDebugUart+0x278>)
 800513a:	789b      	ldrb	r3, [r3, #2]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <startDebugUart+0x28>
		  presentADCValues = getADCValues();
 8005140:	f7fe fece 	bl	8003ee0 <getADCValues>
 8005144:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	  }
	  commandSent = debugUartParser();
 8005148:	f7ff fb0e 	bl	8004768 <debugUartParser>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  if(commandSent == true){
 8005152:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 8119 	bne.w	800538e <startDebugUart+0x26e>
		  char buf[5];
		  debugUartTransmitChar("ADCValues:");
 800515c:	488f      	ldr	r0, [pc, #572]	; (800539c <startDebugUart+0x27c>)
 800515e:	f7fe fb3f 	bl	80037e0 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005168:	e032      	b.n	80051d0 <startDebugUart+0xb0>
			  adcValues[x]=*(presentADCValues+x);
 800516a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005174:	4413      	add	r3, r2
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8005182:	440b      	add	r3, r1
 8005184:	3b60      	subs	r3, #96	; 0x60
 8005186:	601a      	str	r2, [r3, #0]
			  sprintf(buf, "%f", adcValues[x]);
 8005188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005192:	4413      	add	r3, r2
 8005194:	3b60      	subs	r3, #96	; 0x60
 8005196:	edd3 7a00 	vldr	s15, [r3]
 800519a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800519e:	f107 0020 	add.w	r0, r7, #32
 80051a2:	ec53 2b17 	vmov	r2, r3, d7
 80051a6:	497e      	ldr	r1, [pc, #504]	; (80053a0 <startDebugUart+0x280>)
 80051a8:	f011 fc4a 	bl	8016a40 <siprintf>
			  //snprintf(buf, 5, "%f", *(presentADCValues+x));
			  debugUartTransmitStuff(buf,5);
 80051ac:	f107 0320 	add.w	r3, r7, #32
 80051b0:	2105      	movs	r1, #5
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fb30 	bl	8003818 <debugUartTransmitStuff>
			  if(x<20){
 80051b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051bc:	2b13      	cmp	r3, #19
 80051be:	dc02      	bgt.n	80051c6 <startDebugUart+0xa6>
				  debugUartTransmitChar(",");
 80051c0:	4878      	ldr	r0, [pc, #480]	; (80053a4 <startDebugUart+0x284>)
 80051c2:	f7fe fb0d 	bl	80037e0 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 80051c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ca:	3301      	adds	r3, #1
 80051cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d4:	2b14      	cmp	r3, #20
 80051d6:	ddc8      	ble.n	800516a <startDebugUart+0x4a>
			  }

		  }
		  debugUartTransmitChar("\r\n");
 80051d8:	4873      	ldr	r0, [pc, #460]	; (80053a8 <startDebugUart+0x288>)
 80051da:	f7fe fb01 	bl	80037e0 <debugUartTransmitChar>
		  debugUartTransmitChar("INPUT GPIOs:");
 80051de:	4873      	ldr	r0, [pc, #460]	; (80053ac <startDebugUart+0x28c>)
 80051e0:	f7fe fafe 	bl	80037e0 <debugUartTransmitChar>
		  //uint8_t gpioInputs[12];
		  //memcpy(gpioInputs,gpioInputBuf,sizeof(gpioInputBuf));
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 80051e4:	2300      	movs	r3, #0
 80051e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051ea:	e01c      	b.n	8005226 <startDebugUart+0x106>
			  sprintf(buf,"%x",gpioInputBuf[x]);
 80051ec:	4a70      	ldr	r2, [pc, #448]	; (80053b0 <startDebugUart+0x290>)
 80051ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f2:	4413      	add	r3, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f107 0320 	add.w	r3, r7, #32
 80051fc:	496d      	ldr	r1, [pc, #436]	; (80053b4 <startDebugUart+0x294>)
 80051fe:	4618      	mov	r0, r3
 8005200:	f011 fc1e 	bl	8016a40 <siprintf>
			  debugUartTransmitChar(buf);
 8005204:	f107 0320 	add.w	r3, r7, #32
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fae9 	bl	80037e0 <debugUartTransmitChar>
			  if(x<(sizeof(gpioInputBuf))-1){
 800520e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005212:	2b0a      	cmp	r3, #10
 8005214:	d802      	bhi.n	800521c <startDebugUart+0xfc>
				  debugUartTransmitChar(",");
 8005216:	4863      	ldr	r0, [pc, #396]	; (80053a4 <startDebugUart+0x284>)
 8005218:	f7fe fae2 	bl	80037e0 <debugUartTransmitChar>
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 800521c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005220:	3301      	adds	r3, #1
 8005222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800522a:	2b0b      	cmp	r3, #11
 800522c:	d9de      	bls.n	80051ec <startDebugUart+0xcc>
			  }
		  }
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)gpioInputs, sizeof(gpioInputs),100);
		  debugUartTransmitChar("\r\n");
 800522e:	485e      	ldr	r0, [pc, #376]	; (80053a8 <startDebugUart+0x288>)
 8005230:	f7fe fad6 	bl	80037e0 <debugUartTransmitChar>
		  debugUartTransmitChar("Errors:");
 8005234:	4860      	ldr	r0, [pc, #384]	; (80053b8 <startDebugUart+0x298>)
 8005236:	f7fe fad3 	bl	80037e0 <debugUartTransmitChar>
		  uint8_t errors[11];
		  errors[0] = errorLED.zionFault;
 800523a:	4b60      	ldr	r3, [pc, #384]	; (80053bc <startDebugUart+0x29c>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	753b      	strb	r3, [r7, #20]
		  errors[1] = errorLED.vsysPMIFault;
 8005240:	4b5e      	ldr	r3, [pc, #376]	; (80053bc <startDebugUart+0x29c>)
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	757b      	strb	r3, [r7, #21]
		  errors[2] = errorLED.fault3;
 8005246:	4b5d      	ldr	r3, [pc, #372]	; (80053bc <startDebugUart+0x29c>)
 8005248:	789b      	ldrb	r3, [r3, #2]
 800524a:	75bb      	strb	r3, [r7, #22]
		  errors[3] = errorLED.fault4;
 800524c:	4b5b      	ldr	r3, [pc, #364]	; (80053bc <startDebugUart+0x29c>)
 800524e:	78db      	ldrb	r3, [r3, #3]
 8005250:	75fb      	strb	r3, [r7, #23]
		  errors[4] = errorLED.fault5;
 8005252:	4b5a      	ldr	r3, [pc, #360]	; (80053bc <startDebugUart+0x29c>)
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	763b      	strb	r3, [r7, #24]
		  errors[5] = errorLED.fault6;
 8005258:	4b58      	ldr	r3, [pc, #352]	; (80053bc <startDebugUart+0x29c>)
 800525a:	795b      	ldrb	r3, [r3, #5]
 800525c:	767b      	strb	r3, [r7, #25]
		  errors[6] = errorLED.fault7;
 800525e:	4b57      	ldr	r3, [pc, #348]	; (80053bc <startDebugUart+0x29c>)
 8005260:	799b      	ldrb	r3, [r3, #6]
 8005262:	76bb      	strb	r3, [r7, #26]
		  errors[7] = errorLED.fault8;
 8005264:	4b55      	ldr	r3, [pc, #340]	; (80053bc <startDebugUart+0x29c>)
 8005266:	7adb      	ldrb	r3, [r3, #11]
 8005268:	76fb      	strb	r3, [r7, #27]
		  errors[8] = errorLED.fault9;
 800526a:	4b54      	ldr	r3, [pc, #336]	; (80053bc <startDebugUart+0x29c>)
 800526c:	7b1b      	ldrb	r3, [r3, #12]
 800526e:	773b      	strb	r3, [r7, #28]
		  errors[9] = errorLED.boot_fault;
 8005270:	4b52      	ldr	r3, [pc, #328]	; (80053bc <startDebugUart+0x29c>)
 8005272:	79db      	ldrb	r3, [r3, #7]
 8005274:	777b      	strb	r3, [r7, #29]
		  errors[10] = errorLED.ledDriver;
 8005276:	4b51      	ldr	r3, [pc, #324]	; (80053bc <startDebugUart+0x29c>)
 8005278:	7b5b      	ldrb	r3, [r3, #13]
 800527a:	77bb      	strb	r3, [r7, #30]
		  for(x=0;x<sizeof(errors);x++){
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005282:	e01d      	b.n	80052c0 <startDebugUart+0x1a0>
			  sprintf(buf,"%x",errors[x]);
 8005284:	f107 0214 	add.w	r2, r7, #20
 8005288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800528c:	4413      	add	r3, r2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	f107 0320 	add.w	r3, r7, #32
 8005296:	4947      	ldr	r1, [pc, #284]	; (80053b4 <startDebugUart+0x294>)
 8005298:	4618      	mov	r0, r3
 800529a:	f011 fbd1 	bl	8016a40 <siprintf>
			  debugUartTransmitChar(buf);
 800529e:	f107 0320 	add.w	r3, r7, #32
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fa9c 	bl	80037e0 <debugUartTransmitChar>
			  if(x<(sizeof(errors))-1){
 80052a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ac:	2b09      	cmp	r3, #9
 80052ae:	d802      	bhi.n	80052b6 <startDebugUart+0x196>
				  debugUartTransmitChar(",");
 80052b0:	483c      	ldr	r0, [pc, #240]	; (80053a4 <startDebugUart+0x284>)
 80052b2:	f7fe fa95 	bl	80037e0 <debugUartTransmitChar>
		  for(x=0;x<sizeof(errors);x++){
 80052b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ba:	3301      	adds	r3, #1
 80052bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c4:	2b0a      	cmp	r3, #10
 80052c6:	d9dd      	bls.n	8005284 <startDebugUart+0x164>
			  }
		  }
		  debugUartTransmitChar("\r\n");
 80052c8:	4837      	ldr	r0, [pc, #220]	; (80053a8 <startDebugUart+0x288>)
 80052ca:	f7fe fa89 	bl	80037e0 <debugUartTransmitChar>
		  debugUartTransmitChar("Boot Mode:");
 80052ce:	483c      	ldr	r0, [pc, #240]	; (80053c0 <startDebugUart+0x2a0>)
 80052d0:	f7fe fa86 	bl	80037e0 <debugUartTransmitChar>
		  sprintf(buf,"%d",bootButtons.bootMode);
 80052d4:	4b3b      	ldr	r3, [pc, #236]	; (80053c4 <startDebugUart+0x2a4>)
 80052d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d8:	f107 0320 	add.w	r3, r7, #32
 80052dc:	493a      	ldr	r1, [pc, #232]	; (80053c8 <startDebugUart+0x2a8>)
 80052de:	4618      	mov	r0, r3
 80052e0:	f011 fbae 	bl	8016a40 <siprintf>
		  debugUartTransmitChar(buf);
 80052e4:	f107 0320 	add.w	r3, r7, #32
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe fa79 	bl	80037e0 <debugUartTransmitChar>
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)bootButtons.bootMode, 1,100);
		  debugUartTransmitChar("\r\n");
 80052ee:	482e      	ldr	r0, [pc, #184]	; (80053a8 <startDebugUart+0x288>)
 80052f0:	f7fe fa76 	bl	80037e0 <debugUartTransmitChar>
		  uint8_t zionInfo[9];
		  debugUartTransmitChar("Zion Info:");
 80052f4:	4835      	ldr	r0, [pc, #212]	; (80053cc <startDebugUart+0x2ac>)
 80052f6:	f7fe fa73 	bl	80037e0 <debugUartTransmitChar>
		  zionInfo[0] = ZION.SOC_EEPROM_Detected;
 80052fa:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <startDebugUart+0x2b0>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	723b      	strb	r3, [r7, #8]
		  zionInfo[1] = ZION.ASIC_EEPROM_Detected;
 8005302:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <startDebugUart+0x2b0>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	727b      	strb	r3, [r7, #9]
		  zionInfo[2] = ZION.DISPLAY_EEPROM_Detected;
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <startDebugUart+0x2b0>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	72bb      	strb	r3, [r7, #10]
		  zionInfo[3] = ZION.SOC_BoardID;
 8005312:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <startDebugUart+0x2b0>)
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	72fb      	strb	r3, [r7, #11]
		  zionInfo[4] = ZION.ASIC_BoardID;
 800531a:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <startDebugUart+0x2b0>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	733b      	strb	r3, [r7, #12]
		  zionInfo[5] = ZION.DISPLAY_BoardID;
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <startDebugUart+0x2b0>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	b2db      	uxtb	r3, r3
 8005328:	737b      	strb	r3, [r7, #13]
		  zionInfo[6] = ZION.SOC_BoardFab;
 800532a:	4b29      	ldr	r3, [pc, #164]	; (80053d0 <startDebugUart+0x2b0>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	73bb      	strb	r3, [r7, #14]
		  zionInfo[7] = ZION.ASIC_BoardFab;
 8005332:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <startDebugUart+0x2b0>)
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	b2db      	uxtb	r3, r3
 8005338:	73fb      	strb	r3, [r7, #15]
		  zionInfo[8] = ZION.DISPLAY_BoardFab;
 800533a:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <startDebugUart+0x2b0>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	b2db      	uxtb	r3, r3
 8005340:	743b      	strb	r3, [r7, #16]
		  for(x=0;x<sizeof(zionInfo);x++){
 8005342:	2300      	movs	r3, #0
 8005344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005348:	e01d      	b.n	8005386 <startDebugUart+0x266>
			  sprintf(buf,"%x",zionInfo[x]);
 800534a:	f107 0208 	add.w	r2, r7, #8
 800534e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005352:	4413      	add	r3, r2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f107 0320 	add.w	r3, r7, #32
 800535c:	4915      	ldr	r1, [pc, #84]	; (80053b4 <startDebugUart+0x294>)
 800535e:	4618      	mov	r0, r3
 8005360:	f011 fb6e 	bl	8016a40 <siprintf>
			  debugUartTransmitChar(buf);
 8005364:	f107 0320 	add.w	r3, r7, #32
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fa39 	bl	80037e0 <debugUartTransmitChar>
			  if(x<(sizeof(zionInfo))-1){
 800536e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005372:	2b07      	cmp	r3, #7
 8005374:	d802      	bhi.n	800537c <startDebugUart+0x25c>
				  debugUartTransmitChar(",");
 8005376:	480b      	ldr	r0, [pc, #44]	; (80053a4 <startDebugUart+0x284>)
 8005378:	f7fe fa32 	bl	80037e0 <debugUartTransmitChar>
		  for(x=0;x<sizeof(zionInfo);x++){
 800537c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800538a:	2b08      	cmp	r3, #8
 800538c:	d9dd      	bls.n	800534a <startDebugUart+0x22a>
			  }
		 }
	  }
    osDelay(500);
 800538e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005392:	f009 fa87 	bl	800e8a4 <osDelay>
	  if(ADC_FINISHED){
 8005396:	e6c7      	b.n	8005128 <startDebugUart+0x8>
 8005398:	20003324 	.word	0x20003324
 800539c:	0801a780 	.word	0x0801a780
 80053a0:	0801a78c 	.word	0x0801a78c
 80053a4:	0801a790 	.word	0x0801a790
 80053a8:	0801a794 	.word	0x0801a794
 80053ac:	0801a798 	.word	0x0801a798
 80053b0:	20028df0 	.word	0x20028df0
 80053b4:	0801a7a8 	.word	0x0801a7a8
 80053b8:	0801a7ac 	.word	0x0801a7ac
 80053bc:	2000338c 	.word	0x2000338c
 80053c0:	0801a7b4 	.word	0x0801a7b4
 80053c4:	20003360 	.word	0x20003360
 80053c8:	0801a7c0 	.word	0x0801a7c0
 80053cc:	0801a7c4 	.word	0x0801a7c4
 80053d0:	20003328 	.word	0x20003328

080053d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80053e6:	f002 fcc9 	bl	8007d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40001000 	.word	0x40001000

080053f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80053fc:	b672      	cpsid	i
}
 80053fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005400:	e7fe      	b.n	8005400 <Error_Handler+0x8>
	...

08005404 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8005408:	2201      	movs	r2, #1
 800540a:	2102      	movs	r1, #2
 800540c:	4802      	ldr	r0, [pc, #8]	; (8005418 <SMLCD_Enable+0x14>)
 800540e:	f004 f955 	bl	80096bc <HAL_GPIO_WritePin>
}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40022400 	.word	0x40022400

0800541c <initializeDisplay>:
int checkedEEPROM=0;
int i2cCheck=1;

#define VSYS_ADC_VAL		displayAdcValues[Adc.adc0]

void initializeDisplay(){
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b099      	sub	sp, #100	; 0x64
 8005420:	af16      	add	r7, sp, #88	; 0x58
	HAL_StatusTypeDef Status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	71fb      	strb	r3, [r7, #7]
	SMLCD_InitGPIO();
 8005426:	f7fb fae7 	bl	80009f8 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 800542a:	4c16      	ldr	r4, [pc, #88]	; (8005484 <initializeDisplay+0x68>)
 800542c:	4668      	mov	r0, sp
 800542e:	f104 0310 	add.w	r3, r4, #16
 8005432:	2254      	movs	r2, #84	; 0x54
 8005434:	4619      	mov	r1, r3
 8005436:	f010 fc89 	bl	8015d4c <memcpy>
 800543a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800543e:	f7fb fafb 	bl	8000a38 <SMLCD_Init>
	SMLCD_Enable();
 8005442:	f7ff ffdf 	bl	8005404 <SMLCD_Enable>
	SMLCD_Clear();
 8005446:	f7fb fb17 	bl	8000a78 <SMLCD_Clear>
	if (Status != HAL_OK)
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <initializeDisplay+0x44>
	{
		DevUI_Error_Handler("SPI LCD Clear Command Failed.", Status, 0, 0, true);
 8005450:	79f9      	ldrb	r1, [r7, #7]
 8005452:	2301      	movs	r3, #1
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	2200      	movs	r2, #0
 800545a:	480b      	ldr	r0, [pc, #44]	; (8005488 <initializeDisplay+0x6c>)
 800545c:	f7fe f844 	bl	80034e8 <DevUI_Error_Handler>
	}
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 8005460:	2301      	movs	r3, #1
 8005462:	71bb      	strb	r3, [r7, #6]
	}
	SMLCD_Orientation(ori);
 8005464:	79bb      	ldrb	r3, [r7, #6]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fb fcbe 	bl	8000de8 <SMLCD_Orientation>
	LCD_Clear();
 800546c:	f7fb fce4 	bl	8000e38 <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8005470:	2254      	movs	r2, #84	; 0x54
 8005472:	2100      	movs	r1, #0
 8005474:	4805      	ldr	r0, [pc, #20]	; (800548c <initializeDisplay+0x70>)
 8005476:	f010 fc77 	bl	8015d68 <memset>
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}
 8005482:	bf00      	nop
 8005484:	20028b68 	.word	0x20028b68
 8005488:	0801a7d0 	.word	0x0801a7d0
 800548c:	2003119c 	.word	0x2003119c

08005490 <drawMainMenu>:

void drawMainMenu(int indicator){
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8005498:	4b57      	ldr	r3, [pc, #348]	; (80055f8 <drawMainMenu+0x168>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
	getLatestADC();
 800549e:	f001 f8af 	bl	8006600 <getLatestADC>
	LCD_Clear();
 80054a2:	f7fb fcc9 	bl	8000e38 <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 80054a6:	4b55      	ldr	r3, [pc, #340]	; (80055fc <drawMainMenu+0x16c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80054ac:	4b54      	ldr	r3, [pc, #336]	; (8005600 <drawMainMenu+0x170>)
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	4b53      	ldr	r3, [pc, #332]	; (8005604 <drawMainMenu+0x174>)
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2100      	movs	r1, #0
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fb ff08 	bl	80012d4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80054c4:	4b4e      	ldr	r3, [pc, #312]	; (8005600 <drawMainMenu+0x170>)
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	3b03      	subs	r3, #3
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	4b4d      	ldr	r3, [pc, #308]	; (8005604 <drawMainMenu+0x174>)
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	3b03      	subs	r3, #3
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2102      	movs	r1, #2
 80054d6:	2002      	movs	r0, #2
 80054d8:	f7fb fefc 	bl	80012d4 <LCD_Rect>

	// RTC :)
	i  = 10;
 80054dc:	230a      	movs	r3, #10
 80054de:	613b      	str	r3, [r7, #16]
	j  = 10;
 80054e0:	230a      	movs	r3, #10
 80054e2:	617b      	str	r3, [r7, #20]
	printFaults(i,j);
 80054e4:	6979      	ldr	r1, [r7, #20]
 80054e6:	6938      	ldr	r0, [r7, #16]
 80054e8:	f001 f8b8 	bl	800665c <printFaults>
	i=150;
 80054ec:	2396      	movs	r3, #150	; 0x96
 80054ee:	613b      	str	r3, [r7, #16]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	b298      	uxth	r0, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	b299      	uxth	r1, r3
 80054f8:	4b43      	ldr	r3, [pc, #268]	; (8005608 <drawMainMenu+0x178>)
 80054fa:	4a44      	ldr	r2, [pc, #272]	; (800560c <drawMainMenu+0x17c>)
 80054fc:	f7fc fa7a 	bl	80019f4 <LCD_PutStr>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
	int weAreAtlas = (ZION.SOC_BoardID==ATLAS) || (ZION.ASIC_BoardID==ATLAS) || (ZION.DISPLAY_BoardID==ATLAS);
 800550a:	4b41      	ldr	r3, [pc, #260]	; (8005610 <drawMainMenu+0x180>)
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d007      	beq.n	8005522 <drawMainMenu+0x92>
 8005512:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <drawMainMenu+0x180>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d003      	beq.n	8005522 <drawMainMenu+0x92>
 800551a:	4b3d      	ldr	r3, [pc, #244]	; (8005610 <drawMainMenu+0x180>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <drawMainMenu+0x96>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <drawMainMenu+0x98>
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
	if(VSYS_ADC_VAL >VSYS_FLT){
 800552a:	4b3a      	ldr	r3, [pc, #232]	; (8005614 <drawMainMenu+0x184>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3a      	ldr	r2, [pc, #232]	; (8005618 <drawMainMenu+0x188>)
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	edd3 7a00 	vldr	s15, [r3]
 8005538:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800553c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	dd15      	ble.n	8005572 <drawMainMenu+0xe2>
		if(ZION.SOC_EEPROM_Detected){
 8005546:	4b32      	ldr	r3, [pc, #200]	; (8005610 <drawMainMenu+0x180>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <drawMainMenu+0xd8>
			//Add an if/else if for your project name and call the method
			if(weAreAtlas){
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <drawMainMenu+0xce>
				atlasMainMenuBootModes(i,j);
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	6938      	ldr	r0, [r7, #16]
 8005558:	f00c fad2 	bl	8011b00 <atlasMainMenuBootModes>
 800555c:	e017      	b.n	800558e <drawMainMenu+0xfe>
			}
			else{
				defaultMainMenuBootModes(i,j);
 800555e:	6979      	ldr	r1, [r7, #20]
 8005560:	6938      	ldr	r0, [r7, #16]
 8005562:	f00e fe8d 	bl	8014280 <defaultMainMenuBootModes>
 8005566:	e012      	b.n	800558e <drawMainMenu+0xfe>
			}
		}
		else{
			defaultMainMenuBootModes(i,j);
 8005568:	6979      	ldr	r1, [r7, #20]
 800556a:	6938      	ldr	r0, [r7, #16]
 800556c:	f00e fe88 	bl	8014280 <defaultMainMenuBootModes>
 8005570:	e00d      	b.n	800558e <drawMainMenu+0xfe>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	b298      	uxth	r0, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	b299      	uxth	r1, r3
 800557a:	4b23      	ldr	r3, [pc, #140]	; (8005608 <drawMainMenu+0x178>)
 800557c:	4a27      	ldr	r2, [pc, #156]	; (800561c <drawMainMenu+0x18c>)
 800557e:	f7fc fa39 	bl	80019f4 <LCD_PutStr>
		bootButtons.bootMode=0;
 8005582:	4b27      	ldr	r3, [pc, #156]	; (8005620 <drawMainMenu+0x190>)
 8005584:	2200      	movs	r2, #0
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
		checkedEEPROM=0;
 8005588:	4b26      	ldr	r3, [pc, #152]	; (8005624 <drawMainMenu+0x194>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

	}
	i  = 135;
 800558e:	2387      	movs	r3, #135	; 0x87
 8005590:	613b      	str	r3, [r7, #16]
	j += 14;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	330e      	adds	r3, #14
 8005596:	617b      	str	r3, [r7, #20]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	b299      	uxth	r1, r3
 800559c:	4b18      	ldr	r3, [pc, #96]	; (8005600 <drawMainMenu+0x170>)
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	3b5e      	subs	r3, #94	; 0x5e
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3303      	adds	r3, #3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2002      	movs	r0, #2
 80055ae:	f7fb fed3 	bl	8001358 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3305      	adds	r3, #5
 80055b8:	b298      	uxth	r0, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3308      	adds	r3, #8
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2102      	movs	r1, #2
 80055c8:	f7fb fec6 	bl	8001358 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <drawMainMenu+0x170>)
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	3b61      	subs	r3, #97	; 0x61
 80055d2:	b298      	uxth	r0, r3
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <drawMainMenu+0x170>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	3b5e      	subs	r3, #94	; 0x5e
 80055da:	b29a      	uxth	r2, r3
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <drawMainMenu+0x174>)
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2102      	movs	r1, #2
 80055e6:	f7fb feb7 	bl	8001358 <LCD_FillRect>

	//
	//Add Project Main Menu Fault call here.
	//
	if(weAreAtlas){
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <drawMainMenu+0x198>
		atlasMainMenuFaultLedLabels();
 80055f0:	f00c f92e 	bl	8011850 <atlasMainMenuFaultLedLabels>
 80055f4:	e01a      	b.n	800562c <drawMainMenu+0x19c>
 80055f6:	bf00      	nop
 80055f8:	20003428 	.word	0x20003428
 80055fc:	20028b60 	.word	0x20028b60
 8005600:	20028b62 	.word	0x20028b62
 8005604:	20028b64 	.word	0x20028b64
 8005608:	0801b3c0 	.word	0x0801b3c0
 800560c:	0801a7f0 	.word	0x0801a7f0
 8005610:	20003328 	.word	0x20003328
 8005614:	200000d4 	.word	0x200000d4
 8005618:	2003119c 	.word	0x2003119c
 800561c:	0801a7f8 	.word	0x0801a7f8
 8005620:	20003360 	.word	0x20003360
 8005624:	20003430 	.word	0x20003430
	}
	else{
		defaultMainMenuFaultLedLabels();
 8005628:	f00e fcd0 	bl	8013fcc <defaultMainMenuFaultLedLabels>
	}
	j = scr_height-20;
 800562c:	4b5e      	ldr	r3, [pc, #376]	; (80057a8 <drawMainMenu+0x318>)
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	3b14      	subs	r3, #20
 8005632:	617b      	str	r3, [r7, #20]
	i  = scr_width-90;
 8005634:	4b5d      	ldr	r3, [pc, #372]	; (80057ac <drawMainMenu+0x31c>)
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	3b5a      	subs	r3, #90	; 0x5a
 800563a:	613b      	str	r3, [r7, #16]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	b298      	uxth	r0, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b02      	subs	r3, #2
 8005646:	b299      	uxth	r1, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	b29b      	uxth	r3, r3
 800564c:	330c      	adds	r3, #12
 800564e:	b29a      	uxth	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	b29b      	uxth	r3, r3
 8005654:	3308      	adds	r3, #8
 8005656:	b29b      	uxth	r3, r3
 8005658:	f7fb fe7e 	bl	8001358 <LCD_FillRect>
	i+=20;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	3314      	adds	r3, #20
 8005660:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	b298      	uxth	r0, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	b299      	uxth	r1, r3
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <drawMainMenu+0x320>)
 800566c:	4a51      	ldr	r2, [pc, #324]	; (80057b4 <drawMainMenu+0x324>)
 800566e:	f7fc f9c1 	bl	80019f4 <LCD_PutStr>

	i=100;
 8005672:	2364      	movs	r3, #100	; 0x64
 8005674:	613b      	str	r3, [r7, #16]
	j=75;
 8005676:	234b      	movs	r3, #75	; 0x4b
 8005678:	617b      	str	r3, [r7, #20]
	i+=20;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3314      	adds	r3, #20
 800567e:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	b298      	uxth	r0, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	b299      	uxth	r1, r3
 8005688:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <drawMainMenu+0x320>)
 800568a:	4a4b      	ldr	r2, [pc, #300]	; (80057b8 <drawMainMenu+0x328>)
 800568c:	f7fc f9b2 	bl	80019f4 <LCD_PutStr>
	j+=15;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	330f      	adds	r3, #15
 8005694:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b03      	subs	r3, #3
 800569c:	b298      	uxth	r0, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b02      	subs	r3, #2
 80056a4:	b299      	uxth	r1, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3347      	adds	r3, #71	; 0x47
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3302      	adds	r3, #2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f7fb fe4f 	bl	8001358 <LCD_FillRect>

	i=100;
 80056ba:	2364      	movs	r3, #100	; 0x64
 80056bc:	613b      	str	r3, [r7, #16]
	j=110;
 80056be:	236e      	movs	r3, #110	; 0x6e
 80056c0:	617b      	str	r3, [r7, #20]
	i+=20;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3314      	adds	r3, #20
 80056c6:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	b298      	uxth	r0, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	b299      	uxth	r1, r3
 80056d0:	4b37      	ldr	r3, [pc, #220]	; (80057b0 <drawMainMenu+0x320>)
 80056d2:	4a3a      	ldr	r2, [pc, #232]	; (80057bc <drawMainMenu+0x32c>)
 80056d4:	f7fc f98e 	bl	80019f4 <LCD_PutStr>
	j+=15;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	330f      	adds	r3, #15
 80056dc:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b03      	subs	r3, #3
 80056e4:	b298      	uxth	r0, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b02      	subs	r3, #2
 80056ec:	b299      	uxth	r1, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3332      	adds	r3, #50	; 0x32
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3302      	adds	r3, #2
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f7fb fe2b 	bl	8001358 <LCD_FillRect>

	i=100;
 8005702:	2364      	movs	r3, #100	; 0x64
 8005704:	613b      	str	r3, [r7, #16]
	j=145;
 8005706:	2391      	movs	r3, #145	; 0x91
 8005708:	617b      	str	r3, [r7, #20]
	i+=20;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3314      	adds	r3, #20
 800570e:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	b298      	uxth	r0, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	b299      	uxth	r1, r3
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <drawMainMenu+0x320>)
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <drawMainMenu+0x330>)
 800571c:	f7fc f96a 	bl	80019f4 <LCD_PutStr>
	j+=15;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	330f      	adds	r3, #15
 8005724:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b03      	subs	r3, #3
 800572c:	b298      	uxth	r0, r3
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b02      	subs	r3, #2
 8005734:	b299      	uxth	r1, r3
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	b29b      	uxth	r3, r3
 800573a:	3355      	adds	r3, #85	; 0x55
 800573c:	b29a      	uxth	r2, r3
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	b29b      	uxth	r3, r3
 8005742:	3302      	adds	r3, #2
 8005744:	b29b      	uxth	r3, r3
 8005746:	f7fb fe07 	bl	8001358 <LCD_FillRect>
	i=100;
 800574a:	2364      	movs	r3, #100	; 0x64
 800574c:	613b      	str	r3, [r7, #16]
	switch(indicator){
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d00f      	beq.n	8005774 <drawMainMenu+0x2e4>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b03      	cmp	r3, #3
 8005758:	dc0f      	bgt.n	800577a <drawMainMenu+0x2ea>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d003      	beq.n	8005768 <drawMainMenu+0x2d8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d003      	beq.n	800576e <drawMainMenu+0x2de>
 8005766:	e008      	b.n	800577a <drawMainMenu+0x2ea>
	case FIRST:
	{
		j=75;
 8005768:	234b      	movs	r3, #75	; 0x4b
 800576a:	617b      	str	r3, [r7, #20]
		break;
 800576c:	e008      	b.n	8005780 <drawMainMenu+0x2f0>
	}
	case SECOND:
	{
		j=110;
 800576e:	236e      	movs	r3, #110	; 0x6e
 8005770:	617b      	str	r3, [r7, #20]
		break;
 8005772:	e005      	b.n	8005780 <drawMainMenu+0x2f0>
	}
	case THIRD:
	{
		j=145;
 8005774:	2391      	movs	r3, #145	; 0x91
 8005776:	617b      	str	r3, [r7, #20]
		break;
 8005778:	e002      	b.n	8005780 <drawMainMenu+0x2f0>
	}
	default:
	{
		j=75;
 800577a:	234b      	movs	r3, #75	; 0x4b
 800577c:	617b      	str	r3, [r7, #20]
		break;
 800577e:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	b298      	uxth	r0, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	b299      	uxth	r1, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	b29b      	uxth	r3, r3
 800578c:	330c      	adds	r3, #12
 800578e:	b29a      	uxth	r2, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	b29b      	uxth	r3, r3
 8005794:	330a      	adds	r3, #10
 8005796:	b29b      	uxth	r3, r3
 8005798:	f7fb fdde 	bl	8001358 <LCD_FillRect>
	SMLCD_Flush();
 800579c:	f7fb f990 	bl	8000ac0 <SMLCD_Flush>
}
 80057a0:	bf00      	nop
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20028b64 	.word	0x20028b64
 80057ac:	20028b62 	.word	0x20028b62
 80057b0:	0801b3c0 	.word	0x0801b3c0
 80057b4:	0801a7fc 	.word	0x0801a7fc
 80057b8:	0801a804 	.word	0x0801a804
 80057bc:	0801a810 	.word	0x0801a810
 80057c0:	0801a818 	.word	0x0801a818

080057c4 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	; 0x30
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int arrowUp = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 80057d0:	2301      	movs	r3, #1
 80057d2:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 80057d4:	2303      	movs	r3, #3
 80057d6:	61fb      	str	r3, [r7, #28]
	previousMenu=0;
 80057d8:	4b65      	ldr	r3, [pc, #404]	; (8005970 <drawStatusMenu+0x1ac>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 80057de:	f7fb fb2b 	bl	8000e38 <LCD_Clear>
	getLatestADC();
 80057e2:	f000 ff0d 	bl	8006600 <getLatestADC>
	drawMenuHeader();
 80057e6:	f000 fe73 	bl	80064d0 <drawMenuHeader>
	int weAreAtlas = (ZION.SOC_BoardID==ATLAS) || (ZION.ASIC_BoardID==ATLAS) || (ZION.DISPLAY_BoardID==ATLAS);
 80057ea:	4b62      	ldr	r3, [pc, #392]	; (8005974 <drawStatusMenu+0x1b0>)
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d007      	beq.n	8005802 <drawStatusMenu+0x3e>
 80057f2:	4b60      	ldr	r3, [pc, #384]	; (8005974 <drawStatusMenu+0x1b0>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d003      	beq.n	8005802 <drawStatusMenu+0x3e>
 80057fa:	4b5e      	ldr	r3, [pc, #376]	; (8005974 <drawStatusMenu+0x1b0>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <drawStatusMenu+0x42>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <drawStatusMenu+0x44>
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
	i  = 135;
 800580a:	2387      	movs	r3, #135	; 0x87
 800580c:	617b      	str	r3, [r7, #20]
	j = 24;
 800580e:	2318      	movs	r3, #24
 8005810:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	b299      	uxth	r1, r3
 8005816:	4b58      	ldr	r3, [pc, #352]	; (8005978 <drawStatusMenu+0x1b4>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	3b02      	subs	r3, #2
 800581c:	b29a      	uxth	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	b29b      	uxth	r3, r3
 8005822:	3303      	adds	r3, #3
 8005824:	b29b      	uxth	r3, r3
 8005826:	2002      	movs	r0, #2
 8005828:	f7fb fd96 	bl	8001358 <LCD_FillRect>

	switch(indicator){
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b03      	cmp	r3, #3
 8005830:	f000 8125 	beq.w	8005a7e <drawStatusMenu+0x2ba>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b03      	cmp	r3, #3
 8005838:	f300 826f 	bgt.w	8005d1a <drawStatusMenu+0x556>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d003      	beq.n	800584a <drawStatusMenu+0x86>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d05e      	beq.n	8005906 <drawStatusMenu+0x142>
 8005848:	e267      	b.n	8005d1a <drawStatusMenu+0x556>
	case 1:{
		i=35;
 800584a:	2323      	movs	r3, #35	; 0x23
 800584c:	617b      	str	r3, [r7, #20]
		j=90;
 800584e:	235a      	movs	r3, #90	; 0x5a
 8005850:	613b      	str	r3, [r7, #16]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b02      	subs	r3, #2
 8005858:	b299      	uxth	r1, r3
 800585a:	4b47      	ldr	r3, [pc, #284]	; (8005978 <drawStatusMenu+0x1b4>)
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	3b02      	subs	r3, #2
 8005860:	b29a      	uxth	r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	b29b      	uxth	r3, r3
 8005866:	3302      	adds	r3, #2
 8005868:	b29b      	uxth	r3, r3
 800586a:	2002      	movs	r0, #2
 800586c:	f7fb fd74 	bl	8001358 <LCD_FillRect>
		j=75;
 8005870:	234b      	movs	r3, #75	; 0x4b
 8005872:	613b      	str	r3, [r7, #16]
		i=62;
 8005874:	233e      	movs	r3, #62	; 0x3e
 8005876:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	b298      	uxth	r0, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	b299      	uxth	r1, r3
 8005880:	4b3e      	ldr	r3, [pc, #248]	; (800597c <drawStatusMenu+0x1b8>)
 8005882:	4a3f      	ldr	r2, [pc, #252]	; (8005980 <drawStatusMenu+0x1bc>)
 8005884:	f7fc f8b6 	bl	80019f4 <LCD_PutStr>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
		i+=145;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3391      	adds	r3, #145	; 0x91
 8005896:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	b298      	uxth	r0, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	b299      	uxth	r1, r3
 80058a0:	4b36      	ldr	r3, [pc, #216]	; (800597c <drawStatusMenu+0x1b8>)
 80058a2:	4a38      	ldr	r2, [pc, #224]	; (8005984 <drawStatusMenu+0x1c0>)
 80058a4:	f7fc f8a6 	bl	80019f4 <LCD_PutStr>

		//Add an if/else if for your project name and call the method

		if(weAreAtlas){
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <drawStatusMenu+0xf0>
			atlasStatusFaults();
 80058ae:	f00d fd21 	bl	80132f4 <atlasStatusFaults>
 80058b2:	e001      	b.n	80058b8 <drawStatusMenu+0xf4>
		}
		else{
			defaultStatusFaults();
 80058b4:	f00f fdb6 	bl	8015424 <defaultStatusFaults>
		}

		i=200;
 80058b8:	23c8      	movs	r3, #200	; 0xc8
 80058ba:	617b      	str	r3, [r7, #20]
		j=220;
 80058bc:	23dc      	movs	r3, #220	; 0xdc
 80058be:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	b298      	uxth	r0, r3
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	b299      	uxth	r1, r3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f7fc f9e0 	bl	8001c94 <drawUpDownArrow>
		i=180;
 80058d4:	23b4      	movs	r3, #180	; 0xb4
 80058d6:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	b298      	uxth	r0, r3
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	b299      	uxth	r1, r3
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f7fc f9d4 	bl	8001c94 <drawUpDownArrow>
		i=220;
 80058ec:	23dc      	movs	r3, #220	; 0xdc
 80058ee:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	b298      	uxth	r0, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	b299      	uxth	r1, r3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f7fc f9c8 	bl	8001c94 <drawUpDownArrow>
		break;
 8005904:	e209      	b.n	8005d1a <drawStatusMenu+0x556>
	}
	case 2:{
		i=35;
 8005906:	2323      	movs	r3, #35	; 0x23
 8005908:	617b      	str	r3, [r7, #20]
		j=90;
 800590a:	235a      	movs	r3, #90	; 0x5a
 800590c:	613b      	str	r3, [r7, #16]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b02      	subs	r3, #2
 8005914:	b299      	uxth	r1, r3
 8005916:	4b18      	ldr	r3, [pc, #96]	; (8005978 <drawStatusMenu+0x1b4>)
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	3b02      	subs	r3, #2
 800591c:	b29a      	uxth	r2, r3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	b29b      	uxth	r3, r3
 8005922:	3302      	adds	r3, #2
 8005924:	b29b      	uxth	r3, r3
 8005926:	2002      	movs	r0, #2
 8005928:	f7fb fd16 	bl	8001358 <LCD_FillRect>
		j=75;
 800592c:	234b      	movs	r3, #75	; 0x4b
 800592e:	613b      	str	r3, [r7, #16]
		i=42;
 8005930:	232a      	movs	r3, #42	; 0x2a
 8005932:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	b298      	uxth	r0, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	b299      	uxth	r1, r3
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <drawStatusMenu+0x1b8>)
 800593e:	4a12      	ldr	r2, [pc, #72]	; (8005988 <drawStatusMenu+0x1c4>)
 8005940:	f7fc f858 	bl	80019f4 <LCD_PutStr>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4413      	add	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
		i+=125;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	337d      	adds	r3, #125	; 0x7d
 8005952:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	b298      	uxth	r0, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	b299      	uxth	r1, r3
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <drawStatusMenu+0x1b8>)
 800595e:	4a0b      	ldr	r2, [pc, #44]	; (800598c <drawStatusMenu+0x1c8>)
 8005960:	f7fc f848 	bl	80019f4 <LCD_PutStr>

		//Add an if/else if for your project and call the method

		if(weAreAtlas){
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <drawStatusMenu+0x1cc>
			atlasStatusADCsAndGPIOs();
 800596a:	f00c ffa1 	bl	80128b0 <atlasStatusADCsAndGPIOs>
 800596e:	e011      	b.n	8005994 <drawStatusMenu+0x1d0>
 8005970:	20003428 	.word	0x20003428
 8005974:	20003328 	.word	0x20003328
 8005978:	20028b62 	.word	0x20028b62
 800597c:	0801b3c0 	.word	0x0801b3c0
 8005980:	0801a824 	.word	0x0801a824
 8005984:	0801a82c 	.word	0x0801a82c
 8005988:	0801a83c 	.word	0x0801a83c
 800598c:	0801a84c 	.word	0x0801a84c
		}
		else{
			defaultStatusADCsAndGPIOs();
 8005990:	f00f f842 	bl	8014a18 <defaultStatusADCsAndGPIOs>
		}


		i=155;
 8005994:	239b      	movs	r3, #155	; 0x9b
 8005996:	617b      	str	r3, [r7, #20]
		j=35;
 8005998:	2323      	movs	r3, #35	; 0x23
 800599a:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	b298      	uxth	r0, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	b299      	uxth	r1, r3
 80059a4:	4b97      	ldr	r3, [pc, #604]	; (8005c04 <drawStatusMenu+0x440>)
 80059a6:	4a98      	ldr	r2, [pc, #608]	; (8005c08 <drawStatusMenu+0x444>)
 80059a8:	f7fc f824 	bl	80019f4 <LCD_PutStr>
		i=155;
 80059ac:	239b      	movs	r3, #155	; 0x9b
 80059ae:	617b      	str	r3, [r7, #20]
		j=50;
 80059b0:	2332      	movs	r3, #50	; 0x32
 80059b2:	613b      	str	r3, [r7, #16]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	b298      	uxth	r0, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	b299      	uxth	r1, r3
 80059bc:	4b91      	ldr	r3, [pc, #580]	; (8005c04 <drawStatusMenu+0x440>)
 80059be:	4a93      	ldr	r2, [pc, #588]	; (8005c0c <drawStatusMenu+0x448>)
 80059c0:	f7fc f818 	bl	80019f4 <LCD_PutStr>
 80059c4:	4603      	mov	r3, r0
 80059c6:	3308      	adds	r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
		j=28;
 80059ce:	231c      	movs	r3, #28
 80059d0:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	b298      	uxth	r0, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	b299      	uxth	r1, r3
 80059da:	4b8d      	ldr	r3, [pc, #564]	; (8005c10 <drawStatusMenu+0x44c>)
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2302      	movs	r3, #2
 80059e0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80059e4:	f7fc f8a4 	bl	8001b30 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 80059e8:	23c8      	movs	r3, #200	; 0xc8
 80059ea:	617b      	str	r3, [r7, #20]
		j=220;
 80059ec:	23dc      	movs	r3, #220	; 0xdc
 80059ee:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	b298      	uxth	r0, r3
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	b299      	uxth	r1, r3
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f7fc f948 	bl	8001c94 <drawUpDownArrow>
		j=15;
 8005a04:	230f      	movs	r3, #15
 8005a06:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	b298      	uxth	r0, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	b299      	uxth	r1, r3
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f7fc f93c 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8005a1c:	23b4      	movs	r3, #180	; 0xb4
 8005a1e:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	b298      	uxth	r0, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	b299      	uxth	r1, r3
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f7fc f930 	bl	8001c94 <drawUpDownArrow>
		j=220;
 8005a34:	23dc      	movs	r3, #220	; 0xdc
 8005a36:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	b298      	uxth	r0, r3
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	b299      	uxth	r1, r3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f7fc f924 	bl	8001c94 <drawUpDownArrow>
		i=220;
 8005a4c:	23dc      	movs	r3, #220	; 0xdc
 8005a4e:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	b298      	uxth	r0, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	b299      	uxth	r1, r3
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f7fc f918 	bl	8001c94 <drawUpDownArrow>
		j=15;
 8005a64:	230f      	movs	r3, #15
 8005a66:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	b298      	uxth	r0, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	b299      	uxth	r1, r3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f7fc f90c 	bl	8001c94 <drawUpDownArrow>
		break;
 8005a7c:	e14d      	b.n	8005d1a <drawStatusMenu+0x556>
	}
	case 3:{
		i=35;
 8005a7e:	2323      	movs	r3, #35	; 0x23
 8005a80:	617b      	str	r3, [r7, #20]
		j=75;
 8005a82:	234b      	movs	r3, #75	; 0x4b
 8005a84:	613b      	str	r3, [r7, #16]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b02      	subs	r3, #2
 8005a8c:	b299      	uxth	r1, r3
 8005a8e:	4b61      	ldr	r3, [pc, #388]	; (8005c14 <drawStatusMenu+0x450>)
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	3b02      	subs	r3, #2
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2002      	movs	r0, #2
 8005aa0:	f7fb fc5a 	bl	8001358 <LCD_FillRect>
		j=55;
 8005aa4:	2337      	movs	r3, #55	; 0x37
 8005aa6:	613b      	str	r3, [r7, #16]
		i=150;
 8005aa8:	2396      	movs	r3, #150	; 0x96
 8005aaa:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	b298      	uxth	r0, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	b299      	uxth	r1, r3
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <drawStatusMenu+0x440>)
 8005ab6:	4a58      	ldr	r2, [pc, #352]	; (8005c18 <drawStatusMenu+0x454>)
 8005ab8:	f7fb ff9c 	bl	80019f4 <LCD_PutStr>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

		i=40;
 8005ac6:	2328      	movs	r3, #40	; 0x28
 8005ac8:	617b      	str	r3, [r7, #20]
		j=85;
 8005aca:	2355      	movs	r3, #85	; 0x55
 8005acc:	613b      	str	r3, [r7, #16]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	b298      	uxth	r0, r3
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	b299      	uxth	r1, r3
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	; (8005c04 <drawStatusMenu+0x440>)
 8005ad8:	4a50      	ldr	r2, [pc, #320]	; (8005c1c <drawStatusMenu+0x458>)
 8005ada:	f7fb ff8b 	bl	80019f4 <LCD_PutStr>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	b298      	uxth	r0, r3
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	b299      	uxth	r1, r3
 8005af0:	4b44      	ldr	r3, [pc, #272]	; (8005c04 <drawStatusMenu+0x440>)
 8005af2:	4a4b      	ldr	r2, [pc, #300]	; (8005c20 <drawStatusMenu+0x45c>)
 8005af4:	f7fb ff7e 	bl	80019f4 <LCD_PutStr>

		i=40;
 8005af8:	2328      	movs	r3, #40	; 0x28
 8005afa:	617b      	str	r3, [r7, #20]
		j+=25;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	3319      	adds	r3, #25
 8005b00:	613b      	str	r3, [r7, #16]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	b298      	uxth	r0, r3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	b299      	uxth	r1, r3
 8005b0a:	4b3e      	ldr	r3, [pc, #248]	; (8005c04 <drawStatusMenu+0x440>)
 8005b0c:	4a45      	ldr	r2, [pc, #276]	; (8005c24 <drawStatusMenu+0x460>)
 8005b0e:	f7fb ff71 	bl	80019f4 <LCD_PutStr>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
		if(!(errorLED.ledDriver)){
 8005b1c:	4b42      	ldr	r3, [pc, #264]	; (8005c28 <drawStatusMenu+0x464>)
 8005b1e:	7b5b      	ldrb	r3, [r3, #13]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <drawStatusMenu+0x372>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	b298      	uxth	r0, r3
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	b299      	uxth	r1, r3
 8005b2c:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <drawStatusMenu+0x440>)
 8005b2e:	4a3f      	ldr	r2, [pc, #252]	; (8005c2c <drawStatusMenu+0x468>)
 8005b30:	f7fb ff60 	bl	80019f4 <LCD_PutStr>
 8005b34:	e007      	b.n	8005b46 <drawStatusMenu+0x382>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	b298      	uxth	r0, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	b299      	uxth	r1, r3
 8005b3e:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <drawStatusMenu+0x440>)
 8005b40:	4a3b      	ldr	r2, [pc, #236]	; (8005c30 <drawStatusMenu+0x46c>)
 8005b42:	f7fb ff57 	bl	80019f4 <LCD_PutStr>
		}

		i=40;
 8005b46:	2328      	movs	r3, #40	; 0x28
 8005b48:	617b      	str	r3, [r7, #20]
		j+=25;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3319      	adds	r3, #25
 8005b4e:	613b      	str	r3, [r7, #16]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	b298      	uxth	r0, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b299      	uxth	r1, r3
 8005b58:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <drawStatusMenu+0x440>)
 8005b5a:	4a36      	ldr	r2, [pc, #216]	; (8005c34 <drawStatusMenu+0x470>)
 8005b5c:	f7fb ff4a 	bl	80019f4 <LCD_PutStr>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	b298      	uxth	r0, r3
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	b299      	uxth	r1, r3
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <drawStatusMenu+0x440>)
 8005b74:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <drawStatusMenu+0x474>)
 8005b76:	f7fb ff3d 	bl	80019f4 <LCD_PutStr>

		i=40;
 8005b7a:	2328      	movs	r3, #40	; 0x28
 8005b7c:	617b      	str	r3, [r7, #20]
		j+=25;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3319      	adds	r3, #25
 8005b82:	613b      	str	r3, [r7, #16]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	b298      	uxth	r0, r3
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	b299      	uxth	r1, r3
 8005b8c:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <drawStatusMenu+0x440>)
 8005b8e:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <drawStatusMenu+0x478>)
 8005b90:	f7fb ff30 	bl	80019f4 <LCD_PutStr>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
		//check the I2C state once per switch ran. Multiple runs can cause hard faults
		if((VSYS_ADC_VAL > VSYS_FLT) && !(checkedEEPROM)){
 8005b9e:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <drawStatusMenu+0x47c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <drawStatusMenu+0x480>)
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	edd3 7a00 	vldr	s15, [r3]
 8005bac:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8005bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	dd14      	ble.n	8005be4 <drawStatusMenu+0x420>
 8005bba:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <drawStatusMenu+0x484>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <drawStatusMenu+0x420>
			i2cCheck = writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8005bc2:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <drawStatusMenu+0x488>)
 8005bc4:	7818      	ldrb	r0, [r3, #0]
 8005bc6:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <drawStatusMenu+0x488>)
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2111      	movs	r1, #17
 8005bd2:	f7fd ff15 	bl	8003a00 <writeI2CRegister>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <drawStatusMenu+0x48c>)
 8005bda:	6013      	str	r3, [r2, #0]
			checkedEEPROM=1;
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <drawStatusMenu+0x484>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e002      	b.n	8005bea <drawStatusMenu+0x426>
		}
		else{
			checkedEEPROM=0;
 8005be4:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <drawStatusMenu+0x484>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
		}
		if(i2cCheck == HAL_OK){
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <drawStatusMenu+0x48c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d130      	bne.n	8005c54 <drawStatusMenu+0x490>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	b298      	uxth	r0, r3
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	b299      	uxth	r1, r3
 8005bfa:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <drawStatusMenu+0x440>)
 8005bfc:	4a0b      	ldr	r2, [pc, #44]	; (8005c2c <drawStatusMenu+0x468>)
 8005bfe:	f7fb fef9 	bl	80019f4 <LCD_PutStr>
 8005c02:	e02f      	b.n	8005c64 <drawStatusMenu+0x4a0>
 8005c04:	0801b3c0 	.word	0x0801b3c0
 8005c08:	0801a85c 	.word	0x0801a85c
 8005c0c:	0801a86c 	.word	0x0801a86c
 8005c10:	0801b780 	.word	0x0801b780
 8005c14:	20028b62 	.word	0x20028b62
 8005c18:	0801a87c 	.word	0x0801a87c
 8005c1c:	0801a88c 	.word	0x0801a88c
 8005c20:	0801a894 	.word	0x0801a894
 8005c24:	0801a8b4 	.word	0x0801a8b4
 8005c28:	2000338c 	.word	0x2000338c
 8005c2c:	0801a8c4 	.word	0x0801a8c4
 8005c30:	0801a8cc 	.word	0x0801a8cc
 8005c34:	0801a8dc 	.word	0x0801a8dc
 8005c38:	0801a8e8 	.word	0x0801a8e8
 8005c3c:	0801a900 	.word	0x0801a900
 8005c40:	200000d4 	.word	0x200000d4
 8005c44:	2003119c 	.word	0x2003119c
 8005c48:	20003430 	.word	0x20003430
 8005c4c:	200000bc 	.word	0x200000bc
 8005c50:	20000134 	.word	0x20000134
			// Clear the HAL fault LED.
			//errorLED.fault9 = false;
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	b298      	uxth	r0, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	b299      	uxth	r1, r3
 8005c5c:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <drawStatusMenu+0x564>)
 8005c5e:	4a33      	ldr	r2, [pc, #204]	; (8005d2c <drawStatusMenu+0x568>)
 8005c60:	f7fb fec8 	bl	80019f4 <LCD_PutStr>
		}


		i=40;
 8005c64:	2328      	movs	r3, #40	; 0x28
 8005c66:	617b      	str	r3, [r7, #20]
		j+=25;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3319      	adds	r3, #25
 8005c6c:	613b      	str	r3, [r7, #16]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	b298      	uxth	r0, r3
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	b299      	uxth	r1, r3
 8005c76:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <drawStatusMenu+0x564>)
 8005c78:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <drawStatusMenu+0x56c>)
 8005c7a:	f7fb febb 	bl	80019f4 <LCD_PutStr>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8005c88:	f002 f88c 	bl	8007da4 <HAL_GetTick>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <drawStatusMenu+0x570>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	099b      	lsrs	r3, r3, #6
 8005c96:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	b298      	uxth	r0, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <drawStatusMenu+0x564>)
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	f7fb fede 	bl	8001a64 <LCD_PutInt>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	b298      	uxth	r0, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	b299      	uxth	r1, r3
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <drawStatusMenu+0x564>)
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <drawStatusMenu+0x574>)
 8005cbe:	f7fb fe99 	bl	80019f4 <LCD_PutStr>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

		i=200;
 8005ccc:	23c8      	movs	r3, #200	; 0xc8
 8005cce:	617b      	str	r3, [r7, #20]
		j=15;
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	b298      	uxth	r0, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	b299      	uxth	r1, r3
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f7fb ffd6 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8005ce8:	23b4      	movs	r3, #180	; 0xb4
 8005cea:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	b298      	uxth	r0, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f7fb ffca 	bl	8001c94 <drawUpDownArrow>
		i=220;
 8005d00:	23dc      	movs	r3, #220	; 0xdc
 8005d02:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	b298      	uxth	r0, r3
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	b299      	uxth	r1, r3
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f7fb ffbe 	bl	8001c94 <drawUpDownArrow>

		break;
 8005d18:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005d1a:	f7fa fed1 	bl	8000ac0 <SMLCD_Flush>



}
 8005d1e:	bf00      	nop
 8005d20:	3728      	adds	r7, #40	; 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	0801b3c0 	.word	0x0801b3c0
 8005d2c:	0801a90c 	.word	0x0801a90c
 8005d30:	0801a918 	.word	0x0801a918
 8005d34:	10624dd3 	.word	0x10624dd3
 8005d38:	0801a92c 	.word	0x0801a92c

08005d3c <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b090      	sub	sp, #64	; 0x40
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005d44:	2314      	movs	r3, #20
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
	int indentAlignment=20;
 8005d48:	2314      	movs	r3, #20
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
	int arrowUp = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int arrowDown=1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowSize=3;
 8005d54:	2303      	movs	r3, #3
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
	int otherBoardAlignment = 225;
 8005d58:	23e1      	movs	r3, #225	; 0xe1
 8005d5a:	623b      	str	r3, [r7, #32]
	int verticalSpacing = 15;
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	61fb      	str	r3, [r7, #28]
	previousMenu=0;
 8005d60:	4b85      	ldr	r3, [pc, #532]	; (8005f78 <drawSystemInfoMenu+0x23c>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005d66:	f7fb f867 	bl	8000e38 <LCD_Clear>
	getLatestADC();
 8005d6a:	f000 fc49 	bl	8006600 <getLatestADC>
	drawMenuHeader();
 8005d6e:	f000 fbaf 	bl	80064d0 <drawMenuHeader>
	i  = 135;
 8005d72:	2387      	movs	r3, #135	; 0x87
 8005d74:	61bb      	str	r3, [r7, #24]
	j = 24;
 8005d76:	2318      	movs	r3, #24
 8005d78:	617b      	str	r3, [r7, #20]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	b299      	uxth	r1, r3
 8005d7e:	4b7f      	ldr	r3, [pc, #508]	; (8005f7c <drawSystemInfoMenu+0x240>)
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	3b02      	subs	r3, #2
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3303      	adds	r3, #3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2002      	movs	r0, #2
 8005d90:	f7fb fae2 	bl	8001358 <LCD_FillRect>

	switch(indicator){
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d004      	beq.n	8005da4 <drawSystemInfoMenu+0x68>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	f000 8187 	beq.w	80060b0 <drawSystemInfoMenu+0x374>
 8005da2:	e2c7      	b.n	8006334 <drawSystemInfoMenu+0x5f8>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005da4:	232d      	movs	r3, #45	; 0x2d
 8005da6:	617b      	str	r3, [r7, #20]
		i=42;
 8005da8:	232a      	movs	r3, #42	; 0x2a
 8005daa:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	b298      	uxth	r0, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	b299      	uxth	r1, r3
 8005db4:	4b72      	ldr	r3, [pc, #456]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005db6:	4a73      	ldr	r2, [pc, #460]	; (8005f84 <drawSystemInfoMenu+0x248>)
 8005db8:	f7fb fe1c 	bl	80019f4 <LCD_PutStr>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	b298      	uxth	r0, r3
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	b299      	uxth	r1, r3
 8005dce:	4b6c      	ldr	r3, [pc, #432]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005dd0:	4a6d      	ldr	r2, [pc, #436]	; (8005f88 <drawSystemInfoMenu+0x24c>)
 8005dd2:	f7fb fe0f 	bl	80019f4 <LCD_PutStr>

		j+=verticalSpacing;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
		i=42;
 8005dde:	232a      	movs	r3, #42	; 0x2a
 8005de0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	b298      	uxth	r0, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	b299      	uxth	r1, r3
 8005dea:	4b65      	ldr	r3, [pc, #404]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005dec:	4a67      	ldr	r2, [pc, #412]	; (8005f8c <drawSystemInfoMenu+0x250>)
 8005dee:	f7fb fe01 	bl	80019f4 <LCD_PutStr>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	4413      	add	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	b299      	uxth	r1, r3
 8005e04:	4b5e      	ldr	r3, [pc, #376]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005e06:	4a62      	ldr	r2, [pc, #392]	; (8005f90 <drawSystemInfoMenu+0x254>)
 8005e08:	f7fb fdf4 	bl	80019f4 <LCD_PutStr>

		j+=30;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	331e      	adds	r3, #30
 8005e10:	617b      	str	r3, [r7, #20]
		i=10;
 8005e12:	230a      	movs	r3, #10
 8005e14:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	b298      	uxth	r0, r3
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	b299      	uxth	r1, r3
 8005e1e:	4b58      	ldr	r3, [pc, #352]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005e20:	4a5c      	ldr	r2, [pc, #368]	; (8005f94 <drawSystemInfoMenu+0x258>)
 8005e22:	f7fb fde7 	bl	80019f4 <LCD_PutStr>

		j+=verticalSpacing;
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	61bb      	str	r3, [r7, #24]
		//add your project definition here. example is ATLAS below. ATLAS is defined as finding zion information of 1 in the device header.
		int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8005e32:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <drawSystemInfoMenu+0x25c>)
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d007      	beq.n	8005e4a <drawSystemInfoMenu+0x10e>
 8005e3a:	4b57      	ldr	r3, [pc, #348]	; (8005f98 <drawSystemInfoMenu+0x25c>)
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d003      	beq.n	8005e4a <drawSystemInfoMenu+0x10e>
 8005e42:	4b55      	ldr	r3, [pc, #340]	; (8005f98 <drawSystemInfoMenu+0x25c>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <drawSystemInfoMenu+0x112>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <drawSystemInfoMenu+0x114>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
//Add an if/else if for your project name

		if(weAreAtlas){
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <drawSystemInfoMenu+0x12e>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	b298      	uxth	r0, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	b299      	uxth	r1, r3
 8005e60:	4b47      	ldr	r3, [pc, #284]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005e62:	4a4e      	ldr	r2, [pc, #312]	; (8005f9c <drawSystemInfoMenu+0x260>)
 8005e64:	f7fb fdc6 	bl	80019f4 <LCD_PutStr>
 8005e68:	e007      	b.n	8005e7a <drawSystemInfoMenu+0x13e>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	b298      	uxth	r0, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	b299      	uxth	r1, r3
 8005e72:	4b43      	ldr	r3, [pc, #268]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005e74:	4a44      	ldr	r2, [pc, #272]	; (8005f88 <drawSystemInfoMenu+0x24c>)
 8005e76:	f7fb fdbd 	bl	80019f4 <LCD_PutStr>
		}

		j+=verticalSpacing;
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
		i=10;
 8005e82:	230a      	movs	r3, #10
 8005e84:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	b298      	uxth	r0, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	b299      	uxth	r1, r3
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005e90:	4a43      	ldr	r2, [pc, #268]	; (8005fa0 <drawSystemInfoMenu+0x264>)
 8005e92:	f7fb fdaf 	bl	80019f4 <LCD_PutStr>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
		i=otherBoardAlignment;
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	b298      	uxth	r0, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	b299      	uxth	r1, r3
 8005eac:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005eae:	4a3d      	ldr	r2, [pc, #244]	; (8005fa4 <drawSystemInfoMenu+0x268>)
 8005eb0:	f7fb fda0 	bl	80019f4 <LCD_PutStr>

		j+=verticalSpacing;
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	b298      	uxth	r0, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	b299      	uxth	r1, r3
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005eca:	4a37      	ldr	r2, [pc, #220]	; (8005fa8 <drawSystemInfoMenu+0x26c>)
 8005ecc:	f7fb fd92 	bl	80019f4 <LCD_PutStr>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
		//Add an if/else if for the soc name and call the method
		if(ZION.SOC_BoardID==ATLAS){
 8005eda:	4b2f      	ldr	r3, [pc, #188]	; (8005f98 <drawSystemInfoMenu+0x25c>)
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d104      	bne.n	8005eec <drawSystemInfoMenu+0x1b0>
			atlasSystemInfoSoc(i,j);
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	69b8      	ldr	r0, [r7, #24]
 8005ee6:	f00c f979 	bl	80121dc <atlasSystemInfoSoc>
 8005eea:	e003      	b.n	8005ef4 <drawSystemInfoMenu+0x1b8>
		}
		else{
			defaultSystemInfoSoc(i,j);
 8005eec:	6979      	ldr	r1, [r7, #20]
 8005eee:	69b8      	ldr	r0, [r7, #24]
 8005ef0:	f00e fbf4 	bl	80146dc <defaultSystemInfoSoc>
		}
		i=otherBoardAlignment+indentAlignment;
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	4413      	add	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	b298      	uxth	r0, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	b299      	uxth	r1, r3
 8005f04:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005f06:	4a29      	ldr	r2, [pc, #164]	; (8005fac <drawSystemInfoMenu+0x270>)
 8005f08:	f7fb fd74 	bl	80019f4 <LCD_PutStr>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	4413      	add	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
		if(ZION.zionSwitch){
 8005f16:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <drawSystemInfoMenu+0x25c>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <drawSystemInfoMenu+0x1f4>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	b298      	uxth	r0, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	b299      	uxth	r1, r3
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005f28:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <drawSystemInfoMenu+0x274>)
 8005f2a:	f7fb fd63 	bl	80019f4 <LCD_PutStr>
 8005f2e:	e007      	b.n	8005f40 <drawSystemInfoMenu+0x204>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	b298      	uxth	r0, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	b299      	uxth	r1, r3
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005f3a:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <drawSystemInfoMenu+0x278>)
 8005f3c:	f7fb fd5a 	bl	80019f4 <LCD_PutStr>
		}

		j+=verticalSpacing;
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	b298      	uxth	r0, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	b299      	uxth	r1, r3
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <drawSystemInfoMenu+0x244>)
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <drawSystemInfoMenu+0x27c>)
 8005f58:	f7fb fd4c 	bl	80019f4 <LCD_PutStr>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	4413      	add	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
		//Add an if/else if for your ASIC name and call the method
		if(ZION.ASIC_BoardID==ATLAS){
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <drawSystemInfoMenu+0x25c>)
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d126      	bne.n	8005fbc <drawSystemInfoMenu+0x280>
			atlasSystemInfoAsic(i,j);
 8005f6e:	6979      	ldr	r1, [r7, #20]
 8005f70:	69b8      	ldr	r0, [r7, #24]
 8005f72:	f00c f997 	bl	80122a4 <atlasSystemInfoAsic>
 8005f76:	e025      	b.n	8005fc4 <drawSystemInfoMenu+0x288>
 8005f78:	20003428 	.word	0x20003428
 8005f7c:	20028b62 	.word	0x20028b62
 8005f80:	0801b3c0 	.word	0x0801b3c0
 8005f84:	0801a938 	.word	0x0801a938
 8005f88:	0801a948 	.word	0x0801a948
 8005f8c:	0801a950 	.word	0x0801a950
 8005f90:	0801a968 	.word	0x0801a968
 8005f94:	0801a970 	.word	0x0801a970
 8005f98:	20003328 	.word	0x20003328
 8005f9c:	0801a97c 	.word	0x0801a97c
 8005fa0:	0801a984 	.word	0x0801a984
 8005fa4:	0801a998 	.word	0x0801a998
 8005fa8:	0801a9a8 	.word	0x0801a9a8
 8005fac:	0801a9b0 	.word	0x0801a9b0
 8005fb0:	0801a9b8 	.word	0x0801a9b8
 8005fb4:	0801a9c8 	.word	0x0801a9c8
 8005fb8:	0801a9d4 	.word	0x0801a9d4
		}
		else{
			defaultSystemInfoAsic(i,j);
 8005fbc:	6979      	ldr	r1, [r7, #20]
 8005fbe:	69b8      	ldr	r0, [r7, #24]
 8005fc0:	f00e fbc8 	bl	8014754 <defaultSystemInfoAsic>
		}
		//Add an if/else if if your project has additional boards. call the method
		if(ZION.SOC_BoardID==ATLAS){
 8005fc4:	4b37      	ldr	r3, [pc, #220]	; (80060a4 <drawSystemInfoMenu+0x368>)
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d103      	bne.n	8005fd4 <drawSystemInfoMenu+0x298>
			atlasSystemInfoPV(i,j);
 8005fcc:	6979      	ldr	r1, [r7, #20]
 8005fce:	69b8      	ldr	r0, [r7, #24]
 8005fd0:	f00c fa30 	bl	8012434 <atlasSystemInfoPV>
		}
		j+=verticalSpacing;
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	b298      	uxth	r0, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	b299      	uxth	r1, r3
 8005fe8:	4b2f      	ldr	r3, [pc, #188]	; (80060a8 <drawSystemInfoMenu+0x36c>)
 8005fea:	4a30      	ldr	r2, [pc, #192]	; (80060ac <drawSystemInfoMenu+0x370>)
 8005fec:	f7fb fd02 	bl	80019f4 <LCD_PutStr>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
		//Add an if/else if for your DISPLAY name and call the method
		if(ZION.DISPLAY_BoardID==ATLAS){
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <drawSystemInfoMenu+0x368>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d104      	bne.n	800600c <drawSystemInfoMenu+0x2d0>
			atlasSystemInfoDisplay(i,j);
 8006002:	6979      	ldr	r1, [r7, #20]
 8006004:	69b8      	ldr	r0, [r7, #24]
 8006006:	f00c f9b1 	bl	801236c <atlasSystemInfoDisplay>
 800600a:	e003      	b.n	8006014 <drawSystemInfoMenu+0x2d8>
		}
		else{
			defaultSystemInfoDisplay(i,j);
 800600c:	6979      	ldr	r1, [r7, #20]
 800600e:	69b8      	ldr	r0, [r7, #24]
 8006010:	f00e fbdc 	bl	80147cc <defaultSystemInfoDisplay>
		}
		//Add an if/else if for any additional boards that DEV_UI can check and call the methods
		if(ZION.SOC_BoardID==ATLAS){
 8006014:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <drawSystemInfoMenu+0x368>)
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11b      	bne.n	8006054 <drawSystemInfoMenu+0x318>
			atlasSystemInfoWIFI(i,j);
 800601c:	6979      	ldr	r1, [r7, #20]
 800601e:	69b8      	ldr	r0, [r7, #24]
 8006020:	f00c fa4c 	bl	80124bc <atlasSystemInfoWIFI>
			j+=verticalSpacing;
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
			atlasSystemInfoWIGIG(i,j);
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	69b8      	ldr	r0, [r7, #24]
 8006030:	f00c fa88 	bl	8012544 <atlasSystemInfoWIGIG>
			j+=verticalSpacing;
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
			atlasSystemInfoCODEC(i,j);
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	69b8      	ldr	r0, [r7, #24]
 8006040:	f00c fac4 	bl	80125cc <atlasSystemInfoCODEC>
			j+=verticalSpacing;
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
			atlasSystemInfoRF(i,j);
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	69b8      	ldr	r0, [r7, #24]
 8006050:	f00c fb00 	bl	8012654 <atlasSystemInfoRF>
		}
		i=200;
 8006054:	23c8      	movs	r3, #200	; 0xc8
 8006056:	61bb      	str	r3, [r7, #24]
		j=220;
 8006058:	23dc      	movs	r3, #220	; 0xdc
 800605a:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	b298      	uxth	r0, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	b299      	uxth	r1, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	b29a      	uxth	r2, r3
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	b29b      	uxth	r3, r3
 800606c:	f7fb fe12 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8006070:	23b4      	movs	r3, #180	; 0xb4
 8006072:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	b298      	uxth	r0, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	b299      	uxth	r1, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	b29a      	uxth	r2, r3
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	b29b      	uxth	r3, r3
 8006084:	f7fb fe06 	bl	8001c94 <drawUpDownArrow>
		i=220;
 8006088:	23dc      	movs	r3, #220	; 0xdc
 800608a:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	b298      	uxth	r0, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	b299      	uxth	r1, r3
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	b29a      	uxth	r2, r3
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	b29b      	uxth	r3, r3
 800609c:	f7fb fdfa 	bl	8001c94 <drawUpDownArrow>
		break;
 80060a0:	e148      	b.n	8006334 <drawSystemInfoMenu+0x5f8>
 80060a2:	bf00      	nop
 80060a4:	20003328 	.word	0x20003328
 80060a8:	0801b3c0 	.word	0x0801b3c0
 80060ac:	0801a9dc 	.word	0x0801a9dc
	}
	case 2:{
		j=45;
 80060b0:	232d      	movs	r3, #45	; 0x2d
 80060b2:	617b      	str	r3, [r7, #20]
		i=10;
 80060b4:	230a      	movs	r3, #10
 80060b6:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	b298      	uxth	r0, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	b299      	uxth	r1, r3
 80060c0:	4b9f      	ldr	r3, [pc, #636]	; (8006340 <drawSystemInfoMenu+0x604>)
 80060c2:	4aa0      	ldr	r2, [pc, #640]	; (8006344 <drawSystemInfoMenu+0x608>)
 80060c4:	f7fb fc96 	bl	80019f4 <LCD_PutStr>

		j+=25;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	3319      	adds	r3, #25
 80060cc:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	b298      	uxth	r0, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	b299      	uxth	r1, r3
 80060da:	4b99      	ldr	r3, [pc, #612]	; (8006340 <drawSystemInfoMenu+0x604>)
 80060dc:	4a9a      	ldr	r2, [pc, #616]	; (8006348 <drawSystemInfoMenu+0x60c>)
 80060de:	f7fb fc89 	bl	80019f4 <LCD_PutStr>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4413      	add	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 80060ec:	4b97      	ldr	r3, [pc, #604]	; (800634c <drawSystemInfoMenu+0x610>)
 80060ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f0:	4a97      	ldr	r2, [pc, #604]	; (8006350 <drawSystemInfoMenu+0x614>)
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	edd3 7a00 	vldr	s15, [r3]
 80060fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80060fe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006102:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006106:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800610a:	ee17 3a90 	vmov	r3, s15
 800610e:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	b298      	uxth	r0, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	b299      	uxth	r1, r3
 8006118:	4b89      	ldr	r3, [pc, #548]	; (8006340 <drawSystemInfoMenu+0x604>)
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2301      	movs	r3, #1
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	f7fb fd06 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	3319      	adds	r3, #25
 8006128:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	b298      	uxth	r0, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	b299      	uxth	r1, r3
 8006136:	4b82      	ldr	r3, [pc, #520]	; (8006340 <drawSystemInfoMenu+0x604>)
 8006138:	4a86      	ldr	r2, [pc, #536]	; (8006354 <drawSystemInfoMenu+0x618>)
 800613a:	f7fb fc5b 	bl	80019f4 <LCD_PutStr>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	4413      	add	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8006148:	4b80      	ldr	r3, [pc, #512]	; (800634c <drawSystemInfoMenu+0x610>)
 800614a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614c:	4a80      	ldr	r2, [pc, #512]	; (8006350 <drawSystemInfoMenu+0x614>)
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	edd3 7a00 	vldr	s15, [r3]
 8006156:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800615a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800615e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006162:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006166:	ee17 3a90 	vmov	r3, s15
 800616a:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	b298      	uxth	r0, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	b299      	uxth	r1, r3
 8006174:	4b72      	ldr	r3, [pc, #456]	; (8006340 <drawSystemInfoMenu+0x604>)
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2301      	movs	r3, #1
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	f7fb fcd8 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3319      	adds	r3, #25
 8006184:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	b298      	uxth	r0, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	b299      	uxth	r1, r3
 8006192:	4b6b      	ldr	r3, [pc, #428]	; (8006340 <drawSystemInfoMenu+0x604>)
 8006194:	4a70      	ldr	r2, [pc, #448]	; (8006358 <drawSystemInfoMenu+0x61c>)
 8006196:	f7fb fc2d 	bl	80019f4 <LCD_PutStr>
 800619a:	4603      	mov	r3, r0
 800619c:	461a      	mov	r2, r3
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4413      	add	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 80061a4:	4b69      	ldr	r3, [pc, #420]	; (800634c <drawSystemInfoMenu+0x610>)
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	4a69      	ldr	r2, [pc, #420]	; (8006350 <drawSystemInfoMenu+0x614>)
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	edd3 7a00 	vldr	s15, [r3]
 80061b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80061ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80061be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80061c2:	ee17 3a90 	vmov	r3, s15
 80061c6:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	b298      	uxth	r0, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	b299      	uxth	r1, r3
 80061d0:	4b5b      	ldr	r3, [pc, #364]	; (8006340 <drawSystemInfoMenu+0x604>)
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	2301      	movs	r3, #1
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	f7fb fcaa 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	3319      	adds	r3, #25
 80061e0:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	b298      	uxth	r0, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	b299      	uxth	r1, r3
 80061ee:	4b54      	ldr	r3, [pc, #336]	; (8006340 <drawSystemInfoMenu+0x604>)
 80061f0:	4a5a      	ldr	r2, [pc, #360]	; (800635c <drawSystemInfoMenu+0x620>)
 80061f2:	f7fb fbff 	bl	80019f4 <LCD_PutStr>
 80061f6:	4603      	mov	r3, r0
 80061f8:	461a      	mov	r2, r3
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	4413      	add	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8006200:	4b52      	ldr	r3, [pc, #328]	; (800634c <drawSystemInfoMenu+0x610>)
 8006202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006204:	4a52      	ldr	r2, [pc, #328]	; (8006350 <drawSystemInfoMenu+0x614>)
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	edd3 7a00 	vldr	s15, [r3]
 800620e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006212:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800621a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800621e:	ee17 3a90 	vmov	r3, s15
 8006222:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	b298      	uxth	r0, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	b299      	uxth	r1, r3
 800622c:	4b44      	ldr	r3, [pc, #272]	; (8006340 <drawSystemInfoMenu+0x604>)
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2301      	movs	r3, #1
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	f7fb fc7c 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	3319      	adds	r3, #25
 800623c:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	b298      	uxth	r0, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	b299      	uxth	r1, r3
 800624a:	4b3d      	ldr	r3, [pc, #244]	; (8006340 <drawSystemInfoMenu+0x604>)
 800624c:	4a44      	ldr	r2, [pc, #272]	; (8006360 <drawSystemInfoMenu+0x624>)
 800624e:	f7fb fbd1 	bl	80019f4 <LCD_PutStr>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	4413      	add	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 800625c:	4b3b      	ldr	r3, [pc, #236]	; (800634c <drawSystemInfoMenu+0x610>)
 800625e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006260:	4a3b      	ldr	r2, [pc, #236]	; (8006350 <drawSystemInfoMenu+0x614>)
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	edd3 7a00 	vldr	s15, [r3]
 800626a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800626e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006272:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006276:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800627a:	ee17 3a90 	vmov	r3, s15
 800627e:	613b      	str	r3, [r7, #16]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	b298      	uxth	r0, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	b299      	uxth	r1, r3
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <drawSystemInfoMenu+0x604>)
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	2301      	movs	r3, #1
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	f7fb fc4e 	bl	8001b30 <LCD_PutIntF>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	4413      	add	r3, r2
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4413      	add	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	b298      	uxth	r0, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	b299      	uxth	r1, r3
 80062aa:	4b25      	ldr	r3, [pc, #148]	; (8006340 <drawSystemInfoMenu+0x604>)
 80062ac:	4a2d      	ldr	r2, [pc, #180]	; (8006364 <drawSystemInfoMenu+0x628>)
 80062ae:	f7fb fba1 	bl	80019f4 <LCD_PutStr>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	4413      	add	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
		if(ZION.zionSwitch ==1){
 80062bc:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <drawSystemInfoMenu+0x62c>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d108      	bne.n	80062d6 <drawSystemInfoMenu+0x59a>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	b298      	uxth	r0, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	b299      	uxth	r1, r3
 80062cc:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <drawSystemInfoMenu+0x604>)
 80062ce:	4a27      	ldr	r2, [pc, #156]	; (800636c <drawSystemInfoMenu+0x630>)
 80062d0:	f7fb fb90 	bl	80019f4 <LCD_PutStr>
 80062d4:	e007      	b.n	80062e6 <drawSystemInfoMenu+0x5aa>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	b298      	uxth	r0, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	b299      	uxth	r1, r3
 80062de:	4b18      	ldr	r3, [pc, #96]	; (8006340 <drawSystemInfoMenu+0x604>)
 80062e0:	4a23      	ldr	r2, [pc, #140]	; (8006370 <drawSystemInfoMenu+0x634>)
 80062e2:	f7fb fb87 	bl	80019f4 <LCD_PutStr>
		}



		i=200;
 80062e6:	23c8      	movs	r3, #200	; 0xc8
 80062e8:	61bb      	str	r3, [r7, #24]
		j=15;
 80062ea:	230f      	movs	r3, #15
 80062ec:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	b298      	uxth	r0, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	b299      	uxth	r1, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f7fb fcc9 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8006302:	23b4      	movs	r3, #180	; 0xb4
 8006304:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	b298      	uxth	r0, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	b299      	uxth	r1, r3
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	b29a      	uxth	r2, r3
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	b29b      	uxth	r3, r3
 8006316:	f7fb fcbd 	bl	8001c94 <drawUpDownArrow>
		i=220;
 800631a:	23dc      	movs	r3, #220	; 0xdc
 800631c:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	b298      	uxth	r0, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	b299      	uxth	r1, r3
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	b29a      	uxth	r2, r3
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	b29b      	uxth	r3, r3
 800632e:	f7fb fcb1 	bl	8001c94 <drawUpDownArrow>

		break;
 8006332:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8006334:	f7fa fbc4 	bl	8000ac0 <SMLCD_Flush>
}
 8006338:	bf00      	nop
 800633a:	3738      	adds	r7, #56	; 0x38
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	0801b3c0 	.word	0x0801b3c0
 8006344:	0801a9e8 	.word	0x0801a9e8
 8006348:	0801aa00 	.word	0x0801aa00
 800634c:	200000d4 	.word	0x200000d4
 8006350:	2003119c 	.word	0x2003119c
 8006354:	0801aa10 	.word	0x0801aa10
 8006358:	0801aa1c 	.word	0x0801aa1c
 800635c:	0801aa28 	.word	0x0801aa28
 8006360:	0801a9b0 	.word	0x0801a9b0
 8006364:	0801aa34 	.word	0x0801aa34
 8006368:	20003328 	.word	0x20003328
 800636c:	0801aa44 	.word	0x0801aa44
 8006370:	0801aa4c 	.word	0x0801aa4c

08006374 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	; 0x28
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	460b      	mov	r3, r1
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	72fb      	strb	r3, [r7, #11]
	int i,j;
		//int adjacentSpacing = 20;
		//int indentAlignment=50;


		LCD_Clear();
 8006382:	f7fa fd59 	bl	8000e38 <LCD_Clear>
		getLatestADC();
 8006386:	f000 f93b 	bl	8006600 <getLatestADC>
		drawMenuHeader();
 800638a:	f000 f8a1 	bl	80064d0 <drawMenuHeader>
		i  = 135;
 800638e:	2387      	movs	r3, #135	; 0x87
 8006390:	61bb      	str	r3, [r7, #24]
		j = 24;
 8006392:	2318      	movs	r3, #24
 8006394:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	b299      	uxth	r1, r3
 800639a:	4b43      	ldr	r3, [pc, #268]	; (80064a8 <drawBootMenu+0x134>)
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	3b02      	subs	r3, #2
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3303      	adds	r3, #3
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2002      	movs	r0, #2
 80063ac:	f7fa ffd4 	bl	8001358 <LCD_FillRect>

//add your project definition here. example is ATLAS below. ATLAS is defined as finding zion information of 1 in the device header.
		int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 80063b0:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <drawBootMenu+0x138>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d007      	beq.n	80063c8 <drawBootMenu+0x54>
 80063b8:	4b3c      	ldr	r3, [pc, #240]	; (80064ac <drawBootMenu+0x138>)
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d003      	beq.n	80063c8 <drawBootMenu+0x54>
 80063c0:	4b3a      	ldr	r3, [pc, #232]	; (80064ac <drawBootMenu+0x138>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <drawBootMenu+0x58>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <drawBootMenu+0x5a>
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]
		if(VSYS_ADC_VAL > VSYS_FLT){
 80063d0:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <drawBootMenu+0x13c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a37      	ldr	r2, [pc, #220]	; (80064b4 <drawBootMenu+0x140>)
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	edd3 7a00 	vldr	s15, [r3]
 80063de:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80063e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ea:	dd25      	ble.n	8006438 <drawBootMenu+0xc4>
			if(ZION.zionFinished){
 80063ec:	4b2f      	ldr	r3, [pc, #188]	; (80064ac <drawBootMenu+0x138>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d016      	beq.n	8006422 <drawBootMenu+0xae>
				//add an additional if/else if for the new project and call your method.
				if(weAreAtlas){
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <drawBootMenu+0x98>
					j = atlasBootMenuBootModes(indicator, previousMenu, menu, button);
 80063fa:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <drawBootMenu+0x144>)
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f00b fbde 	bl	8011bc4 <atlasBootMenuBootModes>
 8006408:	61f8      	str	r0, [r7, #28]
 800640a:	e034      	b.n	8006476 <drawBootMenu+0x102>
				}
				else{
					j = defaultBootMenuBootModes(indicator, previousMenu, menu, button,1);
 800640c:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <drawBootMenu+0x144>)
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	2201      	movs	r2, #1
 8006414:	9200      	str	r2, [sp, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f00d ff65 	bl	80142e8 <defaultBootMenuBootModes>
 800641e:	61f8      	str	r0, [r7, #28]
 8006420:	e029      	b.n	8006476 <drawBootMenu+0x102>
				}
			}
			else{
				j = defaultBootMenuBootModes(indicator, previousMenu, menu, button,0);
 8006422:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <drawBootMenu+0x144>)
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	7afb      	ldrb	r3, [r7, #11]
 8006428:	2200      	movs	r2, #0
 800642a:	9200      	str	r2, [sp, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f00d ff5a 	bl	80142e8 <defaultBootMenuBootModes>
 8006434:	61f8      	str	r0, [r7, #28]
 8006436:	e01e      	b.n	8006476 <drawBootMenu+0x102>
			}
		}
		else{
			j=110;
 8006438:	236e      	movs	r3, #110	; 0x6e
 800643a:	61fb      	str	r3, [r7, #28]
			i=120;
 800643c:	2378      	movs	r3, #120	; 0x78
 800643e:	61bb      	str	r3, [r7, #24]
			bootButtons.bootMode=0;
 8006440:	4b1e      	ldr	r3, [pc, #120]	; (80064bc <drawBootMenu+0x148>)
 8006442:	2200      	movs	r2, #0
 8006444:	629a      	str	r2, [r3, #40]	; 0x28
			setIndicator=0;
 8006446:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <drawBootMenu+0x14c>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	b298      	uxth	r0, r3
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	b299      	uxth	r1, r3
 8006454:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <drawBootMenu+0x150>)
 8006456:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <drawBootMenu+0x154>)
 8006458:	f7fb facc 	bl	80019f4 <LCD_PutStr>
			j+=14;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	330e      	adds	r3, #14
 8006460:	61fb      	str	r3, [r7, #28]
			i=75;
 8006462:	234b      	movs	r3, #75	; 0x4b
 8006464:	61bb      	str	r3, [r7, #24]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	b298      	uxth	r0, r3
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	b299      	uxth	r1, r3
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <drawBootMenu+0x150>)
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <drawBootMenu+0x158>)
 8006472:	f7fb fabf 	bl	80019f4 <LCD_PutStr>
		}
		previousMenu=menu;
 8006476:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <drawBootMenu+0x144>)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6013      	str	r3, [r2, #0]
		i=25;
 800647c:	2319      	movs	r3, #25
 800647e:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(i, j, i + 12, j + 10);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	b298      	uxth	r0, r3
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	b299      	uxth	r1, r3
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	b29b      	uxth	r3, r3
 800648c:	330c      	adds	r3, #12
 800648e:	b29a      	uxth	r2, r3
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	b29b      	uxth	r3, r3
 8006494:	330a      	adds	r3, #10
 8006496:	b29b      	uxth	r3, r3
 8006498:	f7fa ff5e 	bl	8001358 <LCD_FillRect>
		SMLCD_Flush();
 800649c:	f7fa fb10 	bl	8000ac0 <SMLCD_Flush>
}
 80064a0:	bf00      	nop
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20028b62 	.word	0x20028b62
 80064ac:	20003328 	.word	0x20003328
 80064b0:	200000d4 	.word	0x200000d4
 80064b4:	2003119c 	.word	0x2003119c
 80064b8:	20003428 	.word	0x20003428
 80064bc:	20003360 	.word	0x20003360
 80064c0:	2000342c 	.word	0x2000342c
 80064c4:	0801b3c0 	.word	0x0801b3c0
 80064c8:	0801aa58 	.word	0x0801aa58
 80064cc:	0801aa70 	.word	0x0801aa70

080064d0 <drawMenuHeader>:

void drawMenuHeader(){
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 80064d6:	4b3f      	ldr	r3, [pc, #252]	; (80065d4 <drawMenuHeader+0x104>)
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80064dc:	4b3e      	ldr	r3, [pc, #248]	; (80065d8 <drawMenuHeader+0x108>)
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	4b3d      	ldr	r3, [pc, #244]	; (80065dc <drawMenuHeader+0x10c>)
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2100      	movs	r1, #0
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7fa fef0 	bl	80012d4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80064f4:	4b38      	ldr	r3, [pc, #224]	; (80065d8 <drawMenuHeader+0x108>)
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	3b03      	subs	r3, #3
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	4b37      	ldr	r3, [pc, #220]	; (80065dc <drawMenuHeader+0x10c>)
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	3b03      	subs	r3, #3
 8006502:	b29b      	uxth	r3, r3
 8006504:	2102      	movs	r1, #2
 8006506:	2002      	movs	r0, #2
 8006508:	f7fa fee4 	bl	80012d4 <LCD_Rect>

	// RTC :)
	i  = 10;
 800650c:	230a      	movs	r3, #10
 800650e:	60fb      	str	r3, [r7, #12]
	j  = 10;
 8006510:	230a      	movs	r3, #10
 8006512:	60bb      	str	r3, [r7, #8]
	printFaults(i,j);
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f8a0 	bl	800665c <printFaults>
	i=275;
 800651c:	f240 1313 	movw	r3, #275	; 0x113
 8006520:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	b298      	uxth	r0, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	b299      	uxth	r1, r3
 800652a:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <drawMenuHeader+0x110>)
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <drawMenuHeader+0x114>)
 800652e:	f7fb fa61 	bl	80019f4 <LCD_PutStr>
 8006532:	4603      	mov	r3, r0
 8006534:	461a      	mov	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
	int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <drawMenuHeader+0x118>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d007      	beq.n	8006554 <drawMenuHeader+0x84>
 8006544:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <drawMenuHeader+0x118>)
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b01      	cmp	r3, #1
 800654a:	d003      	beq.n	8006554 <drawMenuHeader+0x84>
 800654c:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <drawMenuHeader+0x118>)
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <drawMenuHeader+0x88>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <drawMenuHeader+0x8a>
 8006558:	2300      	movs	r3, #0
 800655a:	607b      	str	r3, [r7, #4]
	if(VSYS_ADC_VAL >VSYS_FLT){
 800655c:	4b23      	ldr	r3, [pc, #140]	; (80065ec <drawMenuHeader+0x11c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <drawMenuHeader+0x120>)
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	edd3 7a00 	vldr	s15, [r3]
 800656a:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800656e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006576:	dd15      	ble.n	80065a4 <drawMenuHeader+0xd4>
		if(ZION.SOC_EEPROM_Detected){
 8006578:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <drawMenuHeader+0x118>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <drawMenuHeader+0xca>
			//Add an if/else if for your project name and call the method
			if(weAreAtlas){
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <drawMenuHeader+0xc0>
				atlasMainMenuBootModes(i,j);
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f00b fab9 	bl	8011b00 <atlasMainMenuBootModes>
 800658e:	e017      	b.n	80065c0 <drawMenuHeader+0xf0>
			}
			else{
				defaultMainMenuBootModes(i,j);
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f00d fe74 	bl	8014280 <defaultMainMenuBootModes>
 8006598:	e012      	b.n	80065c0 <drawMenuHeader+0xf0>
			}
		}
		else{
			defaultMainMenuBootModes(i,j);
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f00d fe6f 	bl	8014280 <defaultMainMenuBootModes>
 80065a2:	e00d      	b.n	80065c0 <drawMenuHeader+0xf0>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	b298      	uxth	r0, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	b299      	uxth	r1, r3
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <drawMenuHeader+0x110>)
 80065ae:	4a11      	ldr	r2, [pc, #68]	; (80065f4 <drawMenuHeader+0x124>)
 80065b0:	f7fb fa20 	bl	80019f4 <LCD_PutStr>
		bootButtons.bootMode=0;
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <drawMenuHeader+0x128>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	629a      	str	r2, [r3, #40]	; 0x28
		checkedEEPROM=0;
 80065ba:	4b10      	ldr	r3, [pc, #64]	; (80065fc <drawMenuHeader+0x12c>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
	}

	i  = 135;
 80065c0:	2387      	movs	r3, #135	; 0x87
 80065c2:	60fb      	str	r3, [r7, #12]
	j += 14;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	330e      	adds	r3, #14
 80065c8:	60bb      	str	r3, [r7, #8]


}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20028b60 	.word	0x20028b60
 80065d8:	20028b62 	.word	0x20028b62
 80065dc:	20028b64 	.word	0x20028b64
 80065e0:	0801b3c0 	.word	0x0801b3c0
 80065e4:	0801a7f0 	.word	0x0801a7f0
 80065e8:	20003328 	.word	0x20003328
 80065ec:	200000d4 	.word	0x200000d4
 80065f0:	2003119c 	.word	0x2003119c
 80065f4:	0801a7f8 	.word	0x0801a7f8
 80065f8:	20003360 	.word	0x20003360
 80065fc:	20003430 	.word	0x20003430

08006600 <getLatestADC>:

void getLatestADC(){
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <getLatestADC+0x54>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01e      	beq.n	800664c <getLatestADC+0x4c>
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <getLatestADC+0x54>)
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01a      	beq.n	800664c <getLatestADC+0x4c>
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <getLatestADC+0x54>)
 8006618:	789b      	ldrb	r3, [r3, #2]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 800661e:	f7fd fc5f 	bl	8003ee0 <getADCValues>
 8006622:	4603      	mov	r3, r0
 8006624:	603b      	str	r3, [r7, #0]
		  for(i=0;i<21;i++){
 8006626:	2300      	movs	r3, #0
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	e00c      	b.n	8006646 <getLatestADC+0x46>
	  		  displayAdcValues[i]=*(adcValuePointer+i);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	4413      	add	r3, r2
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4908      	ldr	r1, [pc, #32]	; (8006658 <getLatestADC+0x58>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	601a      	str	r2, [r3, #0]
		  for(i=0;i<21;i++){
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3301      	adds	r3, #1
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b14      	cmp	r3, #20
 800664a:	ddef      	ble.n	800662c <getLatestADC+0x2c>
		  }
	 }
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20003324 	.word	0x20003324
 8006658:	2003119c 	.word	0x2003119c

0800665c <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
	int x = i;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	617b      	str	r3, [r7, #20]
	int y = j;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	613b      	str	r3, [r7, #16]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	b298      	uxth	r0, r3
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	b299      	uxth	r1, r3
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <printFaults+0x74>)
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <printFaults+0x78>)
 800667a:	f7fb f9bb 	bl	80019f4 <LCD_PutStr>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	4413      	add	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
	int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <printFaults+0x7c>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d007      	beq.n	80066a0 <printFaults+0x44>
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <printFaults+0x7c>)
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	2b01      	cmp	r3, #1
 8006696:	d003      	beq.n	80066a0 <printFaults+0x44>
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <printFaults+0x7c>)
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <printFaults+0x48>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <printFaults+0x4a>
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
	//Add an if/else if for your project name and call the method
	if(weAreAtlas){
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <printFaults+0x5e>
		x = atlasHeaderFaults(x,y);
 80066ae:	6939      	ldr	r1, [r7, #16]
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	f00c f813 	bl	80126dc <atlasHeaderFaults>
 80066b6:	6178      	str	r0, [r7, #20]
 80066b8:	e004      	b.n	80066c4 <printFaults+0x68>
	}
	else{
		x = defaultHeaderFaults(x,y);
 80066ba:	6939      	ldr	r1, [r7, #16]
 80066bc:	6978      	ldr	r0, [r7, #20]
 80066be:	f00e f8c1 	bl	8014844 <defaultHeaderFaults>
 80066c2:	6178      	str	r0, [r7, #20]
	}
	return x;
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	0801b3c0 	.word	0x0801b3c0
 80066d4:	0801a824 	.word	0x0801a824
 80066d8:	20003328 	.word	0x20003328

080066dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <HAL_MspInit+0x4c>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	4a10      	ldr	r2, [pc, #64]	; (8006728 <HAL_MspInit+0x4c>)
 80066e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6413      	str	r3, [r2, #64]	; 0x40
 80066ee:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <HAL_MspInit+0x4c>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <HAL_MspInit+0x4c>)
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <HAL_MspInit+0x4c>)
 8006700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006704:	6453      	str	r3, [r2, #68]	; 0x44
 8006706:	4b08      	ldr	r3, [pc, #32]	; (8006728 <HAL_MspInit+0x4c>)
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006712:	2200      	movs	r2, #0
 8006714:	210f      	movs	r1, #15
 8006716:	f06f 0001 	mvn.w	r0, #1
 800671a:	f002 f9d7 	bl	8008acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40023800 	.word	0x40023800

0800672c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b094      	sub	sp, #80	; 0x50
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a91      	ldr	r2, [pc, #580]	; (8006990 <HAL_ADC_MspInit+0x264>)
 800674a:	4293      	cmp	r3, r2
 800674c:	f040 808c 	bne.w	8006868 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006750:	4b90      	ldr	r3, [pc, #576]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	4a8f      	ldr	r2, [pc, #572]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675a:	6453      	str	r3, [r2, #68]	; 0x44
 800675c:	4b8d      	ldr	r3, [pc, #564]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006764:	63bb      	str	r3, [r7, #56]	; 0x38
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006768:	4b8a      	ldr	r3, [pc, #552]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	4a89      	ldr	r2, [pc, #548]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800676e:	f043 0304 	orr.w	r3, r3, #4
 8006772:	6313      	str	r3, [r2, #48]	; 0x30
 8006774:	4b87      	ldr	r3, [pc, #540]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006780:	4b84      	ldr	r3, [pc, #528]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	4a83      	ldr	r2, [pc, #524]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	6313      	str	r3, [r2, #48]	; 0x30
 800678c:	4b81      	ldr	r3, [pc, #516]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	633b      	str	r3, [r7, #48]	; 0x30
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006798:	4b7e      	ldr	r3, [pc, #504]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	4a7d      	ldr	r2, [pc, #500]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800679e:	f043 0302 	orr.w	r3, r3, #2
 80067a2:	6313      	str	r3, [r2, #48]	; 0x30
 80067a4:	4b7b      	ldr	r3, [pc, #492]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80067a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80067b0:	230f      	movs	r3, #15
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067b4:	2303      	movs	r3, #3
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067c0:	4619      	mov	r1, r3
 80067c2:	4875      	ldr	r0, [pc, #468]	; (8006998 <HAL_ADC_MspInit+0x26c>)
 80067c4:	f002 fdb6 	bl	8009334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 80067c8:	23f8      	movs	r3, #248	; 0xf8
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067cc:	2303      	movs	r3, #3
 80067ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067d8:	4619      	mov	r1, r3
 80067da:	4870      	ldr	r0, [pc, #448]	; (800699c <HAL_ADC_MspInit+0x270>)
 80067dc:	f002 fdaa 	bl	8009334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80067e0:	2303      	movs	r3, #3
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067e4:	2303      	movs	r3, #3
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067f0:	4619      	mov	r1, r3
 80067f2:	486b      	ldr	r0, [pc, #428]	; (80069a0 <HAL_ADC_MspInit+0x274>)
 80067f4:	f002 fd9e 	bl	8009334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80067f8:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 80067fa:	4a6b      	ldr	r2, [pc, #428]	; (80069a8 <HAL_ADC_MspInit+0x27c>)
 80067fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80067fe:	4b69      	ldr	r3, [pc, #420]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006800:	2200      	movs	r2, #0
 8006802:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006804:	4b67      	ldr	r3, [pc, #412]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800680a:	4b66      	ldr	r3, [pc, #408]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 800680c:	2200      	movs	r2, #0
 800680e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006810:	4b64      	ldr	r3, [pc, #400]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006816:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006818:	4b62      	ldr	r3, [pc, #392]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 800681a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800681e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006820:	4b60      	ldr	r3, [pc, #384]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006826:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006828:	4b5e      	ldr	r3, [pc, #376]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 800682a:	2200      	movs	r2, #0
 800682c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800682e:	4b5d      	ldr	r3, [pc, #372]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006830:	2200      	movs	r2, #0
 8006832:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006834:	4b5b      	ldr	r3, [pc, #364]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006836:	2200      	movs	r2, #0
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800683a:	485a      	ldr	r0, [pc, #360]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 800683c:	f002 f970 	bl	8008b20 <HAL_DMA_Init>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8006846:	f7fe fdd7 	bl	80053f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a55      	ldr	r2, [pc, #340]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
 8006850:	4a54      	ldr	r2, [pc, #336]	; (80069a4 <HAL_ADC_MspInit+0x278>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006856:	2200      	movs	r2, #0
 8006858:	2105      	movs	r1, #5
 800685a:	2012      	movs	r0, #18
 800685c:	f002 f936 	bl	8008acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006860:	2012      	movs	r0, #18
 8006862:	f002 f94f 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006866:	e13a      	b.n	8006ade <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a4f      	ldr	r2, [pc, #316]	; (80069ac <HAL_ADC_MspInit+0x280>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f040 80a2 	bne.w	80069b8 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006874:	4b47      	ldr	r3, [pc, #284]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	4a46      	ldr	r2, [pc, #280]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800687a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800687e:	6453      	str	r3, [r2, #68]	; 0x44
 8006880:	4b44      	ldr	r3, [pc, #272]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800688c:	4b41      	ldr	r3, [pc, #260]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	4a40      	ldr	r2, [pc, #256]	; (8006994 <HAL_ADC_MspInit+0x268>)
 8006892:	f043 0304 	orr.w	r3, r3, #4
 8006896:	6313      	str	r3, [r2, #48]	; 0x30
 8006898:	4b3e      	ldr	r3, [pc, #248]	; (8006994 <HAL_ADC_MspInit+0x268>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068a4:	4b3b      	ldr	r3, [pc, #236]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	4a3a      	ldr	r2, [pc, #232]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	6313      	str	r3, [r2, #48]	; 0x30
 80068b0:	4b38      	ldr	r3, [pc, #224]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068bc:	4b35      	ldr	r3, [pc, #212]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	4a34      	ldr	r2, [pc, #208]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80068c2:	f043 0302 	orr.w	r3, r3, #2
 80068c6:	6313      	str	r3, [r2, #48]	; 0x30
 80068c8:	4b32      	ldr	r3, [pc, #200]	; (8006994 <HAL_ADC_MspInit+0x268>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 80068d4:	233f      	movs	r3, #63	; 0x3f
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068d8:	2303      	movs	r3, #3
 80068da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80068e4:	4619      	mov	r1, r3
 80068e6:	482c      	ldr	r0, [pc, #176]	; (8006998 <HAL_ADC_MspInit+0x26c>)
 80068e8:	f002 fd24 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 80068ec:	237b      	movs	r3, #123	; 0x7b
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068f0:	2303      	movs	r3, #3
 80068f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80068fc:	4619      	mov	r1, r3
 80068fe:	4827      	ldr	r0, [pc, #156]	; (800699c <HAL_ADC_MspInit+0x270>)
 8006900:	f002 fd18 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8006904:	2302      	movs	r3, #2
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006908:	2303      	movs	r3, #3
 800690a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690c:	2300      	movs	r3, #0
 800690e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8006910:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006914:	4619      	mov	r1, r3
 8006916:	4822      	ldr	r0, [pc, #136]	; (80069a0 <HAL_ADC_MspInit+0x274>)
 8006918:	f002 fd0c 	bl	8009334 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800691c:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 800691e:	4a25      	ldr	r2, [pc, #148]	; (80069b4 <HAL_ADC_MspInit+0x288>)
 8006920:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006922:	4b23      	ldr	r3, [pc, #140]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006928:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800692a:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006930:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006932:	2200      	movs	r2, #0
 8006934:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006936:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800693c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800693e:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006944:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006946:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006948:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800694c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006950:	2200      	movs	r2, #0
 8006952:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006956:	2200      	movs	r2, #0
 8006958:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 800695c:	2200      	movs	r2, #0
 800695e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006960:	4813      	ldr	r0, [pc, #76]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006962:	f002 f8dd 	bl	8008b20 <HAL_DMA_Init>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 800696c:	f7fe fd44 	bl	80053f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a0f      	ldr	r2, [pc, #60]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
 8006976:	4a0e      	ldr	r2, [pc, #56]	; (80069b0 <HAL_ADC_MspInit+0x284>)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	2105      	movs	r1, #5
 8006980:	2012      	movs	r0, #18
 8006982:	f002 f8a3 	bl	8008acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006986:	2012      	movs	r0, #18
 8006988:	f002 f8bc 	bl	8008b04 <HAL_NVIC_EnableIRQ>
}
 800698c:	e0a7      	b.n	8006ade <HAL_ADC_MspInit+0x3b2>
 800698e:	bf00      	nop
 8006990:	40012000 	.word	0x40012000
 8006994:	40023800 	.word	0x40023800
 8006998:	40020800 	.word	0x40020800
 800699c:	40020000 	.word	0x40020000
 80069a0:	40020400 	.word	0x40020400
 80069a4:	2002c0c0 	.word	0x2002c0c0
 80069a8:	40026410 	.word	0x40026410
 80069ac:	40012100 	.word	0x40012100
 80069b0:	200310d4 	.word	0x200310d4
 80069b4:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a4a      	ldr	r2, [pc, #296]	; (8006ae8 <HAL_ADC_MspInit+0x3bc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	f040 808d 	bne.w	8006ade <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80069c4:	4b49      	ldr	r3, [pc, #292]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	4a48      	ldr	r2, [pc, #288]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069ce:	6453      	str	r3, [r2, #68]	; 0x44
 80069d0:	4b46      	ldr	r3, [pc, #280]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80069dc:	4b43      	ldr	r3, [pc, #268]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	4a42      	ldr	r2, [pc, #264]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069e2:	f043 0320 	orr.w	r3, r3, #32
 80069e6:	6313      	str	r3, [r2, #48]	; 0x30
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069f4:	4b3d      	ldr	r3, [pc, #244]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	4a3c      	ldr	r2, [pc, #240]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 80069fa:	f043 0304 	orr.w	r3, r3, #4
 80069fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006a00:	4b3a      	ldr	r3, [pc, #232]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a0c:	4b37      	ldr	r3, [pc, #220]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	4a36      	ldr	r2, [pc, #216]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6313      	str	r3, [r2, #48]	; 0x30
 8006a18:	4b34      	ldr	r3, [pc, #208]	; (8006aec <HAL_ADC_MspInit+0x3c0>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8006a24:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a36:	4619      	mov	r1, r3
 8006a38:	482d      	ldr	r0, [pc, #180]	; (8006af0 <HAL_ADC_MspInit+0x3c4>)
 8006a3a:	f002 fc7b 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006a3e:	230f      	movs	r3, #15
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a42:	2303      	movs	r3, #3
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4828      	ldr	r0, [pc, #160]	; (8006af4 <HAL_ADC_MspInit+0x3c8>)
 8006a52:	f002 fc6f 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8006a56:	230c      	movs	r3, #12
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a66:	4619      	mov	r1, r3
 8006a68:	4823      	ldr	r0, [pc, #140]	; (8006af8 <HAL_ADC_MspInit+0x3cc>)
 8006a6a:	f002 fc63 	bl	8009334 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006a6e:	4b23      	ldr	r3, [pc, #140]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a70:	4a23      	ldr	r2, [pc, #140]	; (8006b00 <HAL_ADC_MspInit+0x3d4>)
 8006a72:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8006a74:	4b21      	ldr	r3, [pc, #132]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a7a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a7c:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a82:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006a88:	4b1c      	ldr	r3, [pc, #112]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a8e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a96:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a9e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006aa0:	4b16      	ldr	r3, [pc, #88]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006aac:	4b13      	ldr	r3, [pc, #76]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006ab2:	4812      	ldr	r0, [pc, #72]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006ab4:	f002 f834 	bl	8008b20 <HAL_DMA_Init>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8006abe:	f7fe fc9b 	bl	80053f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ac8:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <HAL_ADC_MspInit+0x3d0>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2105      	movs	r1, #5
 8006ad2:	2012      	movs	r0, #18
 8006ad4:	f001 fffa 	bl	8008acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006ad8:	2012      	movs	r0, #18
 8006ada:	f002 f813 	bl	8008b04 <HAL_NVIC_EnableIRQ>
}
 8006ade:	bf00      	nop
 8006ae0:	3750      	adds	r7, #80	; 0x50
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40012200 	.word	0x40012200
 8006aec:	40023800 	.word	0x40023800
 8006af0:	40021400 	.word	0x40021400
 8006af4:	40020800 	.word	0x40020800
 8006af8:	40020000 	.word	0x40020000
 8006afc:	200292e0 	.word	0x200292e0
 8006b00:	40026428 	.word	0x40026428

08006b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b090      	sub	sp, #64	; 0x40
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a6c      	ldr	r2, [pc, #432]	; (8006cd4 <HAL_I2C_MspInit+0x1d0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d129      	bne.n	8006b7a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b26:	4b6c      	ldr	r3, [pc, #432]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4a6b      	ldr	r2, [pc, #428]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b2c:	f043 0302 	orr.w	r3, r3, #2
 8006b30:	6313      	str	r3, [r2, #48]	; 0x30
 8006b32:	4b69      	ldr	r3, [pc, #420]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8006b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b44:	2312      	movs	r3, #18
 8006b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b50:	2304      	movs	r3, #4
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4860      	ldr	r0, [pc, #384]	; (8006cdc <HAL_I2C_MspInit+0x1d8>)
 8006b5c:	f002 fbea 	bl	8009334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b60:	4b5d      	ldr	r3, [pc, #372]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	4a5c      	ldr	r2, [pc, #368]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6c:	4b5a      	ldr	r3, [pc, #360]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006b78:	e0a7      	b.n	8006cca <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a58      	ldr	r2, [pc, #352]	; (8006ce0 <HAL_I2C_MspInit+0x1dc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d128      	bne.n	8006bd6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b84:	4b54      	ldr	r3, [pc, #336]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4a53      	ldr	r2, [pc, #332]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b8a:	f043 0320 	orr.w	r3, r3, #32
 8006b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b90:	4b51      	ldr	r3, [pc, #324]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ba0:	2312      	movs	r3, #18
 8006ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bac:	2304      	movs	r3, #4
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	484b      	ldr	r0, [pc, #300]	; (8006ce4 <HAL_I2C_MspInit+0x1e0>)
 8006bb8:	f002 fbbc 	bl	8009334 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006bbc:	4b46      	ldr	r3, [pc, #280]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	4a45      	ldr	r2, [pc, #276]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006bc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc8:	4b43      	ldr	r3, [pc, #268]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
}
 8006bd4:	e079      	b.n	8006cca <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a43      	ldr	r2, [pc, #268]	; (8006ce8 <HAL_I2C_MspInit+0x1e4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d146      	bne.n	8006c6e <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006be0:	4b3d      	ldr	r3, [pc, #244]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	4a3c      	ldr	r2, [pc, #240]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006be6:	f043 0304 	orr.w	r3, r3, #4
 8006bea:	6313      	str	r3, [r2, #48]	; 0x30
 8006bec:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bf8:	4b37      	ldr	r3, [pc, #220]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	4a36      	ldr	r2, [pc, #216]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	6313      	str	r3, [r2, #48]	; 0x30
 8006c04:	4b34      	ldr	r3, [pc, #208]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8006c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c16:	2312      	movs	r3, #18
 8006c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c22:	2304      	movs	r3, #4
 8006c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8006c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	482f      	ldr	r0, [pc, #188]	; (8006cec <HAL_I2C_MspInit+0x1e8>)
 8006c2e:	f002 fb81 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8006c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c38:	2312      	movs	r3, #18
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c40:	2303      	movs	r3, #3
 8006c42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c44:	2304      	movs	r3, #4
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8006c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4828      	ldr	r0, [pc, #160]	; (8006cf0 <HAL_I2C_MspInit+0x1ec>)
 8006c50:	f002 fb70 	bl	8009334 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006c54:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	693b      	ldr	r3, [r7, #16]
}
 8006c6c:	e02d      	b.n	8006cca <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a20      	ldr	r2, [pc, #128]	; (8006cf4 <HAL_I2C_MspInit+0x1f0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d128      	bne.n	8006cca <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006c78:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c7e:	f043 0320 	orr.w	r3, r3, #32
 8006c82:	6313      	str	r3, [r2, #48]	; 0x30
 8006c84:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8006c90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c96:	2312      	movs	r3, #18
 8006c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006caa:	4619      	mov	r1, r3
 8006cac:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <HAL_I2C_MspInit+0x1e0>)
 8006cae:	f002 fb41 	bl	8009334 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <HAL_I2C_MspInit+0x1d4>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
}
 8006cca:	bf00      	nop
 8006ccc:	3740      	adds	r7, #64	; 0x40
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40005400 	.word	0x40005400
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40020400 	.word	0x40020400
 8006ce0:	40005800 	.word	0x40005800
 8006ce4:	40021400 	.word	0x40021400
 8006ce8:	40005c00 	.word	0x40005c00
 8006cec:	40020800 	.word	0x40020800
 8006cf0:	40020000 	.word	0x40020000
 8006cf4:	40006000 	.word	0x40006000

08006cf8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <HAL_RTC_MspInit+0x2c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d105      	bne.n	8006d16 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <HAL_RTC_MspInit+0x30>)
 8006d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0e:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <HAL_RTC_MspInit+0x30>)
 8006d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d14:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40002800 	.word	0x40002800
 8006d28:	40023800 	.word	0x40023800

08006d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d34:	f107 031c 	add.w	r3, r7, #28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <HAL_SPI_MspInit+0x120>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d130      	bne.n	8006db0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006d4e:	4b40      	ldr	r3, [pc, #256]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	4a3f      	ldr	r2, [pc, #252]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006d54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d58:	6453      	str	r3, [r2, #68]	; 0x44
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d66:	4b3a      	ldr	r3, [pc, #232]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	4a39      	ldr	r2, [pc, #228]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006d6c:	f043 0310 	orr.w	r3, r3, #16
 8006d70:	6313      	str	r3, [r2, #48]	; 0x30
 8006d72:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006d7e:	2364      	movs	r3, #100	; 0x64
 8006d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d82:	2302      	movs	r3, #2
 8006d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006d8e:	2305      	movs	r3, #5
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d92:	f107 031c 	add.w	r3, r7, #28
 8006d96:	4619      	mov	r1, r3
 8006d98:	482e      	ldr	r0, [pc, #184]	; (8006e54 <HAL_SPI_MspInit+0x128>)
 8006d9a:	f002 facb 	bl	8009334 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2105      	movs	r1, #5
 8006da2:	2054      	movs	r0, #84	; 0x54
 8006da4:	f001 fe92 	bl	8008acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006da8:	2054      	movs	r0, #84	; 0x54
 8006daa:	f001 feab 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006dae:	e049      	b.n	8006e44 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <HAL_SPI_MspInit+0x12c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d144      	bne.n	8006e44 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006dba:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	4a24      	ldr	r2, [pc, #144]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8006dc6:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006dd2:	4b1f      	ldr	r3, [pc, #124]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dde:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dea:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006df0:	f043 0320 	orr.w	r3, r3, #32
 8006df4:	6313      	str	r3, [r2, #48]	; 0x30
 8006df6:	4b16      	ldr	r3, [pc, #88]	; (8006e50 <HAL_SPI_MspInit+0x124>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	60bb      	str	r3, [r7, #8]
 8006e00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8006e02:	23e0      	movs	r3, #224	; 0xe0
 8006e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e06:	2302      	movs	r3, #2
 8006e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006e12:	2305      	movs	r3, #5
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006e16:	f107 031c 	add.w	r3, r7, #28
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	480f      	ldr	r0, [pc, #60]	; (8006e5c <HAL_SPI_MspInit+0x130>)
 8006e1e:	f002 fa89 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8006e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e30:	2303      	movs	r3, #3
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006e34:	2305      	movs	r3, #5
 8006e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8006e38:	f107 031c 	add.w	r3, r7, #28
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4808      	ldr	r0, [pc, #32]	; (8006e60 <HAL_SPI_MspInit+0x134>)
 8006e40:	f002 fa78 	bl	8009334 <HAL_GPIO_Init>
}
 8006e44:	bf00      	nop
 8006e46:	3730      	adds	r7, #48	; 0x30
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40023800 	.word	0x40023800
 8006e54:	40021000 	.word	0x40021000
 8006e58:	40015000 	.word	0x40015000
 8006e5c:	40021c00 	.word	0x40021c00
 8006e60:	40021400 	.word	0x40021400

08006e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a13      	ldr	r2, [pc, #76]	; (8006ec0 <HAL_TIM_Base_MspInit+0x5c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d10c      	bne.n	8006e90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006e76:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <HAL_TIM_Base_MspInit+0x60>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <HAL_TIM_Base_MspInit+0x60>)
 8006e7c:	f043 0304 	orr.w	r3, r3, #4
 8006e80:	6413      	str	r3, [r2, #64]	; 0x40
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <HAL_TIM_Base_MspInit+0x60>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006e8e:	e010      	b.n	8006eb2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <HAL_TIM_Base_MspInit+0x64>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d10b      	bne.n	8006eb2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006e9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <HAL_TIM_Base_MspInit+0x60>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <HAL_TIM_Base_MspInit+0x60>)
 8006ea0:	f043 0308 	orr.w	r3, r3, #8
 8006ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <HAL_TIM_Base_MspInit+0x60>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	60bb      	str	r3, [r7, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
}
 8006eb2:	bf00      	nop
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40000800 	.word	0x40000800
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40000c00 	.word	0x40000c00

08006ecc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	; 0x28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	609a      	str	r2, [r3, #8]
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a22      	ldr	r2, [pc, #136]	; (8006f74 <HAL_TIM_MspPostInit+0xa8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d11c      	bne.n	8006f28 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eee:	4b22      	ldr	r3, [pc, #136]	; (8006f78 <HAL_TIM_MspPostInit+0xac>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <HAL_TIM_MspPostInit+0xac>)
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8006efa:	4b1f      	ldr	r3, [pc, #124]	; (8006f78 <HAL_TIM_MspPostInit+0xac>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8006f06:	2340      	movs	r3, #64	; 0x40
 8006f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f12:	2300      	movs	r3, #0
 8006f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006f16:	2302      	movs	r3, #2
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8006f1a:	f107 0314 	add.w	r3, r7, #20
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4816      	ldr	r0, [pc, #88]	; (8006f7c <HAL_TIM_MspPostInit+0xb0>)
 8006f22:	f002 fa07 	bl	8009334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006f26:	e021      	b.n	8006f6c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <HAL_TIM_MspPostInit+0xb4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d11c      	bne.n	8006f6c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f32:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <HAL_TIM_MspPostInit+0xac>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <HAL_TIM_MspPostInit+0xac>)
 8006f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <HAL_TIM_MspPostInit+0xac>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8006f4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f50:	2302      	movs	r3, #2
 8006f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006f60:	f107 0314 	add.w	r3, r7, #20
 8006f64:	4619      	mov	r1, r3
 8006f66:	4807      	ldr	r0, [pc, #28]	; (8006f84 <HAL_TIM_MspPostInit+0xb8>)
 8006f68:	f002 f9e4 	bl	8009334 <HAL_GPIO_Init>
}
 8006f6c:	bf00      	nop
 8006f6e:	3728      	adds	r7, #40	; 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40020400 	.word	0x40020400
 8006f80:	40000c00 	.word	0x40000c00
 8006f84:	40021c00 	.word	0x40021c00

08006f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08e      	sub	sp, #56	; 0x38
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	605a      	str	r2, [r3, #4]
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a9b      	ldr	r2, [pc, #620]	; (8007214 <HAL_UART_MspInit+0x28c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d158      	bne.n	800705c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006faa:	4b9b      	ldr	r3, [pc, #620]	; (8007218 <HAL_UART_MspInit+0x290>)
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	4a9a      	ldr	r2, [pc, #616]	; (8007218 <HAL_UART_MspInit+0x290>)
 8006fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb6:	4b98      	ldr	r3, [pc, #608]	; (8007218 <HAL_UART_MspInit+0x290>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fbe:	623b      	str	r3, [r7, #32]
 8006fc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fc2:	4b95      	ldr	r3, [pc, #596]	; (8007218 <HAL_UART_MspInit+0x290>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4a94      	ldr	r2, [pc, #592]	; (8007218 <HAL_UART_MspInit+0x290>)
 8006fc8:	f043 0304 	orr.w	r3, r3, #4
 8006fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fce:	4b92      	ldr	r3, [pc, #584]	; (8007218 <HAL_UART_MspInit+0x290>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8006fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006fec:	2308      	movs	r3, #8
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4889      	ldr	r0, [pc, #548]	; (800721c <HAL_UART_MspInit+0x294>)
 8006ff8:	f002 f99c 	bl	8009334 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006ffc:	4b88      	ldr	r3, [pc, #544]	; (8007220 <HAL_UART_MspInit+0x298>)
 8006ffe:	4a89      	ldr	r2, [pc, #548]	; (8007224 <HAL_UART_MspInit+0x29c>)
 8007000:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8007002:	4b87      	ldr	r3, [pc, #540]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007008:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800700a:	4b85      	ldr	r3, [pc, #532]	; (8007220 <HAL_UART_MspInit+0x298>)
 800700c:	2200      	movs	r2, #0
 800700e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007010:	4b83      	ldr	r3, [pc, #524]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007012:	2200      	movs	r2, #0
 8007014:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007016:	4b82      	ldr	r3, [pc, #520]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800701c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800701e:	4b80      	ldr	r3, [pc, #512]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007020:	2200      	movs	r2, #0
 8007022:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007024:	4b7e      	ldr	r3, [pc, #504]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007026:	2200      	movs	r2, #0
 8007028:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800702a:	4b7d      	ldr	r3, [pc, #500]	; (8007220 <HAL_UART_MspInit+0x298>)
 800702c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007030:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007032:	4b7b      	ldr	r3, [pc, #492]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007034:	2200      	movs	r2, #0
 8007036:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007038:	4b79      	ldr	r3, [pc, #484]	; (8007220 <HAL_UART_MspInit+0x298>)
 800703a:	2200      	movs	r2, #0
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800703e:	4878      	ldr	r0, [pc, #480]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007040:	f001 fd6e 	bl	8008b20 <HAL_DMA_Init>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800704a:	f7fe f9d5 	bl	80053f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a73      	ldr	r2, [pc, #460]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007052:	66da      	str	r2, [r3, #108]	; 0x6c
 8007054:	4a72      	ldr	r2, [pc, #456]	; (8007220 <HAL_UART_MspInit+0x298>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800705a:	e0d6      	b.n	800720a <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART5)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a71      	ldr	r2, [pc, #452]	; (8007228 <HAL_UART_MspInit+0x2a0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d174      	bne.n	8007150 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007066:	4b6c      	ldr	r3, [pc, #432]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	4a6b      	ldr	r2, [pc, #428]	; (8007218 <HAL_UART_MspInit+0x290>)
 800706c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007070:	6413      	str	r3, [r2, #64]	; 0x40
 8007072:	4b69      	ldr	r3, [pc, #420]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800707e:	4b66      	ldr	r3, [pc, #408]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007084:	f043 0304 	orr.w	r3, r3, #4
 8007088:	6313      	str	r3, [r2, #48]	; 0x30
 800708a:	4b63      	ldr	r3, [pc, #396]	; (8007218 <HAL_UART_MspInit+0x290>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007096:	4b60      	ldr	r3, [pc, #384]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	4a5f      	ldr	r2, [pc, #380]	; (8007218 <HAL_UART_MspInit+0x290>)
 800709c:	f043 0308 	orr.w	r3, r3, #8
 80070a0:	6313      	str	r3, [r2, #48]	; 0x30
 80070a2:	4b5d      	ldr	r3, [pc, #372]	; (8007218 <HAL_UART_MspInit+0x290>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 80070ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b4:	2302      	movs	r3, #2
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070bc:	2303      	movs	r3, #3
 80070be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80070c0:	2308      	movs	r3, #8
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 80070c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070c8:	4619      	mov	r1, r3
 80070ca:	4854      	ldr	r0, [pc, #336]	; (800721c <HAL_UART_MspInit+0x294>)
 80070cc:	f002 f932 	bl	8009334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 80070d0:	2304      	movs	r3, #4
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d4:	2302      	movs	r3, #2
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070dc:	2303      	movs	r3, #3
 80070de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80070e0:	2308      	movs	r3, #8
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 80070e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e8:	4619      	mov	r1, r3
 80070ea:	4850      	ldr	r0, [pc, #320]	; (800722c <HAL_UART_MspInit+0x2a4>)
 80070ec:	f002 f922 	bl	8009334 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80070f0:	4b4f      	ldr	r3, [pc, #316]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 80070f2:	4a50      	ldr	r2, [pc, #320]	; (8007234 <HAL_UART_MspInit+0x2ac>)
 80070f4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80070f6:	4b4e      	ldr	r3, [pc, #312]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 80070f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070fc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070fe:	4b4c      	ldr	r3, [pc, #304]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007100:	2200      	movs	r2, #0
 8007102:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007104:	4b4a      	ldr	r3, [pc, #296]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007106:	2200      	movs	r2, #0
 8007108:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800710a:	4b49      	ldr	r3, [pc, #292]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 800710c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007110:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007112:	4b47      	ldr	r3, [pc, #284]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007114:	2200      	movs	r2, #0
 8007116:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007118:	4b45      	ldr	r3, [pc, #276]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 800711a:	2200      	movs	r2, #0
 800711c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800711e:	4b44      	ldr	r3, [pc, #272]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007124:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007126:	4b42      	ldr	r3, [pc, #264]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007128:	2200      	movs	r2, #0
 800712a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800712c:	4b40      	ldr	r3, [pc, #256]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 800712e:	2200      	movs	r2, #0
 8007130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007132:	483f      	ldr	r0, [pc, #252]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007134:	f001 fcf4 	bl	8008b20 <HAL_DMA_Init>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800713e:	f7fe f95b 	bl	80053f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a3a      	ldr	r2, [pc, #232]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 8007146:	66da      	str	r2, [r3, #108]	; 0x6c
 8007148:	4a39      	ldr	r2, [pc, #228]	; (8007230 <HAL_UART_MspInit+0x2a8>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800714e:	e05c      	b.n	800720a <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART7)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a38      	ldr	r2, [pc, #224]	; (8007238 <HAL_UART_MspInit+0x2b0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d157      	bne.n	800720a <HAL_UART_MspInit+0x282>
    __HAL_RCC_UART7_CLK_ENABLE();
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <HAL_UART_MspInit+0x290>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	4a2e      	ldr	r2, [pc, #184]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007164:	6413      	str	r3, [r2, #64]	; 0x40
 8007166:	4b2c      	ldr	r3, [pc, #176]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007172:	4b29      	ldr	r3, [pc, #164]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	4a28      	ldr	r2, [pc, #160]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007178:	f043 0310 	orr.w	r3, r3, #16
 800717c:	6313      	str	r3, [r2, #48]	; 0x30
 800717e:	4b26      	ldr	r3, [pc, #152]	; (8007218 <HAL_UART_MspInit+0x290>)
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	f003 0310 	and.w	r3, r3, #16
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 800718a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007190:	2302      	movs	r3, #2
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007194:	2300      	movs	r3, #0
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007198:	2303      	movs	r3, #3
 800719a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800719c:	2308      	movs	r3, #8
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a4:	4619      	mov	r1, r3
 80071a6:	4825      	ldr	r0, [pc, #148]	; (800723c <HAL_UART_MspInit+0x2b4>)
 80071a8:	f002 f8c4 	bl	8009334 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80071ac:	4b24      	ldr	r3, [pc, #144]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071ae:	4a25      	ldr	r2, [pc, #148]	; (8007244 <HAL_UART_MspInit+0x2bc>)
 80071b0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80071b2:	4b23      	ldr	r3, [pc, #140]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071b4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80071b8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071ba:	4b21      	ldr	r3, [pc, #132]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071bc:	2200      	movs	r2, #0
 80071be:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071c0:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071c6:	4b1e      	ldr	r3, [pc, #120]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071cc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071ce:	4b1c      	ldr	r3, [pc, #112]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071d4:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80071da:	4b19      	ldr	r3, [pc, #100]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071e0:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80071e2:	4b17      	ldr	r3, [pc, #92]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80071ee:	4814      	ldr	r0, [pc, #80]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 80071f0:	f001 fc96 	bl	8008b20 <HAL_DMA_Init>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_UART_MspInit+0x276>
      Error_Handler();
 80071fa:	f7fe f8fd 	bl	80053f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 8007202:	66da      	str	r2, [r3, #108]	; 0x6c
 8007204:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <HAL_UART_MspInit+0x2b8>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6393      	str	r3, [r2, #56]	; 0x38
}
 800720a:	bf00      	nop
 800720c:	3738      	adds	r7, #56	; 0x38
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40004c00 	.word	0x40004c00
 8007218:	40023800 	.word	0x40023800
 800721c:	40020800 	.word	0x40020800
 8007220:	20028bcc 	.word	0x20028bcc
 8007224:	40026040 	.word	0x40026040
 8007228:	40005000 	.word	0x40005000
 800722c:	40020c00 	.word	0x40020c00
 8007230:	20031134 	.word	0x20031134
 8007234:	40026010 	.word	0x40026010
 8007238:	40007800 	.word	0x40007800
 800723c:	40021000 	.word	0x40021000
 8007240:	2002bf48 	.word	0x2002bf48
 8007244:	40026058 	.word	0x40026058

08007248 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007268:	d134      	bne.n	80072d4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800726a:	4b1c      	ldr	r3, [pc, #112]	; (80072dc <HAL_PCD_MspInit+0x94>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <HAL_PCD_MspInit+0x94>)
 8007270:	f043 0301 	orr.w	r3, r3, #1
 8007274:	6313      	str	r3, [r2, #48]	; 0x30
 8007276:	4b19      	ldr	r3, [pc, #100]	; (80072dc <HAL_PCD_MspInit+0x94>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8007282:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007288:	2302      	movs	r3, #2
 800728a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007290:	2303      	movs	r3, #3
 8007292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007294:	230a      	movs	r3, #10
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007298:	f107 0314 	add.w	r3, r7, #20
 800729c:	4619      	mov	r1, r3
 800729e:	4810      	ldr	r0, [pc, #64]	; (80072e0 <HAL_PCD_MspInit+0x98>)
 80072a0:	f002 f848 	bl	8009334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <HAL_PCD_MspInit+0x94>)
 80072a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a8:	4a0c      	ldr	r2, [pc, #48]	; (80072dc <HAL_PCD_MspInit+0x94>)
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	6353      	str	r3, [r2, #52]	; 0x34
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <HAL_PCD_MspInit+0x94>)
 80072b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4b07      	ldr	r3, [pc, #28]	; (80072dc <HAL_PCD_MspInit+0x94>)
 80072be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c0:	4a06      	ldr	r2, [pc, #24]	; (80072dc <HAL_PCD_MspInit+0x94>)
 80072c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072c6:	6453      	str	r3, [r2, #68]	; 0x44
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <HAL_PCD_MspInit+0x94>)
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80072d4:	bf00      	nop
 80072d6:	3728      	adds	r7, #40	; 0x28
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40023800 	.word	0x40023800
 80072e0:	40020000 	.word	0x40020000

080072e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	; 0x30
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80072f4:	2200      	movs	r2, #0
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	2036      	movs	r0, #54	; 0x36
 80072fa:	f001 fbe7 	bl	8008acc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80072fe:	2036      	movs	r0, #54	; 0x36
 8007300:	f001 fc00 	bl	8008b04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007304:	4b1f      	ldr	r3, [pc, #124]	; (8007384 <HAL_InitTick+0xa0>)
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	4a1e      	ldr	r2, [pc, #120]	; (8007384 <HAL_InitTick+0xa0>)
 800730a:	f043 0310 	orr.w	r3, r3, #16
 800730e:	6413      	str	r3, [r2, #64]	; 0x40
 8007310:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <HAL_InitTick+0xa0>)
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800731c:	f107 0210 	add.w	r2, r7, #16
 8007320:	f107 0314 	add.w	r3, r7, #20
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f003 ff84 	bl	800b234 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800732c:	f003 ff5a 	bl	800b1e4 <HAL_RCC_GetPCLK1Freq>
 8007330:	4603      	mov	r3, r0
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <HAL_InitTick+0xa4>)
 800733a:	fba2 2303 	umull	r2, r3, r2, r3
 800733e:	0c9b      	lsrs	r3, r3, #18
 8007340:	3b01      	subs	r3, #1
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007344:	4b11      	ldr	r3, [pc, #68]	; (800738c <HAL_InitTick+0xa8>)
 8007346:	4a12      	ldr	r2, [pc, #72]	; (8007390 <HAL_InitTick+0xac>)
 8007348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <HAL_InitTick+0xa8>)
 800734c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007352:	4a0e      	ldr	r2, [pc, #56]	; (800738c <HAL_InitTick+0xa8>)
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <HAL_InitTick+0xa8>)
 800735a:	2200      	movs	r2, #0
 800735c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_InitTick+0xa8>)
 8007360:	2200      	movs	r2, #0
 8007362:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007364:	4809      	ldr	r0, [pc, #36]	; (800738c <HAL_InitTick+0xa8>)
 8007366:	f005 f899 	bl	800c49c <HAL_TIM_Base_Init>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007370:	4806      	ldr	r0, [pc, #24]	; (800738c <HAL_InitTick+0xa8>)
 8007372:	f005 f8bf 	bl	800c4f4 <HAL_TIM_Base_Start_IT>
 8007376:	4603      	mov	r3, r0
 8007378:	e000      	b.n	800737c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
}
 800737c:	4618      	mov	r0, r3
 800737e:	3730      	adds	r7, #48	; 0x30
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	431bde83 	.word	0x431bde83
 800738c:	200311f0 	.word	0x200311f0
 8007390:	40001000 	.word	0x40001000

08007394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007398:	e7fe      	b.n	8007398 <NMI_Handler+0x4>

0800739a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800739e:	e7fe      	b.n	800739e <HardFault_Handler+0x4>

080073a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073a4:	e7fe      	b.n	80073a4 <MemManage_Handler+0x4>

080073a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073aa:	e7fe      	b.n	80073aa <BusFault_Handler+0x4>

080073ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073b0:	e7fe      	b.n	80073b0 <UsageFault_Handler+0x4>

080073b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073b2:	b480      	push	{r7}
 80073b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 80073c6:	f000 fced 	bl	8007da4 <HAL_GetTick>
 80073ca:	4603      	mov	r3, r0
 80073cc:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 80073ce:	4b10      	ldr	r3, [pc, #64]	; (8007410 <EXTI4_IRQHandler+0x50>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80073d8:	2010      	movs	r0, #16
 80073da:	f002 f9a3 	bl	8009724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <EXTI4_IRQHandler+0x54>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <EXTI4_IRQHandler+0x58>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	dd07      	ble.n	80073fc <EXTI4_IRQHandler+0x3c>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b96      	cmp	r3, #150	; 0x96
 80073f0:	dd04      	ble.n	80073fc <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <EXTI4_IRQHandler+0x58>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <EXTI4_IRQHandler+0x54>)
 80073fa:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 80073fc:	f000 fcd2 	bl	8007da4 <HAL_GetTick>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <EXTI4_IRQHandler+0x50>)
 8007406:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20003434 	.word	0x20003434
 8007414:	200000b8 	.word	0x200000b8
 8007418:	20000138 	.word	0x20000138

0800741c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007420:	4802      	ldr	r0, [pc, #8]	; (800742c <DMA1_Stream0_IRQHandler+0x10>)
 8007422:	f001 fd1d 	bl	8008e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007426:	bf00      	nop
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20031134 	.word	0x20031134

08007430 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8007434:	4802      	ldr	r0, [pc, #8]	; (8007440 <DMA1_Stream2_IRQHandler+0x10>)
 8007436:	f001 fd13 	bl	8008e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800743a:	bf00      	nop
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20028bcc 	.word	0x20028bcc

08007444 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8007448:	4802      	ldr	r0, [pc, #8]	; (8007454 <DMA1_Stream3_IRQHandler+0x10>)
 800744a:	f001 fd09 	bl	8008e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	2002bf48 	.word	0x2002bf48

08007458 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800745c:	4805      	ldr	r0, [pc, #20]	; (8007474 <ADC_IRQHandler+0x1c>)
 800745e:	f000 fd15 	bl	8007e8c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8007462:	4805      	ldr	r0, [pc, #20]	; (8007478 <ADC_IRQHandler+0x20>)
 8007464:	f000 fd12 	bl	8007e8c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8007468:	4804      	ldr	r0, [pc, #16]	; (800747c <ADC_IRQHandler+0x24>)
 800746a:	f000 fd0f 	bl	8007e8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800746e:	bf00      	nop
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	2002bf00 	.word	0x2002bf00
 8007478:	20028dfc 	.word	0x20028dfc
 800747c:	2002bfac 	.word	0x2002bfac

08007480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 8007486:	f000 fc8d 	bl	8007da4 <HAL_GetTick>
 800748a:	4603      	mov	r3, r0
 800748c:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 800748e:	4b2c      	ldr	r3, [pc, #176]	; (8007540 <EXTI9_5_IRQHandler+0xc0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	603b      	str	r3, [r7, #0]
	//buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
	//buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
	//buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 8007498:	4b2a      	ldr	r3, [pc, #168]	; (8007544 <EXTI9_5_IRQHandler+0xc4>)
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00f      	beq.n	80074c4 <EXTI9_5_IRQHandler+0x44>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b96      	cmp	r3, #150	; 0x96
 80074a8:	dd0c      	ble.n	80074c4 <EXTI9_5_IRQHandler+0x44>
		if(inputButtonSet > buttonPriority.up){
 80074aa:	4b27      	ldr	r3, [pc, #156]	; (8007548 <EXTI9_5_IRQHandler+0xc8>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	4b26      	ldr	r3, [pc, #152]	; (800754c <EXTI9_5_IRQHandler+0xcc>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	dd30      	ble.n	800751a <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 80074b8:	4b24      	ldr	r3, [pc, #144]	; (800754c <EXTI9_5_IRQHandler+0xcc>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4b22      	ldr	r3, [pc, #136]	; (8007548 <EXTI9_5_IRQHandler+0xc8>)
 80074c0:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 80074c2:	e02a      	b.n	800751a <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 80074c4:	4b1f      	ldr	r3, [pc, #124]	; (8007544 <EXTI9_5_IRQHandler+0xc4>)
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00f      	beq.n	80074f0 <EXTI9_5_IRQHandler+0x70>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b96      	cmp	r3, #150	; 0x96
 80074d4:	dd0c      	ble.n	80074f0 <EXTI9_5_IRQHandler+0x70>
		if(inputButtonSet > buttonPriority.sel){
 80074d6:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <EXTI9_5_IRQHandler+0xc8>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	4b1b      	ldr	r3, [pc, #108]	; (800754c <EXTI9_5_IRQHandler+0xcc>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	dd1a      	ble.n	800751a <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 80074e4:	4b19      	ldr	r3, [pc, #100]	; (800754c <EXTI9_5_IRQHandler+0xcc>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b17      	ldr	r3, [pc, #92]	; (8007548 <EXTI9_5_IRQHandler+0xc8>)
 80074ec:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 80074ee:	e014      	b.n	800751a <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 80074f0:	4b14      	ldr	r3, [pc, #80]	; (8007544 <EXTI9_5_IRQHandler+0xc4>)
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00e      	beq.n	800751a <EXTI9_5_IRQHandler+0x9a>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b96      	cmp	r3, #150	; 0x96
 8007500:	dd0b      	ble.n	800751a <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <EXTI9_5_IRQHandler+0xc8>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	4b10      	ldr	r3, [pc, #64]	; (800754c <EXTI9_5_IRQHandler+0xcc>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	dd04      	ble.n	800751a <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <EXTI9_5_IRQHandler+0xcc>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	b2da      	uxtb	r2, r3
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <EXTI9_5_IRQHandler+0xc8>)
 8007518:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800751a:	2020      	movs	r0, #32
 800751c:	f002 f902 	bl	8009724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007520:	2040      	movs	r0, #64	; 0x40
 8007522:	f002 f8ff 	bl	8009724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007526:	2080      	movs	r0, #128	; 0x80
 8007528:	f002 f8fc 	bl	8009724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 800752c:	f000 fc3a 	bl	8007da4 <HAL_GetTick>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <EXTI9_5_IRQHandler+0xc0>)
 8007536:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20003434 	.word	0x20003434
 8007544:	40013c00 	.word	0x40013c00
 8007548:	200000b8 	.word	0x200000b8
 800754c:	20000138 	.word	0x20000138

08007550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007554:	4802      	ldr	r0, [pc, #8]	; (8007560 <TIM6_DAC_IRQHandler+0x10>)
 8007556:	f005 f82c 	bl	800c5b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200311f0 	.word	0x200311f0

08007564 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007568:	4805      	ldr	r0, [pc, #20]	; (8007580 <DMA2_Stream0_IRQHandler+0x1c>)
 800756a:	f001 fc79 	bl	8008e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800756e:	4805      	ldr	r0, [pc, #20]	; (8007584 <DMA2_Stream0_IRQHandler+0x20>)
 8007570:	f000 febc 	bl	80082ec <HAL_ADC_Stop_DMA>
  adcStates.adcBank1Finished=1;
 8007574:	4b04      	ldr	r3, [pc, #16]	; (8007588 <DMA2_Stream0_IRQHandler+0x24>)
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2002c0c0 	.word	0x2002c0c0
 8007584:	2002bf00 	.word	0x2002bf00
 8007588:	20003324 	.word	0x20003324

0800758c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007590:	4805      	ldr	r0, [pc, #20]	; (80075a8 <DMA2_Stream1_IRQHandler+0x1c>)
 8007592:	f001 fc65 	bl	8008e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8007596:	4805      	ldr	r0, [pc, #20]	; (80075ac <DMA2_Stream1_IRQHandler+0x20>)
 8007598:	f000 fea8 	bl	80082ec <HAL_ADC_Stop_DMA>
  adcStates.adcBank3Finished=1;
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <DMA2_Stream1_IRQHandler+0x24>)
 800759e:	2201      	movs	r2, #1
 80075a0:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80075a2:	bf00      	nop
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200292e0 	.word	0x200292e0
 80075ac:	2002bfac 	.word	0x2002bfac
 80075b0:	20003324 	.word	0x20003324

080075b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80075b8:	4805      	ldr	r0, [pc, #20]	; (80075d0 <DMA2_Stream2_IRQHandler+0x1c>)
 80075ba:	f001 fc51 	bl	8008e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 80075be:	4805      	ldr	r0, [pc, #20]	; (80075d4 <DMA2_Stream2_IRQHandler+0x20>)
 80075c0:	f000 fe94 	bl	80082ec <HAL_ADC_Stop_DMA>
  adcStates.adcBank2Finished=1;
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <DMA2_Stream2_IRQHandler+0x24>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80075ca:	bf00      	nop
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200310d4 	.word	0x200310d4
 80075d4:	20028dfc 	.word	0x20028dfc
 80075d8:	20003324 	.word	0x20003324

080075dc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80075e0:	4802      	ldr	r0, [pc, #8]	; (80075ec <SPI4_IRQHandler+0x10>)
 80075e2:	f004 fd1f 	bl	800c024 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20028b68 	.word	0x20028b68

080075f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
	return 1;
 80075f4:	2301      	movs	r3, #1
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <_kill>:

int _kill(int pid, int sig)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800760a:	f00e fb75 	bl	8015cf8 <__errno>
 800760e:	4603      	mov	r3, r0
 8007610:	2216      	movs	r2, #22
 8007612:	601a      	str	r2, [r3, #0]
	return -1;
 8007614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <_exit>:

void _exit (int status)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007628:	f04f 31ff 	mov.w	r1, #4294967295
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff ffe7 	bl	8007600 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007632:	e7fe      	b.n	8007632 <_exit+0x12>

08007634 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007640:	2300      	movs	r3, #0
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e00a      	b.n	800765c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007646:	f3af 8000 	nop.w
 800764a:	4601      	mov	r1, r0
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	60ba      	str	r2, [r7, #8]
 8007652:	b2ca      	uxtb	r2, r1
 8007654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	3301      	adds	r3, #1
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	dbf0      	blt.n	8007646 <_read+0x12>
	}

return len;
 8007664:	687b      	ldr	r3, [r7, #4]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	e009      	b.n	8007694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	60ba      	str	r2, [r7, #8]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f7fb ff51 	bl	8003530 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	3301      	adds	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	dbf1      	blt.n	8007680 <_write+0x12>
	}
	return len;
 800769c:	687b      	ldr	r3, [r7, #4]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <_close>:

int _close(int file)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
	return -1;
 80076ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076ce:	605a      	str	r2, [r3, #4]
	return 0;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <_isatty>:

int _isatty(int file)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
	return 1;
 80076e6:	2301      	movs	r3, #1
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
	return 0;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <_sbrk+0x5c>)
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <_sbrk+0x60>)
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007724:	4b13      	ldr	r3, [pc, #76]	; (8007774 <_sbrk+0x64>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800772c:	4b11      	ldr	r3, [pc, #68]	; (8007774 <_sbrk+0x64>)
 800772e:	4a12      	ldr	r2, [pc, #72]	; (8007778 <_sbrk+0x68>)
 8007730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <_sbrk+0x64>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	429a      	cmp	r2, r3
 800773e:	d207      	bcs.n	8007750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007740:	f00e fada 	bl	8015cf8 <__errno>
 8007744:	4603      	mov	r3, r0
 8007746:	220c      	movs	r2, #12
 8007748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295
 800774e:	e009      	b.n	8007764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <_sbrk+0x64>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007756:	4b07      	ldr	r3, [pc, #28]	; (8007774 <_sbrk+0x64>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	4a05      	ldr	r2, [pc, #20]	; (8007774 <_sbrk+0x64>)
 8007760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20080000 	.word	0x20080000
 8007770:	00000400 	.word	0x00000400
 8007774:	20003438 	.word	0x20003438
 8007778:	20031288 	.word	0x20031288

0800777c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <SystemInit+0x28>)
 8007782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007786:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <SystemInit+0x28>)
 8007788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800778c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <SystemInit+0x28>)
 8007792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007796:	609a      	str	r2, [r3, #8]
#endif
}
 8007798:	bf00      	nop
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	e000ed00 	.word	0xe000ed00

080077a8 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 80077ac:	220c      	movs	r2, #12
 80077ae:	2100      	movs	r1, #0
 80077b0:	4814      	ldr	r0, [pc, #80]	; (8007804 <zionEEPROMPresence+0x5c>)
 80077b2:	f00e fad9 	bl	8015d68 <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 80077b6:	2364      	movs	r3, #100	; 0x64
 80077b8:	2202      	movs	r2, #2
 80077ba:	21a6      	movs	r1, #166	; 0xa6
 80077bc:	4812      	ldr	r0, [pc, #72]	; (8007808 <zionEEPROMPresence+0x60>)
 80077be:	f002 fb69 	bl	8009e94 <HAL_I2C_IsDeviceReady>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 80077c8:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <zionEEPROMPresence+0x5c>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 80077ce:	2364      	movs	r3, #100	; 0x64
 80077d0:	2202      	movs	r2, #2
 80077d2:	21a8      	movs	r1, #168	; 0xa8
 80077d4:	480c      	ldr	r0, [pc, #48]	; (8007808 <zionEEPROMPresence+0x60>)
 80077d6:	f002 fb5d 	bl	8009e94 <HAL_I2C_IsDeviceReady>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <zionEEPROMPresence+0x5c>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 80077e6:	2364      	movs	r3, #100	; 0x64
 80077e8:	2202      	movs	r2, #2
 80077ea:	21aa      	movs	r1, #170	; 0xaa
 80077ec:	4806      	ldr	r0, [pc, #24]	; (8007808 <zionEEPROMPresence+0x60>)
 80077ee:	f002 fb51 	bl	8009e94 <HAL_I2C_IsDeviceReady>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <zionEEPROMPresence+0x5c>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 80077fe:	4b01      	ldr	r3, [pc, #4]	; (8007804 <zionEEPROMPresence+0x5c>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	bd80      	pop	{r7, pc}
 8007804:	2000343c 	.word	0x2000343c
 8007808:	20028c78 	.word	0x20028c78

0800780c <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af04      	add	r7, sp, #16
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	72fb      	strb	r3, [r7, #11]
 800781a:	4613      	mov	r3, r2
 800781c:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	b299      	uxth	r1, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	b29b      	uxth	r3, r3
 8007826:	8b3a      	ldrh	r2, [r7, #24]
 8007828:	8938      	ldrh	r0, [r7, #8]
 800782a:	9202      	str	r2, [sp, #8]
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	2302      	movs	r3, #2
 8007834:	4602      	mov	r2, r0
 8007836:	4803      	ldr	r0, [pc, #12]	; (8007844 <readDataFromEEPROM+0x38>)
 8007838:	f002 fa12 	bl	8009c60 <HAL_I2C_Mem_Read>
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20028c78 	.word	0x20028c78

08007848 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8007848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784a:	b0a7      	sub	sp, #156	; 0x9c
 800784c:	af02      	add	r7, sp, #8
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
 8007852:	466b      	mov	r3, sp
 8007854:	461e      	mov	r6, r3
	int foundTheEnd = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 800785c:	2300      	movs	r3, #0
 800785e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8007862:	2364      	movs	r3, #100	; 0x64
 8007864:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 8007866:	2306      	movs	r3, #6
 8007868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 800786c:	2300      	movs	r3, #0
 800786e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8007872:	2300      	movs	r3, #0
 8007874:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 8007876:	2300      	movs	r3, #0
 8007878:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 800787e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007880:	1e63      	subs	r3, r4, #1
 8007882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007884:	4623      	mov	r3, r4
 8007886:	4618      	mov	r0, r3
 8007888:	f04f 0100 	mov.w	r1, #0
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	00cb      	lsls	r3, r1, #3
 8007896:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800789a:	00c2      	lsls	r2, r0, #3
 800789c:	4623      	mov	r3, r4
 800789e:	4618      	mov	r0, r3
 80078a0:	f04f 0100 	mov.w	r1, #0
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	00cb      	lsls	r3, r1, #3
 80078ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80078b2:	00c2      	lsls	r2, r0, #3
 80078b4:	4623      	mov	r3, r4
 80078b6:	3307      	adds	r3, #7
 80078b8:	08db      	lsrs	r3, r3, #3
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	ebad 0d03 	sub.w	sp, sp, r3
 80078c0:	ab02      	add	r3, sp, #8
 80078c2:	3300      	adds	r3, #0
 80078c4:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 80078c6:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80078c8:	1e6b      	subs	r3, r5, #1
 80078ca:	667b      	str	r3, [r7, #100]	; 0x64
 80078cc:	462b      	mov	r3, r5
 80078ce:	4618      	mov	r0, r3
 80078d0:	f04f 0100 	mov.w	r1, #0
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	00cb      	lsls	r3, r1, #3
 80078de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80078e2:	00c2      	lsls	r2, r0, #3
 80078e4:	462b      	mov	r3, r5
 80078e6:	4618      	mov	r0, r3
 80078e8:	f04f 0100 	mov.w	r1, #0
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	00cb      	lsls	r3, r1, #3
 80078f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80078fa:	00c2      	lsls	r2, r0, #3
 80078fc:	462b      	mov	r3, r5
 80078fe:	3307      	adds	r3, #7
 8007900:	08db      	lsrs	r3, r3, #3
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	ebad 0d03 	sub.w	sp, sp, r3
 8007908:	ab02      	add	r3, sp, #8
 800790a:	3300      	adds	r3, #0
 800790c:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	2250      	movs	r2, #80	; 0x50
 8007914:	2100      	movs	r1, #0
 8007916:	4618      	mov	r0, r3
 8007918:	f00e fa26 	bl	8015d68 <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 800791c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791e:	462a      	mov	r2, r5
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f00e fa20 	bl	8015d68 <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8007928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800792a:	4622      	mov	r2, r4
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f00e fa1a 	bl	8015d68 <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8007934:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007936:	79f9      	ldrb	r1, [r7, #7]
 8007938:	2364      	movs	r3, #100	; 0x64
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4623      	mov	r3, r4
 800793e:	2200      	movs	r2, #0
 8007940:	f7ff ff64 	bl	800780c <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 8007944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	f040 811b 	bne.w	8007b84 <parseZionEEPROM+0x33c>
		foundTheEnd=1;
 800794e:	2301      	movs	r3, #1
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 8007954:	f06f 0301 	mvn.w	r3, #1
 8007958:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 800795a:	e113      	b.n	8007b84 <parseZionEEPROM+0x33c>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 800795c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007960:	fb93 f2f2 	sdiv	r2, r3, r2
 8007964:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007966:	fb01 f202 	mul.w	r2, r1, r2
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	2b00      	cmp	r3, #0
 800796e:	bf0c      	ite	eq
 8007970:	2301      	moveq	r3, #1
 8007972:	2300      	movne	r3, #0
 8007974:	b2da      	uxtb	r2, r3
 8007976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007978:	2b00      	cmp	r3, #0
 800797a:	bfcc      	ite	gt
 800797c:	2301      	movgt	r3, #1
 800797e:	2300      	movle	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	4013      	ands	r3, r2
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d025      	beq.n	80079d6 <parseZionEEPROM+0x18e>
			for(x=0;x<size;x++){
 800798a:	2300      	movs	r3, #0
 800798c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007990:	e00f      	b.n	80079b2 <parseZionEEPROM+0x16a>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 8007992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007998:	4413      	add	r3, r2
 800799a:	7819      	ldrb	r1, [r3, #0]
 800799c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800799e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a2:	4413      	add	r3, r2
 80079a4:	460a      	mov	r2, r1
 80079a6:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 80079a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ac:	3301      	adds	r3, #1
 80079ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80079b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b8:	429a      	cmp	r2, r3
 80079ba:	dbea      	blt.n	8007992 <parseZionEEPROM+0x14a>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 80079bc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80079be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	79f9      	ldrb	r1, [r7, #7]
 80079c4:	2364      	movs	r3, #100	; 0x64
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	4623      	mov	r3, r4
 80079ca:	f7ff ff1f 	bl	800780c <readDataFromEEPROM>
			indexSubtractor+=size;
 80079ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079d2:	4413      	add	r3, r2
 80079d4:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 80079d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2bff      	cmp	r3, #255	; 0xff
 80079dc:	d116      	bne.n	8007a0c <parseZionEEPROM+0x1c4>
 80079de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	2bff      	cmp	r3, #255	; 0xff
 80079e4:	d112      	bne.n	8007a0c <parseZionEEPROM+0x1c4>
 80079e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079e8:	789b      	ldrb	r3, [r3, #2]
 80079ea:	2bff      	cmp	r3, #255	; 0xff
 80079ec:	d10e      	bne.n	8007a0c <parseZionEEPROM+0x1c4>
 80079ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079f0:	78db      	ldrb	r3, [r3, #3]
 80079f2:	2bff      	cmp	r3, #255	; 0xff
 80079f4:	d10a      	bne.n	8007a0c <parseZionEEPROM+0x1c4>
 80079f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079f8:	795b      	ldrb	r3, [r3, #5]
 80079fa:	2bff      	cmp	r3, #255	; 0xff
 80079fc:	d106      	bne.n	8007a0c <parseZionEEPROM+0x1c4>
			previousByteOfHeader[0]=-1;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a0a:	e0b8      	b.n	8007b7e <parseZionEEPROM+0x336>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 8007a0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a14:	5cd3      	ldrb	r3, [r2, r3]
 8007a16:	2b5a      	cmp	r3, #90	; 0x5a
 8007a18:	d023      	beq.n	8007a62 <parseZionEEPROM+0x21a>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a1e:	fb93 f2f2 	sdiv	r2, r3, r2
 8007a22:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007a24:	fb01 f202 	mul.w	r2, r1, r2
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a2c:	5cd3      	ldrb	r3, [r2, r3]
 8007a2e:	2b5a      	cmp	r3, #90	; 0x5a
 8007a30:	d104      	bne.n	8007a3c <parseZionEEPROM+0x1f4>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	3313      	adds	r3, #19
 8007a36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	dd12      	ble.n	8007a62 <parseZionEEPROM+0x21a>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a40:	fb93 f2f2 	sdiv	r2, r3, r2
 8007a44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007a46:	fb01 f202 	mul.w	r2, r1, r2
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a4e:	5cd3      	ldrb	r3, [r2, r3]
 8007a50:	2b5a      	cmp	r3, #90	; 0x5a
 8007a52:	f040 8094 	bne.w	8007b7e <parseZionEEPROM+0x336>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3313      	adds	r3, #19
 8007a5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	f300 808e 	bgt.w	8007b7e <parseZionEEPROM+0x336>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	2300      	movne	r3, #0
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a78:	1acb      	subs	r3, r1, r3
 8007a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a7c:	5ccb      	ldrb	r3, [r1, r3]
 8007a7e:	2b5a      	cmp	r3, #90	; 0x5a
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	4013      	ands	r3, r2
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <parseZionEEPROM+0x25a>
				previousByteOfHeader[0] = index;
 8007a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a92:	60bb      	str	r3, [r7, #8]
				if(index==0){
 8007a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d171      	bne.n	8007b7e <parseZionEEPROM+0x336>
					zeroWas5A=1;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aa0:	e06d      	b.n	8007b7e <parseZionEEPROM+0x336>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 8007aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d015      	beq.n	8007ad4 <parseZionEEPROM+0x28c>
				previousByteOfHeader[counter]=index;
 8007aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007ab2:	4413      	add	r3, r2
 8007ab4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ab6:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 8007aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007abe:	2b13      	cmp	r3, #19
 8007ac0:	d102      	bne.n	8007ac8 <parseZionEEPROM+0x280>
					foundTheEnd=1;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 8007ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007acc:	3301      	adds	r3, #1
 8007ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad2:	e054      	b.n	8007b7e <parseZionEEPROM+0x336>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 8007ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007adc:	5cd3      	ldrb	r3, [r2, r3]
 8007ade:	2b45      	cmp	r3, #69	; 0x45
 8007ae0:	d102      	bne.n	8007ae8 <parseZionEEPROM+0x2a0>
					previousByteOfHeader[1] = index;
 8007ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e04a      	b.n	8007b7e <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8007ae8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007af0:	5cd3      	ldrb	r3, [r2, r3]
 8007af2:	2b46      	cmp	r3, #70	; 0x46
 8007af4:	d107      	bne.n	8007b06 <parseZionEEPROM+0x2be>
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007afa:	3b01      	subs	r3, #1
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d102      	bne.n	8007b06 <parseZionEEPROM+0x2be>
					previousByteOfHeader[2] = index;
 8007b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	e03b      	b.n	8007b7e <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8007b06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b0e:	5cd3      	ldrb	r3, [r2, r3]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d107      	bne.n	8007b24 <parseZionEEPROM+0x2dc>
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d102      	bne.n	8007b24 <parseZionEEPROM+0x2dc>
					previousByteOfHeader[3] = index;
 8007b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e02c      	b.n	8007b7e <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8007b24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b2c:	5cd3      	ldrb	r3, [r2, r3]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d107      	bne.n	8007b42 <parseZionEEPROM+0x2fa>
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b36:	3b01      	subs	r3, #1
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d102      	bne.n	8007b42 <parseZionEEPROM+0x2fa>
					previousByteOfHeader[4] = index;
 8007b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	e01d      	b.n	8007b7e <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8007b42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b4a:	5cd3      	ldrb	r3, [r2, r3]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d109      	bne.n	8007b64 <parseZionEEPROM+0x31c>
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b54:	3b01      	subs	r3, #1
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d104      	bne.n	8007b64 <parseZionEEPROM+0x31c>
					previousByteOfHeader[5] = index;
 8007b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b5c:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b62:	e00c      	b.n	8007b7e <parseZionEEPROM+0x336>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8007b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <parseZionEEPROM+0x336>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	2250      	movs	r2, #80	; 0x50
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f00e f8f8 	bl	8015d68 <memset>
					zeroWas5A=0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 8007b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b80:	3301      	adds	r3, #1
 8007b82:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 8007b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f43f aee7 	beq.w	800795c <parseZionEEPROM+0x114>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f2c0 8085 	blt.w	8007ca0 <parseZionEEPROM+0x458>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 8007b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8007b9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007ba0:	fb01 f202 	mul.w	r2, r1, r2
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8007ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007baa:	3b04      	subs	r3, #4
 8007bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	db50      	blt.n	8007c54 <parseZionEEPROM+0x40c>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8007bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bb4:	1e5a      	subs	r2, r3, #1
 8007bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bc2:	e01c      	b.n	8007bfe <parseZionEEPROM+0x3b6>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 8007bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc8:	3310      	adds	r3, #16
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007bd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007bd8:	fb93 f2f2 	sdiv	r2, r3, r2
 8007bdc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007bde:	fb01 f202 	mul.w	r2, r1, r2
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007be6:	5cd3      	ldrb	r3, [r2, r3]
 8007be8:	4619      	mov	r1, r3
 8007bea:	4a48      	ldr	r2, [pc, #288]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8007bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c04:	429a      	cmp	r2, r3
 8007c06:	dbdd      	blt.n	8007bc4 <parseZionEEPROM+0x37c>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8007c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c0e:	e01c      	b.n	8007c4a <parseZionEEPROM+0x402>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8007c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c14:	3310      	adds	r3, #16
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007c22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c24:	fb93 f2f2 	sdiv	r2, r3, r2
 8007c28:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007c2a:	fb01 f202 	mul.w	r2, r1, r2
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c32:	5cd3      	ldrb	r3, [r2, r3]
 8007c34:	4619      	mov	r1, r3
 8007c36:	4a35      	ldr	r2, [pc, #212]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 8007c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c44:	3301      	adds	r3, #1
 8007c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	ddde      	ble.n	8007c10 <parseZionEEPROM+0x3c8>
 8007c52:	e052      	b.n	8007cfa <parseZionEEPROM+0x4b2>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c5a:	e01c      	b.n	8007c96 <parseZionEEPROM+0x44e>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8007c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c60:	3310      	adds	r3, #16
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007c68:	4413      	add	r3, r2
 8007c6a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007c6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c70:	fb93 f2f2 	sdiv	r2, r3, r2
 8007c74:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007c76:	fb01 f202 	mul.w	r2, r1, r2
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c7e:	5cd3      	ldrb	r3, [r2, r3]
 8007c80:	4619      	mov	r1, r3
 8007c82:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c90:	3301      	adds	r3, #1
 8007c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	ddde      	ble.n	8007c5c <parseZionEEPROM+0x414>
 8007c9e:	e02c      	b.n	8007cfa <parseZionEEPROM+0x4b2>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d114      	bne.n	8007cd2 <parseZionEEPROM+0x48a>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cae:	e00b      	b.n	8007cc8 <parseZionEEPROM+0x480>
				deviceHeaderBytes[x] = -2;
 8007cb0:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb6:	f06f 0101 	mvn.w	r1, #1
 8007cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	ddef      	ble.n	8007cb0 <parseZionEEPROM+0x468>
 8007cd0:	e013      	b.n	8007cfa <parseZionEEPROM+0x4b2>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cd8:	e00b      	b.n	8007cf2 <parseZionEEPROM+0x4aa>
				deviceHeaderBytes[x] = -1;
 8007cda:	4a0c      	ldr	r2, [pc, #48]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cec:	3301      	adds	r3, #1
 8007cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	ddef      	ble.n	8007cda <parseZionEEPROM+0x492>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	4a03      	ldr	r2, [pc, #12]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007cfe:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 8007d00:	4b02      	ldr	r3, [pc, #8]	; (8007d0c <parseZionEEPROM+0x4c4>)
 8007d02:	46b5      	mov	sp, r6
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3794      	adds	r7, #148	; 0x94
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0c:	20003448 	.word	0x20003448

08007d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007d16:	e003      	b.n	8007d20 <LoopCopyDataInit>

08007d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007d1e:	3104      	adds	r1, #4

08007d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007d20:	480b      	ldr	r0, [pc, #44]	; (8007d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007d28:	d3f6      	bcc.n	8007d18 <CopyDataInit>
  ldr  r2, =_sbss
 8007d2a:	4a0b      	ldr	r2, [pc, #44]	; (8007d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007d2c:	e002      	b.n	8007d34 <LoopFillZerobss>

08007d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007d30:	f842 3b04 	str.w	r3, [r2], #4

08007d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007d34:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007d38:	d3f9      	bcc.n	8007d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d3a:	f7ff fd1f 	bl	800777c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d3e:	f00d ffe1 	bl	8015d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d42:	f7fa fa3f 	bl	80021c4 <main>
  bx  lr    
 8007d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007d48:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007d4c:	0801cbf4 	.word	0x0801cbf4
  ldr  r0, =_sdata
 8007d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007d54:	20000428 	.word	0x20000428
  ldr  r2, =_sbss
 8007d58:	20000428 	.word	0x20000428
  ldr  r3, = _ebss
 8007d5c:	20031284 	.word	0x20031284

08007d60 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d60:	e7fe      	b.n	8007d60 <CAN1_RX0_IRQHandler>

08007d62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d66:	2003      	movs	r0, #3
 8007d68:	f000 fea5 	bl	8008ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	f7ff fab9 	bl	80072e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007d72:	f7fe fcb3 	bl	80066dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d80:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <HAL_IncTick+0x20>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <HAL_IncTick+0x24>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <HAL_IncTick+0x24>)
 8007d8e:	6013      	str	r3, [r2, #0]
}
 8007d90:	bf00      	nop
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000150 	.word	0x20000150
 8007da0:	20031230 	.word	0x20031230

08007da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  return uwTick;
 8007da8:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <HAL_GetTick+0x14>)
 8007daa:	681b      	ldr	r3, [r3, #0]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20031230 	.word	0x20031230

08007dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007dc4:	f7ff ffee 	bl	8007da4 <HAL_GetTick>
 8007dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d005      	beq.n	8007de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007dd6:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <HAL_Delay+0x44>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007de2:	bf00      	nop
 8007de4:	f7ff ffde 	bl	8007da4 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d8f7      	bhi.n	8007de4 <HAL_Delay+0x28>
  {
  }
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000150 	.word	0x20000150

08007e04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e031      	b.n	8007e7e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fe fc82 	bl	800672c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f003 0310 	and.w	r3, r3, #16
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d116      	bne.n	8007e70 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <HAL_ADC_Init+0x84>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	f043 0202 	orr.w	r2, r3, #2
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fbfc 	bl	8008650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	f023 0303 	bic.w	r3, r3, #3
 8007e66:	f043 0201 	orr.w	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8007e6e:	e001      	b.n	8007e74 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	ffffeefd 	.word	0xffffeefd

08007e8c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	bf0c      	ite	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	2300      	movne	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d049      	beq.n	8007f62 <HAL_ADC_IRQHandler+0xd6>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d046      	beq.n	8007f62 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d105      	bne.n	8007eec <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d12b      	bne.n	8007f52 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d127      	bne.n	8007f52 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d119      	bne.n	8007f52 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0220 	bic.w	r2, r2, #32
 8007f2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f043 0201 	orr.w	r2, r3, #1
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fc fbfe 	bl	8004754 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f06f 0212 	mvn.w	r2, #18
 8007f60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	bf0c      	ite	eq
 8007f86:	2301      	moveq	r3, #1
 8007f88:	2300      	movne	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d057      	beq.n	8008044 <HAL_ADC_IRQHandler+0x1b8>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d054      	beq.n	8008044 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d139      	bne.n	8008034 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d12b      	bne.n	8008034 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d124      	bne.n	8008034 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d11d      	bne.n	8008034 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d119      	bne.n	8008034 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800800e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	f043 0201 	orr.w	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fc87 	bl	8008948 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f06f 020c 	mvn.w	r2, #12
 8008042:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b01      	cmp	r3, #1
 8008050:	bf0c      	ite	eq
 8008052:	2301      	moveq	r3, #1
 8008054:	2300      	movne	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b40      	cmp	r3, #64	; 0x40
 8008066:	bf0c      	ite	eq
 8008068:	2301      	moveq	r3, #1
 800806a:	2300      	movne	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d017      	beq.n	80080a6 <HAL_ADC_IRQHandler+0x21a>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d014      	beq.n	80080a6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b01      	cmp	r3, #1
 8008088:	d10d      	bne.n	80080a6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f97c 	bl	8008394 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0201 	mvn.w	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080ca:	bf0c      	ite	eq
 80080cc:	2301      	moveq	r3, #1
 80080ce:	2300      	movne	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d015      	beq.n	8008106 <HAL_ADC_IRQHandler+0x27a>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d012      	beq.n	8008106 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e4:	f043 0202 	orr.w	r2, r3, #2
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0220 	mvn.w	r2, #32
 80080f4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f956 	bl	80083a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0220 	mvn.w	r2, #32
 8008104:	601a      	str	r2, [r3, #0]
  }
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <HAL_ADC_Start_DMA+0x1e>
 800812a:	2302      	movs	r3, #2
 800812c:	e0c7      	b.n	80082be <HAL_ADC_Start_DMA+0x1ae>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b01      	cmp	r3, #1
 8008142:	d018      	beq.n	8008176 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0201 	orr.w	r2, r2, #1
 8008152:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008154:	4b5c      	ldr	r3, [pc, #368]	; (80082c8 <HAL_ADC_Start_DMA+0x1b8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a5c      	ldr	r2, [pc, #368]	; (80082cc <HAL_ADC_Start_DMA+0x1bc>)
 800815a:	fba2 2303 	umull	r2, r3, r2, r3
 800815e:	0c9a      	lsrs	r2, r3, #18
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008168:	e002      	b.n	8008170 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	3b01      	subs	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f9      	bne.n	800816a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b01      	cmp	r3, #1
 8008182:	f040 809b 	bne.w	80082bc <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818a:	4b51      	ldr	r3, [pc, #324]	; (80082d0 <HAL_ADC_Start_DMA+0x1c0>)
 800818c:	4013      	ands	r3, r2
 800818e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c0:	d106      	bne.n	80081d0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c6:	f023 0206 	bic.w	r2, r3, #6
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	645a      	str	r2, [r3, #68]	; 0x44
 80081ce:	e002      	b.n	80081d6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	4a3c      	ldr	r2, [pc, #240]	; (80082d4 <HAL_ADC_Start_DMA+0x1c4>)
 80081e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	4a3b      	ldr	r2, [pc, #236]	; (80082d8 <HAL_ADC_Start_DMA+0x1c8>)
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	4a3a      	ldr	r2, [pc, #232]	; (80082dc <HAL_ADC_Start_DMA+0x1cc>)
 80081f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80081fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800820e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800821e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	334c      	adds	r3, #76	; 0x4c
 800822a:	4619      	mov	r1, r3
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f000 fd24 	bl	8008c7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008234:	4b2a      	ldr	r3, [pc, #168]	; (80082e0 <HAL_ADC_Start_DMA+0x1d0>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f003 031f 	and.w	r3, r3, #31
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10f      	bne.n	8008260 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d136      	bne.n	80082bc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800825c:	609a      	str	r2, [r3, #8]
 800825e:	e02d      	b.n	80082bc <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <HAL_ADC_Start_DMA+0x1d4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d10e      	bne.n	8008288 <HAL_ADC_Start_DMA+0x178>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d107      	bne.n	8008288 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008286:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008288:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <HAL_ADC_Start_DMA+0x1d0>)
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b00      	cmp	r3, #0
 8008292:	d113      	bne.n	80082bc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <HAL_ADC_Start_DMA+0x1d8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d10e      	bne.n	80082bc <HAL_ADC_Start_DMA+0x1ac>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d107      	bne.n	80082bc <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082ba:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000148 	.word	0x20000148
 80082cc:	431bde83 	.word	0x431bde83
 80082d0:	fffff8fe 	.word	0xfffff8fe
 80082d4:	08008845 	.word	0x08008845
 80082d8:	080088ff 	.word	0x080088ff
 80082dc:	0800891b 	.word	0x0800891b
 80082e0:	40012300 	.word	0x40012300
 80082e4:	40012000 	.word	0x40012000
 80082e8:	40012200 	.word	0x40012200

080082ec <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_ADC_Stop_DMA+0x1a>
 8008302:	2302      	movs	r3, #2
 8008304:	e036      	b.n	8008374 <HAL_ADC_Stop_DMA+0x88>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d11e      	bne.n	800836a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800833a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fcfb 	bl	8008d3c <HAL_DMA_Abort>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008358:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <HAL_ADC_Stop_DMA+0x90>)
 8008360:	4013      	ands	r3, r2
 8008362:	f043 0201 	orr.w	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	ffffeefe 	.word	0xffffeefe

08008380 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_ADC_ConfigChannel+0x1c>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e12a      	b.n	800862e <HAL_ADC_ConfigChannel+0x272>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d93a      	bls.n	800845e <HAL_ADC_ConfigChannel+0xa2>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083f0:	d035      	beq.n	800845e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68d9      	ldr	r1, [r3, #12]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	3b1e      	subs	r3, #30
 8008408:	2207      	movs	r2, #7
 800840a:	fa02 f303 	lsl.w	r3, r2, r3
 800840e:	43da      	mvns	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	400a      	ands	r2, r1
 8008416:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a87      	ldr	r2, [pc, #540]	; (800863c <HAL_ADC_ConfigChannel+0x280>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10a      	bne.n	8008438 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68d9      	ldr	r1, [r3, #12]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	061a      	lsls	r2, r3, #24
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008436:	e035      	b.n	80084a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68d9      	ldr	r1, [r3, #12]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	689a      	ldr	r2, [r3, #8]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	4618      	mov	r0, r3
 800844a:	4603      	mov	r3, r0
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4403      	add	r3, r0
 8008450:	3b1e      	subs	r3, #30
 8008452:	409a      	lsls	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800845c:	e022      	b.n	80084a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6919      	ldr	r1, [r3, #16]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	4613      	mov	r3, r2
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	4413      	add	r3, r2
 8008472:	2207      	movs	r2, #7
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	43da      	mvns	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	400a      	ands	r2, r1
 8008480:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6919      	ldr	r1, [r3, #16]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	4618      	mov	r0, r3
 8008494:	4603      	mov	r3, r0
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	4403      	add	r3, r0
 800849a:	409a      	lsls	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b06      	cmp	r3, #6
 80084aa:	d824      	bhi.n	80084f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	3b05      	subs	r3, #5
 80084be:	221f      	movs	r2, #31
 80084c0:	fa02 f303 	lsl.w	r3, r2, r3
 80084c4:	43da      	mvns	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	400a      	ands	r2, r1
 80084cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	4618      	mov	r0, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	3b05      	subs	r3, #5
 80084e8:	fa00 f203 	lsl.w	r2, r0, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	635a      	str	r2, [r3, #52]	; 0x34
 80084f4:	e04c      	b.n	8008590 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b0c      	cmp	r3, #12
 80084fc:	d824      	bhi.n	8008548 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	4613      	mov	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	3b23      	subs	r3, #35	; 0x23
 8008510:	221f      	movs	r2, #31
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	43da      	mvns	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	400a      	ands	r2, r1
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	4618      	mov	r0, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	3b23      	subs	r3, #35	; 0x23
 800853a:	fa00 f203 	lsl.w	r2, r0, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
 8008546:	e023      	b.n	8008590 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	3b41      	subs	r3, #65	; 0x41
 800855a:	221f      	movs	r2, #31
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	43da      	mvns	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	400a      	ands	r2, r1
 8008568:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	4618      	mov	r0, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	3b41      	subs	r3, #65	; 0x41
 8008584:	fa00 f203 	lsl.w	r2, r0, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a2a      	ldr	r2, [pc, #168]	; (8008640 <HAL_ADC_ConfigChannel+0x284>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d10a      	bne.n	80085b0 <HAL_ADC_ConfigChannel+0x1f4>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a2:	d105      	bne.n	80085b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80085a4:	4b27      	ldr	r3, [pc, #156]	; (8008644 <HAL_ADC_ConfigChannel+0x288>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	4a26      	ldr	r2, [pc, #152]	; (8008644 <HAL_ADC_ConfigChannel+0x288>)
 80085aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80085ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a22      	ldr	r2, [pc, #136]	; (8008640 <HAL_ADC_ConfigChannel+0x284>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d109      	bne.n	80085ce <HAL_ADC_ConfigChannel+0x212>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b12      	cmp	r3, #18
 80085c0:	d105      	bne.n	80085ce <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80085c2:	4b20      	ldr	r3, [pc, #128]	; (8008644 <HAL_ADC_ConfigChannel+0x288>)
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <HAL_ADC_ConfigChannel+0x288>)
 80085c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1b      	ldr	r2, [pc, #108]	; (8008640 <HAL_ADC_ConfigChannel+0x284>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d125      	bne.n	8008624 <HAL_ADC_ConfigChannel+0x268>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a17      	ldr	r2, [pc, #92]	; (800863c <HAL_ADC_ConfigChannel+0x280>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <HAL_ADC_ConfigChannel+0x22e>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b11      	cmp	r3, #17
 80085e8:	d11c      	bne.n	8008624 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <HAL_ADC_ConfigChannel+0x288>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	4a15      	ldr	r2, [pc, #84]	; (8008644 <HAL_ADC_ConfigChannel+0x288>)
 80085f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a10      	ldr	r2, [pc, #64]	; (800863c <HAL_ADC_ConfigChannel+0x280>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d111      	bne.n	8008624 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <HAL_ADC_ConfigChannel+0x28c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a11      	ldr	r2, [pc, #68]	; (800864c <HAL_ADC_ConfigChannel+0x290>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	0c9a      	lsrs	r2, r3, #18
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008616:	e002      	b.n	800861e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3b01      	subs	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f9      	bne.n	8008618 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	10000012 	.word	0x10000012
 8008640:	40012000 	.word	0x40012000
 8008644:	40012300 	.word	0x40012300
 8008648:	20000148 	.word	0x20000148
 800864c:	431bde83 	.word	0x431bde83

08008650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008658:	4b78      	ldr	r3, [pc, #480]	; (800883c <ADC_Init+0x1ec>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4a77      	ldr	r2, [pc, #476]	; (800883c <ADC_Init+0x1ec>)
 800865e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008662:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008664:	4b75      	ldr	r3, [pc, #468]	; (800883c <ADC_Init+0x1ec>)
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4973      	ldr	r1, [pc, #460]	; (800883c <ADC_Init+0x1ec>)
 800866e:	4313      	orrs	r3, r2
 8008670:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6859      	ldr	r1, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	021a      	lsls	r2, r3, #8
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80086a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6859      	ldr	r1, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6899      	ldr	r1, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	4a58      	ldr	r2, [pc, #352]	; (8008840 <ADC_Init+0x1f0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d022      	beq.n	800872a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	609a      	str	r2, [r3, #8]
 8008728:	e00f      	b.n	800874a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008748:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0202 	bic.w	r2, r2, #2
 8008758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6899      	ldr	r1, [r3, #8]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	005a      	lsls	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01b      	beq.n	80087b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008786:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008796:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6859      	ldr	r1, [r3, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	3b01      	subs	r3, #1
 80087a4:	035a      	lsls	r2, r3, #13
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
 80087ae:	e007      	b.n	80087c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	3b01      	subs	r3, #1
 80087dc:	051a      	lsls	r2, r3, #20
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6899      	ldr	r1, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008802:	025a      	lsls	r2, r3, #9
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800881a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6899      	ldr	r1, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	029a      	lsls	r2, r3, #10
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	40012300 	.word	0x40012300
 8008840:	0f000001 	.word	0x0f000001

08008844 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800885a:	2b00      	cmp	r3, #0
 800885c:	d13c      	bne.n	80088d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d12b      	bne.n	80088d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800887c:	2b00      	cmp	r3, #0
 800887e:	d127      	bne.n	80088d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008898:	2b00      	cmp	r3, #0
 800889a:	d119      	bne.n	80088d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0220 	bic.w	r2, r2, #32
 80088aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c8:	f043 0201 	orr.w	r2, r3, #1
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7fb ff3f 	bl	8004754 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80088d6:	e00e      	b.n	80088f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff fd5f 	bl	80083a8 <HAL_ADC_ErrorCallback>
}
 80088ea:	e004      	b.n	80088f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
}
 80088f6:	bf00      	nop
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff fd37 	bl	8008380 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2240      	movs	r2, #64	; 0x40
 800892c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008932:	f043 0204 	orr.w	r2, r3, #4
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fd34 	bl	80083a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008940:	bf00      	nop
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800896c:	4b0b      	ldr	r3, [pc, #44]	; (800899c <__NVIC_SetPriorityGrouping+0x40>)
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008978:	4013      	ands	r3, r2
 800897a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008986:	4313      	orrs	r3, r2
 8008988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800898a:	4a04      	ldr	r2, [pc, #16]	; (800899c <__NVIC_SetPriorityGrouping+0x40>)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	60d3      	str	r3, [r2, #12]
}
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	e000ed00 	.word	0xe000ed00
 80089a0:	05fa0000 	.word	0x05fa0000

080089a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089a8:	4b04      	ldr	r3, [pc, #16]	; (80089bc <__NVIC_GetPriorityGrouping+0x18>)
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	0a1b      	lsrs	r3, r3, #8
 80089ae:	f003 0307 	and.w	r3, r3, #7
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	e000ed00 	.word	0xe000ed00

080089c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	db0b      	blt.n	80089ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	f003 021f 	and.w	r2, r3, #31
 80089d8:	4907      	ldr	r1, [pc, #28]	; (80089f8 <__NVIC_EnableIRQ+0x38>)
 80089da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089de:	095b      	lsrs	r3, r3, #5
 80089e0:	2001      	movs	r0, #1
 80089e2:	fa00 f202 	lsl.w	r2, r0, r2
 80089e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	e000e100 	.word	0xe000e100

080089fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	db0a      	blt.n	8008a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	490c      	ldr	r1, [pc, #48]	; (8008a48 <__NVIC_SetPriority+0x4c>)
 8008a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1a:	0112      	lsls	r2, r2, #4
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	440b      	add	r3, r1
 8008a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a24:	e00a      	b.n	8008a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4908      	ldr	r1, [pc, #32]	; (8008a4c <__NVIC_SetPriority+0x50>)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	3b04      	subs	r3, #4
 8008a34:	0112      	lsls	r2, r2, #4
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	440b      	add	r3, r1
 8008a3a:	761a      	strb	r2, [r3, #24]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	e000e100 	.word	0xe000e100
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	f1c3 0307 	rsb	r3, r3, #7
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	bf28      	it	cs
 8008a6e:	2304      	movcs	r3, #4
 8008a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	3304      	adds	r3, #4
 8008a76:	2b06      	cmp	r3, #6
 8008a78:	d902      	bls.n	8008a80 <NVIC_EncodePriority+0x30>
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3b03      	subs	r3, #3
 8008a7e:	e000      	b.n	8008a82 <NVIC_EncodePriority+0x32>
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	43da      	mvns	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	401a      	ands	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a98:	f04f 31ff 	mov.w	r1, #4294967295
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa2:	43d9      	mvns	r1, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008aa8:	4313      	orrs	r3, r2
         );
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3724      	adds	r7, #36	; 0x24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff ff4c 	bl	800895c <__NVIC_SetPriorityGrouping>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ade:	f7ff ff61 	bl	80089a4 <__NVIC_GetPriorityGrouping>
 8008ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	6978      	ldr	r0, [r7, #20]
 8008aea:	f7ff ffb1 	bl	8008a50 <NVIC_EncodePriority>
 8008aee:	4602      	mov	r2, r0
 8008af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff ff80 	bl	80089fc <__NVIC_SetPriority>
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff ff54 	bl	80089c0 <__NVIC_EnableIRQ>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008b2c:	f7ff f93a 	bl	8007da4 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e099      	b.n	8008c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0201 	bic.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b5c:	e00f      	b.n	8008b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b5e:	f7ff f921 	bl	8007da4 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b05      	cmp	r3, #5
 8008b6a:	d908      	bls.n	8008b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2203      	movs	r2, #3
 8008b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e078      	b.n	8008c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e8      	bne.n	8008b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	4b38      	ldr	r3, [pc, #224]	; (8008c78 <HAL_DMA_Init+0x158>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d107      	bne.n	8008be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	4313      	orrs	r3, r2
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f023 0307 	bic.w	r3, r3, #7
 8008bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d117      	bne.n	8008c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00e      	beq.n	8008c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fb09 	bl	800923c <DMA_CheckFifoParam>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2240      	movs	r2, #64	; 0x40
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e016      	b.n	8008c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fac0 	bl	80091d0 <DMA_CalcBaseAndBitshift>
 8008c50:	4603      	mov	r3, r0
 8008c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	223f      	movs	r2, #63	; 0x3f
 8008c5a:	409a      	lsls	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	e010803f 	.word	0xe010803f

08008c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <HAL_DMA_Start_IT+0x26>
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e048      	b.n	8008d34 <HAL_DMA_Start_IT+0xb8>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d137      	bne.n	8008d26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 fa52 	bl	8009174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd4:	223f      	movs	r2, #63	; 0x3f
 8008cd6:	409a      	lsls	r2, r3
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0216 	orr.w	r2, r2, #22
 8008cea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695a      	ldr	r2, [r3, #20]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008cfa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0208 	orr.w	r2, r2, #8
 8008d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f042 0201 	orr.w	r2, r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	e005      	b.n	8008d32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008d4a:	f7ff f82b 	bl	8007da4 <HAL_GetTick>
 8008d4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d008      	beq.n	8008d6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2280      	movs	r2, #128	; 0x80
 8008d60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e052      	b.n	8008e14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0216 	bic.w	r2, r2, #22
 8008d7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	695a      	ldr	r2, [r3, #20]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <HAL_DMA_Abort+0x62>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0208 	bic.w	r2, r2, #8
 8008dac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008dbe:	e013      	b.n	8008de8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008dc0:	f7fe fff0 	bl	8007da4 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d90c      	bls.n	8008de8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2203      	movs	r2, #3
 8008de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e015      	b.n	8008e14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e4      	bne.n	8008dc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfa:	223f      	movs	r2, #63	; 0x3f
 8008dfc:	409a      	lsls	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d004      	beq.n	8008e3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2280      	movs	r2, #128	; 0x80
 8008e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e00c      	b.n	8008e54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0201 	bic.w	r2, r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008e6c:	4b92      	ldr	r3, [pc, #584]	; (80090b8 <HAL_DMA_IRQHandler+0x258>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a92      	ldr	r2, [pc, #584]	; (80090bc <HAL_DMA_IRQHandler+0x25c>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	0a9b      	lsrs	r3, r3, #10
 8008e78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8a:	2208      	movs	r2, #8
 8008e8c:	409a      	lsls	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4013      	ands	r3, r2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d01a      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d013      	beq.n	8008ecc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0204 	bic.w	r2, r2, #4
 8008eb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb8:	2208      	movs	r2, #8
 8008eba:	409a      	lsls	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec4:	f043 0201 	orr.w	r2, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d012      	beq.n	8008f02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eee:	2201      	movs	r2, #1
 8008ef0:	409a      	lsls	r2, r3
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efa:	f043 0202 	orr.w	r2, r3, #2
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f06:	2204      	movs	r2, #4
 8008f08:	409a      	lsls	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d012      	beq.n	8008f38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f24:	2204      	movs	r2, #4
 8008f26:	409a      	lsls	r2, r3
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f30:	f043 0204 	orr.w	r2, r3, #4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	409a      	lsls	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4013      	ands	r3, r2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d043      	beq.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d03c      	beq.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5a:	2210      	movs	r2, #16
 8008f5c:	409a      	lsls	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d018      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d108      	bne.n	8008f90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d024      	beq.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
 8008f8e:	e01f      	b.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01b      	beq.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	4798      	blx	r3
 8008fa0:	e016      	b.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d107      	bne.n	8008fc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0208 	bic.w	r2, r2, #8
 8008fbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	409a      	lsls	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 808e 	beq.w	80090fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 8086 	beq.w	80090fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	409a      	lsls	r2, r3
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b05      	cmp	r3, #5
 8009008:	d136      	bne.n	8009078 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0216 	bic.w	r2, r2, #22
 8009018:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009028:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d103      	bne.n	800903a <HAL_DMA_IRQHandler+0x1da>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009036:	2b00      	cmp	r3, #0
 8009038:	d007      	beq.n	800904a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0208 	bic.w	r2, r2, #8
 8009048:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904e:	223f      	movs	r2, #63	; 0x3f
 8009050:	409a      	lsls	r2, r3
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	2b00      	cmp	r3, #0
 800906c:	d07d      	beq.n	800916a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
        }
        return;
 8009076:	e078      	b.n	800916a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01c      	beq.n	80090c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009098:	2b00      	cmp	r3, #0
 800909a:	d030      	beq.n	80090fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
 80090a4:	e02b      	b.n	80090fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d027      	beq.n	80090fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
 80090b6:	e022      	b.n	80090fe <HAL_DMA_IRQHandler+0x29e>
 80090b8:	20000148 	.word	0x20000148
 80090bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10f      	bne.n	80090ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0210 	bic.w	r2, r2, #16
 80090dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	2b00      	cmp	r3, #0
 8009104:	d032      	beq.n	800916c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d022      	beq.n	8009158 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2205      	movs	r2, #5
 8009116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0201 	bic.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	3301      	adds	r3, #1
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	429a      	cmp	r2, r3
 8009134:	d307      	bcc.n	8009146 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f2      	bne.n	800912a <HAL_DMA_IRQHandler+0x2ca>
 8009144:	e000      	b.n	8009148 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009146:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
 8009168:	e000      	b.n	800916c <HAL_DMA_IRQHandler+0x30c>
        return;
 800916a:	bf00      	nop
    }
  }
}
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop

08009174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	2b40      	cmp	r3, #64	; 0x40
 80091a0:	d108      	bne.n	80091b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80091b2:	e007      	b.n	80091c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	60da      	str	r2, [r3, #12]
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	3b10      	subs	r3, #16
 80091e0:	4a13      	ldr	r2, [pc, #76]	; (8009230 <DMA_CalcBaseAndBitshift+0x60>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	091b      	lsrs	r3, r3, #4
 80091e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80091ea:	4a12      	ldr	r2, [pc, #72]	; (8009234 <DMA_CalcBaseAndBitshift+0x64>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d908      	bls.n	8009210 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <DMA_CalcBaseAndBitshift+0x68>)
 8009206:	4013      	ands	r3, r2
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	659a      	str	r2, [r3, #88]	; 0x58
 800920e:	e006      	b.n	800921e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	4b08      	ldr	r3, [pc, #32]	; (8009238 <DMA_CalcBaseAndBitshift+0x68>)
 8009218:	4013      	ands	r3, r2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	aaaaaaab 	.word	0xaaaaaaab
 8009234:	0801ba48 	.word	0x0801ba48
 8009238:	fffffc00 	.word	0xfffffc00

0800923c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d11f      	bne.n	8009296 <DMA_CheckFifoParam+0x5a>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d856      	bhi.n	800930a <DMA_CheckFifoParam+0xce>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <DMA_CheckFifoParam+0x28>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009275 	.word	0x08009275
 8009268:	08009287 	.word	0x08009287
 800926c:	08009275 	.word	0x08009275
 8009270:	0800930b 	.word	0x0800930b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d046      	beq.n	800930e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009284:	e043      	b.n	800930e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800928e:	d140      	bne.n	8009312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009294:	e03d      	b.n	8009312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929e:	d121      	bne.n	80092e4 <DMA_CheckFifoParam+0xa8>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d837      	bhi.n	8009316 <DMA_CheckFifoParam+0xda>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <DMA_CheckFifoParam+0x70>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092bd 	.word	0x080092bd
 80092b0:	080092c3 	.word	0x080092c3
 80092b4:	080092bd 	.word	0x080092bd
 80092b8:	080092d5 	.word	0x080092d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
      break;
 80092c0:	e030      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d025      	beq.n	800931a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092d2:	e022      	b.n	800931a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80092dc:	d11f      	bne.n	800931e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80092e2:	e01c      	b.n	800931e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d903      	bls.n	80092f2 <DMA_CheckFifoParam+0xb6>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d003      	beq.n	80092f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80092f0:	e018      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	73fb      	strb	r3, [r7, #15]
      break;
 80092f6:	e015      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00e      	beq.n	8009322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
      break;
 8009308:	e00b      	b.n	8009322 <DMA_CheckFifoParam+0xe6>
      break;
 800930a:	bf00      	nop
 800930c:	e00a      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      break;
 800930e:	bf00      	nop
 8009310:	e008      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      break;
 8009312:	bf00      	nop
 8009314:	e006      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      break;
 8009316:	bf00      	nop
 8009318:	e004      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      break;
 800931a:	bf00      	nop
 800931c:	e002      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      break;   
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <DMA_CheckFifoParam+0xe8>
      break;
 8009322:	bf00      	nop
    }
  } 
  
  return status; 
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009334:	b480      	push	{r7}
 8009336:	b089      	sub	sp, #36	; 0x24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800934a:	2300      	movs	r3, #0
 800934c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	e175      	b.n	8009640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009354:	2201      	movs	r2, #1
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	fa02 f303 	lsl.w	r3, r2, r3
 800935c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4013      	ands	r3, r2
 8009366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	f040 8164 	bne.w	800963a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d00b      	beq.n	8009392 <HAL_GPIO_Init+0x5e>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d007      	beq.n	8009392 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009386:	2b11      	cmp	r3, #17
 8009388:	d003      	beq.n	8009392 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b12      	cmp	r3, #18
 8009390:	d130      	bne.n	80093f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	2203      	movs	r2, #3
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	43db      	mvns	r3, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4013      	ands	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	fa02 f303 	lsl.w	r3, r2, r3
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093c8:	2201      	movs	r2, #1
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	fa02 f303 	lsl.w	r3, r2, r3
 80093d0:	43db      	mvns	r3, r3
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	4013      	ands	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	091b      	lsrs	r3, r3, #4
 80093de:	f003 0201 	and.w	r2, r3, #1
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	2203      	movs	r2, #3
 8009400:	fa02 f303 	lsl.w	r3, r2, r3
 8009404:	43db      	mvns	r3, r3
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	4013      	ands	r3, r2
 800940a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	689a      	ldr	r2, [r3, #8]
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	fa02 f303 	lsl.w	r3, r2, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4313      	orrs	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d003      	beq.n	8009434 <HAL_GPIO_Init+0x100>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b12      	cmp	r3, #18
 8009432:	d123      	bne.n	800947c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	08da      	lsrs	r2, r3, #3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3208      	adds	r2, #8
 800943c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	220f      	movs	r2, #15
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	43db      	mvns	r3, r3
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	4013      	ands	r3, r2
 8009456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	4313      	orrs	r3, r2
 800946c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	08da      	lsrs	r2, r3, #3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3208      	adds	r2, #8
 8009476:	69b9      	ldr	r1, [r7, #24]
 8009478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	2203      	movs	r2, #3
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	43db      	mvns	r3, r3
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	4013      	ands	r3, r2
 8009492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f003 0203 	and.w	r2, r3, #3
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80be 	beq.w	800963a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094be:	4b66      	ldr	r3, [pc, #408]	; (8009658 <HAL_GPIO_Init+0x324>)
 80094c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c2:	4a65      	ldr	r2, [pc, #404]	; (8009658 <HAL_GPIO_Init+0x324>)
 80094c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094c8:	6453      	str	r3, [r2, #68]	; 0x44
 80094ca:	4b63      	ldr	r3, [pc, #396]	; (8009658 <HAL_GPIO_Init+0x324>)
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80094d6:	4a61      	ldr	r2, [pc, #388]	; (800965c <HAL_GPIO_Init+0x328>)
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	089b      	lsrs	r3, r3, #2
 80094dc:	3302      	adds	r3, #2
 80094de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	220f      	movs	r2, #15
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	43db      	mvns	r3, r3
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	4013      	ands	r3, r2
 80094f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a58      	ldr	r2, [pc, #352]	; (8009660 <HAL_GPIO_Init+0x32c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d037      	beq.n	8009572 <HAL_GPIO_Init+0x23e>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a57      	ldr	r2, [pc, #348]	; (8009664 <HAL_GPIO_Init+0x330>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d031      	beq.n	800956e <HAL_GPIO_Init+0x23a>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a56      	ldr	r2, [pc, #344]	; (8009668 <HAL_GPIO_Init+0x334>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d02b      	beq.n	800956a <HAL_GPIO_Init+0x236>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a55      	ldr	r2, [pc, #340]	; (800966c <HAL_GPIO_Init+0x338>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d025      	beq.n	8009566 <HAL_GPIO_Init+0x232>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a54      	ldr	r2, [pc, #336]	; (8009670 <HAL_GPIO_Init+0x33c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d01f      	beq.n	8009562 <HAL_GPIO_Init+0x22e>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a53      	ldr	r2, [pc, #332]	; (8009674 <HAL_GPIO_Init+0x340>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d019      	beq.n	800955e <HAL_GPIO_Init+0x22a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a52      	ldr	r2, [pc, #328]	; (8009678 <HAL_GPIO_Init+0x344>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d013      	beq.n	800955a <HAL_GPIO_Init+0x226>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a51      	ldr	r2, [pc, #324]	; (800967c <HAL_GPIO_Init+0x348>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00d      	beq.n	8009556 <HAL_GPIO_Init+0x222>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a50      	ldr	r2, [pc, #320]	; (8009680 <HAL_GPIO_Init+0x34c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <HAL_GPIO_Init+0x21e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a4f      	ldr	r2, [pc, #316]	; (8009684 <HAL_GPIO_Init+0x350>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d101      	bne.n	800954e <HAL_GPIO_Init+0x21a>
 800954a:	2309      	movs	r3, #9
 800954c:	e012      	b.n	8009574 <HAL_GPIO_Init+0x240>
 800954e:	230a      	movs	r3, #10
 8009550:	e010      	b.n	8009574 <HAL_GPIO_Init+0x240>
 8009552:	2308      	movs	r3, #8
 8009554:	e00e      	b.n	8009574 <HAL_GPIO_Init+0x240>
 8009556:	2307      	movs	r3, #7
 8009558:	e00c      	b.n	8009574 <HAL_GPIO_Init+0x240>
 800955a:	2306      	movs	r3, #6
 800955c:	e00a      	b.n	8009574 <HAL_GPIO_Init+0x240>
 800955e:	2305      	movs	r3, #5
 8009560:	e008      	b.n	8009574 <HAL_GPIO_Init+0x240>
 8009562:	2304      	movs	r3, #4
 8009564:	e006      	b.n	8009574 <HAL_GPIO_Init+0x240>
 8009566:	2303      	movs	r3, #3
 8009568:	e004      	b.n	8009574 <HAL_GPIO_Init+0x240>
 800956a:	2302      	movs	r3, #2
 800956c:	e002      	b.n	8009574 <HAL_GPIO_Init+0x240>
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <HAL_GPIO_Init+0x240>
 8009572:	2300      	movs	r3, #0
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	f002 0203 	and.w	r2, r2, #3
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	4093      	lsls	r3, r2
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	4313      	orrs	r3, r2
 8009582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009584:	4935      	ldr	r1, [pc, #212]	; (800965c <HAL_GPIO_Init+0x328>)
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	089b      	lsrs	r3, r3, #2
 800958a:	3302      	adds	r3, #2
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009592:	4b3d      	ldr	r3, [pc, #244]	; (8009688 <HAL_GPIO_Init+0x354>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	43db      	mvns	r3, r3
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	4013      	ands	r3, r2
 80095a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80095b6:	4a34      	ldr	r2, [pc, #208]	; (8009688 <HAL_GPIO_Init+0x354>)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80095bc:	4b32      	ldr	r3, [pc, #200]	; (8009688 <HAL_GPIO_Init+0x354>)
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	43db      	mvns	r3, r3
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	4013      	ands	r3, r2
 80095ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d003      	beq.n	80095e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80095e0:	4a29      	ldr	r2, [pc, #164]	; (8009688 <HAL_GPIO_Init+0x354>)
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095e6:	4b28      	ldr	r3, [pc, #160]	; (8009688 <HAL_GPIO_Init+0x354>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	43db      	mvns	r3, r3
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	4013      	ands	r3, r2
 80095f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800960a:	4a1f      	ldr	r2, [pc, #124]	; (8009688 <HAL_GPIO_Init+0x354>)
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009610:	4b1d      	ldr	r3, [pc, #116]	; (8009688 <HAL_GPIO_Init+0x354>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	43db      	mvns	r3, r3
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	4013      	ands	r3, r2
 800961e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	4313      	orrs	r3, r2
 8009632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009634:	4a14      	ldr	r2, [pc, #80]	; (8009688 <HAL_GPIO_Init+0x354>)
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	3301      	adds	r3, #1
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	2b0f      	cmp	r3, #15
 8009644:	f67f ae86 	bls.w	8009354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	3724      	adds	r7, #36	; 0x24
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40023800 	.word	0x40023800
 800965c:	40013800 	.word	0x40013800
 8009660:	40020000 	.word	0x40020000
 8009664:	40020400 	.word	0x40020400
 8009668:	40020800 	.word	0x40020800
 800966c:	40020c00 	.word	0x40020c00
 8009670:	40021000 	.word	0x40021000
 8009674:	40021400 	.word	0x40021400
 8009678:	40021800 	.word	0x40021800
 800967c:	40021c00 	.word	0x40021c00
 8009680:	40022000 	.word	0x40022000
 8009684:	40022400 	.word	0x40022400
 8009688:	40013c00 	.word	0x40013c00

0800968c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	887b      	ldrh	r3, [r7, #2]
 800969e:	4013      	ands	r3, r2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80096a4:	2301      	movs	r3, #1
 80096a6:	73fb      	strb	r3, [r7, #15]
 80096a8:	e001      	b.n	80096ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	807b      	strh	r3, [r7, #2]
 80096c8:	4613      	mov	r3, r2
 80096ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80096cc:	787b      	ldrb	r3, [r7, #1]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096d2:	887a      	ldrh	r2, [r7, #2]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80096d8:	e003      	b.n	80096e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80096da:	887b      	ldrh	r3, [r7, #2]
 80096dc:	041a      	lsls	r2, r3, #16
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	619a      	str	r2, [r3, #24]
}
 80096e2:	bf00      	nop
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695a      	ldr	r2, [r3, #20]
 80096fe:	887b      	ldrh	r3, [r7, #2]
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009706:	887b      	ldrh	r3, [r7, #2]
 8009708:	041a      	lsls	r2, r3, #16
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800970e:	e002      	b.n	8009716 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009710:	887a      	ldrh	r2, [r7, #2]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	619a      	str	r2, [r3, #24]
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800972e:	4b08      	ldr	r3, [pc, #32]	; (8009750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009730:	695a      	ldr	r2, [r3, #20]
 8009732:	88fb      	ldrh	r3, [r7, #6]
 8009734:	4013      	ands	r3, r2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800973a:	4a05      	ldr	r2, [pc, #20]	; (8009750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f806 	bl	8009754 <HAL_GPIO_EXTI_Callback>
  }
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40013c00 	.word	0x40013c00

08009754 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
	...

0800976c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e07f      	b.n	800987e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7fd f9b6 	bl	8006b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2224      	movs	r2, #36	; 0x24
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0201 	bic.w	r2, r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80097bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689a      	ldr	r2, [r3, #8]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d107      	bne.n	80097e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097e2:	609a      	str	r2, [r3, #8]
 80097e4:	e006      	b.n	80097f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80097f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d104      	bne.n	8009806 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009804:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6859      	ldr	r1, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	4b1d      	ldr	r3, [pc, #116]	; (8009888 <HAL_I2C_Init+0x11c>)
 8009812:	430b      	orrs	r3, r1
 8009814:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009824:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691a      	ldr	r2, [r3, #16]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	ea42 0103 	orr.w	r1, r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	021a      	lsls	r2, r3, #8
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	430a      	orrs	r2, r1
 800983e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	69d9      	ldr	r1, [r3, #28]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1a      	ldr	r2, [r3, #32]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0201 	orr.w	r2, r2, #1
 800985e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	02008000 	.word	0x02008000

0800988c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	461a      	mov	r2, r3
 8009898:	460b      	mov	r3, r1
 800989a:	817b      	strh	r3, [r7, #10]
 800989c:	4613      	mov	r3, r2
 800989e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	f040 80da 	bne.w	8009a62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d101      	bne.n	80098bc <HAL_I2C_Master_Transmit+0x30>
 80098b8:	2302      	movs	r3, #2
 80098ba:	e0d3      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1d8>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098c4:	f7fe fa6e 	bl	8007da4 <HAL_GetTick>
 80098c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	2319      	movs	r3, #25
 80098d0:	2201      	movs	r2, #1
 80098d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fc5c 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e0be      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2221      	movs	r2, #33	; 0x21
 80098ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2210      	movs	r2, #16
 80098f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	893a      	ldrh	r2, [r7, #8]
 8009906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009912:	b29b      	uxth	r3, r3
 8009914:	2bff      	cmp	r3, #255	; 0xff
 8009916:	d90e      	bls.n	8009936 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	22ff      	movs	r2, #255	; 0xff
 800991c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	b2da      	uxtb	r2, r3
 8009924:	8979      	ldrh	r1, [r7, #10]
 8009926:	4b51      	ldr	r3, [pc, #324]	; (8009a6c <HAL_I2C_Master_Transmit+0x1e0>)
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 fdbe 	bl	800a4b0 <I2C_TransferConfig>
 8009934:	e06c      	b.n	8009a10 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993a:	b29a      	uxth	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009944:	b2da      	uxtb	r2, r3
 8009946:	8979      	ldrh	r1, [r7, #10]
 8009948:	4b48      	ldr	r3, [pc, #288]	; (8009a6c <HAL_I2C_Master_Transmit+0x1e0>)
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fdad 	bl	800a4b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009956:	e05b      	b.n	8009a10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	6a39      	ldr	r1, [r7, #32]
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fc59 	bl	800a214 <I2C_WaitOnTXISFlagUntilTimeout>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e07b      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	781a      	ldrb	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	1c5a      	adds	r2, r3, #1
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009994:	3b01      	subs	r3, #1
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d034      	beq.n	8009a10 <HAL_I2C_Master_Transmit+0x184>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d130      	bne.n	8009a10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	2200      	movs	r2, #0
 80099b6:	2180      	movs	r1, #128	; 0x80
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fbeb 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e04d      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2bff      	cmp	r3, #255	; 0xff
 80099d0:	d90e      	bls.n	80099f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	22ff      	movs	r2, #255	; 0xff
 80099d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	8979      	ldrh	r1, [r7, #10]
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 fd61 	bl	800a4b0 <I2C_TransferConfig>
 80099ee:	e00f      	b.n	8009a10 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	8979      	ldrh	r1, [r7, #10]
 8009a02:	2300      	movs	r3, #0
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 fd50 	bl	800a4b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d19e      	bne.n	8009958 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	6a39      	ldr	r1, [r7, #32]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fc38 	bl	800a294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e01a      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2220      	movs	r2, #32
 8009a34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6859      	ldr	r1, [r3, #4]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <HAL_I2C_Master_Transmit+0x1e4>)
 8009a42:	400b      	ands	r3, r1
 8009a44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e000      	b.n	8009a64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009a62:	2302      	movs	r3, #2
  }
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	80002000 	.word	0x80002000
 8009a70:	fe00e800 	.word	0xfe00e800

08009a74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	460b      	mov	r3, r1
 8009a82:	817b      	strh	r3, [r7, #10]
 8009a84:	4613      	mov	r3, r2
 8009a86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	f040 80db 	bne.w	8009c4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_I2C_Master_Receive+0x30>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e0d4      	b.n	8009c4e <HAL_I2C_Master_Receive+0x1da>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009aac:	f7fe f97a 	bl	8007da4 <HAL_GetTick>
 8009ab0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	2319      	movs	r3, #25
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fb68 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e0bf      	b.n	8009c4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2222      	movs	r2, #34	; 0x22
 8009ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2210      	movs	r2, #16
 8009ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	893a      	ldrh	r2, [r7, #8]
 8009aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2bff      	cmp	r3, #255	; 0xff
 8009afe:	d90e      	bls.n	8009b1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	22ff      	movs	r2, #255	; 0xff
 8009b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	8979      	ldrh	r1, [r7, #10]
 8009b0e:	4b52      	ldr	r3, [pc, #328]	; (8009c58 <HAL_I2C_Master_Receive+0x1e4>)
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 fcca 	bl	800a4b0 <I2C_TransferConfig>
 8009b1c:	e06d      	b.n	8009bfa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	8979      	ldrh	r1, [r7, #10]
 8009b30:	4b49      	ldr	r3, [pc, #292]	; (8009c58 <HAL_I2C_Master_Receive+0x1e4>)
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fcb9 	bl	800a4b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009b3e:	e05c      	b.n	8009bfa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	6a39      	ldr	r1, [r7, #32]
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fbe1 	bl	800a30c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e07c      	b.n	8009c4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d034      	beq.n	8009bfa <HAL_I2C_Master_Receive+0x186>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d130      	bne.n	8009bfa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2180      	movs	r1, #128	; 0x80
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 faf6 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e04d      	b.n	8009c4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2bff      	cmp	r3, #255	; 0xff
 8009bba:	d90e      	bls.n	8009bda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	22ff      	movs	r2, #255	; 0xff
 8009bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	8979      	ldrh	r1, [r7, #10]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fc6c 	bl	800a4b0 <I2C_TransferConfig>
 8009bd8:	e00f      	b.n	8009bfa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	8979      	ldrh	r1, [r7, #10]
 8009bec:	2300      	movs	r3, #0
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 fc5b 	bl	800a4b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d19d      	bne.n	8009b40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	6a39      	ldr	r1, [r7, #32]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 fb43 	bl	800a294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e01a      	b.n	8009c4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6859      	ldr	r1, [r3, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <HAL_I2C_Master_Receive+0x1e8>)
 8009c2c:	400b      	ands	r3, r1
 8009c2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2220      	movs	r2, #32
 8009c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e000      	b.n	8009c4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009c4c:	2302      	movs	r3, #2
  }
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	80002400 	.word	0x80002400
 8009c5c:	fe00e800 	.word	0xfe00e800

08009c60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	817b      	strh	r3, [r7, #10]
 8009c72:	460b      	mov	r3, r1
 8009c74:	813b      	strh	r3, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	f040 80fd 	bne.w	8009e82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <HAL_I2C_Mem_Read+0x34>
 8009c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e0f1      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <HAL_I2C_Mem_Read+0x4e>
 8009caa:	2302      	movs	r3, #2
 8009cac:	e0ea      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009cb6:	f7fe f875 	bl	8007da4 <HAL_GetTick>
 8009cba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	2319      	movs	r3, #25
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 fa63 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e0d5      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2222      	movs	r2, #34	; 0x22
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2240      	movs	r2, #64	; 0x40
 8009ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6a3a      	ldr	r2, [r7, #32]
 8009cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d00:	88f8      	ldrh	r0, [r7, #6]
 8009d02:	893a      	ldrh	r2, [r7, #8]
 8009d04:	8979      	ldrh	r1, [r7, #10]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	4603      	mov	r3, r0
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f9c7 	bl	800a0a4 <I2C_RequestMemoryRead>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0ad      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2bff      	cmp	r3, #255	; 0xff
 8009d30:	d90e      	bls.n	8009d50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	8979      	ldrh	r1, [r7, #10]
 8009d40:	4b52      	ldr	r3, [pc, #328]	; (8009e8c <HAL_I2C_Mem_Read+0x22c>)
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 fbb1 	bl	800a4b0 <I2C_TransferConfig>
 8009d4e:	e00f      	b.n	8009d70 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	8979      	ldrh	r1, [r7, #10]
 8009d62:	4b4a      	ldr	r3, [pc, #296]	; (8009e8c <HAL_I2C_Mem_Read+0x22c>)
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 fba0 	bl	800a4b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	2200      	movs	r2, #0
 8009d78:	2104      	movs	r1, #4
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fa0a 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e07c      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	b2d2      	uxtb	r2, r2
 8009d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da6:	3b01      	subs	r3, #1
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	3b01      	subs	r3, #1
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d034      	beq.n	8009e30 <HAL_I2C_Mem_Read+0x1d0>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d130      	bne.n	8009e30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2180      	movs	r1, #128	; 0x80
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 f9db 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e04d      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2bff      	cmp	r3, #255	; 0xff
 8009df0:	d90e      	bls.n	8009e10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	8979      	ldrh	r1, [r7, #10]
 8009e00:	2300      	movs	r3, #0
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fb51 	bl	800a4b0 <I2C_TransferConfig>
 8009e0e:	e00f      	b.n	8009e30 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	8979      	ldrh	r1, [r7, #10]
 8009e22:	2300      	movs	r3, #0
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fb40 	bl	800a4b0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d19a      	bne.n	8009d70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 fa28 	bl	800a294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e01a      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2220      	movs	r2, #32
 8009e54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6859      	ldr	r1, [r3, #4]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <HAL_I2C_Mem_Read+0x230>)
 8009e62:	400b      	ands	r3, r1
 8009e64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e000      	b.n	8009e84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009e82:	2302      	movs	r3, #2
  }
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	80002400 	.word	0x80002400
 8009e90:	fe00e800 	.word	0xfe00e800

08009e94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	f040 80ef 	bne.w	800a094 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec4:	d101      	bne.n	8009eca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e0e5      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_I2C_IsDeviceReady+0x44>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e0de      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2224      	movs	r2, #36	; 0x24
 8009ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d105      	bne.n	8009f02 <HAL_I2C_IsDeviceReady+0x6e>
 8009ef6:	897b      	ldrh	r3, [r7, #10]
 8009ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009efc:	4b68      	ldr	r3, [pc, #416]	; (800a0a0 <HAL_I2C_IsDeviceReady+0x20c>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	e004      	b.n	8009f0c <HAL_I2C_IsDeviceReady+0x78>
 8009f02:	897b      	ldrh	r3, [r7, #10]
 8009f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f08:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	6812      	ldr	r2, [r2, #0]
 8009f10:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009f12:	f7fd ff47 	bl	8007da4 <HAL_GetTick>
 8009f16:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	bf0c      	ite	eq
 8009f26:	2301      	moveq	r3, #1
 8009f28:	2300      	movne	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	bf0c      	ite	eq
 8009f3c:	2301      	moveq	r3, #1
 8009f3e:	2300      	movne	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009f44:	e034      	b.n	8009fb0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4c:	d01a      	beq.n	8009f84 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f4e:	f7fd ff29 	bl	8007da4 <HAL_GetTick>
 8009f52:	4602      	mov	r2, r0
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d302      	bcc.n	8009f64 <HAL_I2C_IsDeviceReady+0xd0>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10f      	bne.n	8009f84 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f70:	f043 0220 	orr.w	r2, r3, #32
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e088      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	bf0c      	ite	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	2300      	movne	r3, #0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	bf0c      	ite	eq
 8009fa8:	2301      	moveq	r3, #1
 8009faa:	2300      	movne	r3, #0
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009fb0:	7ffb      	ldrb	r3, [r7, #31]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <HAL_I2C_IsDeviceReady+0x128>
 8009fb6:	7fbb      	ldrb	r3, [r7, #30]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0c4      	beq.n	8009f46 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	f003 0310 	and.w	r3, r3, #16
 8009fc6:	2b10      	cmp	r3, #16
 8009fc8:	d01a      	beq.n	800a000 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2120      	movs	r1, #32
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f8dd 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e058      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e04a      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2200      	movs	r2, #0
 800a008:	2120      	movs	r1, #32
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 f8c2 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e03d      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2210      	movs	r2, #16
 800a020:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2220      	movs	r2, #32
 800a028:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d118      	bne.n	800a064 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a040:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2200      	movs	r2, #0
 800a04a:	2120      	movs	r1, #32
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f8a1 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e01c      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2220      	movs	r2, #32
 800a062:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3301      	adds	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	429a      	cmp	r2, r3
 800a070:	f63f af3d 	bhi.w	8009eee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2220      	movs	r2, #32
 800a078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a080:	f043 0220 	orr.w	r2, r3, #32
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800a094:	2302      	movs	r3, #2
  }
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	02002000 	.word	0x02002000

0800a0a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	817b      	strh	r3, [r7, #10]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	813b      	strh	r3, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	8979      	ldrh	r1, [r7, #10]
 800a0c4:	4b20      	ldr	r3, [pc, #128]	; (800a148 <I2C_RequestMemoryRead+0xa4>)
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 f9f0 	bl	800a4b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0d0:	69fa      	ldr	r2, [r7, #28]
 800a0d2:	69b9      	ldr	r1, [r7, #24]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f89d 	bl	800a214 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e02c      	b.n	800a13e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0e4:	88fb      	ldrh	r3, [r7, #6]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d105      	bne.n	800a0f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0ea:	893b      	ldrh	r3, [r7, #8]
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a0f4:	e015      	b.n	800a122 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0f6:	893b      	ldrh	r3, [r7, #8]
 800a0f8:	0a1b      	lsrs	r3, r3, #8
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	69b9      	ldr	r1, [r7, #24]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f883 	bl	800a214 <I2C_WaitOnTXISFlagUntilTimeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e012      	b.n	800a13e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a118:	893b      	ldrh	r3, [r7, #8]
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	2200      	movs	r2, #0
 800a12a:	2140      	movs	r1, #64	; 0x40
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 f831 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	80002000 	.word	0x80002000

0800a14c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d103      	bne.n	800a16a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b01      	cmp	r3, #1
 800a176:	d007      	beq.n	800a188 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	699a      	ldr	r2, [r3, #24]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	619a      	str	r2, [r3, #24]
  }
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1a4:	e022      	b.n	800a1ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d01e      	beq.n	800a1ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ae:	f7fd fdf9 	bl	8007da4 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d302      	bcc.n	800a1c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d113      	bne.n	800a1ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c8:	f043 0220 	orr.w	r2, r3, #32
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e00f      	b.n	800a20c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	699a      	ldr	r2, [r3, #24]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2301      	moveq	r3, #1
 800a1fe:	2300      	movne	r3, #0
 800a200:	b2db      	uxtb	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	429a      	cmp	r2, r3
 800a208:	d0cd      	beq.n	800a1a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a220:	e02c      	b.n	800a27c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 f8dc 	bl	800a3e4 <I2C_IsAcknowledgeFailed>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e02a      	b.n	800a28c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d01e      	beq.n	800a27c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a23e:	f7fd fdb1 	bl	8007da4 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d302      	bcc.n	800a254 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d113      	bne.n	800a27c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a258:	f043 0220 	orr.w	r2, r3, #32
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2220      	movs	r2, #32
 800a264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e007      	b.n	800a28c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b02      	cmp	r3, #2
 800a288:	d1cb      	bne.n	800a222 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2a0:	e028      	b.n	800a2f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f89c 	bl	800a3e4 <I2C_IsAcknowledgeFailed>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e026      	b.n	800a304 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b6:	f7fd fd75 	bl	8007da4 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d302      	bcc.n	800a2cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d113      	bne.n	800a2f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d0:	f043 0220 	orr.w	r2, r3, #32
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e007      	b.n	800a304 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b20      	cmp	r3, #32
 800a300:	d1cf      	bne.n	800a2a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a318:	e055      	b.n	800a3c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	68b9      	ldr	r1, [r7, #8]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 f860 	bl	800a3e4 <I2C_IsAcknowledgeFailed>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e053      	b.n	800a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	f003 0320 	and.w	r3, r3, #32
 800a338:	2b20      	cmp	r3, #32
 800a33a:	d129      	bne.n	800a390 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b04      	cmp	r3, #4
 800a348:	d105      	bne.n	800a356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	e03f      	b.n	800a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2220      	movs	r2, #32
 800a35c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6859      	ldr	r1, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	4b1d      	ldr	r3, [pc, #116]	; (800a3e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a36a:	400b      	ands	r3, r1
 800a36c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e022      	b.n	800a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a390:	f7fd fd08 	bl	8007da4 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d302      	bcc.n	800a3a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10f      	bne.n	800a3c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3aa:	f043 0220 	orr.w	r2, r3, #32
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e007      	b.n	800a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b04      	cmp	r3, #4
 800a3d2:	d1a2      	bne.n	800a31a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	fe00e800 	.word	0xfe00e800

0800a3e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f003 0310 	and.w	r3, r3, #16
 800a3fa:	2b10      	cmp	r3, #16
 800a3fc:	d151      	bne.n	800a4a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3fe:	e022      	b.n	800a446 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d01e      	beq.n	800a446 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a408:	f7fd fccc 	bl	8007da4 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	429a      	cmp	r2, r3
 800a416:	d302      	bcc.n	800a41e <I2C_IsAcknowledgeFailed+0x3a>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d113      	bne.n	800a446 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a422:	f043 0220 	orr.w	r2, r3, #32
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e02e      	b.n	800a4a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	f003 0320 	and.w	r3, r3, #32
 800a450:	2b20      	cmp	r3, #32
 800a452:	d1d5      	bne.n	800a400 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2210      	movs	r2, #16
 800a45a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2220      	movs	r2, #32
 800a462:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7ff fe71 	bl	800a14c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6859      	ldr	r1, [r3, #4]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <I2C_IsAcknowledgeFailed+0xc8>)
 800a476:	400b      	ands	r3, r1
 800a478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a47e:	f043 0204 	orr.w	r2, r3, #4
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2220      	movs	r2, #32
 800a48a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	fe00e800 	.word	0xfe00e800

0800a4b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	607b      	str	r3, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	817b      	strh	r3, [r7, #10]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	0d5b      	lsrs	r3, r3, #21
 800a4cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <I2C_TransferConfig+0x58>)
 800a4d2:	430b      	orrs	r3, r1
 800a4d4:	43db      	mvns	r3, r3
 800a4d6:	ea02 0103 	and.w	r1, r2, r3
 800a4da:	897b      	ldrh	r3, [r7, #10]
 800a4dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a4e0:	7a7b      	ldrb	r3, [r7, #9]
 800a4e2:	041b      	lsls	r3, r3, #16
 800a4e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	03ff63ff 	.word	0x03ff63ff

0800a50c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b20      	cmp	r3, #32
 800a520:	d138      	bne.n	800a594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d101      	bne.n	800a530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a52c:	2302      	movs	r3, #2
 800a52e:	e032      	b.n	800a596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2224      	movs	r2, #36	; 0x24
 800a53c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 0201 	bic.w	r2, r2, #1
 800a54e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a55e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6819      	ldr	r1, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f042 0201 	orr.w	r2, r2, #1
 800a57e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2220      	movs	r2, #32
 800a584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	e000      	b.n	800a596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a594:	2302      	movs	r3, #2
  }
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d139      	bne.n	800a62c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e033      	b.n	800a62e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2224      	movs	r2, #36	; 0x24
 800a5d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0201 	bic.w	r2, r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a5f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	e000      	b.n	800a62e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a62c:	2302      	movs	r3, #2
  }
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
	...

0800a63c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a644:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a648:	4a0a      	ldr	r2, [pc, #40]	; (800a674 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a64a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a64e:	6453      	str	r3, [r2, #68]	; 0x44
 800a650:	4b08      	ldr	r3, [pc, #32]	; (800a674 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	4905      	ldr	r1, [pc, #20]	; (800a678 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4313      	orrs	r3, r2
 800a666:	604b      	str	r3, [r1, #4]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	40023800 	.word	0x40023800
 800a678:	40013800 	.word	0x40013800

0800a67c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67e:	b08f      	sub	sp, #60	; 0x3c
 800a680:	af0a      	add	r7, sp, #40	; 0x28
 800a682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e116      	b.n	800a8bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fc fdcd 	bl	8007248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2203      	movs	r2, #3
 800a6b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d102      	bne.n	800a6c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f003 fd73 	bl	800e1b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	603b      	str	r3, [r7, #0]
 800a6d8:	687e      	ldr	r6, [r7, #4]
 800a6da:	466d      	mov	r5, sp
 800a6dc:	f106 0410 	add.w	r4, r6, #16
 800a6e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a6ec:	e885 0003 	stmia.w	r5, {r0, r1}
 800a6f0:	1d33      	adds	r3, r6, #4
 800a6f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6f4:	6838      	ldr	r0, [r7, #0]
 800a6f6:	f003 fd07 	bl	800e108 <USB_CoreInit>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d005      	beq.n	800a70c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2202      	movs	r2, #2
 800a704:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e0d7      	b.n	800a8bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2100      	movs	r1, #0
 800a712:	4618      	mov	r0, r3
 800a714:	f003 fd61 	bl	800e1da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
 800a71c:	e04a      	b.n	800a7b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a71e:	7bfa      	ldrb	r2, [r7, #15]
 800a720:	6879      	ldr	r1, [r7, #4]
 800a722:	4613      	mov	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	1a9b      	subs	r3, r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	440b      	add	r3, r1
 800a72c:	333d      	adds	r3, #61	; 0x3d
 800a72e:	2201      	movs	r2, #1
 800a730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a732:	7bfa      	ldrb	r2, [r7, #15]
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	1a9b      	subs	r3, r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	333c      	adds	r3, #60	; 0x3c
 800a742:	7bfa      	ldrb	r2, [r7, #15]
 800a744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a746:	7bfa      	ldrb	r2, [r7, #15]
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	b298      	uxth	r0, r3
 800a74c:	6879      	ldr	r1, [r7, #4]
 800a74e:	4613      	mov	r3, r2
 800a750:	00db      	lsls	r3, r3, #3
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	440b      	add	r3, r1
 800a758:	3342      	adds	r3, #66	; 0x42
 800a75a:	4602      	mov	r2, r0
 800a75c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a75e:	7bfa      	ldrb	r2, [r7, #15]
 800a760:	6879      	ldr	r1, [r7, #4]
 800a762:	4613      	mov	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	1a9b      	subs	r3, r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	440b      	add	r3, r1
 800a76c:	333f      	adds	r3, #63	; 0x3f
 800a76e:	2200      	movs	r2, #0
 800a770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a772:	7bfa      	ldrb	r2, [r7, #15]
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	4613      	mov	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	3344      	adds	r3, #68	; 0x44
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a786:	7bfa      	ldrb	r2, [r7, #15]
 800a788:	6879      	ldr	r1, [r7, #4]
 800a78a:	4613      	mov	r3, r2
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	1a9b      	subs	r3, r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	440b      	add	r3, r1
 800a794:	3348      	adds	r3, #72	; 0x48
 800a796:	2200      	movs	r2, #0
 800a798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a79a:	7bfa      	ldrb	r2, [r7, #15]
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	1a9b      	subs	r3, r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	3350      	adds	r3, #80	; 0x50
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	73fb      	strb	r3, [r7, #15]
 800a7b4:	7bfa      	ldrb	r2, [r7, #15]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d3af      	bcc.n	800a71e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]
 800a7c2:	e044      	b.n	800a84e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a7c4:	7bfa      	ldrb	r2, [r7, #15]
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	1a9b      	subs	r3, r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	440b      	add	r3, r1
 800a7d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a7da:	7bfa      	ldrb	r2, [r7, #15]
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a7ec:	7bfa      	ldrb	r2, [r7, #15]
 800a7ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a7f0:	7bfa      	ldrb	r2, [r7, #15]
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	1a9b      	subs	r3, r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	440b      	add	r3, r1
 800a7fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a802:	2200      	movs	r2, #0
 800a804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a806:	7bfa      	ldrb	r2, [r7, #15]
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a81c:	7bfa      	ldrb	r2, [r7, #15]
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	4613      	mov	r3, r2
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	440b      	add	r3, r1
 800a82a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a832:	7bfa      	ldrb	r2, [r7, #15]
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	1a9b      	subs	r3, r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	3301      	adds	r3, #1
 800a84c:	73fb      	strb	r3, [r7, #15]
 800a84e:	7bfa      	ldrb	r2, [r7, #15]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	429a      	cmp	r2, r3
 800a856:	d3b5      	bcc.n	800a7c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	687e      	ldr	r6, [r7, #4]
 800a860:	466d      	mov	r5, sp
 800a862:	f106 0410 	add.w	r4, r6, #16
 800a866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a86a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a86c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a86e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a872:	e885 0003 	stmia.w	r5, {r0, r1}
 800a876:	1d33      	adds	r3, r6, #4
 800a878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a87a:	6838      	ldr	r0, [r7, #0]
 800a87c:	f003 fcd8 	bl	800e230 <USB_DevInit>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2202      	movs	r2, #2
 800a88a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e014      	b.n	800a8bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d102      	bne.n	800a8b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f80a 	bl	800a8c4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f003 fe8a 	bl	800e5ce <USB_DevDisconnect>

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <HAL_PCDEx_ActivateLPM+0x44>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	10000003 	.word	0x10000003

0800a90c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a91a:	6013      	str	r3, [r2, #0]
}
 800a91c:	bf00      	nop
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40007000 	.word	0x40007000

0800a92c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a934:	2300      	movs	r3, #0
 800a936:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e29b      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 8087 	beq.w	800aa5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a950:	4b96      	ldr	r3, [pc, #600]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f003 030c 	and.w	r3, r3, #12
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d00c      	beq.n	800a976 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a95c:	4b93      	ldr	r3, [pc, #588]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f003 030c 	and.w	r3, r3, #12
 800a964:	2b08      	cmp	r3, #8
 800a966:	d112      	bne.n	800a98e <HAL_RCC_OscConfig+0x62>
 800a968:	4b90      	ldr	r3, [pc, #576]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a974:	d10b      	bne.n	800a98e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a976:	4b8d      	ldr	r3, [pc, #564]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d06c      	beq.n	800aa5c <HAL_RCC_OscConfig+0x130>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d168      	bne.n	800aa5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e275      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a996:	d106      	bne.n	800a9a6 <HAL_RCC_OscConfig+0x7a>
 800a998:	4b84      	ldr	r3, [pc, #528]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a83      	ldr	r2, [pc, #524]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a99e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	e02e      	b.n	800aa04 <HAL_RCC_OscConfig+0xd8>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10c      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x9c>
 800a9ae:	4b7f      	ldr	r3, [pc, #508]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a7e      	ldr	r2, [pc, #504]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	4b7c      	ldr	r3, [pc, #496]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a7b      	ldr	r2, [pc, #492]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	e01d      	b.n	800aa04 <HAL_RCC_OscConfig+0xd8>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9d0:	d10c      	bne.n	800a9ec <HAL_RCC_OscConfig+0xc0>
 800a9d2:	4b76      	ldr	r3, [pc, #472]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a75      	ldr	r2, [pc, #468]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	4b73      	ldr	r3, [pc, #460]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a72      	ldr	r2, [pc, #456]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	e00b      	b.n	800aa04 <HAL_RCC_OscConfig+0xd8>
 800a9ec:	4b6f      	ldr	r3, [pc, #444]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a6e      	ldr	r2, [pc, #440]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	4b6c      	ldr	r3, [pc, #432]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a6b      	ldr	r2, [pc, #428]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800a9fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d013      	beq.n	800aa34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0c:	f7fd f9ca 	bl	8007da4 <HAL_GetTick>
 800aa10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa12:	e008      	b.n	800aa26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa14:	f7fd f9c6 	bl	8007da4 <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b64      	cmp	r3, #100	; 0x64
 800aa20:	d901      	bls.n	800aa26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e229      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa26:	4b61      	ldr	r3, [pc, #388]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0f0      	beq.n	800aa14 <HAL_RCC_OscConfig+0xe8>
 800aa32:	e014      	b.n	800aa5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa34:	f7fd f9b6 	bl	8007da4 <HAL_GetTick>
 800aa38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa3a:	e008      	b.n	800aa4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa3c:	f7fd f9b2 	bl	8007da4 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	2b64      	cmp	r3, #100	; 0x64
 800aa48:	d901      	bls.n	800aa4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e215      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aa4e:	4b57      	ldr	r3, [pc, #348]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f0      	bne.n	800aa3c <HAL_RCC_OscConfig+0x110>
 800aa5a:	e000      	b.n	800aa5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 0302 	and.w	r3, r3, #2
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d069      	beq.n	800ab3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa6a:	4b50      	ldr	r3, [pc, #320]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f003 030c 	and.w	r3, r3, #12
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00b      	beq.n	800aa8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa76:	4b4d      	ldr	r3, [pc, #308]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f003 030c 	and.w	r3, r3, #12
 800aa7e:	2b08      	cmp	r3, #8
 800aa80:	d11c      	bne.n	800aabc <HAL_RCC_OscConfig+0x190>
 800aa82:	4b4a      	ldr	r3, [pc, #296]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d116      	bne.n	800aabc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa8e:	4b47      	ldr	r3, [pc, #284]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d005      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x17a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d001      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e1e9      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaa6:	4b41      	ldr	r3, [pc, #260]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	493d      	ldr	r1, [pc, #244]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aaba:	e040      	b.n	800ab3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d023      	beq.n	800ab0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aac4:	4b39      	ldr	r3, [pc, #228]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a38      	ldr	r2, [pc, #224]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad0:	f7fd f968 	bl	8007da4 <HAL_GetTick>
 800aad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aad8:	f7fd f964 	bl	8007da4 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e1c7      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aaea:	4b30      	ldr	r3, [pc, #192]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0f0      	beq.n	800aad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaf6:	4b2d      	ldr	r3, [pc, #180]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	4929      	ldr	r1, [pc, #164]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]
 800ab0a:	e018      	b.n	800ab3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab0c:	4b27      	ldr	r3, [pc, #156]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a26      	ldr	r2, [pc, #152]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab12:	f023 0301 	bic.w	r3, r3, #1
 800ab16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab18:	f7fd f944 	bl	8007da4 <HAL_GetTick>
 800ab1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab1e:	e008      	b.n	800ab32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab20:	f7fd f940 	bl	8007da4 <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e1a3      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ab32:	4b1e      	ldr	r3, [pc, #120]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f0      	bne.n	800ab20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0308 	and.w	r3, r3, #8
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d038      	beq.n	800abbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d019      	beq.n	800ab86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab52:	4b16      	ldr	r3, [pc, #88]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab56:	4a15      	ldr	r2, [pc, #84]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab58:	f043 0301 	orr.w	r3, r3, #1
 800ab5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab5e:	f7fd f921 	bl	8007da4 <HAL_GetTick>
 800ab62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab66:	f7fd f91d 	bl	8007da4 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e180      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab78:	4b0c      	ldr	r3, [pc, #48]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f0      	beq.n	800ab66 <HAL_RCC_OscConfig+0x23a>
 800ab84:	e01a      	b.n	800abbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab8a:	4a08      	ldr	r2, [pc, #32]	; (800abac <HAL_RCC_OscConfig+0x280>)
 800ab8c:	f023 0301 	bic.w	r3, r3, #1
 800ab90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab92:	f7fd f907 	bl	8007da4 <HAL_GetTick>
 800ab96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab98:	e00a      	b.n	800abb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab9a:	f7fd f903 	bl	8007da4 <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d903      	bls.n	800abb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e166      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
 800abac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800abb0:	4b92      	ldr	r3, [pc, #584]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800abb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1ee      	bne.n	800ab9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 80a4 	beq.w	800ad12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800abca:	4b8c      	ldr	r3, [pc, #560]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10d      	bne.n	800abf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800abd6:	4b89      	ldr	r3, [pc, #548]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	4a88      	ldr	r2, [pc, #544]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800abdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abe0:	6413      	str	r3, [r2, #64]	; 0x40
 800abe2:	4b86      	ldr	r3, [pc, #536]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abea:	60bb      	str	r3, [r7, #8]
 800abec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abee:	2301      	movs	r3, #1
 800abf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abf2:	4b83      	ldr	r3, [pc, #524]	; (800ae00 <HAL_RCC_OscConfig+0x4d4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d118      	bne.n	800ac30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800abfe:	4b80      	ldr	r3, [pc, #512]	; (800ae00 <HAL_RCC_OscConfig+0x4d4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a7f      	ldr	r2, [pc, #508]	; (800ae00 <HAL_RCC_OscConfig+0x4d4>)
 800ac04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac0a:	f7fd f8cb 	bl	8007da4 <HAL_GetTick>
 800ac0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac10:	e008      	b.n	800ac24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac12:	f7fd f8c7 	bl	8007da4 <HAL_GetTick>
 800ac16:	4602      	mov	r2, r0
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	2b64      	cmp	r3, #100	; 0x64
 800ac1e:	d901      	bls.n	800ac24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e12a      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac24:	4b76      	ldr	r3, [pc, #472]	; (800ae00 <HAL_RCC_OscConfig+0x4d4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0f0      	beq.n	800ac12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d106      	bne.n	800ac46 <HAL_RCC_OscConfig+0x31a>
 800ac38:	4b70      	ldr	r3, [pc, #448]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3c:	4a6f      	ldr	r2, [pc, #444]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	6713      	str	r3, [r2, #112]	; 0x70
 800ac44:	e02d      	b.n	800aca2 <HAL_RCC_OscConfig+0x376>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10c      	bne.n	800ac68 <HAL_RCC_OscConfig+0x33c>
 800ac4e:	4b6b      	ldr	r3, [pc, #428]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac52:	4a6a      	ldr	r2, [pc, #424]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac54:	f023 0301 	bic.w	r3, r3, #1
 800ac58:	6713      	str	r3, [r2, #112]	; 0x70
 800ac5a:	4b68      	ldr	r3, [pc, #416]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5e:	4a67      	ldr	r2, [pc, #412]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac60:	f023 0304 	bic.w	r3, r3, #4
 800ac64:	6713      	str	r3, [r2, #112]	; 0x70
 800ac66:	e01c      	b.n	800aca2 <HAL_RCC_OscConfig+0x376>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d10c      	bne.n	800ac8a <HAL_RCC_OscConfig+0x35e>
 800ac70:	4b62      	ldr	r3, [pc, #392]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac74:	4a61      	ldr	r2, [pc, #388]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac76:	f043 0304 	orr.w	r3, r3, #4
 800ac7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac7c:	4b5f      	ldr	r3, [pc, #380]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac80:	4a5e      	ldr	r2, [pc, #376]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	6713      	str	r3, [r2, #112]	; 0x70
 800ac88:	e00b      	b.n	800aca2 <HAL_RCC_OscConfig+0x376>
 800ac8a:	4b5c      	ldr	r3, [pc, #368]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac8e:	4a5b      	ldr	r2, [pc, #364]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac90:	f023 0301 	bic.w	r3, r3, #1
 800ac94:	6713      	str	r3, [r2, #112]	; 0x70
 800ac96:	4b59      	ldr	r3, [pc, #356]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9a:	4a58      	ldr	r2, [pc, #352]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ac9c:	f023 0304 	bic.w	r3, r3, #4
 800aca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d015      	beq.n	800acd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acaa:	f7fd f87b 	bl	8007da4 <HAL_GetTick>
 800acae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acb0:	e00a      	b.n	800acc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb2:	f7fd f877 	bl	8007da4 <HAL_GetTick>
 800acb6:	4602      	mov	r2, r0
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d901      	bls.n	800acc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800acc4:	2303      	movs	r3, #3
 800acc6:	e0d8      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acc8:	4b4c      	ldr	r3, [pc, #304]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800acca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0ee      	beq.n	800acb2 <HAL_RCC_OscConfig+0x386>
 800acd4:	e014      	b.n	800ad00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acd6:	f7fd f865 	bl	8007da4 <HAL_GetTick>
 800acda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800acdc:	e00a      	b.n	800acf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acde:	f7fd f861 	bl	8007da4 <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acec:	4293      	cmp	r3, r2
 800acee:	d901      	bls.n	800acf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e0c2      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800acf4:	4b41      	ldr	r3, [pc, #260]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800acf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf8:	f003 0302 	and.w	r3, r3, #2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1ee      	bne.n	800acde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d105      	bne.n	800ad12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad06:	4b3d      	ldr	r3, [pc, #244]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	4a3c      	ldr	r2, [pc, #240]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f000 80ae 	beq.w	800ae78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad1c:	4b37      	ldr	r3, [pc, #220]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f003 030c 	and.w	r3, r3, #12
 800ad24:	2b08      	cmp	r3, #8
 800ad26:	d06d      	beq.n	800ae04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d14b      	bne.n	800adc8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad30:	4b32      	ldr	r3, [pc, #200]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a31      	ldr	r2, [pc, #196]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad3c:	f7fd f832 	bl	8007da4 <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad44:	f7fd f82e 	bl	8007da4 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e091      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad56:	4b29      	ldr	r3, [pc, #164]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f0      	bne.n	800ad44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	69da      	ldr	r2, [r3, #28]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	019b      	lsls	r3, r3, #6
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad78:	085b      	lsrs	r3, r3, #1
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	041b      	lsls	r3, r3, #16
 800ad7e:	431a      	orrs	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	061b      	lsls	r3, r3, #24
 800ad86:	431a      	orrs	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8c:	071b      	lsls	r3, r3, #28
 800ad8e:	491b      	ldr	r1, [pc, #108]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad94:	4b19      	ldr	r3, [pc, #100]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a18      	ldr	r2, [pc, #96]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800ad9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada0:	f7fd f800 	bl	8007da4 <HAL_GetTick>
 800ada4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ada6:	e008      	b.n	800adba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ada8:	f7fc fffc 	bl	8007da4 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d901      	bls.n	800adba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e05f      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adba:	4b10      	ldr	r3, [pc, #64]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0f0      	beq.n	800ada8 <HAL_RCC_OscConfig+0x47c>
 800adc6:	e057      	b.n	800ae78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adc8:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a0b      	ldr	r2, [pc, #44]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800adce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800add2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add4:	f7fc ffe6 	bl	8007da4 <HAL_GetTick>
 800add8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adda:	e008      	b.n	800adee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800addc:	f7fc ffe2 	bl	8007da4 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e045      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adee:	4b03      	ldr	r3, [pc, #12]	; (800adfc <HAL_RCC_OscConfig+0x4d0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1f0      	bne.n	800addc <HAL_RCC_OscConfig+0x4b0>
 800adfa:	e03d      	b.n	800ae78 <HAL_RCC_OscConfig+0x54c>
 800adfc:	40023800 	.word	0x40023800
 800ae00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ae04:	4b1f      	ldr	r3, [pc, #124]	; (800ae84 <HAL_RCC_OscConfig+0x558>)
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d030      	beq.n	800ae74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d129      	bne.n	800ae74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d122      	bne.n	800ae74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ae34:	4013      	ands	r3, r2
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d119      	bne.n	800ae74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d10f      	bne.n	800ae74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d107      	bne.n	800ae74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d001      	beq.n	800ae78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	40023800 	.word	0x40023800

0800ae88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e0d0      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aea0:	4b6a      	ldr	r3, [pc, #424]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 030f 	and.w	r3, r3, #15
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d910      	bls.n	800aed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeae:	4b67      	ldr	r3, [pc, #412]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f023 020f 	bic.w	r2, r3, #15
 800aeb6:	4965      	ldr	r1, [pc, #404]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aebe:	4b63      	ldr	r3, [pc, #396]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d001      	beq.n	800aed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e0b8      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0302 	and.w	r3, r3, #2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d020      	beq.n	800af1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aee8:	4b59      	ldr	r3, [pc, #356]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	4a58      	ldr	r2, [pc, #352]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800aeee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0308 	and.w	r3, r3, #8
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d005      	beq.n	800af0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af00:	4b53      	ldr	r3, [pc, #332]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	4a52      	ldr	r2, [pc, #328]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af0c:	4b50      	ldr	r3, [pc, #320]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	494d      	ldr	r1, [pc, #308]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d040      	beq.n	800afac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d107      	bne.n	800af42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af32:	4b47      	ldr	r3, [pc, #284]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d115      	bne.n	800af6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e07f      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d107      	bne.n	800af5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af4a:	4b41      	ldr	r3, [pc, #260]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af52:	2b00      	cmp	r3, #0
 800af54:	d109      	bne.n	800af6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e073      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af5a:	4b3d      	ldr	r3, [pc, #244]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e06b      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af6a:	4b39      	ldr	r3, [pc, #228]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f023 0203 	bic.w	r2, r3, #3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	4936      	ldr	r1, [pc, #216]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af7c:	f7fc ff12 	bl	8007da4 <HAL_GetTick>
 800af80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af82:	e00a      	b.n	800af9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af84:	f7fc ff0e 	bl	8007da4 <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af92:	4293      	cmp	r3, r2
 800af94:	d901      	bls.n	800af9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e053      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af9a:	4b2d      	ldr	r3, [pc, #180]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f003 020c 	and.w	r2, r3, #12
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d1eb      	bne.n	800af84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afac:	4b27      	ldr	r3, [pc, #156]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d210      	bcs.n	800afdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afba:	4b24      	ldr	r3, [pc, #144]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f023 020f 	bic.w	r2, r3, #15
 800afc2:	4922      	ldr	r1, [pc, #136]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afca:	4b20      	ldr	r3, [pc, #128]	; (800b04c <HAL_RCC_ClockConfig+0x1c4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 030f 	and.w	r3, r3, #15
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d001      	beq.n	800afdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e032      	b.n	800b042 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d008      	beq.n	800affa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800afe8:	4b19      	ldr	r3, [pc, #100]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	4916      	ldr	r1, [pc, #88]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0308 	and.w	r3, r3, #8
 800b002:	2b00      	cmp	r3, #0
 800b004:	d009      	beq.n	800b01a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b006:	4b12      	ldr	r3, [pc, #72]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	490e      	ldr	r1, [pc, #56]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800b016:	4313      	orrs	r3, r2
 800b018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b01a:	f000 f821 	bl	800b060 <HAL_RCC_GetSysClockFreq>
 800b01e:	4602      	mov	r2, r0
 800b020:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <HAL_RCC_ClockConfig+0x1c8>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	091b      	lsrs	r3, r3, #4
 800b026:	f003 030f 	and.w	r3, r3, #15
 800b02a:	490a      	ldr	r1, [pc, #40]	; (800b054 <HAL_RCC_ClockConfig+0x1cc>)
 800b02c:	5ccb      	ldrb	r3, [r1, r3]
 800b02e:	fa22 f303 	lsr.w	r3, r2, r3
 800b032:	4a09      	ldr	r2, [pc, #36]	; (800b058 <HAL_RCC_ClockConfig+0x1d0>)
 800b034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b036:	4b09      	ldr	r3, [pc, #36]	; (800b05c <HAL_RCC_ClockConfig+0x1d4>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fc f952 	bl	80072e4 <HAL_InitTick>

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	40023c00 	.word	0x40023c00
 800b050:	40023800 	.word	0x40023800
 800b054:	0801ba30 	.word	0x0801ba30
 800b058:	20000148 	.word	0x20000148
 800b05c:	2000014c 	.word	0x2000014c

0800b060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b066:	2100      	movs	r1, #0
 800b068:	6079      	str	r1, [r7, #4]
 800b06a:	2100      	movs	r1, #0
 800b06c:	60f9      	str	r1, [r7, #12]
 800b06e:	2100      	movs	r1, #0
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b072:	2100      	movs	r1, #0
 800b074:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b076:	4952      	ldr	r1, [pc, #328]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b078:	6889      	ldr	r1, [r1, #8]
 800b07a:	f001 010c 	and.w	r1, r1, #12
 800b07e:	2908      	cmp	r1, #8
 800b080:	d00d      	beq.n	800b09e <HAL_RCC_GetSysClockFreq+0x3e>
 800b082:	2908      	cmp	r1, #8
 800b084:	f200 8094 	bhi.w	800b1b0 <HAL_RCC_GetSysClockFreq+0x150>
 800b088:	2900      	cmp	r1, #0
 800b08a:	d002      	beq.n	800b092 <HAL_RCC_GetSysClockFreq+0x32>
 800b08c:	2904      	cmp	r1, #4
 800b08e:	d003      	beq.n	800b098 <HAL_RCC_GetSysClockFreq+0x38>
 800b090:	e08e      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b092:	4b4c      	ldr	r3, [pc, #304]	; (800b1c4 <HAL_RCC_GetSysClockFreq+0x164>)
 800b094:	60bb      	str	r3, [r7, #8]
      break;
 800b096:	e08e      	b.n	800b1b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b098:	4b4b      	ldr	r3, [pc, #300]	; (800b1c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800b09a:	60bb      	str	r3, [r7, #8]
      break;
 800b09c:	e08b      	b.n	800b1b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b09e:	4948      	ldr	r1, [pc, #288]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b0a0:	6849      	ldr	r1, [r1, #4]
 800b0a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b0a6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b0a8:	4945      	ldr	r1, [pc, #276]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b0aa:	6849      	ldr	r1, [r1, #4]
 800b0ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b0b0:	2900      	cmp	r1, #0
 800b0b2:	d024      	beq.n	800b0fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0b4:	4942      	ldr	r1, [pc, #264]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b0b6:	6849      	ldr	r1, [r1, #4]
 800b0b8:	0989      	lsrs	r1, r1, #6
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	f04f 0100 	mov.w	r1, #0
 800b0c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b0c4:	f04f 0500 	mov.w	r5, #0
 800b0c8:	ea00 0204 	and.w	r2, r0, r4
 800b0cc:	ea01 0305 	and.w	r3, r1, r5
 800b0d0:	493d      	ldr	r1, [pc, #244]	; (800b1c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800b0d2:	fb01 f003 	mul.w	r0, r1, r3
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	fb01 f102 	mul.w	r1, r1, r2
 800b0dc:	1844      	adds	r4, r0, r1
 800b0de:	493a      	ldr	r1, [pc, #232]	; (800b1c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800b0e0:	fba2 0101 	umull	r0, r1, r2, r1
 800b0e4:	1863      	adds	r3, r4, r1
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f04f 0300 	mov.w	r3, #0
 800b0f0:	f7f5 faba 	bl	8000668 <__aeabi_uldivmod>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	e04a      	b.n	800b194 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0fe:	4b30      	ldr	r3, [pc, #192]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	099b      	lsrs	r3, r3, #6
 800b104:	461a      	mov	r2, r3
 800b106:	f04f 0300 	mov.w	r3, #0
 800b10a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b10e:	f04f 0100 	mov.w	r1, #0
 800b112:	ea02 0400 	and.w	r4, r2, r0
 800b116:	ea03 0501 	and.w	r5, r3, r1
 800b11a:	4620      	mov	r0, r4
 800b11c:	4629      	mov	r1, r5
 800b11e:	f04f 0200 	mov.w	r2, #0
 800b122:	f04f 0300 	mov.w	r3, #0
 800b126:	014b      	lsls	r3, r1, #5
 800b128:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b12c:	0142      	lsls	r2, r0, #5
 800b12e:	4610      	mov	r0, r2
 800b130:	4619      	mov	r1, r3
 800b132:	1b00      	subs	r0, r0, r4
 800b134:	eb61 0105 	sbc.w	r1, r1, r5
 800b138:	f04f 0200 	mov.w	r2, #0
 800b13c:	f04f 0300 	mov.w	r3, #0
 800b140:	018b      	lsls	r3, r1, #6
 800b142:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b146:	0182      	lsls	r2, r0, #6
 800b148:	1a12      	subs	r2, r2, r0
 800b14a:	eb63 0301 	sbc.w	r3, r3, r1
 800b14e:	f04f 0000 	mov.w	r0, #0
 800b152:	f04f 0100 	mov.w	r1, #0
 800b156:	00d9      	lsls	r1, r3, #3
 800b158:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b15c:	00d0      	lsls	r0, r2, #3
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	1912      	adds	r2, r2, r4
 800b164:	eb45 0303 	adc.w	r3, r5, r3
 800b168:	f04f 0000 	mov.w	r0, #0
 800b16c:	f04f 0100 	mov.w	r1, #0
 800b170:	0299      	lsls	r1, r3, #10
 800b172:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b176:	0290      	lsls	r0, r2, #10
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4610      	mov	r0, r2
 800b17e:	4619      	mov	r1, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	461a      	mov	r2, r3
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	f7f5 fa6e 	bl	8000668 <__aeabi_uldivmod>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4613      	mov	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b194:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <HAL_RCC_GetSysClockFreq+0x160>)
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	0c1b      	lsrs	r3, r3, #16
 800b19a:	f003 0303 	and.w	r3, r3, #3
 800b19e:	3301      	adds	r3, #1
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ac:	60bb      	str	r3, [r7, #8]
      break;
 800b1ae:	e002      	b.n	800b1b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b1b0:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <HAL_RCC_GetSysClockFreq+0x164>)
 800b1b2:	60bb      	str	r3, [r7, #8]
      break;
 800b1b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bdb0      	pop	{r4, r5, r7, pc}
 800b1c0:	40023800 	.word	0x40023800
 800b1c4:	00f42400 	.word	0x00f42400
 800b1c8:	017d7840 	.word	0x017d7840

0800b1cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b1d0:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	20000148 	.word	0x20000148

0800b1e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b1e8:	f7ff fff0 	bl	800b1cc <HAL_RCC_GetHCLKFreq>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	4b05      	ldr	r3, [pc, #20]	; (800b204 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	0a9b      	lsrs	r3, r3, #10
 800b1f4:	f003 0307 	and.w	r3, r3, #7
 800b1f8:	4903      	ldr	r1, [pc, #12]	; (800b208 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1fa:	5ccb      	ldrb	r3, [r1, r3]
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b200:	4618      	mov	r0, r3
 800b202:	bd80      	pop	{r7, pc}
 800b204:	40023800 	.word	0x40023800
 800b208:	0801ba40 	.word	0x0801ba40

0800b20c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b210:	f7ff ffdc 	bl	800b1cc <HAL_RCC_GetHCLKFreq>
 800b214:	4602      	mov	r2, r0
 800b216:	4b05      	ldr	r3, [pc, #20]	; (800b22c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	0b5b      	lsrs	r3, r3, #13
 800b21c:	f003 0307 	and.w	r3, r3, #7
 800b220:	4903      	ldr	r1, [pc, #12]	; (800b230 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b222:	5ccb      	ldrb	r3, [r1, r3]
 800b224:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b228:	4618      	mov	r0, r3
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	40023800 	.word	0x40023800
 800b230:	0801ba40 	.word	0x0801ba40

0800b234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	220f      	movs	r2, #15
 800b242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b244:	4b12      	ldr	r3, [pc, #72]	; (800b290 <HAL_RCC_GetClockConfig+0x5c>)
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f003 0203 	and.w	r2, r3, #3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b250:	4b0f      	ldr	r3, [pc, #60]	; (800b290 <HAL_RCC_GetClockConfig+0x5c>)
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b25c:	4b0c      	ldr	r3, [pc, #48]	; (800b290 <HAL_RCC_GetClockConfig+0x5c>)
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b268:	4b09      	ldr	r3, [pc, #36]	; (800b290 <HAL_RCC_GetClockConfig+0x5c>)
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b276:	4b07      	ldr	r3, [pc, #28]	; (800b294 <HAL_RCC_GetClockConfig+0x60>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 020f 	and.w	r2, r3, #15
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	601a      	str	r2, [r3, #0]
}
 800b282:	bf00      	nop
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	40023800 	.word	0x40023800
 800b294:	40023c00 	.word	0x40023c00

0800b298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d012      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b2c0:	4b69      	ldr	r3, [pc, #420]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	4a68      	ldr	r2, [pc, #416]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b2ca:	6093      	str	r3, [r2, #8]
 800b2cc:	4b66      	ldr	r3, [pc, #408]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d4:	4964      	ldr	r1, [pc, #400]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d017      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b2f2:	4b5d      	ldr	r3, [pc, #372]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b300:	4959      	ldr	r1, [pc, #356]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b302:	4313      	orrs	r3, r2
 800b304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b310:	d101      	bne.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b312:	2301      	movs	r3, #1
 800b314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b31e:	2301      	movs	r3, #1
 800b320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d017      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b32e:	4b4e      	ldr	r3, [pc, #312]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33c:	494a      	ldr	r1, [pc, #296]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b34c:	d101      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b34e:	2301      	movs	r3, #1
 800b350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b35a:	2301      	movs	r3, #1
 800b35c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b36a:	2301      	movs	r3, #1
 800b36c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 808b 	beq.w	800b492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b37c:	4b3a      	ldr	r3, [pc, #232]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	4a39      	ldr	r2, [pc, #228]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b386:	6413      	str	r3, [r2, #64]	; 0x40
 800b388:	4b37      	ldr	r3, [pc, #220]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b390:	60bb      	str	r3, [r7, #8]
 800b392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b394:	4b35      	ldr	r3, [pc, #212]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a34      	ldr	r2, [pc, #208]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b39a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b39e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3a0:	f7fc fd00 	bl	8007da4 <HAL_GetTick>
 800b3a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b3a6:	e008      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3a8:	f7fc fcfc 	bl	8007da4 <HAL_GetTick>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	2b64      	cmp	r3, #100	; 0x64
 800b3b4:	d901      	bls.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e38d      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b3ba:	4b2c      	ldr	r3, [pc, #176]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0f0      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b3c6:	4b28      	ldr	r3, [pc, #160]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d035      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d02e      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3e4:	4b20      	ldr	r3, [pc, #128]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b3ee:	4b1e      	ldr	r3, [pc, #120]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f2:	4a1d      	ldr	r2, [pc, #116]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fe:	4a1a      	ldr	r2, [pc, #104]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b406:	4a18      	ldr	r2, [pc, #96]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b40c:	4b16      	ldr	r3, [pc, #88]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b01      	cmp	r3, #1
 800b416:	d114      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b418:	f7fc fcc4 	bl	8007da4 <HAL_GetTick>
 800b41c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b41e:	e00a      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b420:	f7fc fcc0 	bl	8007da4 <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42e:	4293      	cmp	r3, r2
 800b430:	d901      	bls.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e34f      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b436:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d0ee      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b44a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b44e:	d111      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b45c:	4b04      	ldr	r3, [pc, #16]	; (800b470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b45e:	400b      	ands	r3, r1
 800b460:	4901      	ldr	r1, [pc, #4]	; (800b468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b462:	4313      	orrs	r3, r2
 800b464:	608b      	str	r3, [r1, #8]
 800b466:	e00b      	b.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b468:	40023800 	.word	0x40023800
 800b46c:	40007000 	.word	0x40007000
 800b470:	0ffffcff 	.word	0x0ffffcff
 800b474:	4bb3      	ldr	r3, [pc, #716]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	4ab2      	ldr	r2, [pc, #712]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b47a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b47e:	6093      	str	r3, [r2, #8]
 800b480:	4bb0      	ldr	r3, [pc, #704]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b48c:	49ad      	ldr	r1, [pc, #692]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d010      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b49e:	4ba9      	ldr	r3, [pc, #676]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4a4:	4aa7      	ldr	r2, [pc, #668]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b4ae:	4ba5      	ldr	r3, [pc, #660]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b8:	49a2      	ldr	r1, [pc, #648]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b4cc:	4b9d      	ldr	r3, [pc, #628]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4da:	499a      	ldr	r1, [pc, #616]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b4ee:	4b95      	ldr	r3, [pc, #596]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4fc:	4991      	ldr	r1, [pc, #580]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b510:	4b8c      	ldr	r3, [pc, #560]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51e:	4989      	ldr	r1, [pc, #548]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b520:	4313      	orrs	r3, r2
 800b522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b532:	4b84      	ldr	r3, [pc, #528]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b540:	4980      	ldr	r1, [pc, #512]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b542:	4313      	orrs	r3, r2
 800b544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00a      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b554:	4b7b      	ldr	r3, [pc, #492]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55a:	f023 0203 	bic.w	r2, r3, #3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b562:	4978      	ldr	r1, [pc, #480]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b564:	4313      	orrs	r3, r2
 800b566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b576:	4b73      	ldr	r3, [pc, #460]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b57c:	f023 020c 	bic.w	r2, r3, #12
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b584:	496f      	ldr	r1, [pc, #444]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b586:	4313      	orrs	r3, r2
 800b588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00a      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b598:	4b6a      	ldr	r3, [pc, #424]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a6:	4967      	ldr	r1, [pc, #412]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b5ba:	4b62      	ldr	r3, [pc, #392]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c8:	495e      	ldr	r1, [pc, #376]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b5dc:	4b59      	ldr	r3, [pc, #356]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ea:	4956      	ldr	r1, [pc, #344]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b5fe:	4b51      	ldr	r3, [pc, #324]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60c:	494d      	ldr	r1, [pc, #308]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00a      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b620:	4b48      	ldr	r3, [pc, #288]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b62e:	4945      	ldr	r1, [pc, #276]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b630:	4313      	orrs	r3, r2
 800b632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b642:	4b40      	ldr	r3, [pc, #256]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b650:	493c      	ldr	r1, [pc, #240]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b652:	4313      	orrs	r3, r2
 800b654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00a      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b664:	4b37      	ldr	r3, [pc, #220]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b66a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b672:	4934      	ldr	r1, [pc, #208]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b674:	4313      	orrs	r3, r2
 800b676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b682:	2b00      	cmp	r3, #0
 800b684:	d011      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b686:	4b2f      	ldr	r3, [pc, #188]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b694:	492b      	ldr	r1, [pc, #172]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b696:	4313      	orrs	r3, r2
 800b698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6a4:	d101      	bne.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0308 	and.w	r3, r3, #8
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6c6:	4b1f      	ldr	r3, [pc, #124]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d4:	491b      	ldr	r1, [pc, #108]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00b      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b6e8:	4b16      	ldr	r3, [pc, #88]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f8:	4912      	ldr	r1, [pc, #72]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b70c:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b712:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b71c:	4909      	ldr	r1, [pc, #36]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b71e:	4313      	orrs	r3, r2
 800b720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00f      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b730:	4b04      	ldr	r3, [pc, #16]	; (800b744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b736:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b740:	e002      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b742:	bf00      	nop
 800b744:	40023800 	.word	0x40023800
 800b748:	4985      	ldr	r1, [pc, #532]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00b      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b75c:	4b80      	ldr	r3, [pc, #512]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b75e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b76c:	497c      	ldr	r1, [pc, #496]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d005      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b782:	f040 80d6 	bne.w	800b932 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b786:	4b76      	ldr	r3, [pc, #472]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a75      	ldr	r2, [pc, #468]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b78c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b792:	f7fc fb07 	bl	8007da4 <HAL_GetTick>
 800b796:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b798:	e008      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b79a:	f7fc fb03 	bl	8007da4 <HAL_GetTick>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	2b64      	cmp	r3, #100	; 0x64
 800b7a6:	d901      	bls.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e194      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b7ac:	4b6c      	ldr	r3, [pc, #432]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1f0      	bne.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d021      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d11d      	bne.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b7cc:	4b64      	ldr	r3, [pc, #400]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d2:	0c1b      	lsrs	r3, r3, #16
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b7da:	4b61      	ldr	r3, [pc, #388]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7e0:	0e1b      	lsrs	r3, r3, #24
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	019a      	lsls	r2, r3, #6
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	041b      	lsls	r3, r3, #16
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	061b      	lsls	r3, r3, #24
 800b7f8:	431a      	orrs	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	071b      	lsls	r3, r3, #28
 800b800:	4957      	ldr	r1, [pc, #348]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b802:	4313      	orrs	r3, r2
 800b804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b81c:	d00a      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b826:	2b00      	cmp	r3, #0
 800b828:	d02e      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b832:	d129      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b834:	4b4a      	ldr	r3, [pc, #296]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	f003 0303 	and.w	r3, r3, #3
 800b840:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b842:	4b47      	ldr	r3, [pc, #284]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b848:	0f1b      	lsrs	r3, r3, #28
 800b84a:	f003 0307 	and.w	r3, r3, #7
 800b84e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	019a      	lsls	r2, r3, #6
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	041b      	lsls	r3, r3, #16
 800b85a:	431a      	orrs	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	061b      	lsls	r3, r3, #24
 800b862:	431a      	orrs	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	071b      	lsls	r3, r3, #28
 800b868:	493d      	ldr	r1, [pc, #244]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b86a:	4313      	orrs	r3, r2
 800b86c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b870:	4b3b      	ldr	r3, [pc, #236]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b876:	f023 021f 	bic.w	r2, r3, #31
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87e:	3b01      	subs	r3, #1
 800b880:	4937      	ldr	r1, [pc, #220]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b882:	4313      	orrs	r3, r2
 800b884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01d      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b894:	4b32      	ldr	r3, [pc, #200]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b89a:	0e1b      	lsrs	r3, r3, #24
 800b89c:	f003 030f 	and.w	r3, r3, #15
 800b8a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b8a2:	4b2f      	ldr	r3, [pc, #188]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a8:	0f1b      	lsrs	r3, r3, #28
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	019a      	lsls	r2, r3, #6
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	041b      	lsls	r3, r3, #16
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	061b      	lsls	r3, r3, #24
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	071b      	lsls	r3, r3, #28
 800b8c8:	4925      	ldr	r1, [pc, #148]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d011      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	019a      	lsls	r2, r3, #6
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	041b      	lsls	r3, r3, #16
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	061b      	lsls	r3, r3, #24
 800b8f0:	431a      	orrs	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	071b      	lsls	r3, r3, #28
 800b8f8:	4919      	ldr	r1, [pc, #100]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b900:	4b17      	ldr	r3, [pc, #92]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a16      	ldr	r2, [pc, #88]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b90a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b90c:	f7fc fa4a 	bl	8007da4 <HAL_GetTick>
 800b910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b912:	e008      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b914:	f7fc fa46 	bl	8007da4 <HAL_GetTick>
 800b918:	4602      	mov	r2, r0
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	2b64      	cmp	r3, #100	; 0x64
 800b920:	d901      	bls.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e0d7      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b926:	4b0e      	ldr	r3, [pc, #56]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0f0      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	2b01      	cmp	r3, #1
 800b936:	f040 80cd 	bne.w	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a08      	ldr	r2, [pc, #32]	; (800b960 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b946:	f7fc fa2d 	bl	8007da4 <HAL_GetTick>
 800b94a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b94c:	e00a      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b94e:	f7fc fa29 	bl	8007da4 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	2b64      	cmp	r3, #100	; 0x64
 800b95a:	d903      	bls.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e0ba      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b960:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b964:	4b5e      	ldr	r3, [pc, #376]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b970:	d0ed      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d009      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d02e      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b996:	2b00      	cmp	r3, #0
 800b998:	d12a      	bne.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b99a:	4b51      	ldr	r3, [pc, #324]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a0:	0c1b      	lsrs	r3, r3, #16
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b9a8:	4b4d      	ldr	r3, [pc, #308]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ae:	0f1b      	lsrs	r3, r3, #28
 800b9b0:	f003 0307 	and.w	r3, r3, #7
 800b9b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	019a      	lsls	r2, r3, #6
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	041b      	lsls	r3, r3, #16
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	061b      	lsls	r3, r3, #24
 800b9c8:	431a      	orrs	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	071b      	lsls	r3, r3, #28
 800b9ce:	4944      	ldr	r1, [pc, #272]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b9d6:	4b42      	ldr	r3, [pc, #264]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b9d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	493d      	ldr	r1, [pc, #244]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d022      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba04:	d11d      	bne.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba06:	4b36      	ldr	r3, [pc, #216]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0c:	0e1b      	lsrs	r3, r3, #24
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba14:	4b32      	ldr	r3, [pc, #200]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba1a:	0f1b      	lsrs	r3, r3, #28
 800ba1c:	f003 0307 	and.w	r3, r3, #7
 800ba20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	019a      	lsls	r2, r3, #6
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	041b      	lsls	r3, r3, #16
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	061b      	lsls	r3, r3, #24
 800ba34:	431a      	orrs	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	071b      	lsls	r3, r3, #28
 800ba3a:	4929      	ldr	r1, [pc, #164]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d028      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba4e:	4b24      	ldr	r3, [pc, #144]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba54:	0e1b      	lsrs	r3, r3, #24
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ba5c:	4b20      	ldr	r3, [pc, #128]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba62:	0c1b      	lsrs	r3, r3, #16
 800ba64:	f003 0303 	and.w	r3, r3, #3
 800ba68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	019a      	lsls	r2, r3, #6
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	041b      	lsls	r3, r3, #16
 800ba74:	431a      	orrs	r2, r3
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	061b      	lsls	r3, r3, #24
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	69db      	ldr	r3, [r3, #28]
 800ba80:	071b      	lsls	r3, r3, #28
 800ba82:	4917      	ldr	r1, [pc, #92]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba98:	4911      	ldr	r1, [pc, #68]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800baa0:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a0e      	ldr	r2, [pc, #56]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800baa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baac:	f7fc f97a 	bl	8007da4 <HAL_GetTick>
 800bab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bab2:	e008      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bab4:	f7fc f976 	bl	8007da4 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b64      	cmp	r3, #100	; 0x64
 800bac0:	d901      	bls.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e007      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad2:	d1ef      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3720      	adds	r7, #32
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	40023800 	.word	0x40023800

0800bae4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e06b      	b.n	800bbce <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	7f5b      	ldrb	r3, [r3, #29]
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d105      	bne.n	800bb0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7fb f8f6 	bl	8006cf8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	22ca      	movs	r2, #202	; 0xca
 800bb18:	625a      	str	r2, [r3, #36]	; 0x24
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2253      	movs	r2, #83	; 0x53
 800bb20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f85a 	bl	800bbdc <RTC_EnterInitMode>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d008      	beq.n	800bb40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	22ff      	movs	r2, #255	; 0xff
 800bb34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2204      	movs	r2, #4
 800bb3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e046      	b.n	800bbce <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6899      	ldr	r1, [r3, #8]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	4b23      	ldr	r3, [pc, #140]	; (800bbd8 <HAL_RTC_Init+0xf4>)
 800bb4c:	400b      	ands	r3, r1
 800bb4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6899      	ldr	r1, [r3, #8]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	68d2      	ldr	r2, [r2, #12]
 800bb76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6919      	ldr	r1, [r3, #16]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	041a      	lsls	r2, r3, #16
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68da      	ldr	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb9a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0208 	bic.w	r2, r2, #8
 800bbaa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	699a      	ldr	r2, [r3, #24]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	22ff      	movs	r2, #255	; 0xff
 800bbc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
  }
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	ff8fffbf 	.word	0xff8fffbf

0800bbdc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d119      	bne.n	800bc2a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc00:	f7fc f8d0 	bl	8007da4 <HAL_GetTick>
 800bc04:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bc06:	e009      	b.n	800bc1c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bc08:	f7fc f8cc 	bl	8007da4 <HAL_GetTick>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc16:	d901      	bls.n	800bc1c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e007      	b.n	800bc2c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0ee      	beq.n	800bc08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e084      	b.n	800bd50 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d106      	bne.n	800bc66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7fb f863 	bl	8006d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc86:	d902      	bls.n	800bc8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	e002      	b.n	800bc94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bc8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bc9c:	d007      	beq.n	800bcae <HAL_SPI_Init+0x7a>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bca6:	d002      	beq.n	800bcae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10b      	bne.n	800bcce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bcbe:	d903      	bls.n	800bcc8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	631a      	str	r2, [r3, #48]	; 0x30
 800bcc6:	e002      	b.n	800bcce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	431a      	orrs	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a1b      	ldr	r3, [r3, #32]
 800bcf8:	ea42 0103 	orr.w	r1, r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	430a      	orrs	r2, r1
 800bd06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	0c1b      	lsrs	r3, r3, #16
 800bd0e:	f003 0204 	and.w	r2, r3, #4
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	431a      	orrs	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	ea42 0103 	orr.w	r1, r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	69da      	ldr	r2, [r3, #28]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	4613      	mov	r3, r2
 800bd66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d101      	bne.n	800bd7a <HAL_SPI_Transmit+0x22>
 800bd76:	2302      	movs	r3, #2
 800bd78:	e150      	b.n	800c01c <HAL_SPI_Transmit+0x2c4>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd82:	f7fc f80f 	bl	8007da4 <HAL_GetTick>
 800bd86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bd88:	88fb      	ldrh	r3, [r7, #6]
 800bd8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d002      	beq.n	800bd9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bd98:	2302      	movs	r3, #2
 800bd9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd9c:	e135      	b.n	800c00a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <HAL_SPI_Transmit+0x52>
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d102      	bne.n	800bdb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bdae:	e12c      	b.n	800c00a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	88fa      	ldrh	r2, [r7, #6]
 800bdc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	88fa      	ldrh	r2, [r7, #6]
 800bdce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdfa:	d107      	bne.n	800be0c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be16:	2b40      	cmp	r3, #64	; 0x40
 800be18:	d007      	beq.n	800be2a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be32:	d94b      	bls.n	800becc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <HAL_SPI_Transmit+0xea>
 800be3c:	8afb      	ldrh	r3, [r7, #22]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d13e      	bne.n	800bec0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	881a      	ldrh	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be52:	1c9a      	adds	r2, r3, #2
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	3b01      	subs	r3, #1
 800be60:	b29a      	uxth	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800be66:	e02b      	b.n	800bec0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f003 0302 	and.w	r3, r3, #2
 800be72:	2b02      	cmp	r3, #2
 800be74:	d112      	bne.n	800be9c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	881a      	ldrh	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be86:	1c9a      	adds	r2, r3, #2
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be90:	b29b      	uxth	r3, r3
 800be92:	3b01      	subs	r3, #1
 800be94:	b29a      	uxth	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be9a:	e011      	b.n	800bec0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be9c:	f7fb ff82 	bl	8007da4 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d803      	bhi.n	800beb4 <HAL_SPI_Transmit+0x15c>
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d102      	bne.n	800beba <HAL_SPI_Transmit+0x162>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d102      	bne.n	800bec0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bebe:	e0a4      	b.n	800c00a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1ce      	bne.n	800be68 <HAL_SPI_Transmit+0x110>
 800beca:	e07c      	b.n	800bfc6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <HAL_SPI_Transmit+0x182>
 800bed4:	8afb      	ldrh	r3, [r7, #22]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d170      	bne.n	800bfbc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d912      	bls.n	800bf0a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee8:	881a      	ldrh	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef4:	1c9a      	adds	r2, r3, #2
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800befe:	b29b      	uxth	r3, r3
 800bf00:	3b02      	subs	r3, #2
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf08:	e058      	b.n	800bfbc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	330c      	adds	r3, #12
 800bf14:	7812      	ldrb	r2, [r2, #0]
 800bf16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bf30:	e044      	b.n	800bfbc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d12b      	bne.n	800bf98 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d912      	bls.n	800bf70 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4e:	881a      	ldrh	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	1c9a      	adds	r2, r3, #2
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	3b02      	subs	r3, #2
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf6e:	e025      	b.n	800bfbc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	330c      	adds	r3, #12
 800bf7a:	7812      	ldrb	r2, [r2, #0]
 800bf7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bf96:	e011      	b.n	800bfbc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf98:	f7fb ff04 	bl	8007da4 <HAL_GetTick>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d803      	bhi.n	800bfb0 <HAL_SPI_Transmit+0x258>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d102      	bne.n	800bfb6 <HAL_SPI_Transmit+0x25e>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d102      	bne.n	800bfbc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bfba:	e026      	b.n	800c00a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1b5      	bne.n	800bf32 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f000 fa20 	bl	800c410 <SPI_EndRxTxTransaction>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10a      	bne.n	800bffa <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	613b      	str	r3, [r7, #16]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	77fb      	strb	r3, [r7, #31]
 800c006:	e000      	b.n	800c00a <HAL_SPI_Transmit+0x2b2>
  }

error:
 800c008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c01a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	099b      	lsrs	r3, r3, #6
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10f      	bne.n	800c068 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	099b      	lsrs	r3, r3, #6
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d004      	beq.n	800c068 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	4798      	blx	r3
    return;
 800c066:	e0d7      	b.n	800c218 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	085b      	lsrs	r3, r3, #1
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00a      	beq.n	800c08a <HAL_SPI_IRQHandler+0x66>
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	09db      	lsrs	r3, r3, #7
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
    return;
 800c088:	e0c6      	b.n	800c218 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	095b      	lsrs	r3, r3, #5
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10c      	bne.n	800c0b0 <HAL_SPI_IRQHandler+0x8c>
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	099b      	lsrs	r3, r3, #6
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d106      	bne.n	800c0b0 <HAL_SPI_IRQHandler+0x8c>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	0a1b      	lsrs	r3, r3, #8
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 80b4 	beq.w	800c218 <HAL_SPI_IRQHandler+0x1f4>
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 80ad 	beq.w	800c218 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	099b      	lsrs	r3, r3, #6
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d023      	beq.n	800c112 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d011      	beq.n	800c0fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0da:	f043 0204 	orr.w	r2, r3, #4
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	e00b      	b.n	800c112 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	613b      	str	r3, [r7, #16]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	613b      	str	r3, [r7, #16]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	693b      	ldr	r3, [r7, #16]
        return;
 800c110:	e082      	b.n	800c218 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	095b      	lsrs	r3, r3, #5
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d014      	beq.n	800c148 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c122:	f043 0201 	orr.w	r2, r3, #1
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	0a1b      	lsrs	r3, r3, #8
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00c      	beq.n	800c16e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c158:	f043 0208 	orr.w	r2, r3, #8
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c160:	2300      	movs	r3, #0
 800c162:	60bb      	str	r3, [r7, #8]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	60bb      	str	r3, [r7, #8]
 800c16c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c172:	2b00      	cmp	r3, #0
 800c174:	d04f      	beq.n	800c216 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c184:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	f003 0302 	and.w	r3, r3, #2
 800c194:	2b00      	cmp	r3, #0
 800c196:	d104      	bne.n	800c1a2 <HAL_SPI_IRQHandler+0x17e>
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d034      	beq.n	800c20c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 0203 	bic.w	r2, r2, #3
 800c1b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d011      	beq.n	800c1de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1be:	4a18      	ldr	r2, [pc, #96]	; (800c220 <HAL_SPI_IRQHandler+0x1fc>)
 800c1c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fc fe28 	bl	8008e1c <HAL_DMA_Abort_IT>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d016      	beq.n	800c214 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ea:	4a0d      	ldr	r2, [pc, #52]	; (800c220 <HAL_SPI_IRQHandler+0x1fc>)
 800c1ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fc fe12 	bl	8008e1c <HAL_DMA_Abort_IT>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c20a:	e003      	b.n	800c214 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f809 	bl	800c224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c212:	e000      	b.n	800c216 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c214:	bf00      	nop
    return;
 800c216:	bf00      	nop
  }
}
 800c218:	3720      	adds	r7, #32
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0800c239 	.word	0x0800c239

0800c224 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c244:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f7ff ffe5 	bl	800c224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	60f8      	str	r0, [r7, #12]
 800c26a:	60b9      	str	r1, [r7, #8]
 800c26c:	603b      	str	r3, [r7, #0]
 800c26e:	4613      	mov	r3, r2
 800c270:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c272:	e04c      	b.n	800c30e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c27a:	d048      	beq.n	800c30e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c27c:	f7fb fd92 	bl	8007da4 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d902      	bls.n	800c292 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d13d      	bne.n	800c30e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2aa:	d111      	bne.n	800c2d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b4:	d004      	beq.n	800c2c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2be:	d107      	bne.n	800c2d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2d8:	d10f      	bne.n	800c2fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c30a:	2303      	movs	r3, #3
 800c30c:	e00f      	b.n	800c32e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689a      	ldr	r2, [r3, #8]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	4013      	ands	r3, r2
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	bf0c      	ite	eq
 800c31e:	2301      	moveq	r3, #1
 800c320:	2300      	movne	r3, #0
 800c322:	b2db      	uxtb	r3, r3
 800c324:	461a      	mov	r2, r3
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d1a3      	bne.n	800c274 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	607a      	str	r2, [r7, #4]
 800c342:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800c344:	e057      	b.n	800c3f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c34c:	d106      	bne.n	800c35c <SPI_WaitFifoStateUntilTimeout+0x26>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d103      	bne.n	800c35c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	330c      	adds	r3, #12
 800c35a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c362:	d048      	beq.n	800c3f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c364:	f7fb fd1e 	bl	8007da4 <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d902      	bls.n	800c37a <SPI_WaitFifoStateUntilTimeout+0x44>
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d13d      	bne.n	800c3f6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	685a      	ldr	r2, [r3, #4]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c392:	d111      	bne.n	800c3b8 <SPI_WaitFifoStateUntilTimeout+0x82>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c39c:	d004      	beq.n	800c3a8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3a6:	d107      	bne.n	800c3b8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3c0:	d10f      	bne.n	800c3e2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	e008      	b.n	800c408 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	4013      	ands	r3, r2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	429a      	cmp	r2, r3
 800c404:	d19f      	bne.n	800c346 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af02      	add	r7, sp, #8
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2200      	movs	r2, #0
 800c424:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f7ff ff84 	bl	800c336 <SPI_WaitFifoStateUntilTimeout>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d007      	beq.n	800c444 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c438:	f043 0220 	orr.w	r2, r3, #32
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e027      	b.n	800c494 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2200      	movs	r2, #0
 800c44c:	2180      	movs	r1, #128	; 0x80
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff ff07 	bl	800c262 <SPI_WaitFlagStateUntilTimeout>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c45e:	f043 0220 	orr.w	r2, r3, #32
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c466:	2303      	movs	r3, #3
 800c468:	e014      	b.n	800c494 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2200      	movs	r2, #0
 800c472:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f7ff ff5d 	bl	800c336 <SPI_WaitFifoStateUntilTimeout>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d007      	beq.n	800c492 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c486:	f043 0220 	orr.w	r2, r3, #32
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c48e:	2303      	movs	r3, #3
 800c490:	e000      	b.n	800c494 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e01d      	b.n	800c4ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7fa fcce 	bl	8006e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4610      	mov	r0, r2
 800c4dc:	f000 fb8e 	bl	800cbfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0201 	orr.w	r2, r2, #1
 800c50a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689a      	ldr	r2, [r3, #8]
 800c512:	4b0c      	ldr	r3, [pc, #48]	; (800c544 <HAL_TIM_Base_Start_IT+0x50>)
 800c514:	4013      	ands	r3, r2
 800c516:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b06      	cmp	r3, #6
 800c51c:	d00b      	beq.n	800c536 <HAL_TIM_Base_Start_IT+0x42>
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c524:	d007      	beq.n	800c536 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f042 0201 	orr.w	r2, r2, #1
 800c534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	00010007 	.word	0x00010007

0800c548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	e01d      	b.n	800c596 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f815 	bl	800c59e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2202      	movs	r2, #2
 800c578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3304      	adds	r3, #4
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f000 fb38 	bl	800cbfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5a6:	bf00      	nop
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b082      	sub	sp, #8
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	f003 0302 	and.w	r3, r3, #2
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d122      	bne.n	800c60e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f003 0302 	and.w	r3, r3, #2
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d11b      	bne.n	800c60e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f06f 0202 	mvn.w	r2, #2
 800c5de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	f003 0303 	and.w	r3, r3, #3
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d003      	beq.n	800c5fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fae3 	bl	800cbc0 <HAL_TIM_IC_CaptureCallback>
 800c5fa:	e005      	b.n	800c608 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fad5 	bl	800cbac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fae6 	bl	800cbd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b04      	cmp	r3, #4
 800c61a:	d122      	bne.n	800c662 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f003 0304 	and.w	r3, r3, #4
 800c626:	2b04      	cmp	r3, #4
 800c628:	d11b      	bne.n	800c662 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f06f 0204 	mvn.w	r2, #4
 800c632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2202      	movs	r2, #2
 800c638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fab9 	bl	800cbc0 <HAL_TIM_IC_CaptureCallback>
 800c64e:	e005      	b.n	800c65c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 faab 	bl	800cbac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fabc 	bl	800cbd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	f003 0308 	and.w	r3, r3, #8
 800c66c:	2b08      	cmp	r3, #8
 800c66e:	d122      	bne.n	800c6b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f003 0308 	and.w	r3, r3, #8
 800c67a:	2b08      	cmp	r3, #8
 800c67c:	d11b      	bne.n	800c6b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f06f 0208 	mvn.w	r2, #8
 800c686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2204      	movs	r2, #4
 800c68c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69db      	ldr	r3, [r3, #28]
 800c694:	f003 0303 	and.w	r3, r3, #3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa8f 	bl	800cbc0 <HAL_TIM_IC_CaptureCallback>
 800c6a2:	e005      	b.n	800c6b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fa81 	bl	800cbac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fa92 	bl	800cbd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f003 0310 	and.w	r3, r3, #16
 800c6c0:	2b10      	cmp	r3, #16
 800c6c2:	d122      	bne.n	800c70a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	f003 0310 	and.w	r3, r3, #16
 800c6ce:	2b10      	cmp	r3, #16
 800c6d0:	d11b      	bne.n	800c70a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f06f 0210 	mvn.w	r2, #16
 800c6da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2208      	movs	r2, #8
 800c6e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fa65 	bl	800cbc0 <HAL_TIM_IC_CaptureCallback>
 800c6f6:	e005      	b.n	800c704 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fa57 	bl	800cbac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fa68 	bl	800cbd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b01      	cmp	r3, #1
 800c716:	d10e      	bne.n	800c736 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b01      	cmp	r3, #1
 800c724:	d107      	bne.n	800c736 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f06f 0201 	mvn.w	r2, #1
 800c72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7f8 fe4f 	bl	80053d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c740:	2b80      	cmp	r3, #128	; 0x80
 800c742:	d10e      	bne.n	800c762 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c74e:	2b80      	cmp	r3, #128	; 0x80
 800c750:	d107      	bne.n	800c762 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c75a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fe7d 	bl	800d45c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c76c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c770:	d10e      	bne.n	800c790 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c77c:	2b80      	cmp	r3, #128	; 0x80
 800c77e:	d107      	bne.n	800c790 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fe70 	bl	800d470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	691b      	ldr	r3, [r3, #16]
 800c796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79a:	2b40      	cmp	r3, #64	; 0x40
 800c79c:	d10e      	bne.n	800c7bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b40      	cmp	r3, #64	; 0x40
 800c7aa:	d107      	bne.n	800c7bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c7b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fa16 	bl	800cbe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	f003 0320 	and.w	r3, r3, #32
 800c7c6:	2b20      	cmp	r3, #32
 800c7c8:	d10e      	bne.n	800c7e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	f003 0320 	and.w	r3, r3, #32
 800c7d4:	2b20      	cmp	r3, #32
 800c7d6:	d107      	bne.n	800c7e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f06f 0220 	mvn.w	r2, #32
 800c7e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fe30 	bl	800d448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c802:	2b01      	cmp	r3, #1
 800c804:	d101      	bne.n	800c80a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c806:	2302      	movs	r3, #2
 800c808:	e105      	b.n	800ca16 <HAL_TIM_PWM_ConfigChannel+0x226>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2202      	movs	r2, #2
 800c816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b14      	cmp	r3, #20
 800c81e:	f200 80f0 	bhi.w	800ca02 <HAL_TIM_PWM_ConfigChannel+0x212>
 800c822:	a201      	add	r2, pc, #4	; (adr r2, 800c828 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c87d 	.word	0x0800c87d
 800c82c:	0800ca03 	.word	0x0800ca03
 800c830:	0800ca03 	.word	0x0800ca03
 800c834:	0800ca03 	.word	0x0800ca03
 800c838:	0800c8bd 	.word	0x0800c8bd
 800c83c:	0800ca03 	.word	0x0800ca03
 800c840:	0800ca03 	.word	0x0800ca03
 800c844:	0800ca03 	.word	0x0800ca03
 800c848:	0800c8ff 	.word	0x0800c8ff
 800c84c:	0800ca03 	.word	0x0800ca03
 800c850:	0800ca03 	.word	0x0800ca03
 800c854:	0800ca03 	.word	0x0800ca03
 800c858:	0800c93f 	.word	0x0800c93f
 800c85c:	0800ca03 	.word	0x0800ca03
 800c860:	0800ca03 	.word	0x0800ca03
 800c864:	0800ca03 	.word	0x0800ca03
 800c868:	0800c981 	.word	0x0800c981
 800c86c:	0800ca03 	.word	0x0800ca03
 800c870:	0800ca03 	.word	0x0800ca03
 800c874:	0800ca03 	.word	0x0800ca03
 800c878:	0800c9c1 	.word	0x0800c9c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	4618      	mov	r0, r3
 800c884:	f000 fa5a 	bl	800cd3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	699a      	ldr	r2, [r3, #24]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f042 0208 	orr.w	r2, r2, #8
 800c896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	699a      	ldr	r2, [r3, #24]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0204 	bic.w	r2, r2, #4
 800c8a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6999      	ldr	r1, [r3, #24]
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	691a      	ldr	r2, [r3, #16]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	430a      	orrs	r2, r1
 800c8b8:	619a      	str	r2, [r3, #24]
      break;
 800c8ba:	e0a3      	b.n	800ca04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68b9      	ldr	r1, [r7, #8]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 faac 	bl	800ce20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	699a      	ldr	r2, [r3, #24]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	699a      	ldr	r2, [r3, #24]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6999      	ldr	r1, [r3, #24]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	021a      	lsls	r2, r3, #8
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	430a      	orrs	r2, r1
 800c8fa:	619a      	str	r2, [r3, #24]
      break;
 800c8fc:	e082      	b.n	800ca04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68b9      	ldr	r1, [r7, #8]
 800c904:	4618      	mov	r0, r3
 800c906:	f000 fb03 	bl	800cf10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	69da      	ldr	r2, [r3, #28]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f042 0208 	orr.w	r2, r2, #8
 800c918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	69da      	ldr	r2, [r3, #28]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f022 0204 	bic.w	r2, r2, #4
 800c928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	69d9      	ldr	r1, [r3, #28]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	691a      	ldr	r2, [r3, #16]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	430a      	orrs	r2, r1
 800c93a:	61da      	str	r2, [r3, #28]
      break;
 800c93c:	e062      	b.n	800ca04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fb59 	bl	800cffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	69da      	ldr	r2, [r3, #28]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	69da      	ldr	r2, [r3, #28]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	69d9      	ldr	r1, [r3, #28]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	021a      	lsls	r2, r3, #8
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	430a      	orrs	r2, r1
 800c97c:	61da      	str	r2, [r3, #28]
      break;
 800c97e:	e041      	b.n	800ca04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68b9      	ldr	r1, [r7, #8]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fb90 	bl	800d0ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f042 0208 	orr.w	r2, r2, #8
 800c99a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f022 0204 	bic.w	r2, r2, #4
 800c9aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	691a      	ldr	r2, [r3, #16]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c9be:	e021      	b.n	800ca04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68b9      	ldr	r1, [r7, #8]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 fbc2 	bl	800d150 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	021a      	lsls	r2, r3, #8
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca00:	e000      	b.n	800ca04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800ca02:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop

0800ca20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d101      	bne.n	800ca38 <HAL_TIM_ConfigClockSource+0x18>
 800ca34:	2302      	movs	r3, #2
 800ca36:	e0b3      	b.n	800cba0 <HAL_TIM_ConfigClockSource+0x180>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2202      	movs	r2, #2
 800ca44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4b55      	ldr	r3, [pc, #340]	; (800cba8 <HAL_TIM_ConfigClockSource+0x188>)
 800ca54:	4013      	ands	r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca70:	d03e      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0xd0>
 800ca72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca76:	f200 8087 	bhi.w	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800ca7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca7e:	f000 8085 	beq.w	800cb8c <HAL_TIM_ConfigClockSource+0x16c>
 800ca82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca86:	d87f      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800ca88:	2b70      	cmp	r3, #112	; 0x70
 800ca8a:	d01a      	beq.n	800cac2 <HAL_TIM_ConfigClockSource+0xa2>
 800ca8c:	2b70      	cmp	r3, #112	; 0x70
 800ca8e:	d87b      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800ca90:	2b60      	cmp	r3, #96	; 0x60
 800ca92:	d050      	beq.n	800cb36 <HAL_TIM_ConfigClockSource+0x116>
 800ca94:	2b60      	cmp	r3, #96	; 0x60
 800ca96:	d877      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800ca98:	2b50      	cmp	r3, #80	; 0x50
 800ca9a:	d03c      	beq.n	800cb16 <HAL_TIM_ConfigClockSource+0xf6>
 800ca9c:	2b50      	cmp	r3, #80	; 0x50
 800ca9e:	d873      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800caa0:	2b40      	cmp	r3, #64	; 0x40
 800caa2:	d058      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0x136>
 800caa4:	2b40      	cmp	r3, #64	; 0x40
 800caa6:	d86f      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800caa8:	2b30      	cmp	r3, #48	; 0x30
 800caaa:	d064      	beq.n	800cb76 <HAL_TIM_ConfigClockSource+0x156>
 800caac:	2b30      	cmp	r3, #48	; 0x30
 800caae:	d86b      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800cab0:	2b20      	cmp	r3, #32
 800cab2:	d060      	beq.n	800cb76 <HAL_TIM_ConfigClockSource+0x156>
 800cab4:	2b20      	cmp	r3, #32
 800cab6:	d867      	bhi.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d05c      	beq.n	800cb76 <HAL_TIM_ConfigClockSource+0x156>
 800cabc:	2b10      	cmp	r3, #16
 800cabe:	d05a      	beq.n	800cb76 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cac0:	e062      	b.n	800cb88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6818      	ldr	r0, [r3, #0]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	6899      	ldr	r1, [r3, #8]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f000 fc0b 	bl	800d2ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cae4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	609a      	str	r2, [r3, #8]
      break;
 800caee:	e04e      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6818      	ldr	r0, [r3, #0]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	6899      	ldr	r1, [r3, #8]
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	f000 fbf4 	bl	800d2ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	689a      	ldr	r2, [r3, #8]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb12:	609a      	str	r2, [r3, #8]
      break;
 800cb14:	e03b      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	6859      	ldr	r1, [r3, #4]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	461a      	mov	r2, r3
 800cb24:	f000 fb68 	bl	800d1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2150      	movs	r1, #80	; 0x50
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 fbc1 	bl	800d2b6 <TIM_ITRx_SetConfig>
      break;
 800cb34:	e02b      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	6859      	ldr	r1, [r3, #4]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	461a      	mov	r2, r3
 800cb44:	f000 fb87 	bl	800d256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2160      	movs	r1, #96	; 0x60
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fbb1 	bl	800d2b6 <TIM_ITRx_SetConfig>
      break;
 800cb54:	e01b      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6818      	ldr	r0, [r3, #0]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	6859      	ldr	r1, [r3, #4]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	461a      	mov	r2, r3
 800cb64:	f000 fb48 	bl	800d1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2140      	movs	r1, #64	; 0x40
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 fba1 	bl	800d2b6 <TIM_ITRx_SetConfig>
      break;
 800cb74:	e00b      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4610      	mov	r0, r2
 800cb82:	f000 fb98 	bl	800d2b6 <TIM_ITRx_SetConfig>
      break;
 800cb86:	e002      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cb88:	bf00      	nop
 800cb8a:	e000      	b.n	800cb8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cb8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	fffeff88 	.word	0xfffeff88

0800cbac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a40      	ldr	r2, [pc, #256]	; (800cd10 <TIM_Base_SetConfig+0x114>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d013      	beq.n	800cc3c <TIM_Base_SetConfig+0x40>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc1a:	d00f      	beq.n	800cc3c <TIM_Base_SetConfig+0x40>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a3d      	ldr	r2, [pc, #244]	; (800cd14 <TIM_Base_SetConfig+0x118>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d00b      	beq.n	800cc3c <TIM_Base_SetConfig+0x40>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a3c      	ldr	r2, [pc, #240]	; (800cd18 <TIM_Base_SetConfig+0x11c>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d007      	beq.n	800cc3c <TIM_Base_SetConfig+0x40>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a3b      	ldr	r2, [pc, #236]	; (800cd1c <TIM_Base_SetConfig+0x120>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d003      	beq.n	800cc3c <TIM_Base_SetConfig+0x40>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a3a      	ldr	r2, [pc, #232]	; (800cd20 <TIM_Base_SetConfig+0x124>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d108      	bne.n	800cc4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a2f      	ldr	r2, [pc, #188]	; (800cd10 <TIM_Base_SetConfig+0x114>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d02b      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc5c:	d027      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a2c      	ldr	r2, [pc, #176]	; (800cd14 <TIM_Base_SetConfig+0x118>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d023      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a2b      	ldr	r2, [pc, #172]	; (800cd18 <TIM_Base_SetConfig+0x11c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d01f      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a2a      	ldr	r2, [pc, #168]	; (800cd1c <TIM_Base_SetConfig+0x120>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d01b      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a29      	ldr	r2, [pc, #164]	; (800cd20 <TIM_Base_SetConfig+0x124>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d017      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a28      	ldr	r2, [pc, #160]	; (800cd24 <TIM_Base_SetConfig+0x128>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d013      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a27      	ldr	r2, [pc, #156]	; (800cd28 <TIM_Base_SetConfig+0x12c>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d00f      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a26      	ldr	r2, [pc, #152]	; (800cd2c <TIM_Base_SetConfig+0x130>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d00b      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a25      	ldr	r2, [pc, #148]	; (800cd30 <TIM_Base_SetConfig+0x134>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d007      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4a24      	ldr	r2, [pc, #144]	; (800cd34 <TIM_Base_SetConfig+0x138>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d003      	beq.n	800ccae <TIM_Base_SetConfig+0xb2>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a23      	ldr	r2, [pc, #140]	; (800cd38 <TIM_Base_SetConfig+0x13c>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d108      	bne.n	800ccc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	689a      	ldr	r2, [r3, #8]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a0a      	ldr	r2, [pc, #40]	; (800cd10 <TIM_Base_SetConfig+0x114>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d003      	beq.n	800ccf4 <TIM_Base_SetConfig+0xf8>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a0c      	ldr	r2, [pc, #48]	; (800cd20 <TIM_Base_SetConfig+0x124>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d103      	bne.n	800ccfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	615a      	str	r2, [r3, #20]
}
 800cd02:	bf00      	nop
 800cd04:	3714      	adds	r7, #20
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	40010000 	.word	0x40010000
 800cd14:	40000400 	.word	0x40000400
 800cd18:	40000800 	.word	0x40000800
 800cd1c:	40000c00 	.word	0x40000c00
 800cd20:	40010400 	.word	0x40010400
 800cd24:	40014000 	.word	0x40014000
 800cd28:	40014400 	.word	0x40014400
 800cd2c:	40014800 	.word	0x40014800
 800cd30:	40001800 	.word	0x40001800
 800cd34:	40001c00 	.word	0x40001c00
 800cd38:	40002000 	.word	0x40002000

0800cd3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	f023 0201 	bic.w	r2, r3, #1
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	699b      	ldr	r3, [r3, #24]
 800cd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	4b2b      	ldr	r3, [pc, #172]	; (800ce14 <TIM_OC1_SetConfig+0xd8>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f023 0303 	bic.w	r3, r3, #3
 800cd72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f023 0302 	bic.w	r3, r3, #2
 800cd84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a21      	ldr	r2, [pc, #132]	; (800ce18 <TIM_OC1_SetConfig+0xdc>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d003      	beq.n	800cda0 <TIM_OC1_SetConfig+0x64>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a20      	ldr	r2, [pc, #128]	; (800ce1c <TIM_OC1_SetConfig+0xe0>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d10c      	bne.n	800cdba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f023 0308 	bic.w	r3, r3, #8
 800cda6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f023 0304 	bic.w	r3, r3, #4
 800cdb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a16      	ldr	r2, [pc, #88]	; (800ce18 <TIM_OC1_SetConfig+0xdc>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d003      	beq.n	800cdca <TIM_OC1_SetConfig+0x8e>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a15      	ldr	r2, [pc, #84]	; (800ce1c <TIM_OC1_SetConfig+0xe0>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d111      	bne.n	800cdee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	693a      	ldr	r2, [r7, #16]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	4313      	orrs	r3, r2
 800cdec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	621a      	str	r2, [r3, #32]
}
 800ce08:	bf00      	nop
 800ce0a:	371c      	adds	r7, #28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	fffeff8f 	.word	0xfffeff8f
 800ce18:	40010000 	.word	0x40010000
 800ce1c:	40010400 	.word	0x40010400

0800ce20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	f023 0210 	bic.w	r2, r3, #16
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	4b2e      	ldr	r3, [pc, #184]	; (800cf04 <TIM_OC2_SetConfig+0xe4>)
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	021b      	lsls	r3, r3, #8
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	f023 0320 	bic.w	r3, r3, #32
 800ce6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	011b      	lsls	r3, r3, #4
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a23      	ldr	r2, [pc, #140]	; (800cf08 <TIM_OC2_SetConfig+0xe8>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d003      	beq.n	800ce88 <TIM_OC2_SetConfig+0x68>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a22      	ldr	r2, [pc, #136]	; (800cf0c <TIM_OC2_SetConfig+0xec>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d10d      	bne.n	800cea4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	4a18      	ldr	r2, [pc, #96]	; (800cf08 <TIM_OC2_SetConfig+0xe8>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d003      	beq.n	800ceb4 <TIM_OC2_SetConfig+0x94>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4a17      	ldr	r2, [pc, #92]	; (800cf0c <TIM_OC2_SetConfig+0xec>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d113      	bne.n	800cedc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ceba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	695b      	ldr	r3, [r3, #20]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	4313      	orrs	r3, r2
 800cece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	621a      	str	r2, [r3, #32]
}
 800cef6:	bf00      	nop
 800cef8:	371c      	adds	r7, #28
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	feff8fff 	.word	0xfeff8fff
 800cf08:	40010000 	.word	0x40010000
 800cf0c:	40010400 	.word	0x40010400

0800cf10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b087      	sub	sp, #28
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	69db      	ldr	r3, [r3, #28]
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	4b2d      	ldr	r3, [pc, #180]	; (800cff0 <TIM_OC3_SetConfig+0xe0>)
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f023 0303 	bic.w	r3, r3, #3
 800cf46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	021b      	lsls	r3, r3, #8
 800cf60:	697a      	ldr	r2, [r7, #20]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a22      	ldr	r2, [pc, #136]	; (800cff4 <TIM_OC3_SetConfig+0xe4>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d003      	beq.n	800cf76 <TIM_OC3_SetConfig+0x66>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a21      	ldr	r2, [pc, #132]	; (800cff8 <TIM_OC3_SetConfig+0xe8>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d10d      	bne.n	800cf92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	021b      	lsls	r3, r3, #8
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cf90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a17      	ldr	r2, [pc, #92]	; (800cff4 <TIM_OC3_SetConfig+0xe4>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d003      	beq.n	800cfa2 <TIM_OC3_SetConfig+0x92>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a16      	ldr	r2, [pc, #88]	; (800cff8 <TIM_OC3_SetConfig+0xe8>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d113      	bne.n	800cfca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cfb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	011b      	lsls	r3, r3, #4
 800cfb8:	693a      	ldr	r2, [r7, #16]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	693a      	ldr	r2, [r7, #16]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	697a      	ldr	r2, [r7, #20]
 800cfe2:	621a      	str	r2, [r3, #32]
}
 800cfe4:	bf00      	nop
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	fffeff8f 	.word	0xfffeff8f
 800cff4:	40010000 	.word	0x40010000
 800cff8:	40010400 	.word	0x40010400

0800cffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b087      	sub	sp, #28
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a1b      	ldr	r3, [r3, #32]
 800d00a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a1b      	ldr	r3, [r3, #32]
 800d016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	4b1e      	ldr	r3, [pc, #120]	; (800d0a0 <TIM_OC4_SetConfig+0xa4>)
 800d028:	4013      	ands	r3, r2
 800d02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	021b      	lsls	r3, r3, #8
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	031b      	lsls	r3, r3, #12
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	4313      	orrs	r3, r2
 800d052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a13      	ldr	r2, [pc, #76]	; (800d0a4 <TIM_OC4_SetConfig+0xa8>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d003      	beq.n	800d064 <TIM_OC4_SetConfig+0x68>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a12      	ldr	r2, [pc, #72]	; (800d0a8 <TIM_OC4_SetConfig+0xac>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d109      	bne.n	800d078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d06a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	019b      	lsls	r3, r3, #6
 800d072:	697a      	ldr	r2, [r7, #20]
 800d074:	4313      	orrs	r3, r2
 800d076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	693a      	ldr	r2, [r7, #16]
 800d090:	621a      	str	r2, [r3, #32]
}
 800d092:	bf00      	nop
 800d094:	371c      	adds	r7, #28
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	feff8fff 	.word	0xfeff8fff
 800d0a4:	40010000 	.word	0x40010000
 800d0a8:	40010400 	.word	0x40010400

0800d0ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4b1b      	ldr	r3, [pc, #108]	; (800d144 <TIM_OC5_SetConfig+0x98>)
 800d0d8:	4013      	ands	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d0ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	041b      	lsls	r3, r3, #16
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a12      	ldr	r2, [pc, #72]	; (800d148 <TIM_OC5_SetConfig+0x9c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d003      	beq.n	800d10a <TIM_OC5_SetConfig+0x5e>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a11      	ldr	r2, [pc, #68]	; (800d14c <TIM_OC5_SetConfig+0xa0>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d109      	bne.n	800d11e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	021b      	lsls	r3, r3, #8
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	621a      	str	r2, [r3, #32]
}
 800d138:	bf00      	nop
 800d13a:	371c      	adds	r7, #28
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	fffeff8f 	.word	0xfffeff8f
 800d148:	40010000 	.word	0x40010000
 800d14c:	40010400 	.word	0x40010400

0800d150 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	4b1c      	ldr	r3, [pc, #112]	; (800d1ec <TIM_OC6_SetConfig+0x9c>)
 800d17c:	4013      	ands	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	4313      	orrs	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	051b      	lsls	r3, r3, #20
 800d19a:	693a      	ldr	r2, [r7, #16]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a13      	ldr	r2, [pc, #76]	; (800d1f0 <TIM_OC6_SetConfig+0xa0>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d003      	beq.n	800d1b0 <TIM_OC6_SetConfig+0x60>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a12      	ldr	r2, [pc, #72]	; (800d1f4 <TIM_OC6_SetConfig+0xa4>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d109      	bne.n	800d1c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	029b      	lsls	r3, r3, #10
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	621a      	str	r2, [r3, #32]
}
 800d1de:	bf00      	nop
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	feff8fff 	.word	0xfeff8fff
 800d1f0:	40010000 	.word	0x40010000
 800d1f4:	40010400 	.word	0x40010400

0800d1f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b087      	sub	sp, #28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6a1b      	ldr	r3, [r3, #32]
 800d208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	f023 0201 	bic.w	r2, r3, #1
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	011b      	lsls	r3, r3, #4
 800d228:	693a      	ldr	r2, [r7, #16]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f023 030a 	bic.w	r3, r3, #10
 800d234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	621a      	str	r2, [r3, #32]
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d256:	b480      	push	{r7}
 800d258:	b087      	sub	sp, #28
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	f023 0210 	bic.w	r2, r3, #16
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	031b      	lsls	r3, r3, #12
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	4313      	orrs	r3, r2
 800d28a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	011b      	lsls	r3, r3, #4
 800d298:	693a      	ldr	r2, [r7, #16]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	621a      	str	r2, [r3, #32]
}
 800d2aa:	bf00      	nop
 800d2ac:	371c      	adds	r7, #28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f043 0307 	orr.w	r3, r3, #7
 800d2d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	609a      	str	r2, [r3, #8]
}
 800d2e0:	bf00      	nop
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	021a      	lsls	r2, r3, #8
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	431a      	orrs	r2, r3
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	4313      	orrs	r3, r2
 800d314:	697a      	ldr	r2, [r7, #20]
 800d316:	4313      	orrs	r3, r2
 800d318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	609a      	str	r2, [r3, #8]
}
 800d320:	bf00      	nop
 800d322:	371c      	adds	r7, #28
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d101      	bne.n	800d344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d340:	2302      	movs	r3, #2
 800d342:	e06d      	b.n	800d420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2202      	movs	r2, #2
 800d350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a30      	ldr	r2, [pc, #192]	; (800d42c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d004      	beq.n	800d378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a2f      	ldr	r2, [pc, #188]	; (800d430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d108      	bne.n	800d38a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d37e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	4313      	orrs	r3, r2
 800d388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	4313      	orrs	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a20      	ldr	r2, [pc, #128]	; (800d42c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d022      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3b6:	d01d      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a1d      	ldr	r2, [pc, #116]	; (800d434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d018      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a1c      	ldr	r2, [pc, #112]	; (800d438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d013      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a1a      	ldr	r2, [pc, #104]	; (800d43c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d00e      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a15      	ldr	r2, [pc, #84]	; (800d430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d009      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a16      	ldr	r2, [pc, #88]	; (800d440 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d004      	beq.n	800d3f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a15      	ldr	r2, [pc, #84]	; (800d444 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d10c      	bne.n	800d40e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	4313      	orrs	r3, r2
 800d404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	40010000 	.word	0x40010000
 800d430:	40010400 	.word	0x40010400
 800d434:	40000400 	.word	0x40000400
 800d438:	40000800 	.word	0x40000800
 800d43c:	40000c00 	.word	0x40000c00
 800d440:	40014000 	.word	0x40014000
 800d444:	40001800 	.word	0x40001800

0800d448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d101      	bne.n	800d496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e040      	b.n	800d518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7f9 fd6e 	bl	8006f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2224      	movs	r2, #36	; 0x24
 800d4b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 0201 	bic.w	r2, r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f960 	bl	800d788 <UART_SetConfig>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d101      	bne.n	800d4d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e022      	b.n	800d518 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fc00 	bl	800dce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d4ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	689a      	ldr	r2, [r3, #8]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d4fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f042 0201 	orr.w	r2, r2, #1
 800d50e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 fc87 	bl	800de24 <UART_CheckIdleState>
 800d516:	4603      	mov	r3, r0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b08a      	sub	sp, #40	; 0x28
 800d524:	af02      	add	r7, sp, #8
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	603b      	str	r3, [r7, #0]
 800d52c:	4613      	mov	r3, r2
 800d52e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d534:	2b20      	cmp	r3, #32
 800d536:	d17f      	bne.n	800d638 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <HAL_UART_Transmit+0x24>
 800d53e:	88fb      	ldrh	r3, [r7, #6]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	e078      	b.n	800d63a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d101      	bne.n	800d556 <HAL_UART_Transmit+0x36>
 800d552:	2302      	movs	r3, #2
 800d554:	e071      	b.n	800d63a <HAL_UART_Transmit+0x11a>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2221      	movs	r2, #33	; 0x21
 800d568:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800d56a:	f7fa fc1b 	bl	8007da4 <HAL_GetTick>
 800d56e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	88fa      	ldrh	r2, [r7, #6]
 800d574:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	88fa      	ldrh	r2, [r7, #6]
 800d57c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d588:	d108      	bne.n	800d59c <HAL_UART_Transmit+0x7c>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d104      	bne.n	800d59c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800d592:	2300      	movs	r3, #0
 800d594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	61bb      	str	r3, [r7, #24]
 800d59a:	e003      	b.n	800d5a4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800d5ac:	e02c      	b.n	800d608 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	2180      	movs	r1, #128	; 0x80
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f000 fc78 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e038      	b.n	800d63a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10b      	bne.n	800d5e6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	881b      	ldrh	r3, [r3, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	61bb      	str	r3, [r7, #24]
 800d5e4:	e007      	b.n	800d5f6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	781a      	ldrb	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	3b01      	subs	r3, #1
 800d600:	b29a      	uxth	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d60e:	b29b      	uxth	r3, r3
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1cc      	bne.n	800d5ae <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	2200      	movs	r2, #0
 800d61c:	2140      	movs	r1, #64	; 0x40
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 fc45 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d62a:	2303      	movs	r3, #3
 800d62c:	e005      	b.n	800d63a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2220      	movs	r2, #32
 800d632:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	e000      	b.n	800d63a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800d638:	2302      	movs	r3, #2
  }
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3720      	adds	r7, #32
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	4613      	mov	r3, r2
 800d650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d656:	2b20      	cmp	r3, #32
 800d658:	d16c      	bne.n	800d734 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <HAL_UART_Receive_DMA+0x22>
 800d660:	88fb      	ldrh	r3, [r7, #6]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d101      	bne.n	800d66a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e065      	b.n	800d736 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d670:	2b01      	cmp	r3, #1
 800d672:	d101      	bne.n	800d678 <HAL_UART_Receive_DMA+0x34>
 800d674:	2302      	movs	r3, #2
 800d676:	e05e      	b.n	800d736 <HAL_UART_Receive_DMA+0xf2>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	88fa      	ldrh	r2, [r7, #6]
 800d68a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2222      	movs	r2, #34	; 0x22
 800d698:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d02a      	beq.n	800d6f8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a6:	4a26      	ldr	r2, [pc, #152]	; (800d740 <HAL_UART_Receive_DMA+0xfc>)
 800d6a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6ae:	4a25      	ldr	r2, [pc, #148]	; (800d744 <HAL_UART_Receive_DMA+0x100>)
 800d6b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6b6:	4a24      	ldr	r2, [pc, #144]	; (800d748 <HAL_UART_Receive_DMA+0x104>)
 800d6b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6be:	2200      	movs	r2, #0
 800d6c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3324      	adds	r3, #36	; 0x24
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	88fb      	ldrh	r3, [r7, #6]
 800d6d6:	f7fb fad1 	bl	8008c7c <HAL_DMA_Start_IT>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00b      	beq.n	800d6f8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2210      	movs	r2, #16
 800d6e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2220      	movs	r2, #32
 800d6f2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e01e      	b.n	800d736 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d70e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	689a      	ldr	r2, [r3, #8]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f042 0201 	orr.w	r2, r2, #1
 800d71e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d72e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800d730:	2300      	movs	r3, #0
 800d732:	e000      	b.n	800d736 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800d734:	2302      	movs	r3, #2
  }
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0800e00f 	.word	0x0800e00f
 800d744:	0800e073 	.word	0x0800e073
 800d748:	0800e08f 	.word	0x0800e08f

0800d74c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d768:	bf00      	nop
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b088      	sub	sp, #32
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d790:	2300      	movs	r3, #0
 800d792:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	689a      	ldr	r2, [r3, #8]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	431a      	orrs	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	695b      	ldr	r3, [r3, #20]
 800d7a6:	431a      	orrs	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	69db      	ldr	r3, [r3, #28]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	4ba7      	ldr	r3, [pc, #668]	; (800da54 <UART_SetConfig+0x2cc>)
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	6812      	ldr	r2, [r2, #0]
 800d7be:	6939      	ldr	r1, [r7, #16]
 800d7c0:	430b      	orrs	r3, r1
 800d7c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68da      	ldr	r2, [r3, #12]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	699b      	ldr	r3, [r3, #24]
 800d7de:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a95      	ldr	r2, [pc, #596]	; (800da58 <UART_SetConfig+0x2d0>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d120      	bne.n	800d84a <UART_SetConfig+0xc2>
 800d808:	4b94      	ldr	r3, [pc, #592]	; (800da5c <UART_SetConfig+0x2d4>)
 800d80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80e:	f003 0303 	and.w	r3, r3, #3
 800d812:	2b03      	cmp	r3, #3
 800d814:	d816      	bhi.n	800d844 <UART_SetConfig+0xbc>
 800d816:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <UART_SetConfig+0x94>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d82d 	.word	0x0800d82d
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d833 	.word	0x0800d833
 800d828:	0800d83f 	.word	0x0800d83f
 800d82c:	2301      	movs	r3, #1
 800d82e:	77fb      	strb	r3, [r7, #31]
 800d830:	e14f      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d832:	2302      	movs	r3, #2
 800d834:	77fb      	strb	r3, [r7, #31]
 800d836:	e14c      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d838:	2304      	movs	r3, #4
 800d83a:	77fb      	strb	r3, [r7, #31]
 800d83c:	e149      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d83e:	2308      	movs	r3, #8
 800d840:	77fb      	strb	r3, [r7, #31]
 800d842:	e146      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d844:	2310      	movs	r3, #16
 800d846:	77fb      	strb	r3, [r7, #31]
 800d848:	e143      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a84      	ldr	r2, [pc, #528]	; (800da60 <UART_SetConfig+0x2d8>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d132      	bne.n	800d8ba <UART_SetConfig+0x132>
 800d854:	4b81      	ldr	r3, [pc, #516]	; (800da5c <UART_SetConfig+0x2d4>)
 800d856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85a:	f003 030c 	and.w	r3, r3, #12
 800d85e:	2b0c      	cmp	r3, #12
 800d860:	d828      	bhi.n	800d8b4 <UART_SetConfig+0x12c>
 800d862:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <UART_SetConfig+0xe0>)
 800d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d868:	0800d89d 	.word	0x0800d89d
 800d86c:	0800d8b5 	.word	0x0800d8b5
 800d870:	0800d8b5 	.word	0x0800d8b5
 800d874:	0800d8b5 	.word	0x0800d8b5
 800d878:	0800d8a9 	.word	0x0800d8a9
 800d87c:	0800d8b5 	.word	0x0800d8b5
 800d880:	0800d8b5 	.word	0x0800d8b5
 800d884:	0800d8b5 	.word	0x0800d8b5
 800d888:	0800d8a3 	.word	0x0800d8a3
 800d88c:	0800d8b5 	.word	0x0800d8b5
 800d890:	0800d8b5 	.word	0x0800d8b5
 800d894:	0800d8b5 	.word	0x0800d8b5
 800d898:	0800d8af 	.word	0x0800d8af
 800d89c:	2300      	movs	r3, #0
 800d89e:	77fb      	strb	r3, [r7, #31]
 800d8a0:	e117      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	77fb      	strb	r3, [r7, #31]
 800d8a6:	e114      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8a8:	2304      	movs	r3, #4
 800d8aa:	77fb      	strb	r3, [r7, #31]
 800d8ac:	e111      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8ae:	2308      	movs	r3, #8
 800d8b0:	77fb      	strb	r3, [r7, #31]
 800d8b2:	e10e      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8b4:	2310      	movs	r3, #16
 800d8b6:	77fb      	strb	r3, [r7, #31]
 800d8b8:	e10b      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a69      	ldr	r2, [pc, #420]	; (800da64 <UART_SetConfig+0x2dc>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d120      	bne.n	800d906 <UART_SetConfig+0x17e>
 800d8c4:	4b65      	ldr	r3, [pc, #404]	; (800da5c <UART_SetConfig+0x2d4>)
 800d8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d8ce:	2b30      	cmp	r3, #48	; 0x30
 800d8d0:	d013      	beq.n	800d8fa <UART_SetConfig+0x172>
 800d8d2:	2b30      	cmp	r3, #48	; 0x30
 800d8d4:	d814      	bhi.n	800d900 <UART_SetConfig+0x178>
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d009      	beq.n	800d8ee <UART_SetConfig+0x166>
 800d8da:	2b20      	cmp	r3, #32
 800d8dc:	d810      	bhi.n	800d900 <UART_SetConfig+0x178>
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <UART_SetConfig+0x160>
 800d8e2:	2b10      	cmp	r3, #16
 800d8e4:	d006      	beq.n	800d8f4 <UART_SetConfig+0x16c>
 800d8e6:	e00b      	b.n	800d900 <UART_SetConfig+0x178>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	77fb      	strb	r3, [r7, #31]
 800d8ec:	e0f1      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	77fb      	strb	r3, [r7, #31]
 800d8f2:	e0ee      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8f4:	2304      	movs	r3, #4
 800d8f6:	77fb      	strb	r3, [r7, #31]
 800d8f8:	e0eb      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d8fa:	2308      	movs	r3, #8
 800d8fc:	77fb      	strb	r3, [r7, #31]
 800d8fe:	e0e8      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d900:	2310      	movs	r3, #16
 800d902:	77fb      	strb	r3, [r7, #31]
 800d904:	e0e5      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a57      	ldr	r2, [pc, #348]	; (800da68 <UART_SetConfig+0x2e0>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d120      	bne.n	800d952 <UART_SetConfig+0x1ca>
 800d910:	4b52      	ldr	r3, [pc, #328]	; (800da5c <UART_SetConfig+0x2d4>)
 800d912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d91a:	2bc0      	cmp	r3, #192	; 0xc0
 800d91c:	d013      	beq.n	800d946 <UART_SetConfig+0x1be>
 800d91e:	2bc0      	cmp	r3, #192	; 0xc0
 800d920:	d814      	bhi.n	800d94c <UART_SetConfig+0x1c4>
 800d922:	2b80      	cmp	r3, #128	; 0x80
 800d924:	d009      	beq.n	800d93a <UART_SetConfig+0x1b2>
 800d926:	2b80      	cmp	r3, #128	; 0x80
 800d928:	d810      	bhi.n	800d94c <UART_SetConfig+0x1c4>
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d002      	beq.n	800d934 <UART_SetConfig+0x1ac>
 800d92e:	2b40      	cmp	r3, #64	; 0x40
 800d930:	d006      	beq.n	800d940 <UART_SetConfig+0x1b8>
 800d932:	e00b      	b.n	800d94c <UART_SetConfig+0x1c4>
 800d934:	2300      	movs	r3, #0
 800d936:	77fb      	strb	r3, [r7, #31]
 800d938:	e0cb      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d93a:	2302      	movs	r3, #2
 800d93c:	77fb      	strb	r3, [r7, #31]
 800d93e:	e0c8      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d940:	2304      	movs	r3, #4
 800d942:	77fb      	strb	r3, [r7, #31]
 800d944:	e0c5      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d946:	2308      	movs	r3, #8
 800d948:	77fb      	strb	r3, [r7, #31]
 800d94a:	e0c2      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d94c:	2310      	movs	r3, #16
 800d94e:	77fb      	strb	r3, [r7, #31]
 800d950:	e0bf      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a45      	ldr	r2, [pc, #276]	; (800da6c <UART_SetConfig+0x2e4>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d125      	bne.n	800d9a8 <UART_SetConfig+0x220>
 800d95c:	4b3f      	ldr	r3, [pc, #252]	; (800da5c <UART_SetConfig+0x2d4>)
 800d95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d96a:	d017      	beq.n	800d99c <UART_SetConfig+0x214>
 800d96c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d970:	d817      	bhi.n	800d9a2 <UART_SetConfig+0x21a>
 800d972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d976:	d00b      	beq.n	800d990 <UART_SetConfig+0x208>
 800d978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d97c:	d811      	bhi.n	800d9a2 <UART_SetConfig+0x21a>
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <UART_SetConfig+0x202>
 800d982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d986:	d006      	beq.n	800d996 <UART_SetConfig+0x20e>
 800d988:	e00b      	b.n	800d9a2 <UART_SetConfig+0x21a>
 800d98a:	2300      	movs	r3, #0
 800d98c:	77fb      	strb	r3, [r7, #31]
 800d98e:	e0a0      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d990:	2302      	movs	r3, #2
 800d992:	77fb      	strb	r3, [r7, #31]
 800d994:	e09d      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d996:	2304      	movs	r3, #4
 800d998:	77fb      	strb	r3, [r7, #31]
 800d99a:	e09a      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d99c:	2308      	movs	r3, #8
 800d99e:	77fb      	strb	r3, [r7, #31]
 800d9a0:	e097      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9a2:	2310      	movs	r3, #16
 800d9a4:	77fb      	strb	r3, [r7, #31]
 800d9a6:	e094      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a30      	ldr	r2, [pc, #192]	; (800da70 <UART_SetConfig+0x2e8>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d125      	bne.n	800d9fe <UART_SetConfig+0x276>
 800d9b2:	4b2a      	ldr	r3, [pc, #168]	; (800da5c <UART_SetConfig+0x2d4>)
 800d9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d9bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d9c0:	d017      	beq.n	800d9f2 <UART_SetConfig+0x26a>
 800d9c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d9c6:	d817      	bhi.n	800d9f8 <UART_SetConfig+0x270>
 800d9c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9cc:	d00b      	beq.n	800d9e6 <UART_SetConfig+0x25e>
 800d9ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9d2:	d811      	bhi.n	800d9f8 <UART_SetConfig+0x270>
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d003      	beq.n	800d9e0 <UART_SetConfig+0x258>
 800d9d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9dc:	d006      	beq.n	800d9ec <UART_SetConfig+0x264>
 800d9de:	e00b      	b.n	800d9f8 <UART_SetConfig+0x270>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	77fb      	strb	r3, [r7, #31]
 800d9e4:	e075      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	77fb      	strb	r3, [r7, #31]
 800d9ea:	e072      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9ec:	2304      	movs	r3, #4
 800d9ee:	77fb      	strb	r3, [r7, #31]
 800d9f0:	e06f      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9f2:	2308      	movs	r3, #8
 800d9f4:	77fb      	strb	r3, [r7, #31]
 800d9f6:	e06c      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9f8:	2310      	movs	r3, #16
 800d9fa:	77fb      	strb	r3, [r7, #31]
 800d9fc:	e069      	b.n	800dad2 <UART_SetConfig+0x34a>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a1c      	ldr	r2, [pc, #112]	; (800da74 <UART_SetConfig+0x2ec>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d137      	bne.n	800da78 <UART_SetConfig+0x2f0>
 800da08:	4b14      	ldr	r3, [pc, #80]	; (800da5c <UART_SetConfig+0x2d4>)
 800da0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800da12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800da16:	d017      	beq.n	800da48 <UART_SetConfig+0x2c0>
 800da18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800da1c:	d817      	bhi.n	800da4e <UART_SetConfig+0x2c6>
 800da1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da22:	d00b      	beq.n	800da3c <UART_SetConfig+0x2b4>
 800da24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da28:	d811      	bhi.n	800da4e <UART_SetConfig+0x2c6>
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <UART_SetConfig+0x2ae>
 800da2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da32:	d006      	beq.n	800da42 <UART_SetConfig+0x2ba>
 800da34:	e00b      	b.n	800da4e <UART_SetConfig+0x2c6>
 800da36:	2300      	movs	r3, #0
 800da38:	77fb      	strb	r3, [r7, #31]
 800da3a:	e04a      	b.n	800dad2 <UART_SetConfig+0x34a>
 800da3c:	2302      	movs	r3, #2
 800da3e:	77fb      	strb	r3, [r7, #31]
 800da40:	e047      	b.n	800dad2 <UART_SetConfig+0x34a>
 800da42:	2304      	movs	r3, #4
 800da44:	77fb      	strb	r3, [r7, #31]
 800da46:	e044      	b.n	800dad2 <UART_SetConfig+0x34a>
 800da48:	2308      	movs	r3, #8
 800da4a:	77fb      	strb	r3, [r7, #31]
 800da4c:	e041      	b.n	800dad2 <UART_SetConfig+0x34a>
 800da4e:	2310      	movs	r3, #16
 800da50:	77fb      	strb	r3, [r7, #31]
 800da52:	e03e      	b.n	800dad2 <UART_SetConfig+0x34a>
 800da54:	efff69f3 	.word	0xefff69f3
 800da58:	40011000 	.word	0x40011000
 800da5c:	40023800 	.word	0x40023800
 800da60:	40004400 	.word	0x40004400
 800da64:	40004800 	.word	0x40004800
 800da68:	40004c00 	.word	0x40004c00
 800da6c:	40005000 	.word	0x40005000
 800da70:	40011400 	.word	0x40011400
 800da74:	40007800 	.word	0x40007800
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a94      	ldr	r2, [pc, #592]	; (800dcd0 <UART_SetConfig+0x548>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d125      	bne.n	800dace <UART_SetConfig+0x346>
 800da82:	4b94      	ldr	r3, [pc, #592]	; (800dcd4 <UART_SetConfig+0x54c>)
 800da84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800da8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800da90:	d017      	beq.n	800dac2 <UART_SetConfig+0x33a>
 800da92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800da96:	d817      	bhi.n	800dac8 <UART_SetConfig+0x340>
 800da98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da9c:	d00b      	beq.n	800dab6 <UART_SetConfig+0x32e>
 800da9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daa2:	d811      	bhi.n	800dac8 <UART_SetConfig+0x340>
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <UART_SetConfig+0x328>
 800daa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daac:	d006      	beq.n	800dabc <UART_SetConfig+0x334>
 800daae:	e00b      	b.n	800dac8 <UART_SetConfig+0x340>
 800dab0:	2300      	movs	r3, #0
 800dab2:	77fb      	strb	r3, [r7, #31]
 800dab4:	e00d      	b.n	800dad2 <UART_SetConfig+0x34a>
 800dab6:	2302      	movs	r3, #2
 800dab8:	77fb      	strb	r3, [r7, #31]
 800daba:	e00a      	b.n	800dad2 <UART_SetConfig+0x34a>
 800dabc:	2304      	movs	r3, #4
 800dabe:	77fb      	strb	r3, [r7, #31]
 800dac0:	e007      	b.n	800dad2 <UART_SetConfig+0x34a>
 800dac2:	2308      	movs	r3, #8
 800dac4:	77fb      	strb	r3, [r7, #31]
 800dac6:	e004      	b.n	800dad2 <UART_SetConfig+0x34a>
 800dac8:	2310      	movs	r3, #16
 800daca:	77fb      	strb	r3, [r7, #31]
 800dacc:	e001      	b.n	800dad2 <UART_SetConfig+0x34a>
 800dace:	2310      	movs	r3, #16
 800dad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dada:	d17f      	bne.n	800dbdc <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800dadc:	7ffb      	ldrb	r3, [r7, #31]
 800dade:	2b08      	cmp	r3, #8
 800dae0:	d85c      	bhi.n	800db9c <UART_SetConfig+0x414>
 800dae2:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <UART_SetConfig+0x360>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db0d 	.word	0x0800db0d
 800daec:	0800db2d 	.word	0x0800db2d
 800daf0:	0800db4d 	.word	0x0800db4d
 800daf4:	0800db9d 	.word	0x0800db9d
 800daf8:	0800db65 	.word	0x0800db65
 800dafc:	0800db9d 	.word	0x0800db9d
 800db00:	0800db9d 	.word	0x0800db9d
 800db04:	0800db9d 	.word	0x0800db9d
 800db08:	0800db85 	.word	0x0800db85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db0c:	f7fd fb6a 	bl	800b1e4 <HAL_RCC_GetPCLK1Freq>
 800db10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	005a      	lsls	r2, r3, #1
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	085b      	lsrs	r3, r3, #1
 800db1c:	441a      	add	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	fbb2 f3f3 	udiv	r3, r2, r3
 800db26:	b29b      	uxth	r3, r3
 800db28:	61bb      	str	r3, [r7, #24]
        break;
 800db2a:	e03a      	b.n	800dba2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db2c:	f7fd fb6e 	bl	800b20c <HAL_RCC_GetPCLK2Freq>
 800db30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	005a      	lsls	r2, r3, #1
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	085b      	lsrs	r3, r3, #1
 800db3c:	441a      	add	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	fbb2 f3f3 	udiv	r3, r2, r3
 800db46:	b29b      	uxth	r3, r3
 800db48:	61bb      	str	r3, [r7, #24]
        break;
 800db4a:	e02a      	b.n	800dba2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	085a      	lsrs	r2, r3, #1
 800db52:	4b61      	ldr	r3, [pc, #388]	; (800dcd8 <UART_SetConfig+0x550>)
 800db54:	4413      	add	r3, r2
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	6852      	ldr	r2, [r2, #4]
 800db5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800db5e:	b29b      	uxth	r3, r3
 800db60:	61bb      	str	r3, [r7, #24]
        break;
 800db62:	e01e      	b.n	800dba2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db64:	f7fd fa7c 	bl	800b060 <HAL_RCC_GetSysClockFreq>
 800db68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	005a      	lsls	r2, r3, #1
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	085b      	lsrs	r3, r3, #1
 800db74:	441a      	add	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db7e:	b29b      	uxth	r3, r3
 800db80:	61bb      	str	r3, [r7, #24]
        break;
 800db82:	e00e      	b.n	800dba2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	085b      	lsrs	r3, r3, #1
 800db8a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	fbb2 f3f3 	udiv	r3, r2, r3
 800db96:	b29b      	uxth	r3, r3
 800db98:	61bb      	str	r3, [r7, #24]
        break;
 800db9a:	e002      	b.n	800dba2 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	75fb      	strb	r3, [r7, #23]
        break;
 800dba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b0f      	cmp	r3, #15
 800dba6:	d916      	bls.n	800dbd6 <UART_SetConfig+0x44e>
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbae:	d212      	bcs.n	800dbd6 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	f023 030f 	bic.w	r3, r3, #15
 800dbb8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	085b      	lsrs	r3, r3, #1
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	f003 0307 	and.w	r3, r3, #7
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	897b      	ldrh	r3, [r7, #10]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	897a      	ldrh	r2, [r7, #10]
 800dbd2:	60da      	str	r2, [r3, #12]
 800dbd4:	e070      	b.n	800dcb8 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	75fb      	strb	r3, [r7, #23]
 800dbda:	e06d      	b.n	800dcb8 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800dbdc:	7ffb      	ldrb	r3, [r7, #31]
 800dbde:	2b08      	cmp	r3, #8
 800dbe0:	d859      	bhi.n	800dc96 <UART_SetConfig+0x50e>
 800dbe2:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <UART_SetConfig+0x460>)
 800dbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe8:	0800dc0d 	.word	0x0800dc0d
 800dbec:	0800dc2b 	.word	0x0800dc2b
 800dbf0:	0800dc49 	.word	0x0800dc49
 800dbf4:	0800dc97 	.word	0x0800dc97
 800dbf8:	0800dc61 	.word	0x0800dc61
 800dbfc:	0800dc97 	.word	0x0800dc97
 800dc00:	0800dc97 	.word	0x0800dc97
 800dc04:	0800dc97 	.word	0x0800dc97
 800dc08:	0800dc7f 	.word	0x0800dc7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc0c:	f7fd faea 	bl	800b1e4 <HAL_RCC_GetPCLK1Freq>
 800dc10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	085a      	lsrs	r2, r3, #1
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	441a      	add	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	61bb      	str	r3, [r7, #24]
        break;
 800dc28:	e038      	b.n	800dc9c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc2a:	f7fd faef 	bl	800b20c <HAL_RCC_GetPCLK2Freq>
 800dc2e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	085a      	lsrs	r2, r3, #1
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	441a      	add	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	61bb      	str	r3, [r7, #24]
        break;
 800dc46:	e029      	b.n	800dc9c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	085a      	lsrs	r2, r3, #1
 800dc4e:	4b23      	ldr	r3, [pc, #140]	; (800dcdc <UART_SetConfig+0x554>)
 800dc50:	4413      	add	r3, r2
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	6852      	ldr	r2, [r2, #4]
 800dc56:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	61bb      	str	r3, [r7, #24]
        break;
 800dc5e:	e01d      	b.n	800dc9c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc60:	f7fd f9fe 	bl	800b060 <HAL_RCC_GetSysClockFreq>
 800dc64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	085a      	lsrs	r2, r3, #1
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	441a      	add	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	61bb      	str	r3, [r7, #24]
        break;
 800dc7c:	e00e      	b.n	800dc9c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	085b      	lsrs	r3, r3, #1
 800dc84:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	61bb      	str	r3, [r7, #24]
        break;
 800dc94:	e002      	b.n	800dc9c <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	75fb      	strb	r3, [r7, #23]
        break;
 800dc9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	2b0f      	cmp	r3, #15
 800dca0:	d908      	bls.n	800dcb4 <UART_SetConfig+0x52c>
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dca8:	d204      	bcs.n	800dcb4 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	60da      	str	r2, [r3, #12]
 800dcb2:	e001      	b.n	800dcb8 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3720      	adds	r7, #32
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	40007c00 	.word	0x40007c00
 800dcd4:	40023800 	.word	0x40023800
 800dcd8:	01e84800 	.word	0x01e84800
 800dcdc:	00f42400 	.word	0x00f42400

0800dce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00a      	beq.n	800dd0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	430a      	orrs	r2, r1
 800dd08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0e:	f003 0302 	and.w	r3, r3, #2
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	f003 0304 	and.w	r3, r3, #4
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00a      	beq.n	800dd4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	430a      	orrs	r2, r1
 800dd4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd52:	f003 0308 	and.w	r3, r3, #8
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00a      	beq.n	800dd70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd74:	f003 0310 	and.w	r3, r3, #16
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	430a      	orrs	r2, r1
 800dd90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd96:	f003 0320 	and.w	r3, r3, #32
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	430a      	orrs	r2, r1
 800ddb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d01a      	beq.n	800ddf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	430a      	orrs	r2, r1
 800ddd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddde:	d10a      	bne.n	800ddf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	430a      	orrs	r2, r1
 800ddf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	430a      	orrs	r2, r1
 800de16:	605a      	str	r2, [r3, #4]
  }
}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af02      	add	r7, sp, #8
 800de2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800de32:	f7f9 ffb7 	bl	8007da4 <HAL_GetTick>
 800de36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f003 0308 	and.w	r3, r3, #8
 800de42:	2b08      	cmp	r3, #8
 800de44:	d10e      	bne.n	800de64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2200      	movs	r2, #0
 800de50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 f82a 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e020      	b.n	800dea6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b04      	cmp	r3, #4
 800de70:	d10e      	bne.n	800de90 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2200      	movs	r2, #0
 800de7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f814 	bl	800deae <UART_WaitOnFlagUntilTimeout>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de8c:	2303      	movs	r3, #3
 800de8e:	e00a      	b.n	800dea6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2220      	movs	r2, #32
 800de94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2220      	movs	r2, #32
 800de9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b084      	sub	sp, #16
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	603b      	str	r3, [r7, #0]
 800deba:	4613      	mov	r3, r2
 800debc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800debe:	e05d      	b.n	800df7c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	d059      	beq.n	800df7c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dec8:	f7f9 ff6c 	bl	8007da4 <HAL_GetTick>
 800decc:	4602      	mov	r2, r0
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	69ba      	ldr	r2, [r7, #24]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d302      	bcc.n	800dede <UART_WaitOnFlagUntilTimeout+0x30>
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d11b      	bne.n	800df16 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800deec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	689a      	ldr	r2, [r3, #8]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f022 0201 	bic.w	r2, r2, #1
 800defc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2220      	movs	r2, #32
 800df02:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2220      	movs	r2, #32
 800df08:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800df12:	2303      	movs	r3, #3
 800df14:	e042      	b.n	800df9c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f003 0304 	and.w	r3, r3, #4
 800df20:	2b00      	cmp	r3, #0
 800df22:	d02b      	beq.n	800df7c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df32:	d123      	bne.n	800df7c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df3c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800df4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	689a      	ldr	r2, [r3, #8]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f022 0201 	bic.w	r2, r2, #1
 800df5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2220      	movs	r2, #32
 800df62:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2220      	movs	r2, #32
 800df68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2220      	movs	r2, #32
 800df6e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800df78:	2303      	movs	r3, #3
 800df7a:	e00f      	b.n	800df9c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	69da      	ldr	r2, [r3, #28]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	4013      	ands	r3, r2
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	429a      	cmp	r2, r3
 800df8a:	bf0c      	ite	eq
 800df8c:	2301      	moveq	r3, #1
 800df8e:	2300      	movne	r3, #0
 800df90:	b2db      	uxtb	r3, r3
 800df92:	461a      	mov	r2, r3
 800df94:	79fb      	ldrb	r3, [r7, #7]
 800df96:	429a      	cmp	r2, r3
 800df98:	d092      	beq.n	800dec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800dfba:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2220      	movs	r2, #32
 800dfc0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dfc2:	bf00      	nop
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dfe4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	689a      	ldr	r2, [r3, #8]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f022 0201 	bic.w	r2, r2, #1
 800dff4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2220      	movs	r2, #32
 800dffa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	661a      	str	r2, [r3, #96]	; 0x60
}
 800e002:	bf00      	nop
 800e004:	370c      	adds	r7, #12
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e01a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e024:	d01e      	beq.n	800e064 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e03c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689a      	ldr	r2, [r3, #8]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f022 0201 	bic.w	r2, r2, #1
 800e04c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	689a      	ldr	r2, [r3, #8]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e05c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2220      	movs	r2, #32
 800e062:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f7ff fb71 	bl	800d74c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e06a:	bf00      	nop
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7ff fb6d 	bl	800d760 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e086:	bf00      	nop
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b086      	sub	sp, #24
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b2:	2b80      	cmp	r3, #128	; 0x80
 800e0b4:	d109      	bne.n	800e0ca <UART_DMAError+0x3c>
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	2b21      	cmp	r3, #33	; 0x21
 800e0ba:	d106      	bne.n	800e0ca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800e0c4:	6978      	ldr	r0, [r7, #20]
 800e0c6:	f7ff ff6d 	bl	800dfa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d4:	2b40      	cmp	r3, #64	; 0x40
 800e0d6:	d109      	bne.n	800e0ec <UART_DMAError+0x5e>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b22      	cmp	r3, #34	; 0x22
 800e0dc:	d106      	bne.n	800e0ec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800e0e6:	6978      	ldr	r0, [r7, #20]
 800e0e8:	f7ff ff71 	bl	800dfce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0f0:	f043 0210 	orr.w	r2, r3, #16
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0f8:	6978      	ldr	r0, [r7, #20]
 800e0fa:	f7ff fb3b 	bl	800d774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0fe:	bf00      	nop
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e108:	b084      	sub	sp, #16
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b084      	sub	sp, #16
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	f107 001c 	add.w	r0, r7, #28
 800e116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d120      	bne.n	800e162 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	68da      	ldr	r2, [r3, #12]
 800e130:	4b20      	ldr	r3, [pc, #128]	; (800e1b4 <USB_CoreInit+0xac>)
 800e132:	4013      	ands	r3, r2
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e146:	2b01      	cmp	r3, #1
 800e148:	d105      	bne.n	800e156 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fa52 	bl	800e600 <USB_CoreReset>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73fb      	strb	r3, [r7, #15]
 800e160:	e010      	b.n	800e184 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fa46 	bl	800e600 <USB_CoreReset>
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e17c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	2b01      	cmp	r3, #1
 800e188:	d10b      	bne.n	800e1a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f043 0206 	orr.w	r2, r3, #6
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	f043 0220 	orr.w	r2, r3, #32
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e1ae:	b004      	add	sp, #16
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	ffbdffbf 	.word	0xffbdffbf

0800e1b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	f023 0201 	bic.w	r2, r3, #1
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	370c      	adds	r7, #12
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b082      	sub	sp, #8
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e1f2:	78fb      	ldrb	r3, [r7, #3]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d106      	bne.n	800e206 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	60da      	str	r2, [r3, #12]
 800e204:	e00b      	b.n	800e21e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e206:	78fb      	ldrb	r3, [r7, #3]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d106      	bne.n	800e21a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	60da      	str	r2, [r3, #12]
 800e218:	e001      	b.n	800e21e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	e003      	b.n	800e226 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e21e:	2032      	movs	r0, #50	; 0x32
 800e220:	f7f9 fdcc 	bl	8007dbc <HAL_Delay>

  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
	...

0800e230 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e230:	b084      	sub	sp, #16
 800e232:	b580      	push	{r7, lr}
 800e234:	b086      	sub	sp, #24
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e23e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e24a:	2300      	movs	r3, #0
 800e24c:	613b      	str	r3, [r7, #16]
 800e24e:	e009      	b.n	800e264 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	3340      	adds	r3, #64	; 0x40
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	2200      	movs	r2, #0
 800e25c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	3301      	adds	r3, #1
 800e262:	613b      	str	r3, [r7, #16]
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	2b0e      	cmp	r3, #14
 800e268:	d9f2      	bls.n	800e250 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d11c      	bne.n	800e2aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e27e:	f043 0302 	orr.w	r3, r3, #2
 800e282:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e288:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	601a      	str	r2, [r3, #0]
 800e2a8:	e005      	b.n	800e2b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2bc:	461a      	mov	r2, r3
 800e2be:	2300      	movs	r3, #0
 800e2c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	680b      	ldr	r3, [r1, #0]
 800e2d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d10c      	bne.n	800e2f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d104      	bne.n	800e2ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f959 	bl	800e59c <USB_SetDevSpeed>
 800e2ea:	e018      	b.n	800e31e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f954 	bl	800e59c <USB_SetDevSpeed>
 800e2f4:	e013      	b.n	800e31e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f8:	2b03      	cmp	r3, #3
 800e2fa:	d10c      	bne.n	800e316 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d104      	bne.n	800e30c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e302:	2100      	movs	r1, #0
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f949 	bl	800e59c <USB_SetDevSpeed>
 800e30a:	e008      	b.n	800e31e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e30c:	2101      	movs	r1, #1
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 f944 	bl	800e59c <USB_SetDevSpeed>
 800e314:	e003      	b.n	800e31e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e316:	2103      	movs	r1, #3
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f93f 	bl	800e59c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e31e:	2110      	movs	r1, #16
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 f8f3 	bl	800e50c <USB_FlushTxFifo>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f911 	bl	800e558 <USB_FlushRxFifo>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e346:	461a      	mov	r2, r3
 800e348:	2300      	movs	r3, #0
 800e34a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e352:	461a      	mov	r2, r3
 800e354:	2300      	movs	r3, #0
 800e356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e35e:	461a      	mov	r2, r3
 800e360:	2300      	movs	r3, #0
 800e362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e364:	2300      	movs	r3, #0
 800e366:	613b      	str	r3, [r7, #16]
 800e368:	e043      	b.n	800e3f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	015a      	lsls	r2, r3, #5
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	4413      	add	r3, r2
 800e372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e37c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e380:	d118      	bne.n	800e3b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10a      	bne.n	800e39e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	015a      	lsls	r2, r3, #5
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	4413      	add	r3, r2
 800e390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e394:	461a      	mov	r2, r3
 800e396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	e013      	b.n	800e3c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	015a      	lsls	r2, r3, #5
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e3b0:	6013      	str	r3, [r2, #0]
 800e3b2:	e008      	b.n	800e3c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	015a      	lsls	r2, r3, #5
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	015a      	lsls	r2, r3, #5
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e3ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	613b      	str	r3, [r7, #16]
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	693a      	ldr	r2, [r7, #16]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d3b7      	bcc.n	800e36a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	613b      	str	r3, [r7, #16]
 800e3fe:	e043      	b.n	800e488 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	015a      	lsls	r2, r3, #5
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	4413      	add	r3, r2
 800e408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e416:	d118      	bne.n	800e44a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10a      	bne.n	800e434 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e42a:	461a      	mov	r2, r3
 800e42c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	e013      	b.n	800e45c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e440:	461a      	mov	r2, r3
 800e442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e446:	6013      	str	r3, [r2, #0]
 800e448:	e008      	b.n	800e45c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	4413      	add	r3, r2
 800e452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e456:	461a      	mov	r2, r3
 800e458:	2300      	movs	r3, #0
 800e45a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e468:	461a      	mov	r2, r3
 800e46a:	2300      	movs	r3, #0
 800e46c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	015a      	lsls	r2, r3, #5
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	4413      	add	r3, r2
 800e476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e47a:	461a      	mov	r2, r3
 800e47c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	3301      	adds	r3, #1
 800e486:	613b      	str	r3, [r7, #16]
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	693a      	ldr	r2, [r7, #16]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d3b7      	bcc.n	800e400 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e49e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e4b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d105      	bne.n	800e4c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	f043 0210 	orr.w	r2, r3, #16
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	699a      	ldr	r2, [r3, #24]
 800e4c8:	4b0e      	ldr	r3, [pc, #56]	; (800e504 <USB_DevInit+0x2d4>)
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d005      	beq.n	800e4e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	699b      	ldr	r3, [r3, #24]
 800e4da:	f043 0208 	orr.w	r2, r3, #8
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d105      	bne.n	800e4f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	699a      	ldr	r2, [r3, #24]
 800e4ec:	4b06      	ldr	r3, [pc, #24]	; (800e508 <USB_DevInit+0x2d8>)
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3718      	adds	r7, #24
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e500:	b004      	add	sp, #16
 800e502:	4770      	bx	lr
 800e504:	803c3800 	.word	0x803c3800
 800e508:	40000004 	.word	0x40000004

0800e50c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e516:	2300      	movs	r3, #0
 800e518:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	019b      	lsls	r3, r3, #6
 800e51e:	f043 0220 	orr.w	r2, r3, #32
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3301      	adds	r3, #1
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4a09      	ldr	r2, [pc, #36]	; (800e554 <USB_FlushTxFifo+0x48>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d901      	bls.n	800e538 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e534:	2303      	movs	r3, #3
 800e536:	e006      	b.n	800e546 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	691b      	ldr	r3, [r3, #16]
 800e53c:	f003 0320 	and.w	r3, r3, #32
 800e540:	2b20      	cmp	r3, #32
 800e542:	d0f0      	beq.n	800e526 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3714      	adds	r7, #20
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	00030d40 	.word	0x00030d40

0800e558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2210      	movs	r2, #16
 800e568:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3301      	adds	r3, #1
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	4a09      	ldr	r2, [pc, #36]	; (800e598 <USB_FlushRxFifo+0x40>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d901      	bls.n	800e57c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e578:	2303      	movs	r3, #3
 800e57a:	e006      	b.n	800e58a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	2b10      	cmp	r3, #16
 800e586:	d0f0      	beq.n	800e56a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	00030d40 	.word	0x00030d40

0800e59c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	78fb      	ldrb	r3, [r7, #3]
 800e5b6:	68f9      	ldr	r1, [r7, #12]
 800e5b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3714      	adds	r7, #20
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr

0800e5ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b084      	sub	sp, #16
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5e8:	f043 0302 	orr.w	r3, r3, #2
 800e5ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e5ee:	2003      	movs	r0, #3
 800e5f0:	f7f9 fbe4 	bl	8007dbc <HAL_Delay>

  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
	...

0800e600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e608:	2300      	movs	r3, #0
 800e60a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	3301      	adds	r3, #1
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	4a13      	ldr	r2, [pc, #76]	; (800e664 <USB_CoreReset+0x64>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d901      	bls.n	800e61e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e61a:	2303      	movs	r3, #3
 800e61c:	e01b      	b.n	800e656 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	2b00      	cmp	r3, #0
 800e624:	daf2      	bge.n	800e60c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	691b      	ldr	r3, [r3, #16]
 800e62e:	f043 0201 	orr.w	r2, r3, #1
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3301      	adds	r3, #1
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4a09      	ldr	r2, [pc, #36]	; (800e664 <USB_CoreReset+0x64>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d901      	bls.n	800e648 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e644:	2303      	movs	r3, #3
 800e646:	e006      	b.n	800e656 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	f003 0301 	and.w	r3, r3, #1
 800e650:	2b01      	cmp	r3, #1
 800e652:	d0f0      	beq.n	800e636 <USB_CoreReset+0x36>

  return HAL_OK;
 800e654:	2300      	movs	r3, #0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3714      	adds	r7, #20
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	00030d40 	.word	0x00030d40

0800e668 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e668:	b480      	push	{r7}
 800e66a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e66c:	bf00      	nop
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
	...

0800e678 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e67e:	f3ef 8305 	mrs	r3, IPSR
 800e682:	60bb      	str	r3, [r7, #8]
  return(result);
 800e684:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e686:	2b00      	cmp	r3, #0
 800e688:	d10f      	bne.n	800e6aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e68a:	f3ef 8310 	mrs	r3, PRIMASK
 800e68e:	607b      	str	r3, [r7, #4]
  return(result);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d105      	bne.n	800e6a2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e696:	f3ef 8311 	mrs	r3, BASEPRI
 800e69a:	603b      	str	r3, [r7, #0]
  return(result);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d007      	beq.n	800e6b2 <osKernelInitialize+0x3a>
 800e6a2:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <osKernelInitialize+0x64>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b02      	cmp	r3, #2
 800e6a8:	d103      	bne.n	800e6b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e6aa:	f06f 0305 	mvn.w	r3, #5
 800e6ae:	60fb      	str	r3, [r7, #12]
 800e6b0:	e00c      	b.n	800e6cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e6b2:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <osKernelInitialize+0x64>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d105      	bne.n	800e6c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e6ba:	4b08      	ldr	r3, [pc, #32]	; (800e6dc <osKernelInitialize+0x64>)
 800e6bc:	2201      	movs	r2, #1
 800e6be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	e002      	b.n	800e6cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3714      	adds	r7, #20
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	2000345c 	.word	0x2000345c

0800e6e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6e6:	f3ef 8305 	mrs	r3, IPSR
 800e6ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10f      	bne.n	800e712 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6f2:	f3ef 8310 	mrs	r3, PRIMASK
 800e6f6:	607b      	str	r3, [r7, #4]
  return(result);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d105      	bne.n	800e70a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6fe:	f3ef 8311 	mrs	r3, BASEPRI
 800e702:	603b      	str	r3, [r7, #0]
  return(result);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d007      	beq.n	800e71a <osKernelStart+0x3a>
 800e70a:	4b0f      	ldr	r3, [pc, #60]	; (800e748 <osKernelStart+0x68>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d103      	bne.n	800e71a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e712:	f06f 0305 	mvn.w	r3, #5
 800e716:	60fb      	str	r3, [r7, #12]
 800e718:	e010      	b.n	800e73c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e71a:	4b0b      	ldr	r3, [pc, #44]	; (800e748 <osKernelStart+0x68>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d109      	bne.n	800e736 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e722:	f7ff ffa1 	bl	800e668 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e726:	4b08      	ldr	r3, [pc, #32]	; (800e748 <osKernelStart+0x68>)
 800e728:	2202      	movs	r2, #2
 800e72a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e72c:	f001 fa9e 	bl	800fc6c <vTaskStartScheduler>
      stat = osOK;
 800e730:	2300      	movs	r3, #0
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e002      	b.n	800e73c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e736:	f04f 33ff 	mov.w	r3, #4294967295
 800e73a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e73c:	68fb      	ldr	r3, [r7, #12]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2000345c 	.word	0x2000345c

0800e74c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b090      	sub	sp, #64	; 0x40
 800e750:	af04      	add	r7, sp, #16
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e758:	2300      	movs	r3, #0
 800e75a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e75c:	f3ef 8305 	mrs	r3, IPSR
 800e760:	61fb      	str	r3, [r7, #28]
  return(result);
 800e762:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e764:	2b00      	cmp	r3, #0
 800e766:	f040 808f 	bne.w	800e888 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e76a:	f3ef 8310 	mrs	r3, PRIMASK
 800e76e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d105      	bne.n	800e782 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e776:	f3ef 8311 	mrs	r3, BASEPRI
 800e77a:	617b      	str	r3, [r7, #20]
  return(result);
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <osThreadNew+0x3e>
 800e782:	4b44      	ldr	r3, [pc, #272]	; (800e894 <osThreadNew+0x148>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d07e      	beq.n	800e888 <osThreadNew+0x13c>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d07b      	beq.n	800e888 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e790:	2380      	movs	r3, #128	; 0x80
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e794:	2318      	movs	r3, #24
 800e796:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e798:	2300      	movs	r3, #0
 800e79a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e79c:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d045      	beq.n	800e834 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <osThreadNew+0x6a>
        name = attr->name;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	699b      	ldr	r3, [r3, #24]
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d008      	beq.n	800e7dc <osThreadNew+0x90>
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	2b38      	cmp	r3, #56	; 0x38
 800e7ce:	d805      	bhi.n	800e7dc <osThreadNew+0x90>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d001      	beq.n	800e7e0 <osThreadNew+0x94>
        return (NULL);
 800e7dc:	2300      	movs	r3, #0
 800e7de:	e054      	b.n	800e88a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	695b      	ldr	r3, [r3, #20]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d003      	beq.n	800e7f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	695b      	ldr	r3, [r3, #20]
 800e7ec:	089b      	lsrs	r3, r3, #2
 800e7ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d00e      	beq.n	800e816 <osThreadNew+0xca>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	2b5b      	cmp	r3, #91	; 0x5b
 800e7fe:	d90a      	bls.n	800e816 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e804:	2b00      	cmp	r3, #0
 800e806:	d006      	beq.n	800e816 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d002      	beq.n	800e816 <osThreadNew+0xca>
        mem = 1;
 800e810:	2301      	movs	r3, #1
 800e812:	623b      	str	r3, [r7, #32]
 800e814:	e010      	b.n	800e838 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10c      	bne.n	800e838 <osThreadNew+0xec>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d108      	bne.n	800e838 <osThreadNew+0xec>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	691b      	ldr	r3, [r3, #16]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d104      	bne.n	800e838 <osThreadNew+0xec>
          mem = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	623b      	str	r3, [r7, #32]
 800e832:	e001      	b.n	800e838 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d110      	bne.n	800e860 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e846:	9202      	str	r2, [sp, #8]
 800e848:	9301      	str	r3, [sp, #4]
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f000 ffb5 	bl	800f7c4 <xTaskCreateStatic>
 800e85a:	4603      	mov	r3, r0
 800e85c:	613b      	str	r3, [r7, #16]
 800e85e:	e013      	b.n	800e888 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d110      	bne.n	800e888 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e868:	b29a      	uxth	r2, r3
 800e86a:	f107 0310 	add.w	r3, r7, #16
 800e86e:	9301      	str	r3, [sp, #4]
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f001 f806 	bl	800f88a <xTaskCreate>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b01      	cmp	r3, #1
 800e882:	d001      	beq.n	800e888 <osThreadNew+0x13c>
          hTask = NULL;
 800e884:	2300      	movs	r3, #0
 800e886:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e888:	693b      	ldr	r3, [r7, #16]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3730      	adds	r7, #48	; 0x30
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	2000345c 	.word	0x2000345c

0800e898 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800e898:	b580      	push	{r7, lr}
 800e89a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800e89c:	2000      	movs	r0, #0
 800e89e:	f001 f93b 	bl	800fb18 <vTaskDelete>
#endif
  for (;;);
 800e8a2:	e7fe      	b.n	800e8a2 <osThreadExit+0xa>

0800e8a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8ac:	f3ef 8305 	mrs	r3, IPSR
 800e8b0:	613b      	str	r3, [r7, #16]
  return(result);
 800e8b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10f      	bne.n	800e8d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d105      	bne.n	800e8d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8c4:	f3ef 8311 	mrs	r3, BASEPRI
 800e8c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <osDelay+0x3c>
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	; (800e8fc <osDelay+0x58>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d103      	bne.n	800e8e0 <osDelay+0x3c>
    stat = osErrorISR;
 800e8d8:	f06f 0305 	mvn.w	r3, #5
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	e007      	b.n	800e8f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d002      	beq.n	800e8f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f001 f988 	bl	800fc00 <vTaskDelay>
    }
  }

  return (stat);
 800e8f0:	697b      	ldr	r3, [r7, #20]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3718      	adds	r7, #24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	2000345c 	.word	0x2000345c

0800e900 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e900:	b580      	push	{r7, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e908:	2300      	movs	r3, #0
 800e90a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e90c:	f3ef 8305 	mrs	r3, IPSR
 800e910:	617b      	str	r3, [r7, #20]
  return(result);
 800e912:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800e914:	2b00      	cmp	r3, #0
 800e916:	d13d      	bne.n	800e994 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e918:	f3ef 8310 	mrs	r3, PRIMASK
 800e91c:	613b      	str	r3, [r7, #16]
  return(result);
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d105      	bne.n	800e930 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e924:	f3ef 8311 	mrs	r3, BASEPRI
 800e928:	60fb      	str	r3, [r7, #12]
  return(result);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d003      	beq.n	800e938 <osEventFlagsNew+0x38>
 800e930:	4b1b      	ldr	r3, [pc, #108]	; (800e9a0 <osEventFlagsNew+0xa0>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b02      	cmp	r3, #2
 800e936:	d02d      	beq.n	800e994 <osEventFlagsNew+0x94>
    mem = -1;
 800e938:	f04f 33ff 	mov.w	r3, #4294967295
 800e93c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d015      	beq.n	800e970 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d006      	beq.n	800e95a <osEventFlagsNew+0x5a>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	2b1f      	cmp	r3, #31
 800e952:	d902      	bls.n	800e95a <osEventFlagsNew+0x5a>
        mem = 1;
 800e954:	2301      	movs	r3, #1
 800e956:	61bb      	str	r3, [r7, #24]
 800e958:	e00c      	b.n	800e974 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d108      	bne.n	800e974 <osEventFlagsNew+0x74>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d104      	bne.n	800e974 <osEventFlagsNew+0x74>
          mem = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	61bb      	str	r3, [r7, #24]
 800e96e:	e001      	b.n	800e974 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800e970:	2300      	movs	r3, #0
 800e972:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d106      	bne.n	800e988 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 f888 	bl	800ea94 <xEventGroupCreateStatic>
 800e984:	61f8      	str	r0, [r7, #28]
 800e986:	e005      	b.n	800e994 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800e98e:	f000 f8bc 	bl	800eb0a <xEventGroupCreate>
 800e992:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e994:	69fb      	ldr	r3, [r7, #28]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3720      	adds	r7, #32
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	2000345c 	.word	0x2000345c

0800e9a4 <osEventFlagsClear>:
  }

  return (rflags);
}

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <osEventFlagsClear+0x1e>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d003      	beq.n	800e9ca <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800e9c2:	f06f 0303 	mvn.w	r3, #3
 800e9c6:	61fb      	str	r3, [r7, #28]
 800e9c8:	e029      	b.n	800ea1e <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9ca:	f3ef 8305 	mrs	r3, IPSR
 800e9ce:	617b      	str	r3, [r7, #20]
  return(result);
 800e9d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10f      	bne.n	800e9f6 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9da:	613b      	str	r3, [r7, #16]
  return(result);
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d105      	bne.n	800e9ee <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9e2:	f3ef 8311 	mrs	r3, BASEPRI
 800e9e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d012      	beq.n	800ea14 <osEventFlagsClear+0x70>
 800e9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ea28 <osEventFlagsClear+0x84>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d10e      	bne.n	800ea14 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800e9f6:	69b8      	ldr	r0, [r7, #24]
 800e9f8:	f000 f8f2 	bl	800ebe0 <xEventGroupGetBitsFromISR>
 800e9fc:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	69b8      	ldr	r0, [r7, #24]
 800ea02:	f000 f8d9 	bl	800ebb8 <xEventGroupClearBitsFromISR>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d108      	bne.n	800ea1e <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800ea0c:	f06f 0302 	mvn.w	r3, #2
 800ea10:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800ea12:	e004      	b.n	800ea1e <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800ea14:	6839      	ldr	r1, [r7, #0]
 800ea16:	69b8      	ldr	r0, [r7, #24]
 800ea18:	f000 f891 	bl	800eb3e <xEventGroupClearBits>
 800ea1c:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800ea1e:	69fb      	ldr	r3, [r7, #28]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3720      	adds	r7, #32
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	2000345c 	.word	0x2000345c

0800ea2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4a07      	ldr	r2, [pc, #28]	; (800ea58 <vApplicationGetIdleTaskMemory+0x2c>)
 800ea3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	4a06      	ldr	r2, [pc, #24]	; (800ea5c <vApplicationGetIdleTaskMemory+0x30>)
 800ea42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2280      	movs	r2, #128	; 0x80
 800ea48:	601a      	str	r2, [r3, #0]
}
 800ea4a:	bf00      	nop
 800ea4c:	3714      	adds	r7, #20
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	20003460 	.word	0x20003460
 800ea5c:	200034bc 	.word	0x200034bc

0800ea60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	4a07      	ldr	r2, [pc, #28]	; (800ea8c <vApplicationGetTimerTaskMemory+0x2c>)
 800ea70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	4a06      	ldr	r2, [pc, #24]	; (800ea90 <vApplicationGetTimerTaskMemory+0x30>)
 800ea76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea7e:	601a      	str	r2, [r3, #0]
}
 800ea80:	bf00      	nop
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	200036bc 	.word	0x200036bc
 800ea90:	20003718 	.word	0x20003718

0800ea94 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10c      	bne.n	800eabc <xEventGroupCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa6:	b672      	cpsid	i
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	b662      	cpsie	i
 800eab6:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eab8:	bf00      	nop
 800eaba:	e7fe      	b.n	800eaba <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800eabc:	2320      	movs	r3, #32
 800eabe:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	2b20      	cmp	r3, #32
 800eac4:	d00c      	beq.n	800eae0 <xEventGroupCreateStatic+0x4c>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	b672      	cpsid	i
 800eacc:	f383 8811 	msr	BASEPRI, r3
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	b662      	cpsie	i
 800eada:	60fb      	str	r3, [r7, #12]
}
 800eadc:	bf00      	nop
 800eade:	e7fe      	b.n	800eade <xEventGroupCreateStatic+0x4a>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00a      	beq.n	800eb00 <xEventGroupCreateStatic+0x6c>
		{
			pxEventBits->uxEventBits = 0;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	2200      	movs	r2, #0
 800eaee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	3304      	adds	r3, #4
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 f8a6 	bl	800ec46 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2201      	movs	r2, #1
 800eafe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800eb00:	697b      	ldr	r3, [r7, #20]
	}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3718      	adds	r7, #24
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800eb10:	2020      	movs	r0, #32
 800eb12:	f002 fcb7 	bl	8011484 <pvPortMalloc>
 800eb16:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3304      	adds	r3, #4
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 f88c 	bl	800ec46 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800eb34:	687b      	ldr	r3, [r7, #4]
	}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b086      	sub	sp, #24
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10c      	bne.n	800eb6c <xEventGroupClearBits+0x2e>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	b672      	cpsid	i
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	b662      	cpsie	i
 800eb66:	60fb      	str	r3, [r7, #12]
}
 800eb68:	bf00      	nop
 800eb6a:	e7fe      	b.n	800eb6a <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00c      	beq.n	800eb90 <xEventGroupClearBits+0x52>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	b672      	cpsid	i
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	b662      	cpsie	i
 800eb8a:	60bb      	str	r3, [r7, #8]
}
 800eb8c:	bf00      	nop
 800eb8e:	e7fe      	b.n	800eb8e <xEventGroupClearBits+0x50>

	taskENTER_CRITICAL();
 800eb90:	f002 fb4c 	bl	801122c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	43db      	mvns	r3, r3
 800eba2:	401a      	ands	r2, r3
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800eba8:	f002 fb74 	bl	8011294 <vPortExitCritical>

	return uxReturn;
 800ebac:	693b      	ldr	r3, [r7, #16]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3718      	adds	r7, #24
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
	...

0800ebb8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	683a      	ldr	r2, [r7, #0]
 800ebc6:	6879      	ldr	r1, [r7, #4]
 800ebc8:	4804      	ldr	r0, [pc, #16]	; (800ebdc <xEventGroupClearBitsFromISR+0x24>)
 800ebca:	f002 fa05 	bl	8010fd8 <xTimerPendFunctionCallFromISR>
 800ebce:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
	}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	0800ec2d 	.word	0x0800ec2d

0800ebe0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b089      	sub	sp, #36	; 0x24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ebec:	f3ef 8211 	mrs	r2, BASEPRI
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	b672      	cpsid	i
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	b662      	cpsie	i
 800ec04:	60fa      	str	r2, [r7, #12]
 800ec06:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec08:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec0a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	617b      	str	r3, [r7, #20]
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ec1c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800ec1e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800ec20:	4618      	mov	r0, r3
 800ec22:	3724      	adds	r7, #36	; 0x24
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f7ff ff80 	bl	800eb3e <xEventGroupClearBits>
}
 800ec3e:	bf00      	nop
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec46:	b480      	push	{r7}
 800ec48:	b083      	sub	sp, #12
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f103 0208 	add.w	r2, r3, #8
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f103 0208 	add.w	r2, r3, #8
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f103 0208 	add.w	r2, r3, #8
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr

0800ec86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec86:	b480      	push	{r7}
 800ec88:	b083      	sub	sp, #12
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	689a      	ldr	r2, [r3, #8]
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	601a      	str	r2, [r3, #0]
}
 800ecdc:	bf00      	nop
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfe:	d103      	bne.n	800ed08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	e00c      	b.n	800ed22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3308      	adds	r3, #8
 800ed0c:	60fb      	str	r3, [r7, #12]
 800ed0e:	e002      	b.n	800ed16 <vListInsert+0x2e>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	60fb      	str	r3, [r7, #12]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d2f6      	bcs.n	800ed10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	685a      	ldr	r2, [r3, #4]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	1c5a      	adds	r2, r3, #1
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	601a      	str	r2, [r3, #0]
}
 800ed4e:	bf00      	nop
 800ed50:	3714      	adds	r7, #20
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ed5a:	b480      	push	{r7}
 800ed5c:	b085      	sub	sp, #20
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	691b      	ldr	r3, [r3, #16]
 800ed66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	6892      	ldr	r2, [r2, #8]
 800ed70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	6852      	ldr	r2, [r2, #4]
 800ed7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d103      	bne.n	800ed8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	689a      	ldr	r2, [r3, #8]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	1e5a      	subs	r2, r3, #1
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3714      	adds	r7, #20
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr
	...

0800edb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10c      	bne.n	800edde <xQueueGenericReset+0x2e>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	b672      	cpsid	i
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	b662      	cpsie	i
 800edd8:	60bb      	str	r3, [r7, #8]
}
 800edda:	bf00      	nop
 800eddc:	e7fe      	b.n	800eddc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800edde:	f002 fa25 	bl	801122c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edea:	68f9      	ldr	r1, [r7, #12]
 800edec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800edee:	fb01 f303 	mul.w	r3, r1, r3
 800edf2:	441a      	add	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	68f9      	ldr	r1, [r7, #12]
 800ee12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee14:	fb01 f303 	mul.w	r3, r1, r3
 800ee18:	441a      	add	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	22ff      	movs	r2, #255	; 0xff
 800ee22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	22ff      	movs	r2, #255	; 0xff
 800ee2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d114      	bne.n	800ee5e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d01a      	beq.n	800ee72 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3310      	adds	r3, #16
 800ee40:	4618      	mov	r0, r3
 800ee42:	f001 f9ab 	bl	801019c <xTaskRemoveFromEventList>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d012      	beq.n	800ee72 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee4c:	4b0c      	ldr	r3, [pc, #48]	; (800ee80 <xQueueGenericReset+0xd0>)
 800ee4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	e009      	b.n	800ee72 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3310      	adds	r3, #16
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7ff feef 	bl	800ec46 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3324      	adds	r3, #36	; 0x24
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7ff feea 	bl	800ec46 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee72:	f002 fa0f 	bl	8011294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee76:	2301      	movs	r3, #1
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3710      	adds	r7, #16
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	e000ed04 	.word	0xe000ed04

0800ee84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08e      	sub	sp, #56	; 0x38
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10c      	bne.n	800eeb2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ee98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9c:	b672      	cpsid	i
 800ee9e:	f383 8811 	msr	BASEPRI, r3
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	f3bf 8f4f 	dsb	sy
 800eeaa:	b662      	cpsie	i
 800eeac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eeae:	bf00      	nop
 800eeb0:	e7fe      	b.n	800eeb0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d10c      	bne.n	800eed2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	b672      	cpsid	i
 800eebe:	f383 8811 	msr	BASEPRI, r3
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	b662      	cpsie	i
 800eecc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eece:	bf00      	nop
 800eed0:	e7fe      	b.n	800eed0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d002      	beq.n	800eede <xQueueGenericCreateStatic+0x5a>
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d001      	beq.n	800eee2 <xQueueGenericCreateStatic+0x5e>
 800eede:	2301      	movs	r3, #1
 800eee0:	e000      	b.n	800eee4 <xQueueGenericCreateStatic+0x60>
 800eee2:	2300      	movs	r3, #0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10c      	bne.n	800ef02 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800eee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeec:	b672      	cpsid	i
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	b662      	cpsie	i
 800eefc:	623b      	str	r3, [r7, #32]
}
 800eefe:	bf00      	nop
 800ef00:	e7fe      	b.n	800ef00 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d102      	bne.n	800ef0e <xQueueGenericCreateStatic+0x8a>
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <xQueueGenericCreateStatic+0x8e>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	e000      	b.n	800ef14 <xQueueGenericCreateStatic+0x90>
 800ef12:	2300      	movs	r3, #0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10c      	bne.n	800ef32 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ef18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1c:	b672      	cpsid	i
 800ef1e:	f383 8811 	msr	BASEPRI, r3
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	b662      	cpsie	i
 800ef2c:	61fb      	str	r3, [r7, #28]
}
 800ef2e:	bf00      	nop
 800ef30:	e7fe      	b.n	800ef30 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef32:	2350      	movs	r3, #80	; 0x50
 800ef34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	2b50      	cmp	r3, #80	; 0x50
 800ef3a:	d00c      	beq.n	800ef56 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef40:	b672      	cpsid	i
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	b662      	cpsie	i
 800ef50:	61bb      	str	r3, [r7, #24]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00d      	beq.n	800ef7e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	4613      	mov	r3, r2
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	68b9      	ldr	r1, [r7, #8]
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f000 f805 	bl	800ef88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3730      	adds	r7, #48	; 0x30
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
 800ef94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d103      	bne.n	800efa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	69ba      	ldr	r2, [r7, #24]
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	e002      	b.n	800efaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800efb6:	2101      	movs	r1, #1
 800efb8:	69b8      	ldr	r0, [r7, #24]
 800efba:	f7ff fef9 	bl	800edb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	78fa      	ldrb	r2, [r7, #3]
 800efc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800efc6:	bf00      	nop
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
	...

0800efd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b08e      	sub	sp, #56	; 0x38
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
 800efdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800efde:	2300      	movs	r3, #0
 800efe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800efe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10c      	bne.n	800f006 <xQueueGenericSend+0x36>
	__asm volatile
 800efec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff0:	b672      	cpsid	i
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	b662      	cpsie	i
 800f000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d103      	bne.n	800f014 <xQueueGenericSend+0x44>
 800f00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <xQueueGenericSend+0x48>
 800f014:	2301      	movs	r3, #1
 800f016:	e000      	b.n	800f01a <xQueueGenericSend+0x4a>
 800f018:	2300      	movs	r3, #0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10c      	bne.n	800f038 <xQueueGenericSend+0x68>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	b672      	cpsid	i
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	b662      	cpsie	i
 800f032:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f034:	bf00      	nop
 800f036:	e7fe      	b.n	800f036 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d103      	bne.n	800f046 <xQueueGenericSend+0x76>
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f042:	2b01      	cmp	r3, #1
 800f044:	d101      	bne.n	800f04a <xQueueGenericSend+0x7a>
 800f046:	2301      	movs	r3, #1
 800f048:	e000      	b.n	800f04c <xQueueGenericSend+0x7c>
 800f04a:	2300      	movs	r3, #0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10c      	bne.n	800f06a <xQueueGenericSend+0x9a>
	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	b672      	cpsid	i
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	b662      	cpsie	i
 800f064:	623b      	str	r3, [r7, #32]
}
 800f066:	bf00      	nop
 800f068:	e7fe      	b.n	800f068 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f06a:	f001 fa5d 	bl	8010528 <xTaskGetSchedulerState>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d102      	bne.n	800f07a <xQueueGenericSend+0xaa>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d101      	bne.n	800f07e <xQueueGenericSend+0xae>
 800f07a:	2301      	movs	r3, #1
 800f07c:	e000      	b.n	800f080 <xQueueGenericSend+0xb0>
 800f07e:	2300      	movs	r3, #0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10c      	bne.n	800f09e <xQueueGenericSend+0xce>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	b672      	cpsid	i
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	b662      	cpsie	i
 800f098:	61fb      	str	r3, [r7, #28]
}
 800f09a:	bf00      	nop
 800f09c:	e7fe      	b.n	800f09c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f09e:	f002 f8c5 	bl	801122c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d302      	bcc.n	800f0b4 <xQueueGenericSend+0xe4>
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d129      	bne.n	800f108 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	68b9      	ldr	r1, [r7, #8]
 800f0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ba:	f000 fa15 	bl	800f4e8 <prvCopyDataToQueue>
 800f0be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d010      	beq.n	800f0ea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ca:	3324      	adds	r3, #36	; 0x24
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f001 f865 	bl	801019c <xTaskRemoveFromEventList>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d013      	beq.n	800f100 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f0d8:	4b3f      	ldr	r3, [pc, #252]	; (800f1d8 <xQueueGenericSend+0x208>)
 800f0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0de:	601a      	str	r2, [r3, #0]
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	e00a      	b.n	800f100 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d007      	beq.n	800f100 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f0f0:	4b39      	ldr	r3, [pc, #228]	; (800f1d8 <xQueueGenericSend+0x208>)
 800f0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f6:	601a      	str	r2, [r3, #0]
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f100:	f002 f8c8 	bl	8011294 <vPortExitCritical>
				return pdPASS;
 800f104:	2301      	movs	r3, #1
 800f106:	e063      	b.n	800f1d0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d103      	bne.n	800f116 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f10e:	f002 f8c1 	bl	8011294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f112:	2300      	movs	r3, #0
 800f114:	e05c      	b.n	800f1d0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d106      	bne.n	800f12a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f11c:	f107 0314 	add.w	r3, r7, #20
 800f120:	4618      	mov	r0, r3
 800f122:	f001 f8a1 	bl	8010268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f126:	2301      	movs	r3, #1
 800f128:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f12a:	f002 f8b3 	bl	8011294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f12e:	f000 fe07 	bl	800fd40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f132:	f002 f87b 	bl	801122c <vPortEnterCritical>
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f13c:	b25b      	sxtb	r3, r3
 800f13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f142:	d103      	bne.n	800f14c <xQueueGenericSend+0x17c>
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	2200      	movs	r2, #0
 800f148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f152:	b25b      	sxtb	r3, r3
 800f154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f158:	d103      	bne.n	800f162 <xQueueGenericSend+0x192>
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	2200      	movs	r2, #0
 800f15e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f162:	f002 f897 	bl	8011294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f166:	1d3a      	adds	r2, r7, #4
 800f168:	f107 0314 	add.w	r3, r7, #20
 800f16c:	4611      	mov	r1, r2
 800f16e:	4618      	mov	r0, r3
 800f170:	f001 f890 	bl	8010294 <xTaskCheckForTimeOut>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d124      	bne.n	800f1c4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f17a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f17c:	f000 faac 	bl	800f6d8 <prvIsQueueFull>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d018      	beq.n	800f1b8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f188:	3310      	adds	r3, #16
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	4611      	mov	r1, r2
 800f18e:	4618      	mov	r0, r3
 800f190:	f000 ffb0 	bl	80100f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f196:	f000 fa37 	bl	800f608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f19a:	f000 fddf 	bl	800fd5c <xTaskResumeAll>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f47f af7c 	bne.w	800f09e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f1a6:	4b0c      	ldr	r3, [pc, #48]	; (800f1d8 <xQueueGenericSend+0x208>)
 800f1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	e772      	b.n	800f09e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f1b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ba:	f000 fa25 	bl	800f608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1be:	f000 fdcd 	bl	800fd5c <xTaskResumeAll>
 800f1c2:	e76c      	b.n	800f09e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f1c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1c6:	f000 fa1f 	bl	800f608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1ca:	f000 fdc7 	bl	800fd5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f1ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3738      	adds	r7, #56	; 0x38
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	e000ed04 	.word	0xe000ed04

0800f1dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b08e      	sub	sp, #56	; 0x38
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
 800f1e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10c      	bne.n	800f20e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	b672      	cpsid	i
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	b662      	cpsie	i
 800f208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f20a:	bf00      	nop
 800f20c:	e7fe      	b.n	800f20c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d103      	bne.n	800f21c <xQueueGenericSendFromISR+0x40>
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d101      	bne.n	800f220 <xQueueGenericSendFromISR+0x44>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e000      	b.n	800f222 <xQueueGenericSendFromISR+0x46>
 800f220:	2300      	movs	r3, #0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10c      	bne.n	800f240 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22a:	b672      	cpsid	i
 800f22c:	f383 8811 	msr	BASEPRI, r3
 800f230:	f3bf 8f6f 	isb	sy
 800f234:	f3bf 8f4f 	dsb	sy
 800f238:	b662      	cpsie	i
 800f23a:	623b      	str	r3, [r7, #32]
}
 800f23c:	bf00      	nop
 800f23e:	e7fe      	b.n	800f23e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b02      	cmp	r3, #2
 800f244:	d103      	bne.n	800f24e <xQueueGenericSendFromISR+0x72>
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d101      	bne.n	800f252 <xQueueGenericSendFromISR+0x76>
 800f24e:	2301      	movs	r3, #1
 800f250:	e000      	b.n	800f254 <xQueueGenericSendFromISR+0x78>
 800f252:	2300      	movs	r3, #0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d10c      	bne.n	800f272 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25c:	b672      	cpsid	i
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	b662      	cpsie	i
 800f26c:	61fb      	str	r3, [r7, #28]
}
 800f26e:	bf00      	nop
 800f270:	e7fe      	b.n	800f270 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f272:	f002 f8c3 	bl	80113fc <vPortValidateInterruptPriority>
	__asm volatile
 800f276:	f3ef 8211 	mrs	r2, BASEPRI
 800f27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27e:	b672      	cpsid	i
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	b662      	cpsie	i
 800f28e:	61ba      	str	r2, [r7, #24]
 800f290:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f292:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f294:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d302      	bcc.n	800f2a8 <xQueueGenericSendFromISR+0xcc>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d12c      	bne.n	800f302 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	68b9      	ldr	r1, [r7, #8]
 800f2b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2b8:	f000 f916 	bl	800f4e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f2bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c4:	d112      	bne.n	800f2ec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d016      	beq.n	800f2fc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	3324      	adds	r3, #36	; 0x24
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f000 ff62 	bl	801019c <xTaskRemoveFromEventList>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00e      	beq.n	800f2fc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00b      	beq.n	800f2fc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	e007      	b.n	800f2fc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f2ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	b25a      	sxtb	r2, r3
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f300:	e001      	b.n	800f306 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f302:	2300      	movs	r3, #0
 800f304:	637b      	str	r3, [r7, #52]	; 0x34
 800f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f308:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	f383 8811 	msr	BASEPRI, r3
}
 800f310:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f314:	4618      	mov	r0, r3
 800f316:	3738      	adds	r7, #56	; 0x38
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08c      	sub	sp, #48	; 0x30
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f328:	2300      	movs	r3, #0
 800f32a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f332:	2b00      	cmp	r3, #0
 800f334:	d10c      	bne.n	800f350 <xQueueReceive+0x34>
	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33a:	b672      	cpsid	i
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	b662      	cpsie	i
 800f34a:	623b      	str	r3, [r7, #32]
}
 800f34c:	bf00      	nop
 800f34e:	e7fe      	b.n	800f34e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d103      	bne.n	800f35e <xQueueReceive+0x42>
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d101      	bne.n	800f362 <xQueueReceive+0x46>
 800f35e:	2301      	movs	r3, #1
 800f360:	e000      	b.n	800f364 <xQueueReceive+0x48>
 800f362:	2300      	movs	r3, #0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10c      	bne.n	800f382 <xQueueReceive+0x66>
	__asm volatile
 800f368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36c:	b672      	cpsid	i
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	b662      	cpsie	i
 800f37c:	61fb      	str	r3, [r7, #28]
}
 800f37e:	bf00      	nop
 800f380:	e7fe      	b.n	800f380 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f382:	f001 f8d1 	bl	8010528 <xTaskGetSchedulerState>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <xQueueReceive+0x76>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d101      	bne.n	800f396 <xQueueReceive+0x7a>
 800f392:	2301      	movs	r3, #1
 800f394:	e000      	b.n	800f398 <xQueueReceive+0x7c>
 800f396:	2300      	movs	r3, #0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d10c      	bne.n	800f3b6 <xQueueReceive+0x9a>
	__asm volatile
 800f39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a0:	b672      	cpsid	i
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	b662      	cpsie	i
 800f3b0:	61bb      	str	r3, [r7, #24]
}
 800f3b2:	bf00      	nop
 800f3b4:	e7fe      	b.n	800f3b4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3b6:	f001 ff39 	bl	801122c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d01f      	beq.n	800f406 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ca:	f000 f8f7 	bl	800f5bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d0:	1e5a      	subs	r2, r3, #1
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00f      	beq.n	800f3fe <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	3310      	adds	r3, #16
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 feda 	bl	801019c <xTaskRemoveFromEventList>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d007      	beq.n	800f3fe <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f3ee:	4b3d      	ldr	r3, [pc, #244]	; (800f4e4 <xQueueReceive+0x1c8>)
 800f3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3f4:	601a      	str	r2, [r3, #0]
 800f3f6:	f3bf 8f4f 	dsb	sy
 800f3fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f3fe:	f001 ff49 	bl	8011294 <vPortExitCritical>
				return pdPASS;
 800f402:	2301      	movs	r3, #1
 800f404:	e069      	b.n	800f4da <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d103      	bne.n	800f414 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f40c:	f001 ff42 	bl	8011294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f410:	2300      	movs	r3, #0
 800f412:	e062      	b.n	800f4da <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	2b00      	cmp	r3, #0
 800f418:	d106      	bne.n	800f428 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f41a:	f107 0310 	add.w	r3, r7, #16
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 ff22 	bl	8010268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f424:	2301      	movs	r3, #1
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f428:	f001 ff34 	bl	8011294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f42c:	f000 fc88 	bl	800fd40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f430:	f001 fefc 	bl	801122c <vPortEnterCritical>
 800f434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f43a:	b25b      	sxtb	r3, r3
 800f43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f440:	d103      	bne.n	800f44a <xQueueReceive+0x12e>
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	2200      	movs	r2, #0
 800f446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f450:	b25b      	sxtb	r3, r3
 800f452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f456:	d103      	bne.n	800f460 <xQueueReceive+0x144>
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45a:	2200      	movs	r2, #0
 800f45c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f460:	f001 ff18 	bl	8011294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f464:	1d3a      	adds	r2, r7, #4
 800f466:	f107 0310 	add.w	r3, r7, #16
 800f46a:	4611      	mov	r1, r2
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 ff11 	bl	8010294 <xTaskCheckForTimeOut>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d123      	bne.n	800f4c0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f47a:	f000 f917 	bl	800f6ac <prvIsQueueEmpty>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d017      	beq.n	800f4b4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f486:	3324      	adds	r3, #36	; 0x24
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	4611      	mov	r1, r2
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fe31 	bl	80100f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f494:	f000 f8b8 	bl	800f608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f498:	f000 fc60 	bl	800fd5c <xTaskResumeAll>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d189      	bne.n	800f3b6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f4a2:	4b10      	ldr	r3, [pc, #64]	; (800f4e4 <xQueueReceive+0x1c8>)
 800f4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	f3bf 8f6f 	isb	sy
 800f4b2:	e780      	b.n	800f3b6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b6:	f000 f8a7 	bl	800f608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4ba:	f000 fc4f 	bl	800fd5c <xTaskResumeAll>
 800f4be:	e77a      	b.n	800f3b6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4c2:	f000 f8a1 	bl	800f608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4c6:	f000 fc49 	bl	800fd5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4cc:	f000 f8ee 	bl	800f6ac <prvIsQueueEmpty>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f43f af6f 	beq.w	800f3b6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f4d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3730      	adds	r7, #48	; 0x30
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	e000ed04 	.word	0xe000ed04

0800f4e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10d      	bne.n	800f522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d14d      	bne.n	800f5aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	4618      	mov	r0, r3
 800f514:	f001 f826 	bl	8010564 <xTaskPriorityDisinherit>
 800f518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2200      	movs	r2, #0
 800f51e:	609a      	str	r2, [r3, #8]
 800f520:	e043      	b.n	800f5aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d119      	bne.n	800f55c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	6858      	ldr	r0, [r3, #4]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f530:	461a      	mov	r2, r3
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	f006 fc0a 	bl	8015d4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f540:	441a      	add	r2, r3
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	685a      	ldr	r2, [r3, #4]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d32b      	bcc.n	800f5aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	605a      	str	r2, [r3, #4]
 800f55a:	e026      	b.n	800f5aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	68d8      	ldr	r0, [r3, #12]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f564:	461a      	mov	r2, r3
 800f566:	68b9      	ldr	r1, [r7, #8]
 800f568:	f006 fbf0 	bl	8015d4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	68da      	ldr	r2, [r3, #12]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f574:	425b      	negs	r3, r3
 800f576:	441a      	add	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	68da      	ldr	r2, [r3, #12]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	429a      	cmp	r2, r3
 800f586:	d207      	bcs.n	800f598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	689a      	ldr	r2, [r3, #8]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f590:	425b      	negs	r3, r3
 800f592:	441a      	add	r2, r3
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b02      	cmp	r3, #2
 800f59c:	d105      	bne.n	800f5aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d002      	beq.n	800f5aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	1c5a      	adds	r2, r3, #1
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f5b2:	697b      	ldr	r3, [r7, #20]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3718      	adds	r7, #24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d018      	beq.n	800f600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	68da      	ldr	r2, [r3, #12]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d6:	441a      	add	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	68da      	ldr	r2, [r3, #12]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d303      	bcc.n	800f5f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	68d9      	ldr	r1, [r3, #12]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	6838      	ldr	r0, [r7, #0]
 800f5fc:	f006 fba6 	bl	8015d4c <memcpy>
	}
}
 800f600:	bf00      	nop
 800f602:	3708      	adds	r7, #8
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f610:	f001 fe0c 	bl	801122c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f61a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f61c:	e011      	b.n	800f642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f622:	2b00      	cmp	r3, #0
 800f624:	d012      	beq.n	800f64c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	3324      	adds	r3, #36	; 0x24
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fdb6 	bl	801019c <xTaskRemoveFromEventList>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f636:	f000 fe93 	bl	8010360 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f63a:	7bfb      	ldrb	r3, [r7, #15]
 800f63c:	3b01      	subs	r3, #1
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f646:	2b00      	cmp	r3, #0
 800f648:	dce9      	bgt.n	800f61e <prvUnlockQueue+0x16>
 800f64a:	e000      	b.n	800f64e <prvUnlockQueue+0x46>
					break;
 800f64c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	22ff      	movs	r2, #255	; 0xff
 800f652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f656:	f001 fe1d 	bl	8011294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f65a:	f001 fde7 	bl	801122c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f666:	e011      	b.n	800f68c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d012      	beq.n	800f696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3310      	adds	r3, #16
 800f674:	4618      	mov	r0, r3
 800f676:	f000 fd91 	bl	801019c <xTaskRemoveFromEventList>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f680:	f000 fe6e 	bl	8010360 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f684:	7bbb      	ldrb	r3, [r7, #14]
 800f686:	3b01      	subs	r3, #1
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f68c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f690:	2b00      	cmp	r3, #0
 800f692:	dce9      	bgt.n	800f668 <prvUnlockQueue+0x60>
 800f694:	e000      	b.n	800f698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	22ff      	movs	r2, #255	; 0xff
 800f69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f6a0:	f001 fdf8 	bl	8011294 <vPortExitCritical>
}
 800f6a4:	bf00      	nop
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6b4:	f001 fdba 	bl	801122c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d102      	bne.n	800f6c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e001      	b.n	800f6ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6ca:	f001 fde3 	bl	8011294 <vPortExitCritical>

	return xReturn;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3710      	adds	r7, #16
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6e0:	f001 fda4 	bl	801122c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d102      	bne.n	800f6f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	e001      	b.n	800f6fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6fa:	f001 fdcb 	bl	8011294 <vPortExitCritical>

	return xReturn;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
}
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f712:	2300      	movs	r3, #0
 800f714:	60fb      	str	r3, [r7, #12]
 800f716:	e014      	b.n	800f742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f718:	4a0f      	ldr	r2, [pc, #60]	; (800f758 <vQueueAddToRegistry+0x50>)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d10b      	bne.n	800f73c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f724:	490c      	ldr	r1, [pc, #48]	; (800f758 <vQueueAddToRegistry+0x50>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f72e:	4a0a      	ldr	r2, [pc, #40]	; (800f758 <vQueueAddToRegistry+0x50>)
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	4413      	add	r3, r2
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f73a:	e006      	b.n	800f74a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3301      	adds	r3, #1
 800f740:	60fb      	str	r3, [r7, #12]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2b07      	cmp	r3, #7
 800f746:	d9e7      	bls.n	800f718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f748:	bf00      	nop
 800f74a:	bf00      	nop
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	20031234 	.word	0x20031234

0800f75c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f76c:	f001 fd5e 	bl	801122c <vPortEnterCritical>
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f776:	b25b      	sxtb	r3, r3
 800f778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77c:	d103      	bne.n	800f786 <vQueueWaitForMessageRestricted+0x2a>
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2200      	movs	r2, #0
 800f782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f78c:	b25b      	sxtb	r3, r3
 800f78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f792:	d103      	bne.n	800f79c <vQueueWaitForMessageRestricted+0x40>
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	2200      	movs	r2, #0
 800f798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f79c:	f001 fd7a 	bl	8011294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d106      	bne.n	800f7b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	3324      	adds	r3, #36	; 0x24
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	68b9      	ldr	r1, [r7, #8]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 fcc5 	bl	8010140 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f7b6:	6978      	ldr	r0, [r7, #20]
 800f7b8:	f7ff ff26 	bl	800f608 <prvUnlockQueue>
	}
 800f7bc:	bf00      	nop
 800f7be:	3718      	adds	r7, #24
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08e      	sub	sp, #56	; 0x38
 800f7c8:	af04      	add	r7, sp, #16
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10c      	bne.n	800f7f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800f7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7dc:	b672      	cpsid	i
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	b662      	cpsie	i
 800f7ec:	623b      	str	r3, [r7, #32]
}
 800f7ee:	bf00      	nop
 800f7f0:	e7fe      	b.n	800f7f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d10c      	bne.n	800f812 <xTaskCreateStatic+0x4e>
	__asm volatile
 800f7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fc:	b672      	cpsid	i
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	b662      	cpsie	i
 800f80c:	61fb      	str	r3, [r7, #28]
}
 800f80e:	bf00      	nop
 800f810:	e7fe      	b.n	800f810 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f812:	235c      	movs	r3, #92	; 0x5c
 800f814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	2b5c      	cmp	r3, #92	; 0x5c
 800f81a:	d00c      	beq.n	800f836 <xTaskCreateStatic+0x72>
	__asm volatile
 800f81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f820:	b672      	cpsid	i
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	b662      	cpsie	i
 800f830:	61bb      	str	r3, [r7, #24]
}
 800f832:	bf00      	nop
 800f834:	e7fe      	b.n	800f834 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d01e      	beq.n	800f87c <xTaskCreateStatic+0xb8>
 800f83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f840:	2b00      	cmp	r3, #0
 800f842:	d01b      	beq.n	800f87c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f84c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f850:	2202      	movs	r2, #2
 800f852:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f856:	2300      	movs	r3, #0
 800f858:	9303      	str	r3, [sp, #12]
 800f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85c:	9302      	str	r3, [sp, #8]
 800f85e:	f107 0314 	add.w	r3, r7, #20
 800f862:	9301      	str	r3, [sp, #4]
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	68b9      	ldr	r1, [r7, #8]
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f000 f850 	bl	800f914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f876:	f000 f8df 	bl	800fa38 <prvAddNewTaskToReadyList>
 800f87a:	e001      	b.n	800f880 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f87c:	2300      	movs	r3, #0
 800f87e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f880:	697b      	ldr	r3, [r7, #20]
	}
 800f882:	4618      	mov	r0, r3
 800f884:	3728      	adds	r7, #40	; 0x28
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b08c      	sub	sp, #48	; 0x30
 800f88e:	af04      	add	r7, sp, #16
 800f890:	60f8      	str	r0, [r7, #12]
 800f892:	60b9      	str	r1, [r7, #8]
 800f894:	603b      	str	r3, [r7, #0]
 800f896:	4613      	mov	r3, r2
 800f898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f89a:	88fb      	ldrh	r3, [r7, #6]
 800f89c:	009b      	lsls	r3, r3, #2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f001 fdf0 	bl	8011484 <pvPortMalloc>
 800f8a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00e      	beq.n	800f8ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f8ac:	205c      	movs	r0, #92	; 0x5c
 800f8ae:	f001 fde9 	bl	8011484 <pvPortMalloc>
 800f8b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	697a      	ldr	r2, [r7, #20]
 800f8be:	631a      	str	r2, [r3, #48]	; 0x30
 800f8c0:	e005      	b.n	800f8ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f8c2:	6978      	ldr	r0, [r7, #20]
 800f8c4:	f001 fea8 	bl	8011618 <vPortFree>
 800f8c8:	e001      	b.n	800f8ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d017      	beq.n	800f904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f8dc:	88fa      	ldrh	r2, [r7, #6]
 800f8de:	2300      	movs	r3, #0
 800f8e0:	9303      	str	r3, [sp, #12]
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	9302      	str	r3, [sp, #8]
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	9301      	str	r3, [sp, #4]
 800f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	68b9      	ldr	r1, [r7, #8]
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 f80e 	bl	800f914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8f8:	69f8      	ldr	r0, [r7, #28]
 800f8fa:	f000 f89d 	bl	800fa38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f8fe:	2301      	movs	r3, #1
 800f900:	61bb      	str	r3, [r7, #24]
 800f902:	e002      	b.n	800f90a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f904:	f04f 33ff 	mov.w	r3, #4294967295
 800f908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f90a:	69bb      	ldr	r3, [r7, #24]
	}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3720      	adds	r7, #32
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
 800f920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	461a      	mov	r2, r3
 800f92c:	21a5      	movs	r1, #165	; 0xa5
 800f92e:	f006 fa1b 	bl	8015d68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f936:	6879      	ldr	r1, [r7, #4]
 800f938:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f93c:	440b      	add	r3, r1
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	f023 0307 	bic.w	r3, r3, #7
 800f94a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	f003 0307 	and.w	r3, r3, #7
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00c      	beq.n	800f970 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95a:	b672      	cpsid	i
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	b662      	cpsie	i
 800f96a:	617b      	str	r3, [r7, #20]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d01f      	beq.n	800f9b6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f976:	2300      	movs	r3, #0
 800f978:	61fb      	str	r3, [r7, #28]
 800f97a:	e012      	b.n	800f9a2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	4413      	add	r3, r2
 800f982:	7819      	ldrb	r1, [r3, #0]
 800f984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	4413      	add	r3, r2
 800f98a:	3334      	adds	r3, #52	; 0x34
 800f98c:	460a      	mov	r2, r1
 800f98e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	4413      	add	r3, r2
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d006      	beq.n	800f9aa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	61fb      	str	r3, [r7, #28]
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	2b0f      	cmp	r3, #15
 800f9a6:	d9e9      	bls.n	800f97c <prvInitialiseNewTask+0x68>
 800f9a8:	e000      	b.n	800f9ac <prvInitialiseNewTask+0x98>
			{
				break;
 800f9aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9b4:	e003      	b.n	800f9be <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c0:	2b37      	cmp	r3, #55	; 0x37
 800f9c2:	d901      	bls.n	800f9c8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f9c4:	2337      	movs	r3, #55	; 0x37
 800f9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	3304      	adds	r3, #4
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff f951 	bl	800ec86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e6:	3318      	adds	r3, #24
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff f94c 	bl	800ec86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa06:	2200      	movs	r2, #0
 800fa08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fa12:	683a      	ldr	r2, [r7, #0]
 800fa14:	68f9      	ldr	r1, [r7, #12]
 800fa16:	69b8      	ldr	r0, [r7, #24]
 800fa18:	f001 fafe 	bl	8011018 <pxPortInitialiseStack>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa2e:	bf00      	nop
 800fa30:	3720      	adds	r7, #32
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fa40:	f001 fbf4 	bl	801122c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fa44:	4b2d      	ldr	r3, [pc, #180]	; (800fafc <prvAddNewTaskToReadyList+0xc4>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	4a2c      	ldr	r2, [pc, #176]	; (800fafc <prvAddNewTaskToReadyList+0xc4>)
 800fa4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa4e:	4b2c      	ldr	r3, [pc, #176]	; (800fb00 <prvAddNewTaskToReadyList+0xc8>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d109      	bne.n	800fa6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fa56:	4a2a      	ldr	r2, [pc, #168]	; (800fb00 <prvAddNewTaskToReadyList+0xc8>)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa5c:	4b27      	ldr	r3, [pc, #156]	; (800fafc <prvAddNewTaskToReadyList+0xc4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d110      	bne.n	800fa86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fa64:	f000 fca0 	bl	80103a8 <prvInitialiseTaskLists>
 800fa68:	e00d      	b.n	800fa86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fa6a:	4b26      	ldr	r3, [pc, #152]	; (800fb04 <prvAddNewTaskToReadyList+0xcc>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d109      	bne.n	800fa86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa72:	4b23      	ldr	r3, [pc, #140]	; (800fb00 <prvAddNewTaskToReadyList+0xc8>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d802      	bhi.n	800fa86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa80:	4a1f      	ldr	r2, [pc, #124]	; (800fb00 <prvAddNewTaskToReadyList+0xc8>)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa86:	4b20      	ldr	r3, [pc, #128]	; (800fb08 <prvAddNewTaskToReadyList+0xd0>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	4a1e      	ldr	r2, [pc, #120]	; (800fb08 <prvAddNewTaskToReadyList+0xd0>)
 800fa8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fa90:	4b1d      	ldr	r3, [pc, #116]	; (800fb08 <prvAddNewTaskToReadyList+0xd0>)
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa9c:	4b1b      	ldr	r3, [pc, #108]	; (800fb0c <prvAddNewTaskToReadyList+0xd4>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d903      	bls.n	800faac <prvAddNewTaskToReadyList+0x74>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa8:	4a18      	ldr	r2, [pc, #96]	; (800fb0c <prvAddNewTaskToReadyList+0xd4>)
 800faaa:	6013      	str	r3, [r2, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fab0:	4613      	mov	r3, r2
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	4413      	add	r3, r2
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	4a15      	ldr	r2, [pc, #84]	; (800fb10 <prvAddNewTaskToReadyList+0xd8>)
 800faba:	441a      	add	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	3304      	adds	r3, #4
 800fac0:	4619      	mov	r1, r3
 800fac2:	4610      	mov	r0, r2
 800fac4:	f7ff f8ec 	bl	800eca0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fac8:	f001 fbe4 	bl	8011294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800facc:	4b0d      	ldr	r3, [pc, #52]	; (800fb04 <prvAddNewTaskToReadyList+0xcc>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00e      	beq.n	800faf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fad4:	4b0a      	ldr	r3, [pc, #40]	; (800fb00 <prvAddNewTaskToReadyList+0xc8>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fade:	429a      	cmp	r2, r3
 800fae0:	d207      	bcs.n	800faf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fae2:	4b0c      	ldr	r3, [pc, #48]	; (800fb14 <prvAddNewTaskToReadyList+0xdc>)
 800fae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800faf2:	bf00      	nop
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20003fec 	.word	0x20003fec
 800fb00:	20003b18 	.word	0x20003b18
 800fb04:	20003ff8 	.word	0x20003ff8
 800fb08:	20004008 	.word	0x20004008
 800fb0c:	20003ff4 	.word	0x20003ff4
 800fb10:	20003b1c 	.word	0x20003b1c
 800fb14:	e000ed04 	.word	0xe000ed04

0800fb18 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fb20:	f001 fb84 	bl	801122c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d102      	bne.n	800fb30 <vTaskDelete+0x18>
 800fb2a:	4b2d      	ldr	r3, [pc, #180]	; (800fbe0 <vTaskDelete+0xc8>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	e000      	b.n	800fb32 <vTaskDelete+0x1a>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3304      	adds	r3, #4
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff f90e 	bl	800ed5a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d004      	beq.n	800fb50 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	3318      	adds	r3, #24
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff f905 	bl	800ed5a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fb50:	4b24      	ldr	r3, [pc, #144]	; (800fbe4 <vTaskDelete+0xcc>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3301      	adds	r3, #1
 800fb56:	4a23      	ldr	r2, [pc, #140]	; (800fbe4 <vTaskDelete+0xcc>)
 800fb58:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fb5a:	4b21      	ldr	r3, [pc, #132]	; (800fbe0 <vTaskDelete+0xc8>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d10b      	bne.n	800fb7c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4619      	mov	r1, r3
 800fb6a:	481f      	ldr	r0, [pc, #124]	; (800fbe8 <vTaskDelete+0xd0>)
 800fb6c:	f7ff f898 	bl	800eca0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fb70:	4b1e      	ldr	r3, [pc, #120]	; (800fbec <vTaskDelete+0xd4>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3301      	adds	r3, #1
 800fb76:	4a1d      	ldr	r2, [pc, #116]	; (800fbec <vTaskDelete+0xd4>)
 800fb78:	6013      	str	r3, [r2, #0]
 800fb7a:	e009      	b.n	800fb90 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800fb7c:	4b1c      	ldr	r3, [pc, #112]	; (800fbf0 <vTaskDelete+0xd8>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3b01      	subs	r3, #1
 800fb82:	4a1b      	ldr	r2, [pc, #108]	; (800fbf0 <vTaskDelete+0xd8>)
 800fb84:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f000 fc7c 	bl	8010484 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800fb8c:	f000 fcac 	bl	80104e8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800fb90:	f001 fb80 	bl	8011294 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800fb94:	4b17      	ldr	r3, [pc, #92]	; (800fbf4 <vTaskDelete+0xdc>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d01d      	beq.n	800fbd8 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800fb9c:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <vTaskDelete+0xc8>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d118      	bne.n	800fbd8 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800fba6:	4b14      	ldr	r3, [pc, #80]	; (800fbf8 <vTaskDelete+0xe0>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00c      	beq.n	800fbc8 <vTaskDelete+0xb0>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	b672      	cpsid	i
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	b662      	cpsie	i
 800fbc2:	60bb      	str	r3, [r7, #8]
}
 800fbc4:	bf00      	nop
 800fbc6:	e7fe      	b.n	800fbc6 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800fbc8:	4b0c      	ldr	r3, [pc, #48]	; (800fbfc <vTaskDelete+0xe4>)
 800fbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbce:	601a      	str	r2, [r3, #0]
 800fbd0:	f3bf 8f4f 	dsb	sy
 800fbd4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fbd8:	bf00      	nop
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	20003b18 	.word	0x20003b18
 800fbe4:	20004008 	.word	0x20004008
 800fbe8:	20003fc0 	.word	0x20003fc0
 800fbec:	20003fd4 	.word	0x20003fd4
 800fbf0:	20003fec 	.word	0x20003fec
 800fbf4:	20003ff8 	.word	0x20003ff8
 800fbf8:	20004014 	.word	0x20004014
 800fbfc:	e000ed04 	.word	0xe000ed04

0800fc00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d019      	beq.n	800fc46 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <vTaskDelay+0x64>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00c      	beq.n	800fc34 <vTaskDelay+0x34>
	__asm volatile
 800fc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1e:	b672      	cpsid	i
 800fc20:	f383 8811 	msr	BASEPRI, r3
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	b662      	cpsie	i
 800fc2e:	60bb      	str	r3, [r7, #8]
}
 800fc30:	bf00      	nop
 800fc32:	e7fe      	b.n	800fc32 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fc34:	f000 f884 	bl	800fd40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fc38:	2100      	movs	r1, #0
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fe1c 	bl	8010878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fc40:	f000 f88c 	bl	800fd5c <xTaskResumeAll>
 800fc44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d107      	bne.n	800fc5c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fc4c:	4b06      	ldr	r3, [pc, #24]	; (800fc68 <vTaskDelay+0x68>)
 800fc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc5c:	bf00      	nop
 800fc5e:	3710      	adds	r7, #16
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	20004014 	.word	0x20004014
 800fc68:	e000ed04 	.word	0xe000ed04

0800fc6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08a      	sub	sp, #40	; 0x28
 800fc70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fc72:	2300      	movs	r3, #0
 800fc74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fc76:	2300      	movs	r3, #0
 800fc78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fc7a:	463a      	mov	r2, r7
 800fc7c:	1d39      	adds	r1, r7, #4
 800fc7e:	f107 0308 	add.w	r3, r7, #8
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fe fed2 	bl	800ea2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fc88:	6839      	ldr	r1, [r7, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	9202      	str	r2, [sp, #8]
 800fc90:	9301      	str	r3, [sp, #4]
 800fc92:	2300      	movs	r3, #0
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	2300      	movs	r3, #0
 800fc98:	460a      	mov	r2, r1
 800fc9a:	4923      	ldr	r1, [pc, #140]	; (800fd28 <vTaskStartScheduler+0xbc>)
 800fc9c:	4823      	ldr	r0, [pc, #140]	; (800fd2c <vTaskStartScheduler+0xc0>)
 800fc9e:	f7ff fd91 	bl	800f7c4 <xTaskCreateStatic>
 800fca2:	4603      	mov	r3, r0
 800fca4:	4a22      	ldr	r2, [pc, #136]	; (800fd30 <vTaskStartScheduler+0xc4>)
 800fca6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fca8:	4b21      	ldr	r3, [pc, #132]	; (800fd30 <vTaskStartScheduler+0xc4>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d002      	beq.n	800fcb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	617b      	str	r3, [r7, #20]
 800fcb4:	e001      	b.n	800fcba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d102      	bne.n	800fcc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fcc0:	f000 fe2e 	bl	8010920 <xTimerCreateTimerTask>
 800fcc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d118      	bne.n	800fcfe <vTaskStartScheduler+0x92>
	__asm volatile
 800fccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd0:	b672      	cpsid	i
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	b662      	cpsie	i
 800fce0:	613b      	str	r3, [r7, #16]
}
 800fce2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fce4:	4b13      	ldr	r3, [pc, #76]	; (800fd34 <vTaskStartScheduler+0xc8>)
 800fce6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fcec:	4b12      	ldr	r3, [pc, #72]	; (800fd38 <vTaskStartScheduler+0xcc>)
 800fcee:	2201      	movs	r2, #1
 800fcf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fcf2:	4b12      	ldr	r3, [pc, #72]	; (800fd3c <vTaskStartScheduler+0xd0>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fcf8:	f001 fa1a 	bl	8011130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fcfc:	e010      	b.n	800fd20 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd04:	d10c      	bne.n	800fd20 <vTaskStartScheduler+0xb4>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	b672      	cpsid	i
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	b662      	cpsie	i
 800fd1a:	60fb      	str	r3, [r7, #12]
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <vTaskStartScheduler+0xb2>
}
 800fd20:	bf00      	nop
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	0801aa94 	.word	0x0801aa94
 800fd2c:	08010379 	.word	0x08010379
 800fd30:	20004010 	.word	0x20004010
 800fd34:	2000400c 	.word	0x2000400c
 800fd38:	20003ff8 	.word	0x20003ff8
 800fd3c:	20003ff0 	.word	0x20003ff0

0800fd40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd40:	b480      	push	{r7}
 800fd42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fd44:	4b04      	ldr	r3, [pc, #16]	; (800fd58 <vTaskSuspendAll+0x18>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	4a03      	ldr	r2, [pc, #12]	; (800fd58 <vTaskSuspendAll+0x18>)
 800fd4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fd4e:	bf00      	nop
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr
 800fd58:	20004014 	.word	0x20004014

0800fd5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fd62:	2300      	movs	r3, #0
 800fd64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fd66:	2300      	movs	r3, #0
 800fd68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fd6a:	4b43      	ldr	r3, [pc, #268]	; (800fe78 <xTaskResumeAll+0x11c>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d10c      	bne.n	800fd8c <xTaskResumeAll+0x30>
	__asm volatile
 800fd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd76:	b672      	cpsid	i
 800fd78:	f383 8811 	msr	BASEPRI, r3
 800fd7c:	f3bf 8f6f 	isb	sy
 800fd80:	f3bf 8f4f 	dsb	sy
 800fd84:	b662      	cpsie	i
 800fd86:	603b      	str	r3, [r7, #0]
}
 800fd88:	bf00      	nop
 800fd8a:	e7fe      	b.n	800fd8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fd8c:	f001 fa4e 	bl	801122c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fd90:	4b39      	ldr	r3, [pc, #228]	; (800fe78 <xTaskResumeAll+0x11c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	3b01      	subs	r3, #1
 800fd96:	4a38      	ldr	r2, [pc, #224]	; (800fe78 <xTaskResumeAll+0x11c>)
 800fd98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd9a:	4b37      	ldr	r3, [pc, #220]	; (800fe78 <xTaskResumeAll+0x11c>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d162      	bne.n	800fe68 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fda2:	4b36      	ldr	r3, [pc, #216]	; (800fe7c <xTaskResumeAll+0x120>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d05e      	beq.n	800fe68 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fdaa:	e02f      	b.n	800fe0c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdac:	4b34      	ldr	r3, [pc, #208]	; (800fe80 <xTaskResumeAll+0x124>)
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	3318      	adds	r3, #24
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fe ffce 	bl	800ed5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fe ffc9 	bl	800ed5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdcc:	4b2d      	ldr	r3, [pc, #180]	; (800fe84 <xTaskResumeAll+0x128>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d903      	bls.n	800fddc <xTaskResumeAll+0x80>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd8:	4a2a      	ldr	r2, [pc, #168]	; (800fe84 <xTaskResumeAll+0x128>)
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde0:	4613      	mov	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4413      	add	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4a27      	ldr	r2, [pc, #156]	; (800fe88 <xTaskResumeAll+0x12c>)
 800fdea:	441a      	add	r2, r3
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	3304      	adds	r3, #4
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	f7fe ff54 	bl	800eca0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfc:	4b23      	ldr	r3, [pc, #140]	; (800fe8c <xTaskResumeAll+0x130>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d302      	bcc.n	800fe0c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800fe06:	4b22      	ldr	r3, [pc, #136]	; (800fe90 <xTaskResumeAll+0x134>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe0c:	4b1c      	ldr	r3, [pc, #112]	; (800fe80 <xTaskResumeAll+0x124>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1cb      	bne.n	800fdac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d001      	beq.n	800fe1e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fe1a:	f000 fb65 	bl	80104e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fe1e:	4b1d      	ldr	r3, [pc, #116]	; (800fe94 <xTaskResumeAll+0x138>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d010      	beq.n	800fe4c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fe2a:	f000 f847 	bl	800febc <xTaskIncrementTick>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800fe34:	4b16      	ldr	r3, [pc, #88]	; (800fe90 <xTaskResumeAll+0x134>)
 800fe36:	2201      	movs	r2, #1
 800fe38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1f1      	bne.n	800fe2a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fe46:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <xTaskResumeAll+0x138>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe4c:	4b10      	ldr	r3, [pc, #64]	; (800fe90 <xTaskResumeAll+0x134>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d009      	beq.n	800fe68 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe54:	2301      	movs	r3, #1
 800fe56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fe58:	4b0f      	ldr	r3, [pc, #60]	; (800fe98 <xTaskResumeAll+0x13c>)
 800fe5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe5e:	601a      	str	r2, [r3, #0]
 800fe60:	f3bf 8f4f 	dsb	sy
 800fe64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe68:	f001 fa14 	bl	8011294 <vPortExitCritical>

	return xAlreadyYielded;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	20004014 	.word	0x20004014
 800fe7c:	20003fec 	.word	0x20003fec
 800fe80:	20003fac 	.word	0x20003fac
 800fe84:	20003ff4 	.word	0x20003ff4
 800fe88:	20003b1c 	.word	0x20003b1c
 800fe8c:	20003b18 	.word	0x20003b18
 800fe90:	20004000 	.word	0x20004000
 800fe94:	20003ffc 	.word	0x20003ffc
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fea2:	4b05      	ldr	r3, [pc, #20]	; (800feb8 <xTaskGetTickCount+0x1c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fea8:	687b      	ldr	r3, [r7, #4]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	370c      	adds	r7, #12
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	20003ff0 	.word	0x20003ff0

0800febc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fec2:	2300      	movs	r3, #0
 800fec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fec6:	4b50      	ldr	r3, [pc, #320]	; (8010008 <xTaskIncrementTick+0x14c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	f040 808b 	bne.w	800ffe6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fed0:	4b4e      	ldr	r3, [pc, #312]	; (801000c <xTaskIncrementTick+0x150>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	3301      	adds	r3, #1
 800fed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fed8:	4a4c      	ldr	r2, [pc, #304]	; (801000c <xTaskIncrementTick+0x150>)
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d122      	bne.n	800ff2a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fee4:	4b4a      	ldr	r3, [pc, #296]	; (8010010 <xTaskIncrementTick+0x154>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00c      	beq.n	800ff08 <xTaskIncrementTick+0x4c>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	b672      	cpsid	i
 800fef4:	f383 8811 	msr	BASEPRI, r3
 800fef8:	f3bf 8f6f 	isb	sy
 800fefc:	f3bf 8f4f 	dsb	sy
 800ff00:	b662      	cpsie	i
 800ff02:	603b      	str	r3, [r7, #0]
}
 800ff04:	bf00      	nop
 800ff06:	e7fe      	b.n	800ff06 <xTaskIncrementTick+0x4a>
 800ff08:	4b41      	ldr	r3, [pc, #260]	; (8010010 <xTaskIncrementTick+0x154>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	60fb      	str	r3, [r7, #12]
 800ff0e:	4b41      	ldr	r3, [pc, #260]	; (8010014 <xTaskIncrementTick+0x158>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4a3f      	ldr	r2, [pc, #252]	; (8010010 <xTaskIncrementTick+0x154>)
 800ff14:	6013      	str	r3, [r2, #0]
 800ff16:	4a3f      	ldr	r2, [pc, #252]	; (8010014 <xTaskIncrementTick+0x158>)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	4b3e      	ldr	r3, [pc, #248]	; (8010018 <xTaskIncrementTick+0x15c>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3301      	adds	r3, #1
 800ff22:	4a3d      	ldr	r2, [pc, #244]	; (8010018 <xTaskIncrementTick+0x15c>)
 800ff24:	6013      	str	r3, [r2, #0]
 800ff26:	f000 fadf 	bl	80104e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ff2a:	4b3c      	ldr	r3, [pc, #240]	; (801001c <xTaskIncrementTick+0x160>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	693a      	ldr	r2, [r7, #16]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d349      	bcc.n	800ffc8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff34:	4b36      	ldr	r3, [pc, #216]	; (8010010 <xTaskIncrementTick+0x154>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d104      	bne.n	800ff48 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff3e:	4b37      	ldr	r3, [pc, #220]	; (801001c <xTaskIncrementTick+0x160>)
 800ff40:	f04f 32ff 	mov.w	r2, #4294967295
 800ff44:	601a      	str	r2, [r3, #0]
					break;
 800ff46:	e03f      	b.n	800ffc8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff48:	4b31      	ldr	r3, [pc, #196]	; (8010010 <xTaskIncrementTick+0x154>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff58:	693a      	ldr	r2, [r7, #16]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d203      	bcs.n	800ff68 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ff60:	4a2e      	ldr	r2, [pc, #184]	; (801001c <xTaskIncrementTick+0x160>)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ff66:	e02f      	b.n	800ffc8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fe fef4 	bl	800ed5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d004      	beq.n	800ff84 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	3318      	adds	r3, #24
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe feeb 	bl	800ed5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff88:	4b25      	ldr	r3, [pc, #148]	; (8010020 <xTaskIncrementTick+0x164>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d903      	bls.n	800ff98 <xTaskIncrementTick+0xdc>
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff94:	4a22      	ldr	r2, [pc, #136]	; (8010020 <xTaskIncrementTick+0x164>)
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4413      	add	r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	4a1f      	ldr	r2, [pc, #124]	; (8010024 <xTaskIncrementTick+0x168>)
 800ffa6:	441a      	add	r2, r3
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	4619      	mov	r1, r3
 800ffae:	4610      	mov	r0, r2
 800ffb0:	f7fe fe76 	bl	800eca0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb8:	4b1b      	ldr	r3, [pc, #108]	; (8010028 <xTaskIncrementTick+0x16c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d3b8      	bcc.n	800ff34 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffc6:	e7b5      	b.n	800ff34 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ffc8:	4b17      	ldr	r3, [pc, #92]	; (8010028 <xTaskIncrementTick+0x16c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffce:	4915      	ldr	r1, [pc, #84]	; (8010024 <xTaskIncrementTick+0x168>)
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	4413      	add	r3, r2
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	440b      	add	r3, r1
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d907      	bls.n	800fff0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	617b      	str	r3, [r7, #20]
 800ffe4:	e004      	b.n	800fff0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ffe6:	4b11      	ldr	r3, [pc, #68]	; (801002c <xTaskIncrementTick+0x170>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	3301      	adds	r3, #1
 800ffec:	4a0f      	ldr	r2, [pc, #60]	; (801002c <xTaskIncrementTick+0x170>)
 800ffee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fff0:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <xTaskIncrementTick+0x174>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d001      	beq.n	800fffc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800fff8:	2301      	movs	r3, #1
 800fffa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fffc:	697b      	ldr	r3, [r7, #20]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3718      	adds	r7, #24
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	20004014 	.word	0x20004014
 801000c:	20003ff0 	.word	0x20003ff0
 8010010:	20003fa4 	.word	0x20003fa4
 8010014:	20003fa8 	.word	0x20003fa8
 8010018:	20004004 	.word	0x20004004
 801001c:	2000400c 	.word	0x2000400c
 8010020:	20003ff4 	.word	0x20003ff4
 8010024:	20003b1c 	.word	0x20003b1c
 8010028:	20003b18 	.word	0x20003b18
 801002c:	20003ffc 	.word	0x20003ffc
 8010030:	20004000 	.word	0x20004000

08010034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801003a:	4b29      	ldr	r3, [pc, #164]	; (80100e0 <vTaskSwitchContext+0xac>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d003      	beq.n	801004a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010042:	4b28      	ldr	r3, [pc, #160]	; (80100e4 <vTaskSwitchContext+0xb0>)
 8010044:	2201      	movs	r2, #1
 8010046:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010048:	e043      	b.n	80100d2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 801004a:	4b26      	ldr	r3, [pc, #152]	; (80100e4 <vTaskSwitchContext+0xb0>)
 801004c:	2200      	movs	r2, #0
 801004e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010050:	4b25      	ldr	r3, [pc, #148]	; (80100e8 <vTaskSwitchContext+0xb4>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	60fb      	str	r3, [r7, #12]
 8010056:	e012      	b.n	801007e <vTaskSwitchContext+0x4a>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d10c      	bne.n	8010078 <vTaskSwitchContext+0x44>
	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	b672      	cpsid	i
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	b662      	cpsie	i
 8010072:	607b      	str	r3, [r7, #4]
}
 8010074:	bf00      	nop
 8010076:	e7fe      	b.n	8010076 <vTaskSwitchContext+0x42>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	3b01      	subs	r3, #1
 801007c:	60fb      	str	r3, [r7, #12]
 801007e:	491b      	ldr	r1, [pc, #108]	; (80100ec <vTaskSwitchContext+0xb8>)
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	4613      	mov	r3, r2
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4413      	add	r3, r2
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	440b      	add	r3, r1
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d0e2      	beq.n	8010058 <vTaskSwitchContext+0x24>
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	4613      	mov	r3, r2
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	4413      	add	r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	4a13      	ldr	r2, [pc, #76]	; (80100ec <vTaskSwitchContext+0xb8>)
 801009e:	4413      	add	r3, r2
 80100a0:	60bb      	str	r3, [r7, #8]
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	605a      	str	r2, [r3, #4]
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	685a      	ldr	r2, [r3, #4]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	3308      	adds	r3, #8
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d104      	bne.n	80100c2 <vTaskSwitchContext+0x8e>
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	685a      	ldr	r2, [r3, #4]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	605a      	str	r2, [r3, #4]
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	4a09      	ldr	r2, [pc, #36]	; (80100f0 <vTaskSwitchContext+0xbc>)
 80100ca:	6013      	str	r3, [r2, #0]
 80100cc:	4a06      	ldr	r2, [pc, #24]	; (80100e8 <vTaskSwitchContext+0xb4>)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6013      	str	r3, [r2, #0]
}
 80100d2:	bf00      	nop
 80100d4:	3714      	adds	r7, #20
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop
 80100e0:	20004014 	.word	0x20004014
 80100e4:	20004000 	.word	0x20004000
 80100e8:	20003ff4 	.word	0x20003ff4
 80100ec:	20003b1c 	.word	0x20003b1c
 80100f0:	20003b18 	.word	0x20003b18

080100f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10c      	bne.n	801011e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010108:	b672      	cpsid	i
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	b662      	cpsie	i
 8010118:	60fb      	str	r3, [r7, #12]
}
 801011a:	bf00      	nop
 801011c:	e7fe      	b.n	801011c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801011e:	4b07      	ldr	r3, [pc, #28]	; (801013c <vTaskPlaceOnEventList+0x48>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	3318      	adds	r3, #24
 8010124:	4619      	mov	r1, r3
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7fe fdde 	bl	800ece8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801012c:	2101      	movs	r1, #1
 801012e:	6838      	ldr	r0, [r7, #0]
 8010130:	f000 fba2 	bl	8010878 <prvAddCurrentTaskToDelayedList>
}
 8010134:	bf00      	nop
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20003b18 	.word	0x20003b18

08010140 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d10c      	bne.n	801016c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8010152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010156:	b672      	cpsid	i
 8010158:	f383 8811 	msr	BASEPRI, r3
 801015c:	f3bf 8f6f 	isb	sy
 8010160:	f3bf 8f4f 	dsb	sy
 8010164:	b662      	cpsie	i
 8010166:	617b      	str	r3, [r7, #20]
}
 8010168:	bf00      	nop
 801016a:	e7fe      	b.n	801016a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801016c:	4b0a      	ldr	r3, [pc, #40]	; (8010198 <vTaskPlaceOnEventListRestricted+0x58>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	3318      	adds	r3, #24
 8010172:	4619      	mov	r1, r3
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	f7fe fd93 	bl	800eca0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d002      	beq.n	8010186 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8010180:	f04f 33ff 	mov.w	r3, #4294967295
 8010184:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010186:	6879      	ldr	r1, [r7, #4]
 8010188:	68b8      	ldr	r0, [r7, #8]
 801018a:	f000 fb75 	bl	8010878 <prvAddCurrentTaskToDelayedList>
	}
 801018e:	bf00      	nop
 8010190:	3718      	adds	r7, #24
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	20003b18 	.word	0x20003b18

0801019c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10c      	bne.n	80101cc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b6:	b672      	cpsid	i
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	b662      	cpsie	i
 80101c6:	60fb      	str	r3, [r7, #12]
}
 80101c8:	bf00      	nop
 80101ca:	e7fe      	b.n	80101ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	3318      	adds	r3, #24
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe fdc2 	bl	800ed5a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101d6:	4b1e      	ldr	r3, [pc, #120]	; (8010250 <xTaskRemoveFromEventList+0xb4>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d11d      	bne.n	801021a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	3304      	adds	r3, #4
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe fdb9 	bl	800ed5a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ec:	4b19      	ldr	r3, [pc, #100]	; (8010254 <xTaskRemoveFromEventList+0xb8>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d903      	bls.n	80101fc <xTaskRemoveFromEventList+0x60>
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f8:	4a16      	ldr	r2, [pc, #88]	; (8010254 <xTaskRemoveFromEventList+0xb8>)
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4a13      	ldr	r2, [pc, #76]	; (8010258 <xTaskRemoveFromEventList+0xbc>)
 801020a:	441a      	add	r2, r3
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	3304      	adds	r3, #4
 8010210:	4619      	mov	r1, r3
 8010212:	4610      	mov	r0, r2
 8010214:	f7fe fd44 	bl	800eca0 <vListInsertEnd>
 8010218:	e005      	b.n	8010226 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	3318      	adds	r3, #24
 801021e:	4619      	mov	r1, r3
 8010220:	480e      	ldr	r0, [pc, #56]	; (801025c <xTaskRemoveFromEventList+0xc0>)
 8010222:	f7fe fd3d 	bl	800eca0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022a:	4b0d      	ldr	r3, [pc, #52]	; (8010260 <xTaskRemoveFromEventList+0xc4>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010230:	429a      	cmp	r2, r3
 8010232:	d905      	bls.n	8010240 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010234:	2301      	movs	r3, #1
 8010236:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010238:	4b0a      	ldr	r3, [pc, #40]	; (8010264 <xTaskRemoveFromEventList+0xc8>)
 801023a:	2201      	movs	r2, #1
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	e001      	b.n	8010244 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010240:	2300      	movs	r3, #0
 8010242:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010244:	697b      	ldr	r3, [r7, #20]
}
 8010246:	4618      	mov	r0, r3
 8010248:	3718      	adds	r7, #24
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	20004014 	.word	0x20004014
 8010254:	20003ff4 	.word	0x20003ff4
 8010258:	20003b1c 	.word	0x20003b1c
 801025c:	20003fac 	.word	0x20003fac
 8010260:	20003b18 	.word	0x20003b18
 8010264:	20004000 	.word	0x20004000

08010268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010270:	4b06      	ldr	r3, [pc, #24]	; (801028c <vTaskInternalSetTimeOutState+0x24>)
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010278:	4b05      	ldr	r3, [pc, #20]	; (8010290 <vTaskInternalSetTimeOutState+0x28>)
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	605a      	str	r2, [r3, #4]
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	20004004 	.word	0x20004004
 8010290:	20003ff0 	.word	0x20003ff0

08010294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10c      	bne.n	80102be <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80102a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a8:	b672      	cpsid	i
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	b662      	cpsie	i
 80102b8:	613b      	str	r3, [r7, #16]
}
 80102ba:	bf00      	nop
 80102bc:	e7fe      	b.n	80102bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d10c      	bne.n	80102de <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	b672      	cpsid	i
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	b662      	cpsie	i
 80102d8:	60fb      	str	r3, [r7, #12]
}
 80102da:	bf00      	nop
 80102dc:	e7fe      	b.n	80102dc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80102de:	f000 ffa5 	bl	801122c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80102e2:	4b1d      	ldr	r3, [pc, #116]	; (8010358 <xTaskCheckForTimeOut+0xc4>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	69ba      	ldr	r2, [r7, #24]
 80102ee:	1ad3      	subs	r3, r2, r3
 80102f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fa:	d102      	bne.n	8010302 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80102fc:	2300      	movs	r3, #0
 80102fe:	61fb      	str	r3, [r7, #28]
 8010300:	e023      	b.n	801034a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	4b15      	ldr	r3, [pc, #84]	; (801035c <xTaskCheckForTimeOut+0xc8>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	429a      	cmp	r2, r3
 801030c:	d007      	beq.n	801031e <xTaskCheckForTimeOut+0x8a>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	69ba      	ldr	r2, [r7, #24]
 8010314:	429a      	cmp	r2, r3
 8010316:	d302      	bcc.n	801031e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010318:	2301      	movs	r3, #1
 801031a:	61fb      	str	r3, [r7, #28]
 801031c:	e015      	b.n	801034a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	697a      	ldr	r2, [r7, #20]
 8010324:	429a      	cmp	r2, r3
 8010326:	d20b      	bcs.n	8010340 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	1ad2      	subs	r2, r2, r3
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff ff97 	bl	8010268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801033a:	2300      	movs	r3, #0
 801033c:	61fb      	str	r3, [r7, #28]
 801033e:	e004      	b.n	801034a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	2200      	movs	r2, #0
 8010344:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010346:	2301      	movs	r3, #1
 8010348:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801034a:	f000 ffa3 	bl	8011294 <vPortExitCritical>

	return xReturn;
 801034e:	69fb      	ldr	r3, [r7, #28]
}
 8010350:	4618      	mov	r0, r3
 8010352:	3720      	adds	r7, #32
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	20003ff0 	.word	0x20003ff0
 801035c:	20004004 	.word	0x20004004

08010360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010360:	b480      	push	{r7}
 8010362:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010364:	4b03      	ldr	r3, [pc, #12]	; (8010374 <vTaskMissedYield+0x14>)
 8010366:	2201      	movs	r2, #1
 8010368:	601a      	str	r2, [r3, #0]
}
 801036a:	bf00      	nop
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr
 8010374:	20004000 	.word	0x20004000

08010378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010380:	f000 f852 	bl	8010428 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010384:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <prvIdleTask+0x28>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2b01      	cmp	r3, #1
 801038a:	d9f9      	bls.n	8010380 <prvIdleTask+0x8>
			{
				taskYIELD();
 801038c:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <prvIdleTask+0x2c>)
 801038e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801039c:	e7f0      	b.n	8010380 <prvIdleTask+0x8>
 801039e:	bf00      	nop
 80103a0:	20003b1c 	.word	0x20003b1c
 80103a4:	e000ed04 	.word	0xe000ed04

080103a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103ae:	2300      	movs	r3, #0
 80103b0:	607b      	str	r3, [r7, #4]
 80103b2:	e00c      	b.n	80103ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	4613      	mov	r3, r2
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4a12      	ldr	r2, [pc, #72]	; (8010408 <prvInitialiseTaskLists+0x60>)
 80103c0:	4413      	add	r3, r2
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe fc3f 	bl	800ec46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	3301      	adds	r3, #1
 80103cc:	607b      	str	r3, [r7, #4]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b37      	cmp	r3, #55	; 0x37
 80103d2:	d9ef      	bls.n	80103b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80103d4:	480d      	ldr	r0, [pc, #52]	; (801040c <prvInitialiseTaskLists+0x64>)
 80103d6:	f7fe fc36 	bl	800ec46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80103da:	480d      	ldr	r0, [pc, #52]	; (8010410 <prvInitialiseTaskLists+0x68>)
 80103dc:	f7fe fc33 	bl	800ec46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80103e0:	480c      	ldr	r0, [pc, #48]	; (8010414 <prvInitialiseTaskLists+0x6c>)
 80103e2:	f7fe fc30 	bl	800ec46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80103e6:	480c      	ldr	r0, [pc, #48]	; (8010418 <prvInitialiseTaskLists+0x70>)
 80103e8:	f7fe fc2d 	bl	800ec46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80103ec:	480b      	ldr	r0, [pc, #44]	; (801041c <prvInitialiseTaskLists+0x74>)
 80103ee:	f7fe fc2a 	bl	800ec46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80103f2:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <prvInitialiseTaskLists+0x78>)
 80103f4:	4a05      	ldr	r2, [pc, #20]	; (801040c <prvInitialiseTaskLists+0x64>)
 80103f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80103f8:	4b0a      	ldr	r3, [pc, #40]	; (8010424 <prvInitialiseTaskLists+0x7c>)
 80103fa:	4a05      	ldr	r2, [pc, #20]	; (8010410 <prvInitialiseTaskLists+0x68>)
 80103fc:	601a      	str	r2, [r3, #0]
}
 80103fe:	bf00      	nop
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	20003b1c 	.word	0x20003b1c
 801040c:	20003f7c 	.word	0x20003f7c
 8010410:	20003f90 	.word	0x20003f90
 8010414:	20003fac 	.word	0x20003fac
 8010418:	20003fc0 	.word	0x20003fc0
 801041c:	20003fd8 	.word	0x20003fd8
 8010420:	20003fa4 	.word	0x20003fa4
 8010424:	20003fa8 	.word	0x20003fa8

08010428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801042e:	e019      	b.n	8010464 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010430:	f000 fefc 	bl	801122c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010434:	4b10      	ldr	r3, [pc, #64]	; (8010478 <prvCheckTasksWaitingTermination+0x50>)
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	3304      	adds	r3, #4
 8010440:	4618      	mov	r0, r3
 8010442:	f7fe fc8a 	bl	800ed5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010446:	4b0d      	ldr	r3, [pc, #52]	; (801047c <prvCheckTasksWaitingTermination+0x54>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	3b01      	subs	r3, #1
 801044c:	4a0b      	ldr	r2, [pc, #44]	; (801047c <prvCheckTasksWaitingTermination+0x54>)
 801044e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010450:	4b0b      	ldr	r3, [pc, #44]	; (8010480 <prvCheckTasksWaitingTermination+0x58>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	3b01      	subs	r3, #1
 8010456:	4a0a      	ldr	r2, [pc, #40]	; (8010480 <prvCheckTasksWaitingTermination+0x58>)
 8010458:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801045a:	f000 ff1b 	bl	8011294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 f810 	bl	8010484 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010464:	4b06      	ldr	r3, [pc, #24]	; (8010480 <prvCheckTasksWaitingTermination+0x58>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1e1      	bne.n	8010430 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801046c:	bf00      	nop
 801046e:	bf00      	nop
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	20003fc0 	.word	0x20003fc0
 801047c:	20003fec 	.word	0x20003fec
 8010480:	20003fd4 	.word	0x20003fd4

08010484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010492:	2b00      	cmp	r3, #0
 8010494:	d108      	bne.n	80104a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801049a:	4618      	mov	r0, r3
 801049c:	f001 f8bc 	bl	8011618 <vPortFree>
				vPortFree( pxTCB );
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f001 f8b9 	bl	8011618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80104a6:	e01a      	b.n	80104de <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d103      	bne.n	80104ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f001 f8b0 	bl	8011618 <vPortFree>
	}
 80104b8:	e011      	b.n	80104de <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104c0:	2b02      	cmp	r3, #2
 80104c2:	d00c      	beq.n	80104de <prvDeleteTCB+0x5a>
	__asm volatile
 80104c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c8:	b672      	cpsid	i
 80104ca:	f383 8811 	msr	BASEPRI, r3
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f3bf 8f4f 	dsb	sy
 80104d6:	b662      	cpsie	i
 80104d8:	60fb      	str	r3, [r7, #12]
}
 80104da:	bf00      	nop
 80104dc:	e7fe      	b.n	80104dc <prvDeleteTCB+0x58>
	}
 80104de:	bf00      	nop
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
	...

080104e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104ee:	4b0c      	ldr	r3, [pc, #48]	; (8010520 <prvResetNextTaskUnblockTime+0x38>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d104      	bne.n	8010502 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80104f8:	4b0a      	ldr	r3, [pc, #40]	; (8010524 <prvResetNextTaskUnblockTime+0x3c>)
 80104fa:	f04f 32ff 	mov.w	r2, #4294967295
 80104fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010500:	e008      	b.n	8010514 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010502:	4b07      	ldr	r3, [pc, #28]	; (8010520 <prvResetNextTaskUnblockTime+0x38>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	68db      	ldr	r3, [r3, #12]
 801050a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	4a04      	ldr	r2, [pc, #16]	; (8010524 <prvResetNextTaskUnblockTime+0x3c>)
 8010512:	6013      	str	r3, [r2, #0]
}
 8010514:	bf00      	nop
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	20003fa4 	.word	0x20003fa4
 8010524:	2000400c 	.word	0x2000400c

08010528 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801052e:	4b0b      	ldr	r3, [pc, #44]	; (801055c <xTaskGetSchedulerState+0x34>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d102      	bne.n	801053c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010536:	2301      	movs	r3, #1
 8010538:	607b      	str	r3, [r7, #4]
 801053a:	e008      	b.n	801054e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801053c:	4b08      	ldr	r3, [pc, #32]	; (8010560 <xTaskGetSchedulerState+0x38>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d102      	bne.n	801054a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010544:	2302      	movs	r3, #2
 8010546:	607b      	str	r3, [r7, #4]
 8010548:	e001      	b.n	801054e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801054a:	2300      	movs	r3, #0
 801054c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801054e:	687b      	ldr	r3, [r7, #4]
	}
 8010550:	4618      	mov	r0, r3
 8010552:	370c      	adds	r7, #12
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr
 801055c:	20003ff8 	.word	0x20003ff8
 8010560:	20004014 	.word	0x20004014

08010564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010570:	2300      	movs	r3, #0
 8010572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d05a      	beq.n	8010630 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801057a:	4b30      	ldr	r3, [pc, #192]	; (801063c <xTaskPriorityDisinherit+0xd8>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	693a      	ldr	r2, [r7, #16]
 8010580:	429a      	cmp	r2, r3
 8010582:	d00c      	beq.n	801059e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010588:	b672      	cpsid	i
 801058a:	f383 8811 	msr	BASEPRI, r3
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f3bf 8f4f 	dsb	sy
 8010596:	b662      	cpsie	i
 8010598:	60fb      	str	r3, [r7, #12]
}
 801059a:	bf00      	nop
 801059c:	e7fe      	b.n	801059c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10c      	bne.n	80105c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105aa:	b672      	cpsid	i
 80105ac:	f383 8811 	msr	BASEPRI, r3
 80105b0:	f3bf 8f6f 	isb	sy
 80105b4:	f3bf 8f4f 	dsb	sy
 80105b8:	b662      	cpsie	i
 80105ba:	60bb      	str	r3, [r7, #8]
}
 80105bc:	bf00      	nop
 80105be:	e7fe      	b.n	80105be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105c4:	1e5a      	subs	r2, r3, #1
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d02c      	beq.n	8010630 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d128      	bne.n	8010630 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	3304      	adds	r3, #4
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe fbb9 	bl	800ed5a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010600:	4b0f      	ldr	r3, [pc, #60]	; (8010640 <xTaskPriorityDisinherit+0xdc>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	429a      	cmp	r2, r3
 8010606:	d903      	bls.n	8010610 <xTaskPriorityDisinherit+0xac>
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060c:	4a0c      	ldr	r2, [pc, #48]	; (8010640 <xTaskPriorityDisinherit+0xdc>)
 801060e:	6013      	str	r3, [r2, #0]
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010614:	4613      	mov	r3, r2
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	4413      	add	r3, r2
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	4a09      	ldr	r2, [pc, #36]	; (8010644 <xTaskPriorityDisinherit+0xe0>)
 801061e:	441a      	add	r2, r3
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	3304      	adds	r3, #4
 8010624:	4619      	mov	r1, r3
 8010626:	4610      	mov	r0, r2
 8010628:	f7fe fb3a 	bl	800eca0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801062c:	2301      	movs	r3, #1
 801062e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010630:	697b      	ldr	r3, [r7, #20]
	}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	20003b18 	.word	0x20003b18
 8010640:	20003ff4 	.word	0x20003ff4
 8010644:	20003b1c 	.word	0x20003b1c

08010648 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010648:	b580      	push	{r7, lr}
 801064a:	b086      	sub	sp, #24
 801064c:	af00      	add	r7, sp, #0
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]
 8010654:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010656:	f000 fde9 	bl	801122c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801065a:	4b26      	ldr	r3, [pc, #152]	; (80106f4 <xTaskNotifyWait+0xac>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010662:	b2db      	uxtb	r3, r3
 8010664:	2b02      	cmp	r3, #2
 8010666:	d01a      	beq.n	801069e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010668:	4b22      	ldr	r3, [pc, #136]	; (80106f4 <xTaskNotifyWait+0xac>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801066e:	68fa      	ldr	r2, [r7, #12]
 8010670:	43d2      	mvns	r2, r2
 8010672:	400a      	ands	r2, r1
 8010674:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010676:	4b1f      	ldr	r3, [pc, #124]	; (80106f4 <xTaskNotifyWait+0xac>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2201      	movs	r2, #1
 801067c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00b      	beq.n	801069e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010686:	2101      	movs	r1, #1
 8010688:	6838      	ldr	r0, [r7, #0]
 801068a:	f000 f8f5 	bl	8010878 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801068e:	4b1a      	ldr	r3, [pc, #104]	; (80106f8 <xTaskNotifyWait+0xb0>)
 8010690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801069e:	f000 fdf9 	bl	8011294 <vPortExitCritical>

		taskENTER_CRITICAL();
 80106a2:	f000 fdc3 	bl	801122c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d004      	beq.n	80106b6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80106ac:	4b11      	ldr	r3, [pc, #68]	; (80106f4 <xTaskNotifyWait+0xac>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106b6:	4b0f      	ldr	r3, [pc, #60]	; (80106f4 <xTaskNotifyWait+0xac>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b02      	cmp	r3, #2
 80106c2:	d002      	beq.n	80106ca <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80106c4:	2300      	movs	r3, #0
 80106c6:	617b      	str	r3, [r7, #20]
 80106c8:	e008      	b.n	80106dc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80106ca:	4b0a      	ldr	r3, [pc, #40]	; (80106f4 <xTaskNotifyWait+0xac>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106d0:	68ba      	ldr	r2, [r7, #8]
 80106d2:	43d2      	mvns	r2, r2
 80106d4:	400a      	ands	r2, r1
 80106d6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80106d8:	2301      	movs	r3, #1
 80106da:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106dc:	4b05      	ldr	r3, [pc, #20]	; (80106f4 <xTaskNotifyWait+0xac>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80106e6:	f000 fdd5 	bl	8011294 <vPortExitCritical>

		return xReturn;
 80106ea:	697b      	ldr	r3, [r7, #20]
	}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3718      	adds	r7, #24
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	20003b18 	.word	0x20003b18
 80106f8:	e000ed04 	.word	0xe000ed04

080106fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	; 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4613      	mov	r3, r2
 801070a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801070c:	2301      	movs	r3, #1
 801070e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10c      	bne.n	8010730 <xTaskGenericNotify+0x34>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071a:	b672      	cpsid	i
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	b662      	cpsie	i
 801072a:	61bb      	str	r3, [r7, #24]
}
 801072c:	bf00      	nop
 801072e:	e7fe      	b.n	801072e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010734:	f000 fd7a 	bl	801122c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d003      	beq.n	8010746 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801073e:	6a3b      	ldr	r3, [r7, #32]
 8010740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010746:	6a3b      	ldr	r3, [r7, #32]
 8010748:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801074c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801074e:	6a3b      	ldr	r3, [r7, #32]
 8010750:	2202      	movs	r2, #2
 8010752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010756:	79fb      	ldrb	r3, [r7, #7]
 8010758:	2b04      	cmp	r3, #4
 801075a:	d828      	bhi.n	80107ae <xTaskGenericNotify+0xb2>
 801075c:	a201      	add	r2, pc, #4	; (adr r2, 8010764 <xTaskGenericNotify+0x68>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	080107d3 	.word	0x080107d3
 8010768:	08010779 	.word	0x08010779
 801076c:	08010787 	.word	0x08010787
 8010770:	08010793 	.word	0x08010793
 8010774:	0801079b 	.word	0x0801079b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010778:	6a3b      	ldr	r3, [r7, #32]
 801077a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	431a      	orrs	r2, r3
 8010780:	6a3b      	ldr	r3, [r7, #32]
 8010782:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010784:	e028      	b.n	80107d8 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801078a:	1c5a      	adds	r2, r3, #1
 801078c:	6a3b      	ldr	r3, [r7, #32]
 801078e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010790:	e022      	b.n	80107d8 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010798:	e01e      	b.n	80107d8 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801079a:	7ffb      	ldrb	r3, [r7, #31]
 801079c:	2b02      	cmp	r3, #2
 801079e:	d003      	beq.n	80107a8 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	68ba      	ldr	r2, [r7, #8]
 80107a4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80107a6:	e017      	b.n	80107d8 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80107ac:	e014      	b.n	80107d8 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80107ae:	6a3b      	ldr	r3, [r7, #32]
 80107b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b6:	d00e      	beq.n	80107d6 <xTaskGenericNotify+0xda>
	__asm volatile
 80107b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107bc:	b672      	cpsid	i
 80107be:	f383 8811 	msr	BASEPRI, r3
 80107c2:	f3bf 8f6f 	isb	sy
 80107c6:	f3bf 8f4f 	dsb	sy
 80107ca:	b662      	cpsie	i
 80107cc:	617b      	str	r3, [r7, #20]
}
 80107ce:	bf00      	nop
 80107d0:	e7fe      	b.n	80107d0 <xTaskGenericNotify+0xd4>
					break;
 80107d2:	bf00      	nop
 80107d4:	e000      	b.n	80107d8 <xTaskGenericNotify+0xdc>

					break;
 80107d6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80107d8:	7ffb      	ldrb	r3, [r7, #31]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d13c      	bne.n	8010858 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107de:	6a3b      	ldr	r3, [r7, #32]
 80107e0:	3304      	adds	r3, #4
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7fe fab9 	bl	800ed5a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ec:	4b1e      	ldr	r3, [pc, #120]	; (8010868 <xTaskGenericNotify+0x16c>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d903      	bls.n	80107fc <xTaskGenericNotify+0x100>
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f8:	4a1b      	ldr	r2, [pc, #108]	; (8010868 <xTaskGenericNotify+0x16c>)
 80107fa:	6013      	str	r3, [r2, #0]
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010800:	4613      	mov	r3, r2
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	4413      	add	r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4a18      	ldr	r2, [pc, #96]	; (801086c <xTaskGenericNotify+0x170>)
 801080a:	441a      	add	r2, r3
 801080c:	6a3b      	ldr	r3, [r7, #32]
 801080e:	3304      	adds	r3, #4
 8010810:	4619      	mov	r1, r3
 8010812:	4610      	mov	r0, r2
 8010814:	f7fe fa44 	bl	800eca0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00c      	beq.n	801083a <xTaskGenericNotify+0x13e>
	__asm volatile
 8010820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010824:	b672      	cpsid	i
 8010826:	f383 8811 	msr	BASEPRI, r3
 801082a:	f3bf 8f6f 	isb	sy
 801082e:	f3bf 8f4f 	dsb	sy
 8010832:	b662      	cpsie	i
 8010834:	613b      	str	r3, [r7, #16]
}
 8010836:	bf00      	nop
 8010838:	e7fe      	b.n	8010838 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801083a:	6a3b      	ldr	r3, [r7, #32]
 801083c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801083e:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <xTaskGenericNotify+0x174>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010844:	429a      	cmp	r2, r3
 8010846:	d907      	bls.n	8010858 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010848:	4b0a      	ldr	r3, [pc, #40]	; (8010874 <xTaskGenericNotify+0x178>)
 801084a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801084e:	601a      	str	r2, [r3, #0]
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010858:	f000 fd1c 	bl	8011294 <vPortExitCritical>

		return xReturn;
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801085e:	4618      	mov	r0, r3
 8010860:	3728      	adds	r7, #40	; 0x28
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	20003ff4 	.word	0x20003ff4
 801086c:	20003b1c 	.word	0x20003b1c
 8010870:	20003b18 	.word	0x20003b18
 8010874:	e000ed04 	.word	0xe000ed04

08010878 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010882:	4b21      	ldr	r3, [pc, #132]	; (8010908 <prvAddCurrentTaskToDelayedList+0x90>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010888:	4b20      	ldr	r3, [pc, #128]	; (801090c <prvAddCurrentTaskToDelayedList+0x94>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	3304      	adds	r3, #4
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe fa63 	bl	800ed5a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089a:	d10a      	bne.n	80108b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d007      	beq.n	80108b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108a2:	4b1a      	ldr	r3, [pc, #104]	; (801090c <prvAddCurrentTaskToDelayedList+0x94>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3304      	adds	r3, #4
 80108a8:	4619      	mov	r1, r3
 80108aa:	4819      	ldr	r0, [pc, #100]	; (8010910 <prvAddCurrentTaskToDelayedList+0x98>)
 80108ac:	f7fe f9f8 	bl	800eca0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108b0:	e026      	b.n	8010900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4413      	add	r3, r2
 80108b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108ba:	4b14      	ldr	r3, [pc, #80]	; (801090c <prvAddCurrentTaskToDelayedList+0x94>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d209      	bcs.n	80108de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108ca:	4b12      	ldr	r3, [pc, #72]	; (8010914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	4b0f      	ldr	r3, [pc, #60]	; (801090c <prvAddCurrentTaskToDelayedList+0x94>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	3304      	adds	r3, #4
 80108d4:	4619      	mov	r1, r3
 80108d6:	4610      	mov	r0, r2
 80108d8:	f7fe fa06 	bl	800ece8 <vListInsert>
}
 80108dc:	e010      	b.n	8010900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108de:	4b0e      	ldr	r3, [pc, #56]	; (8010918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4b0a      	ldr	r3, [pc, #40]	; (801090c <prvAddCurrentTaskToDelayedList+0x94>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	3304      	adds	r3, #4
 80108e8:	4619      	mov	r1, r3
 80108ea:	4610      	mov	r0, r2
 80108ec:	f7fe f9fc 	bl	800ece8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108f0:	4b0a      	ldr	r3, [pc, #40]	; (801091c <prvAddCurrentTaskToDelayedList+0xa4>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d202      	bcs.n	8010900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80108fa:	4a08      	ldr	r2, [pc, #32]	; (801091c <prvAddCurrentTaskToDelayedList+0xa4>)
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	6013      	str	r3, [r2, #0]
}
 8010900:	bf00      	nop
 8010902:	3710      	adds	r7, #16
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	20003ff0 	.word	0x20003ff0
 801090c:	20003b18 	.word	0x20003b18
 8010910:	20003fd8 	.word	0x20003fd8
 8010914:	20003fa8 	.word	0x20003fa8
 8010918:	20003fa4 	.word	0x20003fa4
 801091c:	2000400c 	.word	0x2000400c

08010920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b08a      	sub	sp, #40	; 0x28
 8010924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010926:	2300      	movs	r3, #0
 8010928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801092a:	f000 fb15 	bl	8010f58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801092e:	4b1d      	ldr	r3, [pc, #116]	; (80109a4 <xTimerCreateTimerTask+0x84>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d021      	beq.n	801097a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801093a:	2300      	movs	r3, #0
 801093c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801093e:	1d3a      	adds	r2, r7, #4
 8010940:	f107 0108 	add.w	r1, r7, #8
 8010944:	f107 030c 	add.w	r3, r7, #12
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe f889 	bl	800ea60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801094e:	6879      	ldr	r1, [r7, #4]
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	68fa      	ldr	r2, [r7, #12]
 8010954:	9202      	str	r2, [sp, #8]
 8010956:	9301      	str	r3, [sp, #4]
 8010958:	2302      	movs	r3, #2
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	2300      	movs	r3, #0
 801095e:	460a      	mov	r2, r1
 8010960:	4911      	ldr	r1, [pc, #68]	; (80109a8 <xTimerCreateTimerTask+0x88>)
 8010962:	4812      	ldr	r0, [pc, #72]	; (80109ac <xTimerCreateTimerTask+0x8c>)
 8010964:	f7fe ff2e 	bl	800f7c4 <xTaskCreateStatic>
 8010968:	4603      	mov	r3, r0
 801096a:	4a11      	ldr	r2, [pc, #68]	; (80109b0 <xTimerCreateTimerTask+0x90>)
 801096c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801096e:	4b10      	ldr	r3, [pc, #64]	; (80109b0 <xTimerCreateTimerTask+0x90>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d001      	beq.n	801097a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010976:	2301      	movs	r3, #1
 8010978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d10c      	bne.n	801099a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8010980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010984:	b672      	cpsid	i
 8010986:	f383 8811 	msr	BASEPRI, r3
 801098a:	f3bf 8f6f 	isb	sy
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	b662      	cpsie	i
 8010994:	613b      	str	r3, [r7, #16]
}
 8010996:	bf00      	nop
 8010998:	e7fe      	b.n	8010998 <xTimerCreateTimerTask+0x78>
	return xReturn;
 801099a:	697b      	ldr	r3, [r7, #20]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20004048 	.word	0x20004048
 80109a8:	0801aa9c 	.word	0x0801aa9c
 80109ac:	08010af1 	.word	0x08010af1
 80109b0:	2000404c 	.word	0x2000404c

080109b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08a      	sub	sp, #40	; 0x28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
 80109c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10c      	bne.n	80109e6 <xTimerGenericCommand+0x32>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	b672      	cpsid	i
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	b662      	cpsie	i
 80109e0:	623b      	str	r3, [r7, #32]
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80109e6:	4b1a      	ldr	r3, [pc, #104]	; (8010a50 <xTimerGenericCommand+0x9c>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d02a      	beq.n	8010a44 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2b05      	cmp	r3, #5
 80109fe:	dc18      	bgt.n	8010a32 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a00:	f7ff fd92 	bl	8010528 <xTaskGetSchedulerState>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d109      	bne.n	8010a1e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a0a:	4b11      	ldr	r3, [pc, #68]	; (8010a50 <xTimerGenericCommand+0x9c>)
 8010a0c:	6818      	ldr	r0, [r3, #0]
 8010a0e:	f107 0110 	add.w	r1, r7, #16
 8010a12:	2300      	movs	r3, #0
 8010a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a16:	f7fe fadb 	bl	800efd0 <xQueueGenericSend>
 8010a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8010a1c:	e012      	b.n	8010a44 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a1e:	4b0c      	ldr	r3, [pc, #48]	; (8010a50 <xTimerGenericCommand+0x9c>)
 8010a20:	6818      	ldr	r0, [r3, #0]
 8010a22:	f107 0110 	add.w	r1, r7, #16
 8010a26:	2300      	movs	r3, #0
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f7fe fad1 	bl	800efd0 <xQueueGenericSend>
 8010a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8010a30:	e008      	b.n	8010a44 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a32:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <xTimerGenericCommand+0x9c>)
 8010a34:	6818      	ldr	r0, [r3, #0]
 8010a36:	f107 0110 	add.w	r1, r7, #16
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	f7fe fbcd 	bl	800f1dc <xQueueGenericSendFromISR>
 8010a42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3728      	adds	r7, #40	; 0x28
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	20004048 	.word	0x20004048

08010a54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b088      	sub	sp, #32
 8010a58:	af02      	add	r7, sp, #8
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a5e:	4b23      	ldr	r3, [pc, #140]	; (8010aec <prvProcessExpiredTimer+0x98>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fe f974 	bl	800ed5a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d024      	beq.n	8010aca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	699a      	ldr	r2, [r3, #24]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	18d1      	adds	r1, r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	6978      	ldr	r0, [r7, #20]
 8010a8e:	f000 f8d3 	bl	8010c38 <prvInsertTimerInActiveList>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d021      	beq.n	8010adc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a98:	2300      	movs	r3, #0
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	6978      	ldr	r0, [r7, #20]
 8010aa4:	f7ff ff86 	bl	80109b4 <xTimerGenericCommand>
 8010aa8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d115      	bne.n	8010adc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	b672      	cpsid	i
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	b662      	cpsie	i
 8010ac4:	60fb      	str	r3, [r7, #12]
}
 8010ac6:	bf00      	nop
 8010ac8:	e7fe      	b.n	8010ac8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ad0:	f023 0301 	bic.w	r3, r3, #1
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	6a1b      	ldr	r3, [r3, #32]
 8010ae0:	6978      	ldr	r0, [r7, #20]
 8010ae2:	4798      	blx	r3
}
 8010ae4:	bf00      	nop
 8010ae6:	3718      	adds	r7, #24
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	20004040 	.word	0x20004040

08010af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010af8:	f107 0308 	add.w	r3, r7, #8
 8010afc:	4618      	mov	r0, r3
 8010afe:	f000 f857 	bl	8010bb0 <prvGetNextExpireTime>
 8010b02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	4619      	mov	r1, r3
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f000 f803 	bl	8010b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b0e:	f000 f8d5 	bl	8010cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b12:	e7f1      	b.n	8010af8 <prvTimerTask+0x8>

08010b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b1e:	f7ff f90f 	bl	800fd40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b22:	f107 0308 	add.w	r3, r7, #8
 8010b26:	4618      	mov	r0, r3
 8010b28:	f000 f866 	bl	8010bf8 <prvSampleTimeNow>
 8010b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d130      	bne.n	8010b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10a      	bne.n	8010b50 <prvProcessTimerOrBlockTask+0x3c>
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d806      	bhi.n	8010b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b42:	f7ff f90b 	bl	800fd5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b46:	68f9      	ldr	r1, [r7, #12]
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7ff ff83 	bl	8010a54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b4e:	e024      	b.n	8010b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d008      	beq.n	8010b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b56:	4b13      	ldr	r3, [pc, #76]	; (8010ba4 <prvProcessTimerOrBlockTask+0x90>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d101      	bne.n	8010b64 <prvProcessTimerOrBlockTask+0x50>
 8010b60:	2301      	movs	r3, #1
 8010b62:	e000      	b.n	8010b66 <prvProcessTimerOrBlockTask+0x52>
 8010b64:	2300      	movs	r3, #0
 8010b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b68:	4b0f      	ldr	r3, [pc, #60]	; (8010ba8 <prvProcessTimerOrBlockTask+0x94>)
 8010b6a:	6818      	ldr	r0, [r3, #0]
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	683a      	ldr	r2, [r7, #0]
 8010b74:	4619      	mov	r1, r3
 8010b76:	f7fe fdf1 	bl	800f75c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010b7a:	f7ff f8ef 	bl	800fd5c <xTaskResumeAll>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d10a      	bne.n	8010b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010b84:	4b09      	ldr	r3, [pc, #36]	; (8010bac <prvProcessTimerOrBlockTask+0x98>)
 8010b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	f3bf 8f4f 	dsb	sy
 8010b90:	f3bf 8f6f 	isb	sy
}
 8010b94:	e001      	b.n	8010b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b96:	f7ff f8e1 	bl	800fd5c <xTaskResumeAll>
}
 8010b9a:	bf00      	nop
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	20004044 	.word	0x20004044
 8010ba8:	20004048 	.word	0x20004048
 8010bac:	e000ed04 	.word	0xe000ed04

08010bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b085      	sub	sp, #20
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010bb8:	4b0e      	ldr	r3, [pc, #56]	; (8010bf4 <prvGetNextExpireTime+0x44>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <prvGetNextExpireTime+0x16>
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	e000      	b.n	8010bc8 <prvGetNextExpireTime+0x18>
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d105      	bne.n	8010be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bd4:	4b07      	ldr	r3, [pc, #28]	; (8010bf4 <prvGetNextExpireTime+0x44>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	60fb      	str	r3, [r7, #12]
 8010bde:	e001      	b.n	8010be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010be0:	2300      	movs	r3, #0
 8010be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010be4:	68fb      	ldr	r3, [r7, #12]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3714      	adds	r7, #20
 8010bea:	46bd      	mov	sp, r7
 8010bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf0:	4770      	bx	lr
 8010bf2:	bf00      	nop
 8010bf4:	20004040 	.word	0x20004040

08010bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c00:	f7ff f94c 	bl	800fe9c <xTaskGetTickCount>
 8010c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c06:	4b0b      	ldr	r3, [pc, #44]	; (8010c34 <prvSampleTimeNow+0x3c>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d205      	bcs.n	8010c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c10:	f000 f93c 	bl	8010e8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2201      	movs	r2, #1
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	e002      	b.n	8010c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c22:	4a04      	ldr	r2, [pc, #16]	; (8010c34 <prvSampleTimeNow+0x3c>)
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c28:	68fb      	ldr	r3, [r7, #12]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	20004050 	.word	0x20004050

08010c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
 8010c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c46:	2300      	movs	r3, #0
 8010c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c56:	68ba      	ldr	r2, [r7, #8]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d812      	bhi.n	8010c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	1ad2      	subs	r2, r2, r3
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	699b      	ldr	r3, [r3, #24]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d302      	bcc.n	8010c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	617b      	str	r3, [r7, #20]
 8010c70:	e01b      	b.n	8010caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c72:	4b10      	ldr	r3, [pc, #64]	; (8010cb4 <prvInsertTimerInActiveList+0x7c>)
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	3304      	adds	r3, #4
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	f7fe f833 	bl	800ece8 <vListInsert>
 8010c82:	e012      	b.n	8010caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d206      	bcs.n	8010c9a <prvInsertTimerInActiveList+0x62>
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d302      	bcc.n	8010c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c94:	2301      	movs	r3, #1
 8010c96:	617b      	str	r3, [r7, #20]
 8010c98:	e007      	b.n	8010caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c9a:	4b07      	ldr	r3, [pc, #28]	; (8010cb8 <prvInsertTimerInActiveList+0x80>)
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	3304      	adds	r3, #4
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	f7fe f81f 	bl	800ece8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010caa:	697b      	ldr	r3, [r7, #20]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3718      	adds	r7, #24
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	20004044 	.word	0x20004044
 8010cb8:	20004040 	.word	0x20004040

08010cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b08e      	sub	sp, #56	; 0x38
 8010cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cc2:	e0d0      	b.n	8010e66 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	da1a      	bge.n	8010d00 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010cca:	1d3b      	adds	r3, r7, #4
 8010ccc:	3304      	adds	r3, #4
 8010cce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10c      	bne.n	8010cf0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8010cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cda:	b672      	cpsid	i
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	b662      	cpsie	i
 8010cea:	61fb      	str	r3, [r7, #28]
}
 8010cec:	bf00      	nop
 8010cee:	e7fe      	b.n	8010cee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cf6:	6850      	ldr	r0, [r2, #4]
 8010cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cfa:	6892      	ldr	r2, [r2, #8]
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f2c0 80ae 	blt.w	8010e64 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	695b      	ldr	r3, [r3, #20]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d004      	beq.n	8010d1e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d16:	3304      	adds	r3, #4
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fe f81e 	bl	800ed5a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d1e:	463b      	mov	r3, r7
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff ff69 	bl	8010bf8 <prvSampleTimeNow>
 8010d26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b09      	cmp	r3, #9
 8010d2c:	f200 809b 	bhi.w	8010e66 <prvProcessReceivedCommands+0x1aa>
 8010d30:	a201      	add	r2, pc, #4	; (adr r2, 8010d38 <prvProcessReceivedCommands+0x7c>)
 8010d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d36:	bf00      	nop
 8010d38:	08010d61 	.word	0x08010d61
 8010d3c:	08010d61 	.word	0x08010d61
 8010d40:	08010d61 	.word	0x08010d61
 8010d44:	08010dd9 	.word	0x08010dd9
 8010d48:	08010ded 	.word	0x08010ded
 8010d4c:	08010e3b 	.word	0x08010e3b
 8010d50:	08010d61 	.word	0x08010d61
 8010d54:	08010d61 	.word	0x08010d61
 8010d58:	08010dd9 	.word	0x08010dd9
 8010d5c:	08010ded 	.word	0x08010ded
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d66:	f043 0301 	orr.w	r3, r3, #1
 8010d6a:	b2da      	uxtb	r2, r3
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d72:	68ba      	ldr	r2, [r7, #8]
 8010d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	18d1      	adds	r1, r2, r3
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d80:	f7ff ff5a 	bl	8010c38 <prvInsertTimerInActiveList>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d06d      	beq.n	8010e66 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d98:	f003 0304 	and.w	r3, r3, #4
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d062      	beq.n	8010e66 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da4:	699b      	ldr	r3, [r3, #24]
 8010da6:	441a      	add	r2, r3
 8010da8:	2300      	movs	r3, #0
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	2300      	movs	r3, #0
 8010dae:	2100      	movs	r1, #0
 8010db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010db2:	f7ff fdff 	bl	80109b4 <xTimerGenericCommand>
 8010db6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d153      	bne.n	8010e66 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	b672      	cpsid	i
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	b662      	cpsie	i
 8010dd2:	61bb      	str	r3, [r7, #24]
}
 8010dd4:	bf00      	nop
 8010dd6:	e7fe      	b.n	8010dd6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dde:	f023 0301 	bic.w	r3, r3, #1
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010dea:	e03c      	b.n	8010e66 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010df2:	f043 0301 	orr.w	r3, r3, #1
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010dfe:	68ba      	ldr	r2, [r7, #8]
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e06:	699b      	ldr	r3, [r3, #24]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d10c      	bne.n	8010e26 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e10:	b672      	cpsid	i
 8010e12:	f383 8811 	msr	BASEPRI, r3
 8010e16:	f3bf 8f6f 	isb	sy
 8010e1a:	f3bf 8f4f 	dsb	sy
 8010e1e:	b662      	cpsie	i
 8010e20:	617b      	str	r3, [r7, #20]
}
 8010e22:	bf00      	nop
 8010e24:	e7fe      	b.n	8010e24 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	699a      	ldr	r2, [r3, #24]
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2c:	18d1      	adds	r1, r2, r3
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e34:	f7ff ff00 	bl	8010c38 <prvInsertTimerInActiveList>
					break;
 8010e38:	e015      	b.n	8010e66 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e40:	f003 0302 	and.w	r3, r3, #2
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d103      	bne.n	8010e50 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e4a:	f000 fbe5 	bl	8011618 <vPortFree>
 8010e4e:	e00a      	b.n	8010e66 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e56:	f023 0301 	bic.w	r3, r3, #1
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e62:	e000      	b.n	8010e66 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e66:	4b08      	ldr	r3, [pc, #32]	; (8010e88 <prvProcessReceivedCommands+0x1cc>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	1d39      	adds	r1, r7, #4
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fe fa54 	bl	800f31c <xQueueReceive>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f47f af24 	bne.w	8010cc4 <prvProcessReceivedCommands+0x8>
	}
}
 8010e7c:	bf00      	nop
 8010e7e:	bf00      	nop
 8010e80:	3730      	adds	r7, #48	; 0x30
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	20004048 	.word	0x20004048

08010e8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b088      	sub	sp, #32
 8010e90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e92:	e04a      	b.n	8010f2a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e94:	4b2e      	ldr	r3, [pc, #184]	; (8010f50 <prvSwitchTimerLists+0xc4>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e9e:	4b2c      	ldr	r3, [pc, #176]	; (8010f50 <prvSwitchTimerLists+0xc4>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	68db      	ldr	r3, [r3, #12]
 8010ea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	3304      	adds	r3, #4
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fd ff54 	bl	800ed5a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6a1b      	ldr	r3, [r3, #32]
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ec0:	f003 0304 	and.w	r3, r3, #4
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d030      	beq.n	8010f2a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	699b      	ldr	r3, [r3, #24]
 8010ecc:	693a      	ldr	r2, [r7, #16]
 8010ece:	4413      	add	r3, r2
 8010ed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d90e      	bls.n	8010ef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	68ba      	ldr	r2, [r7, #8]
 8010ede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ee6:	4b1a      	ldr	r3, [pc, #104]	; (8010f50 <prvSwitchTimerLists+0xc4>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	3304      	adds	r3, #4
 8010eee:	4619      	mov	r1, r3
 8010ef0:	4610      	mov	r0, r2
 8010ef2:	f7fd fef9 	bl	800ece8 <vListInsert>
 8010ef6:	e018      	b.n	8010f2a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	2300      	movs	r3, #0
 8010efe:	693a      	ldr	r2, [r7, #16]
 8010f00:	2100      	movs	r1, #0
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7ff fd56 	bl	80109b4 <xTimerGenericCommand>
 8010f08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d10c      	bne.n	8010f2a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f14:	b672      	cpsid	i
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	b662      	cpsie	i
 8010f24:	603b      	str	r3, [r7, #0]
}
 8010f26:	bf00      	nop
 8010f28:	e7fe      	b.n	8010f28 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f2a:	4b09      	ldr	r3, [pc, #36]	; (8010f50 <prvSwitchTimerLists+0xc4>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1af      	bne.n	8010e94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f34:	4b06      	ldr	r3, [pc, #24]	; (8010f50 <prvSwitchTimerLists+0xc4>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f3a:	4b06      	ldr	r3, [pc, #24]	; (8010f54 <prvSwitchTimerLists+0xc8>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4a04      	ldr	r2, [pc, #16]	; (8010f50 <prvSwitchTimerLists+0xc4>)
 8010f40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f42:	4a04      	ldr	r2, [pc, #16]	; (8010f54 <prvSwitchTimerLists+0xc8>)
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	6013      	str	r3, [r2, #0]
}
 8010f48:	bf00      	nop
 8010f4a:	3718      	adds	r7, #24
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	20004040 	.word	0x20004040
 8010f54:	20004044 	.word	0x20004044

08010f58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f5e:	f000 f965 	bl	801122c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f62:	4b15      	ldr	r3, [pc, #84]	; (8010fb8 <prvCheckForValidListAndQueue+0x60>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d120      	bne.n	8010fac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f6a:	4814      	ldr	r0, [pc, #80]	; (8010fbc <prvCheckForValidListAndQueue+0x64>)
 8010f6c:	f7fd fe6b 	bl	800ec46 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f70:	4813      	ldr	r0, [pc, #76]	; (8010fc0 <prvCheckForValidListAndQueue+0x68>)
 8010f72:	f7fd fe68 	bl	800ec46 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f76:	4b13      	ldr	r3, [pc, #76]	; (8010fc4 <prvCheckForValidListAndQueue+0x6c>)
 8010f78:	4a10      	ldr	r2, [pc, #64]	; (8010fbc <prvCheckForValidListAndQueue+0x64>)
 8010f7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f7c:	4b12      	ldr	r3, [pc, #72]	; (8010fc8 <prvCheckForValidListAndQueue+0x70>)
 8010f7e:	4a10      	ldr	r2, [pc, #64]	; (8010fc0 <prvCheckForValidListAndQueue+0x68>)
 8010f80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010f82:	2300      	movs	r3, #0
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	4b11      	ldr	r3, [pc, #68]	; (8010fcc <prvCheckForValidListAndQueue+0x74>)
 8010f88:	4a11      	ldr	r2, [pc, #68]	; (8010fd0 <prvCheckForValidListAndQueue+0x78>)
 8010f8a:	2110      	movs	r1, #16
 8010f8c:	200a      	movs	r0, #10
 8010f8e:	f7fd ff79 	bl	800ee84 <xQueueGenericCreateStatic>
 8010f92:	4603      	mov	r3, r0
 8010f94:	4a08      	ldr	r2, [pc, #32]	; (8010fb8 <prvCheckForValidListAndQueue+0x60>)
 8010f96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010f98:	4b07      	ldr	r3, [pc, #28]	; (8010fb8 <prvCheckForValidListAndQueue+0x60>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d005      	beq.n	8010fac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010fa0:	4b05      	ldr	r3, [pc, #20]	; (8010fb8 <prvCheckForValidListAndQueue+0x60>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	490b      	ldr	r1, [pc, #44]	; (8010fd4 <prvCheckForValidListAndQueue+0x7c>)
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe fbae 	bl	800f708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010fac:	f000 f972 	bl	8011294 <vPortExitCritical>
}
 8010fb0:	bf00      	nop
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20004048 	.word	0x20004048
 8010fbc:	20004018 	.word	0x20004018
 8010fc0:	2000402c 	.word	0x2000402c
 8010fc4:	20004040 	.word	0x20004040
 8010fc8:	20004044 	.word	0x20004044
 8010fcc:	200040f4 	.word	0x200040f4
 8010fd0:	20004054 	.word	0x20004054
 8010fd4:	0801aaa4 	.word	0x0801aaa4

08010fd8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b08a      	sub	sp, #40	; 0x28
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
 8010fe4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010fe6:	f06f 0301 	mvn.w	r3, #1
 8010fea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ff8:	4b06      	ldr	r3, [pc, #24]	; (8011014 <xTimerPendFunctionCallFromISR+0x3c>)
 8010ffa:	6818      	ldr	r0, [r3, #0]
 8010ffc:	f107 0114 	add.w	r1, r7, #20
 8011000:	2300      	movs	r3, #0
 8011002:	683a      	ldr	r2, [r7, #0]
 8011004:	f7fe f8ea 	bl	800f1dc <xQueueGenericSendFromISR>
 8011008:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801100c:	4618      	mov	r0, r3
 801100e:	3728      	adds	r7, #40	; 0x28
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	20004048 	.word	0x20004048

08011018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011018:	b480      	push	{r7}
 801101a:	b085      	sub	sp, #20
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	60b9      	str	r1, [r7, #8]
 8011022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	3b04      	subs	r3, #4
 8011028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	3b04      	subs	r3, #4
 8011036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	f023 0201 	bic.w	r2, r3, #1
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	3b04      	subs	r3, #4
 8011046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011048:	4a0c      	ldr	r2, [pc, #48]	; (801107c <pxPortInitialiseStack+0x64>)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3b14      	subs	r3, #20
 8011052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	3b04      	subs	r3, #4
 801105e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f06f 0202 	mvn.w	r2, #2
 8011066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	3b20      	subs	r3, #32
 801106c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801106e:	68fb      	ldr	r3, [r7, #12]
}
 8011070:	4618      	mov	r0, r3
 8011072:	3714      	adds	r7, #20
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr
 801107c:	08011081 	.word	0x08011081

08011080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011086:	2300      	movs	r3, #0
 8011088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801108a:	4b14      	ldr	r3, [pc, #80]	; (80110dc <prvTaskExitError+0x5c>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011092:	d00c      	beq.n	80110ae <prvTaskExitError+0x2e>
	__asm volatile
 8011094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011098:	b672      	cpsid	i
 801109a:	f383 8811 	msr	BASEPRI, r3
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f3bf 8f4f 	dsb	sy
 80110a6:	b662      	cpsie	i
 80110a8:	60fb      	str	r3, [r7, #12]
}
 80110aa:	bf00      	nop
 80110ac:	e7fe      	b.n	80110ac <prvTaskExitError+0x2c>
	__asm volatile
 80110ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b2:	b672      	cpsid	i
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	b662      	cpsie	i
 80110c2:	60bb      	str	r3, [r7, #8]
}
 80110c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80110c6:	bf00      	nop
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d0fc      	beq.n	80110c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80110ce:	bf00      	nop
 80110d0:	bf00      	nop
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	20000154 	.word	0x20000154

080110e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80110e0:	4b07      	ldr	r3, [pc, #28]	; (8011100 <pxCurrentTCBConst2>)
 80110e2:	6819      	ldr	r1, [r3, #0]
 80110e4:	6808      	ldr	r0, [r1, #0]
 80110e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ea:	f380 8809 	msr	PSP, r0
 80110ee:	f3bf 8f6f 	isb	sy
 80110f2:	f04f 0000 	mov.w	r0, #0
 80110f6:	f380 8811 	msr	BASEPRI, r0
 80110fa:	4770      	bx	lr
 80110fc:	f3af 8000 	nop.w

08011100 <pxCurrentTCBConst2>:
 8011100:	20003b18 	.word	0x20003b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011104:	bf00      	nop
 8011106:	bf00      	nop

08011108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011108:	4808      	ldr	r0, [pc, #32]	; (801112c <prvPortStartFirstTask+0x24>)
 801110a:	6800      	ldr	r0, [r0, #0]
 801110c:	6800      	ldr	r0, [r0, #0]
 801110e:	f380 8808 	msr	MSP, r0
 8011112:	f04f 0000 	mov.w	r0, #0
 8011116:	f380 8814 	msr	CONTROL, r0
 801111a:	b662      	cpsie	i
 801111c:	b661      	cpsie	f
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	f3bf 8f6f 	isb	sy
 8011126:	df00      	svc	0
 8011128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801112a:	bf00      	nop
 801112c:	e000ed08 	.word	0xe000ed08

08011130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011136:	4b37      	ldr	r3, [pc, #220]	; (8011214 <xPortStartScheduler+0xe4>)
 8011138:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	b2db      	uxtb	r3, r3
 8011140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	22ff      	movs	r2, #255	; 0xff
 8011146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	b2db      	uxtb	r3, r3
 801114e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011150:	78fb      	ldrb	r3, [r7, #3]
 8011152:	b2db      	uxtb	r3, r3
 8011154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011158:	b2da      	uxtb	r2, r3
 801115a:	4b2f      	ldr	r3, [pc, #188]	; (8011218 <xPortStartScheduler+0xe8>)
 801115c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801115e:	4b2f      	ldr	r3, [pc, #188]	; (801121c <xPortStartScheduler+0xec>)
 8011160:	2207      	movs	r2, #7
 8011162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011164:	e009      	b.n	801117a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011166:	4b2d      	ldr	r3, [pc, #180]	; (801121c <xPortStartScheduler+0xec>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	3b01      	subs	r3, #1
 801116c:	4a2b      	ldr	r2, [pc, #172]	; (801121c <xPortStartScheduler+0xec>)
 801116e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011170:	78fb      	ldrb	r3, [r7, #3]
 8011172:	b2db      	uxtb	r3, r3
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	b2db      	uxtb	r3, r3
 8011178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801117a:	78fb      	ldrb	r3, [r7, #3]
 801117c:	b2db      	uxtb	r3, r3
 801117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011182:	2b80      	cmp	r3, #128	; 0x80
 8011184:	d0ef      	beq.n	8011166 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011186:	4b25      	ldr	r3, [pc, #148]	; (801121c <xPortStartScheduler+0xec>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f1c3 0307 	rsb	r3, r3, #7
 801118e:	2b04      	cmp	r3, #4
 8011190:	d00c      	beq.n	80111ac <xPortStartScheduler+0x7c>
	__asm volatile
 8011192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011196:	b672      	cpsid	i
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	b662      	cpsie	i
 80111a6:	60bb      	str	r3, [r7, #8]
}
 80111a8:	bf00      	nop
 80111aa:	e7fe      	b.n	80111aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80111ac:	4b1b      	ldr	r3, [pc, #108]	; (801121c <xPortStartScheduler+0xec>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	021b      	lsls	r3, r3, #8
 80111b2:	4a1a      	ldr	r2, [pc, #104]	; (801121c <xPortStartScheduler+0xec>)
 80111b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111b6:	4b19      	ldr	r3, [pc, #100]	; (801121c <xPortStartScheduler+0xec>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80111be:	4a17      	ldr	r2, [pc, #92]	; (801121c <xPortStartScheduler+0xec>)
 80111c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111ca:	4b15      	ldr	r3, [pc, #84]	; (8011220 <xPortStartScheduler+0xf0>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	4a14      	ldr	r2, [pc, #80]	; (8011220 <xPortStartScheduler+0xf0>)
 80111d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80111d6:	4b12      	ldr	r3, [pc, #72]	; (8011220 <xPortStartScheduler+0xf0>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a11      	ldr	r2, [pc, #68]	; (8011220 <xPortStartScheduler+0xf0>)
 80111dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80111e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80111e2:	f000 f8dd 	bl	80113a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80111e6:	4b0f      	ldr	r3, [pc, #60]	; (8011224 <xPortStartScheduler+0xf4>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80111ec:	f000 f8fc 	bl	80113e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80111f0:	4b0d      	ldr	r3, [pc, #52]	; (8011228 <xPortStartScheduler+0xf8>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4a0c      	ldr	r2, [pc, #48]	; (8011228 <xPortStartScheduler+0xf8>)
 80111f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80111fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111fc:	f7ff ff84 	bl	8011108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011200:	f7fe ff18 	bl	8010034 <vTaskSwitchContext>
	prvTaskExitError();
 8011204:	f7ff ff3c 	bl	8011080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	e000e400 	.word	0xe000e400
 8011218:	20004144 	.word	0x20004144
 801121c:	20004148 	.word	0x20004148
 8011220:	e000ed20 	.word	0xe000ed20
 8011224:	20000154 	.word	0x20000154
 8011228:	e000ef34 	.word	0xe000ef34

0801122c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
	__asm volatile
 8011232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011236:	b672      	cpsid	i
 8011238:	f383 8811 	msr	BASEPRI, r3
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	b662      	cpsie	i
 8011246:	607b      	str	r3, [r7, #4]
}
 8011248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801124a:	4b10      	ldr	r3, [pc, #64]	; (801128c <vPortEnterCritical+0x60>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	3301      	adds	r3, #1
 8011250:	4a0e      	ldr	r2, [pc, #56]	; (801128c <vPortEnterCritical+0x60>)
 8011252:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011254:	4b0d      	ldr	r3, [pc, #52]	; (801128c <vPortEnterCritical+0x60>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b01      	cmp	r3, #1
 801125a:	d111      	bne.n	8011280 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801125c:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <vPortEnterCritical+0x64>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	b2db      	uxtb	r3, r3
 8011262:	2b00      	cmp	r3, #0
 8011264:	d00c      	beq.n	8011280 <vPortEnterCritical+0x54>
	__asm volatile
 8011266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126a:	b672      	cpsid	i
 801126c:	f383 8811 	msr	BASEPRI, r3
 8011270:	f3bf 8f6f 	isb	sy
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	b662      	cpsie	i
 801127a:	603b      	str	r3, [r7, #0]
}
 801127c:	bf00      	nop
 801127e:	e7fe      	b.n	801127e <vPortEnterCritical+0x52>
	}
}
 8011280:	bf00      	nop
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr
 801128c:	20000154 	.word	0x20000154
 8011290:	e000ed04 	.word	0xe000ed04

08011294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801129a:	4b13      	ldr	r3, [pc, #76]	; (80112e8 <vPortExitCritical+0x54>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d10c      	bne.n	80112bc <vPortExitCritical+0x28>
	__asm volatile
 80112a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a6:	b672      	cpsid	i
 80112a8:	f383 8811 	msr	BASEPRI, r3
 80112ac:	f3bf 8f6f 	isb	sy
 80112b0:	f3bf 8f4f 	dsb	sy
 80112b4:	b662      	cpsie	i
 80112b6:	607b      	str	r3, [r7, #4]
}
 80112b8:	bf00      	nop
 80112ba:	e7fe      	b.n	80112ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80112bc:	4b0a      	ldr	r3, [pc, #40]	; (80112e8 <vPortExitCritical+0x54>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	3b01      	subs	r3, #1
 80112c2:	4a09      	ldr	r2, [pc, #36]	; (80112e8 <vPortExitCritical+0x54>)
 80112c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112c6:	4b08      	ldr	r3, [pc, #32]	; (80112e8 <vPortExitCritical+0x54>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d105      	bne.n	80112da <vPortExitCritical+0x46>
 80112ce:	2300      	movs	r3, #0
 80112d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	f383 8811 	msr	BASEPRI, r3
}
 80112d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112da:	bf00      	nop
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	20000154 	.word	0x20000154
 80112ec:	00000000 	.word	0x00000000

080112f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80112f0:	f3ef 8009 	mrs	r0, PSP
 80112f4:	f3bf 8f6f 	isb	sy
 80112f8:	4b15      	ldr	r3, [pc, #84]	; (8011350 <pxCurrentTCBConst>)
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	f01e 0f10 	tst.w	lr, #16
 8011300:	bf08      	it	eq
 8011302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130a:	6010      	str	r0, [r2, #0]
 801130c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011314:	b672      	cpsid	i
 8011316:	f380 8811 	msr	BASEPRI, r0
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	b662      	cpsie	i
 8011324:	f7fe fe86 	bl	8010034 <vTaskSwitchContext>
 8011328:	f04f 0000 	mov.w	r0, #0
 801132c:	f380 8811 	msr	BASEPRI, r0
 8011330:	bc09      	pop	{r0, r3}
 8011332:	6819      	ldr	r1, [r3, #0]
 8011334:	6808      	ldr	r0, [r1, #0]
 8011336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133a:	f01e 0f10 	tst.w	lr, #16
 801133e:	bf08      	it	eq
 8011340:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011344:	f380 8809 	msr	PSP, r0
 8011348:	f3bf 8f6f 	isb	sy
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop

08011350 <pxCurrentTCBConst>:
 8011350:	20003b18 	.word	0x20003b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011354:	bf00      	nop
 8011356:	bf00      	nop

08011358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
	__asm volatile
 801135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011362:	b672      	cpsid	i
 8011364:	f383 8811 	msr	BASEPRI, r3
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	b662      	cpsie	i
 8011372:	607b      	str	r3, [r7, #4]
}
 8011374:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011376:	f7fe fda1 	bl	800febc <xTaskIncrementTick>
 801137a:	4603      	mov	r3, r0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d003      	beq.n	8011388 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011380:	4b06      	ldr	r3, [pc, #24]	; (801139c <SysTick_Handler+0x44>)
 8011382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011386:	601a      	str	r2, [r3, #0]
 8011388:	2300      	movs	r3, #0
 801138a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	f383 8811 	msr	BASEPRI, r3
}
 8011392:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011394:	bf00      	nop
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	e000ed04 	.word	0xe000ed04

080113a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80113a0:	b480      	push	{r7}
 80113a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80113a4:	4b0b      	ldr	r3, [pc, #44]	; (80113d4 <vPortSetupTimerInterrupt+0x34>)
 80113a6:	2200      	movs	r2, #0
 80113a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80113aa:	4b0b      	ldr	r3, [pc, #44]	; (80113d8 <vPortSetupTimerInterrupt+0x38>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80113b0:	4b0a      	ldr	r3, [pc, #40]	; (80113dc <vPortSetupTimerInterrupt+0x3c>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a0a      	ldr	r2, [pc, #40]	; (80113e0 <vPortSetupTimerInterrupt+0x40>)
 80113b6:	fba2 2303 	umull	r2, r3, r2, r3
 80113ba:	099b      	lsrs	r3, r3, #6
 80113bc:	4a09      	ldr	r2, [pc, #36]	; (80113e4 <vPortSetupTimerInterrupt+0x44>)
 80113be:	3b01      	subs	r3, #1
 80113c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113c2:	4b04      	ldr	r3, [pc, #16]	; (80113d4 <vPortSetupTimerInterrupt+0x34>)
 80113c4:	2207      	movs	r2, #7
 80113c6:	601a      	str	r2, [r3, #0]
}
 80113c8:	bf00      	nop
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	e000e010 	.word	0xe000e010
 80113d8:	e000e018 	.word	0xe000e018
 80113dc:	20000148 	.word	0x20000148
 80113e0:	10624dd3 	.word	0x10624dd3
 80113e4:	e000e014 	.word	0xe000e014

080113e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80113e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80113f8 <vPortEnableVFP+0x10>
 80113ec:	6801      	ldr	r1, [r0, #0]
 80113ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80113f2:	6001      	str	r1, [r0, #0]
 80113f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80113f6:	bf00      	nop
 80113f8:	e000ed88 	.word	0xe000ed88

080113fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011402:	f3ef 8305 	mrs	r3, IPSR
 8011406:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2b0f      	cmp	r3, #15
 801140c:	d916      	bls.n	801143c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801140e:	4a19      	ldr	r2, [pc, #100]	; (8011474 <vPortValidateInterruptPriority+0x78>)
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	4413      	add	r3, r2
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011418:	4b17      	ldr	r3, [pc, #92]	; (8011478 <vPortValidateInterruptPriority+0x7c>)
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	7afa      	ldrb	r2, [r7, #11]
 801141e:	429a      	cmp	r2, r3
 8011420:	d20c      	bcs.n	801143c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011426:	b672      	cpsid	i
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	b662      	cpsie	i
 8011436:	607b      	str	r3, [r7, #4]
}
 8011438:	bf00      	nop
 801143a:	e7fe      	b.n	801143a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801143c:	4b0f      	ldr	r3, [pc, #60]	; (801147c <vPortValidateInterruptPriority+0x80>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011444:	4b0e      	ldr	r3, [pc, #56]	; (8011480 <vPortValidateInterruptPriority+0x84>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	429a      	cmp	r2, r3
 801144a:	d90c      	bls.n	8011466 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011450:	b672      	cpsid	i
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	b662      	cpsie	i
 8011460:	603b      	str	r3, [r7, #0]
}
 8011462:	bf00      	nop
 8011464:	e7fe      	b.n	8011464 <vPortValidateInterruptPriority+0x68>
	}
 8011466:	bf00      	nop
 8011468:	3714      	adds	r7, #20
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	e000e3f0 	.word	0xe000e3f0
 8011478:	20004144 	.word	0x20004144
 801147c:	e000ed0c 	.word	0xe000ed0c
 8011480:	20004148 	.word	0x20004148

08011484 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08a      	sub	sp, #40	; 0x28
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801148c:	2300      	movs	r3, #0
 801148e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011490:	f7fe fc56 	bl	800fd40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011494:	4b5b      	ldr	r3, [pc, #364]	; (8011604 <pvPortMalloc+0x180>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d101      	bne.n	80114a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801149c:	f000 f91a 	bl	80116d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80114a0:	4b59      	ldr	r3, [pc, #356]	; (8011608 <pvPortMalloc+0x184>)
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4013      	ands	r3, r2
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f040 8092 	bne.w	80115d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d01f      	beq.n	80114f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80114b4:	2208      	movs	r2, #8
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4413      	add	r3, r2
 80114ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f003 0307 	and.w	r3, r3, #7
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d016      	beq.n	80114f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f023 0307 	bic.w	r3, r3, #7
 80114cc:	3308      	adds	r3, #8
 80114ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f003 0307 	and.w	r3, r3, #7
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00c      	beq.n	80114f4 <pvPortMalloc+0x70>
	__asm volatile
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	b672      	cpsid	i
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	b662      	cpsie	i
 80114ee:	617b      	str	r3, [r7, #20]
}
 80114f0:	bf00      	nop
 80114f2:	e7fe      	b.n	80114f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d06b      	beq.n	80115d2 <pvPortMalloc+0x14e>
 80114fa:	4b44      	ldr	r3, [pc, #272]	; (801160c <pvPortMalloc+0x188>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	429a      	cmp	r2, r3
 8011502:	d866      	bhi.n	80115d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011504:	4b42      	ldr	r3, [pc, #264]	; (8011610 <pvPortMalloc+0x18c>)
 8011506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011508:	4b41      	ldr	r3, [pc, #260]	; (8011610 <pvPortMalloc+0x18c>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801150e:	e004      	b.n	801151a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	429a      	cmp	r2, r3
 8011522:	d903      	bls.n	801152c <pvPortMalloc+0xa8>
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1f1      	bne.n	8011510 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801152c:	4b35      	ldr	r3, [pc, #212]	; (8011604 <pvPortMalloc+0x180>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011532:	429a      	cmp	r2, r3
 8011534:	d04d      	beq.n	80115d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2208      	movs	r2, #8
 801153c:	4413      	add	r3, r2
 801153e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011542:	681a      	ldr	r2, [r3, #0]
 8011544:	6a3b      	ldr	r3, [r7, #32]
 8011546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	685a      	ldr	r2, [r3, #4]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	1ad2      	subs	r2, r2, r3
 8011550:	2308      	movs	r3, #8
 8011552:	005b      	lsls	r3, r3, #1
 8011554:	429a      	cmp	r2, r3
 8011556:	d921      	bls.n	801159c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4413      	add	r3, r2
 801155e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	f003 0307 	and.w	r3, r3, #7
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00c      	beq.n	8011584 <pvPortMalloc+0x100>
	__asm volatile
 801156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156e:	b672      	cpsid	i
 8011570:	f383 8811 	msr	BASEPRI, r3
 8011574:	f3bf 8f6f 	isb	sy
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	b662      	cpsie	i
 801157e:	613b      	str	r3, [r7, #16]
}
 8011580:	bf00      	nop
 8011582:	e7fe      	b.n	8011582 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011586:	685a      	ldr	r2, [r3, #4]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	1ad2      	subs	r2, r2, r3
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011596:	69b8      	ldr	r0, [r7, #24]
 8011598:	f000 f900 	bl	801179c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801159c:	4b1b      	ldr	r3, [pc, #108]	; (801160c <pvPortMalloc+0x188>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	4a19      	ldr	r2, [pc, #100]	; (801160c <pvPortMalloc+0x188>)
 80115a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80115aa:	4b18      	ldr	r3, [pc, #96]	; (801160c <pvPortMalloc+0x188>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	4b19      	ldr	r3, [pc, #100]	; (8011614 <pvPortMalloc+0x190>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d203      	bcs.n	80115be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80115b6:	4b15      	ldr	r3, [pc, #84]	; (801160c <pvPortMalloc+0x188>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4a16      	ldr	r2, [pc, #88]	; (8011614 <pvPortMalloc+0x190>)
 80115bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	4b11      	ldr	r3, [pc, #68]	; (8011608 <pvPortMalloc+0x184>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	431a      	orrs	r2, r3
 80115c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ce:	2200      	movs	r2, #0
 80115d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80115d2:	f7fe fbc3 	bl	800fd5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	f003 0307 	and.w	r3, r3, #7
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00c      	beq.n	80115fa <pvPortMalloc+0x176>
	__asm volatile
 80115e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e4:	b672      	cpsid	i
 80115e6:	f383 8811 	msr	BASEPRI, r3
 80115ea:	f3bf 8f6f 	isb	sy
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	b662      	cpsie	i
 80115f4:	60fb      	str	r3, [r7, #12]
}
 80115f6:	bf00      	nop
 80115f8:	e7fe      	b.n	80115f8 <pvPortMalloc+0x174>
	return pvReturn;
 80115fa:	69fb      	ldr	r3, [r7, #28]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3728      	adds	r7, #40	; 0x28
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	20028b44 	.word	0x20028b44
 8011608:	20028b50 	.word	0x20028b50
 801160c:	20028b48 	.word	0x20028b48
 8011610:	20028b3c 	.word	0x20028b3c
 8011614:	20028b4c 	.word	0x20028b4c

08011618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d04c      	beq.n	80116c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801162a:	2308      	movs	r3, #8
 801162c:	425b      	negs	r3, r3
 801162e:	697a      	ldr	r2, [r7, #20]
 8011630:	4413      	add	r3, r2
 8011632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	685a      	ldr	r2, [r3, #4]
 801163c:	4b23      	ldr	r3, [pc, #140]	; (80116cc <vPortFree+0xb4>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4013      	ands	r3, r2
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10c      	bne.n	8011660 <vPortFree+0x48>
	__asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164a:	b672      	cpsid	i
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	b662      	cpsie	i
 801165a:	60fb      	str	r3, [r7, #12]
}
 801165c:	bf00      	nop
 801165e:	e7fe      	b.n	801165e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00c      	beq.n	8011682 <vPortFree+0x6a>
	__asm volatile
 8011668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166c:	b672      	cpsid	i
 801166e:	f383 8811 	msr	BASEPRI, r3
 8011672:	f3bf 8f6f 	isb	sy
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	b662      	cpsie	i
 801167c:	60bb      	str	r3, [r7, #8]
}
 801167e:	bf00      	nop
 8011680:	e7fe      	b.n	8011680 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	4b11      	ldr	r3, [pc, #68]	; (80116cc <vPortFree+0xb4>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4013      	ands	r3, r2
 801168c:	2b00      	cmp	r3, #0
 801168e:	d019      	beq.n	80116c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d115      	bne.n	80116c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	685a      	ldr	r2, [r3, #4]
 801169c:	4b0b      	ldr	r3, [pc, #44]	; (80116cc <vPortFree+0xb4>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	43db      	mvns	r3, r3
 80116a2:	401a      	ands	r2, r3
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80116a8:	f7fe fb4a 	bl	800fd40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	685a      	ldr	r2, [r3, #4]
 80116b0:	4b07      	ldr	r3, [pc, #28]	; (80116d0 <vPortFree+0xb8>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4413      	add	r3, r2
 80116b6:	4a06      	ldr	r2, [pc, #24]	; (80116d0 <vPortFree+0xb8>)
 80116b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80116ba:	6938      	ldr	r0, [r7, #16]
 80116bc:	f000 f86e 	bl	801179c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80116c0:	f7fe fb4c 	bl	800fd5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116c4:	bf00      	nop
 80116c6:	3718      	adds	r7, #24
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	20028b50 	.word	0x20028b50
 80116d0:	20028b48 	.word	0x20028b48

080116d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116da:	4b29      	ldr	r3, [pc, #164]	; (8011780 <prvHeapInit+0xac>)
 80116dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80116de:	4b29      	ldr	r3, [pc, #164]	; (8011784 <prvHeapInit+0xb0>)
 80116e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f003 0307 	and.w	r3, r3, #7
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d00c      	beq.n	8011706 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	3307      	adds	r3, #7
 80116f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	f023 0307 	bic.w	r3, r3, #7
 80116f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80116fa:	68ba      	ldr	r2, [r7, #8]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	4a20      	ldr	r2, [pc, #128]	; (8011784 <prvHeapInit+0xb0>)
 8011702:	4413      	add	r3, r2
 8011704:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801170a:	4a1f      	ldr	r2, [pc, #124]	; (8011788 <prvHeapInit+0xb4>)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011710:	4b1d      	ldr	r3, [pc, #116]	; (8011788 <prvHeapInit+0xb4>)
 8011712:	2200      	movs	r2, #0
 8011714:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	68ba      	ldr	r2, [r7, #8]
 801171a:	4413      	add	r3, r2
 801171c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801171e:	2208      	movs	r2, #8
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	1a9b      	subs	r3, r3, r2
 8011724:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f023 0307 	bic.w	r3, r3, #7
 801172c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	4a16      	ldr	r2, [pc, #88]	; (801178c <prvHeapInit+0xb8>)
 8011732:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011734:	4b15      	ldr	r3, [pc, #84]	; (801178c <prvHeapInit+0xb8>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2200      	movs	r2, #0
 801173a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801173c:	4b13      	ldr	r3, [pc, #76]	; (801178c <prvHeapInit+0xb8>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	1ad2      	subs	r2, r2, r3
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011752:	4b0e      	ldr	r3, [pc, #56]	; (801178c <prvHeapInit+0xb8>)
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	4a0c      	ldr	r2, [pc, #48]	; (8011790 <prvHeapInit+0xbc>)
 8011760:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	4a0b      	ldr	r2, [pc, #44]	; (8011794 <prvHeapInit+0xc0>)
 8011768:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801176a:	4b0b      	ldr	r3, [pc, #44]	; (8011798 <prvHeapInit+0xc4>)
 801176c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011770:	601a      	str	r2, [r3, #0]
}
 8011772:	bf00      	nop
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	000249f0 	.word	0x000249f0
 8011784:	2000414c 	.word	0x2000414c
 8011788:	20028b3c 	.word	0x20028b3c
 801178c:	20028b44 	.word	0x20028b44
 8011790:	20028b4c 	.word	0x20028b4c
 8011794:	20028b48 	.word	0x20028b48
 8011798:	20028b50 	.word	0x20028b50

0801179c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80117a4:	4b28      	ldr	r3, [pc, #160]	; (8011848 <prvInsertBlockIntoFreeList+0xac>)
 80117a6:	60fb      	str	r3, [r7, #12]
 80117a8:	e002      	b.n	80117b0 <prvInsertBlockIntoFreeList+0x14>
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	60fb      	str	r3, [r7, #12]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	687a      	ldr	r2, [r7, #4]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d8f7      	bhi.n	80117aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	68ba      	ldr	r2, [r7, #8]
 80117c4:	4413      	add	r3, r2
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d108      	bne.n	80117de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	441a      	add	r2, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	68ba      	ldr	r2, [r7, #8]
 80117e8:	441a      	add	r2, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d118      	bne.n	8011824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	4b15      	ldr	r3, [pc, #84]	; (801184c <prvInsertBlockIntoFreeList+0xb0>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d00d      	beq.n	801181a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	441a      	add	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	601a      	str	r2, [r3, #0]
 8011818:	e008      	b.n	801182c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801181a:	4b0c      	ldr	r3, [pc, #48]	; (801184c <prvInsertBlockIntoFreeList+0xb0>)
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	e003      	b.n	801182c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801182c:	68fa      	ldr	r2, [r7, #12]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	429a      	cmp	r2, r3
 8011832:	d002      	beq.n	801183a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801183a:	bf00      	nop
 801183c:	3714      	adds	r7, #20
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	20028b3c 	.word	0x20028b3c
 801184c:	20028b44 	.word	0x20028b44

08011850 <atlasMainMenuFaultLedLabels>:
//Draws the labels for the Fault LEDs listed on the main menu display. Based off of the contents of the
//LED_FAULT_LBL defined in the project .h file.

//For new project, adjust name of #defines from Atlas to project name (i.e ATLAS_LED1 --> <ProjectName>_LED1) and add an additional
//ZION eeprom check in the drawMainMenu method in menu.c
void atlasMainMenuFaultLedLabels(){
 8011850:	b580      	push	{r7, lr}
 8011852:	b086      	sub	sp, #24
 8011854:	af00      	add	r7, sp, #0
	int i,j;
	int ledFaultAlign=scr_width-90;
 8011856:	4b93      	ldr	r3, [pc, #588]	; (8011aa4 <atlasMainMenuFaultLedLabels+0x254>)
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	3b5a      	subs	r3, #90	; 0x5a
 801185c:	617b      	str	r3, [r7, #20]
	int verticalSpacing=22;
 801185e:	2316      	movs	r3, #22
 8011860:	613b      	str	r3, [r7, #16]
	int horizontalSpacing=20;
 8011862:	2314      	movs	r3, #20
 8011864:	60fb      	str	r3, [r7, #12]
	i  = ledFaultAlign;
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	60bb      	str	r3, [r7, #8]
	j  = 3;
 801186a:	2303      	movs	r3, #3
 801186c:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	b298      	uxth	r0, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	b29b      	uxth	r3, r3
 8011876:	3b02      	subs	r3, #2
 8011878:	b299      	uxth	r1, r3
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	b29b      	uxth	r3, r3
 801187e:	330c      	adds	r3, #12
 8011880:	b29a      	uxth	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	b29b      	uxth	r3, r3
 8011886:	3308      	adds	r3, #8
 8011888:	b29b      	uxth	r3, r3
 801188a:	f7ef fd65 	bl	8001358 <LCD_FillRect>
	i+=20;
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	3314      	adds	r3, #20
 8011892:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED1_FAULT_LBL, fnt7x10);
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	b298      	uxth	r0, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	b299      	uxth	r1, r3
 801189c:	4b82      	ldr	r3, [pc, #520]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 801189e:	4a83      	ldr	r2, [pc, #524]	; (8011aac <atlasMainMenuFaultLedLabels+0x25c>)
 80118a0:	f7f0 f8a8 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	4413      	add	r3, r2
 80118aa:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	b298      	uxth	r0, r3
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	3b02      	subs	r3, #2
 80118ba:	b299      	uxth	r1, r3
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	b29b      	uxth	r3, r3
 80118c0:	330c      	adds	r3, #12
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	3308      	adds	r3, #8
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	f7ef fd44 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	4413      	add	r3, r2
 80118d6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED2_FAULT_LBL, fnt7x10);
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	b298      	uxth	r0, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	b299      	uxth	r1, r3
 80118e0:	4b71      	ldr	r3, [pc, #452]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 80118e2:	4a73      	ldr	r2, [pc, #460]	; (8011ab0 <atlasMainMenuFaultLedLabels+0x260>)
 80118e4:	f7f0 f886 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	4413      	add	r3, r2
 80118f2:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	b298      	uxth	r0, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	3b02      	subs	r3, #2
 80118fe:	b299      	uxth	r1, r3
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	b29b      	uxth	r3, r3
 8011904:	330c      	adds	r3, #12
 8011906:	b29a      	uxth	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	b29b      	uxth	r3, r3
 801190c:	3308      	adds	r3, #8
 801190e:	b29b      	uxth	r3, r3
 8011910:	f7ef fd22 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011914:	68ba      	ldr	r2, [r7, #8]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	4413      	add	r3, r2
 801191a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED3_FAULT_LBL, fnt7x10);
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	b298      	uxth	r0, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	b299      	uxth	r1, r3
 8011924:	4b60      	ldr	r3, [pc, #384]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 8011926:	4a63      	ldr	r2, [pc, #396]	; (8011ab4 <atlasMainMenuFaultLedLabels+0x264>)
 8011928:	f7f0 f864 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	4413      	add	r3, r2
 8011932:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	b298      	uxth	r0, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	b29b      	uxth	r3, r3
 8011940:	3b02      	subs	r3, #2
 8011942:	b299      	uxth	r1, r3
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	b29b      	uxth	r3, r3
 8011948:	330c      	adds	r3, #12
 801194a:	b29a      	uxth	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	b29b      	uxth	r3, r3
 8011950:	3308      	adds	r3, #8
 8011952:	b29b      	uxth	r3, r3
 8011954:	f7ef fd00 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011958:	68ba      	ldr	r2, [r7, #8]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	4413      	add	r3, r2
 801195e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED4_FAULT_LBL, fnt7x10);
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	b298      	uxth	r0, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	b299      	uxth	r1, r3
 8011968:	4b4f      	ldr	r3, [pc, #316]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 801196a:	4a53      	ldr	r2, [pc, #332]	; (8011ab8 <atlasMainMenuFaultLedLabels+0x268>)
 801196c:	f7f0 f842 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	4413      	add	r3, r2
 801197a:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	b298      	uxth	r0, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	b29b      	uxth	r3, r3
 8011984:	3b02      	subs	r3, #2
 8011986:	b299      	uxth	r1, r3
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	b29b      	uxth	r3, r3
 801198c:	330c      	adds	r3, #12
 801198e:	b29a      	uxth	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	b29b      	uxth	r3, r3
 8011994:	3308      	adds	r3, #8
 8011996:	b29b      	uxth	r3, r3
 8011998:	f7ef fcde 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801199c:	68ba      	ldr	r2, [r7, #8]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	4413      	add	r3, r2
 80119a2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED5_FAULT_LBL, fnt7x10);
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	b298      	uxth	r0, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	b299      	uxth	r1, r3
 80119ac:	4b3e      	ldr	r3, [pc, #248]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 80119ae:	4a43      	ldr	r2, [pc, #268]	; (8011abc <atlasMainMenuFaultLedLabels+0x26c>)
 80119b0:	f7f0 f820 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	4413      	add	r3, r2
 80119ba:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	b298      	uxth	r0, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	3b02      	subs	r3, #2
 80119ca:	b299      	uxth	r1, r3
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	330c      	adds	r3, #12
 80119d2:	b29a      	uxth	r2, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	3308      	adds	r3, #8
 80119da:	b29b      	uxth	r3, r3
 80119dc:	f7ef fcbc 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80119e0:	68ba      	ldr	r2, [r7, #8]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	4413      	add	r3, r2
 80119e6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED6_FAULT_LBL, fnt7x10);
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	b298      	uxth	r0, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	b299      	uxth	r1, r3
 80119f0:	4b2d      	ldr	r3, [pc, #180]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 80119f2:	4a33      	ldr	r2, [pc, #204]	; (8011ac0 <atlasMainMenuFaultLedLabels+0x270>)
 80119f4:	f7ef fffe 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	4413      	add	r3, r2
 8011a02:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	b298      	uxth	r0, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	3b02      	subs	r3, #2
 8011a0e:	b299      	uxth	r1, r3
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	330c      	adds	r3, #12
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	3308      	adds	r3, #8
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	f7ef fc9a 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	4413      	add	r3, r2
 8011a2a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED7_FAULT_LBL, fnt7x10);
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	b298      	uxth	r0, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	b299      	uxth	r1, r3
 8011a34:	4b1c      	ldr	r3, [pc, #112]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 8011a36:	4a23      	ldr	r2, [pc, #140]	; (8011ac4 <atlasMainMenuFaultLedLabels+0x274>)
 8011a38:	f7ef ffdc 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	4413      	add	r3, r2
 8011a42:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	b298      	uxth	r0, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	3b02      	subs	r3, #2
 8011a52:	b299      	uxth	r1, r3
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	330c      	adds	r3, #12
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	3308      	adds	r3, #8
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	f7ef fc78 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED8_FAULT_LBL, fnt7x10);
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	b298      	uxth	r0, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	b299      	uxth	r1, r3
 8011a78:	4b0b      	ldr	r3, [pc, #44]	; (8011aa8 <atlasMainMenuFaultLedLabels+0x258>)
 8011a7a:	4a13      	ldr	r2, [pc, #76]	; (8011ac8 <atlasMainMenuFaultLedLabels+0x278>)
 8011a7c:	f7ef ffba 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	4413      	add	r3, r2
 8011a8a:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	b298      	uxth	r0, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	3b02      	subs	r3, #2
 8011a96:	b299      	uxth	r1, r3
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	330c      	adds	r3, #12
 8011a9e:	b29a      	uxth	r2, r3
 8011aa0:	e014      	b.n	8011acc <atlasMainMenuFaultLedLabels+0x27c>
 8011aa2:	bf00      	nop
 8011aa4:	20028b62 	.word	0x20028b62
 8011aa8:	0801ba50 	.word	0x0801ba50
 8011aac:	0801aab0 	.word	0x0801aab0
 8011ab0:	0801aabc 	.word	0x0801aabc
 8011ab4:	0801aac8 	.word	0x0801aac8
 8011ab8:	0801aad4 	.word	0x0801aad4
 8011abc:	0801aae0 	.word	0x0801aae0
 8011ac0:	0801aaec 	.word	0x0801aaec
 8011ac4:	0801aaf4 	.word	0x0801aaf4
 8011ac8:	0801aafc 	.word	0x0801aafc
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	3308      	adds	r3, #8
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	f7ef fc40 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011ad8:	68ba      	ldr	r2, [r7, #8]
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	4413      	add	r3, r2
 8011ade:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED9_FAULT_LBL, fnt7x10);
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	b298      	uxth	r0, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	b299      	uxth	r1, r3
 8011ae8:	4b03      	ldr	r3, [pc, #12]	; (8011af8 <atlasMainMenuFaultLedLabels+0x2a8>)
 8011aea:	4a04      	ldr	r2, [pc, #16]	; (8011afc <atlasMainMenuFaultLedLabels+0x2ac>)
 8011aec:	f7ef ff82 	bl	80019f4 <LCD_PutStr>
}
 8011af0:	bf00      	nop
 8011af2:	3718      	adds	r7, #24
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	0801ba50 	.word	0x0801ba50
 8011afc:	0801ab04 	.word	0x0801ab04

08011b00 <atlasMainMenuBootModes>:
//Draws Boot state in the main menu header. Based off of
//the ATLAS_MODEs defined in the project .h file.

//For new project, adjust name of #defines from Atlas to project name (i.e ATLAS_MAIN --> <ProjectName>_MAIN) and add an additional
//ZION eeprom check in the drawMainMenu method in menu.c
void atlasMainMenuBootModes(int i, int j){
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
	switch(bootButtons.bootMode){
 8011b0a:	4b26      	ldr	r3, [pc, #152]	; (8011ba4 <atlasMainMenuBootModes+0xa4>)
 8011b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b0e:	2b05      	cmp	r3, #5
 8011b10:	d844      	bhi.n	8011b9c <atlasMainMenuBootModes+0x9c>
 8011b12:	a201      	add	r2, pc, #4	; (adr r2, 8011b18 <atlasMainMenuBootModes+0x18>)
 8011b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b18:	08011b31 	.word	0x08011b31
 8011b1c:	08011b43 	.word	0x08011b43
 8011b20:	08011b55 	.word	0x08011b55
 8011b24:	08011b67 	.word	0x08011b67
 8011b28:	08011b8b 	.word	0x08011b8b
 8011b2c:	08011b79 	.word	0x08011b79
	case UNINITIALIZED:
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	b298      	uxth	r0, r3
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	b299      	uxth	r1, r3
 8011b38:	4b1b      	ldr	r3, [pc, #108]	; (8011ba8 <atlasMainMenuBootModes+0xa8>)
 8011b3a:	4a1c      	ldr	r2, [pc, #112]	; (8011bac <atlasMainMenuBootModes+0xac>)
 8011b3c:	f7ef ff5a 	bl	80019f4 <LCD_PutStr>
		break;
 8011b40:	e02c      	b.n	8011b9c <atlasMainMenuBootModes+0x9c>
	case STANDARD:
		LCD_PutStr(i, j, ATLAS_MAIN_STD_MODE, fnt7x10);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	b298      	uxth	r0, r3
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	b299      	uxth	r1, r3
 8011b4a:	4b17      	ldr	r3, [pc, #92]	; (8011ba8 <atlasMainMenuBootModes+0xa8>)
 8011b4c:	4a18      	ldr	r2, [pc, #96]	; (8011bb0 <atlasMainMenuBootModes+0xb0>)
 8011b4e:	f7ef ff51 	bl	80019f4 <LCD_PutStr>
		break;
 8011b52:	e023      	b.n	8011b9c <atlasMainMenuBootModes+0x9c>
	case UEFI:
		LCD_PutStr(i, j, ATLAS_MAIN_UEFI_MODE, fnt7x10);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	b298      	uxth	r0, r3
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	b299      	uxth	r1, r3
 8011b5c:	4b12      	ldr	r3, [pc, #72]	; (8011ba8 <atlasMainMenuBootModes+0xa8>)
 8011b5e:	4a15      	ldr	r2, [pc, #84]	; (8011bb4 <atlasMainMenuBootModes+0xb4>)
 8011b60:	f7ef ff48 	bl	80019f4 <LCD_PutStr>
		break;
 8011b64:	e01a      	b.n	8011b9c <atlasMainMenuBootModes+0x9c>
	case EDL:
		LCD_PutStr(i, j, ATLAS_MAIN_EDL_MODE, fnt7x10);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	b298      	uxth	r0, r3
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	b299      	uxth	r1, r3
 8011b6e:	4b0e      	ldr	r3, [pc, #56]	; (8011ba8 <atlasMainMenuBootModes+0xa8>)
 8011b70:	4a11      	ldr	r2, [pc, #68]	; (8011bb8 <atlasMainMenuBootModes+0xb8>)
 8011b72:	f7ef ff3f 	bl	80019f4 <LCD_PutStr>
		break;
 8011b76:	e011      	b.n	8011b9c <atlasMainMenuBootModes+0x9c>
	case MASS_STORAGE:
		LCD_PutStr(i, j, ATLAS_MAIN_MASS_STORAGE_MODE, fnt7x10);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	b298      	uxth	r0, r3
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	b299      	uxth	r1, r3
 8011b80:	4b09      	ldr	r3, [pc, #36]	; (8011ba8 <atlasMainMenuBootModes+0xa8>)
 8011b82:	4a0e      	ldr	r2, [pc, #56]	; (8011bbc <atlasMainMenuBootModes+0xbc>)
 8011b84:	f7ef ff36 	bl	80019f4 <LCD_PutStr>
		break;
 8011b88:	e008      	b.n	8011b9c <atlasMainMenuBootModes+0x9c>
	case RECOVERY:
		LCD_PutStr(i, j, ATLAS_MAIN_RECOVERY_MODE, fnt7x10);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	b298      	uxth	r0, r3
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	b299      	uxth	r1, r3
 8011b92:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <atlasMainMenuBootModes+0xa8>)
 8011b94:	4a0a      	ldr	r2, [pc, #40]	; (8011bc0 <atlasMainMenuBootModes+0xc0>)
 8011b96:	f7ef ff2d 	bl	80019f4 <LCD_PutStr>
		break;
 8011b9a:	bf00      	nop
	}
}
 8011b9c:	bf00      	nop
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	20003360 	.word	0x20003360
 8011ba8:	0801ba50 	.word	0x0801ba50
 8011bac:	0801ab10 	.word	0x0801ab10
 8011bb0:	0801ab14 	.word	0x0801ab14
 8011bb4:	0801ab18 	.word	0x0801ab18
 8011bb8:	0801ab20 	.word	0x0801ab20
 8011bbc:	0801ab24 	.word	0x0801ab24
 8011bc0:	0801ab2c 	.word	0x0801ab2c

08011bc4 <atlasBootMenuBootModes>:
//boot process has been finished.
//Based off of the ATLAS_MODEs defined in the project .h file.

//For new project, adjust name of #defines from Atlas to project name (i.e ATLAS_MAIN --> <ProjectName>_MAIN) and add an additional
//ZION eeprom check in the drawMainMenu method in menu.c
int atlasBootMenuBootModes(int indicator, int previousMenu, int menu, int button){
 8011bc4:	b590      	push	{r4, r7, lr}
 8011bc6:	b08d      	sub	sp, #52	; 0x34
 8011bc8:	af02      	add	r7, sp, #8
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	607a      	str	r2, [r7, #4]
 8011bd0:	603b      	str	r3, [r7, #0]
	int j=45;
 8011bd2:	232d      	movs	r3, #45	; 0x2d
 8011bd4:	627b      	str	r3, [r7, #36]	; 0x24
	int i=5;
 8011bd6:	2305      	movs	r3, #5
 8011bd8:	61fb      	str	r3, [r7, #28]
	int bootModeSeparation = 20;
 8011bda:	2314      	movs	r3, #20
 8011bdc:	61bb      	str	r3, [r7, #24]
	int arrowLocationAdjustment = 17;
 8011bde:	2311      	movs	r3, #17
 8011be0:	617b      	str	r3, [r7, #20]
	int indentAlignment=50;
 8011be2:	2332      	movs	r3, #50	; 0x32
 8011be4:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	b298      	uxth	r0, r3
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	b299      	uxth	r1, r3
 8011bee:	4b89      	ldr	r3, [pc, #548]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011bf0:	4a89      	ldr	r2, [pc, #548]	; (8011e18 <atlasBootMenuBootModes+0x254>)
 8011bf2:	f7ef feff 	bl	80019f4 <LCD_PutStr>
	j+=30;
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf8:	331e      	adds	r3, #30
 8011bfa:	627b      	str	r3, [r7, #36]	; 0x24
	i=42;
 8011bfc:	232a      	movs	r3, #42	; 0x2a
 8011bfe:	61fb      	str	r3, [r7, #28]
	if(bootButtons.bootMode == EDL){
 8011c00:	4b86      	ldr	r3, [pc, #536]	; (8011e1c <atlasBootMenuBootModes+0x258>)
 8011c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c04:	2b03      	cmp	r3, #3
 8011c06:	d13b      	bne.n	8011c80 <atlasBootMenuBootModes+0xbc>
		j=110;
 8011c08:	236e      	movs	r3, #110	; 0x6e
 8011c0a:	627b      	str	r3, [r7, #36]	; 0x24
		i=20;
 8011c0c:	2314      	movs	r3, #20
 8011c0e:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i,j, "DEVICE IN EDL AND CAN'T BE REBOOTED NORMALLY!", fnt7x10);
 8011c10:	69fb      	ldr	r3, [r7, #28]
 8011c12:	b298      	uxth	r0, r3
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	b299      	uxth	r1, r3
 8011c18:	4b7e      	ldr	r3, [pc, #504]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011c1a:	4a81      	ldr	r2, [pc, #516]	; (8011e20 <atlasBootMenuBootModes+0x25c>)
 8011c1c:	f7ef feea 	bl	80019f4 <LCD_PutStr>
 8011c20:	4603      	mov	r3, r0
 8011c22:	461a      	mov	r2, r3
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	4413      	add	r3, r2
 8011c28:	61fb      	str	r3, [r7, #28]
		j+=13;
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	330d      	adds	r3, #13
 8011c2e:	627b      	str	r3, [r7, #36]	; 0x24
		LCD_FillRect(15, j, i + 5, j + 3);
 8011c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c32:	b299      	uxth	r1, r3
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	3305      	adds	r3, #5
 8011c3a:	b29a      	uxth	r2, r3
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	3303      	adds	r3, #3
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	200f      	movs	r0, #15
 8011c46:	f7ef fb87 	bl	8001358 <LCD_FillRect>
		j+=24;
 8011c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4c:	3318      	adds	r3, #24
 8011c4e:	627b      	str	r3, [r7, #36]	; 0x24
		i=108;
 8011c50:	236c      	movs	r3, #108	; 0x6c
 8011c52:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i,j, "Flip Power Switch to", fnt7x10);
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	b298      	uxth	r0, r3
 8011c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5a:	b299      	uxth	r1, r3
 8011c5c:	4b6d      	ldr	r3, [pc, #436]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011c5e:	4a71      	ldr	r2, [pc, #452]	; (8011e24 <atlasBootMenuBootModes+0x260>)
 8011c60:	f7ef fec8 	bl	80019f4 <LCD_PutStr>
		j+=14;
 8011c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c66:	330e      	adds	r3, #14
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24
		i=90;
 8011c6a:	235a      	movs	r3, #90	; 0x5a
 8011c6c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i,j, "Enable Standard Boot Modes!", fnt7x10);
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	b298      	uxth	r0, r3
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	b299      	uxth	r1, r3
 8011c76:	4b67      	ldr	r3, [pc, #412]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011c78:	4a6b      	ldr	r2, [pc, #428]	; (8011e28 <atlasBootMenuBootModes+0x264>)
 8011c7a:	f7ef febb 	bl	80019f4 <LCD_PutStr>
 8011c7e:	e2a3      	b.n	80121c8 <atlasBootMenuBootModes+0x604>

	}
	else{
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	b298      	uxth	r0, r3
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	b299      	uxth	r1, r3
 8011c88:	4b62      	ldr	r3, [pc, #392]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011c8a:	4a68      	ldr	r2, [pc, #416]	; (8011e2c <atlasBootMenuBootModes+0x268>)
 8011c8c:	f7ef feb2 	bl	80019f4 <LCD_PutStr>
		i=indentAlignment;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	61fb      	str	r3, [r7, #28]
		j+=bootModeSeparation;
 8011c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c96:	69bb      	ldr	r3, [r7, #24]
 8011c98:	4413      	add	r3, r2
 8011c9a:	627b      	str	r3, [r7, #36]	; 0x24
		LCD_PutStr(i, j, ATLAS_BOOT_STD_MODE, fnt7x10);
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	b298      	uxth	r0, r3
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	b299      	uxth	r1, r3
 8011ca4:	4b5b      	ldr	r3, [pc, #364]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011ca6:	4a62      	ldr	r2, [pc, #392]	; (8011e30 <atlasBootMenuBootModes+0x26c>)
 8011ca8:	f7ef fea4 	bl	80019f4 <LCD_PutStr>
		j+=bootModeSeparation;
 8011cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	627b      	str	r3, [r7, #36]	; 0x24
		LCD_PutStr(i, j, ATLAS_BOOT_EDL_MODE, fnt7x10);
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	b298      	uxth	r0, r3
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cba:	b299      	uxth	r1, r3
 8011cbc:	4b55      	ldr	r3, [pc, #340]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011cbe:	4a5d      	ldr	r2, [pc, #372]	; (8011e34 <atlasBootMenuBootModes+0x270>)
 8011cc0:	f7ef fe98 	bl	80019f4 <LCD_PutStr>
		j+=bootModeSeparation;
 8011cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	4413      	add	r3, r2
 8011cca:	627b      	str	r3, [r7, #36]	; 0x24
		LCD_PutStr(i, j, ATLAS_BOOT_RECOVERY_MODE, fnt7x10);
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	b298      	uxth	r0, r3
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	b299      	uxth	r1, r3
 8011cd4:	4b4f      	ldr	r3, [pc, #316]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011cd6:	4a58      	ldr	r2, [pc, #352]	; (8011e38 <atlasBootMenuBootModes+0x274>)
 8011cd8:	f7ef fe8c 	bl	80019f4 <LCD_PutStr>
		j+=bootModeSeparation;
 8011cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	627b      	str	r3, [r7, #36]	; 0x24
		LCD_PutStr(i, j, ATLAS_BOOT_MASS_STORAGE_MODE, fnt7x10);
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	b298      	uxth	r0, r3
 8011ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cea:	b299      	uxth	r1, r3
 8011cec:	4b49      	ldr	r3, [pc, #292]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011cee:	4a53      	ldr	r2, [pc, #332]	; (8011e3c <atlasBootMenuBootModes+0x278>)
 8011cf0:	f7ef fe80 	bl	80019f4 <LCD_PutStr>
		j+=bootModeSeparation;
 8011cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	627b      	str	r3, [r7, #36]	; 0x24
		LCD_PutStr(i, j, ATLAS_BOOT_UEFI_MODE, fnt7x10);
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	b298      	uxth	r0, r3
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	b299      	uxth	r1, r3
 8011d04:	4b43      	ldr	r3, [pc, #268]	; (8011e14 <atlasBootMenuBootModes+0x250>)
 8011d06:	4a4e      	ldr	r2, [pc, #312]	; (8011e40 <atlasBootMenuBootModes+0x27c>)
 8011d08:	f7ef fe74 	bl	80019f4 <LCD_PutStr>
		i-= arrowLocationAdjustment;
 8011d0c:	69fa      	ldr	r2, [r7, #28]
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	61fb      	str	r3, [r7, #28]
		if(setIndicator==0){
 8011d14:	4b4b      	ldr	r3, [pc, #300]	; (8011e44 <atlasBootMenuBootModes+0x280>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f040 8138 	bne.w	8011f8e <atlasBootMenuBootModes+0x3ca>
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	3b01      	subs	r3, #1
 8011d22:	2b04      	cmp	r3, #4
 8011d24:	f200 8130 	bhi.w	8011f88 <atlasBootMenuBootModes+0x3c4>
 8011d28:	a201      	add	r2, pc, #4	; (adr r2, 8011d30 <atlasBootMenuBootModes+0x16c>)
 8011d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2e:	bf00      	nop
 8011d30:	08011d45 	.word	0x08011d45
 8011d34:	08011dad 	.word	0x08011dad
 8011d38:	08011e51 	.word	0x08011e51
 8011d3c:	08011eb9 	.word	0x08011eb9
 8011d40:	08011f21 	.word	0x08011f21
			switch(indicator){
			case FIRST:
			{
				j=95;
 8011d44:	235f      	movs	r3, #95	; 0x5f
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
				if((button == SEL) & (previousMenu == menu)){
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2b04      	cmp	r3, #4
 8011d4c:	bf0c      	ite	eq
 8011d4e:	2301      	moveq	r3, #1
 8011d50:	2300      	movne	r3, #0
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	68b9      	ldr	r1, [r7, #8]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	4299      	cmp	r1, r3
 8011d5a:	bf0c      	ite	eq
 8011d5c:	2301      	moveq	r3, #1
 8011d5e:	2300      	movne	r3, #0
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	4013      	ands	r3, r2
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 821b 	beq.w	80121a2 <atlasBootMenuBootModes+0x5de>
					i=140;
 8011d6c:	238c      	movs	r3, #140	; 0x8c
 8011d6e:	61fb      	str	r3, [r7, #28]
					drawUpDownArrow(i, j+5, 3, 3);
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	b298      	uxth	r0, r3
 8011d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	3305      	adds	r3, #5
 8011d7a:	b299      	uxth	r1, r3
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	2203      	movs	r2, #3
 8011d80:	f7ef ff88 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 8011d84:	4b25      	ldr	r3, [pc, #148]	; (8011e1c <atlasBootMenuBootModes+0x258>)
 8011d86:	2201      	movs	r2, #1
 8011d88:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 8011d8a:	4b24      	ldr	r3, [pc, #144]	; (8011e1c <atlasBootMenuBootModes+0x258>)
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 8011d90:	4b2c      	ldr	r3, [pc, #176]	; (8011e44 <atlasBootMenuBootModes+0x280>)
 8011d92:	2201      	movs	r2, #1
 8011d94:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8011d96:	f7f6 f805 	bl	8007da4 <HAL_GetTick>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	4a2a      	ldr	r2, [pc, #168]	; (8011e48 <atlasBootMenuBootModes+0x284>)
 8011d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8011da2:	099b      	lsrs	r3, r3, #6
 8011da4:	461a      	mov	r2, r3
 8011da6:	4b29      	ldr	r3, [pc, #164]	; (8011e4c <atlasBootMenuBootModes+0x288>)
 8011da8:	601a      	str	r2, [r3, #0]
				}

				break;
 8011daa:	e1fa      	b.n	80121a2 <atlasBootMenuBootModes+0x5de>
			}
			case SECOND:
			{
				j=115;
 8011dac:	2373      	movs	r3, #115	; 0x73
 8011dae:	627b      	str	r3, [r7, #36]	; 0x24
				if((button == SEL) & (previousMenu == menu)){
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	bf0c      	ite	eq
 8011db6:	2301      	moveq	r3, #1
 8011db8:	2300      	movne	r3, #0
 8011dba:	b2da      	uxtb	r2, r3
 8011dbc:	68b9      	ldr	r1, [r7, #8]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4299      	cmp	r1, r3
 8011dc2:	bf0c      	ite	eq
 8011dc4:	2301      	moveq	r3, #1
 8011dc6:	2300      	movne	r3, #0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	4013      	ands	r3, r2
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 81e9 	beq.w	80121a6 <atlasBootMenuBootModes+0x5e2>
					i=220;
 8011dd4:	23dc      	movs	r3, #220	; 0xdc
 8011dd6:	61fb      	str	r3, [r7, #28]
					drawUpDownArrow(i, j+5, 3, 3);
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	b298      	uxth	r0, r3
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	3305      	adds	r3, #5
 8011de2:	b299      	uxth	r1, r3
 8011de4:	2303      	movs	r3, #3
 8011de6:	2203      	movs	r2, #3
 8011de8:	f7ef ff54 	bl	8001c94 <drawUpDownArrow>
					bootButtons.edl_sw=1;
 8011dec:	4b0b      	ldr	r3, [pc, #44]	; (8011e1c <atlasBootMenuBootModes+0x258>)
 8011dee:	2201      	movs	r2, #1
 8011df0:	61da      	str	r2, [r3, #28]
					bootButtons.bootModeSet=1;
 8011df2:	4b0a      	ldr	r3, [pc, #40]	; (8011e1c <atlasBootMenuBootModes+0x258>)
 8011df4:	2201      	movs	r2, #1
 8011df6:	601a      	str	r2, [r3, #0]
					setIndicator=2;
 8011df8:	4b12      	ldr	r3, [pc, #72]	; (8011e44 <atlasBootMenuBootModes+0x280>)
 8011dfa:	2202      	movs	r2, #2
 8011dfc:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8011dfe:	f7f5 ffd1 	bl	8007da4 <HAL_GetTick>
 8011e02:	4603      	mov	r3, r0
 8011e04:	4a10      	ldr	r2, [pc, #64]	; (8011e48 <atlasBootMenuBootModes+0x284>)
 8011e06:	fba2 2303 	umull	r2, r3, r2, r3
 8011e0a:	099b      	lsrs	r3, r3, #6
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	4b0f      	ldr	r3, [pc, #60]	; (8011e4c <atlasBootMenuBootModes+0x288>)
 8011e10:	601a      	str	r2, [r3, #0]
				}

				break;
 8011e12:	e1c8      	b.n	80121a6 <atlasBootMenuBootModes+0x5e2>
 8011e14:	0801ba50 	.word	0x0801ba50
 8011e18:	0801ab30 	.word	0x0801ab30
 8011e1c:	20003360 	.word	0x20003360
 8011e20:	0801ab60 	.word	0x0801ab60
 8011e24:	0801ab90 	.word	0x0801ab90
 8011e28:	0801aba8 	.word	0x0801aba8
 8011e2c:	0801abc4 	.word	0x0801abc4
 8011e30:	0801abe0 	.word	0x0801abe0
 8011e34:	0801abec 	.word	0x0801abec
 8011e38:	0801ac00 	.word	0x0801ac00
 8011e3c:	0801ac0c 	.word	0x0801ac0c
 8011e40:	0801ab18 	.word	0x0801ab18
 8011e44:	2000342c 	.word	0x2000342c
 8011e48:	10624dd3 	.word	0x10624dd3
 8011e4c:	20028b54 	.word	0x20028b54
			}
			case THIRD:
			{
				j=135;
 8011e50:	2387      	movs	r3, #135	; 0x87
 8011e52:	627b      	str	r3, [r7, #36]	; 0x24
				if((button == SEL) & (previousMenu == menu)){
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2b04      	cmp	r3, #4
 8011e58:	bf0c      	ite	eq
 8011e5a:	2301      	moveq	r3, #1
 8011e5c:	2300      	movne	r3, #0
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	68b9      	ldr	r1, [r7, #8]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	4299      	cmp	r1, r3
 8011e66:	bf0c      	ite	eq
 8011e68:	2301      	moveq	r3, #1
 8011e6a:	2300      	movne	r3, #0
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	4013      	ands	r3, r2
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f000 8199 	beq.w	80121aa <atlasBootMenuBootModes+0x5e6>
					i=130;
 8011e78:	2382      	movs	r3, #130	; 0x82
 8011e7a:	61fb      	str	r3, [r7, #28]
					drawUpDownArrow(i, j+5, 3, 3);
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	b298      	uxth	r0, r3
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	3305      	adds	r3, #5
 8011e86:	b299      	uxth	r1, r3
 8011e88:	2303      	movs	r3, #3
 8011e8a:	2203      	movs	r2, #3
 8011e8c:	f7ef ff02 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn1=1;
 8011e90:	4b9e      	ldr	r3, [pc, #632]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011e92:	2201      	movs	r2, #1
 8011e94:	609a      	str	r2, [r3, #8]
					bootButtons.bootModeSet=1;
 8011e96:	4b9d      	ldr	r3, [pc, #628]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011e98:	2201      	movs	r2, #1
 8011e9a:	601a      	str	r2, [r3, #0]
					setIndicator=3;
 8011e9c:	4b9c      	ldr	r3, [pc, #624]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8011e9e:	2203      	movs	r2, #3
 8011ea0:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8011ea2:	f7f5 ff7f 	bl	8007da4 <HAL_GetTick>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	4a9a      	ldr	r2, [pc, #616]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8011eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8011eae:	099b      	lsrs	r3, r3, #6
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	4b99      	ldr	r3, [pc, #612]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8011eb4:	601a      	str	r2, [r3, #0]
				}

				break;
 8011eb6:	e178      	b.n	80121aa <atlasBootMenuBootModes+0x5e6>
			}
			case FOURTH:
			{
				j=155;
 8011eb8:	239b      	movs	r3, #155	; 0x9b
 8011eba:	627b      	str	r3, [r7, #36]	; 0x24
				if((button == SEL) & (previousMenu == menu)){
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	2b04      	cmp	r3, #4
 8011ec0:	bf0c      	ite	eq
 8011ec2:	2301      	moveq	r3, #1
 8011ec4:	2300      	movne	r3, #0
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	68b9      	ldr	r1, [r7, #8]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4299      	cmp	r1, r3
 8011ece:	bf0c      	ite	eq
 8011ed0:	2301      	moveq	r3, #1
 8011ed2:	2300      	movne	r3, #0
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	4013      	ands	r3, r2
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f000 8167 	beq.w	80121ae <atlasBootMenuBootModes+0x5ea>
					i=160;
 8011ee0:	23a0      	movs	r3, #160	; 0xa0
 8011ee2:	61fb      	str	r3, [r7, #28]
					drawUpDownArrow(i, j+5, 3, 3);
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	b298      	uxth	r0, r3
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	3305      	adds	r3, #5
 8011eee:	b299      	uxth	r1, r3
 8011ef0:	2303      	movs	r3, #3
 8011ef2:	2203      	movs	r2, #3
 8011ef4:	f7ef fece 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn2=1;
 8011ef8:	4b84      	ldr	r3, [pc, #528]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011efa:	2201      	movs	r2, #1
 8011efc:	60da      	str	r2, [r3, #12]
					bootButtons.bootModeSet=1;
 8011efe:	4b83      	ldr	r3, [pc, #524]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011f00:	2201      	movs	r2, #1
 8011f02:	601a      	str	r2, [r3, #0]
					setIndicator=4;
 8011f04:	4b82      	ldr	r3, [pc, #520]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8011f06:	2204      	movs	r2, #4
 8011f08:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8011f0a:	f7f5 ff4b 	bl	8007da4 <HAL_GetTick>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	4a80      	ldr	r2, [pc, #512]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8011f12:	fba2 2303 	umull	r2, r3, r2, r3
 8011f16:	099b      	lsrs	r3, r3, #6
 8011f18:	461a      	mov	r2, r3
 8011f1a:	4b7f      	ldr	r3, [pc, #508]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8011f1c:	601a      	str	r2, [r3, #0]
				}

				break;
 8011f1e:	e146      	b.n	80121ae <atlasBootMenuBootModes+0x5ea>
			}
			case FIFTH:
			{
				j=175;
 8011f20:	23af      	movs	r3, #175	; 0xaf
 8011f22:	627b      	str	r3, [r7, #36]	; 0x24
				if((button == SEL) & (previousMenu == menu)){
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	2b04      	cmp	r3, #4
 8011f28:	bf0c      	ite	eq
 8011f2a:	2301      	moveq	r3, #1
 8011f2c:	2300      	movne	r3, #0
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	68b9      	ldr	r1, [r7, #8]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4299      	cmp	r1, r3
 8011f36:	bf0c      	ite	eq
 8011f38:	2301      	moveq	r3, #1
 8011f3a:	2300      	movne	r3, #0
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	4013      	ands	r3, r2
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 8135 	beq.w	80121b2 <atlasBootMenuBootModes+0x5ee>
					i=100;
 8011f48:	2364      	movs	r3, #100	; 0x64
 8011f4a:	61fb      	str	r3, [r7, #28]
					drawUpDownArrow(i, j+5, 3, 3);
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	b298      	uxth	r0, r3
 8011f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	3305      	adds	r3, #5
 8011f56:	b299      	uxth	r1, r3
 8011f58:	2303      	movs	r3, #3
 8011f5a:	2203      	movs	r2, #3
 8011f5c:	f7ef fe9a 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn3=1;
 8011f60:	4b6a      	ldr	r3, [pc, #424]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011f62:	2201      	movs	r2, #1
 8011f64:	611a      	str	r2, [r3, #16]
					bootButtons.bootModeSet=1;
 8011f66:	4b69      	ldr	r3, [pc, #420]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011f68:	2201      	movs	r2, #1
 8011f6a:	601a      	str	r2, [r3, #0]
					setIndicator=5;
 8011f6c:	4b68      	ldr	r3, [pc, #416]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8011f6e:	2205      	movs	r2, #5
 8011f70:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8011f72:	f7f5 ff17 	bl	8007da4 <HAL_GetTick>
 8011f76:	4603      	mov	r3, r0
 8011f78:	4a66      	ldr	r2, [pc, #408]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8011f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f7e:	099b      	lsrs	r3, r3, #6
 8011f80:	461a      	mov	r2, r3
 8011f82:	4b65      	ldr	r3, [pc, #404]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8011f84:	601a      	str	r2, [r3, #0]
				}

				break;
 8011f86:	e114      	b.n	80121b2 <atlasBootMenuBootModes+0x5ee>
			}
			default:
			{
				j=95;
 8011f88:	235f      	movs	r3, #95	; 0x5f
 8011f8a:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8011f8c:	e11c      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
			}
			}
		}

		else{
			i = 230;
 8011f8e:	23e6      	movs	r3, #230	; 0xe6
 8011f90:	61fb      	str	r3, [r7, #28]
			j = 120;
 8011f92:	2378      	movs	r3, #120	; 0x78
 8011f94:	627b      	str	r3, [r7, #36]	; 0x24
			int timeLeft=0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	623b      	str	r3, [r7, #32]
			//add a small countdown so that people don't get too bored. The times below are captured experimentally based off TRIDENT
			//booting to OS is simplier/quicker as we don't need to hold other buttons until the system recognizes what happened.
			if(bootButtons.bootMode==0){
 8011f9a:	4b5c      	ldr	r3, [pc, #368]	; (801210c <atlasBootMenuBootModes+0x548>)
 8011f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d11f      	bne.n	8011fe2 <atlasBootMenuBootModes+0x41e>
				if(setIndicator==FIRST){
 8011fa2:	4b5b      	ldr	r3, [pc, #364]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d10d      	bne.n	8011fc6 <atlasBootMenuBootModes+0x402>
					timeLeft = (timeNow+3)- (HAL_GetTick()/1000);
 8011faa:	4b5b      	ldr	r3, [pc, #364]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	461c      	mov	r4, r3
 8011fb0:	f7f5 fef8 	bl	8007da4 <HAL_GetTick>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	4a57      	ldr	r2, [pc, #348]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8011fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8011fbc:	099b      	lsrs	r3, r3, #6
 8011fbe:	1ae3      	subs	r3, r4, r3
 8011fc0:	3303      	adds	r3, #3
 8011fc2:	623b      	str	r3, [r7, #32]
 8011fc4:	e02c      	b.n	8012020 <atlasBootMenuBootModes+0x45c>
				}
				else{
					timeLeft = (timeNow+6)- (HAL_GetTick()/1000);
 8011fc6:	4b54      	ldr	r3, [pc, #336]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	461c      	mov	r4, r3
 8011fcc:	f7f5 feea 	bl	8007da4 <HAL_GetTick>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	4a50      	ldr	r2, [pc, #320]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8011fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8011fd8:	099b      	lsrs	r3, r3, #6
 8011fda:	1ae3      	subs	r3, r4, r3
 8011fdc:	3306      	adds	r3, #6
 8011fde:	623b      	str	r3, [r7, #32]
 8011fe0:	e01e      	b.n	8012020 <atlasBootMenuBootModes+0x45c>
				}
			}
			else{
				if(setIndicator==FIRST){
 8011fe2:	4b4b      	ldr	r3, [pc, #300]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d10d      	bne.n	8012006 <atlasBootMenuBootModes+0x442>
					timeLeft = (timeNow+15)- (HAL_GetTick()/1000);
 8011fea:	4b4b      	ldr	r3, [pc, #300]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	461c      	mov	r4, r3
 8011ff0:	f7f5 fed8 	bl	8007da4 <HAL_GetTick>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	4a47      	ldr	r2, [pc, #284]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8011ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8011ffc:	099b      	lsrs	r3, r3, #6
 8011ffe:	1ae3      	subs	r3, r4, r3
 8012000:	330f      	adds	r3, #15
 8012002:	623b      	str	r3, [r7, #32]
 8012004:	e00c      	b.n	8012020 <atlasBootMenuBootModes+0x45c>
				}
				else{
					timeLeft = (timeNow+19)- (HAL_GetTick()/1000);
 8012006:	4b44      	ldr	r3, [pc, #272]	; (8012118 <atlasBootMenuBootModes+0x554>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	461c      	mov	r4, r3
 801200c:	f7f5 feca 	bl	8007da4 <HAL_GetTick>
 8012010:	4603      	mov	r3, r0
 8012012:	4a40      	ldr	r2, [pc, #256]	; (8012114 <atlasBootMenuBootModes+0x550>)
 8012014:	fba2 2303 	umull	r2, r3, r2, r3
 8012018:	099b      	lsrs	r3, r3, #6
 801201a:	1ae3      	subs	r3, r4, r3
 801201c:	3313      	adds	r3, #19
 801201e:	623b      	str	r3, [r7, #32]
				}
			}
			i+=LCD_PutIntF(i, j, timeLeft, 0, fnt_dig_big);;
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	b298      	uxth	r0, r3
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012026:	b299      	uxth	r1, r3
 8012028:	4b3c      	ldr	r3, [pc, #240]	; (801211c <atlasBootMenuBootModes+0x558>)
 801202a:	9300      	str	r3, [sp, #0]
 801202c:	2300      	movs	r3, #0
 801202e:	6a3a      	ldr	r2, [r7, #32]
 8012030:	f7ef fd7e 	bl	8001b30 <LCD_PutIntF>
 8012034:	4603      	mov	r3, r0
 8012036:	461a      	mov	r2, r3
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	4413      	add	r3, r2
 801203c:	61fb      	str	r3, [r7, #28]
			LCD_PutStr(i, j, " SECS LEFT", fnt7x10);
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	b298      	uxth	r0, r3
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	b299      	uxth	r1, r3
 8012046:	4b36      	ldr	r3, [pc, #216]	; (8012120 <atlasBootMenuBootModes+0x55c>)
 8012048:	4a36      	ldr	r2, [pc, #216]	; (8012124 <atlasBootMenuBootModes+0x560>)
 801204a:	f7ef fcd3 	bl	80019f4 <LCD_PutStr>
			switch(setIndicator){
 801204e:	4b30      	ldr	r3, [pc, #192]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	3b01      	subs	r3, #1
 8012054:	2b04      	cmp	r3, #4
 8012056:	f200 8099 	bhi.w	801218c <atlasBootMenuBootModes+0x5c8>
 801205a:	a201      	add	r2, pc, #4	; (adr r2, 8012060 <atlasBootMenuBootModes+0x49c>)
 801205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012060:	08012075 	.word	0x08012075
 8012064:	080120a9 	.word	0x080120a9
 8012068:	080120db 	.word	0x080120db
 801206c:	08012129 	.word	0x08012129
 8012070:	0801215b 	.word	0x0801215b
			//draw an arrow pointing at the boot option called until the modeClear flag is set by the bootButtons task.
			case FIRST:
			{
				j=95;
 8012074:	235f      	movs	r3, #95	; 0x5f
 8012076:	627b      	str	r3, [r7, #36]	; 0x24
				i=140;
 8012078:	238c      	movs	r3, #140	; 0x8c
 801207a:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	b298      	uxth	r0, r3
 8012080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012082:	b29b      	uxth	r3, r3
 8012084:	3305      	adds	r3, #5
 8012086:	b299      	uxth	r1, r3
 8012088:	2303      	movs	r3, #3
 801208a:	2203      	movs	r2, #3
 801208c:	f7ef fe02 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 8012090:	4b1e      	ldr	r3, [pc, #120]	; (801210c <atlasBootMenuBootModes+0x548>)
 8012092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012094:	2b00      	cmp	r3, #0
 8012096:	f000 808e 	beq.w	80121b6 <atlasBootMenuBootModes+0x5f2>
					setIndicator=0;
 801209a:	4b1d      	ldr	r3, [pc, #116]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 801209c:	2200      	movs	r2, #0
 801209e:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 80120a0:	4b1a      	ldr	r3, [pc, #104]	; (801210c <atlasBootMenuBootModes+0x548>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 80120a6:	e086      	b.n	80121b6 <atlasBootMenuBootModes+0x5f2>
			}
			case SECOND:
			{
				j=115;
 80120a8:	2373      	movs	r3, #115	; 0x73
 80120aa:	627b      	str	r3, [r7, #36]	; 0x24
				i=220;
 80120ac:	23dc      	movs	r3, #220	; 0xdc
 80120ae:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	b298      	uxth	r0, r3
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	3305      	adds	r3, #5
 80120ba:	b299      	uxth	r1, r3
 80120bc:	2303      	movs	r3, #3
 80120be:	2203      	movs	r2, #3
 80120c0:	f7ef fde8 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 80120c4:	4b11      	ldr	r3, [pc, #68]	; (801210c <atlasBootMenuBootModes+0x548>)
 80120c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d076      	beq.n	80121ba <atlasBootMenuBootModes+0x5f6>
					setIndicator=0;
 80120cc:	4b10      	ldr	r3, [pc, #64]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 80120d2:	4b0e      	ldr	r3, [pc, #56]	; (801210c <atlasBootMenuBootModes+0x548>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 80120d8:	e06f      	b.n	80121ba <atlasBootMenuBootModes+0x5f6>
			}
			case THIRD:
			{
				j=135;
 80120da:	2387      	movs	r3, #135	; 0x87
 80120dc:	627b      	str	r3, [r7, #36]	; 0x24
				i=130;
 80120de:	2382      	movs	r3, #130	; 0x82
 80120e0:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	b298      	uxth	r0, r3
 80120e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	3305      	adds	r3, #5
 80120ec:	b299      	uxth	r1, r3
 80120ee:	2303      	movs	r3, #3
 80120f0:	2203      	movs	r2, #3
 80120f2:	f7ef fdcf 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 80120f6:	4b05      	ldr	r3, [pc, #20]	; (801210c <atlasBootMenuBootModes+0x548>)
 80120f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d05f      	beq.n	80121be <atlasBootMenuBootModes+0x5fa>
					setIndicator=0;
 80120fe:	4b04      	ldr	r3, [pc, #16]	; (8012110 <atlasBootMenuBootModes+0x54c>)
 8012100:	2200      	movs	r2, #0
 8012102:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 8012104:	4b01      	ldr	r3, [pc, #4]	; (801210c <atlasBootMenuBootModes+0x548>)
 8012106:	2200      	movs	r2, #0
 8012108:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 801210a:	e058      	b.n	80121be <atlasBootMenuBootModes+0x5fa>
 801210c:	20003360 	.word	0x20003360
 8012110:	2000342c 	.word	0x2000342c
 8012114:	10624dd3 	.word	0x10624dd3
 8012118:	20028b54 	.word	0x20028b54
 801211c:	0801be10 	.word	0x0801be10
 8012120:	0801ba50 	.word	0x0801ba50
 8012124:	0801ac1c 	.word	0x0801ac1c
			}
			case FOURTH:
			{
				j=155;
 8012128:	239b      	movs	r3, #155	; 0x9b
 801212a:	627b      	str	r3, [r7, #36]	; 0x24
				i=160;
 801212c:	23a0      	movs	r3, #160	; 0xa0
 801212e:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	b298      	uxth	r0, r3
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012136:	b29b      	uxth	r3, r3
 8012138:	3305      	adds	r3, #5
 801213a:	b299      	uxth	r1, r3
 801213c:	2303      	movs	r3, #3
 801213e:	2203      	movs	r2, #3
 8012140:	f7ef fda8 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 8012144:	4b23      	ldr	r3, [pc, #140]	; (80121d4 <atlasBootMenuBootModes+0x610>)
 8012146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012148:	2b00      	cmp	r3, #0
 801214a:	d03a      	beq.n	80121c2 <atlasBootMenuBootModes+0x5fe>
					setIndicator=0;
 801214c:	4b22      	ldr	r3, [pc, #136]	; (80121d8 <atlasBootMenuBootModes+0x614>)
 801214e:	2200      	movs	r2, #0
 8012150:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 8012152:	4b20      	ldr	r3, [pc, #128]	; (80121d4 <atlasBootMenuBootModes+0x610>)
 8012154:	2200      	movs	r2, #0
 8012156:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 8012158:	e033      	b.n	80121c2 <atlasBootMenuBootModes+0x5fe>
			}
			case FIFTH:
			{
				j=175;
 801215a:	23af      	movs	r3, #175	; 0xaf
 801215c:	627b      	str	r3, [r7, #36]	; 0x24
				i=100;
 801215e:	2364      	movs	r3, #100	; 0x64
 8012160:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	b298      	uxth	r0, r3
 8012166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012168:	b29b      	uxth	r3, r3
 801216a:	3305      	adds	r3, #5
 801216c:	b299      	uxth	r1, r3
 801216e:	2303      	movs	r3, #3
 8012170:	2203      	movs	r2, #3
 8012172:	f7ef fd8f 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 8012176:	4b17      	ldr	r3, [pc, #92]	; (80121d4 <atlasBootMenuBootModes+0x610>)
 8012178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801217a:	2b00      	cmp	r3, #0
 801217c:	d023      	beq.n	80121c6 <atlasBootMenuBootModes+0x602>
					setIndicator=0;
 801217e:	4b16      	ldr	r3, [pc, #88]	; (80121d8 <atlasBootMenuBootModes+0x614>)
 8012180:	2200      	movs	r2, #0
 8012182:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 8012184:	4b13      	ldr	r3, [pc, #76]	; (80121d4 <atlasBootMenuBootModes+0x610>)
 8012186:	2200      	movs	r2, #0
 8012188:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 801218a:	e01c      	b.n	80121c6 <atlasBootMenuBootModes+0x602>
			}
			default:
			{
				drawUpDownArrow(i, j+5, 3, 3);
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	b298      	uxth	r0, r3
 8012190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012192:	b29b      	uxth	r3, r3
 8012194:	3305      	adds	r3, #5
 8012196:	b299      	uxth	r1, r3
 8012198:	2303      	movs	r3, #3
 801219a:	2203      	movs	r2, #3
 801219c:	f7ef fd7a 	bl	8001c94 <drawUpDownArrow>
				break;
 80121a0:	e012      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121a2:	bf00      	nop
 80121a4:	e010      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121a6:	bf00      	nop
 80121a8:	e00e      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121aa:	bf00      	nop
 80121ac:	e00c      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121ae:	bf00      	nop
 80121b0:	e00a      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121b2:	bf00      	nop
 80121b4:	e008      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121b6:	bf00      	nop
 80121b8:	e006      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121ba:	bf00      	nop
 80121bc:	e004      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121be:	bf00      	nop
 80121c0:	e002      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121c2:	bf00      	nop
 80121c4:	e000      	b.n	80121c8 <atlasBootMenuBootModes+0x604>
				break;
 80121c6:	bf00      	nop
			}
			}
		}
	}
	return j;
 80121c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	372c      	adds	r7, #44	; 0x2c
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd90      	pop	{r4, r7, pc}
 80121d2:	bf00      	nop
 80121d4:	20003360 	.word	0x20003360
 80121d8:	2000342c 	.word	0x2000342c

080121dc <atlasSystemInfoSoc>:


//draw the name for the project soc board and its fab version. Used for the System Info page. Uses the ATLAS_SOC_BOARD definiton in the project
//.h file.
void atlasSystemInfoSoc(int i, int j){
 80121dc:	b580      	push	{r7, lr}
 80121de:	b082      	sub	sp, #8
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
	i+=LCD_PutStr(i, j, ATLAS_SOC_BOARD, fnt7x10);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	b298      	uxth	r0, r3
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	b299      	uxth	r1, r3
 80121ee:	4b25      	ldr	r3, [pc, #148]	; (8012284 <atlasSystemInfoSoc+0xa8>)
 80121f0:	4a25      	ldr	r2, [pc, #148]	; (8012288 <atlasSystemInfoSoc+0xac>)
 80121f2:	f7ef fbff 	bl	80019f4 <LCD_PutStr>
 80121f6:	4603      	mov	r3, r0
 80121f8:	461a      	mov	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4413      	add	r3, r2
 80121fe:	607b      	str	r3, [r7, #4]
	switch(ZION.SOC_BoardFab){
 8012200:	4b22      	ldr	r3, [pc, #136]	; (801228c <atlasSystemInfoSoc+0xb0>)
 8012202:	699b      	ldr	r3, [r3, #24]
 8012204:	3b01      	subs	r3, #1
 8012206:	2b03      	cmp	r3, #3
 8012208:	d82e      	bhi.n	8012268 <atlasSystemInfoSoc+0x8c>
 801220a:	a201      	add	r2, pc, #4	; (adr r2, 8012210 <atlasSystemInfoSoc+0x34>)
 801220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012210:	08012221 	.word	0x08012221
 8012214:	08012233 	.word	0x08012233
 8012218:	08012245 	.word	0x08012245
 801221c:	08012257 	.word	0x08012257
	case 1:{
		LCD_PutStr(i, j, "FAB A", fnt7x10);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	b298      	uxth	r0, r3
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	b299      	uxth	r1, r3
 8012228:	4b16      	ldr	r3, [pc, #88]	; (8012284 <atlasSystemInfoSoc+0xa8>)
 801222a:	4a19      	ldr	r2, [pc, #100]	; (8012290 <atlasSystemInfoSoc+0xb4>)
 801222c:	f7ef fbe2 	bl	80019f4 <LCD_PutStr>
		break;
 8012230:	e023      	b.n	801227a <atlasSystemInfoSoc+0x9e>
	}
	case 2:{
		LCD_PutStr(i, j, "FAB B", fnt7x10);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	b298      	uxth	r0, r3
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	b299      	uxth	r1, r3
 801223a:	4b12      	ldr	r3, [pc, #72]	; (8012284 <atlasSystemInfoSoc+0xa8>)
 801223c:	4a15      	ldr	r2, [pc, #84]	; (8012294 <atlasSystemInfoSoc+0xb8>)
 801223e:	f7ef fbd9 	bl	80019f4 <LCD_PutStr>
		break;
 8012242:	e01a      	b.n	801227a <atlasSystemInfoSoc+0x9e>
	}
	case 3:{
		LCD_PutStr(i, j, "FAB C", fnt7x10);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	b298      	uxth	r0, r3
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	b299      	uxth	r1, r3
 801224c:	4b0d      	ldr	r3, [pc, #52]	; (8012284 <atlasSystemInfoSoc+0xa8>)
 801224e:	4a12      	ldr	r2, [pc, #72]	; (8012298 <atlasSystemInfoSoc+0xbc>)
 8012250:	f7ef fbd0 	bl	80019f4 <LCD_PutStr>
		break;
 8012254:	e011      	b.n	801227a <atlasSystemInfoSoc+0x9e>
	}
	case 4:{
		LCD_PutStr(i, j, "FAB D", fnt7x10);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	b298      	uxth	r0, r3
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	b299      	uxth	r1, r3
 801225e:	4b09      	ldr	r3, [pc, #36]	; (8012284 <atlasSystemInfoSoc+0xa8>)
 8012260:	4a0e      	ldr	r2, [pc, #56]	; (801229c <atlasSystemInfoSoc+0xc0>)
 8012262:	f7ef fbc7 	bl	80019f4 <LCD_PutStr>
		break;
 8012266:	e008      	b.n	801227a <atlasSystemInfoSoc+0x9e>
	}
	default:{
		LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	b298      	uxth	r0, r3
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	b299      	uxth	r1, r3
 8012270:	4b04      	ldr	r3, [pc, #16]	; (8012284 <atlasSystemInfoSoc+0xa8>)
 8012272:	4a0b      	ldr	r2, [pc, #44]	; (80122a0 <atlasSystemInfoSoc+0xc4>)
 8012274:	f7ef fbbe 	bl	80019f4 <LCD_PutStr>
		break;
 8012278:	bf00      	nop
	}
	}
}
 801227a:	bf00      	nop
 801227c:	3708      	adds	r7, #8
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	0801ba50 	.word	0x0801ba50
 8012288:	0801ac28 	.word	0x0801ac28
 801228c:	20003328 	.word	0x20003328
 8012290:	0801ac34 	.word	0x0801ac34
 8012294:	0801ac3c 	.word	0x0801ac3c
 8012298:	0801ac44 	.word	0x0801ac44
 801229c:	0801ac4c 	.word	0x0801ac4c
 80122a0:	0801ac54 	.word	0x0801ac54

080122a4 <atlasSystemInfoAsic>:

//draw the name for the project asic board and its fab version. Used for the System Info page. Uses the ATLAS_ASIC_BOARD definition in the project
//.h file.
void atlasSystemInfoAsic(int i, int j){
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
	i+=LCD_PutStr(i, j, ATLAS_ASIC_BOARD, fnt7x10);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	b298      	uxth	r0, r3
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	b299      	uxth	r1, r3
 80122b6:	4b25      	ldr	r3, [pc, #148]	; (801234c <atlasSystemInfoAsic+0xa8>)
 80122b8:	4a25      	ldr	r2, [pc, #148]	; (8012350 <atlasSystemInfoAsic+0xac>)
 80122ba:	f7ef fb9b 	bl	80019f4 <LCD_PutStr>
 80122be:	4603      	mov	r3, r0
 80122c0:	461a      	mov	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	4413      	add	r3, r2
 80122c6:	607b      	str	r3, [r7, #4]
	switch(ZION.ASIC_BoardFab){
 80122c8:	4b22      	ldr	r3, [pc, #136]	; (8012354 <atlasSystemInfoAsic+0xb0>)
 80122ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122cc:	3b01      	subs	r3, #1
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d82e      	bhi.n	8012330 <atlasSystemInfoAsic+0x8c>
 80122d2:	a201      	add	r2, pc, #4	; (adr r2, 80122d8 <atlasSystemInfoAsic+0x34>)
 80122d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d8:	080122e9 	.word	0x080122e9
 80122dc:	080122fb 	.word	0x080122fb
 80122e0:	0801230d 	.word	0x0801230d
 80122e4:	0801231f 	.word	0x0801231f
	case 1:{
		LCD_PutStr(i, j, "FAB A", fnt7x10);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	b298      	uxth	r0, r3
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	b299      	uxth	r1, r3
 80122f0:	4b16      	ldr	r3, [pc, #88]	; (801234c <atlasSystemInfoAsic+0xa8>)
 80122f2:	4a19      	ldr	r2, [pc, #100]	; (8012358 <atlasSystemInfoAsic+0xb4>)
 80122f4:	f7ef fb7e 	bl	80019f4 <LCD_PutStr>
		break;
 80122f8:	e023      	b.n	8012342 <atlasSystemInfoAsic+0x9e>
	}
	case 2:{
		LCD_PutStr(i, j, "FAB B", fnt7x10);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	b298      	uxth	r0, r3
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	b299      	uxth	r1, r3
 8012302:	4b12      	ldr	r3, [pc, #72]	; (801234c <atlasSystemInfoAsic+0xa8>)
 8012304:	4a15      	ldr	r2, [pc, #84]	; (801235c <atlasSystemInfoAsic+0xb8>)
 8012306:	f7ef fb75 	bl	80019f4 <LCD_PutStr>
		break;
 801230a:	e01a      	b.n	8012342 <atlasSystemInfoAsic+0x9e>
	}
	case 3:{
		LCD_PutStr(i, j, "FAB C", fnt7x10);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	b298      	uxth	r0, r3
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	b299      	uxth	r1, r3
 8012314:	4b0d      	ldr	r3, [pc, #52]	; (801234c <atlasSystemInfoAsic+0xa8>)
 8012316:	4a12      	ldr	r2, [pc, #72]	; (8012360 <atlasSystemInfoAsic+0xbc>)
 8012318:	f7ef fb6c 	bl	80019f4 <LCD_PutStr>
		break;
 801231c:	e011      	b.n	8012342 <atlasSystemInfoAsic+0x9e>
	}
	case 4:{
		LCD_PutStr(i, j, "FAB D", fnt7x10);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	b298      	uxth	r0, r3
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	b299      	uxth	r1, r3
 8012326:	4b09      	ldr	r3, [pc, #36]	; (801234c <atlasSystemInfoAsic+0xa8>)
 8012328:	4a0e      	ldr	r2, [pc, #56]	; (8012364 <atlasSystemInfoAsic+0xc0>)
 801232a:	f7ef fb63 	bl	80019f4 <LCD_PutStr>
		break;
 801232e:	e008      	b.n	8012342 <atlasSystemInfoAsic+0x9e>
	}
	default:{
		LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	b298      	uxth	r0, r3
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	b299      	uxth	r1, r3
 8012338:	4b04      	ldr	r3, [pc, #16]	; (801234c <atlasSystemInfoAsic+0xa8>)
 801233a:	4a0b      	ldr	r2, [pc, #44]	; (8012368 <atlasSystemInfoAsic+0xc4>)
 801233c:	f7ef fb5a 	bl	80019f4 <LCD_PutStr>
		break;
 8012340:	bf00      	nop
	}
	}
}
 8012342:	bf00      	nop
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	0801ba50 	.word	0x0801ba50
 8012350:	0801ac5c 	.word	0x0801ac5c
 8012354:	20003328 	.word	0x20003328
 8012358:	0801ac34 	.word	0x0801ac34
 801235c:	0801ac3c 	.word	0x0801ac3c
 8012360:	0801ac44 	.word	0x0801ac44
 8012364:	0801ac4c 	.word	0x0801ac4c
 8012368:	0801ac54 	.word	0x0801ac54

0801236c <atlasSystemInfoDisplay>:
//draw the name for the project Display board and its fab version. Used for the System Info page. Uses the ATLAS_DISPLAY_BOARD definition in the project
//.h file.
void atlasSystemInfoDisplay(int i, int j){
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
	i+=LCD_PutStr(i, j, ATLAS_DISPLAY_BOARD, fnt7x10);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	b298      	uxth	r0, r3
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	b299      	uxth	r1, r3
 801237e:	4b25      	ldr	r3, [pc, #148]	; (8012414 <atlasSystemInfoDisplay+0xa8>)
 8012380:	4a25      	ldr	r2, [pc, #148]	; (8012418 <atlasSystemInfoDisplay+0xac>)
 8012382:	f7ef fb37 	bl	80019f4 <LCD_PutStr>
 8012386:	4603      	mov	r3, r0
 8012388:	461a      	mov	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4413      	add	r3, r2
 801238e:	607b      	str	r3, [r7, #4]
	switch(ZION.DISPLAY_BoardFab){
 8012390:	4b22      	ldr	r3, [pc, #136]	; (801241c <atlasSystemInfoDisplay+0xb0>)
 8012392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012394:	3b01      	subs	r3, #1
 8012396:	2b03      	cmp	r3, #3
 8012398:	d82e      	bhi.n	80123f8 <atlasSystemInfoDisplay+0x8c>
 801239a:	a201      	add	r2, pc, #4	; (adr r2, 80123a0 <atlasSystemInfoDisplay+0x34>)
 801239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123a0:	080123b1 	.word	0x080123b1
 80123a4:	080123c3 	.word	0x080123c3
 80123a8:	080123d5 	.word	0x080123d5
 80123ac:	080123e7 	.word	0x080123e7
	case 1:{
		LCD_PutStr(i, j, "FAB A", fnt7x10);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	b298      	uxth	r0, r3
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	b299      	uxth	r1, r3
 80123b8:	4b16      	ldr	r3, [pc, #88]	; (8012414 <atlasSystemInfoDisplay+0xa8>)
 80123ba:	4a19      	ldr	r2, [pc, #100]	; (8012420 <atlasSystemInfoDisplay+0xb4>)
 80123bc:	f7ef fb1a 	bl	80019f4 <LCD_PutStr>
		break;
 80123c0:	e023      	b.n	801240a <atlasSystemInfoDisplay+0x9e>
	}
	case 2:{
		LCD_PutStr(i, j, "FAB B", fnt7x10);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	b298      	uxth	r0, r3
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	b299      	uxth	r1, r3
 80123ca:	4b12      	ldr	r3, [pc, #72]	; (8012414 <atlasSystemInfoDisplay+0xa8>)
 80123cc:	4a15      	ldr	r2, [pc, #84]	; (8012424 <atlasSystemInfoDisplay+0xb8>)
 80123ce:	f7ef fb11 	bl	80019f4 <LCD_PutStr>
		break;
 80123d2:	e01a      	b.n	801240a <atlasSystemInfoDisplay+0x9e>
	}
	case 3:{
		LCD_PutStr(i, j, "FAB C", fnt7x10);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	b298      	uxth	r0, r3
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	b299      	uxth	r1, r3
 80123dc:	4b0d      	ldr	r3, [pc, #52]	; (8012414 <atlasSystemInfoDisplay+0xa8>)
 80123de:	4a12      	ldr	r2, [pc, #72]	; (8012428 <atlasSystemInfoDisplay+0xbc>)
 80123e0:	f7ef fb08 	bl	80019f4 <LCD_PutStr>
		break;
 80123e4:	e011      	b.n	801240a <atlasSystemInfoDisplay+0x9e>
	}
	case 4:{
		LCD_PutStr(i, j, "FAB D", fnt7x10);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	b298      	uxth	r0, r3
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	b299      	uxth	r1, r3
 80123ee:	4b09      	ldr	r3, [pc, #36]	; (8012414 <atlasSystemInfoDisplay+0xa8>)
 80123f0:	4a0e      	ldr	r2, [pc, #56]	; (801242c <atlasSystemInfoDisplay+0xc0>)
 80123f2:	f7ef faff 	bl	80019f4 <LCD_PutStr>
		break;
 80123f6:	e008      	b.n	801240a <atlasSystemInfoDisplay+0x9e>
	}
	default:{
		LCD_PutStr(i, j, "FAB NA", fnt7x10);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	b298      	uxth	r0, r3
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	b299      	uxth	r1, r3
 8012400:	4b04      	ldr	r3, [pc, #16]	; (8012414 <atlasSystemInfoDisplay+0xa8>)
 8012402:	4a0b      	ldr	r2, [pc, #44]	; (8012430 <atlasSystemInfoDisplay+0xc4>)
 8012404:	f7ef faf6 	bl	80019f4 <LCD_PutStr>
		break;
 8012408:	bf00      	nop
	}
	}
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	0801ba50 	.word	0x0801ba50
 8012418:	0801ac64 	.word	0x0801ac64
 801241c:	20003328 	.word	0x20003328
 8012420:	0801ac34 	.word	0x0801ac34
 8012424:	0801ac3c 	.word	0x0801ac3c
 8012428:	0801ac44 	.word	0x0801ac44
 801242c:	0801ac4c 	.word	0x0801ac4c
 8012430:	0801ac54 	.word	0x0801ac54

08012434 <atlasSystemInfoPV>:
//draw the name for the project other board PV and its state of presence. Used for the System Info page. Uses the ATLAS_PV_PRSNT definition in the project
//.h file.
void atlasSystemInfoPV(int i, int j){
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 801243e:	2314      	movs	r3, #20
 8012440:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 8012442:	4b17      	ldr	r3, [pc, #92]	; (80124a0 <atlasSystemInfoPV+0x6c>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	4413      	add	r3, r2
 801244a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "PV: ", fnt7x10);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	b298      	uxth	r0, r3
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	b299      	uxth	r1, r3
 8012454:	4b13      	ldr	r3, [pc, #76]	; (80124a4 <atlasSystemInfoPV+0x70>)
 8012456:	4a14      	ldr	r2, [pc, #80]	; (80124a8 <atlasSystemInfoPV+0x74>)
 8012458:	f7ef facc 	bl	80019f4 <LCD_PutStr>
 801245c:	4603      	mov	r3, r0
 801245e:	461a      	mov	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4413      	add	r3, r2
 8012464:	607b      	str	r3, [r7, #4]
	if(ATLAS_PV_PRSNT){
 8012466:	4b11      	ldr	r3, [pc, #68]	; (80124ac <atlasSystemInfoPV+0x78>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	461a      	mov	r2, r3
 801246c:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <atlasSystemInfoPV+0x7c>)
 801246e:	5c9b      	ldrb	r3, [r3, r2]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d008      	beq.n	8012486 <atlasSystemInfoPV+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	b298      	uxth	r0, r3
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	b299      	uxth	r1, r3
 801247c:	4b09      	ldr	r3, [pc, #36]	; (80124a4 <atlasSystemInfoPV+0x70>)
 801247e:	4a0d      	ldr	r2, [pc, #52]	; (80124b4 <atlasSystemInfoPV+0x80>)
 8012480:	f7ef fab8 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 8012484:	e007      	b.n	8012496 <atlasSystemInfoPV+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	b298      	uxth	r0, r3
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	b299      	uxth	r1, r3
 801248e:	4b05      	ldr	r3, [pc, #20]	; (80124a4 <atlasSystemInfoPV+0x70>)
 8012490:	4a09      	ldr	r2, [pc, #36]	; (80124b8 <atlasSystemInfoPV+0x84>)
 8012492:	f7ef faaf 	bl	80019f4 <LCD_PutStr>
}
 8012496:	bf00      	nop
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	200001d4 	.word	0x200001d4
 80124a4:	0801ba50 	.word	0x0801ba50
 80124a8:	0801ac6c 	.word	0x0801ac6c
 80124ac:	20000168 	.word	0x20000168
 80124b0:	20028df0 	.word	0x20028df0
 80124b4:	0801ac74 	.word	0x0801ac74
 80124b8:	0801ac80 	.word	0x0801ac80

080124bc <atlasSystemInfoWIFI>:
//draw the name for the project other board WIFI and its state of presence. Used for the System Info page. Uses the ATLAS_WIFI_PRSNT definition in the project
//.h file.
void atlasSystemInfoWIFI(int i, int j){
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 80124c6:	2314      	movs	r3, #20
 80124c8:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 80124ca:	4b17      	ldr	r3, [pc, #92]	; (8012528 <atlasSystemInfoWIFI+0x6c>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	4413      	add	r3, r2
 80124d2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "WIFI: ", fnt7x10);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	b298      	uxth	r0, r3
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	b299      	uxth	r1, r3
 80124dc:	4b13      	ldr	r3, [pc, #76]	; (801252c <atlasSystemInfoWIFI+0x70>)
 80124de:	4a14      	ldr	r2, [pc, #80]	; (8012530 <atlasSystemInfoWIFI+0x74>)
 80124e0:	f7ef fa88 	bl	80019f4 <LCD_PutStr>
 80124e4:	4603      	mov	r3, r0
 80124e6:	461a      	mov	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4413      	add	r3, r2
 80124ec:	607b      	str	r3, [r7, #4]
	if(ATLAS_WIFI_PRSNT){
 80124ee:	4b11      	ldr	r3, [pc, #68]	; (8012534 <atlasSystemInfoWIFI+0x78>)
 80124f0:	785b      	ldrb	r3, [r3, #1]
 80124f2:	461a      	mov	r2, r3
 80124f4:	4b10      	ldr	r3, [pc, #64]	; (8012538 <atlasSystemInfoWIFI+0x7c>)
 80124f6:	5c9b      	ldrb	r3, [r3, r2]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d008      	beq.n	801250e <atlasSystemInfoWIFI+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	b298      	uxth	r0, r3
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	b299      	uxth	r1, r3
 8012504:	4b09      	ldr	r3, [pc, #36]	; (801252c <atlasSystemInfoWIFI+0x70>)
 8012506:	4a0d      	ldr	r2, [pc, #52]	; (801253c <atlasSystemInfoWIFI+0x80>)
 8012508:	f7ef fa74 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 801250c:	e007      	b.n	801251e <atlasSystemInfoWIFI+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	b298      	uxth	r0, r3
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	b299      	uxth	r1, r3
 8012516:	4b05      	ldr	r3, [pc, #20]	; (801252c <atlasSystemInfoWIFI+0x70>)
 8012518:	4a09      	ldr	r2, [pc, #36]	; (8012540 <atlasSystemInfoWIFI+0x84>)
 801251a:	f7ef fa6b 	bl	80019f4 <LCD_PutStr>
}
 801251e:	bf00      	nop
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	200001d4 	.word	0x200001d4
 801252c:	0801ba50 	.word	0x0801ba50
 8012530:	0801ac90 	.word	0x0801ac90
 8012534:	20000168 	.word	0x20000168
 8012538:	20028df0 	.word	0x20028df0
 801253c:	0801ac74 	.word	0x0801ac74
 8012540:	0801ac80 	.word	0x0801ac80

08012544 <atlasSystemInfoWIGIG>:

//draw the name for the project other board WIGIG and its state of presence. Used for the System Info page. Uses the ATLAS_WIGIG_PRSNT definition in the project
//.h file.
void atlasSystemInfoWIGIG(int i, int j){
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 801254e:	2314      	movs	r3, #20
 8012550:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 8012552:	4b17      	ldr	r3, [pc, #92]	; (80125b0 <atlasSystemInfoWIGIG+0x6c>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	68fa      	ldr	r2, [r7, #12]
 8012558:	4413      	add	r3, r2
 801255a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "WIGIG: ", fnt7x10);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	b298      	uxth	r0, r3
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	b299      	uxth	r1, r3
 8012564:	4b13      	ldr	r3, [pc, #76]	; (80125b4 <atlasSystemInfoWIGIG+0x70>)
 8012566:	4a14      	ldr	r2, [pc, #80]	; (80125b8 <atlasSystemInfoWIGIG+0x74>)
 8012568:	f7ef fa44 	bl	80019f4 <LCD_PutStr>
 801256c:	4603      	mov	r3, r0
 801256e:	461a      	mov	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	4413      	add	r3, r2
 8012574:	607b      	str	r3, [r7, #4]
	if(ATLAS_WIGIG_PRSNT){
 8012576:	4b11      	ldr	r3, [pc, #68]	; (80125bc <atlasSystemInfoWIGIG+0x78>)
 8012578:	789b      	ldrb	r3, [r3, #2]
 801257a:	461a      	mov	r2, r3
 801257c:	4b10      	ldr	r3, [pc, #64]	; (80125c0 <atlasSystemInfoWIGIG+0x7c>)
 801257e:	5c9b      	ldrb	r3, [r3, r2]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d008      	beq.n	8012596 <atlasSystemInfoWIGIG+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	b298      	uxth	r0, r3
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	b299      	uxth	r1, r3
 801258c:	4b09      	ldr	r3, [pc, #36]	; (80125b4 <atlasSystemInfoWIGIG+0x70>)
 801258e:	4a0d      	ldr	r2, [pc, #52]	; (80125c4 <atlasSystemInfoWIGIG+0x80>)
 8012590:	f7ef fa30 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 8012594:	e007      	b.n	80125a6 <atlasSystemInfoWIGIG+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	b298      	uxth	r0, r3
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	b299      	uxth	r1, r3
 801259e:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <atlasSystemInfoWIGIG+0x70>)
 80125a0:	4a09      	ldr	r2, [pc, #36]	; (80125c8 <atlasSystemInfoWIGIG+0x84>)
 80125a2:	f7ef fa27 	bl	80019f4 <LCD_PutStr>
}
 80125a6:	bf00      	nop
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	200001d4 	.word	0x200001d4
 80125b4:	0801ba50 	.word	0x0801ba50
 80125b8:	0801ac98 	.word	0x0801ac98
 80125bc:	20000168 	.word	0x20000168
 80125c0:	20028df0 	.word	0x20028df0
 80125c4:	0801ac74 	.word	0x0801ac74
 80125c8:	0801ac80 	.word	0x0801ac80

080125cc <atlasSystemInfoCODEC>:
//draw the name for the project other board CODEC and its state of presence. Used for the System Info page. Uses the ATLAS_CODEC_PRSNT definition in the project
//.h file.
void atlasSystemInfoCODEC(int i, int j){
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 80125d6:	2314      	movs	r3, #20
 80125d8:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 80125da:	4b17      	ldr	r3, [pc, #92]	; (8012638 <atlasSystemInfoCODEC+0x6c>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	4413      	add	r3, r2
 80125e2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "CODEC: ", fnt7x10);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	b298      	uxth	r0, r3
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	b299      	uxth	r1, r3
 80125ec:	4b13      	ldr	r3, [pc, #76]	; (801263c <atlasSystemInfoCODEC+0x70>)
 80125ee:	4a14      	ldr	r2, [pc, #80]	; (8012640 <atlasSystemInfoCODEC+0x74>)
 80125f0:	f7ef fa00 	bl	80019f4 <LCD_PutStr>
 80125f4:	4603      	mov	r3, r0
 80125f6:	461a      	mov	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4413      	add	r3, r2
 80125fc:	607b      	str	r3, [r7, #4]
	if(ATLAS_CODEC_PRSNT){
 80125fe:	4b11      	ldr	r3, [pc, #68]	; (8012644 <atlasSystemInfoCODEC+0x78>)
 8012600:	78db      	ldrb	r3, [r3, #3]
 8012602:	461a      	mov	r2, r3
 8012604:	4b10      	ldr	r3, [pc, #64]	; (8012648 <atlasSystemInfoCODEC+0x7c>)
 8012606:	5c9b      	ldrb	r3, [r3, r2]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d008      	beq.n	801261e <atlasSystemInfoCODEC+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	b298      	uxth	r0, r3
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	b299      	uxth	r1, r3
 8012614:	4b09      	ldr	r3, [pc, #36]	; (801263c <atlasSystemInfoCODEC+0x70>)
 8012616:	4a0d      	ldr	r2, [pc, #52]	; (801264c <atlasSystemInfoCODEC+0x80>)
 8012618:	f7ef f9ec 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 801261c:	e007      	b.n	801262e <atlasSystemInfoCODEC+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	b298      	uxth	r0, r3
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	b299      	uxth	r1, r3
 8012626:	4b05      	ldr	r3, [pc, #20]	; (801263c <atlasSystemInfoCODEC+0x70>)
 8012628:	4a09      	ldr	r2, [pc, #36]	; (8012650 <atlasSystemInfoCODEC+0x84>)
 801262a:	f7ef f9e3 	bl	80019f4 <LCD_PutStr>
}
 801262e:	bf00      	nop
 8012630:	3710      	adds	r7, #16
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	200001d4 	.word	0x200001d4
 801263c:	0801ba50 	.word	0x0801ba50
 8012640:	0801aca0 	.word	0x0801aca0
 8012644:	20000168 	.word	0x20000168
 8012648:	20028df0 	.word	0x20028df0
 801264c:	0801ac74 	.word	0x0801ac74
 8012650:	0801ac80 	.word	0x0801ac80

08012654 <atlasSystemInfoRF>:
//draw the name for the project other board RF and its state of presence. Used for the System Info page. Uses the ATLAS_RF_PRSNT definition in the project
//.h file.
void atlasSystemInfoRF(int i, int j){
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 801265e:	2314      	movs	r3, #20
 8012660:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 8012662:	4b17      	ldr	r3, [pc, #92]	; (80126c0 <atlasSystemInfoRF+0x6c>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	4413      	add	r3, r2
 801266a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "RF: ", fnt7x10);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	b298      	uxth	r0, r3
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	b299      	uxth	r1, r3
 8012674:	4b13      	ldr	r3, [pc, #76]	; (80126c4 <atlasSystemInfoRF+0x70>)
 8012676:	4a14      	ldr	r2, [pc, #80]	; (80126c8 <atlasSystemInfoRF+0x74>)
 8012678:	f7ef f9bc 	bl	80019f4 <LCD_PutStr>
 801267c:	4603      	mov	r3, r0
 801267e:	461a      	mov	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4413      	add	r3, r2
 8012684:	607b      	str	r3, [r7, #4]
	if(ATLAS_RF_PRSNT){
 8012686:	4b11      	ldr	r3, [pc, #68]	; (80126cc <atlasSystemInfoRF+0x78>)
 8012688:	791b      	ldrb	r3, [r3, #4]
 801268a:	461a      	mov	r2, r3
 801268c:	4b10      	ldr	r3, [pc, #64]	; (80126d0 <atlasSystemInfoRF+0x7c>)
 801268e:	5c9b      	ldrb	r3, [r3, r2]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d008      	beq.n	80126a6 <atlasSystemInfoRF+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	b298      	uxth	r0, r3
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	b299      	uxth	r1, r3
 801269c:	4b09      	ldr	r3, [pc, #36]	; (80126c4 <atlasSystemInfoRF+0x70>)
 801269e:	4a0d      	ldr	r2, [pc, #52]	; (80126d4 <atlasSystemInfoRF+0x80>)
 80126a0:	f7ef f9a8 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 80126a4:	e007      	b.n	80126b6 <atlasSystemInfoRF+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	b298      	uxth	r0, r3
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	b299      	uxth	r1, r3
 80126ae:	4b05      	ldr	r3, [pc, #20]	; (80126c4 <atlasSystemInfoRF+0x70>)
 80126b0:	4a09      	ldr	r2, [pc, #36]	; (80126d8 <atlasSystemInfoRF+0x84>)
 80126b2:	f7ef f99f 	bl	80019f4 <LCD_PutStr>
}
 80126b6:	bf00      	nop
 80126b8:	3710      	adds	r7, #16
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	200001d4 	.word	0x200001d4
 80126c4:	0801ba50 	.word	0x0801ba50
 80126c8:	0801aca8 	.word	0x0801aca8
 80126cc:	20000168 	.word	0x20000168
 80126d0:	20028df0 	.word	0x20028df0
 80126d4:	0801ac74 	.word	0x0801ac74
 80126d8:	0801ac80 	.word	0x0801ac80

080126dc <atlasHeaderFaults>:

//faults shown in the top margin for all menus. Needs to be relatively tiny (<12 characters)
int atlasHeaderFaults(int i, int j){
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
	int x = i;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	60fb      	str	r3, [r7, #12]
	int y = j;
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	60bb      	str	r3, [r7, #8]
	if(errorLED.vsysPMIFault){
 80126ee:	4b63      	ldr	r3, [pc, #396]	; (801287c <atlasHeaderFaults+0x1a0>)
 80126f0:	785b      	ldrb	r3, [r3, #1]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00d      	beq.n	8012712 <atlasHeaderFaults+0x36>
		x += LCD_PutStr(x, y, ATLAS_HEADER1_FAULT_LBL, fnt7x10);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	b298      	uxth	r0, r3
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	b299      	uxth	r1, r3
 80126fe:	4b60      	ldr	r3, [pc, #384]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012700:	4a60      	ldr	r2, [pc, #384]	; (8012884 <atlasHeaderFaults+0x1a8>)
 8012702:	f7ef f977 	bl	80019f4 <LCD_PutStr>
 8012706:	4603      	mov	r3, r0
 8012708:	461a      	mov	r2, r3
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	4413      	add	r3, r2
 801270e:	60fb      	str	r3, [r7, #12]
 8012710:	e0ae      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.zionFault){
 8012712:	4b5a      	ldr	r3, [pc, #360]	; (801287c <atlasHeaderFaults+0x1a0>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00d      	beq.n	8012736 <atlasHeaderFaults+0x5a>
		x += LCD_PutStr(x, y, ATLAS_HEADER2_FAULT_LBL, fnt7x10);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	b298      	uxth	r0, r3
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	b299      	uxth	r1, r3
 8012722:	4b57      	ldr	r3, [pc, #348]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012724:	4a58      	ldr	r2, [pc, #352]	; (8012888 <atlasHeaderFaults+0x1ac>)
 8012726:	f7ef f965 	bl	80019f4 <LCD_PutStr>
 801272a:	4603      	mov	r3, r0
 801272c:	461a      	mov	r2, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	4413      	add	r3, r2
 8012732:	60fb      	str	r3, [r7, #12]
 8012734:	e09c      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault3){
 8012736:	4b51      	ldr	r3, [pc, #324]	; (801287c <atlasHeaderFaults+0x1a0>)
 8012738:	789b      	ldrb	r3, [r3, #2]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00d      	beq.n	801275a <atlasHeaderFaults+0x7e>
		x += LCD_PutStr(x, y, ATLAS_HEADER3_FAULT_LBL, fnt7x10);
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	b298      	uxth	r0, r3
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	b299      	uxth	r1, r3
 8012746:	4b4e      	ldr	r3, [pc, #312]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012748:	4a50      	ldr	r2, [pc, #320]	; (801288c <atlasHeaderFaults+0x1b0>)
 801274a:	f7ef f953 	bl	80019f4 <LCD_PutStr>
 801274e:	4603      	mov	r3, r0
 8012750:	461a      	mov	r2, r3
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	4413      	add	r3, r2
 8012756:	60fb      	str	r3, [r7, #12]
 8012758:	e08a      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault4){
 801275a:	4b48      	ldr	r3, [pc, #288]	; (801287c <atlasHeaderFaults+0x1a0>)
 801275c:	78db      	ldrb	r3, [r3, #3]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00d      	beq.n	801277e <atlasHeaderFaults+0xa2>
		x += LCD_PutStr(x, y, ATLAS_HEADER4_FAULT_LBL, fnt7x10);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	b298      	uxth	r0, r3
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	b299      	uxth	r1, r3
 801276a:	4b45      	ldr	r3, [pc, #276]	; (8012880 <atlasHeaderFaults+0x1a4>)
 801276c:	4a48      	ldr	r2, [pc, #288]	; (8012890 <atlasHeaderFaults+0x1b4>)
 801276e:	f7ef f941 	bl	80019f4 <LCD_PutStr>
 8012772:	4603      	mov	r3, r0
 8012774:	461a      	mov	r2, r3
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	4413      	add	r3, r2
 801277a:	60fb      	str	r3, [r7, #12]
 801277c:	e078      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault5){
 801277e:	4b3f      	ldr	r3, [pc, #252]	; (801287c <atlasHeaderFaults+0x1a0>)
 8012780:	791b      	ldrb	r3, [r3, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d00d      	beq.n	80127a2 <atlasHeaderFaults+0xc6>
		x += LCD_PutStr(x, y, ATLAS_HEADER5_FAULT_LBL, fnt7x10);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	b298      	uxth	r0, r3
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	b299      	uxth	r1, r3
 801278e:	4b3c      	ldr	r3, [pc, #240]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012790:	4a40      	ldr	r2, [pc, #256]	; (8012894 <atlasHeaderFaults+0x1b8>)
 8012792:	f7ef f92f 	bl	80019f4 <LCD_PutStr>
 8012796:	4603      	mov	r3, r0
 8012798:	461a      	mov	r2, r3
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	4413      	add	r3, r2
 801279e:	60fb      	str	r3, [r7, #12]
 80127a0:	e066      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault6){
 80127a2:	4b36      	ldr	r3, [pc, #216]	; (801287c <atlasHeaderFaults+0x1a0>)
 80127a4:	795b      	ldrb	r3, [r3, #5]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00d      	beq.n	80127c6 <atlasHeaderFaults+0xea>
		x += LCD_PutStr(x, y, ATLAS_HEADER6_FAULT_LBL, fnt7x10);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	b298      	uxth	r0, r3
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	b299      	uxth	r1, r3
 80127b2:	4b33      	ldr	r3, [pc, #204]	; (8012880 <atlasHeaderFaults+0x1a4>)
 80127b4:	4a38      	ldr	r2, [pc, #224]	; (8012898 <atlasHeaderFaults+0x1bc>)
 80127b6:	f7ef f91d 	bl	80019f4 <LCD_PutStr>
 80127ba:	4603      	mov	r3, r0
 80127bc:	461a      	mov	r2, r3
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	4413      	add	r3, r2
 80127c2:	60fb      	str	r3, [r7, #12]
 80127c4:	e054      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault7){
 80127c6:	4b2d      	ldr	r3, [pc, #180]	; (801287c <atlasHeaderFaults+0x1a0>)
 80127c8:	799b      	ldrb	r3, [r3, #6]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d00d      	beq.n	80127ea <atlasHeaderFaults+0x10e>
		x += LCD_PutStr(x, y, ATLAS_HEADER7_FAULT_LBL, fnt7x10);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	b298      	uxth	r0, r3
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	b299      	uxth	r1, r3
 80127d6:	4b2a      	ldr	r3, [pc, #168]	; (8012880 <atlasHeaderFaults+0x1a4>)
 80127d8:	4a30      	ldr	r2, [pc, #192]	; (801289c <atlasHeaderFaults+0x1c0>)
 80127da:	f7ef f90b 	bl	80019f4 <LCD_PutStr>
 80127de:	4603      	mov	r3, r0
 80127e0:	461a      	mov	r2, r3
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	4413      	add	r3, r2
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	e042      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault8){
 80127ea:	4b24      	ldr	r3, [pc, #144]	; (801287c <atlasHeaderFaults+0x1a0>)
 80127ec:	7adb      	ldrb	r3, [r3, #11]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00d      	beq.n	801280e <atlasHeaderFaults+0x132>
		x += LCD_PutStr(x, y, ATLAS_HEADER8_FAULT_LBL, fnt7x10);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	b298      	uxth	r0, r3
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	b299      	uxth	r1, r3
 80127fa:	4b21      	ldr	r3, [pc, #132]	; (8012880 <atlasHeaderFaults+0x1a4>)
 80127fc:	4a28      	ldr	r2, [pc, #160]	; (80128a0 <atlasHeaderFaults+0x1c4>)
 80127fe:	f7ef f8f9 	bl	80019f4 <LCD_PutStr>
 8012802:	4603      	mov	r3, r0
 8012804:	461a      	mov	r2, r3
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	4413      	add	r3, r2
 801280a:	60fb      	str	r3, [r7, #12]
 801280c:	e030      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault9){
 801280e:	4b1b      	ldr	r3, [pc, #108]	; (801287c <atlasHeaderFaults+0x1a0>)
 8012810:	7b1b      	ldrb	r3, [r3, #12]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00d      	beq.n	8012832 <atlasHeaderFaults+0x156>
		x += LCD_PutStr(x, y, ATLAS_HEADER9_FAULT_LBL, fnt7x10);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	b298      	uxth	r0, r3
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	b299      	uxth	r1, r3
 801281e:	4b18      	ldr	r3, [pc, #96]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012820:	4a20      	ldr	r2, [pc, #128]	; (80128a4 <atlasHeaderFaults+0x1c8>)
 8012822:	f7ef f8e7 	bl	80019f4 <LCD_PutStr>
 8012826:	4603      	mov	r3, r0
 8012828:	461a      	mov	r2, r3
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	4413      	add	r3, r2
 801282e:	60fb      	str	r3, [r7, #12]
 8012830:	e01e      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.ledDriver){
 8012832:	4b12      	ldr	r3, [pc, #72]	; (801287c <atlasHeaderFaults+0x1a0>)
 8012834:	7b5b      	ldrb	r3, [r3, #13]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00d      	beq.n	8012856 <atlasHeaderFaults+0x17a>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	b298      	uxth	r0, r3
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	b299      	uxth	r1, r3
 8012842:	4b0f      	ldr	r3, [pc, #60]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012844:	4a18      	ldr	r2, [pc, #96]	; (80128a8 <atlasHeaderFaults+0x1cc>)
 8012846:	f7ef f8d5 	bl	80019f4 <LCD_PutStr>
 801284a:	4603      	mov	r3, r0
 801284c:	461a      	mov	r2, r3
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	4413      	add	r3, r2
 8012852:	60fb      	str	r3, [r7, #12]
 8012854:	e00c      	b.n	8012870 <atlasHeaderFaults+0x194>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	b298      	uxth	r0, r3
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	b299      	uxth	r1, r3
 801285e:	4b08      	ldr	r3, [pc, #32]	; (8012880 <atlasHeaderFaults+0x1a4>)
 8012860:	4a12      	ldr	r2, [pc, #72]	; (80128ac <atlasHeaderFaults+0x1d0>)
 8012862:	f7ef f8c7 	bl	80019f4 <LCD_PutStr>
 8012866:	4603      	mov	r3, r0
 8012868:	461a      	mov	r2, r3
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	4413      	add	r3, r2
 801286e:	60fb      	str	r3, [r7, #12]
	}
	return x;
 8012870:	68fb      	ldr	r3, [r7, #12]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	2000338c 	.word	0x2000338c
 8012880:	0801ba50 	.word	0x0801ba50
 8012884:	0801acb0 	.word	0x0801acb0
 8012888:	0801acb8 	.word	0x0801acb8
 801288c:	0801aac8 	.word	0x0801aac8
 8012890:	0801aad4 	.word	0x0801aad4
 8012894:	0801aae0 	.word	0x0801aae0
 8012898:	0801aaec 	.word	0x0801aaec
 801289c:	0801aaf4 	.word	0x0801aaf4
 80128a0:	0801aafc 	.word	0x0801aafc
 80128a4:	0801ab04 	.word	0x0801ab04
 80128a8:	0801acc0 	.word	0x0801acc0
 80128ac:	0801acc8 	.word	0x0801acc8

080128b0 <atlasStatusADCsAndGPIOs>:

//draws the ADC and GPIO states in the status menu. Uses definitions from the project .h file to label each gpio/adc. alignment variables
//are used to adjust values if menus start looking awry
void atlasStatusADCsAndGPIOs(){
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b08a      	sub	sp, #40	; 0x28
 80128b4:	af02      	add	r7, sp, #8
	int inputGpioAlignment=245;
 80128b6:	23f5      	movs	r3, #245	; 0xf5
 80128b8:	61fb      	str	r3, [r7, #28]
	int adjacentSpacing = 20;
 80128ba:	2314      	movs	r3, #20
 80128bc:	61bb      	str	r3, [r7, #24]
	int firstADCAlignment = 5;
 80128be:	2305      	movs	r3, #5
 80128c0:	617b      	str	r3, [r7, #20]
	int secondADCAlignment = 120;
 80128c2:	2378      	movs	r3, #120	; 0x78
 80128c4:	613b      	str	r3, [r7, #16]
	int secondInputGpioAlignment=329;
 80128c6:	f240 1349 	movw	r3, #329	; 0x149
 80128ca:	60fb      	str	r3, [r7, #12]
	int i=firstADCAlignment;
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	60bb      	str	r3, [r7, #8]
	int j=95;
 80128d0:	235f      	movs	r3, #95	; 0x5f
 80128d2:	607b      	str	r3, [r7, #4]
	int convertedFloat;
	i+= LCD_PutStr(i, j, ATLAS_AI0, fnt7x10);
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	b298      	uxth	r0, r3
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	b299      	uxth	r1, r3
 80128dc:	4ba3      	ldr	r3, [pc, #652]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 80128de:	4aa4      	ldr	r2, [pc, #656]	; (8012b70 <atlasStatusADCsAndGPIOs+0x2c0>)
 80128e0:	f7ef f888 	bl	80019f4 <LCD_PutStr>
 80128e4:	4603      	mov	r3, r0
 80128e6:	461a      	mov	r2, r3
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	4413      	add	r3, r2
 80128ec:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VSYS;
 80128ee:	4ba1      	ldr	r3, [pc, #644]	; (8012b74 <atlasStatusADCsAndGPIOs+0x2c4>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	4aa1      	ldr	r2, [pc, #644]	; (8012b78 <atlasStatusADCsAndGPIOs+0x2c8>)
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	4413      	add	r3, r2
 80128f8:	edd3 7a00 	vldr	s15, [r3]
 80128fc:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8012b7c <atlasStatusADCsAndGPIOs+0x2cc>
 8012900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012908:	ee17 3a90 	vmov	r3, s15
 801290c:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	b298      	uxth	r0, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	b299      	uxth	r1, r3
 8012916:	4b95      	ldr	r3, [pc, #596]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012918:	9300      	str	r3, [sp, #0]
 801291a:	2303      	movs	r3, #3
 801291c:	683a      	ldr	r2, [r7, #0]
 801291e:	f7ef f907 	bl	8001b30 <LCD_PutIntF>
 8012922:	4603      	mov	r3, r0
 8012924:	461a      	mov	r2, r3
 8012926:	69bb      	ldr	r3, [r7, #24]
 8012928:	4413      	add	r3, r2
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	4413      	add	r3, r2
 801292e:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI9, fnt7x10);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	b298      	uxth	r0, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	b299      	uxth	r1, r3
 801293c:	4b8b      	ldr	r3, [pc, #556]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 801293e:	4a90      	ldr	r2, [pc, #576]	; (8012b80 <atlasStatusADCsAndGPIOs+0x2d0>)
 8012940:	f7ef f858 	bl	80019f4 <LCD_PutStr>
 8012944:	4603      	mov	r3, r0
 8012946:	461a      	mov	r2, r3
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	4413      	add	r3, r2
 801294c:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDD_MM;
 801294e:	4b89      	ldr	r3, [pc, #548]	; (8012b74 <atlasStatusADCsAndGPIOs+0x2c4>)
 8012950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012952:	4a89      	ldr	r2, [pc, #548]	; (8012b78 <atlasStatusADCsAndGPIOs+0x2c8>)
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	4413      	add	r3, r2
 8012958:	edd3 7a00 	vldr	s15, [r3]
 801295c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8012b7c <atlasStatusADCsAndGPIOs+0x2cc>
 8012960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012968:	ee17 3a90 	vmov	r3, s15
 801296c:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	b298      	uxth	r0, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	b299      	uxth	r1, r3
 8012976:	4b7d      	ldr	r3, [pc, #500]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	2303      	movs	r3, #3
 801297c:	683a      	ldr	r2, [r7, #0]
 801297e:	f7ef f8d7 	bl	8001b30 <LCD_PutIntF>
 8012982:	4603      	mov	r3, r0
 8012984:	461a      	mov	r2, r3
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	4413      	add	r3, r2
 801298a:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN0, fnt7x10);
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	b298      	uxth	r0, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	b299      	uxth	r1, r3
 8012998:	4b74      	ldr	r3, [pc, #464]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 801299a:	4a7a      	ldr	r2, [pc, #488]	; (8012b84 <atlasStatusADCsAndGPIOs+0x2d4>)
 801299c:	f7ef f82a 	bl	80019f4 <LCD_PutStr>
 80129a0:	4603      	mov	r3, r0
 80129a2:	461a      	mov	r2, r3
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	4413      	add	r3, r2
 80129a8:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_PV_PRSNT, fnt7x10)+adjacentSpacing;
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	b298      	uxth	r0, r3
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	b299      	uxth	r1, r3
 80129b2:	4b75      	ldr	r3, [pc, #468]	; (8012b88 <atlasStatusADCsAndGPIOs+0x2d8>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	461a      	mov	r2, r3
 80129b8:	4b74      	ldr	r3, [pc, #464]	; (8012b8c <atlasStatusADCsAndGPIOs+0x2dc>)
 80129ba:	5c9b      	ldrb	r3, [r3, r2]
 80129bc:	461a      	mov	r2, r3
 80129be:	4b6b      	ldr	r3, [pc, #428]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 80129c0:	f7ef f850 	bl	8001a64 <LCD_PutInt>
 80129c4:	4603      	mov	r3, r0
 80129c6:	461a      	mov	r2, r3
 80129c8:	69bb      	ldr	r3, [r7, #24]
 80129ca:	4413      	add	r3, r2
 80129cc:	68ba      	ldr	r2, [r7, #8]
 80129ce:	4413      	add	r3, r2
 80129d0:	60bb      	str	r3, [r7, #8]
	i=secondInputGpioAlignment;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN9, fnt7x10);
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	b298      	uxth	r0, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	b299      	uxth	r1, r3
 80129de:	4b63      	ldr	r3, [pc, #396]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 80129e0:	4a6b      	ldr	r2, [pc, #428]	; (8012b90 <atlasStatusADCsAndGPIOs+0x2e0>)
 80129e2:	f7ef f807 	bl	80019f4 <LCD_PutStr>
 80129e6:	4603      	mov	r3, r0
 80129e8:	461a      	mov	r2, r3
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	4413      	add	r3, r2
 80129ee:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_IN9_GPIO, fnt7x10);
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	b298      	uxth	r0, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	b299      	uxth	r1, r3
 80129f8:	4b63      	ldr	r3, [pc, #396]	; (8012b88 <atlasStatusADCsAndGPIOs+0x2d8>)
 80129fa:	7a5b      	ldrb	r3, [r3, #9]
 80129fc:	461a      	mov	r2, r3
 80129fe:	4b63      	ldr	r3, [pc, #396]	; (8012b8c <atlasStatusADCsAndGPIOs+0x2dc>)
 8012a00:	5c9b      	ldrb	r3, [r3, r2]
 8012a02:	461a      	mov	r2, r3
 8012a04:	4b59      	ldr	r3, [pc, #356]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012a06:	f7ef f82d 	bl	8001a64 <LCD_PutInt>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	4413      	add	r3, r2
 8012a12:	60bb      	str	r3, [r7, #8]


	i=firstADCAlignment;
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	330f      	adds	r3, #15
 8012a1c:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI1, fnt7x10);
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	b298      	uxth	r0, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	b299      	uxth	r1, r3
 8012a26:	4b51      	ldr	r3, [pc, #324]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012a28:	4a5a      	ldr	r2, [pc, #360]	; (8012b94 <atlasStatusADCsAndGPIOs+0x2e4>)
 8012a2a:	f7ee ffe3 	bl	80019f4 <LCD_PutStr>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	461a      	mov	r2, r3
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	4413      	add	r3, r2
 8012a36:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VREG_BOB;
 8012a38:	4b4e      	ldr	r3, [pc, #312]	; (8012b74 <atlasStatusADCsAndGPIOs+0x2c4>)
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	4a4e      	ldr	r2, [pc, #312]	; (8012b78 <atlasStatusADCsAndGPIOs+0x2c8>)
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	4413      	add	r3, r2
 8012a42:	edd3 7a00 	vldr	s15, [r3]
 8012a46:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8012b7c <atlasStatusADCsAndGPIOs+0x2cc>
 8012a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a52:	ee17 3a90 	vmov	r3, s15
 8012a56:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	b298      	uxth	r0, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	b299      	uxth	r1, r3
 8012a60:	4b42      	ldr	r3, [pc, #264]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012a62:	9300      	str	r3, [sp, #0]
 8012a64:	2303      	movs	r3, #3
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	f7ef f862 	bl	8001b30 <LCD_PutIntF>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	461a      	mov	r2, r3
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	4413      	add	r3, r2
 8012a74:	68ba      	ldr	r2, [r7, #8]
 8012a76:	4413      	add	r3, r2
 8012a78:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI10, fnt7x10);
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	b298      	uxth	r0, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	b299      	uxth	r1, r3
 8012a86:	4b39      	ldr	r3, [pc, #228]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012a88:	4a43      	ldr	r2, [pc, #268]	; (8012b98 <atlasStatusADCsAndGPIOs+0x2e8>)
 8012a8a:	f7ee ffb3 	bl	80019f4 <LCD_PutStr>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	461a      	mov	r2, r3
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	4413      	add	r3, r2
 8012a96:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_SSC_CX;
 8012a98:	4b36      	ldr	r3, [pc, #216]	; (8012b74 <atlasStatusADCsAndGPIOs+0x2c4>)
 8012a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a9c:	4a36      	ldr	r2, [pc, #216]	; (8012b78 <atlasStatusADCsAndGPIOs+0x2c8>)
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	4413      	add	r3, r2
 8012aa2:	edd3 7a00 	vldr	s15, [r3]
 8012aa6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012b7c <atlasStatusADCsAndGPIOs+0x2cc>
 8012aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ab2:	ee17 3a90 	vmov	r3, s15
 8012ab6:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	b298      	uxth	r0, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	b299      	uxth	r1, r3
 8012ac0:	4b2a      	ldr	r3, [pc, #168]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	2303      	movs	r3, #3
 8012ac6:	683a      	ldr	r2, [r7, #0]
 8012ac8:	f7ef f832 	bl	8001b30 <LCD_PutIntF>
 8012acc:	4603      	mov	r3, r0
 8012ace:	461a      	mov	r2, r3
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	4413      	add	r3, r2
 8012ad4:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN1, fnt7x10);
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	b298      	uxth	r0, r3
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	b299      	uxth	r1, r3
 8012ae2:	4b22      	ldr	r3, [pc, #136]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012ae4:	4a2d      	ldr	r2, [pc, #180]	; (8012b9c <atlasStatusADCsAndGPIOs+0x2ec>)
 8012ae6:	f7ee ff85 	bl	80019f4 <LCD_PutStr>
 8012aea:	4603      	mov	r3, r0
 8012aec:	461a      	mov	r2, r3
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	4413      	add	r3, r2
 8012af2:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_WIFI_PRSNT, fnt7x10)+adjacentSpacing;
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	b298      	uxth	r0, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	b299      	uxth	r1, r3
 8012afc:	4b22      	ldr	r3, [pc, #136]	; (8012b88 <atlasStatusADCsAndGPIOs+0x2d8>)
 8012afe:	785b      	ldrb	r3, [r3, #1]
 8012b00:	461a      	mov	r2, r3
 8012b02:	4b22      	ldr	r3, [pc, #136]	; (8012b8c <atlasStatusADCsAndGPIOs+0x2dc>)
 8012b04:	5c9b      	ldrb	r3, [r3, r2]
 8012b06:	461a      	mov	r2, r3
 8012b08:	4b18      	ldr	r3, [pc, #96]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012b0a:	f7ee ffab 	bl	8001a64 <LCD_PutInt>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	69bb      	ldr	r3, [r7, #24]
 8012b14:	4413      	add	r3, r2
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	4413      	add	r3, r2
 8012b1a:	60bb      	str	r3, [r7, #8]
	i=secondInputGpioAlignment;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN10, fnt7x10);
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	b298      	uxth	r0, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	b299      	uxth	r1, r3
 8012b28:	4b10      	ldr	r3, [pc, #64]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012b2a:	4a1d      	ldr	r2, [pc, #116]	; (8012ba0 <atlasStatusADCsAndGPIOs+0x2f0>)
 8012b2c:	f7ee ff62 	bl	80019f4 <LCD_PutStr>
 8012b30:	4603      	mov	r3, r0
 8012b32:	461a      	mov	r2, r3
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	4413      	add	r3, r2
 8012b38:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_IN10_GPIO, fnt7x10);
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	b298      	uxth	r0, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	b299      	uxth	r1, r3
 8012b42:	4b11      	ldr	r3, [pc, #68]	; (8012b88 <atlasStatusADCsAndGPIOs+0x2d8>)
 8012b44:	7a9b      	ldrb	r3, [r3, #10]
 8012b46:	461a      	mov	r2, r3
 8012b48:	4b10      	ldr	r3, [pc, #64]	; (8012b8c <atlasStatusADCsAndGPIOs+0x2dc>)
 8012b4a:	5c9b      	ldrb	r3, [r3, r2]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	4b07      	ldr	r3, [pc, #28]	; (8012b6c <atlasStatusADCsAndGPIOs+0x2bc>)
 8012b50:	f7ee ff88 	bl	8001a64 <LCD_PutInt>
 8012b54:	4603      	mov	r3, r0
 8012b56:	461a      	mov	r2, r3
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	60bb      	str	r3, [r7, #8]

	i=firstADCAlignment;
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	330f      	adds	r3, #15
 8012b66:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI2, fnt7x10);
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	e01b      	b.n	8012ba4 <atlasStatusADCsAndGPIOs+0x2f4>
 8012b6c:	0801ba50 	.word	0x0801ba50
 8012b70:	0801acd0 	.word	0x0801acd0
 8012b74:	20000174 	.word	0x20000174
 8012b78:	2003119c 	.word	0x2003119c
 8012b7c:	447a0000 	.word	0x447a0000
 8012b80:	0801acd8 	.word	0x0801acd8
 8012b84:	0801ac6c 	.word	0x0801ac6c
 8012b88:	20000168 	.word	0x20000168
 8012b8c:	20028df0 	.word	0x20028df0
 8012b90:	0801ace0 	.word	0x0801ace0
 8012b94:	0801ace8 	.word	0x0801ace8
 8012b98:	0801acf4 	.word	0x0801acf4
 8012b9c:	0801ac90 	.word	0x0801ac90
 8012ba0:	0801acfc 	.word	0x0801acfc
 8012ba4:	b298      	uxth	r0, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	b299      	uxth	r1, r3
 8012baa:	4ba6      	ldr	r3, [pc, #664]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012bac:	4aa6      	ldr	r2, [pc, #664]	; (8012e48 <atlasStatusADCsAndGPIOs+0x598>)
 8012bae:	f7ee ff21 	bl	80019f4 <LCD_PutStr>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	461a      	mov	r2, r3
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	4413      	add	r3, r2
 8012bba:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S5A;
 8012bbc:	4ba3      	ldr	r3, [pc, #652]	; (8012e4c <atlasStatusADCsAndGPIOs+0x59c>)
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	4aa3      	ldr	r2, [pc, #652]	; (8012e50 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	4413      	add	r3, r2
 8012bc6:	edd3 7a00 	vldr	s15, [r3]
 8012bca:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8012e54 <atlasStatusADCsAndGPIOs+0x5a4>
 8012bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bd6:	ee17 3a90 	vmov	r3, s15
 8012bda:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	b298      	uxth	r0, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	b299      	uxth	r1, r3
 8012be4:	4b97      	ldr	r3, [pc, #604]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012be6:	9300      	str	r3, [sp, #0]
 8012be8:	2303      	movs	r3, #3
 8012bea:	683a      	ldr	r2, [r7, #0]
 8012bec:	f7ee ffa0 	bl	8001b30 <LCD_PutIntF>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	68ba      	ldr	r2, [r7, #8]
 8012bfa:	4413      	add	r3, r2
 8012bfc:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI11, fnt7x10);
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	b298      	uxth	r0, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	b299      	uxth	r1, r3
 8012c0a:	4b8e      	ldr	r3, [pc, #568]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012c0c:	4a92      	ldr	r2, [pc, #584]	; (8012e58 <atlasStatusADCsAndGPIOs+0x5a8>)
 8012c0e:	f7ee fef1 	bl	80019f4 <LCD_PutStr>
 8012c12:	4603      	mov	r3, r0
 8012c14:	461a      	mov	r2, r3
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	4413      	add	r3, r2
 8012c1a:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_PHY_1P2;
 8012c1c:	4b8b      	ldr	r3, [pc, #556]	; (8012e4c <atlasStatusADCsAndGPIOs+0x59c>)
 8012c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c20:	4a8b      	ldr	r2, [pc, #556]	; (8012e50 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	edd3 7a00 	vldr	s15, [r3]
 8012c2a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012e54 <atlasStatusADCsAndGPIOs+0x5a4>
 8012c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c36:	ee17 3a90 	vmov	r3, s15
 8012c3a:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	b298      	uxth	r0, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	b299      	uxth	r1, r3
 8012c44:	4b7f      	ldr	r3, [pc, #508]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012c46:	9300      	str	r3, [sp, #0]
 8012c48:	2303      	movs	r3, #3
 8012c4a:	683a      	ldr	r2, [r7, #0]
 8012c4c:	f7ee ff70 	bl	8001b30 <LCD_PutIntF>
 8012c50:	4603      	mov	r3, r0
 8012c52:	461a      	mov	r2, r3
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	4413      	add	r3, r2
 8012c58:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN2, fnt7x10);
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	b298      	uxth	r0, r3
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	b299      	uxth	r1, r3
 8012c66:	4b77      	ldr	r3, [pc, #476]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012c68:	4a7c      	ldr	r2, [pc, #496]	; (8012e5c <atlasStatusADCsAndGPIOs+0x5ac>)
 8012c6a:	f7ee fec3 	bl	80019f4 <LCD_PutStr>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	461a      	mov	r2, r3
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	4413      	add	r3, r2
 8012c76:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_WIGIG_PRSNT, fnt7x10)+adjacentSpacing;
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	b298      	uxth	r0, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	b299      	uxth	r1, r3
 8012c80:	4b77      	ldr	r3, [pc, #476]	; (8012e60 <atlasStatusADCsAndGPIOs+0x5b0>)
 8012c82:	789b      	ldrb	r3, [r3, #2]
 8012c84:	461a      	mov	r2, r3
 8012c86:	4b77      	ldr	r3, [pc, #476]	; (8012e64 <atlasStatusADCsAndGPIOs+0x5b4>)
 8012c88:	5c9b      	ldrb	r3, [r3, r2]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	4b6d      	ldr	r3, [pc, #436]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012c8e:	f7ee fee9 	bl	8001a64 <LCD_PutInt>
 8012c92:	4603      	mov	r3, r0
 8012c94:	461a      	mov	r2, r3
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	4413      	add	r3, r2
 8012c9a:	68ba      	ldr	r2, [r7, #8]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	60bb      	str	r3, [r7, #8]
	i=secondInputGpioAlignment;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN11, fnt7x10);
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	b298      	uxth	r0, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	b299      	uxth	r1, r3
 8012cac:	4b65      	ldr	r3, [pc, #404]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012cae:	4a6e      	ldr	r2, [pc, #440]	; (8012e68 <atlasStatusADCsAndGPIOs+0x5b8>)
 8012cb0:	f7ee fea0 	bl	80019f4 <LCD_PutStr>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	4413      	add	r3, r2
 8012cbc:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_IN11_GPIO, fnt7x10);
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	b298      	uxth	r0, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	b299      	uxth	r1, r3
 8012cc6:	4b66      	ldr	r3, [pc, #408]	; (8012e60 <atlasStatusADCsAndGPIOs+0x5b0>)
 8012cc8:	7adb      	ldrb	r3, [r3, #11]
 8012cca:	461a      	mov	r2, r3
 8012ccc:	4b65      	ldr	r3, [pc, #404]	; (8012e64 <atlasStatusADCsAndGPIOs+0x5b4>)
 8012cce:	5c9b      	ldrb	r3, [r3, r2]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	4b5c      	ldr	r3, [pc, #368]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012cd4:	f7ee fec6 	bl	8001a64 <LCD_PutInt>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	461a      	mov	r2, r3
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	4413      	add	r3, r2
 8012ce0:	60bb      	str	r3, [r7, #8]

	i=firstADCAlignment;
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	330f      	adds	r3, #15
 8012cea:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI3, fnt7x10);
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	b298      	uxth	r0, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	b299      	uxth	r1, r3
 8012cf4:	4b53      	ldr	r3, [pc, #332]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012cf6:	4a5d      	ldr	r2, [pc, #372]	; (8012e6c <atlasStatusADCsAndGPIOs+0x5bc>)
 8012cf8:	f7ee fe7c 	bl	80019f4 <LCD_PutStr>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	461a      	mov	r2, r3
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	4413      	add	r3, r2
 8012d04:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S6C;
 8012d06:	4b51      	ldr	r3, [pc, #324]	; (8012e4c <atlasStatusADCsAndGPIOs+0x59c>)
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	4a51      	ldr	r2, [pc, #324]	; (8012e50 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012d0c:	009b      	lsls	r3, r3, #2
 8012d0e:	4413      	add	r3, r2
 8012d10:	edd3 7a00 	vldr	s15, [r3]
 8012d14:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8012e54 <atlasStatusADCsAndGPIOs+0x5a4>
 8012d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d20:	ee17 3a90 	vmov	r3, s15
 8012d24:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	b298      	uxth	r0, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	b299      	uxth	r1, r3
 8012d2e:	4b45      	ldr	r3, [pc, #276]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012d30:	9300      	str	r3, [sp, #0]
 8012d32:	2303      	movs	r3, #3
 8012d34:	683a      	ldr	r2, [r7, #0]
 8012d36:	f7ee fefb 	bl	8001b30 <LCD_PutIntF>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	4413      	add	r3, r2
 8012d42:	68ba      	ldr	r2, [r7, #8]
 8012d44:	4413      	add	r3, r2
 8012d46:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI12, fnt7x10);
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	b298      	uxth	r0, r3
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	b299      	uxth	r1, r3
 8012d54:	4b3b      	ldr	r3, [pc, #236]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012d56:	4a46      	ldr	r2, [pc, #280]	; (8012e70 <atlasStatusADCsAndGPIOs+0x5c0>)
 8012d58:	f7ee fe4c 	bl	80019f4 <LCD_PutStr>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	461a      	mov	r2, r3
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	4413      	add	r3, r2
 8012d64:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_CORE_PCIE;
 8012d66:	4b39      	ldr	r3, [pc, #228]	; (8012e4c <atlasStatusADCsAndGPIOs+0x59c>)
 8012d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d6a:	4a39      	ldr	r2, [pc, #228]	; (8012e50 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4413      	add	r3, r2
 8012d70:	edd3 7a00 	vldr	s15, [r3]
 8012d74:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012e54 <atlasStatusADCsAndGPIOs+0x5a4>
 8012d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d80:	ee17 3a90 	vmov	r3, s15
 8012d84:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	b298      	uxth	r0, r3
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	b299      	uxth	r1, r3
 8012d8e:	4b2d      	ldr	r3, [pc, #180]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012d90:	9300      	str	r3, [sp, #0]
 8012d92:	2303      	movs	r3, #3
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	f7ee fecb 	bl	8001b30 <LCD_PutIntF>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	4413      	add	r3, r2
 8012da2:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN3, fnt7x10);
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	b298      	uxth	r0, r3
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	b299      	uxth	r1, r3
 8012db0:	4b24      	ldr	r3, [pc, #144]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012db2:	4a30      	ldr	r2, [pc, #192]	; (8012e74 <atlasStatusADCsAndGPIOs+0x5c4>)
 8012db4:	f7ee fe1e 	bl	80019f4 <LCD_PutStr>
 8012db8:	4603      	mov	r3, r0
 8012dba:	461a      	mov	r2, r3
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	4413      	add	r3, r2
 8012dc0:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_CODEC_PRSNT, fnt7x10);
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	b298      	uxth	r0, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	b299      	uxth	r1, r3
 8012dca:	4b25      	ldr	r3, [pc, #148]	; (8012e60 <atlasStatusADCsAndGPIOs+0x5b0>)
 8012dcc:	78db      	ldrb	r3, [r3, #3]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	4b24      	ldr	r3, [pc, #144]	; (8012e64 <atlasStatusADCsAndGPIOs+0x5b4>)
 8012dd2:	5c9b      	ldrb	r3, [r3, r2]
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	4b1b      	ldr	r3, [pc, #108]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012dd8:	f7ee fe44 	bl	8001a64 <LCD_PutInt>


	i=firstADCAlignment;
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	330f      	adds	r3, #15
 8012de4:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI4, fnt7x10);
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	b298      	uxth	r0, r3
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	b299      	uxth	r1, r3
 8012dee:	4b15      	ldr	r3, [pc, #84]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012df0:	4a21      	ldr	r2, [pc, #132]	; (8012e78 <atlasStatusADCsAndGPIOs+0x5c8>)
 8012df2:	f7ee fdff 	bl	80019f4 <LCD_PutStr>
 8012df6:	4603      	mov	r3, r0
 8012df8:	461a      	mov	r2, r3
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S4E;
 8012e00:	4b12      	ldr	r3, [pc, #72]	; (8012e4c <atlasStatusADCsAndGPIOs+0x59c>)
 8012e02:	691b      	ldr	r3, [r3, #16]
 8012e04:	4a12      	ldr	r2, [pc, #72]	; (8012e50 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	4413      	add	r3, r2
 8012e0a:	edd3 7a00 	vldr	s15, [r3]
 8012e0e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8012e54 <atlasStatusADCsAndGPIOs+0x5a4>
 8012e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e1a:	ee17 3a90 	vmov	r3, s15
 8012e1e:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	b298      	uxth	r0, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	b299      	uxth	r1, r3
 8012e28:	4b06      	ldr	r3, [pc, #24]	; (8012e44 <atlasStatusADCsAndGPIOs+0x594>)
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	683a      	ldr	r2, [r7, #0]
 8012e30:	f7ee fe7e 	bl	8001b30 <LCD_PutIntF>
 8012e34:	4603      	mov	r3, r0
 8012e36:	461a      	mov	r2, r3
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	68ba      	ldr	r2, [r7, #8]
 8012e3e:	4413      	add	r3, r2
 8012e40:	e01c      	b.n	8012e7c <atlasStatusADCsAndGPIOs+0x5cc>
 8012e42:	bf00      	nop
 8012e44:	0801ba50 	.word	0x0801ba50
 8012e48:	0801ad04 	.word	0x0801ad04
 8012e4c:	20000174 	.word	0x20000174
 8012e50:	2003119c 	.word	0x2003119c
 8012e54:	447a0000 	.word	0x447a0000
 8012e58:	0801ad0c 	.word	0x0801ad0c
 8012e5c:	0801ac98 	.word	0x0801ac98
 8012e60:	20000168 	.word	0x20000168
 8012e64:	20028df0 	.word	0x20028df0
 8012e68:	0801ad18 	.word	0x0801ad18
 8012e6c:	0801ad20 	.word	0x0801ad20
 8012e70:	0801ad28 	.word	0x0801ad28
 8012e74:	0801aca0 	.word	0x0801aca0
 8012e78:	0801ad34 	.word	0x0801ad34
 8012e7c:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI13, fnt7x10);
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	b298      	uxth	r0, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	b299      	uxth	r1, r3
 8012e8a:	4ba4      	ldr	r3, [pc, #656]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012e8c:	4aa4      	ldr	r2, [pc, #656]	; (8013120 <atlasStatusADCsAndGPIOs+0x870>)
 8012e8e:	f7ee fdb1 	bl	80019f4 <LCD_PutStr>
 8012e92:	4603      	mov	r3, r0
 8012e94:	461a      	mov	r2, r3
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	4413      	add	r3, r2
 8012e9a:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_CORE_USB;
 8012e9c:	4ba1      	ldr	r3, [pc, #644]	; (8013124 <atlasStatusADCsAndGPIOs+0x874>)
 8012e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ea0:	4aa1      	ldr	r2, [pc, #644]	; (8013128 <atlasStatusADCsAndGPIOs+0x878>)
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4413      	add	r3, r2
 8012ea6:	edd3 7a00 	vldr	s15, [r3]
 8012eaa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 801312c <atlasStatusADCsAndGPIOs+0x87c>
 8012eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eb6:	ee17 3a90 	vmov	r3, s15
 8012eba:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	b298      	uxth	r0, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	b299      	uxth	r1, r3
 8012ec4:	4b95      	ldr	r3, [pc, #596]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	2303      	movs	r3, #3
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	f7ee fe30 	bl	8001b30 <LCD_PutIntF>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN4, fnt7x10);
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	b298      	uxth	r0, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	b299      	uxth	r1, r3
 8012ee6:	4b8d      	ldr	r3, [pc, #564]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012ee8:	4a91      	ldr	r2, [pc, #580]	; (8013130 <atlasStatusADCsAndGPIOs+0x880>)
 8012eea:	f7ee fd83 	bl	80019f4 <LCD_PutStr>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_RF_PRSNT, fnt7x10);
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	b298      	uxth	r0, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	b299      	uxth	r1, r3
 8012f00:	4b8c      	ldr	r3, [pc, #560]	; (8013134 <atlasStatusADCsAndGPIOs+0x884>)
 8012f02:	791b      	ldrb	r3, [r3, #4]
 8012f04:	461a      	mov	r2, r3
 8012f06:	4b8c      	ldr	r3, [pc, #560]	; (8013138 <atlasStatusADCsAndGPIOs+0x888>)
 8012f08:	5c9b      	ldrb	r3, [r3, r2]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	4b83      	ldr	r3, [pc, #524]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012f0e:	f7ee fda9 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	330f      	adds	r3, #15
 8012f1a:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI5, fnt7x10);
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	b298      	uxth	r0, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	b299      	uxth	r1, r3
 8012f24:	4b7d      	ldr	r3, [pc, #500]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012f26:	4a85      	ldr	r2, [pc, #532]	; (801313c <atlasStatusADCsAndGPIOs+0x88c>)
 8012f28:	f7ee fd64 	bl	80019f4 <LCD_PutStr>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	461a      	mov	r2, r3
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	4413      	add	r3, r2
 8012f34:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDDMX;
 8012f36:	4b7b      	ldr	r3, [pc, #492]	; (8013124 <atlasStatusADCsAndGPIOs+0x874>)
 8012f38:	695b      	ldr	r3, [r3, #20]
 8012f3a:	4a7b      	ldr	r2, [pc, #492]	; (8013128 <atlasStatusADCsAndGPIOs+0x878>)
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	edd3 7a00 	vldr	s15, [r3]
 8012f44:	ed9f 7a79 	vldr	s14, [pc, #484]	; 801312c <atlasStatusADCsAndGPIOs+0x87c>
 8012f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f50:	ee17 3a90 	vmov	r3, s15
 8012f54:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	b298      	uxth	r0, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	b299      	uxth	r1, r3
 8012f5e:	4b6f      	ldr	r3, [pc, #444]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012f60:	9300      	str	r3, [sp, #0]
 8012f62:	2303      	movs	r3, #3
 8012f64:	683a      	ldr	r2, [r7, #0]
 8012f66:	f7ee fde3 	bl	8001b30 <LCD_PutIntF>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	4413      	add	r3, r2
 8012f72:	68ba      	ldr	r2, [r7, #8]
 8012f74:	4413      	add	r3, r2
 8012f76:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI14, fnt7x10);
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	b298      	uxth	r0, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	b299      	uxth	r1, r3
 8012f84:	4b65      	ldr	r3, [pc, #404]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012f86:	4a6e      	ldr	r2, [pc, #440]	; (8013140 <atlasStatusADCsAndGPIOs+0x890>)
 8012f88:	f7ee fd34 	bl	80019f4 <LCD_PutStr>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	461a      	mov	r2, r3
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	4413      	add	r3, r2
 8012f94:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S5E;
 8012f96:	4b63      	ldr	r3, [pc, #396]	; (8013124 <atlasStatusADCsAndGPIOs+0x874>)
 8012f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f9a:	4a63      	ldr	r2, [pc, #396]	; (8013128 <atlasStatusADCsAndGPIOs+0x878>)
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	edd3 7a00 	vldr	s15, [r3]
 8012fa4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801312c <atlasStatusADCsAndGPIOs+0x87c>
 8012fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fb0:	ee17 3a90 	vmov	r3, s15
 8012fb4:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	b298      	uxth	r0, r3
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	b299      	uxth	r1, r3
 8012fbe:	4b57      	ldr	r3, [pc, #348]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012fc0:	9300      	str	r3, [sp, #0]
 8012fc2:	2303      	movs	r3, #3
 8012fc4:	683a      	ldr	r2, [r7, #0]
 8012fc6:	f7ee fdb3 	bl	8001b30 <LCD_PutIntF>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	461a      	mov	r2, r3
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN5, fnt7x10);
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	b298      	uxth	r0, r3
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	b299      	uxth	r1, r3
 8012fe0:	4b4e      	ldr	r3, [pc, #312]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8012fe2:	4a58      	ldr	r2, [pc, #352]	; (8013144 <atlasStatusADCsAndGPIOs+0x894>)
 8012fe4:	f7ee fd06 	bl	80019f4 <LCD_PutStr>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	461a      	mov	r2, r3
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	4413      	add	r3, r2
 8012ff0:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN5_GPIO, fnt7x10);
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	b298      	uxth	r0, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	b299      	uxth	r1, r3
 8012ffa:	4b4e      	ldr	r3, [pc, #312]	; (8013134 <atlasStatusADCsAndGPIOs+0x884>)
 8012ffc:	795b      	ldrb	r3, [r3, #5]
 8012ffe:	461a      	mov	r2, r3
 8013000:	4b4d      	ldr	r3, [pc, #308]	; (8013138 <atlasStatusADCsAndGPIOs+0x888>)
 8013002:	5c9b      	ldrb	r3, [r3, r2]
 8013004:	461a      	mov	r2, r3
 8013006:	4b45      	ldr	r3, [pc, #276]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8013008:	f7ee fd2c 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	60bb      	str	r3, [r7, #8]
	j+=15;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	330f      	adds	r3, #15
 8013014:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI6, fnt7x10);
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	b298      	uxth	r0, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	b299      	uxth	r1, r3
 801301e:	4b3f      	ldr	r3, [pc, #252]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8013020:	4a49      	ldr	r2, [pc, #292]	; (8013148 <atlasStatusADCsAndGPIOs+0x898>)
 8013022:	f7ee fce7 	bl	80019f4 <LCD_PutStr>
 8013026:	4603      	mov	r3, r0
 8013028:	461a      	mov	r2, r3
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	4413      	add	r3, r2
 801302e:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_LPI_MX;
 8013030:	4b3c      	ldr	r3, [pc, #240]	; (8013124 <atlasStatusADCsAndGPIOs+0x874>)
 8013032:	699b      	ldr	r3, [r3, #24]
 8013034:	4a3c      	ldr	r2, [pc, #240]	; (8013128 <atlasStatusADCsAndGPIOs+0x878>)
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	4413      	add	r3, r2
 801303a:	edd3 7a00 	vldr	s15, [r3]
 801303e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801312c <atlasStatusADCsAndGPIOs+0x87c>
 8013042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801304a:	ee17 3a90 	vmov	r3, s15
 801304e:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	b298      	uxth	r0, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	b299      	uxth	r1, r3
 8013058:	4b30      	ldr	r3, [pc, #192]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 801305a:	9300      	str	r3, [sp, #0]
 801305c:	2303      	movs	r3, #3
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	f7ee fd66 	bl	8001b30 <LCD_PutIntF>
 8013064:	4603      	mov	r3, r0
 8013066:	461a      	mov	r2, r3
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	4413      	add	r3, r2
 801306c:	68ba      	ldr	r2, [r7, #8]
 801306e:	4413      	add	r3, r2
 8013070:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI15, fnt7x10);
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	b298      	uxth	r0, r3
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	b299      	uxth	r1, r3
 801307e:	4b27      	ldr	r3, [pc, #156]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8013080:	4a32      	ldr	r2, [pc, #200]	; (801314c <atlasStatusADCsAndGPIOs+0x89c>)
 8013082:	f7ee fcb7 	bl	80019f4 <LCD_PutStr>
 8013086:	4603      	mov	r3, r0
 8013088:	461a      	mov	r2, r3
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	4413      	add	r3, r2
 801308e:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_1P8;
 8013090:	4b24      	ldr	r3, [pc, #144]	; (8013124 <atlasStatusADCsAndGPIOs+0x874>)
 8013092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013094:	4a24      	ldr	r2, [pc, #144]	; (8013128 <atlasStatusADCsAndGPIOs+0x878>)
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	4413      	add	r3, r2
 801309a:	edd3 7a00 	vldr	s15, [r3]
 801309e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801312c <atlasStatusADCsAndGPIOs+0x87c>
 80130a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130aa:	ee17 3a90 	vmov	r3, s15
 80130ae:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	b298      	uxth	r0, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	b299      	uxth	r1, r3
 80130b8:	4b18      	ldr	r3, [pc, #96]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 80130ba:	9300      	str	r3, [sp, #0]
 80130bc:	2303      	movs	r3, #3
 80130be:	683a      	ldr	r2, [r7, #0]
 80130c0:	f7ee fd36 	bl	8001b30 <LCD_PutIntF>
 80130c4:	4603      	mov	r3, r0
 80130c6:	461a      	mov	r2, r3
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	4413      	add	r3, r2
 80130cc:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN6, fnt7x10);
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	b298      	uxth	r0, r3
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	b299      	uxth	r1, r3
 80130da:	4b10      	ldr	r3, [pc, #64]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 80130dc:	4a1c      	ldr	r2, [pc, #112]	; (8013150 <atlasStatusADCsAndGPIOs+0x8a0>)
 80130de:	f7ee fc89 	bl	80019f4 <LCD_PutStr>
 80130e2:	4603      	mov	r3, r0
 80130e4:	461a      	mov	r2, r3
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	4413      	add	r3, r2
 80130ea:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN6_GPIO, fnt7x10);
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	b298      	uxth	r0, r3
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	b299      	uxth	r1, r3
 80130f4:	4b0f      	ldr	r3, [pc, #60]	; (8013134 <atlasStatusADCsAndGPIOs+0x884>)
 80130f6:	799b      	ldrb	r3, [r3, #6]
 80130f8:	461a      	mov	r2, r3
 80130fa:	4b0f      	ldr	r3, [pc, #60]	; (8013138 <atlasStatusADCsAndGPIOs+0x888>)
 80130fc:	5c9b      	ldrb	r3, [r3, r2]
 80130fe:	461a      	mov	r2, r3
 8013100:	4b06      	ldr	r3, [pc, #24]	; (801311c <atlasStatusADCsAndGPIOs+0x86c>)
 8013102:	f7ee fcaf 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	60bb      	str	r3, [r7, #8]
	j+=15;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	330f      	adds	r3, #15
 801310e:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI7, fnt7x10);
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	b298      	uxth	r0, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	b299      	uxth	r1, r3
 8013118:	e01c      	b.n	8013154 <atlasStatusADCsAndGPIOs+0x8a4>
 801311a:	bf00      	nop
 801311c:	0801ba50 	.word	0x0801ba50
 8013120:	0801ad3c 	.word	0x0801ad3c
 8013124:	20000174 	.word	0x20000174
 8013128:	2003119c 	.word	0x2003119c
 801312c:	447a0000 	.word	0x447a0000
 8013130:	0801aca8 	.word	0x0801aca8
 8013134:	20000168 	.word	0x20000168
 8013138:	20028df0 	.word	0x20028df0
 801313c:	0801ad48 	.word	0x0801ad48
 8013140:	0801ad50 	.word	0x0801ad50
 8013144:	0801ad58 	.word	0x0801ad58
 8013148:	0801ad60 	.word	0x0801ad60
 801314c:	0801ad68 	.word	0x0801ad68
 8013150:	0801ad70 	.word	0x0801ad70
 8013154:	4b5b      	ldr	r3, [pc, #364]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 8013156:	4a5c      	ldr	r2, [pc, #368]	; (80132c8 <atlasStatusADCsAndGPIOs+0xa18>)
 8013158:	f7ee fc4c 	bl	80019f4 <LCD_PutStr>
 801315c:	4603      	mov	r3, r0
 801315e:	461a      	mov	r2, r3
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	4413      	add	r3, r2
 8013164:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDDA_EBI;
 8013166:	4b59      	ldr	r3, [pc, #356]	; (80132cc <atlasStatusADCsAndGPIOs+0xa1c>)
 8013168:	69db      	ldr	r3, [r3, #28]
 801316a:	4a59      	ldr	r2, [pc, #356]	; (80132d0 <atlasStatusADCsAndGPIOs+0xa20>)
 801316c:	009b      	lsls	r3, r3, #2
 801316e:	4413      	add	r3, r2
 8013170:	edd3 7a00 	vldr	s15, [r3]
 8013174:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80132d4 <atlasStatusADCsAndGPIOs+0xa24>
 8013178:	ee67 7a87 	vmul.f32	s15, s15, s14
 801317c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013180:	ee17 3a90 	vmov	r3, s15
 8013184:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	b298      	uxth	r0, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	b299      	uxth	r1, r3
 801318e:	4b4d      	ldr	r3, [pc, #308]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 8013190:	9300      	str	r3, [sp, #0]
 8013192:	2303      	movs	r3, #3
 8013194:	683a      	ldr	r2, [r7, #0]
 8013196:	f7ee fccb 	bl	8001b30 <LCD_PutIntF>
 801319a:	4603      	mov	r3, r0
 801319c:	461a      	mov	r2, r3
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	4413      	add	r3, r2
 80131a2:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN7, fnt7x10);
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	b298      	uxth	r0, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	b299      	uxth	r1, r3
 80131b0:	4b44      	ldr	r3, [pc, #272]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 80131b2:	4a49      	ldr	r2, [pc, #292]	; (80132d8 <atlasStatusADCsAndGPIOs+0xa28>)
 80131b4:	f7ee fc1e 	bl	80019f4 <LCD_PutStr>
 80131b8:	4603      	mov	r3, r0
 80131ba:	461a      	mov	r2, r3
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	4413      	add	r3, r2
 80131c0:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN7_GPIO, fnt7x10);
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	b298      	uxth	r0, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	b299      	uxth	r1, r3
 80131ca:	4b44      	ldr	r3, [pc, #272]	; (80132dc <atlasStatusADCsAndGPIOs+0xa2c>)
 80131cc:	79db      	ldrb	r3, [r3, #7]
 80131ce:	461a      	mov	r2, r3
 80131d0:	4b43      	ldr	r3, [pc, #268]	; (80132e0 <atlasStatusADCsAndGPIOs+0xa30>)
 80131d2:	5c9b      	ldrb	r3, [r3, r2]
 80131d4:	461a      	mov	r2, r3
 80131d6:	4b3b      	ldr	r3, [pc, #236]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 80131d8:	f7ee fc44 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	60bb      	str	r3, [r7, #8]
	j+=15;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	330f      	adds	r3, #15
 80131e4:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI8, fnt7x10);
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	b298      	uxth	r0, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	b299      	uxth	r1, r3
 80131ee:	4b35      	ldr	r3, [pc, #212]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 80131f0:	4a3c      	ldr	r2, [pc, #240]	; (80132e4 <atlasStatusADCsAndGPIOs+0xa34>)
 80131f2:	f7ee fbff 	bl	80019f4 <LCD_PutStr>
 80131f6:	4603      	mov	r3, r0
 80131f8:	461a      	mov	r2, r3
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	4413      	add	r3, r2
 80131fe:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDD_CX;
 8013200:	4b32      	ldr	r3, [pc, #200]	; (80132cc <atlasStatusADCsAndGPIOs+0xa1c>)
 8013202:	6a1b      	ldr	r3, [r3, #32]
 8013204:	4a32      	ldr	r2, [pc, #200]	; (80132d0 <atlasStatusADCsAndGPIOs+0xa20>)
 8013206:	009b      	lsls	r3, r3, #2
 8013208:	4413      	add	r3, r2
 801320a:	edd3 7a00 	vldr	s15, [r3]
 801320e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80132d4 <atlasStatusADCsAndGPIOs+0xa24>
 8013212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801321a:	ee17 3a90 	vmov	r3, s15
 801321e:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	b298      	uxth	r0, r3
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	b299      	uxth	r1, r3
 8013228:	4b26      	ldr	r3, [pc, #152]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	2303      	movs	r3, #3
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	f7ee fc7e 	bl	8001b30 <LCD_PutIntF>
 8013234:	4603      	mov	r3, r0
 8013236:	461a      	mov	r2, r3
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	4413      	add	r3, r2
 801323c:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN8, fnt7x10);
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	b298      	uxth	r0, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	b299      	uxth	r1, r3
 801324a:	4b1e      	ldr	r3, [pc, #120]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 801324c:	4a26      	ldr	r2, [pc, #152]	; (80132e8 <atlasStatusADCsAndGPIOs+0xa38>)
 801324e:	f7ee fbd1 	bl	80019f4 <LCD_PutStr>
 8013252:	4603      	mov	r3, r0
 8013254:	461a      	mov	r2, r3
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	4413      	add	r3, r2
 801325a:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN8_GPIO, fnt7x10);
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	b298      	uxth	r0, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	b299      	uxth	r1, r3
 8013264:	4b1d      	ldr	r3, [pc, #116]	; (80132dc <atlasStatusADCsAndGPIOs+0xa2c>)
 8013266:	7a1b      	ldrb	r3, [r3, #8]
 8013268:	461a      	mov	r2, r3
 801326a:	4b1d      	ldr	r3, [pc, #116]	; (80132e0 <atlasStatusADCsAndGPIOs+0xa30>)
 801326c:	5c9b      	ldrb	r3, [r3, r2]
 801326e:	461a      	mov	r2, r3
 8013270:	4b14      	ldr	r3, [pc, #80]	; (80132c4 <atlasStatusADCsAndGPIOs+0xa14>)
 8013272:	f7ee fbf7 	bl	8001a64 <LCD_PutInt>
	//horizontal divider
	j=65;
 8013276:	2341      	movs	r3, #65	; 0x41
 8013278:	607b      	str	r3, [r7, #4]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	b29b      	uxth	r3, r3
 801327e:	3b01      	subs	r3, #1
 8013280:	b299      	uxth	r1, r3
 8013282:	4b1a      	ldr	r3, [pc, #104]	; (80132ec <atlasStatusADCsAndGPIOs+0xa3c>)
 8013284:	881b      	ldrh	r3, [r3, #0]
 8013286:	3b02      	subs	r3, #2
 8013288:	b29a      	uxth	r2, r3
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	b29b      	uxth	r3, r3
 801328e:	3301      	adds	r3, #1
 8013290:	b29b      	uxth	r3, r3
 8013292:	2002      	movs	r0, #2
 8013294:	f7ee f860 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 8013298:	23e6      	movs	r3, #230	; 0xe6
 801329a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	3b03      	subs	r3, #3
 80132a2:	b298      	uxth	r0, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	b299      	uxth	r1, r3
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	3303      	adds	r3, #3
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	4b0f      	ldr	r3, [pc, #60]	; (80132f0 <atlasStatusADCsAndGPIOs+0xa40>)
 80132b2:	881b      	ldrh	r3, [r3, #0]
 80132b4:	3b02      	subs	r3, #2
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	f7ee f84e 	bl	8001358 <LCD_FillRect>
}
 80132bc:	bf00      	nop
 80132be:	3720      	adds	r7, #32
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	0801ba50 	.word	0x0801ba50
 80132c8:	0801ad78 	.word	0x0801ad78
 80132cc:	20000174 	.word	0x20000174
 80132d0:	2003119c 	.word	0x2003119c
 80132d4:	447a0000 	.word	0x447a0000
 80132d8:	0801ad84 	.word	0x0801ad84
 80132dc:	20000168 	.word	0x20000168
 80132e0:	20028df0 	.word	0x20028df0
 80132e4:	0801ad8c 	.word	0x0801ad8c
 80132e8:	0801ad94 	.word	0x0801ad94
 80132ec:	20028b62 	.word	0x20028b62
 80132f0:	20028b64 	.word	0x20028b64

080132f4 <atlasStatusFaults>:

//prints the faults for the board under the status menu. Uses definitions from the Project .h file. Labels should be short (<10 char)
//and fault messages should be relatively short (<12 char)
void atlasStatusFaults(){
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b086      	sub	sp, #24
 80132f8:	af00      	add	r7, sp, #0
	int i=10;
 80132fa:	230a      	movs	r3, #10
 80132fc:	617b      	str	r3, [r7, #20]
	int j=95;
 80132fe:	235f      	movs	r3, #95	; 0x5f
 8013300:	613b      	str	r3, [r7, #16]
	int daughterCardAlignment=240;
 8013302:	23f0      	movs	r3, #240	; 0xf0
 8013304:	60fb      	str	r3, [r7, #12]
	int faultVerticalSpacing = 15;
 8013306:	230f      	movs	r3, #15
 8013308:	60bb      	str	r3, [r7, #8]
	int faultHorizontalSpacing=10;
 801330a:	230a      	movs	r3, #10
 801330c:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_FAULT1_LBL, fnt7x10);
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	b298      	uxth	r0, r3
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	b299      	uxth	r1, r3
 8013316:	4b91      	ldr	r3, [pc, #580]	; (801355c <atlasStatusFaults+0x268>)
 8013318:	4a91      	ldr	r2, [pc, #580]	; (8013560 <atlasStatusFaults+0x26c>)
 801331a:	f7ee fb6b 	bl	80019f4 <LCD_PutStr>
 801331e:	4603      	mov	r3, r0
 8013320:	461a      	mov	r2, r3
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	4413      	add	r3, r2
 8013326:	617b      	str	r3, [r7, #20]
	if(errorLED.zionFault){
 8013328:	4b8e      	ldr	r3, [pc, #568]	; (8013564 <atlasStatusFaults+0x270>)
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d008      	beq.n	8013342 <atlasStatusFaults+0x4e>
		LCD_PutStr(i, j, ATLAS_FAULT1_TRIGGER_MSG, fnt7x10);
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	b298      	uxth	r0, r3
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	b299      	uxth	r1, r3
 8013338:	4b88      	ldr	r3, [pc, #544]	; (801355c <atlasStatusFaults+0x268>)
 801333a:	4a8b      	ldr	r2, [pc, #556]	; (8013568 <atlasStatusFaults+0x274>)
 801333c:	f7ee fb5a 	bl	80019f4 <LCD_PutStr>
 8013340:	e007      	b.n	8013352 <atlasStatusFaults+0x5e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	b298      	uxth	r0, r3
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	b299      	uxth	r1, r3
 801334a:	4b84      	ldr	r3, [pc, #528]	; (801355c <atlasStatusFaults+0x268>)
 801334c:	4a87      	ldr	r2, [pc, #540]	; (801356c <atlasStatusFaults+0x278>)
 801334e:	f7ee fb51 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	b298      	uxth	r0, r3
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	b299      	uxth	r1, r3
 801335e:	4b7f      	ldr	r3, [pc, #508]	; (801355c <atlasStatusFaults+0x268>)
 8013360:	4a83      	ldr	r2, [pc, #524]	; (8013570 <atlasStatusFaults+0x27c>)
 8013362:	f7ee fb47 	bl	80019f4 <LCD_PutStr>
 8013366:	4603      	mov	r3, r0
 8013368:	461a      	mov	r2, r3
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	4413      	add	r3, r2
 801336e:	617b      	str	r3, [r7, #20]
	if(ZION.SOC_EEPROM_Detected){
 8013370:	4b80      	ldr	r3, [pc, #512]	; (8013574 <atlasStatusFaults+0x280>)
 8013372:	689b      	ldr	r3, [r3, #8]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d008      	beq.n	801338a <atlasStatusFaults+0x96>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	b298      	uxth	r0, r3
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	b299      	uxth	r1, r3
 8013380:	4b76      	ldr	r3, [pc, #472]	; (801355c <atlasStatusFaults+0x268>)
 8013382:	4a7d      	ldr	r2, [pc, #500]	; (8013578 <atlasStatusFaults+0x284>)
 8013384:	f7ee fb36 	bl	80019f4 <LCD_PutStr>
 8013388:	e007      	b.n	801339a <atlasStatusFaults+0xa6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	b298      	uxth	r0, r3
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	b299      	uxth	r1, r3
 8013392:	4b72      	ldr	r3, [pc, #456]	; (801355c <atlasStatusFaults+0x268>)
 8013394:	4a79      	ldr	r2, [pc, #484]	; (801357c <atlasStatusFaults+0x288>)
 8013396:	f7ee fb2d 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801339e:	693a      	ldr	r2, [r7, #16]
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	4413      	add	r3, r2
 80133a4:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT2_LBL, fnt7x10);
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	b298      	uxth	r0, r3
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	b299      	uxth	r1, r3
 80133ae:	4b6b      	ldr	r3, [pc, #428]	; (801355c <atlasStatusFaults+0x268>)
 80133b0:	4a73      	ldr	r2, [pc, #460]	; (8013580 <atlasStatusFaults+0x28c>)
 80133b2:	f7ee fb1f 	bl	80019f4 <LCD_PutStr>
 80133b6:	4603      	mov	r3, r0
 80133b8:	461a      	mov	r2, r3
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	4413      	add	r3, r2
 80133be:	617b      	str	r3, [r7, #20]
	if(errorLED.vsysPMIFault){
 80133c0:	4b68      	ldr	r3, [pc, #416]	; (8013564 <atlasStatusFaults+0x270>)
 80133c2:	785b      	ldrb	r3, [r3, #1]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d008      	beq.n	80133da <atlasStatusFaults+0xe6>
		LCD_PutStr(i, j, ATLAS_FAULT2_TRIGGER_MSG, fnt7x10);
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	b298      	uxth	r0, r3
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	b299      	uxth	r1, r3
 80133d0:	4b62      	ldr	r3, [pc, #392]	; (801355c <atlasStatusFaults+0x268>)
 80133d2:	4a6c      	ldr	r2, [pc, #432]	; (8013584 <atlasStatusFaults+0x290>)
 80133d4:	f7ee fb0e 	bl	80019f4 <LCD_PutStr>
 80133d8:	e007      	b.n	80133ea <atlasStatusFaults+0xf6>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	b298      	uxth	r0, r3
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	b299      	uxth	r1, r3
 80133e2:	4b5e      	ldr	r3, [pc, #376]	; (801355c <atlasStatusFaults+0x268>)
 80133e4:	4a61      	ldr	r2, [pc, #388]	; (801356c <atlasStatusFaults+0x278>)
 80133e6:	f7ee fb05 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	b298      	uxth	r0, r3
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	b299      	uxth	r1, r3
 80133f6:	4b59      	ldr	r3, [pc, #356]	; (801355c <atlasStatusFaults+0x268>)
 80133f8:	4a63      	ldr	r2, [pc, #396]	; (8013588 <atlasStatusFaults+0x294>)
 80133fa:	f7ee fafb 	bl	80019f4 <LCD_PutStr>
 80133fe:	4603      	mov	r3, r0
 8013400:	461a      	mov	r2, r3
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	4413      	add	r3, r2
 8013406:	617b      	str	r3, [r7, #20]
	if(ZION.ASIC_EEPROM_Detected){
 8013408:	4b5a      	ldr	r3, [pc, #360]	; (8013574 <atlasStatusFaults+0x280>)
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d008      	beq.n	8013422 <atlasStatusFaults+0x12e>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	b298      	uxth	r0, r3
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	b299      	uxth	r1, r3
 8013418:	4b50      	ldr	r3, [pc, #320]	; (801355c <atlasStatusFaults+0x268>)
 801341a:	4a57      	ldr	r2, [pc, #348]	; (8013578 <atlasStatusFaults+0x284>)
 801341c:	f7ee faea 	bl	80019f4 <LCD_PutStr>
 8013420:	e007      	b.n	8013432 <atlasStatusFaults+0x13e>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	b298      	uxth	r0, r3
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	b299      	uxth	r1, r3
 801342a:	4b4c      	ldr	r3, [pc, #304]	; (801355c <atlasStatusFaults+0x268>)
 801342c:	4a53      	ldr	r2, [pc, #332]	; (801357c <atlasStatusFaults+0x288>)
 801342e:	f7ee fae1 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013436:	693a      	ldr	r2, [r7, #16]
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	4413      	add	r3, r2
 801343c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT3_LBL, fnt7x10);
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	b298      	uxth	r0, r3
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	b299      	uxth	r1, r3
 8013446:	4b45      	ldr	r3, [pc, #276]	; (801355c <atlasStatusFaults+0x268>)
 8013448:	4a50      	ldr	r2, [pc, #320]	; (801358c <atlasStatusFaults+0x298>)
 801344a:	f7ee fad3 	bl	80019f4 <LCD_PutStr>
 801344e:	4603      	mov	r3, r0
 8013450:	461a      	mov	r2, r3
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	4413      	add	r3, r2
 8013456:	617b      	str	r3, [r7, #20]
	if(errorLED.fault3){
 8013458:	4b42      	ldr	r3, [pc, #264]	; (8013564 <atlasStatusFaults+0x270>)
 801345a:	789b      	ldrb	r3, [r3, #2]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d008      	beq.n	8013472 <atlasStatusFaults+0x17e>
		LCD_PutStr(i, j, ATLAS_FAULT3_TRIGGER_MSG, fnt7x10);
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	b298      	uxth	r0, r3
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	b299      	uxth	r1, r3
 8013468:	4b3c      	ldr	r3, [pc, #240]	; (801355c <atlasStatusFaults+0x268>)
 801346a:	4a49      	ldr	r2, [pc, #292]	; (8013590 <atlasStatusFaults+0x29c>)
 801346c:	f7ee fac2 	bl	80019f4 <LCD_PutStr>
 8013470:	e007      	b.n	8013482 <atlasStatusFaults+0x18e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	b298      	uxth	r0, r3
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	b299      	uxth	r1, r3
 801347a:	4b38      	ldr	r3, [pc, #224]	; (801355c <atlasStatusFaults+0x268>)
 801347c:	4a3b      	ldr	r2, [pc, #236]	; (801356c <atlasStatusFaults+0x278>)
 801347e:	f7ee fab9 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	b298      	uxth	r0, r3
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	b299      	uxth	r1, r3
 801348e:	4b33      	ldr	r3, [pc, #204]	; (801355c <atlasStatusFaults+0x268>)
 8013490:	4a40      	ldr	r2, [pc, #256]	; (8013594 <atlasStatusFaults+0x2a0>)
 8013492:	f7ee faaf 	bl	80019f4 <LCD_PutStr>
 8013496:	4603      	mov	r3, r0
 8013498:	461a      	mov	r2, r3
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	4413      	add	r3, r2
 801349e:	617b      	str	r3, [r7, #20]
	if(ZION.DISPLAY_EEPROM_Detected){
 80134a0:	4b34      	ldr	r3, [pc, #208]	; (8013574 <atlasStatusFaults+0x280>)
 80134a2:	691b      	ldr	r3, [r3, #16]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d008      	beq.n	80134ba <atlasStatusFaults+0x1c6>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	b298      	uxth	r0, r3
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	b299      	uxth	r1, r3
 80134b0:	4b2a      	ldr	r3, [pc, #168]	; (801355c <atlasStatusFaults+0x268>)
 80134b2:	4a31      	ldr	r2, [pc, #196]	; (8013578 <atlasStatusFaults+0x284>)
 80134b4:	f7ee fa9e 	bl	80019f4 <LCD_PutStr>
 80134b8:	e007      	b.n	80134ca <atlasStatusFaults+0x1d6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	b298      	uxth	r0, r3
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	b299      	uxth	r1, r3
 80134c2:	4b26      	ldr	r3, [pc, #152]	; (801355c <atlasStatusFaults+0x268>)
 80134c4:	4a2d      	ldr	r2, [pc, #180]	; (801357c <atlasStatusFaults+0x288>)
 80134c6:	f7ee fa95 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80134ce:	693a      	ldr	r2, [r7, #16]
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	4413      	add	r3, r2
 80134d4:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT4_LBL, fnt7x10);
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	b298      	uxth	r0, r3
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	b299      	uxth	r1, r3
 80134de:	4b1f      	ldr	r3, [pc, #124]	; (801355c <atlasStatusFaults+0x268>)
 80134e0:	4a2d      	ldr	r2, [pc, #180]	; (8013598 <atlasStatusFaults+0x2a4>)
 80134e2:	f7ee fa87 	bl	80019f4 <LCD_PutStr>
 80134e6:	4603      	mov	r3, r0
 80134e8:	461a      	mov	r2, r3
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	4413      	add	r3, r2
 80134ee:	617b      	str	r3, [r7, #20]
	if(errorLED.fault4){
 80134f0:	4b1c      	ldr	r3, [pc, #112]	; (8013564 <atlasStatusFaults+0x270>)
 80134f2:	78db      	ldrb	r3, [r3, #3]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d008      	beq.n	801350a <atlasStatusFaults+0x216>
		LCD_PutStr(i, j, ATLAS_FAULT4_TRIGGER_MSG, fnt7x10);
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	b298      	uxth	r0, r3
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	b299      	uxth	r1, r3
 8013500:	4b16      	ldr	r3, [pc, #88]	; (801355c <atlasStatusFaults+0x268>)
 8013502:	4a26      	ldr	r2, [pc, #152]	; (801359c <atlasStatusFaults+0x2a8>)
 8013504:	f7ee fa76 	bl	80019f4 <LCD_PutStr>
 8013508:	e007      	b.n	801351a <atlasStatusFaults+0x226>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	b298      	uxth	r0, r3
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	b299      	uxth	r1, r3
 8013512:	4b12      	ldr	r3, [pc, #72]	; (801355c <atlasStatusFaults+0x268>)
 8013514:	4a15      	ldr	r2, [pc, #84]	; (801356c <atlasStatusFaults+0x278>)
 8013516:	f7ee fa6d 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801351e:	693a      	ldr	r2, [r7, #16]
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	4413      	add	r3, r2
 8013524:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT5_LBL, fnt7x10);
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	b298      	uxth	r0, r3
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	b299      	uxth	r1, r3
 801352e:	4b0b      	ldr	r3, [pc, #44]	; (801355c <atlasStatusFaults+0x268>)
 8013530:	4a1b      	ldr	r2, [pc, #108]	; (80135a0 <atlasStatusFaults+0x2ac>)
 8013532:	f7ee fa5f 	bl	80019f4 <LCD_PutStr>
 8013536:	4603      	mov	r3, r0
 8013538:	461a      	mov	r2, r3
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	4413      	add	r3, r2
 801353e:	617b      	str	r3, [r7, #20]
	if(errorLED.fault5){
 8013540:	4b08      	ldr	r3, [pc, #32]	; (8013564 <atlasStatusFaults+0x270>)
 8013542:	791b      	ldrb	r3, [r3, #4]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d02f      	beq.n	80135a8 <atlasStatusFaults+0x2b4>
		LCD_PutStr(i, j, ATLAS_FAULT5_TRIGGER_MSG, fnt7x10);
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	b298      	uxth	r0, r3
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	b299      	uxth	r1, r3
 8013550:	4b02      	ldr	r3, [pc, #8]	; (801355c <atlasStatusFaults+0x268>)
 8013552:	4a14      	ldr	r2, [pc, #80]	; (80135a4 <atlasStatusFaults+0x2b0>)
 8013554:	f7ee fa4e 	bl	80019f4 <LCD_PutStr>
 8013558:	e02e      	b.n	80135b8 <atlasStatusFaults+0x2c4>
 801355a:	bf00      	nop
 801355c:	0801ba50 	.word	0x0801ba50
 8013560:	0801ad9c 	.word	0x0801ad9c
 8013564:	2000338c 	.word	0x2000338c
 8013568:	0801ada8 	.word	0x0801ada8
 801356c:	0801adb8 	.word	0x0801adb8
 8013570:	0801adc0 	.word	0x0801adc0
 8013574:	20003328 	.word	0x20003328
 8013578:	0801ac74 	.word	0x0801ac74
 801357c:	0801adc8 	.word	0x0801adc8
 8013580:	0801add4 	.word	0x0801add4
 8013584:	0801ade0 	.word	0x0801ade0
 8013588:	0801adf0 	.word	0x0801adf0
 801358c:	0801ace8 	.word	0x0801ace8
 8013590:	0801adf8 	.word	0x0801adf8
 8013594:	0801ae08 	.word	0x0801ae08
 8013598:	0801ae14 	.word	0x0801ae14
 801359c:	0801ae20 	.word	0x0801ae20
 80135a0:	0801ae30 	.word	0x0801ae30
 80135a4:	0801ae3c 	.word	0x0801ae3c
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	b298      	uxth	r0, r3
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	b299      	uxth	r1, r3
 80135b0:	4b65      	ldr	r3, [pc, #404]	; (8013748 <atlasStatusFaults+0x454>)
 80135b2:	4a66      	ldr	r2, [pc, #408]	; (801374c <atlasStatusFaults+0x458>)
 80135b4:	f7ee fa1e 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80135bc:	693a      	ldr	r2, [r7, #16]
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	4413      	add	r3, r2
 80135c2:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT6_LBL, fnt7x10);
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	b298      	uxth	r0, r3
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	b299      	uxth	r1, r3
 80135cc:	4b5e      	ldr	r3, [pc, #376]	; (8013748 <atlasStatusFaults+0x454>)
 80135ce:	4a60      	ldr	r2, [pc, #384]	; (8013750 <atlasStatusFaults+0x45c>)
 80135d0:	f7ee fa10 	bl	80019f4 <LCD_PutStr>
 80135d4:	4603      	mov	r3, r0
 80135d6:	461a      	mov	r2, r3
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	4413      	add	r3, r2
 80135dc:	617b      	str	r3, [r7, #20]
	if(errorLED.fault6){
 80135de:	4b5d      	ldr	r3, [pc, #372]	; (8013754 <atlasStatusFaults+0x460>)
 80135e0:	795b      	ldrb	r3, [r3, #5]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d008      	beq.n	80135f8 <atlasStatusFaults+0x304>
		LCD_PutStr(i, j, ATLAS_FAULT6_TRIGGER_MSG, fnt7x10);
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	b298      	uxth	r0, r3
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	b299      	uxth	r1, r3
 80135ee:	4b56      	ldr	r3, [pc, #344]	; (8013748 <atlasStatusFaults+0x454>)
 80135f0:	4a59      	ldr	r2, [pc, #356]	; (8013758 <atlasStatusFaults+0x464>)
 80135f2:	f7ee f9ff 	bl	80019f4 <LCD_PutStr>
 80135f6:	e007      	b.n	8013608 <atlasStatusFaults+0x314>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	b298      	uxth	r0, r3
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	b299      	uxth	r1, r3
 8013600:	4b51      	ldr	r3, [pc, #324]	; (8013748 <atlasStatusFaults+0x454>)
 8013602:	4a52      	ldr	r2, [pc, #328]	; (801374c <atlasStatusFaults+0x458>)
 8013604:	f7ee f9f6 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801360c:	693a      	ldr	r2, [r7, #16]
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	4413      	add	r3, r2
 8013612:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT7_LBL, fnt7x10);
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	b298      	uxth	r0, r3
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	b299      	uxth	r1, r3
 801361c:	4b4a      	ldr	r3, [pc, #296]	; (8013748 <atlasStatusFaults+0x454>)
 801361e:	4a4f      	ldr	r2, [pc, #316]	; (801375c <atlasStatusFaults+0x468>)
 8013620:	f7ee f9e8 	bl	80019f4 <LCD_PutStr>
 8013624:	4603      	mov	r3, r0
 8013626:	461a      	mov	r2, r3
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	4413      	add	r3, r2
 801362c:	617b      	str	r3, [r7, #20]
	if(errorLED.fault7){
 801362e:	4b49      	ldr	r3, [pc, #292]	; (8013754 <atlasStatusFaults+0x460>)
 8013630:	799b      	ldrb	r3, [r3, #6]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d008      	beq.n	8013648 <atlasStatusFaults+0x354>
		LCD_PutStr(i, j, ATLAS_FAULT7_TRIGGER_MSG, fnt7x10);
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	b298      	uxth	r0, r3
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	b299      	uxth	r1, r3
 801363e:	4b42      	ldr	r3, [pc, #264]	; (8013748 <atlasStatusFaults+0x454>)
 8013640:	4a47      	ldr	r2, [pc, #284]	; (8013760 <atlasStatusFaults+0x46c>)
 8013642:	f7ee f9d7 	bl	80019f4 <LCD_PutStr>
 8013646:	e007      	b.n	8013658 <atlasStatusFaults+0x364>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	b298      	uxth	r0, r3
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	b299      	uxth	r1, r3
 8013650:	4b3d      	ldr	r3, [pc, #244]	; (8013748 <atlasStatusFaults+0x454>)
 8013652:	4a3e      	ldr	r2, [pc, #248]	; (801374c <atlasStatusFaults+0x458>)
 8013654:	f7ee f9ce 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801365c:	693a      	ldr	r2, [r7, #16]
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	4413      	add	r3, r2
 8013662:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT8_LBL, fnt7x10);
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	b298      	uxth	r0, r3
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	b299      	uxth	r1, r3
 801366c:	4b36      	ldr	r3, [pc, #216]	; (8013748 <atlasStatusFaults+0x454>)
 801366e:	4a3d      	ldr	r2, [pc, #244]	; (8013764 <atlasStatusFaults+0x470>)
 8013670:	f7ee f9c0 	bl	80019f4 <LCD_PutStr>
 8013674:	4603      	mov	r3, r0
 8013676:	461a      	mov	r2, r3
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	4413      	add	r3, r2
 801367c:	617b      	str	r3, [r7, #20]
	if(errorLED.fault8){
 801367e:	4b35      	ldr	r3, [pc, #212]	; (8013754 <atlasStatusFaults+0x460>)
 8013680:	7adb      	ldrb	r3, [r3, #11]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d008      	beq.n	8013698 <atlasStatusFaults+0x3a4>
		LCD_PutStr(i, j, ATLAS_FAULT8_TRIGGER_MSG, fnt7x10);
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	b298      	uxth	r0, r3
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	b299      	uxth	r1, r3
 801368e:	4b2e      	ldr	r3, [pc, #184]	; (8013748 <atlasStatusFaults+0x454>)
 8013690:	4a31      	ldr	r2, [pc, #196]	; (8013758 <atlasStatusFaults+0x464>)
 8013692:	f7ee f9af 	bl	80019f4 <LCD_PutStr>
 8013696:	e007      	b.n	80136a8 <atlasStatusFaults+0x3b4>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	b298      	uxth	r0, r3
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	b299      	uxth	r1, r3
 80136a0:	4b29      	ldr	r3, [pc, #164]	; (8013748 <atlasStatusFaults+0x454>)
 80136a2:	4a2a      	ldr	r2, [pc, #168]	; (801374c <atlasStatusFaults+0x458>)
 80136a4:	f7ee f9a6 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80136ac:	693a      	ldr	r2, [r7, #16]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	4413      	add	r3, r2
 80136b2:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT9_LBL, fnt7x10);
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	b298      	uxth	r0, r3
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	b299      	uxth	r1, r3
 80136bc:	4b22      	ldr	r3, [pc, #136]	; (8013748 <atlasStatusFaults+0x454>)
 80136be:	4a2a      	ldr	r2, [pc, #168]	; (8013768 <atlasStatusFaults+0x474>)
 80136c0:	f7ee f998 	bl	80019f4 <LCD_PutStr>
 80136c4:	4603      	mov	r3, r0
 80136c6:	461a      	mov	r2, r3
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	4413      	add	r3, r2
 80136cc:	617b      	str	r3, [r7, #20]
	if(errorLED.fault9){
 80136ce:	4b21      	ldr	r3, [pc, #132]	; (8013754 <atlasStatusFaults+0x460>)
 80136d0:	7b1b      	ldrb	r3, [r3, #12]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d008      	beq.n	80136e8 <atlasStatusFaults+0x3f4>
		LCD_PutStr(i, j, ATLAS_FAULT9_TRIGGER_MSG, fnt7x10);
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	b298      	uxth	r0, r3
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	b299      	uxth	r1, r3
 80136de:	4b1a      	ldr	r3, [pc, #104]	; (8013748 <atlasStatusFaults+0x454>)
 80136e0:	4a1f      	ldr	r2, [pc, #124]	; (8013760 <atlasStatusFaults+0x46c>)
 80136e2:	f7ee f987 	bl	80019f4 <LCD_PutStr>
 80136e6:	e007      	b.n	80136f8 <atlasStatusFaults+0x404>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	b298      	uxth	r0, r3
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	b299      	uxth	r1, r3
 80136f0:	4b15      	ldr	r3, [pc, #84]	; (8013748 <atlasStatusFaults+0x454>)
 80136f2:	4a16      	ldr	r2, [pc, #88]	; (801374c <atlasStatusFaults+0x458>)
 80136f4:	f7ee f97e 	bl	80019f4 <LCD_PutStr>
	}


	//horizontal divider
	j=65;
 80136f8:	2341      	movs	r3, #65	; 0x41
 80136fa:	613b      	str	r3, [r7, #16]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	b29b      	uxth	r3, r3
 8013700:	3b01      	subs	r3, #1
 8013702:	b299      	uxth	r1, r3
 8013704:	4b19      	ldr	r3, [pc, #100]	; (801376c <atlasStatusFaults+0x478>)
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	3b02      	subs	r3, #2
 801370a:	b29a      	uxth	r2, r3
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	b29b      	uxth	r3, r3
 8013710:	3301      	adds	r3, #1
 8013712:	b29b      	uxth	r3, r3
 8013714:	2002      	movs	r0, #2
 8013716:	f7ed fe1f 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 801371a:	23e6      	movs	r3, #230	; 0xe6
 801371c:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	b29b      	uxth	r3, r3
 8013722:	3b03      	subs	r3, #3
 8013724:	b298      	uxth	r0, r3
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	b299      	uxth	r1, r3
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	b29b      	uxth	r3, r3
 801372e:	3303      	adds	r3, #3
 8013730:	b29a      	uxth	r2, r3
 8013732:	4b0f      	ldr	r3, [pc, #60]	; (8013770 <atlasStatusFaults+0x47c>)
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	3b02      	subs	r3, #2
 8013738:	b29b      	uxth	r3, r3
 801373a:	f7ed fe0d 	bl	8001358 <LCD_FillRect>

}
 801373e:	bf00      	nop
 8013740:	3718      	adds	r7, #24
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	0801ba50 	.word	0x0801ba50
 801374c:	0801adb8 	.word	0x0801adb8
 8013750:	0801ae4c 	.word	0x0801ae4c
 8013754:	2000338c 	.word	0x2000338c
 8013758:	0801ae58 	.word	0x0801ae58
 801375c:	0801ae64 	.word	0x0801ae64
 8013760:	0801ae70 	.word	0x0801ae70
 8013764:	0801ae7c 	.word	0x0801ae7c
 8013768:	0801ae88 	.word	0x0801ae88
 801376c:	20028b62 	.word	0x20028b62
 8013770:	20028b64 	.word	0x20028b64

08013774 <atlasBootButtons>:

//Boot button method for the bootButton Task. Defines what buttons/modes are available to the project board and what timings to follow.
//Two main modes -- system already turned on and in a mode, system not in a boot mode.

int atlasBootButtons(int pwrBtnReady){
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
	//only bother running if the power switch is enabled
	while((ATLAS_VSYS > VSYS_FLT)){
 801377c:	bf00      	nop
 801377e:	4ba9      	ldr	r3, [pc, #676]	; (8013a24 <atlasBootButtons+0x2b0>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	4aa9      	ldr	r2, [pc, #676]	; (8013a28 <atlasBootButtons+0x2b4>)
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	4413      	add	r3, r2
 8013788:	edd3 7a00 	vldr	s15, [r3]
 801378c:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8013790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	f340 820f 	ble.w	8013bba <atlasBootButtons+0x446>
		//if we are in a boot mode
	  if(bootButtons.bootMode !=0){
 801379c:	4ba3      	ldr	r3, [pc, #652]	; (8013a2c <atlasBootButtons+0x2b8>)
 801379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 80f6 	beq.w	8013992 <atlasBootButtons+0x21e>
		  bootButtons.modeClear=0;
 80137a6:	4ba1      	ldr	r3, [pc, #644]	; (8013a2c <atlasBootButtons+0x2b8>)
 80137a8:	2200      	movs	r2, #0
 80137aa:	625a      	str	r2, [r3, #36]	; 0x24
		  //set the button that we need for our boot mode
		  if(bootButtons.btn1){ //DPAD UP
 80137ac:	4b9f      	ldr	r3, [pc, #636]	; (8013a2c <atlasBootButtons+0x2b8>)
 80137ae:	689b      	ldr	r3, [r3, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d006      	beq.n	80137c2 <atlasBootButtons+0x4e>
			  ATLAS_DPAD_UP_ON;
 80137b4:	2201      	movs	r2, #1
 80137b6:	2108      	movs	r1, #8
 80137b8:	489d      	ldr	r0, [pc, #628]	; (8013a30 <atlasBootButtons+0x2bc>)
 80137ba:	f7f5 ff7f 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80137be:	2301      	movs	r3, #1
 80137c0:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn2){ //DPAD RIGHT
 80137c2:	4b9a      	ldr	r3, [pc, #616]	; (8013a2c <atlasBootButtons+0x2b8>)
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d006      	beq.n	80137d8 <atlasBootButtons+0x64>
			  ATLAS_DPAD_RIGHT_ON;
 80137ca:	2201      	movs	r2, #1
 80137cc:	2110      	movs	r1, #16
 80137ce:	4898      	ldr	r0, [pc, #608]	; (8013a30 <atlasBootButtons+0x2bc>)
 80137d0:	f7f5 ff74 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80137d4:	2301      	movs	r3, #1
 80137d6:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn3){ //DPAD LEFT
 80137d8:	4b94      	ldr	r3, [pc, #592]	; (8013a2c <atlasBootButtons+0x2b8>)
 80137da:	691b      	ldr	r3, [r3, #16]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d006      	beq.n	80137ee <atlasBootButtons+0x7a>
			  ATLAS_DPAD_LEFT_ON;
 80137e0:	2201      	movs	r2, #1
 80137e2:	2120      	movs	r1, #32
 80137e4:	4892      	ldr	r0, [pc, #584]	; (8013a30 <atlasBootButtons+0x2bc>)
 80137e6:	f7f5 ff69 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80137ea:	2301      	movs	r3, #1
 80137ec:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn4){ //DPAD DOWN
 80137ee:	4b8f      	ldr	r3, [pc, #572]	; (8013a2c <atlasBootButtons+0x2b8>)
 80137f0:	695b      	ldr	r3, [r3, #20]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d007      	beq.n	8013806 <atlasBootButtons+0x92>
			  ATLAS_DPAD_DOWN_ON;
 80137f6:	2201      	movs	r2, #1
 80137f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80137fc:	488c      	ldr	r0, [pc, #560]	; (8013a30 <atlasBootButtons+0x2bc>)
 80137fe:	f7f5 ff5d 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013802:	2301      	movs	r3, #1
 8013804:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn5){
 8013806:	4b89      	ldr	r3, [pc, #548]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013808:	699b      	ldr	r3, [r3, #24]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d007      	beq.n	801381e <atlasBootButtons+0xaa>
			  BTN5_ON;
 801380e:	2201      	movs	r2, #1
 8013810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013814:	4886      	ldr	r0, [pc, #536]	; (8013a30 <atlasBootButtons+0x2bc>)
 8013816:	f7f5 ff51 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 801381a:	2301      	movs	r3, #1
 801381c:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.edl_sw){
 801381e:	4b83      	ldr	r3, [pc, #524]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013820:	69db      	ldr	r3, [r3, #28]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d007      	beq.n	8013836 <atlasBootButtons+0xc2>
			  ATLAS_EDL_ON;
 8013826:	2201      	movs	r2, #1
 8013828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801382c:	4881      	ldr	r0, [pc, #516]	; (8013a34 <atlasBootButtons+0x2c0>)
 801382e:	f7f5 ff45 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013832:	2301      	movs	r3, #1
 8013834:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.ex_sw){
 8013836:	4b7d      	ldr	r3, [pc, #500]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013838:	6a1b      	ldr	r3, [r3, #32]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d007      	beq.n	801384e <atlasBootButtons+0xda>
			  EX_SW_ON;
 801383e:	2201      	movs	r2, #1
 8013840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013844:	487b      	ldr	r0, [pc, #492]	; (8013a34 <atlasBootButtons+0x2c0>)
 8013846:	f7f5 ff39 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 801384a:	2301      	movs	r3, #1
 801384c:	607b      	str	r3, [r7, #4]
		  }
		  //hold down the power button for ~13 seconds to cycle the chip
		  ATLAS_PWR_ON;
 801384e:	2201      	movs	r2, #1
 8013850:	2104      	movs	r1, #4
 8013852:	4877      	ldr	r0, [pc, #476]	; (8013a30 <atlasBootButtons+0x2bc>)
 8013854:	f7f5 ff32 	bl	80096bc <HAL_GPIO_WritePin>
		  //setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
		  for(int x = 0; x<130;x++){
 8013858:	2300      	movs	r3, #0
 801385a:	617b      	str	r3, [r7, #20]
 801385c:	e005      	b.n	801386a <atlasBootButtons+0xf6>
			  HAL_Delay(100);
 801385e:	2064      	movs	r0, #100	; 0x64
 8013860:	f7f4 faac 	bl	8007dbc <HAL_Delay>
		  for(int x = 0; x<130;x++){
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	3301      	adds	r3, #1
 8013868:	617b      	str	r3, [r7, #20]
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	2b81      	cmp	r3, #129	; 0x81
 801386e:	ddf6      	ble.n	801385e <atlasBootButtons+0xea>
		  }
		  //remove power
		  ATLAS_PWR_OFF;
 8013870:	2200      	movs	r2, #0
 8013872:	2104      	movs	r1, #4
 8013874:	486e      	ldr	r0, [pc, #440]	; (8013a30 <atlasBootButtons+0x2bc>)
 8013876:	f7f5 ff21 	bl	80096bc <HAL_GPIO_WritePin>
		  //give the soc a second to fully shutdown
		  HAL_Delay(300);
 801387a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801387e:	f7f4 fa9d 	bl	8007dbc <HAL_Delay>
		  //turn the soc back on
		  ATLAS_PWR_ON;
 8013882:	2201      	movs	r2, #1
 8013884:	2104      	movs	r1, #4
 8013886:	486a      	ldr	r0, [pc, #424]	; (8013a30 <atlasBootButtons+0x2bc>)
 8013888:	f7f5 ff18 	bl	80096bc <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 801388c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013890:	f7f4 fa94 	bl	8007dbc <HAL_Delay>
		  ATLAS_PWR_OFF;
 8013894:	2200      	movs	r2, #0
 8013896:	2104      	movs	r1, #4
 8013898:	4865      	ldr	r0, [pc, #404]	; (8013a30 <atlasBootButtons+0x2bc>)
 801389a:	f7f5 ff0f 	bl	80096bc <HAL_GPIO_WritePin>
		  //setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
		  //wait four seconds while pressing the mode button for the soc to recognize the button press
		  if(pwrBtnReady){
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d00d      	beq.n	80138c0 <atlasBootButtons+0x14c>
			  for(int x = 0; x<40;x++){
 80138a4:	2300      	movs	r3, #0
 80138a6:	613b      	str	r3, [r7, #16]
 80138a8:	e005      	b.n	80138b6 <atlasBootButtons+0x142>
				  HAL_Delay(100);
 80138aa:	2064      	movs	r0, #100	; 0x64
 80138ac:	f7f4 fa86 	bl	8007dbc <HAL_Delay>
			  for(int x = 0; x<40;x++){
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	3301      	adds	r3, #1
 80138b4:	613b      	str	r3, [r7, #16]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	2b27      	cmp	r3, #39	; 0x27
 80138ba:	ddf6      	ble.n	80138aa <atlasBootButtons+0x136>
			  }
			  pwrBtnReady=0;
 80138bc:	2300      	movs	r3, #0
 80138be:	607b      	str	r3, [r7, #4]
		  }
		  //turn off all our buttons
		  ATLAS_DPAD_UP_OFF;
 80138c0:	2200      	movs	r2, #0
 80138c2:	2108      	movs	r1, #8
 80138c4:	485a      	ldr	r0, [pc, #360]	; (8013a30 <atlasBootButtons+0x2bc>)
 80138c6:	f7f5 fef9 	bl	80096bc <HAL_GPIO_WritePin>
		  ATLAS_DPAD_RIGHT_OFF;
 80138ca:	2200      	movs	r2, #0
 80138cc:	2110      	movs	r1, #16
 80138ce:	4858      	ldr	r0, [pc, #352]	; (8013a30 <atlasBootButtons+0x2bc>)
 80138d0:	f7f5 fef4 	bl	80096bc <HAL_GPIO_WritePin>
		  ATLAS_DPAD_LEFT_OFF;
 80138d4:	2200      	movs	r2, #0
 80138d6:	2120      	movs	r1, #32
 80138d8:	4855      	ldr	r0, [pc, #340]	; (8013a30 <atlasBootButtons+0x2bc>)
 80138da:	f7f5 feef 	bl	80096bc <HAL_GPIO_WritePin>
		  ATLAS_DPAD_DOWN_OFF;
 80138de:	2200      	movs	r2, #0
 80138e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80138e4:	4852      	ldr	r0, [pc, #328]	; (8013a30 <atlasBootButtons+0x2bc>)
 80138e6:	f7f5 fee9 	bl	80096bc <HAL_GPIO_WritePin>
		  BTN5_OFF;
 80138ea:	2200      	movs	r2, #0
 80138ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80138f0:	484f      	ldr	r0, [pc, #316]	; (8013a30 <atlasBootButtons+0x2bc>)
 80138f2:	f7f5 fee3 	bl	80096bc <HAL_GPIO_WritePin>
		  ATLAS_EDL_OFF;
 80138f6:	2200      	movs	r2, #0
 80138f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80138fc:	484d      	ldr	r0, [pc, #308]	; (8013a34 <atlasBootButtons+0x2c0>)
 80138fe:	f7f5 fedd 	bl	80096bc <HAL_GPIO_WritePin>
		  EX_SW_OFF;
 8013902:	2200      	movs	r2, #0
 8013904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013908:	484a      	ldr	r0, [pc, #296]	; (8013a34 <atlasBootButtons+0x2c0>)
 801390a:	f7f5 fed7 	bl	80096bc <HAL_GPIO_WritePin>
		  //set our bootMode based off the button pressed
		  if(bootButtons.btn1){
 801390e:	4b47      	ldr	r3, [pc, #284]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013910:	689b      	ldr	r3, [r3, #8]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d003      	beq.n	801391e <atlasBootButtons+0x1aa>
			  bootButtons.bootMode= RECOVERY;
 8013916:	4b45      	ldr	r3, [pc, #276]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013918:	2204      	movs	r2, #4
 801391a:	629a      	str	r2, [r3, #40]	; 0x28
 801391c:	e01a      	b.n	8013954 <atlasBootButtons+0x1e0>
			  //errorLEDState[RECOVERY_LED]=1;
		  }
		  else if(bootButtons.btn2){
 801391e:	4b43      	ldr	r3, [pc, #268]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d003      	beq.n	801392e <atlasBootButtons+0x1ba>
			  bootButtons.bootMode= MASS_STORAGE;
 8013926:	4b41      	ldr	r3, [pc, #260]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013928:	2205      	movs	r2, #5
 801392a:	629a      	str	r2, [r3, #40]	; 0x28
 801392c:	e012      	b.n	8013954 <atlasBootButtons+0x1e0>
			 // errorLEDState[MASS_STORAGE_LED]=1;
		  }
		  else if(bootButtons.btn3){
 801392e:	4b3f      	ldr	r3, [pc, #252]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013930:	691b      	ldr	r3, [r3, #16]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d003      	beq.n	801393e <atlasBootButtons+0x1ca>
			  bootButtons.bootMode= UEFI;
 8013936:	4b3d      	ldr	r3, [pc, #244]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013938:	2202      	movs	r2, #2
 801393a:	629a      	str	r2, [r3, #40]	; 0x28
 801393c:	e00a      	b.n	8013954 <atlasBootButtons+0x1e0>
			  //errorLEDState[UEFI_LED]=1;
		  }
		  else if(bootButtons.edl_sw){
 801393e:	4b3b      	ldr	r3, [pc, #236]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013940:	69db      	ldr	r3, [r3, #28]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d003      	beq.n	801394e <atlasBootButtons+0x1da>
			  bootButtons.bootMode= EDL;
 8013946:	4b39      	ldr	r3, [pc, #228]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013948:	2203      	movs	r2, #3
 801394a:	629a      	str	r2, [r3, #40]	; 0x28
 801394c:	e002      	b.n	8013954 <atlasBootButtons+0x1e0>
			  //errorLEDState[EDL_LED]=1;
		  }
		  else{
			  bootButtons.bootMode=STANDARD;
 801394e:	4b37      	ldr	r3, [pc, #220]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013950:	2201      	movs	r2, #1
 8013952:	629a      	str	r2, [r3, #40]	; 0x28
			  //errorLEDState[STANDARD_LED]=1;
		  }
		  //clear the bootButton variables and set the clear flag for the display menu.
		  bootButtons.btn0=0;
 8013954:	4b35      	ldr	r3, [pc, #212]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013956:	2200      	movs	r2, #0
 8013958:	605a      	str	r2, [r3, #4]
		  bootButtons.btn1=0;
 801395a:	4b34      	ldr	r3, [pc, #208]	; (8013a2c <atlasBootButtons+0x2b8>)
 801395c:	2200      	movs	r2, #0
 801395e:	609a      	str	r2, [r3, #8]
		  bootButtons.btn2=0;
 8013960:	4b32      	ldr	r3, [pc, #200]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013962:	2200      	movs	r2, #0
 8013964:	60da      	str	r2, [r3, #12]
		  bootButtons.btn3=0;
 8013966:	4b31      	ldr	r3, [pc, #196]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013968:	2200      	movs	r2, #0
 801396a:	611a      	str	r2, [r3, #16]
		  bootButtons.btn4=0;
 801396c:	4b2f      	ldr	r3, [pc, #188]	; (8013a2c <atlasBootButtons+0x2b8>)
 801396e:	2200      	movs	r2, #0
 8013970:	615a      	str	r2, [r3, #20]
		  bootButtons.btn5=0;
 8013972:	4b2e      	ldr	r3, [pc, #184]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013974:	2200      	movs	r2, #0
 8013976:	619a      	str	r2, [r3, #24]
		  bootButtons.edl_sw=0;
 8013978:	4b2c      	ldr	r3, [pc, #176]	; (8013a2c <atlasBootButtons+0x2b8>)
 801397a:	2200      	movs	r2, #0
 801397c:	61da      	str	r2, [r3, #28]
		  bootButtons.ex_sw=0;
 801397e:	4b2b      	ldr	r3, [pc, #172]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013980:	2200      	movs	r2, #0
 8013982:	621a      	str	r2, [r3, #32]
		  bootButtons.modeClear=1;
 8013984:	4b29      	ldr	r3, [pc, #164]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013986:	2201      	movs	r2, #1
 8013988:	625a      	str	r2, [r3, #36]	; 0x24
		  bootButtons.bootModeSet=0;
 801398a:	4b28      	ldr	r3, [pc, #160]	; (8013a2c <atlasBootButtons+0x2b8>)
 801398c:	2200      	movs	r2, #0
 801398e:	601a      	str	r2, [r3, #0]
		  else if(!(bootButtons.ex_sw)){
			  EX_SW_OFF;
			  //osDelay(300);
		  }
	  }
	  break;
 8013990:	e112      	b.n	8013bb8 <atlasBootButtons+0x444>
		  bootButtons.modeClear=0;
 8013992:	4b26      	ldr	r3, [pc, #152]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013994:	2200      	movs	r2, #0
 8013996:	625a      	str	r2, [r3, #36]	; 0x24
		  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8013998:	4b24      	ldr	r3, [pc, #144]	; (8013a2c <atlasBootButtons+0x2b8>)
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d102      	bne.n	80139a6 <atlasBootButtons+0x232>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d06d      	beq.n	8013a82 <atlasBootButtons+0x30e>
			  ATLAS_PWR_ON;
 80139a6:	2201      	movs	r2, #1
 80139a8:	2104      	movs	r1, #4
 80139aa:	4821      	ldr	r0, [pc, #132]	; (8013a30 <atlasBootButtons+0x2bc>)
 80139ac:	f7f5 fe86 	bl	80096bc <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80139b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80139b4:	f7f4 fa02 	bl	8007dbc <HAL_Delay>
			  ATLAS_PWR_OFF;
 80139b8:	2200      	movs	r2, #0
 80139ba:	2104      	movs	r1, #4
 80139bc:	481c      	ldr	r0, [pc, #112]	; (8013a30 <atlasBootButtons+0x2bc>)
 80139be:	f7f5 fe7d 	bl	80096bc <HAL_GPIO_WritePin>
			  if(pwrBtnReady){
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00d      	beq.n	80139e4 <atlasBootButtons+0x270>
				  for(int x = 0; x<40;x++){
 80139c8:	2300      	movs	r3, #0
 80139ca:	60fb      	str	r3, [r7, #12]
 80139cc:	e005      	b.n	80139da <atlasBootButtons+0x266>
						  HAL_Delay(100);
 80139ce:	2064      	movs	r0, #100	; 0x64
 80139d0:	f7f4 f9f4 	bl	8007dbc <HAL_Delay>
				  for(int x = 0; x<40;x++){
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	3301      	adds	r3, #1
 80139d8:	60fb      	str	r3, [r7, #12]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2b27      	cmp	r3, #39	; 0x27
 80139de:	ddf6      	ble.n	80139ce <atlasBootButtons+0x25a>
					  pwrBtnReady=0;
 80139e0:	2300      	movs	r3, #0
 80139e2:	607b      	str	r3, [r7, #4]
			  if(bootButtons.btn0){
 80139e4:	4b11      	ldr	r3, [pc, #68]	; (8013a2c <atlasBootButtons+0x2b8>)
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d003      	beq.n	80139f4 <atlasBootButtons+0x280>
				  bootButtons.bootMode= STANDARD;
 80139ec:	4b0f      	ldr	r3, [pc, #60]	; (8013a2c <atlasBootButtons+0x2b8>)
 80139ee:	2201      	movs	r2, #1
 80139f0:	629a      	str	r2, [r3, #40]	; 0x28
 80139f2:	e028      	b.n	8013a46 <atlasBootButtons+0x2d2>
			  else if(bootButtons.btn1){
 80139f4:	4b0d      	ldr	r3, [pc, #52]	; (8013a2c <atlasBootButtons+0x2b8>)
 80139f6:	689b      	ldr	r3, [r3, #8]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d003      	beq.n	8013a04 <atlasBootButtons+0x290>
				  bootButtons.bootMode= RECOVERY;
 80139fc:	4b0b      	ldr	r3, [pc, #44]	; (8013a2c <atlasBootButtons+0x2b8>)
 80139fe:	2204      	movs	r2, #4
 8013a00:	629a      	str	r2, [r3, #40]	; 0x28
 8013a02:	e020      	b.n	8013a46 <atlasBootButtons+0x2d2>
			  else if(bootButtons.btn2){
 8013a04:	4b09      	ldr	r3, [pc, #36]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d003      	beq.n	8013a14 <atlasBootButtons+0x2a0>
				  bootButtons.bootMode= MASS_STORAGE;
 8013a0c:	4b07      	ldr	r3, [pc, #28]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013a0e:	2205      	movs	r2, #5
 8013a10:	629a      	str	r2, [r3, #40]	; 0x28
 8013a12:	e018      	b.n	8013a46 <atlasBootButtons+0x2d2>
			  else if(bootButtons.btn3){
 8013a14:	4b05      	ldr	r3, [pc, #20]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013a16:	691b      	ldr	r3, [r3, #16]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d00d      	beq.n	8013a38 <atlasBootButtons+0x2c4>
				  bootButtons.bootMode= UEFI;
 8013a1c:	4b03      	ldr	r3, [pc, #12]	; (8013a2c <atlasBootButtons+0x2b8>)
 8013a1e:	2202      	movs	r2, #2
 8013a20:	629a      	str	r2, [r3, #40]	; 0x28
 8013a22:	e010      	b.n	8013a46 <atlasBootButtons+0x2d2>
 8013a24:	20000174 	.word	0x20000174
 8013a28:	2003119c 	.word	0x2003119c
 8013a2c:	20003360 	.word	0x20003360
 8013a30:	40021400 	.word	0x40021400
 8013a34:	40020400 	.word	0x40020400
			  else if(bootButtons.edl_sw){
 8013a38:	4b62      	ldr	r3, [pc, #392]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a3a:	69db      	ldr	r3, [r3, #28]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d002      	beq.n	8013a46 <atlasBootButtons+0x2d2>
				  bootButtons.bootMode= EDL;
 8013a40:	4b60      	ldr	r3, [pc, #384]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a42:	2203      	movs	r2, #3
 8013a44:	629a      	str	r2, [r3, #40]	; 0x28
			  bootButtons.btn0=0;
 8013a46:	4b5f      	ldr	r3, [pc, #380]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a48:	2200      	movs	r2, #0
 8013a4a:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8013a4c:	4b5d      	ldr	r3, [pc, #372]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a4e:	2200      	movs	r2, #0
 8013a50:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8013a52:	4b5c      	ldr	r3, [pc, #368]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8013a58:	4b5a      	ldr	r3, [pc, #360]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8013a5e:	4b59      	ldr	r3, [pc, #356]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a60:	2200      	movs	r2, #0
 8013a62:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8013a64:	4b57      	ldr	r3, [pc, #348]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8013a6a:	4b56      	ldr	r3, [pc, #344]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8013a70:	4b54      	ldr	r3, [pc, #336]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8013a76:	4b53      	ldr	r3, [pc, #332]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a78:	2201      	movs	r2, #1
 8013a7a:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8013a7c:	4b51      	ldr	r3, [pc, #324]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a7e:	2200      	movs	r2, #0
 8013a80:	601a      	str	r2, [r3, #0]
		  if(bootButtons.btn1){ //DPAD UP
 8013a82:	4b50      	ldr	r3, [pc, #320]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a84:	689b      	ldr	r3, [r3, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d007      	beq.n	8013a9a <atlasBootButtons+0x326>
			  ATLAS_DPAD_UP_ON;
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	2108      	movs	r1, #8
 8013a8e:	484e      	ldr	r0, [pc, #312]	; (8013bc8 <atlasBootButtons+0x454>)
 8013a90:	f7f5 fe14 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013a94:	2301      	movs	r3, #1
 8013a96:	607b      	str	r3, [r7, #4]
 8013a98:	e008      	b.n	8013aac <atlasBootButtons+0x338>
		  else if(!(bootButtons.btn1)){ //DPAD UP
 8013a9a:	4b4a      	ldr	r3, [pc, #296]	; (8013bc4 <atlasBootButtons+0x450>)
 8013a9c:	689b      	ldr	r3, [r3, #8]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d104      	bne.n	8013aac <atlasBootButtons+0x338>
			  ATLAS_DPAD_UP_OFF;
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	2108      	movs	r1, #8
 8013aa6:	4848      	ldr	r0, [pc, #288]	; (8013bc8 <atlasBootButtons+0x454>)
 8013aa8:	f7f5 fe08 	bl	80096bc <HAL_GPIO_WritePin>
		  if(bootButtons.btn2){ //DPAD RIGHT
 8013aac:	4b45      	ldr	r3, [pc, #276]	; (8013bc4 <atlasBootButtons+0x450>)
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d007      	beq.n	8013ac4 <atlasBootButtons+0x350>
			  ATLAS_DPAD_RIGHT_ON;
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	2110      	movs	r1, #16
 8013ab8:	4843      	ldr	r0, [pc, #268]	; (8013bc8 <atlasBootButtons+0x454>)
 8013aba:	f7f5 fdff 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	607b      	str	r3, [r7, #4]
 8013ac2:	e008      	b.n	8013ad6 <atlasBootButtons+0x362>
		  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 8013ac4:	4b3f      	ldr	r3, [pc, #252]	; (8013bc4 <atlasBootButtons+0x450>)
 8013ac6:	68db      	ldr	r3, [r3, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d104      	bne.n	8013ad6 <atlasBootButtons+0x362>
			  ATLAS_DPAD_RIGHT_OFF;
 8013acc:	2200      	movs	r2, #0
 8013ace:	2110      	movs	r1, #16
 8013ad0:	483d      	ldr	r0, [pc, #244]	; (8013bc8 <atlasBootButtons+0x454>)
 8013ad2:	f7f5 fdf3 	bl	80096bc <HAL_GPIO_WritePin>
		  if(bootButtons.btn3){ //DPAD LEFT
 8013ad6:	4b3b      	ldr	r3, [pc, #236]	; (8013bc4 <atlasBootButtons+0x450>)
 8013ad8:	691b      	ldr	r3, [r3, #16]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d007      	beq.n	8013aee <atlasBootButtons+0x37a>
			  ATLAS_DPAD_LEFT_ON;
 8013ade:	2201      	movs	r2, #1
 8013ae0:	2120      	movs	r1, #32
 8013ae2:	4839      	ldr	r0, [pc, #228]	; (8013bc8 <atlasBootButtons+0x454>)
 8013ae4:	f7f5 fdea 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013ae8:	2301      	movs	r3, #1
 8013aea:	607b      	str	r3, [r7, #4]
 8013aec:	e008      	b.n	8013b00 <atlasBootButtons+0x38c>
		  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8013aee:	4b35      	ldr	r3, [pc, #212]	; (8013bc4 <atlasBootButtons+0x450>)
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d104      	bne.n	8013b00 <atlasBootButtons+0x38c>
			  ATLAS_DPAD_LEFT_OFF;
 8013af6:	2200      	movs	r2, #0
 8013af8:	2120      	movs	r1, #32
 8013afa:	4833      	ldr	r0, [pc, #204]	; (8013bc8 <atlasBootButtons+0x454>)
 8013afc:	f7f5 fdde 	bl	80096bc <HAL_GPIO_WritePin>
		  if(bootButtons.btn4){
 8013b00:	4b30      	ldr	r3, [pc, #192]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b02:	695b      	ldr	r3, [r3, #20]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d008      	beq.n	8013b1a <atlasBootButtons+0x3a6>
			  ATLAS_DPAD_DOWN_ON;
 8013b08:	2201      	movs	r2, #1
 8013b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b0e:	482e      	ldr	r0, [pc, #184]	; (8013bc8 <atlasBootButtons+0x454>)
 8013b10:	f7f5 fdd4 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013b14:	2301      	movs	r3, #1
 8013b16:	607b      	str	r3, [r7, #4]
 8013b18:	e009      	b.n	8013b2e <atlasBootButtons+0x3ba>
		  else if(!(bootButtons.btn4)){
 8013b1a:	4b2a      	ldr	r3, [pc, #168]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b1c:	695b      	ldr	r3, [r3, #20]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d105      	bne.n	8013b2e <atlasBootButtons+0x3ba>
			  ATLAS_DPAD_DOWN_OFF;
 8013b22:	2200      	movs	r2, #0
 8013b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b28:	4827      	ldr	r0, [pc, #156]	; (8013bc8 <atlasBootButtons+0x454>)
 8013b2a:	f7f5 fdc7 	bl	80096bc <HAL_GPIO_WritePin>
		  if(bootButtons.btn5){
 8013b2e:	4b25      	ldr	r3, [pc, #148]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b30:	699b      	ldr	r3, [r3, #24]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d008      	beq.n	8013b48 <atlasBootButtons+0x3d4>
			  BTN5_ON;
 8013b36:	2201      	movs	r2, #1
 8013b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013b3c:	4822      	ldr	r0, [pc, #136]	; (8013bc8 <atlasBootButtons+0x454>)
 8013b3e:	f7f5 fdbd 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013b42:	2301      	movs	r3, #1
 8013b44:	607b      	str	r3, [r7, #4]
 8013b46:	e009      	b.n	8013b5c <atlasBootButtons+0x3e8>
		  else if(!(bootButtons.btn5)){
 8013b48:	4b1e      	ldr	r3, [pc, #120]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b4a:	699b      	ldr	r3, [r3, #24]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d105      	bne.n	8013b5c <atlasBootButtons+0x3e8>
			  BTN5_OFF;
 8013b50:	2200      	movs	r2, #0
 8013b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013b56:	481c      	ldr	r0, [pc, #112]	; (8013bc8 <atlasBootButtons+0x454>)
 8013b58:	f7f5 fdb0 	bl	80096bc <HAL_GPIO_WritePin>
		  if(bootButtons.edl_sw){
 8013b5c:	4b19      	ldr	r3, [pc, #100]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b5e:	69db      	ldr	r3, [r3, #28]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d008      	beq.n	8013b76 <atlasBootButtons+0x402>
			  ATLAS_EDL_ON;
 8013b64:	2201      	movs	r2, #1
 8013b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013b6a:	4818      	ldr	r0, [pc, #96]	; (8013bcc <atlasBootButtons+0x458>)
 8013b6c:	f7f5 fda6 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013b70:	2301      	movs	r3, #1
 8013b72:	607b      	str	r3, [r7, #4]
 8013b74:	e009      	b.n	8013b8a <atlasBootButtons+0x416>
		  else if(!(bootButtons.edl_sw)){
 8013b76:	4b13      	ldr	r3, [pc, #76]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b78:	69db      	ldr	r3, [r3, #28]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d105      	bne.n	8013b8a <atlasBootButtons+0x416>
			  ATLAS_EDL_OFF;
 8013b7e:	2200      	movs	r2, #0
 8013b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013b84:	4811      	ldr	r0, [pc, #68]	; (8013bcc <atlasBootButtons+0x458>)
 8013b86:	f7f5 fd99 	bl	80096bc <HAL_GPIO_WritePin>
		  if(bootButtons.ex_sw){
 8013b8a:	4b0e      	ldr	r3, [pc, #56]	; (8013bc4 <atlasBootButtons+0x450>)
 8013b8c:	6a1b      	ldr	r3, [r3, #32]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d008      	beq.n	8013ba4 <atlasBootButtons+0x430>
			  EX_SW_ON;
 8013b92:	2201      	movs	r2, #1
 8013b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013b98:	480c      	ldr	r0, [pc, #48]	; (8013bcc <atlasBootButtons+0x458>)
 8013b9a:	f7f5 fd8f 	bl	80096bc <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	607b      	str	r3, [r7, #4]
	  break;
 8013ba2:	e009      	b.n	8013bb8 <atlasBootButtons+0x444>
		  else if(!(bootButtons.ex_sw)){
 8013ba4:	4b07      	ldr	r3, [pc, #28]	; (8013bc4 <atlasBootButtons+0x450>)
 8013ba6:	6a1b      	ldr	r3, [r3, #32]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d105      	bne.n	8013bb8 <atlasBootButtons+0x444>
			  EX_SW_OFF;
 8013bac:	2200      	movs	r2, #0
 8013bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013bb2:	4806      	ldr	r0, [pc, #24]	; (8013bcc <atlasBootButtons+0x458>)
 8013bb4:	f7f5 fd82 	bl	80096bc <HAL_GPIO_WritePin>
	  break;
 8013bb8:	bf00      	nop
	}
	return pwrBtnReady;
 8013bba:	687b      	ldr	r3, [r7, #4]
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3718      	adds	r7, #24
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	20003360 	.word	0x20003360
 8013bc8:	40021400 	.word	0x40021400
 8013bcc:	40020400 	.word	0x40020400

08013bd0 <atlasErrorLEDs>:

void atlasErrorLEDs(){
 8013bd0:	b5b0      	push	{r4, r5, r7, lr}
 8013bd2:	b092      	sub	sp, #72	; 0x48
 8013bd4:	af02      	add	r7, sp, #8
	float *presentADCValues;
	// An array of voltage rails that are monitored for faults.  Each element maps to the apporpriate ADC channel for monitoring
		// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
		uint8_t monitor_rails[] = {VSYS, VREG_BOB, VREG_S5A, VREG_S6C};
 8013bd6:	4bb2      	ldr	r3, [pc, #712]	; (8013ea0 <atlasErrorLEDs+0x2d0>)
 8013bd8:	62bb      	str	r3, [r7, #40]	; 0x28

		// An array of falling edge fault thresholds for the voltage rails that are monitored for faults.  Size of the array and index for each fault should match the voltage name in monitor_rails[].
		double monitor_fault_thresholds[] = {VSYS_FLT, VREG_BOB_FLT, VREG_S5A_FLT, VREG_S6C_FLT};
 8013bda:	4bb2      	ldr	r3, [pc, #712]	; (8013ea4 <atlasErrorLEDs+0x2d4>)
 8013bdc:	f107 0408 	add.w	r4, r7, #8
 8013be0:	461d      	mov	r5, r3
 8013be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013be6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// An array of platform gpio inputs that are monitored for faults.  Each element maps to the appropriate STM GPIO input for monitoring
		// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
		uint8_t monitor_gpio[] = {SOC_IN6, SOC_IN7, SOC_IN8, SOC_IN11};
 8013bee:	4bae      	ldr	r3, [pc, #696]	; (8013ea8 <atlasErrorLEDs+0x2d8>)
 8013bf0:	607b      	str	r3, [r7, #4]

		// An array of logic fault thresholds for the GPIO input rails that are monitored for faults.  The fault thresholds should match the mapping used in monitor_gpio[].
		uint8_t gpio_thresholds[] = {SOC_IN6_FLT, SOC_IN7_FLT, SOC_IN8_FLT, SOC_IN11_FLT};
 8013bf2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8013bf6:	603b      	str	r3, [r7, #0]

		uint8_t * errorLEDptr;
		  uint8_t R = false;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  uint8_t G = false;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  uint8_t B = false;
 8013c04:	2300      	movs	r3, #0
 8013c06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  // Check that the ADC are available, and if they are, retrieve the last recorded ADC outputs.
		  if(adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8013c0a:	4ba8      	ldr	r3, [pc, #672]	; (8013eac <atlasErrorLEDs+0x2dc>)
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d00b      	beq.n	8013c2a <atlasErrorLEDs+0x5a>
 8013c12:	4ba6      	ldr	r3, [pc, #664]	; (8013eac <atlasErrorLEDs+0x2dc>)
 8013c14:	785b      	ldrb	r3, [r3, #1]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d007      	beq.n	8013c2a <atlasErrorLEDs+0x5a>
 8013c1a:	4ba4      	ldr	r3, [pc, #656]	; (8013eac <atlasErrorLEDs+0x2dc>)
 8013c1c:	789b      	ldrb	r3, [r3, #2]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d003      	beq.n	8013c2a <atlasErrorLEDs+0x5a>
			  presentADCValues = getADCValues();
 8013c22:	f7f0 f95d 	bl	8003ee0 <getADCValues>
 8013c26:	4603      	mov	r3, r0
 8013c28:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }

		  // Iterate through all the ADC channels that are monitored for faults
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8013c30:	e049      	b.n	8013cc6 <atlasErrorLEDs+0xf6>
		  {
			  // This switch statement maps the appropriate errorLED struct fault flag to the errorLEDptr so that we can clear or set it.
			  // To add more faults simply add more case statements.
			  // PLATFORM TEMPLATE: edit the switch statement labels to match the entries in monitor_rails[] array.
			  switch (monitor_rails[rail])
 8013c32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013c36:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013c3a:	4413      	add	r3, r2
 8013c3c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8013c40:	2b03      	cmp	r3, #3
 8013c42:	d817      	bhi.n	8013c74 <atlasErrorLEDs+0xa4>
 8013c44:	a201      	add	r2, pc, #4	; (adr r2, 8013c4c <atlasErrorLEDs+0x7c>)
 8013c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c4a:	bf00      	nop
 8013c4c:	08013c5d 	.word	0x08013c5d
 8013c50:	08013c63 	.word	0x08013c63
 8013c54:	08013c69 	.word	0x08013c69
 8013c58:	08013c6f 	.word	0x08013c6f
			  {
			  case VSYS:
				  errorLEDptr = &errorLED.vsysPMIFault;
 8013c5c:	4b94      	ldr	r3, [pc, #592]	; (8013eb0 <atlasErrorLEDs+0x2e0>)
 8013c5e:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013c60:	e009      	b.n	8013c76 <atlasErrorLEDs+0xa6>
			  case VREG_BOB:
				  errorLEDptr = &errorLED.fault3;
 8013c62:	4b94      	ldr	r3, [pc, #592]	; (8013eb4 <atlasErrorLEDs+0x2e4>)
 8013c64:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013c66:	e006      	b.n	8013c76 <atlasErrorLEDs+0xa6>
			  case VREG_S5A:
				  errorLEDptr = &errorLED.fault4;
 8013c68:	4b93      	ldr	r3, [pc, #588]	; (8013eb8 <atlasErrorLEDs+0x2e8>)
 8013c6a:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013c6c:	e003      	b.n	8013c76 <atlasErrorLEDs+0xa6>
			  case VREG_S6C:
				  errorLEDptr = &errorLED.fault5;
 8013c6e:	4b93      	ldr	r3, [pc, #588]	; (8013ebc <atlasErrorLEDs+0x2ec>)
 8013c70:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013c72:	e000      	b.n	8013c76 <atlasErrorLEDs+0xa6>
			  default:
				  break;
 8013c74:	bf00      	nop
			  }
			  // If the voltage level is above the low fault threshold then clear the fault flag.
			  if (*(presentADCValues+monitor_rails[rail]) > monitor_fault_thresholds[rail])
 8013c76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013c7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013c7e:	4413      	add	r3, r2
 8013c80:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c88:	4413      	add	r3, r2
 8013c8a:	edd3 7a00 	vldr	s15, [r3]
 8013c8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8013c92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013c96:	00db      	lsls	r3, r3, #3
 8013c98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013c9c:	4413      	add	r3, r2
 8013c9e:	3b38      	subs	r3, #56	; 0x38
 8013ca0:	ed93 7b00 	vldr	d7, [r3]
 8013ca4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cac:	dd03      	ble.n	8013cb6 <atlasErrorLEDs+0xe6>
			  {
				  *errorLEDptr = false;
 8013cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	701a      	strb	r2, [r3, #0]
 8013cb4:	e002      	b.n	8013cbc <atlasErrorLEDs+0xec>
			  }
			  else
			  {
				  *errorLEDptr = true;
 8013cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb8:	2201      	movs	r2, #1
 8013cba:	701a      	strb	r2, [r3, #0]
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8013cbc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8013cc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013cca:	2b03      	cmp	r3, #3
 8013ccc:	d9b1      	bls.n	8013c32 <atlasErrorLEDs+0x62>
			  }
		  }

		  // Check GPIO inputs for faults. Iterate through the inputs that are supposed to be monitored for faults.
		  for (uint8_t input = 0; input < sizeof(monitor_gpio)/sizeof(monitor_gpio[0]); input++)
 8013cce:	2300      	movs	r3, #0
 8013cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013cd4:	e050      	b.n	8013d78 <atlasErrorLEDs+0x1a8>
		  {
			  // This switch statement maps the appropriate errorLED struct fault flag to the errorLEDptr so that we can clear or set it.
			  // To add more faults simply add more case statements.  Remember there is a maximum number of faults that can be displayed.
			  // PLATFORM TEMPLATE: edit the switch statement labels to match the entries in monitor_gpio[] array.
			  switch (monitor_gpio[input])
 8013cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013cda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013cde:	4413      	add	r3, r2
 8013ce0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8013ce4:	2b0b      	cmp	r3, #11
 8013ce6:	d827      	bhi.n	8013d38 <atlasErrorLEDs+0x168>
 8013ce8:	a201      	add	r2, pc, #4	; (adr r2, 8013cf0 <atlasErrorLEDs+0x120>)
 8013cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cee:	bf00      	nop
 8013cf0:	08013d21 	.word	0x08013d21
 8013cf4:	08013d39 	.word	0x08013d39
 8013cf8:	08013d39 	.word	0x08013d39
 8013cfc:	08013d27 	.word	0x08013d27
 8013d00:	08013d39 	.word	0x08013d39
 8013d04:	08013d39 	.word	0x08013d39
 8013d08:	08013d39 	.word	0x08013d39
 8013d0c:	08013d39 	.word	0x08013d39
 8013d10:	08013d2d 	.word	0x08013d2d
 8013d14:	08013d39 	.word	0x08013d39
 8013d18:	08013d39 	.word	0x08013d39
 8013d1c:	08013d33 	.word	0x08013d33
			  {
			  case SOC_IN0:
				  errorLEDptr = &errorLED.fault6;
 8013d20:	4b67      	ldr	r3, [pc, #412]	; (8013ec0 <atlasErrorLEDs+0x2f0>)
 8013d22:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013d24:	e009      	b.n	8013d3a <atlasErrorLEDs+0x16a>
			  case SOC_IN3:
				  errorLEDptr = &errorLED.fault7;
 8013d26:	4b67      	ldr	r3, [pc, #412]	; (8013ec4 <atlasErrorLEDs+0x2f4>)
 8013d28:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013d2a:	e006      	b.n	8013d3a <atlasErrorLEDs+0x16a>
			  case SOC_IN8:
				  errorLEDptr = &errorLED.fault8;
 8013d2c:	4b66      	ldr	r3, [pc, #408]	; (8013ec8 <atlasErrorLEDs+0x2f8>)
 8013d2e:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013d30:	e003      	b.n	8013d3a <atlasErrorLEDs+0x16a>
			  case SOC_IN11:
				  errorLEDptr = &errorLED.fault9;
 8013d32:	4b66      	ldr	r3, [pc, #408]	; (8013ecc <atlasErrorLEDs+0x2fc>)
 8013d34:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013d36:	e000      	b.n	8013d3a <atlasErrorLEDs+0x16a>
			  default:
				  break;
 8013d38:	bf00      	nop
			  }
			  // If the voltage level is above the low fault threshold then clear the fault flag.
			  if (gpioInputBuf[monitor_gpio[input]] == gpio_thresholds[input])
 8013d3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d3e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013d42:	4413      	add	r3, r2
 8013d44:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8013d48:	461a      	mov	r2, r3
 8013d4a:	4b61      	ldr	r3, [pc, #388]	; (8013ed0 <atlasErrorLEDs+0x300>)
 8013d4c:	5c9a      	ldrb	r2, [r3, r2]
 8013d4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d52:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013d56:	440b      	add	r3, r1
 8013d58:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d103      	bne.n	8013d68 <atlasErrorLEDs+0x198>
			  {
				  *errorLEDptr = true;
 8013d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d62:	2201      	movs	r2, #1
 8013d64:	701a      	strb	r2, [r3, #0]
 8013d66:	e002      	b.n	8013d6e <atlasErrorLEDs+0x19e>
			  }
			  else
			  {
				  *errorLEDptr = false;
 8013d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	701a      	strb	r2, [r3, #0]
		  for (uint8_t input = 0; input < sizeof(monitor_gpio)/sizeof(monitor_gpio[0]); input++)
 8013d6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d72:	3301      	adds	r3, #1
 8013d74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d7c:	2b03      	cmp	r3, #3
 8013d7e:	d9aa      	bls.n	8013cd6 <atlasErrorLEDs+0x106>
//			  errorLED.vsysPMIFault=false;
//		  }
//		  else{
//			  errorLED.vsysPMIFault=true;
//		  }
		  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8013d80:	4b54      	ldr	r3, [pc, #336]	; (8013ed4 <atlasErrorLEDs+0x304>)
 8013d82:	689b      	ldr	r3, [r3, #8]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d103      	bne.n	8013d90 <atlasErrorLEDs+0x1c0>
 8013d88:	4b52      	ldr	r3, [pc, #328]	; (8013ed4 <atlasErrorLEDs+0x304>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d103      	bne.n	8013d98 <atlasErrorLEDs+0x1c8>
 8013d90:	4b50      	ldr	r3, [pc, #320]	; (8013ed4 <atlasErrorLEDs+0x304>)
 8013d92:	699b      	ldr	r3, [r3, #24]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	da03      	bge.n	8013da0 <atlasErrorLEDs+0x1d0>
			  errorLED.zionFault=true;
 8013d98:	4b4f      	ldr	r3, [pc, #316]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	701a      	strb	r2, [r3, #0]
 8013d9e:	e002      	b.n	8013da6 <atlasErrorLEDs+0x1d6>
		  }
		  else{
			  errorLED.zionFault=false;
 8013da0:	4b4d      	ldr	r3, [pc, #308]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	701a      	strb	r2, [r3, #0]
		  }
		  //HAL_I2C_IsDeviceReady(&hi2c1, SOC_ADDRESS, 2, 100)
		  int i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8013da6:	4b4d      	ldr	r3, [pc, #308]	; (8013edc <atlasErrorLEDs+0x30c>)
 8013da8:	7818      	ldrb	r0, [r3, #0]
 8013daa:	4b4c      	ldr	r3, [pc, #304]	; (8013edc <atlasErrorLEDs+0x30c>)
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	2301      	movs	r3, #1
 8013db2:	2200      	movs	r2, #0
 8013db4:	21f0      	movs	r1, #240	; 0xf0
 8013db6:	f7ef fe23 	bl	8003a00 <writeI2CRegister>
 8013dba:	62f8      	str	r0, [r7, #44]	; 0x2c

		  //only allow the error led write commands if the led driver responds.
		  if(i2cCheck == HAL_OK)
 8013dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f040 80fb 	bne.w	8013fba <atlasErrorLEDs+0x3ea>
		  {
			  errorLED.ledDriver=false;
 8013dc4:	4b44      	ldr	r3, [pc, #272]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	735a      	strb	r2, [r3, #13]

			  switch(bootButtons.bootMode)
 8013dca:	4b45      	ldr	r3, [pc, #276]	; (8013ee0 <atlasErrorLEDs+0x310>)
 8013dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dce:	2b05      	cmp	r3, #5
 8013dd0:	f200 809b 	bhi.w	8013f0a <atlasErrorLEDs+0x33a>
 8013dd4:	a201      	add	r2, pc, #4	; (adr r2, 8013ddc <atlasErrorLEDs+0x20c>)
 8013dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dda:	bf00      	nop
 8013ddc:	08013df5 	.word	0x08013df5
 8013de0:	08013e15 	.word	0x08013e15
 8013de4:	08013e35 	.word	0x08013e35
 8013de8:	08013e5b 	.word	0x08013e5b
 8013dec:	08013ee5 	.word	0x08013ee5
 8013df0:	08013e7b 	.word	0x08013e7b
			  {
				case UNINITIALIZED:
					errorLED.standard_boot=false;
 8013df4:	4b38      	ldr	r3, [pc, #224]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013df6:	2200      	movs	r2, #0
 8013df8:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013dfa:	4b37      	ldr	r3, [pc, #220]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8013e00:	4b35      	ldr	r3, [pc, #212]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e02:	2200      	movs	r2, #0
 8013e04:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013e06:	4b34      	ldr	r3, [pc, #208]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	71da      	strb	r2, [r3, #7]
					R = false;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8013e12:	e07a      	b.n	8013f0a <atlasErrorLEDs+0x33a>
				case STANDARD:
					errorLED.standard_boot=true;
 8013e14:	4b30      	ldr	r3, [pc, #192]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e16:	2201      	movs	r2, #1
 8013e18:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013e1a:	4b2f      	ldr	r3, [pc, #188]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8013e20:	4b2d      	ldr	r3, [pc, #180]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e22:	2200      	movs	r2, #0
 8013e24:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013e26:	4b2c      	ldr	r3, [pc, #176]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	71da      	strb	r2, [r3, #7]
					G = true;
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8013e32:	e06a      	b.n	8013f0a <atlasErrorLEDs+0x33a>
				case UEFI:
					errorLED.standard_boot=false;
 8013e34:	4b28      	ldr	r3, [pc, #160]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e36:	2200      	movs	r2, #0
 8013e38:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=true;
 8013e3a:	4b27      	ldr	r3, [pc, #156]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e3c:	2201      	movs	r2, #1
 8013e3e:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8013e40:	4b25      	ldr	r3, [pc, #148]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013e46:	4b24      	ldr	r3, [pc, #144]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	71da      	strb	r2, [r3, #7]
					G = true;
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					B = true;
 8013e52:	2301      	movs	r3, #1
 8013e54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					break;
 8013e58:	e057      	b.n	8013f0a <atlasErrorLEDs+0x33a>
				case EDL:
					errorLED.standard_boot=false;
 8013e5a:	4b1f      	ldr	r3, [pc, #124]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013e60:	4b1d      	ldr	r3, [pc, #116]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e62:	2200      	movs	r2, #0
 8013e64:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=true;
 8013e66:	4b1c      	ldr	r3, [pc, #112]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e68:	2201      	movs	r2, #1
 8013e6a:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013e6c:	4b1a      	ldr	r3, [pc, #104]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e6e:	2200      	movs	r2, #0
 8013e70:	71da      	strb	r2, [r3, #7]
					B = true;
 8013e72:	2301      	movs	r3, #1
 8013e74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					break;
 8013e78:	e047      	b.n	8013f0a <atlasErrorLEDs+0x33a>
				case MASS_STORAGE:
					errorLED.standard_boot=true;
 8013e7a:	4b17      	ldr	r3, [pc, #92]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013e80:	4b15      	ldr	r3, [pc, #84]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=true;
 8013e86:	4b14      	ldr	r3, [pc, #80]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e88:	2201      	movs	r2, #1
 8013e8a:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013e8c:	4b12      	ldr	r3, [pc, #72]	; (8013ed8 <atlasErrorLEDs+0x308>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	71da      	strb	r2, [r3, #7]
					R = true;
 8013e92:	2301      	movs	r3, #1
 8013e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					B = true;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					break;
 8013e9e:	e034      	b.n	8013f0a <atlasErrorLEDs+0x33a>
 8013ea0:	03020100 	.word	0x03020100
 8013ea4:	0801ae98 	.word	0x0801ae98
 8013ea8:	0b080706 	.word	0x0b080706
 8013eac:	20003324 	.word	0x20003324
 8013eb0:	2000338d 	.word	0x2000338d
 8013eb4:	2000338e 	.word	0x2000338e
 8013eb8:	2000338f 	.word	0x2000338f
 8013ebc:	20003390 	.word	0x20003390
 8013ec0:	20003391 	.word	0x20003391
 8013ec4:	20003392 	.word	0x20003392
 8013ec8:	20003397 	.word	0x20003397
 8013ecc:	20003398 	.word	0x20003398
 8013ed0:	20028df0 	.word	0x20028df0
 8013ed4:	20003328 	.word	0x20003328
 8013ed8:	2000338c 	.word	0x2000338c
 8013edc:	20000158 	.word	0x20000158
 8013ee0:	20003360 	.word	0x20003360
				case RECOVERY:
					errorLED.standard_boot=false;
 8013ee4:	4b38      	ldr	r3, [pc, #224]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=true;
 8013eea:	4b37      	ldr	r3, [pc, #220]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013eec:	2201      	movs	r2, #1
 8013eee:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=true;
 8013ef0:	4b35      	ldr	r3, [pc, #212]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013ef6:	4b34      	ldr	r3, [pc, #208]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013ef8:	2200      	movs	r2, #0
 8013efa:	71da      	strb	r2, [r3, #7]
					R = true;
 8013efc:	2301      	movs	r3, #1
 8013efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					G = true;
 8013f02:	2301      	movs	r3, #1
 8013f04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8013f08:	bf00      	nop
			  }
			  setRGBLED(R,G,B);
 8013f0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f0e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8013f12:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7ef fe9a 	bl	8003c50 <setRGBLED>
			  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8013f1c:	4b2a      	ldr	r3, [pc, #168]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	4619      	mov	r1, r3
 8013f22:	2000      	movs	r0, #0
 8013f24:	f7ef fec0 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f28:	2014      	movs	r0, #20
 8013f2a:	f7f3 ff47 	bl	8007dbc <HAL_Delay>
			  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 8013f2e:	4b26      	ldr	r3, [pc, #152]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f30:	785b      	ldrb	r3, [r3, #1]
 8013f32:	4619      	mov	r1, r3
 8013f34:	2001      	movs	r0, #1
 8013f36:	f7ef feb7 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f3a:	2014      	movs	r0, #20
 8013f3c:	f7f3 ff3e 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT3,errorLED.fault3);
 8013f40:	4b21      	ldr	r3, [pc, #132]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f42:	789b      	ldrb	r3, [r3, #2]
 8013f44:	4619      	mov	r1, r3
 8013f46:	2002      	movs	r0, #2
 8013f48:	f7ef feae 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f4c:	2014      	movs	r0, #20
 8013f4e:	f7f3 ff35 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT4,errorLED.fault4);
 8013f52:	4b1d      	ldr	r3, [pc, #116]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f54:	78db      	ldrb	r3, [r3, #3]
 8013f56:	4619      	mov	r1, r3
 8013f58:	2003      	movs	r0, #3
 8013f5a:	f7ef fea5 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f5e:	2014      	movs	r0, #20
 8013f60:	f7f3 ff2c 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT5,errorLED.fault5);
 8013f64:	4b18      	ldr	r3, [pc, #96]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f66:	791b      	ldrb	r3, [r3, #4]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	2004      	movs	r0, #4
 8013f6c:	f7ef fe9c 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f70:	2014      	movs	r0, #20
 8013f72:	f7f3 ff23 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT6,errorLED.fault6);
 8013f76:	4b14      	ldr	r3, [pc, #80]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f78:	795b      	ldrb	r3, [r3, #5]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	2005      	movs	r0, #5
 8013f7e:	f7ef fe93 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f82:	2014      	movs	r0, #20
 8013f84:	f7f3 ff1a 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT7,errorLED.fault7);
 8013f88:	4b0f      	ldr	r3, [pc, #60]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f8a:	799b      	ldrb	r3, [r3, #6]
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	2006      	movs	r0, #6
 8013f90:	f7ef fe8a 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013f94:	2014      	movs	r0, #20
 8013f96:	f7f3 ff11 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT8,errorLED.fault8);
 8013f9a:	4b0b      	ldr	r3, [pc, #44]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013f9c:	7adb      	ldrb	r3, [r3, #11]
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	200a      	movs	r0, #10
 8013fa2:	f7ef fe81 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8013fa6:	2014      	movs	r0, #20
 8013fa8:	f7f3 ff08 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT9,errorLED.fault9);
 8013fac:	4b06      	ldr	r3, [pc, #24]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013fae:	7b1b      	ldrb	r3, [r3, #12]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	200b      	movs	r0, #11
 8013fb4:	f7ef fe78 	bl	8003ca8 <setErrorLED>
		  }
		  else{
			  errorLED.ledDriver = true;
		  }
}
 8013fb8:	e002      	b.n	8013fc0 <atlasErrorLEDs+0x3f0>
			  errorLED.ledDriver = true;
 8013fba:	4b03      	ldr	r3, [pc, #12]	; (8013fc8 <atlasErrorLEDs+0x3f8>)
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	735a      	strb	r2, [r3, #13]
}
 8013fc0:	bf00      	nop
 8013fc2:	3740      	adds	r7, #64	; 0x40
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8013fc8:	2000338c 	.word	0x2000338c

08013fcc <defaultMainMenuFaultLedLabels>:
#include "default.h"

int timeNow = 0;


void defaultMainMenuFaultLedLabels(){
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b086      	sub	sp, #24
 8013fd0:	af00      	add	r7, sp, #0
	int i,j;
	int ledFaultAlign=scr_width-90;
 8013fd2:	4b93      	ldr	r3, [pc, #588]	; (8014220 <defaultMainMenuFaultLedLabels+0x254>)
 8013fd4:	881b      	ldrh	r3, [r3, #0]
 8013fd6:	3b5a      	subs	r3, #90	; 0x5a
 8013fd8:	617b      	str	r3, [r7, #20]
	int verticalSpacing=22;
 8013fda:	2316      	movs	r3, #22
 8013fdc:	613b      	str	r3, [r7, #16]
	int horizontalSpacing=20;
 8013fde:	2314      	movs	r3, #20
 8013fe0:	60fb      	str	r3, [r7, #12]
	i  = ledFaultAlign;
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8013fe6:	2303      	movs	r3, #3
 8013fe8:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	b298      	uxth	r0, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	3b02      	subs	r3, #2
 8013ff4:	b299      	uxth	r1, r3
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	330c      	adds	r3, #12
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	b29b      	uxth	r3, r3
 8014002:	3308      	adds	r3, #8
 8014004:	b29b      	uxth	r3, r3
 8014006:	f7ed f9a7 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	4413      	add	r3, r2
 8014010:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED1_FAULT_LBL, fnt7x10);
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	b298      	uxth	r0, r3
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	b299      	uxth	r1, r3
 801401a:	4b82      	ldr	r3, [pc, #520]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 801401c:	4a82      	ldr	r2, [pc, #520]	; (8014228 <defaultMainMenuFaultLedLabels+0x25c>)
 801401e:	f7ed fce9 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	4413      	add	r3, r2
 8014028:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	b298      	uxth	r0, r3
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	b29b      	uxth	r3, r3
 8014036:	3b02      	subs	r3, #2
 8014038:	b299      	uxth	r1, r3
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	b29b      	uxth	r3, r3
 801403e:	330c      	adds	r3, #12
 8014040:	b29a      	uxth	r2, r3
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	b29b      	uxth	r3, r3
 8014046:	3308      	adds	r3, #8
 8014048:	b29b      	uxth	r3, r3
 801404a:	f7ed f985 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801404e:	68ba      	ldr	r2, [r7, #8]
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	4413      	add	r3, r2
 8014054:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED2_FAULT_LBL, fnt7x10);
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	b298      	uxth	r0, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	b299      	uxth	r1, r3
 801405e:	4b71      	ldr	r3, [pc, #452]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 8014060:	4a72      	ldr	r2, [pc, #456]	; (801422c <defaultMainMenuFaultLedLabels+0x260>)
 8014062:	f7ed fcc7 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	4413      	add	r3, r2
 8014070:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	b298      	uxth	r0, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	b29b      	uxth	r3, r3
 801407a:	3b02      	subs	r3, #2
 801407c:	b299      	uxth	r1, r3
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	b29b      	uxth	r3, r3
 8014082:	330c      	adds	r3, #12
 8014084:	b29a      	uxth	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	b29b      	uxth	r3, r3
 801408a:	3308      	adds	r3, #8
 801408c:	b29b      	uxth	r3, r3
 801408e:	f7ed f963 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8014092:	68ba      	ldr	r2, [r7, #8]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	4413      	add	r3, r2
 8014098:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED3_FAULT_LBL, fnt7x10);
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	b298      	uxth	r0, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	b299      	uxth	r1, r3
 80140a2:	4b60      	ldr	r3, [pc, #384]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 80140a4:	4a62      	ldr	r2, [pc, #392]	; (8014230 <defaultMainMenuFaultLedLabels+0x264>)
 80140a6:	f7ed fca5 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	4413      	add	r3, r2
 80140b0:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	b298      	uxth	r0, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	3b02      	subs	r3, #2
 80140c0:	b299      	uxth	r1, r3
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	330c      	adds	r3, #12
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	3308      	adds	r3, #8
 80140d0:	b29b      	uxth	r3, r3
 80140d2:	f7ed f941 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80140d6:	68ba      	ldr	r2, [r7, #8]
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	4413      	add	r3, r2
 80140dc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED4_FAULT_LBL, fnt7x10);
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	b298      	uxth	r0, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	b299      	uxth	r1, r3
 80140e6:	4b4f      	ldr	r3, [pc, #316]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 80140e8:	4a52      	ldr	r2, [pc, #328]	; (8014234 <defaultMainMenuFaultLedLabels+0x268>)
 80140ea:	f7ed fc83 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	4413      	add	r3, r2
 80140f8:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	b298      	uxth	r0, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	b29b      	uxth	r3, r3
 8014102:	3b02      	subs	r3, #2
 8014104:	b299      	uxth	r1, r3
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	b29b      	uxth	r3, r3
 801410a:	330c      	adds	r3, #12
 801410c:	b29a      	uxth	r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	b29b      	uxth	r3, r3
 8014112:	3308      	adds	r3, #8
 8014114:	b29b      	uxth	r3, r3
 8014116:	f7ed f91f 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801411a:	68ba      	ldr	r2, [r7, #8]
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	4413      	add	r3, r2
 8014120:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED5_FAULT_LBL, fnt7x10);
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	b298      	uxth	r0, r3
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	b299      	uxth	r1, r3
 801412a:	4b3e      	ldr	r3, [pc, #248]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 801412c:	4a42      	ldr	r2, [pc, #264]	; (8014238 <defaultMainMenuFaultLedLabels+0x26c>)
 801412e:	f7ed fc61 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	693b      	ldr	r3, [r7, #16]
 8014136:	4413      	add	r3, r2
 8014138:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	b298      	uxth	r0, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	b29b      	uxth	r3, r3
 8014146:	3b02      	subs	r3, #2
 8014148:	b299      	uxth	r1, r3
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	b29b      	uxth	r3, r3
 801414e:	330c      	adds	r3, #12
 8014150:	b29a      	uxth	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	b29b      	uxth	r3, r3
 8014156:	3308      	adds	r3, #8
 8014158:	b29b      	uxth	r3, r3
 801415a:	f7ed f8fd 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801415e:	68ba      	ldr	r2, [r7, #8]
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	4413      	add	r3, r2
 8014164:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED6_FAULT_LBL, fnt7x10);
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	b298      	uxth	r0, r3
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	b299      	uxth	r1, r3
 801416e:	4b2d      	ldr	r3, [pc, #180]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 8014170:	4a32      	ldr	r2, [pc, #200]	; (801423c <defaultMainMenuFaultLedLabels+0x270>)
 8014172:	f7ed fc3f 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	4413      	add	r3, r2
 8014180:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	b298      	uxth	r0, r3
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	b29b      	uxth	r3, r3
 801418a:	3b02      	subs	r3, #2
 801418c:	b299      	uxth	r1, r3
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	b29b      	uxth	r3, r3
 8014192:	330c      	adds	r3, #12
 8014194:	b29a      	uxth	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	b29b      	uxth	r3, r3
 801419a:	3308      	adds	r3, #8
 801419c:	b29b      	uxth	r3, r3
 801419e:	f7ed f8db 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	4413      	add	r3, r2
 80141a8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED7_FAULT_LBL, fnt7x10);
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	b298      	uxth	r0, r3
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	b299      	uxth	r1, r3
 80141b2:	4b1c      	ldr	r3, [pc, #112]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 80141b4:	4a22      	ldr	r2, [pc, #136]	; (8014240 <defaultMainMenuFaultLedLabels+0x274>)
 80141b6:	f7ed fc1d 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	4413      	add	r3, r2
 80141c0:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	b298      	uxth	r0, r3
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	3b02      	subs	r3, #2
 80141d0:	b299      	uxth	r1, r3
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	330c      	adds	r3, #12
 80141d8:	b29a      	uxth	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	b29b      	uxth	r3, r3
 80141de:	3308      	adds	r3, #8
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	f7ed f8b9 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80141e6:	68ba      	ldr	r2, [r7, #8]
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	4413      	add	r3, r2
 80141ec:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED8_FAULT_LBL, fnt7x10);
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	b298      	uxth	r0, r3
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	b299      	uxth	r1, r3
 80141f6:	4b0b      	ldr	r3, [pc, #44]	; (8014224 <defaultMainMenuFaultLedLabels+0x258>)
 80141f8:	4a12      	ldr	r2, [pc, #72]	; (8014244 <defaultMainMenuFaultLedLabels+0x278>)
 80141fa:	f7ed fbfb 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	4413      	add	r3, r2
 8014208:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	b298      	uxth	r0, r3
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	b29b      	uxth	r3, r3
 8014212:	3b02      	subs	r3, #2
 8014214:	b299      	uxth	r1, r3
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	b29b      	uxth	r3, r3
 801421a:	330c      	adds	r3, #12
 801421c:	e014      	b.n	8014248 <defaultMainMenuFaultLedLabels+0x27c>
 801421e:	bf00      	nop
 8014220:	20028b62 	.word	0x20028b62
 8014224:	0801c0c0 	.word	0x0801c0c0
 8014228:	0801aeb8 	.word	0x0801aeb8
 801422c:	0801aec4 	.word	0x0801aec4
 8014230:	0801aed0 	.word	0x0801aed0
 8014234:	0801aed8 	.word	0x0801aed8
 8014238:	0801aee0 	.word	0x0801aee0
 801423c:	0801aee8 	.word	0x0801aee8
 8014240:	0801aef0 	.word	0x0801aef0
 8014244:	0801aef8 	.word	0x0801aef8
 8014248:	b29a      	uxth	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	b29b      	uxth	r3, r3
 801424e:	3308      	adds	r3, #8
 8014250:	b29b      	uxth	r3, r3
 8014252:	f7ed f881 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8014256:	68ba      	ldr	r2, [r7, #8]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	4413      	add	r3, r2
 801425c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED9_FAULT_LBL, fnt7x10);
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	b298      	uxth	r0, r3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	b299      	uxth	r1, r3
 8014266:	4b04      	ldr	r3, [pc, #16]	; (8014278 <defaultMainMenuFaultLedLabels+0x2ac>)
 8014268:	4a04      	ldr	r2, [pc, #16]	; (801427c <defaultMainMenuFaultLedLabels+0x2b0>)
 801426a:	f7ed fbc3 	bl	80019f4 <LCD_PutStr>
}
 801426e:	bf00      	nop
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	0801c0c0 	.word	0x0801c0c0
 801427c:	0801af00 	.word	0x0801af00

08014280 <defaultMainMenuBootModes>:
void defaultMainMenuBootModes(int i, int j){
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
	switch(bootButtons.bootMode){
 801428a:	4b13      	ldr	r3, [pc, #76]	; (80142d8 <defaultMainMenuBootModes+0x58>)
 801428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801428e:	2b00      	cmp	r3, #0
 8014290:	d002      	beq.n	8014298 <defaultMainMenuBootModes+0x18>
 8014292:	2b01      	cmp	r3, #1
 8014294:	d009      	beq.n	80142aa <defaultMainMenuBootModes+0x2a>
 8014296:	e011      	b.n	80142bc <defaultMainMenuBootModes+0x3c>
	case UNINITIALIZED:
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	b298      	uxth	r0, r3
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	b299      	uxth	r1, r3
 80142a0:	4b0e      	ldr	r3, [pc, #56]	; (80142dc <defaultMainMenuBootModes+0x5c>)
 80142a2:	4a0f      	ldr	r2, [pc, #60]	; (80142e0 <defaultMainMenuBootModes+0x60>)
 80142a4:	f7ed fba6 	bl	80019f4 <LCD_PutStr>
		break;
 80142a8:	e011      	b.n	80142ce <defaultMainMenuBootModes+0x4e>
	case STANDARD:
		LCD_PutStr(i, j, "OS", fnt7x10);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	b298      	uxth	r0, r3
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	b299      	uxth	r1, r3
 80142b2:	4b0a      	ldr	r3, [pc, #40]	; (80142dc <defaultMainMenuBootModes+0x5c>)
 80142b4:	4a0b      	ldr	r2, [pc, #44]	; (80142e4 <defaultMainMenuBootModes+0x64>)
 80142b6:	f7ed fb9d 	bl	80019f4 <LCD_PutStr>
		break;
 80142ba:	e008      	b.n	80142ce <defaultMainMenuBootModes+0x4e>
	default:
		LCD_PutStr(i, j, "OFF", fnt7x10);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	b298      	uxth	r0, r3
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	b299      	uxth	r1, r3
 80142c4:	4b05      	ldr	r3, [pc, #20]	; (80142dc <defaultMainMenuBootModes+0x5c>)
 80142c6:	4a06      	ldr	r2, [pc, #24]	; (80142e0 <defaultMainMenuBootModes+0x60>)
 80142c8:	f7ed fb94 	bl	80019f4 <LCD_PutStr>
		break;
 80142cc:	bf00      	nop
	}
}
 80142ce:	bf00      	nop
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	20003360 	.word	0x20003360
 80142dc:	0801c0c0 	.word	0x0801c0c0
 80142e0:	0801af08 	.word	0x0801af08
 80142e4:	0801af0c 	.word	0x0801af0c

080142e8 <defaultBootMenuBootModes>:

int defaultBootMenuBootModes(int indicator, int previousMenu, int menu, int button,int eepromRead){
 80142e8:	b590      	push	{r4, r7, lr}
 80142ea:	b08b      	sub	sp, #44	; 0x2c
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
 80142f4:	603b      	str	r3, [r7, #0]
	int j=45;
 80142f6:	232d      	movs	r3, #45	; 0x2d
 80142f8:	61fb      	str	r3, [r7, #28]
	int i=5;
 80142fa:	2305      	movs	r3, #5
 80142fc:	617b      	str	r3, [r7, #20]
	int indentAlignment=50;
 80142fe:	2332      	movs	r3, #50	; 0x32
 8014300:	613b      	str	r3, [r7, #16]
	if(eepromRead){
 8014302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 8119 	beq.w	801453c <defaultBootMenuBootModes+0x254>
		LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	b298      	uxth	r0, r3
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	b299      	uxth	r1, r3
 8014312:	4b80      	ldr	r3, [pc, #512]	; (8014514 <defaultBootMenuBootModes+0x22c>)
 8014314:	4a80      	ldr	r2, [pc, #512]	; (8014518 <defaultBootMenuBootModes+0x230>)
 8014316:	f7ed fb6d 	bl	80019f4 <LCD_PutStr>
		j+=30;
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	331e      	adds	r3, #30
 801431e:	61fb      	str	r3, [r7, #28]
		i=42;
 8014320:	232a      	movs	r3, #42	; 0x2a
 8014322:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	b298      	uxth	r0, r3
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	b299      	uxth	r1, r3
 801432c:	4b79      	ldr	r3, [pc, #484]	; (8014514 <defaultBootMenuBootModes+0x22c>)
 801432e:	4a7b      	ldr	r2, [pc, #492]	; (801451c <defaultBootMenuBootModes+0x234>)
 8014330:	f7ed fb60 	bl	80019f4 <LCD_PutStr>
		i=indentAlignment;
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	617b      	str	r3, [r7, #20]
		j+=20;
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	3314      	adds	r3, #20
 801433c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	b298      	uxth	r0, r3
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	b299      	uxth	r1, r3
 8014346:	4b73      	ldr	r3, [pc, #460]	; (8014514 <defaultBootMenuBootModes+0x22c>)
 8014348:	4a75      	ldr	r2, [pc, #468]	; (8014520 <defaultBootMenuBootModes+0x238>)
 801434a:	f7ed fb53 	bl	80019f4 <LCD_PutStr>
		if(setIndicator==0){
 801434e:	4b75      	ldr	r3, [pc, #468]	; (8014524 <defaultBootMenuBootModes+0x23c>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d16a      	bne.n	801442c <defaultBootMenuBootModes+0x144>
			switch(indicator){
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d133      	bne.n	80143c4 <defaultBootMenuBootModes+0xdc>
			case FIRST:
			{
				j=95;
 801435c:	235f      	movs	r3, #95	; 0x5f
 801435e:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	2b04      	cmp	r3, #4
 8014364:	bf0c      	ite	eq
 8014366:	2301      	moveq	r3, #1
 8014368:	2300      	movne	r3, #0
 801436a:	b2da      	uxtb	r2, r3
 801436c:	68b9      	ldr	r1, [r7, #8]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4299      	cmp	r1, r3
 8014372:	bf0c      	ite	eq
 8014374:	2301      	moveq	r3, #1
 8014376:	2300      	movne	r3, #0
 8014378:	b2db      	uxtb	r3, r3
 801437a:	4013      	ands	r3, r2
 801437c:	b2db      	uxtb	r3, r3
 801437e:	2b00      	cmp	r3, #0
 8014380:	f000 818b 	beq.w	801469a <defaultBootMenuBootModes+0x3b2>
					i=140;
 8014384:	238c      	movs	r3, #140	; 0x8c
 8014386:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	b298      	uxth	r0, r3
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	b29b      	uxth	r3, r3
 8014390:	3305      	adds	r3, #5
 8014392:	b299      	uxth	r1, r3
 8014394:	2303      	movs	r3, #3
 8014396:	2203      	movs	r2, #3
 8014398:	f7ed fc7c 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 801439c:	4b62      	ldr	r3, [pc, #392]	; (8014528 <defaultBootMenuBootModes+0x240>)
 801439e:	2201      	movs	r2, #1
 80143a0:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 80143a2:	4b61      	ldr	r3, [pc, #388]	; (8014528 <defaultBootMenuBootModes+0x240>)
 80143a4:	2201      	movs	r2, #1
 80143a6:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 80143a8:	4b5e      	ldr	r3, [pc, #376]	; (8014524 <defaultBootMenuBootModes+0x23c>)
 80143aa:	2201      	movs	r2, #1
 80143ac:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 80143ae:	f7f3 fcf9 	bl	8007da4 <HAL_GetTick>
 80143b2:	4603      	mov	r3, r0
 80143b4:	4a5d      	ldr	r2, [pc, #372]	; (801452c <defaultBootMenuBootModes+0x244>)
 80143b6:	fba2 2303 	umull	r2, r3, r2, r3
 80143ba:	099b      	lsrs	r3, r3, #6
 80143bc:	461a      	mov	r2, r3
 80143be:	4b5c      	ldr	r3, [pc, #368]	; (8014530 <defaultBootMenuBootModes+0x248>)
 80143c0:	601a      	str	r2, [r3, #0]
				}
				break;
 80143c2:	e16a      	b.n	801469a <defaultBootMenuBootModes+0x3b2>
			}
			default:
			{
				j=95;
 80143c4:	235f      	movs	r3, #95	; 0x5f
 80143c6:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	2b04      	cmp	r3, #4
 80143cc:	bf0c      	ite	eq
 80143ce:	2301      	moveq	r3, #1
 80143d0:	2300      	movne	r3, #0
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	68b9      	ldr	r1, [r7, #8]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4299      	cmp	r1, r3
 80143da:	bf0c      	ite	eq
 80143dc:	2301      	moveq	r3, #1
 80143de:	2300      	movne	r3, #0
 80143e0:	b2db      	uxtb	r3, r3
 80143e2:	4013      	ands	r3, r2
 80143e4:	b2db      	uxtb	r3, r3
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f000 8159 	beq.w	801469e <defaultBootMenuBootModes+0x3b6>
					i=140;
 80143ec:	238c      	movs	r3, #140	; 0x8c
 80143ee:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	b298      	uxth	r0, r3
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	3305      	adds	r3, #5
 80143fa:	b299      	uxth	r1, r3
 80143fc:	2303      	movs	r3, #3
 80143fe:	2203      	movs	r2, #3
 8014400:	f7ed fc48 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 8014404:	4b48      	ldr	r3, [pc, #288]	; (8014528 <defaultBootMenuBootModes+0x240>)
 8014406:	2201      	movs	r2, #1
 8014408:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 801440a:	4b47      	ldr	r3, [pc, #284]	; (8014528 <defaultBootMenuBootModes+0x240>)
 801440c:	2201      	movs	r2, #1
 801440e:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 8014410:	4b44      	ldr	r3, [pc, #272]	; (8014524 <defaultBootMenuBootModes+0x23c>)
 8014412:	2201      	movs	r2, #1
 8014414:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8014416:	f7f3 fcc5 	bl	8007da4 <HAL_GetTick>
 801441a:	4603      	mov	r3, r0
 801441c:	4a43      	ldr	r2, [pc, #268]	; (801452c <defaultBootMenuBootModes+0x244>)
 801441e:	fba2 2303 	umull	r2, r3, r2, r3
 8014422:	099b      	lsrs	r3, r3, #6
 8014424:	461a      	mov	r2, r3
 8014426:	4b42      	ldr	r3, [pc, #264]	; (8014530 <defaultBootMenuBootModes+0x248>)
 8014428:	601a      	str	r2, [r3, #0]
				}
				break;
 801442a:	e138      	b.n	801469e <defaultBootMenuBootModes+0x3b6>
			}
			}
		}
		else{
			i = 230;
 801442c:	23e6      	movs	r3, #230	; 0xe6
 801442e:	617b      	str	r3, [r7, #20]
			j = 120;
 8014430:	2378      	movs	r3, #120	; 0x78
 8014432:	61fb      	str	r3, [r7, #28]
			int timeLeft=0;
 8014434:	2300      	movs	r3, #0
 8014436:	61bb      	str	r3, [r7, #24]
			if(bootButtons.bootMode==0){
 8014438:	4b3b      	ldr	r3, [pc, #236]	; (8014528 <defaultBootMenuBootModes+0x240>)
 801443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801443c:	2b00      	cmp	r3, #0
 801443e:	d10d      	bne.n	801445c <defaultBootMenuBootModes+0x174>
				timeLeft = (timeNow+2)- (HAL_GetTick()/1000);
 8014440:	4b3b      	ldr	r3, [pc, #236]	; (8014530 <defaultBootMenuBootModes+0x248>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	461c      	mov	r4, r3
 8014446:	f7f3 fcad 	bl	8007da4 <HAL_GetTick>
 801444a:	4603      	mov	r3, r0
 801444c:	4a37      	ldr	r2, [pc, #220]	; (801452c <defaultBootMenuBootModes+0x244>)
 801444e:	fba2 2303 	umull	r2, r3, r2, r3
 8014452:	099b      	lsrs	r3, r3, #6
 8014454:	1ae3      	subs	r3, r4, r3
 8014456:	3302      	adds	r3, #2
 8014458:	61bb      	str	r3, [r7, #24]
 801445a:	e00c      	b.n	8014476 <defaultBootMenuBootModes+0x18e>
			}
			else{
				timeLeft = (timeNow+15)- (HAL_GetTick()/1000);
 801445c:	4b34      	ldr	r3, [pc, #208]	; (8014530 <defaultBootMenuBootModes+0x248>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	461c      	mov	r4, r3
 8014462:	f7f3 fc9f 	bl	8007da4 <HAL_GetTick>
 8014466:	4603      	mov	r3, r0
 8014468:	4a30      	ldr	r2, [pc, #192]	; (801452c <defaultBootMenuBootModes+0x244>)
 801446a:	fba2 2303 	umull	r2, r3, r2, r3
 801446e:	099b      	lsrs	r3, r3, #6
 8014470:	1ae3      	subs	r3, r4, r3
 8014472:	330f      	adds	r3, #15
 8014474:	61bb      	str	r3, [r7, #24]
			}
			i+=LCD_PutIntF(i, j, timeLeft, 0, fnt_dig_big);;
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	b298      	uxth	r0, r3
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	b299      	uxth	r1, r3
 801447e:	4b2d      	ldr	r3, [pc, #180]	; (8014534 <defaultBootMenuBootModes+0x24c>)
 8014480:	9300      	str	r3, [sp, #0]
 8014482:	2300      	movs	r3, #0
 8014484:	69ba      	ldr	r2, [r7, #24]
 8014486:	f7ed fb53 	bl	8001b30 <LCD_PutIntF>
 801448a:	4603      	mov	r3, r0
 801448c:	461a      	mov	r2, r3
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	4413      	add	r3, r2
 8014492:	617b      	str	r3, [r7, #20]
			LCD_PutStr(i, j, " SECS LEFT", fnt7x10);
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	b298      	uxth	r0, r3
 8014498:	69fb      	ldr	r3, [r7, #28]
 801449a:	b299      	uxth	r1, r3
 801449c:	4b1d      	ldr	r3, [pc, #116]	; (8014514 <defaultBootMenuBootModes+0x22c>)
 801449e:	4a26      	ldr	r2, [pc, #152]	; (8014538 <defaultBootMenuBootModes+0x250>)
 80144a0:	f7ed faa8 	bl	80019f4 <LCD_PutStr>
			switch(setIndicator){
 80144a4:	4b1f      	ldr	r3, [pc, #124]	; (8014524 <defaultBootMenuBootModes+0x23c>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d119      	bne.n	80144e0 <defaultBootMenuBootModes+0x1f8>
			case FIRST:
			{
				j=95;
 80144ac:	235f      	movs	r3, #95	; 0x5f
 80144ae:	61fb      	str	r3, [r7, #28]
				i=140;
 80144b0:	238c      	movs	r3, #140	; 0x8c
 80144b2:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	b298      	uxth	r0, r3
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	3305      	adds	r3, #5
 80144be:	b299      	uxth	r1, r3
 80144c0:	2303      	movs	r3, #3
 80144c2:	2203      	movs	r2, #3
 80144c4:	f7ed fbe6 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 80144c8:	4b17      	ldr	r3, [pc, #92]	; (8014528 <defaultBootMenuBootModes+0x240>)
 80144ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	f000 80e8 	beq.w	80146a2 <defaultBootMenuBootModes+0x3ba>
					setIndicator=0;
 80144d2:	4b14      	ldr	r3, [pc, #80]	; (8014524 <defaultBootMenuBootModes+0x23c>)
 80144d4:	2200      	movs	r2, #0
 80144d6:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 80144d8:	4b13      	ldr	r3, [pc, #76]	; (8014528 <defaultBootMenuBootModes+0x240>)
 80144da:	2200      	movs	r2, #0
 80144dc:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 80144de:	e0e0      	b.n	80146a2 <defaultBootMenuBootModes+0x3ba>
			}
			default:
			{
				j=95;
 80144e0:	235f      	movs	r3, #95	; 0x5f
 80144e2:	61fb      	str	r3, [r7, #28]
				i=140;
 80144e4:	238c      	movs	r3, #140	; 0x8c
 80144e6:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	b298      	uxth	r0, r3
 80144ec:	69fb      	ldr	r3, [r7, #28]
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	3305      	adds	r3, #5
 80144f2:	b299      	uxth	r1, r3
 80144f4:	2303      	movs	r3, #3
 80144f6:	2203      	movs	r2, #3
 80144f8:	f7ed fbcc 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 80144fc:	4b0a      	ldr	r3, [pc, #40]	; (8014528 <defaultBootMenuBootModes+0x240>)
 80144fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014500:	2b00      	cmp	r3, #0
 8014502:	f000 80d0 	beq.w	80146a6 <defaultBootMenuBootModes+0x3be>
					setIndicator=0;
 8014506:	4b07      	ldr	r3, [pc, #28]	; (8014524 <defaultBootMenuBootModes+0x23c>)
 8014508:	2200      	movs	r2, #0
 801450a:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 801450c:	4b06      	ldr	r3, [pc, #24]	; (8014528 <defaultBootMenuBootModes+0x240>)
 801450e:	2200      	movs	r2, #0
 8014510:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 8014512:	e0c8      	b.n	80146a6 <defaultBootMenuBootModes+0x3be>
 8014514:	0801c0c0 	.word	0x0801c0c0
 8014518:	0801af10 	.word	0x0801af10
 801451c:	0801af34 	.word	0x0801af34
 8014520:	0801af50 	.word	0x0801af50
 8014524:	2000342c 	.word	0x2000342c
 8014528:	20003360 	.word	0x20003360
 801452c:	10624dd3 	.word	0x10624dd3
 8014530:	20028b54 	.word	0x20028b54
 8014534:	0801c480 	.word	0x0801c480
 8014538:	0801af5c 	.word	0x0801af5c
			}
			}
		}
	}
	else{
		j=45;
 801453c:	232d      	movs	r3, #45	; 0x2d
 801453e:	61fb      	str	r3, [r7, #28]
		i=15;
 8014540:	230f      	movs	r3, #15
 8014542:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	b298      	uxth	r0, r3
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	b299      	uxth	r1, r3
 801454c:	4b5d      	ldr	r3, [pc, #372]	; (80146c4 <defaultBootMenuBootModes+0x3dc>)
 801454e:	4a5e      	ldr	r2, [pc, #376]	; (80146c8 <defaultBootMenuBootModes+0x3e0>)
 8014550:	f7ed fa50 	bl	80019f4 <LCD_PutStr>
		j+=30;
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	331e      	adds	r3, #30
 8014558:	61fb      	str	r3, [r7, #28]
		i=42;
 801455a:	232a      	movs	r3, #42	; 0x2a
 801455c:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	b298      	uxth	r0, r3
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	b299      	uxth	r1, r3
 8014566:	4b57      	ldr	r3, [pc, #348]	; (80146c4 <defaultBootMenuBootModes+0x3dc>)
 8014568:	4a58      	ldr	r2, [pc, #352]	; (80146cc <defaultBootMenuBootModes+0x3e4>)
 801456a:	f7ed fa43 	bl	80019f4 <LCD_PutStr>
		i=indentAlignment;
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	617b      	str	r3, [r7, #20]
		j+=20;
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	3314      	adds	r3, #20
 8014576:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	b298      	uxth	r0, r3
 801457c:	69fb      	ldr	r3, [r7, #28]
 801457e:	b299      	uxth	r1, r3
 8014580:	4b50      	ldr	r3, [pc, #320]	; (80146c4 <defaultBootMenuBootModes+0x3dc>)
 8014582:	4a53      	ldr	r2, [pc, #332]	; (80146d0 <defaultBootMenuBootModes+0x3e8>)
 8014584:	f7ed fa36 	bl	80019f4 <LCD_PutStr>
		if(setIndicator==0){
 8014588:	4b52      	ldr	r3, [pc, #328]	; (80146d4 <defaultBootMenuBootModes+0x3ec>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d154      	bne.n	801463a <defaultBootMenuBootModes+0x352>
			switch(indicator){
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	2b01      	cmp	r3, #1
 8014594:	d128      	bne.n	80145e8 <defaultBootMenuBootModes+0x300>
			case FIRST:
			{
				j=95;
 8014596:	235f      	movs	r3, #95	; 0x5f
 8014598:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	2b04      	cmp	r3, #4
 801459e:	bf0c      	ite	eq
 80145a0:	2301      	moveq	r3, #1
 80145a2:	2300      	movne	r3, #0
 80145a4:	b2da      	uxtb	r2, r3
 80145a6:	68b9      	ldr	r1, [r7, #8]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	4299      	cmp	r1, r3
 80145ac:	bf0c      	ite	eq
 80145ae:	2301      	moveq	r3, #1
 80145b0:	2300      	movne	r3, #0
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	4013      	ands	r3, r2
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d076      	beq.n	80146aa <defaultBootMenuBootModes+0x3c2>
					i=140;
 80145bc:	238c      	movs	r3, #140	; 0x8c
 80145be:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 80145c0:	697b      	ldr	r3, [r7, #20]
 80145c2:	b298      	uxth	r0, r3
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	3305      	adds	r3, #5
 80145ca:	b299      	uxth	r1, r3
 80145cc:	2303      	movs	r3, #3
 80145ce:	2203      	movs	r2, #3
 80145d0:	f7ed fb60 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 80145d4:	4b40      	ldr	r3, [pc, #256]	; (80146d8 <defaultBootMenuBootModes+0x3f0>)
 80145d6:	2201      	movs	r2, #1
 80145d8:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 80145da:	4b3f      	ldr	r3, [pc, #252]	; (80146d8 <defaultBootMenuBootModes+0x3f0>)
 80145dc:	2201      	movs	r2, #1
 80145de:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 80145e0:	4b3c      	ldr	r3, [pc, #240]	; (80146d4 <defaultBootMenuBootModes+0x3ec>)
 80145e2:	2201      	movs	r2, #1
 80145e4:	601a      	str	r2, [r3, #0]
				}
				break;
 80145e6:	e060      	b.n	80146aa <defaultBootMenuBootModes+0x3c2>
			}
			default:
			{
				j=95;
 80145e8:	235f      	movs	r3, #95	; 0x5f
 80145ea:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	2b04      	cmp	r3, #4
 80145f0:	bf0c      	ite	eq
 80145f2:	2301      	moveq	r3, #1
 80145f4:	2300      	movne	r3, #0
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	68b9      	ldr	r1, [r7, #8]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4299      	cmp	r1, r3
 80145fe:	bf0c      	ite	eq
 8014600:	2301      	moveq	r3, #1
 8014602:	2300      	movne	r3, #0
 8014604:	b2db      	uxtb	r3, r3
 8014606:	4013      	ands	r3, r2
 8014608:	b2db      	uxtb	r3, r3
 801460a:	2b00      	cmp	r3, #0
 801460c:	d04f      	beq.n	80146ae <defaultBootMenuBootModes+0x3c6>
					i=140;
 801460e:	238c      	movs	r3, #140	; 0x8c
 8014610:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	b298      	uxth	r0, r3
 8014616:	69fb      	ldr	r3, [r7, #28]
 8014618:	b29b      	uxth	r3, r3
 801461a:	3305      	adds	r3, #5
 801461c:	b299      	uxth	r1, r3
 801461e:	2303      	movs	r3, #3
 8014620:	2203      	movs	r2, #3
 8014622:	f7ed fb37 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 8014626:	4b2c      	ldr	r3, [pc, #176]	; (80146d8 <defaultBootMenuBootModes+0x3f0>)
 8014628:	2201      	movs	r2, #1
 801462a:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 801462c:	4b2a      	ldr	r3, [pc, #168]	; (80146d8 <defaultBootMenuBootModes+0x3f0>)
 801462e:	2201      	movs	r2, #1
 8014630:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 8014632:	4b28      	ldr	r3, [pc, #160]	; (80146d4 <defaultBootMenuBootModes+0x3ec>)
 8014634:	2201      	movs	r2, #1
 8014636:	601a      	str	r2, [r3, #0]
				}
				break;
 8014638:	e039      	b.n	80146ae <defaultBootMenuBootModes+0x3c6>
			}
			}
		}
		else{
			switch(setIndicator){
 801463a:	4b26      	ldr	r3, [pc, #152]	; (80146d4 <defaultBootMenuBootModes+0x3ec>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	2b01      	cmp	r3, #1
 8014640:	d115      	bne.n	801466e <defaultBootMenuBootModes+0x386>
			case FIRST:
			{
				j=95;
 8014642:	235f      	movs	r3, #95	; 0x5f
 8014644:	61fb      	str	r3, [r7, #28]
				i=140;
 8014646:	238c      	movs	r3, #140	; 0x8c
 8014648:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	b298      	uxth	r0, r3
 801464e:	69fb      	ldr	r3, [r7, #28]
 8014650:	b29b      	uxth	r3, r3
 8014652:	3305      	adds	r3, #5
 8014654:	b299      	uxth	r1, r3
 8014656:	2303      	movs	r3, #3
 8014658:	2203      	movs	r2, #3
 801465a:	f7ed fb1b 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 801465e:	4b1e      	ldr	r3, [pc, #120]	; (80146d8 <defaultBootMenuBootModes+0x3f0>)
 8014660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014662:	2b00      	cmp	r3, #0
 8014664:	d025      	beq.n	80146b2 <defaultBootMenuBootModes+0x3ca>
					setIndicator=0;
 8014666:	4b1b      	ldr	r3, [pc, #108]	; (80146d4 <defaultBootMenuBootModes+0x3ec>)
 8014668:	2200      	movs	r2, #0
 801466a:	601a      	str	r2, [r3, #0]
				}
				break;
 801466c:	e021      	b.n	80146b2 <defaultBootMenuBootModes+0x3ca>
			}
			default:
			{
				j=95;
 801466e:	235f      	movs	r3, #95	; 0x5f
 8014670:	61fb      	str	r3, [r7, #28]
				i=140;
 8014672:	238c      	movs	r3, #140	; 0x8c
 8014674:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	b298      	uxth	r0, r3
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	b29b      	uxth	r3, r3
 801467e:	3305      	adds	r3, #5
 8014680:	b299      	uxth	r1, r3
 8014682:	2303      	movs	r3, #3
 8014684:	2203      	movs	r2, #3
 8014686:	f7ed fb05 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 801468a:	4b13      	ldr	r3, [pc, #76]	; (80146d8 <defaultBootMenuBootModes+0x3f0>)
 801468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801468e:	2b00      	cmp	r3, #0
 8014690:	d011      	beq.n	80146b6 <defaultBootMenuBootModes+0x3ce>
					setIndicator=0;
 8014692:	4b10      	ldr	r3, [pc, #64]	; (80146d4 <defaultBootMenuBootModes+0x3ec>)
 8014694:	2200      	movs	r2, #0
 8014696:	601a      	str	r2, [r3, #0]
				}
				break;
 8014698:	e00d      	b.n	80146b6 <defaultBootMenuBootModes+0x3ce>
				break;
 801469a:	bf00      	nop
 801469c:	e00c      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 801469e:	bf00      	nop
 80146a0:	e00a      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 80146a2:	bf00      	nop
 80146a4:	e008      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 80146a6:	bf00      	nop
 80146a8:	e006      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 80146aa:	bf00      	nop
 80146ac:	e004      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 80146ae:	bf00      	nop
 80146b0:	e002      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 80146b2:	bf00      	nop
 80146b4:	e000      	b.n	80146b8 <defaultBootMenuBootModes+0x3d0>
				break;
 80146b6:	bf00      	nop
			}
			}
		}
	}
	return j;
 80146b8:	69fb      	ldr	r3, [r7, #28]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3724      	adds	r7, #36	; 0x24
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd90      	pop	{r4, r7, pc}
 80146c2:	bf00      	nop
 80146c4:	0801c0c0 	.word	0x0801c0c0
 80146c8:	0801af68 	.word	0x0801af68
 80146cc:	0801af34 	.word	0x0801af34
 80146d0:	0801af50 	.word	0x0801af50
 80146d4:	2000342c 	.word	0x2000342c
 80146d8:	20003360 	.word	0x20003360

080146dc <defaultSystemInfoSoc>:

void defaultSystemInfoSoc(int i, int j){
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
	if(ZION.SOC_EEPROM_Detected){
 80146e6:	4b16      	ldr	r3, [pc, #88]	; (8014740 <defaultSystemInfoSoc+0x64>)
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d01b      	beq.n	8014726 <defaultSystemInfoSoc+0x4a>
		if(ZION.SOC_BoardFab == -2){
 80146ee:	4b14      	ldr	r3, [pc, #80]	; (8014740 <defaultSystemInfoSoc+0x64>)
 80146f0:	699b      	ldr	r3, [r3, #24]
 80146f2:	f113 0f02 	cmn.w	r3, #2
 80146f6:	d108      	bne.n	801470a <defaultSystemInfoSoc+0x2e>
			LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	b298      	uxth	r0, r3
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	b299      	uxth	r1, r3
 8014700:	4b10      	ldr	r3, [pc, #64]	; (8014744 <defaultSystemInfoSoc+0x68>)
 8014702:	4a11      	ldr	r2, [pc, #68]	; (8014748 <defaultSystemInfoSoc+0x6c>)
 8014704:	f7ed f976 	bl	80019f4 <LCD_PutStr>
		}
	}
	else{
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
	}
}
 8014708:	e015      	b.n	8014736 <defaultSystemInfoSoc+0x5a>
		else if(ZION.SOC_BoardFab ==-1){
 801470a:	4b0d      	ldr	r3, [pc, #52]	; (8014740 <defaultSystemInfoSoc+0x64>)
 801470c:	699b      	ldr	r3, [r3, #24]
 801470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014712:	d110      	bne.n	8014736 <defaultSystemInfoSoc+0x5a>
			LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	b298      	uxth	r0, r3
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	b299      	uxth	r1, r3
 801471c:	4b09      	ldr	r3, [pc, #36]	; (8014744 <defaultSystemInfoSoc+0x68>)
 801471e:	4a0b      	ldr	r2, [pc, #44]	; (801474c <defaultSystemInfoSoc+0x70>)
 8014720:	f7ed f968 	bl	80019f4 <LCD_PutStr>
}
 8014724:	e007      	b.n	8014736 <defaultSystemInfoSoc+0x5a>
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	b298      	uxth	r0, r3
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	b299      	uxth	r1, r3
 801472e:	4b05      	ldr	r3, [pc, #20]	; (8014744 <defaultSystemInfoSoc+0x68>)
 8014730:	4a07      	ldr	r2, [pc, #28]	; (8014750 <defaultSystemInfoSoc+0x74>)
 8014732:	f7ed f95f 	bl	80019f4 <LCD_PutStr>
}
 8014736:	bf00      	nop
 8014738:	3708      	adds	r7, #8
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	20003328 	.word	0x20003328
 8014744:	0801c0c0 	.word	0x0801c0c0
 8014748:	0801af94 	.word	0x0801af94
 801474c:	0801afac 	.word	0x0801afac
 8014750:	0801afc4 	.word	0x0801afc4

08014754 <defaultSystemInfoAsic>:
void defaultSystemInfoAsic(int i, int j){
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
	if(ZION.ASIC_EEPROM_Detected){
 801475e:	4b16      	ldr	r3, [pc, #88]	; (80147b8 <defaultSystemInfoAsic+0x64>)
 8014760:	68db      	ldr	r3, [r3, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d01b      	beq.n	801479e <defaultSystemInfoAsic+0x4a>
		if(ZION.ASIC_BoardFab == -2){
 8014766:	4b14      	ldr	r3, [pc, #80]	; (80147b8 <defaultSystemInfoAsic+0x64>)
 8014768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801476a:	f113 0f02 	cmn.w	r3, #2
 801476e:	d108      	bne.n	8014782 <defaultSystemInfoAsic+0x2e>
			LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	b298      	uxth	r0, r3
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	b299      	uxth	r1, r3
 8014778:	4b10      	ldr	r3, [pc, #64]	; (80147bc <defaultSystemInfoAsic+0x68>)
 801477a:	4a11      	ldr	r2, [pc, #68]	; (80147c0 <defaultSystemInfoAsic+0x6c>)
 801477c:	f7ed f93a 	bl	80019f4 <LCD_PutStr>
		}
	}
	else{
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
	}
}
 8014780:	e015      	b.n	80147ae <defaultSystemInfoAsic+0x5a>
		else if(ZION.ASIC_BoardFab ==-1){
 8014782:	4b0d      	ldr	r3, [pc, #52]	; (80147b8 <defaultSystemInfoAsic+0x64>)
 8014784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801478a:	d110      	bne.n	80147ae <defaultSystemInfoAsic+0x5a>
			LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	b298      	uxth	r0, r3
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	b299      	uxth	r1, r3
 8014794:	4b09      	ldr	r3, [pc, #36]	; (80147bc <defaultSystemInfoAsic+0x68>)
 8014796:	4a0b      	ldr	r2, [pc, #44]	; (80147c4 <defaultSystemInfoAsic+0x70>)
 8014798:	f7ed f92c 	bl	80019f4 <LCD_PutStr>
}
 801479c:	e007      	b.n	80147ae <defaultSystemInfoAsic+0x5a>
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	b298      	uxth	r0, r3
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	b299      	uxth	r1, r3
 80147a6:	4b05      	ldr	r3, [pc, #20]	; (80147bc <defaultSystemInfoAsic+0x68>)
 80147a8:	4a07      	ldr	r2, [pc, #28]	; (80147c8 <defaultSystemInfoAsic+0x74>)
 80147aa:	f7ed f923 	bl	80019f4 <LCD_PutStr>
}
 80147ae:	bf00      	nop
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	20003328 	.word	0x20003328
 80147bc:	0801c0c0 	.word	0x0801c0c0
 80147c0:	0801af94 	.word	0x0801af94
 80147c4:	0801afac 	.word	0x0801afac
 80147c8:	0801afc4 	.word	0x0801afc4

080147cc <defaultSystemInfoDisplay>:
void defaultSystemInfoDisplay(int i, int j){
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	6039      	str	r1, [r7, #0]
	if(ZION.DISPLAY_EEPROM_Detected){
 80147d6:	4b16      	ldr	r3, [pc, #88]	; (8014830 <defaultSystemInfoDisplay+0x64>)
 80147d8:	691b      	ldr	r3, [r3, #16]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d01b      	beq.n	8014816 <defaultSystemInfoDisplay+0x4a>
		if(ZION.DISPLAY_BoardFab == -2){
 80147de:	4b14      	ldr	r3, [pc, #80]	; (8014830 <defaultSystemInfoDisplay+0x64>)
 80147e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147e2:	f113 0f02 	cmn.w	r3, #2
 80147e6:	d108      	bne.n	80147fa <defaultSystemInfoDisplay+0x2e>
			LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	b298      	uxth	r0, r3
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	b299      	uxth	r1, r3
 80147f0:	4b10      	ldr	r3, [pc, #64]	; (8014834 <defaultSystemInfoDisplay+0x68>)
 80147f2:	4a11      	ldr	r2, [pc, #68]	; (8014838 <defaultSystemInfoDisplay+0x6c>)
 80147f4:	f7ed f8fe 	bl	80019f4 <LCD_PutStr>
		}
	}
	else{
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
	}
}
 80147f8:	e015      	b.n	8014826 <defaultSystemInfoDisplay+0x5a>
		else if(ZION.DISPLAY_BoardFab ==-1){
 80147fa:	4b0d      	ldr	r3, [pc, #52]	; (8014830 <defaultSystemInfoDisplay+0x64>)
 80147fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014802:	d110      	bne.n	8014826 <defaultSystemInfoDisplay+0x5a>
			LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	b298      	uxth	r0, r3
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	b299      	uxth	r1, r3
 801480c:	4b09      	ldr	r3, [pc, #36]	; (8014834 <defaultSystemInfoDisplay+0x68>)
 801480e:	4a0b      	ldr	r2, [pc, #44]	; (801483c <defaultSystemInfoDisplay+0x70>)
 8014810:	f7ed f8f0 	bl	80019f4 <LCD_PutStr>
}
 8014814:	e007      	b.n	8014826 <defaultSystemInfoDisplay+0x5a>
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	b298      	uxth	r0, r3
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	b299      	uxth	r1, r3
 801481e:	4b05      	ldr	r3, [pc, #20]	; (8014834 <defaultSystemInfoDisplay+0x68>)
 8014820:	4a07      	ldr	r2, [pc, #28]	; (8014840 <defaultSystemInfoDisplay+0x74>)
 8014822:	f7ed f8e7 	bl	80019f4 <LCD_PutStr>
}
 8014826:	bf00      	nop
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	20003328 	.word	0x20003328
 8014834:	0801c0c0 	.word	0x0801c0c0
 8014838:	0801af94 	.word	0x0801af94
 801483c:	0801afac 	.word	0x0801afac
 8014840:	0801afc4 	.word	0x0801afc4

08014844 <defaultHeaderFaults>:
int defaultHeaderFaults(int i, int j){
 8014844:	b580      	push	{r7, lr}
 8014846:	b084      	sub	sp, #16
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
	int x = i;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	60fb      	str	r3, [r7, #12]
	int y = j;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	60bb      	str	r3, [r7, #8]
	if(errorLED.vsysPMIFault){
 8014856:	4b63      	ldr	r3, [pc, #396]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 8014858:	785b      	ldrb	r3, [r3, #1]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d00d      	beq.n	801487a <defaultHeaderFaults+0x36>
		x += LCD_PutStr(x, y, DEFAULT_HEADER1_FAULT_LBL, fnt7x10);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	b298      	uxth	r0, r3
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	b299      	uxth	r1, r3
 8014866:	4b60      	ldr	r3, [pc, #384]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 8014868:	4a60      	ldr	r2, [pc, #384]	; (80149ec <defaultHeaderFaults+0x1a8>)
 801486a:	f7ed f8c3 	bl	80019f4 <LCD_PutStr>
 801486e:	4603      	mov	r3, r0
 8014870:	461a      	mov	r2, r3
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	4413      	add	r3, r2
 8014876:	60fb      	str	r3, [r7, #12]
 8014878:	e0ae      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.zionFault){
 801487a:	4b5a      	ldr	r3, [pc, #360]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d00d      	beq.n	801489e <defaultHeaderFaults+0x5a>
		x += LCD_PutStr(x, y, DEFAULT_HEADER2_FAULT_LBL, fnt7x10);
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	b298      	uxth	r0, r3
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	b299      	uxth	r1, r3
 801488a:	4b57      	ldr	r3, [pc, #348]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 801488c:	4a58      	ldr	r2, [pc, #352]	; (80149f0 <defaultHeaderFaults+0x1ac>)
 801488e:	f7ed f8b1 	bl	80019f4 <LCD_PutStr>
 8014892:	4603      	mov	r3, r0
 8014894:	461a      	mov	r2, r3
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	4413      	add	r3, r2
 801489a:	60fb      	str	r3, [r7, #12]
 801489c:	e09c      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault3){
 801489e:	4b51      	ldr	r3, [pc, #324]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 80148a0:	789b      	ldrb	r3, [r3, #2]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d00d      	beq.n	80148c2 <defaultHeaderFaults+0x7e>
		x += LCD_PutStr(x, y, DEFAULT_HEADER3_FAULT_LBL, fnt7x10);
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	b298      	uxth	r0, r3
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	b299      	uxth	r1, r3
 80148ae:	4b4e      	ldr	r3, [pc, #312]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 80148b0:	4a50      	ldr	r2, [pc, #320]	; (80149f4 <defaultHeaderFaults+0x1b0>)
 80148b2:	f7ed f89f 	bl	80019f4 <LCD_PutStr>
 80148b6:	4603      	mov	r3, r0
 80148b8:	461a      	mov	r2, r3
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	4413      	add	r3, r2
 80148be:	60fb      	str	r3, [r7, #12]
 80148c0:	e08a      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault4){
 80148c2:	4b48      	ldr	r3, [pc, #288]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 80148c4:	78db      	ldrb	r3, [r3, #3]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00d      	beq.n	80148e6 <defaultHeaderFaults+0xa2>
		x += LCD_PutStr(x, y, DEFAULT_HEADER4_FAULT_LBL, fnt7x10);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	b298      	uxth	r0, r3
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	b299      	uxth	r1, r3
 80148d2:	4b45      	ldr	r3, [pc, #276]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 80148d4:	4a48      	ldr	r2, [pc, #288]	; (80149f8 <defaultHeaderFaults+0x1b4>)
 80148d6:	f7ed f88d 	bl	80019f4 <LCD_PutStr>
 80148da:	4603      	mov	r3, r0
 80148dc:	461a      	mov	r2, r3
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	4413      	add	r3, r2
 80148e2:	60fb      	str	r3, [r7, #12]
 80148e4:	e078      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault5){
 80148e6:	4b3f      	ldr	r3, [pc, #252]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 80148e8:	791b      	ldrb	r3, [r3, #4]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00d      	beq.n	801490a <defaultHeaderFaults+0xc6>
		x += LCD_PutStr(x, y, DEFAULT_HEADER5_FAULT_LBL, fnt7x10);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	b298      	uxth	r0, r3
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	b299      	uxth	r1, r3
 80148f6:	4b3c      	ldr	r3, [pc, #240]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 80148f8:	4a40      	ldr	r2, [pc, #256]	; (80149fc <defaultHeaderFaults+0x1b8>)
 80148fa:	f7ed f87b 	bl	80019f4 <LCD_PutStr>
 80148fe:	4603      	mov	r3, r0
 8014900:	461a      	mov	r2, r3
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	4413      	add	r3, r2
 8014906:	60fb      	str	r3, [r7, #12]
 8014908:	e066      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault6){
 801490a:	4b36      	ldr	r3, [pc, #216]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 801490c:	795b      	ldrb	r3, [r3, #5]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d00d      	beq.n	801492e <defaultHeaderFaults+0xea>
		x += LCD_PutStr(x, y, DEFAULT_HEADER6_FAULT_LBL, fnt7x10);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	b298      	uxth	r0, r3
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	b299      	uxth	r1, r3
 801491a:	4b33      	ldr	r3, [pc, #204]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 801491c:	4a38      	ldr	r2, [pc, #224]	; (8014a00 <defaultHeaderFaults+0x1bc>)
 801491e:	f7ed f869 	bl	80019f4 <LCD_PutStr>
 8014922:	4603      	mov	r3, r0
 8014924:	461a      	mov	r2, r3
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	4413      	add	r3, r2
 801492a:	60fb      	str	r3, [r7, #12]
 801492c:	e054      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault7){
 801492e:	4b2d      	ldr	r3, [pc, #180]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 8014930:	799b      	ldrb	r3, [r3, #6]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00d      	beq.n	8014952 <defaultHeaderFaults+0x10e>
		x += LCD_PutStr(x, y, DEFAULT_HEADER7_FAULT_LBL, fnt7x10);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	b298      	uxth	r0, r3
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	b299      	uxth	r1, r3
 801493e:	4b2a      	ldr	r3, [pc, #168]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 8014940:	4a30      	ldr	r2, [pc, #192]	; (8014a04 <defaultHeaderFaults+0x1c0>)
 8014942:	f7ed f857 	bl	80019f4 <LCD_PutStr>
 8014946:	4603      	mov	r3, r0
 8014948:	461a      	mov	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	4413      	add	r3, r2
 801494e:	60fb      	str	r3, [r7, #12]
 8014950:	e042      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault8){
 8014952:	4b24      	ldr	r3, [pc, #144]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 8014954:	7adb      	ldrb	r3, [r3, #11]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d00d      	beq.n	8014976 <defaultHeaderFaults+0x132>
		x += LCD_PutStr(x, y, DEFAULT_HEADER8_FAULT_LBL, fnt7x10);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	b298      	uxth	r0, r3
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	b299      	uxth	r1, r3
 8014962:	4b21      	ldr	r3, [pc, #132]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 8014964:	4a28      	ldr	r2, [pc, #160]	; (8014a08 <defaultHeaderFaults+0x1c4>)
 8014966:	f7ed f845 	bl	80019f4 <LCD_PutStr>
 801496a:	4603      	mov	r3, r0
 801496c:	461a      	mov	r2, r3
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	4413      	add	r3, r2
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	e030      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault9){
 8014976:	4b1b      	ldr	r3, [pc, #108]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 8014978:	7b1b      	ldrb	r3, [r3, #12]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d00d      	beq.n	801499a <defaultHeaderFaults+0x156>
		x += LCD_PutStr(x, y, DEFAULT_HEADER9_FAULT_LBL, fnt7x10);
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	b298      	uxth	r0, r3
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	b299      	uxth	r1, r3
 8014986:	4b18      	ldr	r3, [pc, #96]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 8014988:	4a20      	ldr	r2, [pc, #128]	; (8014a0c <defaultHeaderFaults+0x1c8>)
 801498a:	f7ed f833 	bl	80019f4 <LCD_PutStr>
 801498e:	4603      	mov	r3, r0
 8014990:	461a      	mov	r2, r3
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	4413      	add	r3, r2
 8014996:	60fb      	str	r3, [r7, #12]
 8014998:	e01e      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.ledDriver){
 801499a:	4b12      	ldr	r3, [pc, #72]	; (80149e4 <defaultHeaderFaults+0x1a0>)
 801499c:	7b5b      	ldrb	r3, [r3, #13]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00d      	beq.n	80149be <defaultHeaderFaults+0x17a>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	b298      	uxth	r0, r3
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	b299      	uxth	r1, r3
 80149aa:	4b0f      	ldr	r3, [pc, #60]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 80149ac:	4a18      	ldr	r2, [pc, #96]	; (8014a10 <defaultHeaderFaults+0x1cc>)
 80149ae:	f7ed f821 	bl	80019f4 <LCD_PutStr>
 80149b2:	4603      	mov	r3, r0
 80149b4:	461a      	mov	r2, r3
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	4413      	add	r3, r2
 80149ba:	60fb      	str	r3, [r7, #12]
 80149bc:	e00c      	b.n	80149d8 <defaultHeaderFaults+0x194>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	b298      	uxth	r0, r3
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	b299      	uxth	r1, r3
 80149c6:	4b08      	ldr	r3, [pc, #32]	; (80149e8 <defaultHeaderFaults+0x1a4>)
 80149c8:	4a12      	ldr	r2, [pc, #72]	; (8014a14 <defaultHeaderFaults+0x1d0>)
 80149ca:	f7ed f813 	bl	80019f4 <LCD_PutStr>
 80149ce:	4603      	mov	r3, r0
 80149d0:	461a      	mov	r2, r3
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	4413      	add	r3, r2
 80149d6:	60fb      	str	r3, [r7, #12]
	}
	return x;
 80149d8:	68fb      	ldr	r3, [r7, #12]
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	2000338c 	.word	0x2000338c
 80149e8:	0801c0c0 	.word	0x0801c0c0
 80149ec:	0801afd8 	.word	0x0801afd8
 80149f0:	0801afe0 	.word	0x0801afe0
 80149f4:	0801aed0 	.word	0x0801aed0
 80149f8:	0801aed8 	.word	0x0801aed8
 80149fc:	0801aee0 	.word	0x0801aee0
 8014a00:	0801aee8 	.word	0x0801aee8
 8014a04:	0801aef0 	.word	0x0801aef0
 8014a08:	0801aef8 	.word	0x0801aef8
 8014a0c:	0801af00 	.word	0x0801af00
 8014a10:	0801afe8 	.word	0x0801afe8
 8014a14:	0801aff0 	.word	0x0801aff0

08014a18 <defaultStatusADCsAndGPIOs>:

void defaultStatusADCsAndGPIOs(){
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b088      	sub	sp, #32
 8014a1c:	af02      	add	r7, sp, #8
	int inputGpioAlignment=245;
 8014a1e:	23f5      	movs	r3, #245	; 0xf5
 8014a20:	617b      	str	r3, [r7, #20]
	int adjacentSpacing = 20;
 8014a22:	2314      	movs	r3, #20
 8014a24:	613b      	str	r3, [r7, #16]
	int i=10;
 8014a26:	230a      	movs	r3, #10
 8014a28:	60fb      	str	r3, [r7, #12]
	int j=95;
 8014a2a:	235f      	movs	r3, #95	; 0x5f
 8014a2c:	60bb      	str	r3, [r7, #8]
	int convertedFloat;
	i+= LCD_PutStr(i, j, DEFAULT_AI0, fnt7x10);
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	b298      	uxth	r0, r3
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	b299      	uxth	r1, r3
 8014a36:	4ba5      	ldr	r3, [pc, #660]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a38:	4aa5      	ldr	r2, [pc, #660]	; (8014cd0 <defaultStatusADCsAndGPIOs+0x2b8>)
 8014a3a:	f7ec ffdb 	bl	80019f4 <LCD_PutStr>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	461a      	mov	r2, r3
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	4413      	add	r3, r2
 8014a46:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_VSYS;
 8014a48:	4ba2      	ldr	r3, [pc, #648]	; (8014cd4 <defaultStatusADCsAndGPIOs+0x2bc>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4aa2      	ldr	r2, [pc, #648]	; (8014cd8 <defaultStatusADCsAndGPIOs+0x2c0>)
 8014a4e:	009b      	lsls	r3, r3, #2
 8014a50:	4413      	add	r3, r2
 8014a52:	edd3 7a00 	vldr	s15, [r3]
 8014a56:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8014cdc <defaultStatusADCsAndGPIOs+0x2c4>
 8014a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a62:	ee17 3a90 	vmov	r3, s15
 8014a66:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	b298      	uxth	r0, r3
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	b299      	uxth	r1, r3
 8014a70:	4b96      	ldr	r3, [pc, #600]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a72:	9300      	str	r3, [sp, #0]
 8014a74:	2303      	movs	r3, #3
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	f7ed f85a 	bl	8001b30 <LCD_PutIntF>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	461a      	mov	r2, r3
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	4413      	add	r3, r2
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	4413      	add	r3, r2
 8014a88:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI9, fnt7x10);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	b298      	uxth	r0, r3
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	b299      	uxth	r1, r3
 8014a92:	4b8e      	ldr	r3, [pc, #568]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a94:	4a92      	ldr	r2, [pc, #584]	; (8014ce0 <defaultStatusADCsAndGPIOs+0x2c8>)
 8014a96:	f7ec ffad 	bl	80019f4 <LCD_PutStr>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI9_VAL;
 8014aa4:	4b8b      	ldr	r3, [pc, #556]	; (8014cd4 <defaultStatusADCsAndGPIOs+0x2bc>)
 8014aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa8:	4a8b      	ldr	r2, [pc, #556]	; (8014cd8 <defaultStatusADCsAndGPIOs+0x2c0>)
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	4413      	add	r3, r2
 8014aae:	edd3 7a00 	vldr	s15, [r3]
 8014ab2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014cdc <defaultStatusADCsAndGPIOs+0x2c4>
 8014ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014abe:	ee17 3a90 	vmov	r3, s15
 8014ac2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	b298      	uxth	r0, r3
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	b299      	uxth	r1, r3
 8014acc:	4b7f      	ldr	r3, [pc, #508]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014ace:	9300      	str	r3, [sp, #0]
 8014ad0:	2303      	movs	r3, #3
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	f7ed f82c 	bl	8001b30 <LCD_PutIntF>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	461a      	mov	r2, r3
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	4413      	add	r3, r2
 8014ae0:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014ae2:	697b      	ldr	r3, [r7, #20]
 8014ae4:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN0, fnt7x10);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	b298      	uxth	r0, r3
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	b299      	uxth	r1, r3
 8014aee:	4b77      	ldr	r3, [pc, #476]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014af0:	4a7c      	ldr	r2, [pc, #496]	; (8014ce4 <defaultStatusADCsAndGPIOs+0x2cc>)
 8014af2:	f7ec ff7f 	bl	80019f4 <LCD_PutStr>
 8014af6:	4603      	mov	r3, r0
 8014af8:	461a      	mov	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	4413      	add	r3, r2
 8014afe:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN0_GPIO, fnt7x10)+adjacentSpacing;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	b298      	uxth	r0, r3
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	b299      	uxth	r1, r3
 8014b08:	4b77      	ldr	r3, [pc, #476]	; (8014ce8 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4b77      	ldr	r3, [pc, #476]	; (8014cec <defaultStatusADCsAndGPIOs+0x2d4>)
 8014b10:	5c9b      	ldrb	r3, [r3, r2]
 8014b12:	461a      	mov	r2, r3
 8014b14:	4b6d      	ldr	r3, [pc, #436]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014b16:	f7ec ffa5 	bl	8001a64 <LCD_PutInt>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	4413      	add	r3, r2
 8014b22:	68fa      	ldr	r2, [r7, #12]
 8014b24:	4413      	add	r3, r2
 8014b26:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN9, fnt7x10);
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	b298      	uxth	r0, r3
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	b299      	uxth	r1, r3
 8014b30:	4b66      	ldr	r3, [pc, #408]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014b32:	4a6f      	ldr	r2, [pc, #444]	; (8014cf0 <defaultStatusADCsAndGPIOs+0x2d8>)
 8014b34:	f7ec ff5e 	bl	80019f4 <LCD_PutStr>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	4413      	add	r3, r2
 8014b40:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN9_GPIO, fnt7x10);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	b298      	uxth	r0, r3
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	b299      	uxth	r1, r3
 8014b4a:	4b67      	ldr	r3, [pc, #412]	; (8014ce8 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014b4c:	7a5b      	ldrb	r3, [r3, #9]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	4b66      	ldr	r3, [pc, #408]	; (8014cec <defaultStatusADCsAndGPIOs+0x2d4>)
 8014b52:	5c9b      	ldrb	r3, [r3, r2]
 8014b54:	461a      	mov	r2, r3
 8014b56:	4b5d      	ldr	r3, [pc, #372]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014b58:	f7ec ff84 	bl	8001a64 <LCD_PutInt>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	461a      	mov	r2, r3
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	4413      	add	r3, r2
 8014b64:	60fb      	str	r3, [r7, #12]


	i=10;
 8014b66:	230a      	movs	r3, #10
 8014b68:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	330f      	adds	r3, #15
 8014b6e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI1, fnt7x10);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	b298      	uxth	r0, r3
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	b299      	uxth	r1, r3
 8014b78:	4b54      	ldr	r3, [pc, #336]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014b7a:	4a5e      	ldr	r2, [pc, #376]	; (8014cf4 <defaultStatusADCsAndGPIOs+0x2dc>)
 8014b7c:	f7ec ff3a 	bl	80019f4 <LCD_PutStr>
 8014b80:	4603      	mov	r3, r0
 8014b82:	461a      	mov	r2, r3
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	4413      	add	r3, r2
 8014b88:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI1_VAL;
 8014b8a:	4b52      	ldr	r3, [pc, #328]	; (8014cd4 <defaultStatusADCsAndGPIOs+0x2bc>)
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	4a52      	ldr	r2, [pc, #328]	; (8014cd8 <defaultStatusADCsAndGPIOs+0x2c0>)
 8014b90:	009b      	lsls	r3, r3, #2
 8014b92:	4413      	add	r3, r2
 8014b94:	edd3 7a00 	vldr	s15, [r3]
 8014b98:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8014cdc <defaultStatusADCsAndGPIOs+0x2c4>
 8014b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ba4:	ee17 3a90 	vmov	r3, s15
 8014ba8:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	b298      	uxth	r0, r3
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	b299      	uxth	r1, r3
 8014bb2:	4b46      	ldr	r3, [pc, #280]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014bb4:	9300      	str	r3, [sp, #0]
 8014bb6:	2303      	movs	r3, #3
 8014bb8:	687a      	ldr	r2, [r7, #4]
 8014bba:	f7ec ffb9 	bl	8001b30 <LCD_PutIntF>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	461a      	mov	r2, r3
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	4413      	add	r3, r2
 8014bc6:	68fa      	ldr	r2, [r7, #12]
 8014bc8:	4413      	add	r3, r2
 8014bca:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI10, fnt7x10);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	b298      	uxth	r0, r3
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	b299      	uxth	r1, r3
 8014bd4:	4b3d      	ldr	r3, [pc, #244]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014bd6:	4a48      	ldr	r2, [pc, #288]	; (8014cf8 <defaultStatusADCsAndGPIOs+0x2e0>)
 8014bd8:	f7ec ff0c 	bl	80019f4 <LCD_PutStr>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	461a      	mov	r2, r3
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	4413      	add	r3, r2
 8014be4:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI10_VAL;
 8014be6:	4b3b      	ldr	r3, [pc, #236]	; (8014cd4 <defaultStatusADCsAndGPIOs+0x2bc>)
 8014be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bea:	4a3b      	ldr	r2, [pc, #236]	; (8014cd8 <defaultStatusADCsAndGPIOs+0x2c0>)
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	4413      	add	r3, r2
 8014bf0:	edd3 7a00 	vldr	s15, [r3]
 8014bf4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8014cdc <defaultStatusADCsAndGPIOs+0x2c4>
 8014bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c00:	ee17 3a90 	vmov	r3, s15
 8014c04:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	b298      	uxth	r0, r3
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	b299      	uxth	r1, r3
 8014c0e:	4b2f      	ldr	r3, [pc, #188]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014c10:	9300      	str	r3, [sp, #0]
 8014c12:	2303      	movs	r3, #3
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	f7ec ff8b 	bl	8001b30 <LCD_PutIntF>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	4413      	add	r3, r2
 8014c22:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN1, fnt7x10);
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	b298      	uxth	r0, r3
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	b299      	uxth	r1, r3
 8014c30:	4b26      	ldr	r3, [pc, #152]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014c32:	4a32      	ldr	r2, [pc, #200]	; (8014cfc <defaultStatusADCsAndGPIOs+0x2e4>)
 8014c34:	f7ec fede 	bl	80019f4 <LCD_PutStr>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	4413      	add	r3, r2
 8014c40:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN1_GPIO, fnt7x10)+adjacentSpacing;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	b298      	uxth	r0, r3
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	b299      	uxth	r1, r3
 8014c4a:	4b27      	ldr	r3, [pc, #156]	; (8014ce8 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014c4c:	785b      	ldrb	r3, [r3, #1]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	4b26      	ldr	r3, [pc, #152]	; (8014cec <defaultStatusADCsAndGPIOs+0x2d4>)
 8014c52:	5c9b      	ldrb	r3, [r3, r2]
 8014c54:	461a      	mov	r2, r3
 8014c56:	4b1d      	ldr	r3, [pc, #116]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014c58:	f7ec ff04 	bl	8001a64 <LCD_PutInt>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	461a      	mov	r2, r3
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	4413      	add	r3, r2
 8014c64:	68fa      	ldr	r2, [r7, #12]
 8014c66:	4413      	add	r3, r2
 8014c68:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN10, fnt7x10);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	b298      	uxth	r0, r3
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	b299      	uxth	r1, r3
 8014c72:	4b16      	ldr	r3, [pc, #88]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014c74:	4a22      	ldr	r2, [pc, #136]	; (8014d00 <defaultStatusADCsAndGPIOs+0x2e8>)
 8014c76:	f7ec febd 	bl	80019f4 <LCD_PutStr>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	4413      	add	r3, r2
 8014c82:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN10_GPIO, fnt7x10);
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	b298      	uxth	r0, r3
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	b299      	uxth	r1, r3
 8014c8c:	4b16      	ldr	r3, [pc, #88]	; (8014ce8 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014c8e:	7a9b      	ldrb	r3, [r3, #10]
 8014c90:	461a      	mov	r2, r3
 8014c92:	4b16      	ldr	r3, [pc, #88]	; (8014cec <defaultStatusADCsAndGPIOs+0x2d4>)
 8014c94:	5c9b      	ldrb	r3, [r3, r2]
 8014c96:	461a      	mov	r2, r3
 8014c98:	4b0c      	ldr	r3, [pc, #48]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014c9a:	f7ec fee3 	bl	8001a64 <LCD_PutInt>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	4413      	add	r3, r2
 8014ca6:	60fb      	str	r3, [r7, #12]

	i=10;
 8014ca8:	230a      	movs	r3, #10
 8014caa:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	330f      	adds	r3, #15
 8014cb0:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI2, fnt7x10);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	b298      	uxth	r0, r3
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	b299      	uxth	r1, r3
 8014cba:	4b04      	ldr	r3, [pc, #16]	; (8014ccc <defaultStatusADCsAndGPIOs+0x2b4>)
 8014cbc:	4a11      	ldr	r2, [pc, #68]	; (8014d04 <defaultStatusADCsAndGPIOs+0x2ec>)
 8014cbe:	f7ec fe99 	bl	80019f4 <LCD_PutStr>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	4413      	add	r3, r2
 8014cca:	e01d      	b.n	8014d08 <defaultStatusADCsAndGPIOs+0x2f0>
 8014ccc:	0801c0c0 	.word	0x0801c0c0
 8014cd0:	0801aff8 	.word	0x0801aff8
 8014cd4:	200001f4 	.word	0x200001f4
 8014cd8:	2003119c 	.word	0x2003119c
 8014cdc:	447a0000 	.word	0x447a0000
 8014ce0:	0801b000 	.word	0x0801b000
 8014ce4:	0801b008 	.word	0x0801b008
 8014ce8:	200001e8 	.word	0x200001e8
 8014cec:	20028df0 	.word	0x20028df0
 8014cf0:	0801b010 	.word	0x0801b010
 8014cf4:	0801b018 	.word	0x0801b018
 8014cf8:	0801b020 	.word	0x0801b020
 8014cfc:	0801b028 	.word	0x0801b028
 8014d00:	0801b030 	.word	0x0801b030
 8014d04:	0801b038 	.word	0x0801b038
 8014d08:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI2_VAL;
 8014d0a:	4ba6      	ldr	r3, [pc, #664]	; (8014fa4 <defaultStatusADCsAndGPIOs+0x58c>)
 8014d0c:	689b      	ldr	r3, [r3, #8]
 8014d0e:	4aa6      	ldr	r2, [pc, #664]	; (8014fa8 <defaultStatusADCsAndGPIOs+0x590>)
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	4413      	add	r3, r2
 8014d14:	edd3 7a00 	vldr	s15, [r3]
 8014d18:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8014fac <defaultStatusADCsAndGPIOs+0x594>
 8014d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d24:	ee17 3a90 	vmov	r3, s15
 8014d28:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	b298      	uxth	r0, r3
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	b299      	uxth	r1, r3
 8014d32:	4b9f      	ldr	r3, [pc, #636]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	2303      	movs	r3, #3
 8014d38:	687a      	ldr	r2, [r7, #4]
 8014d3a:	f7ec fef9 	bl	8001b30 <LCD_PutIntF>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	461a      	mov	r2, r3
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	4413      	add	r3, r2
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	4413      	add	r3, r2
 8014d4a:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI11, fnt7x10);
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	b298      	uxth	r0, r3
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	b299      	uxth	r1, r3
 8014d54:	4b96      	ldr	r3, [pc, #600]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014d56:	4a97      	ldr	r2, [pc, #604]	; (8014fb4 <defaultStatusADCsAndGPIOs+0x59c>)
 8014d58:	f7ec fe4c 	bl	80019f4 <LCD_PutStr>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	461a      	mov	r2, r3
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	4413      	add	r3, r2
 8014d64:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI11_VAL;
 8014d66:	4b8f      	ldr	r3, [pc, #572]	; (8014fa4 <defaultStatusADCsAndGPIOs+0x58c>)
 8014d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d6a:	4a8f      	ldr	r2, [pc, #572]	; (8014fa8 <defaultStatusADCsAndGPIOs+0x590>)
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	4413      	add	r3, r2
 8014d70:	edd3 7a00 	vldr	s15, [r3]
 8014d74:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014fac <defaultStatusADCsAndGPIOs+0x594>
 8014d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d80:	ee17 3a90 	vmov	r3, s15
 8014d84:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	b298      	uxth	r0, r3
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	b299      	uxth	r1, r3
 8014d8e:	4b88      	ldr	r3, [pc, #544]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	2303      	movs	r3, #3
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	f7ec fecb 	bl	8001b30 <LCD_PutIntF>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	4413      	add	r3, r2
 8014da2:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN2, fnt7x10);
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	b298      	uxth	r0, r3
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	b299      	uxth	r1, r3
 8014db0:	4b7f      	ldr	r3, [pc, #508]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014db2:	4a81      	ldr	r2, [pc, #516]	; (8014fb8 <defaultStatusADCsAndGPIOs+0x5a0>)
 8014db4:	f7ec fe1e 	bl	80019f4 <LCD_PutStr>
 8014db8:	4603      	mov	r3, r0
 8014dba:	461a      	mov	r2, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	4413      	add	r3, r2
 8014dc0:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN2_GPIO, fnt7x10)+adjacentSpacing;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	b298      	uxth	r0, r3
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	b299      	uxth	r1, r3
 8014dca:	4b7c      	ldr	r3, [pc, #496]	; (8014fbc <defaultStatusADCsAndGPIOs+0x5a4>)
 8014dcc:	789b      	ldrb	r3, [r3, #2]
 8014dce:	461a      	mov	r2, r3
 8014dd0:	4b7b      	ldr	r3, [pc, #492]	; (8014fc0 <defaultStatusADCsAndGPIOs+0x5a8>)
 8014dd2:	5c9b      	ldrb	r3, [r3, r2]
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	4b76      	ldr	r3, [pc, #472]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014dd8:	f7ec fe44 	bl	8001a64 <LCD_PutInt>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	461a      	mov	r2, r3
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	4413      	add	r3, r2
 8014de4:	68fa      	ldr	r2, [r7, #12]
 8014de6:	4413      	add	r3, r2
 8014de8:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN11, fnt7x10);
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	b298      	uxth	r0, r3
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	b299      	uxth	r1, r3
 8014df2:	4b6f      	ldr	r3, [pc, #444]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014df4:	4a73      	ldr	r2, [pc, #460]	; (8014fc4 <defaultStatusADCsAndGPIOs+0x5ac>)
 8014df6:	f7ec fdfd 	bl	80019f4 <LCD_PutStr>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	4413      	add	r3, r2
 8014e02:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN11_GPIO, fnt7x10);
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	b298      	uxth	r0, r3
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	b299      	uxth	r1, r3
 8014e0c:	4b6b      	ldr	r3, [pc, #428]	; (8014fbc <defaultStatusADCsAndGPIOs+0x5a4>)
 8014e0e:	7adb      	ldrb	r3, [r3, #11]
 8014e10:	461a      	mov	r2, r3
 8014e12:	4b6b      	ldr	r3, [pc, #428]	; (8014fc0 <defaultStatusADCsAndGPIOs+0x5a8>)
 8014e14:	5c9b      	ldrb	r3, [r3, r2]
 8014e16:	461a      	mov	r2, r3
 8014e18:	4b65      	ldr	r3, [pc, #404]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014e1a:	f7ec fe23 	bl	8001a64 <LCD_PutInt>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	461a      	mov	r2, r3
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	4413      	add	r3, r2
 8014e26:	60fb      	str	r3, [r7, #12]

	i=10;
 8014e28:	230a      	movs	r3, #10
 8014e2a:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	330f      	adds	r3, #15
 8014e30:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI3, fnt7x10);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	b298      	uxth	r0, r3
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	b299      	uxth	r1, r3
 8014e3a:	4b5d      	ldr	r3, [pc, #372]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014e3c:	4a62      	ldr	r2, [pc, #392]	; (8014fc8 <defaultStatusADCsAndGPIOs+0x5b0>)
 8014e3e:	f7ec fdd9 	bl	80019f4 <LCD_PutStr>
 8014e42:	4603      	mov	r3, r0
 8014e44:	461a      	mov	r2, r3
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	4413      	add	r3, r2
 8014e4a:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI3_VAL;
 8014e4c:	4b55      	ldr	r3, [pc, #340]	; (8014fa4 <defaultStatusADCsAndGPIOs+0x58c>)
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	4a55      	ldr	r2, [pc, #340]	; (8014fa8 <defaultStatusADCsAndGPIOs+0x590>)
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	4413      	add	r3, r2
 8014e56:	edd3 7a00 	vldr	s15, [r3]
 8014e5a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014fac <defaultStatusADCsAndGPIOs+0x594>
 8014e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e66:	ee17 3a90 	vmov	r3, s15
 8014e6a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	b298      	uxth	r0, r3
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	b299      	uxth	r1, r3
 8014e74:	4b4e      	ldr	r3, [pc, #312]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014e76:	9300      	str	r3, [sp, #0]
 8014e78:	2303      	movs	r3, #3
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	f7ec fe58 	bl	8001b30 <LCD_PutIntF>
 8014e80:	4603      	mov	r3, r0
 8014e82:	461a      	mov	r2, r3
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	4413      	add	r3, r2
 8014e88:	68fa      	ldr	r2, [r7, #12]
 8014e8a:	4413      	add	r3, r2
 8014e8c:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI12, fnt7x10);
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	b298      	uxth	r0, r3
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	b299      	uxth	r1, r3
 8014e96:	4b46      	ldr	r3, [pc, #280]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014e98:	4a4c      	ldr	r2, [pc, #304]	; (8014fcc <defaultStatusADCsAndGPIOs+0x5b4>)
 8014e9a:	f7ec fdab 	bl	80019f4 <LCD_PutStr>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI12_VAL;
 8014ea8:	4b3e      	ldr	r3, [pc, #248]	; (8014fa4 <defaultStatusADCsAndGPIOs+0x58c>)
 8014eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eac:	4a3e      	ldr	r2, [pc, #248]	; (8014fa8 <defaultStatusADCsAndGPIOs+0x590>)
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	4413      	add	r3, r2
 8014eb2:	edd3 7a00 	vldr	s15, [r3]
 8014eb6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8014fac <defaultStatusADCsAndGPIOs+0x594>
 8014eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ec2:	ee17 3a90 	vmov	r3, s15
 8014ec6:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	b298      	uxth	r0, r3
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	b299      	uxth	r1, r3
 8014ed0:	4b37      	ldr	r3, [pc, #220]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	2303      	movs	r3, #3
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	f7ec fe2a 	bl	8001b30 <LCD_PutIntF>
 8014edc:	4603      	mov	r3, r0
 8014ede:	461a      	mov	r2, r3
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	4413      	add	r3, r2
 8014ee4:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN3, fnt7x10);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	b298      	uxth	r0, r3
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	b299      	uxth	r1, r3
 8014ef2:	4b2f      	ldr	r3, [pc, #188]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014ef4:	4a36      	ldr	r2, [pc, #216]	; (8014fd0 <defaultStatusADCsAndGPIOs+0x5b8>)
 8014ef6:	f7ec fd7d 	bl	80019f4 <LCD_PutStr>
 8014efa:	4603      	mov	r3, r0
 8014efc:	461a      	mov	r2, r3
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	4413      	add	r3, r2
 8014f02:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN3_GPIO, fnt7x10);
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	b298      	uxth	r0, r3
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	b299      	uxth	r1, r3
 8014f0c:	4b2b      	ldr	r3, [pc, #172]	; (8014fbc <defaultStatusADCsAndGPIOs+0x5a4>)
 8014f0e:	78db      	ldrb	r3, [r3, #3]
 8014f10:	461a      	mov	r2, r3
 8014f12:	4b2b      	ldr	r3, [pc, #172]	; (8014fc0 <defaultStatusADCsAndGPIOs+0x5a8>)
 8014f14:	5c9b      	ldrb	r3, [r3, r2]
 8014f16:	461a      	mov	r2, r3
 8014f18:	4b25      	ldr	r3, [pc, #148]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014f1a:	f7ec fda3 	bl	8001a64 <LCD_PutInt>


	i=10;
 8014f1e:	230a      	movs	r3, #10
 8014f20:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	330f      	adds	r3, #15
 8014f26:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI4, fnt7x10);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	b298      	uxth	r0, r3
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	b299      	uxth	r1, r3
 8014f30:	4b1f      	ldr	r3, [pc, #124]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014f32:	4a28      	ldr	r2, [pc, #160]	; (8014fd4 <defaultStatusADCsAndGPIOs+0x5bc>)
 8014f34:	f7ec fd5e 	bl	80019f4 <LCD_PutStr>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	4413      	add	r3, r2
 8014f40:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI4_VAL;
 8014f42:	4b18      	ldr	r3, [pc, #96]	; (8014fa4 <defaultStatusADCsAndGPIOs+0x58c>)
 8014f44:	691b      	ldr	r3, [r3, #16]
 8014f46:	4a18      	ldr	r2, [pc, #96]	; (8014fa8 <defaultStatusADCsAndGPIOs+0x590>)
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	4413      	add	r3, r2
 8014f4c:	edd3 7a00 	vldr	s15, [r3]
 8014f50:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014fac <defaultStatusADCsAndGPIOs+0x594>
 8014f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f5c:	ee17 3a90 	vmov	r3, s15
 8014f60:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	b298      	uxth	r0, r3
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	b299      	uxth	r1, r3
 8014f6a:	4b11      	ldr	r3, [pc, #68]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014f6c:	9300      	str	r3, [sp, #0]
 8014f6e:	2303      	movs	r3, #3
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	f7ec fddd 	bl	8001b30 <LCD_PutIntF>
 8014f76:	4603      	mov	r3, r0
 8014f78:	461a      	mov	r2, r3
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	68fa      	ldr	r2, [r7, #12]
 8014f80:	4413      	add	r3, r2
 8014f82:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI13, fnt7x10);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	b298      	uxth	r0, r3
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	b299      	uxth	r1, r3
 8014f8c:	4b08      	ldr	r3, [pc, #32]	; (8014fb0 <defaultStatusADCsAndGPIOs+0x598>)
 8014f8e:	4a12      	ldr	r2, [pc, #72]	; (8014fd8 <defaultStatusADCsAndGPIOs+0x5c0>)
 8014f90:	f7ec fd30 	bl	80019f4 <LCD_PutStr>
 8014f94:	4603      	mov	r3, r0
 8014f96:	461a      	mov	r2, r3
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI13_VAL;
 8014f9e:	4b01      	ldr	r3, [pc, #4]	; (8014fa4 <defaultStatusADCsAndGPIOs+0x58c>)
 8014fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fa2:	e01b      	b.n	8014fdc <defaultStatusADCsAndGPIOs+0x5c4>
 8014fa4:	200001f4 	.word	0x200001f4
 8014fa8:	2003119c 	.word	0x2003119c
 8014fac:	447a0000 	.word	0x447a0000
 8014fb0:	0801c0c0 	.word	0x0801c0c0
 8014fb4:	0801b040 	.word	0x0801b040
 8014fb8:	0801b048 	.word	0x0801b048
 8014fbc:	200001e8 	.word	0x200001e8
 8014fc0:	20028df0 	.word	0x20028df0
 8014fc4:	0801b050 	.word	0x0801b050
 8014fc8:	0801b058 	.word	0x0801b058
 8014fcc:	0801b060 	.word	0x0801b060
 8014fd0:	0801b068 	.word	0x0801b068
 8014fd4:	0801b070 	.word	0x0801b070
 8014fd8:	0801b078 	.word	0x0801b078
 8014fdc:	4aa7      	ldr	r2, [pc, #668]	; (801527c <defaultStatusADCsAndGPIOs+0x864>)
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	4413      	add	r3, r2
 8014fe2:	edd3 7a00 	vldr	s15, [r3]
 8014fe6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8015280 <defaultStatusADCsAndGPIOs+0x868>
 8014fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ff2:	ee17 3a90 	vmov	r3, s15
 8014ff6:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	b298      	uxth	r0, r3
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	b299      	uxth	r1, r3
 8015000:	4ba0      	ldr	r3, [pc, #640]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	2303      	movs	r3, #3
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	f7ec fd92 	bl	8001b30 <LCD_PutIntF>
 801500c:	4603      	mov	r3, r0
 801500e:	461a      	mov	r2, r3
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	4413      	add	r3, r2
 8015014:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN4, fnt7x10);
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	b298      	uxth	r0, r3
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	b299      	uxth	r1, r3
 8015022:	4b98      	ldr	r3, [pc, #608]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015024:	4a98      	ldr	r2, [pc, #608]	; (8015288 <defaultStatusADCsAndGPIOs+0x870>)
 8015026:	f7ec fce5 	bl	80019f4 <LCD_PutStr>
 801502a:	4603      	mov	r3, r0
 801502c:	461a      	mov	r2, r3
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	4413      	add	r3, r2
 8015032:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN3_GPIO, fnt7x10);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	b298      	uxth	r0, r3
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	b299      	uxth	r1, r3
 801503c:	4b93      	ldr	r3, [pc, #588]	; (801528c <defaultStatusADCsAndGPIOs+0x874>)
 801503e:	78db      	ldrb	r3, [r3, #3]
 8015040:	461a      	mov	r2, r3
 8015042:	4b93      	ldr	r3, [pc, #588]	; (8015290 <defaultStatusADCsAndGPIOs+0x878>)
 8015044:	5c9b      	ldrb	r3, [r3, r2]
 8015046:	461a      	mov	r2, r3
 8015048:	4b8e      	ldr	r3, [pc, #568]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 801504a:	f7ec fd0b 	bl	8001a64 <LCD_PutInt>

	i=10;
 801504e:	230a      	movs	r3, #10
 8015050:	60fb      	str	r3, [r7, #12]
	j+=15;
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	330f      	adds	r3, #15
 8015056:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI5, fnt7x10);
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	b298      	uxth	r0, r3
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	b299      	uxth	r1, r3
 8015060:	4b88      	ldr	r3, [pc, #544]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015062:	4a8c      	ldr	r2, [pc, #560]	; (8015294 <defaultStatusADCsAndGPIOs+0x87c>)
 8015064:	f7ec fcc6 	bl	80019f4 <LCD_PutStr>
 8015068:	4603      	mov	r3, r0
 801506a:	461a      	mov	r2, r3
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	4413      	add	r3, r2
 8015070:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI5_VAL;
 8015072:	4b89      	ldr	r3, [pc, #548]	; (8015298 <defaultStatusADCsAndGPIOs+0x880>)
 8015074:	695b      	ldr	r3, [r3, #20]
 8015076:	4a81      	ldr	r2, [pc, #516]	; (801527c <defaultStatusADCsAndGPIOs+0x864>)
 8015078:	009b      	lsls	r3, r3, #2
 801507a:	4413      	add	r3, r2
 801507c:	edd3 7a00 	vldr	s15, [r3]
 8015080:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8015280 <defaultStatusADCsAndGPIOs+0x868>
 8015084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801508c:	ee17 3a90 	vmov	r3, s15
 8015090:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	b298      	uxth	r0, r3
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	b299      	uxth	r1, r3
 801509a:	4b7a      	ldr	r3, [pc, #488]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 801509c:	9300      	str	r3, [sp, #0]
 801509e:	2303      	movs	r3, #3
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	f7ec fd45 	bl	8001b30 <LCD_PutIntF>
 80150a6:	4603      	mov	r3, r0
 80150a8:	461a      	mov	r2, r3
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	4413      	add	r3, r2
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	4413      	add	r3, r2
 80150b2:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI14, fnt7x10);
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	b298      	uxth	r0, r3
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	b299      	uxth	r1, r3
 80150bc:	4b71      	ldr	r3, [pc, #452]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 80150be:	4a77      	ldr	r2, [pc, #476]	; (801529c <defaultStatusADCsAndGPIOs+0x884>)
 80150c0:	f7ec fc98 	bl	80019f4 <LCD_PutStr>
 80150c4:	4603      	mov	r3, r0
 80150c6:	461a      	mov	r2, r3
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	4413      	add	r3, r2
 80150cc:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI14_VAL;
 80150ce:	4b72      	ldr	r3, [pc, #456]	; (8015298 <defaultStatusADCsAndGPIOs+0x880>)
 80150d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150d2:	4a6a      	ldr	r2, [pc, #424]	; (801527c <defaultStatusADCsAndGPIOs+0x864>)
 80150d4:	009b      	lsls	r3, r3, #2
 80150d6:	4413      	add	r3, r2
 80150d8:	edd3 7a00 	vldr	s15, [r3]
 80150dc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8015280 <defaultStatusADCsAndGPIOs+0x868>
 80150e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80150e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150e8:	ee17 3a90 	vmov	r3, s15
 80150ec:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	b298      	uxth	r0, r3
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	b299      	uxth	r1, r3
 80150f6:	4b63      	ldr	r3, [pc, #396]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 80150f8:	9300      	str	r3, [sp, #0]
 80150fa:	2303      	movs	r3, #3
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	f7ec fd17 	bl	8001b30 <LCD_PutIntF>
 8015102:	4603      	mov	r3, r0
 8015104:	461a      	mov	r2, r3
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	4413      	add	r3, r2
 801510a:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN5, fnt7x10);
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	b298      	uxth	r0, r3
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	b299      	uxth	r1, r3
 8015118:	4b5a      	ldr	r3, [pc, #360]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 801511a:	4a61      	ldr	r2, [pc, #388]	; (80152a0 <defaultStatusADCsAndGPIOs+0x888>)
 801511c:	f7ec fc6a 	bl	80019f4 <LCD_PutStr>
 8015120:	4603      	mov	r3, r0
 8015122:	461a      	mov	r2, r3
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	4413      	add	r3, r2
 8015128:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN5_GPIO, fnt7x10);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	b298      	uxth	r0, r3
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	b299      	uxth	r1, r3
 8015132:	4b56      	ldr	r3, [pc, #344]	; (801528c <defaultStatusADCsAndGPIOs+0x874>)
 8015134:	795b      	ldrb	r3, [r3, #5]
 8015136:	461a      	mov	r2, r3
 8015138:	4b55      	ldr	r3, [pc, #340]	; (8015290 <defaultStatusADCsAndGPIOs+0x878>)
 801513a:	5c9b      	ldrb	r3, [r3, r2]
 801513c:	461a      	mov	r2, r3
 801513e:	4b51      	ldr	r3, [pc, #324]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015140:	f7ec fc90 	bl	8001a64 <LCD_PutInt>

	i=10;
 8015144:	230a      	movs	r3, #10
 8015146:	60fb      	str	r3, [r7, #12]
	j+=15;
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	330f      	adds	r3, #15
 801514c:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI6, fnt7x10);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	b298      	uxth	r0, r3
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	b299      	uxth	r1, r3
 8015156:	4b4b      	ldr	r3, [pc, #300]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015158:	4a52      	ldr	r2, [pc, #328]	; (80152a4 <defaultStatusADCsAndGPIOs+0x88c>)
 801515a:	f7ec fc4b 	bl	80019f4 <LCD_PutStr>
 801515e:	4603      	mov	r3, r0
 8015160:	461a      	mov	r2, r3
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	4413      	add	r3, r2
 8015166:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI6_VAL;
 8015168:	4b4b      	ldr	r3, [pc, #300]	; (8015298 <defaultStatusADCsAndGPIOs+0x880>)
 801516a:	699b      	ldr	r3, [r3, #24]
 801516c:	4a43      	ldr	r2, [pc, #268]	; (801527c <defaultStatusADCsAndGPIOs+0x864>)
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	4413      	add	r3, r2
 8015172:	edd3 7a00 	vldr	s15, [r3]
 8015176:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8015280 <defaultStatusADCsAndGPIOs+0x868>
 801517a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801517e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015182:	ee17 3a90 	vmov	r3, s15
 8015186:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	b298      	uxth	r0, r3
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	b299      	uxth	r1, r3
 8015190:	4b3c      	ldr	r3, [pc, #240]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015192:	9300      	str	r3, [sp, #0]
 8015194:	2303      	movs	r3, #3
 8015196:	687a      	ldr	r2, [r7, #4]
 8015198:	f7ec fcca 	bl	8001b30 <LCD_PutIntF>
 801519c:	4603      	mov	r3, r0
 801519e:	461a      	mov	r2, r3
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	4413      	add	r3, r2
 80151a4:	68fa      	ldr	r2, [r7, #12]
 80151a6:	4413      	add	r3, r2
 80151a8:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI15, fnt7x10);
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	b298      	uxth	r0, r3
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	b299      	uxth	r1, r3
 80151b2:	4b34      	ldr	r3, [pc, #208]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 80151b4:	4a3c      	ldr	r2, [pc, #240]	; (80152a8 <defaultStatusADCsAndGPIOs+0x890>)
 80151b6:	f7ec fc1d 	bl	80019f4 <LCD_PutStr>
 80151ba:	4603      	mov	r3, r0
 80151bc:	461a      	mov	r2, r3
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	4413      	add	r3, r2
 80151c2:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI15_VAL;
 80151c4:	4b34      	ldr	r3, [pc, #208]	; (8015298 <defaultStatusADCsAndGPIOs+0x880>)
 80151c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151c8:	4a2c      	ldr	r2, [pc, #176]	; (801527c <defaultStatusADCsAndGPIOs+0x864>)
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	edd3 7a00 	vldr	s15, [r3]
 80151d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8015280 <defaultStatusADCsAndGPIOs+0x868>
 80151d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151de:	ee17 3a90 	vmov	r3, s15
 80151e2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	b298      	uxth	r0, r3
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	b299      	uxth	r1, r3
 80151ec:	4b25      	ldr	r3, [pc, #148]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 80151ee:	9300      	str	r3, [sp, #0]
 80151f0:	2303      	movs	r3, #3
 80151f2:	687a      	ldr	r2, [r7, #4]
 80151f4:	f7ec fc9c 	bl	8001b30 <LCD_PutIntF>
 80151f8:	4603      	mov	r3, r0
 80151fa:	461a      	mov	r2, r3
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	4413      	add	r3, r2
 8015200:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN6, fnt7x10);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	b298      	uxth	r0, r3
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	b299      	uxth	r1, r3
 801520e:	4b1d      	ldr	r3, [pc, #116]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015210:	4a26      	ldr	r2, [pc, #152]	; (80152ac <defaultStatusADCsAndGPIOs+0x894>)
 8015212:	f7ec fbef 	bl	80019f4 <LCD_PutStr>
 8015216:	4603      	mov	r3, r0
 8015218:	461a      	mov	r2, r3
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	4413      	add	r3, r2
 801521e:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN6_GPIO, fnt7x10);
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	b298      	uxth	r0, r3
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	b299      	uxth	r1, r3
 8015228:	4b18      	ldr	r3, [pc, #96]	; (801528c <defaultStatusADCsAndGPIOs+0x874>)
 801522a:	799b      	ldrb	r3, [r3, #6]
 801522c:	461a      	mov	r2, r3
 801522e:	4b18      	ldr	r3, [pc, #96]	; (8015290 <defaultStatusADCsAndGPIOs+0x878>)
 8015230:	5c9b      	ldrb	r3, [r3, r2]
 8015232:	461a      	mov	r2, r3
 8015234:	4b13      	ldr	r3, [pc, #76]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 8015236:	f7ec fc15 	bl	8001a64 <LCD_PutInt>

	i=10;
 801523a:	230a      	movs	r3, #10
 801523c:	60fb      	str	r3, [r7, #12]
	j+=15;
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	330f      	adds	r3, #15
 8015242:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI7, fnt7x10);
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	b298      	uxth	r0, r3
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	b299      	uxth	r1, r3
 801524c:	4b0d      	ldr	r3, [pc, #52]	; (8015284 <defaultStatusADCsAndGPIOs+0x86c>)
 801524e:	4a18      	ldr	r2, [pc, #96]	; (80152b0 <defaultStatusADCsAndGPIOs+0x898>)
 8015250:	f7ec fbd0 	bl	80019f4 <LCD_PutStr>
 8015254:	4603      	mov	r3, r0
 8015256:	461a      	mov	r2, r3
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	4413      	add	r3, r2
 801525c:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI7_VAL;
 801525e:	4b0e      	ldr	r3, [pc, #56]	; (8015298 <defaultStatusADCsAndGPIOs+0x880>)
 8015260:	69db      	ldr	r3, [r3, #28]
 8015262:	4a06      	ldr	r2, [pc, #24]	; (801527c <defaultStatusADCsAndGPIOs+0x864>)
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	4413      	add	r3, r2
 8015268:	edd3 7a00 	vldr	s15, [r3]
 801526c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8015280 <defaultStatusADCsAndGPIOs+0x868>
 8015270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015278:	e01c      	b.n	80152b4 <defaultStatusADCsAndGPIOs+0x89c>
 801527a:	bf00      	nop
 801527c:	2003119c 	.word	0x2003119c
 8015280:	447a0000 	.word	0x447a0000
 8015284:	0801c0c0 	.word	0x0801c0c0
 8015288:	0801b080 	.word	0x0801b080
 801528c:	200001e8 	.word	0x200001e8
 8015290:	20028df0 	.word	0x20028df0
 8015294:	0801b088 	.word	0x0801b088
 8015298:	200001f4 	.word	0x200001f4
 801529c:	0801b090 	.word	0x0801b090
 80152a0:	0801b098 	.word	0x0801b098
 80152a4:	0801b0a0 	.word	0x0801b0a0
 80152a8:	0801b0a8 	.word	0x0801b0a8
 80152ac:	0801b0b0 	.word	0x0801b0b0
 80152b0:	0801b0b8 	.word	0x0801b0b8
 80152b4:	ee17 3a90 	vmov	r3, s15
 80152b8:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	b298      	uxth	r0, r3
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	b299      	uxth	r1, r3
 80152c2:	4b4d      	ldr	r3, [pc, #308]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	2303      	movs	r3, #3
 80152c8:	687a      	ldr	r2, [r7, #4]
 80152ca:	f7ec fc31 	bl	8001b30 <LCD_PutIntF>
 80152ce:	4603      	mov	r3, r0
 80152d0:	461a      	mov	r2, r3
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	4413      	add	r3, r2
 80152d6:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN7, fnt7x10);
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	b298      	uxth	r0, r3
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	b299      	uxth	r1, r3
 80152e4:	4b44      	ldr	r3, [pc, #272]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 80152e6:	4a45      	ldr	r2, [pc, #276]	; (80153fc <defaultStatusADCsAndGPIOs+0x9e4>)
 80152e8:	f7ec fb84 	bl	80019f4 <LCD_PutStr>
 80152ec:	4603      	mov	r3, r0
 80152ee:	461a      	mov	r2, r3
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	4413      	add	r3, r2
 80152f4:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN7_GPIO, fnt7x10);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	b298      	uxth	r0, r3
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	b299      	uxth	r1, r3
 80152fe:	4b40      	ldr	r3, [pc, #256]	; (8015400 <defaultStatusADCsAndGPIOs+0x9e8>)
 8015300:	79db      	ldrb	r3, [r3, #7]
 8015302:	461a      	mov	r2, r3
 8015304:	4b3f      	ldr	r3, [pc, #252]	; (8015404 <defaultStatusADCsAndGPIOs+0x9ec>)
 8015306:	5c9b      	ldrb	r3, [r3, r2]
 8015308:	461a      	mov	r2, r3
 801530a:	4b3b      	ldr	r3, [pc, #236]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 801530c:	f7ec fbaa 	bl	8001a64 <LCD_PutInt>

	i=10;
 8015310:	230a      	movs	r3, #10
 8015312:	60fb      	str	r3, [r7, #12]
	j+=15;
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	330f      	adds	r3, #15
 8015318:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI8, fnt7x10);
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	b298      	uxth	r0, r3
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	b299      	uxth	r1, r3
 8015322:	4b35      	ldr	r3, [pc, #212]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 8015324:	4a38      	ldr	r2, [pc, #224]	; (8015408 <defaultStatusADCsAndGPIOs+0x9f0>)
 8015326:	f7ec fb65 	bl	80019f4 <LCD_PutStr>
 801532a:	4603      	mov	r3, r0
 801532c:	461a      	mov	r2, r3
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	4413      	add	r3, r2
 8015332:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI8_VAL;
 8015334:	4b35      	ldr	r3, [pc, #212]	; (801540c <defaultStatusADCsAndGPIOs+0x9f4>)
 8015336:	6a1b      	ldr	r3, [r3, #32]
 8015338:	4a35      	ldr	r2, [pc, #212]	; (8015410 <defaultStatusADCsAndGPIOs+0x9f8>)
 801533a:	009b      	lsls	r3, r3, #2
 801533c:	4413      	add	r3, r2
 801533e:	edd3 7a00 	vldr	s15, [r3]
 8015342:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015414 <defaultStatusADCsAndGPIOs+0x9fc>
 8015346:	ee67 7a87 	vmul.f32	s15, s15, s14
 801534a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801534e:	ee17 3a90 	vmov	r3, s15
 8015352:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	b298      	uxth	r0, r3
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	b299      	uxth	r1, r3
 801535c:	4b26      	ldr	r3, [pc, #152]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	2303      	movs	r3, #3
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	f7ec fbe4 	bl	8001b30 <LCD_PutIntF>
 8015368:	4603      	mov	r3, r0
 801536a:	461a      	mov	r2, r3
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	4413      	add	r3, r2
 8015370:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN8, fnt7x10);
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	b298      	uxth	r0, r3
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	b299      	uxth	r1, r3
 801537e:	4b1e      	ldr	r3, [pc, #120]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 8015380:	4a25      	ldr	r2, [pc, #148]	; (8015418 <defaultStatusADCsAndGPIOs+0xa00>)
 8015382:	f7ec fb37 	bl	80019f4 <LCD_PutStr>
 8015386:	4603      	mov	r3, r0
 8015388:	461a      	mov	r2, r3
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	4413      	add	r3, r2
 801538e:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN8_GPIO, fnt7x10);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	b298      	uxth	r0, r3
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	b299      	uxth	r1, r3
 8015398:	4b19      	ldr	r3, [pc, #100]	; (8015400 <defaultStatusADCsAndGPIOs+0x9e8>)
 801539a:	7a1b      	ldrb	r3, [r3, #8]
 801539c:	461a      	mov	r2, r3
 801539e:	4b19      	ldr	r3, [pc, #100]	; (8015404 <defaultStatusADCsAndGPIOs+0x9ec>)
 80153a0:	5c9b      	ldrb	r3, [r3, r2]
 80153a2:	461a      	mov	r2, r3
 80153a4:	4b14      	ldr	r3, [pc, #80]	; (80153f8 <defaultStatusADCsAndGPIOs+0x9e0>)
 80153a6:	f7ec fb5d 	bl	8001a64 <LCD_PutInt>
	//horizontal divider
	j=65;
 80153aa:	2341      	movs	r3, #65	; 0x41
 80153ac:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 80153ae:	68bb      	ldr	r3, [r7, #8]
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	3b01      	subs	r3, #1
 80153b4:	b299      	uxth	r1, r3
 80153b6:	4b19      	ldr	r3, [pc, #100]	; (801541c <defaultStatusADCsAndGPIOs+0xa04>)
 80153b8:	881b      	ldrh	r3, [r3, #0]
 80153ba:	3b02      	subs	r3, #2
 80153bc:	b29a      	uxth	r2, r3
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	3301      	adds	r3, #1
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	2002      	movs	r0, #2
 80153c8:	f7eb ffc6 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 80153cc:	23e6      	movs	r3, #230	; 0xe6
 80153ce:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	b29b      	uxth	r3, r3
 80153d4:	3b03      	subs	r3, #3
 80153d6:	b298      	uxth	r0, r3
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	b299      	uxth	r1, r3
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	3303      	adds	r3, #3
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	4b0e      	ldr	r3, [pc, #56]	; (8015420 <defaultStatusADCsAndGPIOs+0xa08>)
 80153e6:	881b      	ldrh	r3, [r3, #0]
 80153e8:	3b02      	subs	r3, #2
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	f7eb ffb4 	bl	8001358 <LCD_FillRect>
}
 80153f0:	bf00      	nop
 80153f2:	3718      	adds	r7, #24
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	0801c0c0 	.word	0x0801c0c0
 80153fc:	0801b0c0 	.word	0x0801b0c0
 8015400:	200001e8 	.word	0x200001e8
 8015404:	20028df0 	.word	0x20028df0
 8015408:	0801b0c8 	.word	0x0801b0c8
 801540c:	200001f4 	.word	0x200001f4
 8015410:	2003119c 	.word	0x2003119c
 8015414:	447a0000 	.word	0x447a0000
 8015418:	0801b0d0 	.word	0x0801b0d0
 801541c:	20028b62 	.word	0x20028b62
 8015420:	20028b64 	.word	0x20028b64

08015424 <defaultStatusFaults>:

void defaultStatusFaults(){
 8015424:	b580      	push	{r7, lr}
 8015426:	b086      	sub	sp, #24
 8015428:	af00      	add	r7, sp, #0
	int i=10;
 801542a:	230a      	movs	r3, #10
 801542c:	617b      	str	r3, [r7, #20]
	int j=95;
 801542e:	235f      	movs	r3, #95	; 0x5f
 8015430:	613b      	str	r3, [r7, #16]
	int daughterCardAlignment=240;
 8015432:	23f0      	movs	r3, #240	; 0xf0
 8015434:	60fb      	str	r3, [r7, #12]
	int faultVerticalSpacing = 15;
 8015436:	230f      	movs	r3, #15
 8015438:	60bb      	str	r3, [r7, #8]
	int faultHorizontalSpacing=10;
 801543a:	230a      	movs	r3, #10
 801543c:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT1_LBL, fnt7x10);
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	b298      	uxth	r0, r3
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	b299      	uxth	r1, r3
 8015446:	4b91      	ldr	r3, [pc, #580]	; (801568c <defaultStatusFaults+0x268>)
 8015448:	4a91      	ldr	r2, [pc, #580]	; (8015690 <defaultStatusFaults+0x26c>)
 801544a:	f7ec fad3 	bl	80019f4 <LCD_PutStr>
 801544e:	4603      	mov	r3, r0
 8015450:	461a      	mov	r2, r3
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	4413      	add	r3, r2
 8015456:	617b      	str	r3, [r7, #20]
	if(errorLED.zionFault){
 8015458:	4b8e      	ldr	r3, [pc, #568]	; (8015694 <defaultStatusFaults+0x270>)
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d008      	beq.n	8015472 <defaultStatusFaults+0x4e>
		LCD_PutStr(i, j, DEFAULT_FAULT1_TRIGGER_MSG, fnt7x10);
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	b298      	uxth	r0, r3
 8015464:	693b      	ldr	r3, [r7, #16]
 8015466:	b299      	uxth	r1, r3
 8015468:	4b88      	ldr	r3, [pc, #544]	; (801568c <defaultStatusFaults+0x268>)
 801546a:	4a8b      	ldr	r2, [pc, #556]	; (8015698 <defaultStatusFaults+0x274>)
 801546c:	f7ec fac2 	bl	80019f4 <LCD_PutStr>
 8015470:	e007      	b.n	8015482 <defaultStatusFaults+0x5e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	b298      	uxth	r0, r3
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	b299      	uxth	r1, r3
 801547a:	4b84      	ldr	r3, [pc, #528]	; (801568c <defaultStatusFaults+0x268>)
 801547c:	4a87      	ldr	r2, [pc, #540]	; (801569c <defaultStatusFaults+0x278>)
 801547e:	f7ec fab9 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	b298      	uxth	r0, r3
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	b299      	uxth	r1, r3
 801548e:	4b7f      	ldr	r3, [pc, #508]	; (801568c <defaultStatusFaults+0x268>)
 8015490:	4a83      	ldr	r2, [pc, #524]	; (80156a0 <defaultStatusFaults+0x27c>)
 8015492:	f7ec faaf 	bl	80019f4 <LCD_PutStr>
 8015496:	4603      	mov	r3, r0
 8015498:	461a      	mov	r2, r3
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	4413      	add	r3, r2
 801549e:	617b      	str	r3, [r7, #20]
	if(ZION.SOC_EEPROM_Detected){
 80154a0:	4b80      	ldr	r3, [pc, #512]	; (80156a4 <defaultStatusFaults+0x280>)
 80154a2:	689b      	ldr	r3, [r3, #8]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d008      	beq.n	80154ba <defaultStatusFaults+0x96>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	b298      	uxth	r0, r3
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	b299      	uxth	r1, r3
 80154b0:	4b76      	ldr	r3, [pc, #472]	; (801568c <defaultStatusFaults+0x268>)
 80154b2:	4a7d      	ldr	r2, [pc, #500]	; (80156a8 <defaultStatusFaults+0x284>)
 80154b4:	f7ec fa9e 	bl	80019f4 <LCD_PutStr>
 80154b8:	e007      	b.n	80154ca <defaultStatusFaults+0xa6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	b298      	uxth	r0, r3
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	b299      	uxth	r1, r3
 80154c2:	4b72      	ldr	r3, [pc, #456]	; (801568c <defaultStatusFaults+0x268>)
 80154c4:	4a79      	ldr	r2, [pc, #484]	; (80156ac <defaultStatusFaults+0x288>)
 80154c6:	f7ec fa95 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80154ce:	693a      	ldr	r2, [r7, #16]
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	4413      	add	r3, r2
 80154d4:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT2_LBL, fnt7x10);
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	b298      	uxth	r0, r3
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	b299      	uxth	r1, r3
 80154de:	4b6b      	ldr	r3, [pc, #428]	; (801568c <defaultStatusFaults+0x268>)
 80154e0:	4a73      	ldr	r2, [pc, #460]	; (80156b0 <defaultStatusFaults+0x28c>)
 80154e2:	f7ec fa87 	bl	80019f4 <LCD_PutStr>
 80154e6:	4603      	mov	r3, r0
 80154e8:	461a      	mov	r2, r3
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	4413      	add	r3, r2
 80154ee:	617b      	str	r3, [r7, #20]
	if(errorLED.vsysPMIFault){
 80154f0:	4b68      	ldr	r3, [pc, #416]	; (8015694 <defaultStatusFaults+0x270>)
 80154f2:	785b      	ldrb	r3, [r3, #1]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d008      	beq.n	801550a <defaultStatusFaults+0xe6>
		LCD_PutStr(i, j, DEFAULT_FAULT2_TRIGGER_MSG, fnt7x10);
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	b298      	uxth	r0, r3
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	b299      	uxth	r1, r3
 8015500:	4b62      	ldr	r3, [pc, #392]	; (801568c <defaultStatusFaults+0x268>)
 8015502:	4a6c      	ldr	r2, [pc, #432]	; (80156b4 <defaultStatusFaults+0x290>)
 8015504:	f7ec fa76 	bl	80019f4 <LCD_PutStr>
 8015508:	e007      	b.n	801551a <defaultStatusFaults+0xf6>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	b298      	uxth	r0, r3
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	b299      	uxth	r1, r3
 8015512:	4b5e      	ldr	r3, [pc, #376]	; (801568c <defaultStatusFaults+0x268>)
 8015514:	4a61      	ldr	r2, [pc, #388]	; (801569c <defaultStatusFaults+0x278>)
 8015516:	f7ec fa6d 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	b298      	uxth	r0, r3
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	b299      	uxth	r1, r3
 8015526:	4b59      	ldr	r3, [pc, #356]	; (801568c <defaultStatusFaults+0x268>)
 8015528:	4a63      	ldr	r2, [pc, #396]	; (80156b8 <defaultStatusFaults+0x294>)
 801552a:	f7ec fa63 	bl	80019f4 <LCD_PutStr>
 801552e:	4603      	mov	r3, r0
 8015530:	461a      	mov	r2, r3
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	4413      	add	r3, r2
 8015536:	617b      	str	r3, [r7, #20]
	if(ZION.ASIC_EEPROM_Detected){
 8015538:	4b5a      	ldr	r3, [pc, #360]	; (80156a4 <defaultStatusFaults+0x280>)
 801553a:	68db      	ldr	r3, [r3, #12]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d008      	beq.n	8015552 <defaultStatusFaults+0x12e>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	b298      	uxth	r0, r3
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	b299      	uxth	r1, r3
 8015548:	4b50      	ldr	r3, [pc, #320]	; (801568c <defaultStatusFaults+0x268>)
 801554a:	4a57      	ldr	r2, [pc, #348]	; (80156a8 <defaultStatusFaults+0x284>)
 801554c:	f7ec fa52 	bl	80019f4 <LCD_PutStr>
 8015550:	e007      	b.n	8015562 <defaultStatusFaults+0x13e>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	b298      	uxth	r0, r3
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	b299      	uxth	r1, r3
 801555a:	4b4c      	ldr	r3, [pc, #304]	; (801568c <defaultStatusFaults+0x268>)
 801555c:	4a53      	ldr	r2, [pc, #332]	; (80156ac <defaultStatusFaults+0x288>)
 801555e:	f7ec fa49 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8015566:	693a      	ldr	r2, [r7, #16]
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	4413      	add	r3, r2
 801556c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT3_LBL, fnt7x10);
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	b298      	uxth	r0, r3
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	b299      	uxth	r1, r3
 8015576:	4b45      	ldr	r3, [pc, #276]	; (801568c <defaultStatusFaults+0x268>)
 8015578:	4a50      	ldr	r2, [pc, #320]	; (80156bc <defaultStatusFaults+0x298>)
 801557a:	f7ec fa3b 	bl	80019f4 <LCD_PutStr>
 801557e:	4603      	mov	r3, r0
 8015580:	461a      	mov	r2, r3
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	4413      	add	r3, r2
 8015586:	617b      	str	r3, [r7, #20]
	if(errorLED.fault3){
 8015588:	4b42      	ldr	r3, [pc, #264]	; (8015694 <defaultStatusFaults+0x270>)
 801558a:	789b      	ldrb	r3, [r3, #2]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d008      	beq.n	80155a2 <defaultStatusFaults+0x17e>
		LCD_PutStr(i, j, DEFAULT_FAULT3_TRIGGER_MSG, fnt7x10);
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	b298      	uxth	r0, r3
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	b299      	uxth	r1, r3
 8015598:	4b3c      	ldr	r3, [pc, #240]	; (801568c <defaultStatusFaults+0x268>)
 801559a:	4a49      	ldr	r2, [pc, #292]	; (80156c0 <defaultStatusFaults+0x29c>)
 801559c:	f7ec fa2a 	bl	80019f4 <LCD_PutStr>
 80155a0:	e007      	b.n	80155b2 <defaultStatusFaults+0x18e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	b298      	uxth	r0, r3
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	b299      	uxth	r1, r3
 80155aa:	4b38      	ldr	r3, [pc, #224]	; (801568c <defaultStatusFaults+0x268>)
 80155ac:	4a3b      	ldr	r2, [pc, #236]	; (801569c <defaultStatusFaults+0x278>)
 80155ae:	f7ec fa21 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	b298      	uxth	r0, r3
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	b299      	uxth	r1, r3
 80155be:	4b33      	ldr	r3, [pc, #204]	; (801568c <defaultStatusFaults+0x268>)
 80155c0:	4a40      	ldr	r2, [pc, #256]	; (80156c4 <defaultStatusFaults+0x2a0>)
 80155c2:	f7ec fa17 	bl	80019f4 <LCD_PutStr>
 80155c6:	4603      	mov	r3, r0
 80155c8:	461a      	mov	r2, r3
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	4413      	add	r3, r2
 80155ce:	617b      	str	r3, [r7, #20]
	if(ZION.DISPLAY_EEPROM_Detected){
 80155d0:	4b34      	ldr	r3, [pc, #208]	; (80156a4 <defaultStatusFaults+0x280>)
 80155d2:	691b      	ldr	r3, [r3, #16]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d008      	beq.n	80155ea <defaultStatusFaults+0x1c6>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	b298      	uxth	r0, r3
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	b299      	uxth	r1, r3
 80155e0:	4b2a      	ldr	r3, [pc, #168]	; (801568c <defaultStatusFaults+0x268>)
 80155e2:	4a31      	ldr	r2, [pc, #196]	; (80156a8 <defaultStatusFaults+0x284>)
 80155e4:	f7ec fa06 	bl	80019f4 <LCD_PutStr>
 80155e8:	e007      	b.n	80155fa <defaultStatusFaults+0x1d6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	b298      	uxth	r0, r3
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	b299      	uxth	r1, r3
 80155f2:	4b26      	ldr	r3, [pc, #152]	; (801568c <defaultStatusFaults+0x268>)
 80155f4:	4a2d      	ldr	r2, [pc, #180]	; (80156ac <defaultStatusFaults+0x288>)
 80155f6:	f7ec f9fd 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80155fe:	693a      	ldr	r2, [r7, #16]
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	4413      	add	r3, r2
 8015604:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT4_LBL, fnt7x10);
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	b298      	uxth	r0, r3
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	b299      	uxth	r1, r3
 801560e:	4b1f      	ldr	r3, [pc, #124]	; (801568c <defaultStatusFaults+0x268>)
 8015610:	4a2d      	ldr	r2, [pc, #180]	; (80156c8 <defaultStatusFaults+0x2a4>)
 8015612:	f7ec f9ef 	bl	80019f4 <LCD_PutStr>
 8015616:	4603      	mov	r3, r0
 8015618:	461a      	mov	r2, r3
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	4413      	add	r3, r2
 801561e:	617b      	str	r3, [r7, #20]
	if(errorLED.fault4){
 8015620:	4b1c      	ldr	r3, [pc, #112]	; (8015694 <defaultStatusFaults+0x270>)
 8015622:	78db      	ldrb	r3, [r3, #3]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d008      	beq.n	801563a <defaultStatusFaults+0x216>
		LCD_PutStr(i, j, DEFAULT_FAULT4_TRIGGER_MSG, fnt7x10);
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	b298      	uxth	r0, r3
 801562c:	693b      	ldr	r3, [r7, #16]
 801562e:	b299      	uxth	r1, r3
 8015630:	4b16      	ldr	r3, [pc, #88]	; (801568c <defaultStatusFaults+0x268>)
 8015632:	4a26      	ldr	r2, [pc, #152]	; (80156cc <defaultStatusFaults+0x2a8>)
 8015634:	f7ec f9de 	bl	80019f4 <LCD_PutStr>
 8015638:	e007      	b.n	801564a <defaultStatusFaults+0x226>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	b298      	uxth	r0, r3
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	b299      	uxth	r1, r3
 8015642:	4b12      	ldr	r3, [pc, #72]	; (801568c <defaultStatusFaults+0x268>)
 8015644:	4a15      	ldr	r2, [pc, #84]	; (801569c <defaultStatusFaults+0x278>)
 8015646:	f7ec f9d5 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801564e:	693a      	ldr	r2, [r7, #16]
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	4413      	add	r3, r2
 8015654:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT5_LBL, fnt7x10);
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	b298      	uxth	r0, r3
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	b299      	uxth	r1, r3
 801565e:	4b0b      	ldr	r3, [pc, #44]	; (801568c <defaultStatusFaults+0x268>)
 8015660:	4a1b      	ldr	r2, [pc, #108]	; (80156d0 <defaultStatusFaults+0x2ac>)
 8015662:	f7ec f9c7 	bl	80019f4 <LCD_PutStr>
 8015666:	4603      	mov	r3, r0
 8015668:	461a      	mov	r2, r3
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	4413      	add	r3, r2
 801566e:	617b      	str	r3, [r7, #20]
	if(errorLED.fault5){
 8015670:	4b08      	ldr	r3, [pc, #32]	; (8015694 <defaultStatusFaults+0x270>)
 8015672:	791b      	ldrb	r3, [r3, #4]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d02f      	beq.n	80156d8 <defaultStatusFaults+0x2b4>
		LCD_PutStr(i, j, DEFAULT_FAULT5_TRIGGER_MSG, fnt7x10);
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	b298      	uxth	r0, r3
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	b299      	uxth	r1, r3
 8015680:	4b02      	ldr	r3, [pc, #8]	; (801568c <defaultStatusFaults+0x268>)
 8015682:	4a14      	ldr	r2, [pc, #80]	; (80156d4 <defaultStatusFaults+0x2b0>)
 8015684:	f7ec f9b6 	bl	80019f4 <LCD_PutStr>
 8015688:	e02e      	b.n	80156e8 <defaultStatusFaults+0x2c4>
 801568a:	bf00      	nop
 801568c:	0801c0c0 	.word	0x0801c0c0
 8015690:	0801b0d8 	.word	0x0801b0d8
 8015694:	2000338c 	.word	0x2000338c
 8015698:	0801b0e4 	.word	0x0801b0e4
 801569c:	0801b0f4 	.word	0x0801b0f4
 80156a0:	0801b0fc 	.word	0x0801b0fc
 80156a4:	20003328 	.word	0x20003328
 80156a8:	0801b104 	.word	0x0801b104
 80156ac:	0801b110 	.word	0x0801b110
 80156b0:	0801b11c 	.word	0x0801b11c
 80156b4:	0801b128 	.word	0x0801b128
 80156b8:	0801b138 	.word	0x0801b138
 80156bc:	0801b140 	.word	0x0801b140
 80156c0:	0801b148 	.word	0x0801b148
 80156c4:	0801b15c 	.word	0x0801b15c
 80156c8:	0801b168 	.word	0x0801b168
 80156cc:	0801b170 	.word	0x0801b170
 80156d0:	0801b184 	.word	0x0801b184
 80156d4:	0801b18c 	.word	0x0801b18c
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	b298      	uxth	r0, r3
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	b299      	uxth	r1, r3
 80156e0:	4b65      	ldr	r3, [pc, #404]	; (8015878 <defaultStatusFaults+0x454>)
 80156e2:	4a66      	ldr	r2, [pc, #408]	; (801587c <defaultStatusFaults+0x458>)
 80156e4:	f7ec f986 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80156ec:	693a      	ldr	r2, [r7, #16]
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	4413      	add	r3, r2
 80156f2:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT6_LBL, fnt7x10);
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	b298      	uxth	r0, r3
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	b299      	uxth	r1, r3
 80156fc:	4b5e      	ldr	r3, [pc, #376]	; (8015878 <defaultStatusFaults+0x454>)
 80156fe:	4a60      	ldr	r2, [pc, #384]	; (8015880 <defaultStatusFaults+0x45c>)
 8015700:	f7ec f978 	bl	80019f4 <LCD_PutStr>
 8015704:	4603      	mov	r3, r0
 8015706:	461a      	mov	r2, r3
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	4413      	add	r3, r2
 801570c:	617b      	str	r3, [r7, #20]
	if(errorLED.fault6){
 801570e:	4b5d      	ldr	r3, [pc, #372]	; (8015884 <defaultStatusFaults+0x460>)
 8015710:	795b      	ldrb	r3, [r3, #5]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d008      	beq.n	8015728 <defaultStatusFaults+0x304>
		LCD_PutStr(i, j, DEFAULT_FAULT6_TRIGGER_MSG, fnt7x10);
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	b298      	uxth	r0, r3
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	b299      	uxth	r1, r3
 801571e:	4b56      	ldr	r3, [pc, #344]	; (8015878 <defaultStatusFaults+0x454>)
 8015720:	4a59      	ldr	r2, [pc, #356]	; (8015888 <defaultStatusFaults+0x464>)
 8015722:	f7ec f967 	bl	80019f4 <LCD_PutStr>
 8015726:	e007      	b.n	8015738 <defaultStatusFaults+0x314>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	b298      	uxth	r0, r3
 801572c:	693b      	ldr	r3, [r7, #16]
 801572e:	b299      	uxth	r1, r3
 8015730:	4b51      	ldr	r3, [pc, #324]	; (8015878 <defaultStatusFaults+0x454>)
 8015732:	4a52      	ldr	r2, [pc, #328]	; (801587c <defaultStatusFaults+0x458>)
 8015734:	f7ec f95e 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801573c:	693a      	ldr	r2, [r7, #16]
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	4413      	add	r3, r2
 8015742:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT7_LBL, fnt7x10);
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	b298      	uxth	r0, r3
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	b299      	uxth	r1, r3
 801574c:	4b4a      	ldr	r3, [pc, #296]	; (8015878 <defaultStatusFaults+0x454>)
 801574e:	4a4f      	ldr	r2, [pc, #316]	; (801588c <defaultStatusFaults+0x468>)
 8015750:	f7ec f950 	bl	80019f4 <LCD_PutStr>
 8015754:	4603      	mov	r3, r0
 8015756:	461a      	mov	r2, r3
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	4413      	add	r3, r2
 801575c:	617b      	str	r3, [r7, #20]
	if(errorLED.fault7){
 801575e:	4b49      	ldr	r3, [pc, #292]	; (8015884 <defaultStatusFaults+0x460>)
 8015760:	799b      	ldrb	r3, [r3, #6]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d008      	beq.n	8015778 <defaultStatusFaults+0x354>
		LCD_PutStr(i, j, DEFAULT_FAULT7_TRIGGER_MSG, fnt7x10);
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	b298      	uxth	r0, r3
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	b299      	uxth	r1, r3
 801576e:	4b42      	ldr	r3, [pc, #264]	; (8015878 <defaultStatusFaults+0x454>)
 8015770:	4a47      	ldr	r2, [pc, #284]	; (8015890 <defaultStatusFaults+0x46c>)
 8015772:	f7ec f93f 	bl	80019f4 <LCD_PutStr>
 8015776:	e007      	b.n	8015788 <defaultStatusFaults+0x364>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	b298      	uxth	r0, r3
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	b299      	uxth	r1, r3
 8015780:	4b3d      	ldr	r3, [pc, #244]	; (8015878 <defaultStatusFaults+0x454>)
 8015782:	4a3e      	ldr	r2, [pc, #248]	; (801587c <defaultStatusFaults+0x458>)
 8015784:	f7ec f936 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801578c:	693a      	ldr	r2, [r7, #16]
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	4413      	add	r3, r2
 8015792:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT8_LBL, fnt7x10);
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	b298      	uxth	r0, r3
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	b299      	uxth	r1, r3
 801579c:	4b36      	ldr	r3, [pc, #216]	; (8015878 <defaultStatusFaults+0x454>)
 801579e:	4a3d      	ldr	r2, [pc, #244]	; (8015894 <defaultStatusFaults+0x470>)
 80157a0:	f7ec f928 	bl	80019f4 <LCD_PutStr>
 80157a4:	4603      	mov	r3, r0
 80157a6:	461a      	mov	r2, r3
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	4413      	add	r3, r2
 80157ac:	617b      	str	r3, [r7, #20]
	if(errorLED.fault8){
 80157ae:	4b35      	ldr	r3, [pc, #212]	; (8015884 <defaultStatusFaults+0x460>)
 80157b0:	7adb      	ldrb	r3, [r3, #11]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d008      	beq.n	80157c8 <defaultStatusFaults+0x3a4>
		LCD_PutStr(i, j, DEFAULT_FAULT8_TRIGGER_MSG, fnt7x10);
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	b298      	uxth	r0, r3
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	b299      	uxth	r1, r3
 80157be:	4b2e      	ldr	r3, [pc, #184]	; (8015878 <defaultStatusFaults+0x454>)
 80157c0:	4a35      	ldr	r2, [pc, #212]	; (8015898 <defaultStatusFaults+0x474>)
 80157c2:	f7ec f917 	bl	80019f4 <LCD_PutStr>
 80157c6:	e007      	b.n	80157d8 <defaultStatusFaults+0x3b4>
	}
	else{
		LCD_PutStr(i, j, "Clear", fnt7x10);
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	b298      	uxth	r0, r3
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	b299      	uxth	r1, r3
 80157d0:	4b29      	ldr	r3, [pc, #164]	; (8015878 <defaultStatusFaults+0x454>)
 80157d2:	4a32      	ldr	r2, [pc, #200]	; (801589c <defaultStatusFaults+0x478>)
 80157d4:	f7ec f90e 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80157dc:	693a      	ldr	r2, [r7, #16]
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	4413      	add	r3, r2
 80157e2:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT9_LBL, fnt7x10);
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	b298      	uxth	r0, r3
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	b299      	uxth	r1, r3
 80157ec:	4b22      	ldr	r3, [pc, #136]	; (8015878 <defaultStatusFaults+0x454>)
 80157ee:	4a2c      	ldr	r2, [pc, #176]	; (80158a0 <defaultStatusFaults+0x47c>)
 80157f0:	f7ec f900 	bl	80019f4 <LCD_PutStr>
 80157f4:	4603      	mov	r3, r0
 80157f6:	461a      	mov	r2, r3
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	4413      	add	r3, r2
 80157fc:	617b      	str	r3, [r7, #20]
	if(errorLED.fault9){
 80157fe:	4b21      	ldr	r3, [pc, #132]	; (8015884 <defaultStatusFaults+0x460>)
 8015800:	7b1b      	ldrb	r3, [r3, #12]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d008      	beq.n	8015818 <defaultStatusFaults+0x3f4>
		LCD_PutStr(i, j, DEFAULT_FAULT9_TRIGGER_MSG, fnt7x10);
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	b298      	uxth	r0, r3
 801580a:	693b      	ldr	r3, [r7, #16]
 801580c:	b299      	uxth	r1, r3
 801580e:	4b1a      	ldr	r3, [pc, #104]	; (8015878 <defaultStatusFaults+0x454>)
 8015810:	4a24      	ldr	r2, [pc, #144]	; (80158a4 <defaultStatusFaults+0x480>)
 8015812:	f7ec f8ef 	bl	80019f4 <LCD_PutStr>
 8015816:	e007      	b.n	8015828 <defaultStatusFaults+0x404>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	b298      	uxth	r0, r3
 801581c:	693b      	ldr	r3, [r7, #16]
 801581e:	b299      	uxth	r1, r3
 8015820:	4b15      	ldr	r3, [pc, #84]	; (8015878 <defaultStatusFaults+0x454>)
 8015822:	4a16      	ldr	r2, [pc, #88]	; (801587c <defaultStatusFaults+0x458>)
 8015824:	f7ec f8e6 	bl	80019f4 <LCD_PutStr>
	}


	//horizontal divider
	j=65;
 8015828:	2341      	movs	r3, #65	; 0x41
 801582a:	613b      	str	r3, [r7, #16]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	b29b      	uxth	r3, r3
 8015830:	3b01      	subs	r3, #1
 8015832:	b299      	uxth	r1, r3
 8015834:	4b1c      	ldr	r3, [pc, #112]	; (80158a8 <defaultStatusFaults+0x484>)
 8015836:	881b      	ldrh	r3, [r3, #0]
 8015838:	3b02      	subs	r3, #2
 801583a:	b29a      	uxth	r2, r3
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	b29b      	uxth	r3, r3
 8015840:	3301      	adds	r3, #1
 8015842:	b29b      	uxth	r3, r3
 8015844:	2002      	movs	r0, #2
 8015846:	f7eb fd87 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 801584a:	23e6      	movs	r3, #230	; 0xe6
 801584c:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	b29b      	uxth	r3, r3
 8015852:	3b03      	subs	r3, #3
 8015854:	b298      	uxth	r0, r3
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	b299      	uxth	r1, r3
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	b29b      	uxth	r3, r3
 801585e:	3303      	adds	r3, #3
 8015860:	b29a      	uxth	r2, r3
 8015862:	4b12      	ldr	r3, [pc, #72]	; (80158ac <defaultStatusFaults+0x488>)
 8015864:	881b      	ldrh	r3, [r3, #0]
 8015866:	3b02      	subs	r3, #2
 8015868:	b29b      	uxth	r3, r3
 801586a:	f7eb fd75 	bl	8001358 <LCD_FillRect>

}
 801586e:	bf00      	nop
 8015870:	3718      	adds	r7, #24
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
 8015876:	bf00      	nop
 8015878:	0801c0c0 	.word	0x0801c0c0
 801587c:	0801b0f4 	.word	0x0801b0f4
 8015880:	0801b1a0 	.word	0x0801b1a0
 8015884:	2000338c 	.word	0x2000338c
 8015888:	0801b1a8 	.word	0x0801b1a8
 801588c:	0801b1bc 	.word	0x0801b1bc
 8015890:	0801b1c4 	.word	0x0801b1c4
 8015894:	0801b1d8 	.word	0x0801b1d8
 8015898:	0801b1e0 	.word	0x0801b1e0
 801589c:	0801b1f4 	.word	0x0801b1f4
 80158a0:	0801b1fc 	.word	0x0801b1fc
 80158a4:	0801b204 	.word	0x0801b204
 80158a8:	20028b62 	.word	0x20028b62
 80158ac:	20028b64 	.word	0x20028b64

080158b0 <defaultBootButtons>:

int defaultBootButtons(int pwrBtnReady){
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
	while((DEFAULT_VSYS > VSYS_FLT)){
 80158b8:	bf00      	nop
 80158ba:	4b84      	ldr	r3, [pc, #528]	; (8015acc <defaultBootButtons+0x21c>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4a84      	ldr	r2, [pc, #528]	; (8015ad0 <defaultBootButtons+0x220>)
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	4413      	add	r3, r2
 80158c4:	edd3 7a00 	vldr	s15, [r3]
 80158c8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80158cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80158d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d4:	f340 80f5 	ble.w	8015ac2 <defaultBootButtons+0x212>
	  if(bootButtons.bootMode !=0){
 80158d8:	4b7e      	ldr	r3, [pc, #504]	; (8015ad4 <defaultBootButtons+0x224>)
 80158da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d073      	beq.n	80159c8 <defaultBootButtons+0x118>
		  bootButtons.modeClear=0;
 80158e0:	4b7c      	ldr	r3, [pc, #496]	; (8015ad4 <defaultBootButtons+0x224>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	625a      	str	r2, [r3, #36]	; 0x24
		  DEFAULT_PWR_ON;
 80158e6:	2201      	movs	r2, #1
 80158e8:	2104      	movs	r1, #4
 80158ea:	487b      	ldr	r0, [pc, #492]	; (8015ad8 <defaultBootButtons+0x228>)
 80158ec:	f7f3 fee6 	bl	80096bc <HAL_GPIO_WritePin>
		  //using OS delay in a method leads to getting lost in the ether. Swapping to hal_delay but also breaking down the delays
		  //so that the while loop can end somewhat succiently
		  for(int x = 0; x<130;x++){
 80158f0:	2300      	movs	r3, #0
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	e005      	b.n	8015902 <defaultBootButtons+0x52>
			  HAL_Delay(100);
 80158f6:	2064      	movs	r0, #100	; 0x64
 80158f8:	f7f2 fa60 	bl	8007dbc <HAL_Delay>
		  for(int x = 0; x<130;x++){
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	3301      	adds	r3, #1
 8015900:	60fb      	str	r3, [r7, #12]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2b81      	cmp	r3, #129	; 0x81
 8015906:	ddf6      	ble.n	80158f6 <defaultBootButtons+0x46>
		  }
		  DEFAULT_PWR_OFF;
 8015908:	2200      	movs	r2, #0
 801590a:	2104      	movs	r1, #4
 801590c:	4872      	ldr	r0, [pc, #456]	; (8015ad8 <defaultBootButtons+0x228>)
 801590e:	f7f3 fed5 	bl	80096bc <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8015912:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015916:	f7f2 fa51 	bl	8007dbc <HAL_Delay>
		  DEFAULT_PWR_ON;
 801591a:	2201      	movs	r2, #1
 801591c:	2104      	movs	r1, #4
 801591e:	486e      	ldr	r0, [pc, #440]	; (8015ad8 <defaultBootButtons+0x228>)
 8015920:	f7f3 fecc 	bl	80096bc <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8015924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015928:	f7f2 fa48 	bl	8007dbc <HAL_Delay>
		  DEFAULT_PWR_OFF;
 801592c:	2200      	movs	r2, #0
 801592e:	2104      	movs	r1, #4
 8015930:	4869      	ldr	r0, [pc, #420]	; (8015ad8 <defaultBootButtons+0x228>)
 8015932:	f7f3 fec3 	bl	80096bc <HAL_GPIO_WritePin>

		  BTN1_OFF;
 8015936:	2200      	movs	r2, #0
 8015938:	2108      	movs	r1, #8
 801593a:	4867      	ldr	r0, [pc, #412]	; (8015ad8 <defaultBootButtons+0x228>)
 801593c:	f7f3 febe 	bl	80096bc <HAL_GPIO_WritePin>
		  BTN2_OFF;
 8015940:	2200      	movs	r2, #0
 8015942:	2110      	movs	r1, #16
 8015944:	4864      	ldr	r0, [pc, #400]	; (8015ad8 <defaultBootButtons+0x228>)
 8015946:	f7f3 feb9 	bl	80096bc <HAL_GPIO_WritePin>
		  BTN3_OFF;
 801594a:	2200      	movs	r2, #0
 801594c:	2120      	movs	r1, #32
 801594e:	4862      	ldr	r0, [pc, #392]	; (8015ad8 <defaultBootButtons+0x228>)
 8015950:	f7f3 feb4 	bl	80096bc <HAL_GPIO_WritePin>
		  BTN4_OFF;
 8015954:	2200      	movs	r2, #0
 8015956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801595a:	485f      	ldr	r0, [pc, #380]	; (8015ad8 <defaultBootButtons+0x228>)
 801595c:	f7f3 feae 	bl	80096bc <HAL_GPIO_WritePin>
		  BTN5_OFF;
 8015960:	2200      	movs	r2, #0
 8015962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015966:	485c      	ldr	r0, [pc, #368]	; (8015ad8 <defaultBootButtons+0x228>)
 8015968:	f7f3 fea8 	bl	80096bc <HAL_GPIO_WritePin>
		  EDL_SW_OFF;
 801596c:	2200      	movs	r2, #0
 801596e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015972:	485a      	ldr	r0, [pc, #360]	; (8015adc <defaultBootButtons+0x22c>)
 8015974:	f7f3 fea2 	bl	80096bc <HAL_GPIO_WritePin>
		  EX_SW_OFF;
 8015978:	2200      	movs	r2, #0
 801597a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801597e:	4857      	ldr	r0, [pc, #348]	; (8015adc <defaultBootButtons+0x22c>)
 8015980:	f7f3 fe9c 	bl	80096bc <HAL_GPIO_WritePin>

		  bootButtons.bootMode=STANDARD;
 8015984:	4b53      	ldr	r3, [pc, #332]	; (8015ad4 <defaultBootButtons+0x224>)
 8015986:	2201      	movs	r2, #1
 8015988:	629a      	str	r2, [r3, #40]	; 0x28
		  bootButtons.btn0=0;
 801598a:	4b52      	ldr	r3, [pc, #328]	; (8015ad4 <defaultBootButtons+0x224>)
 801598c:	2200      	movs	r2, #0
 801598e:	605a      	str	r2, [r3, #4]
		  bootButtons.btn1=0;
 8015990:	4b50      	ldr	r3, [pc, #320]	; (8015ad4 <defaultBootButtons+0x224>)
 8015992:	2200      	movs	r2, #0
 8015994:	609a      	str	r2, [r3, #8]
		  bootButtons.btn2=0;
 8015996:	4b4f      	ldr	r3, [pc, #316]	; (8015ad4 <defaultBootButtons+0x224>)
 8015998:	2200      	movs	r2, #0
 801599a:	60da      	str	r2, [r3, #12]
		  bootButtons.btn3=0;
 801599c:	4b4d      	ldr	r3, [pc, #308]	; (8015ad4 <defaultBootButtons+0x224>)
 801599e:	2200      	movs	r2, #0
 80159a0:	611a      	str	r2, [r3, #16]
		  bootButtons.btn4=0;
 80159a2:	4b4c      	ldr	r3, [pc, #304]	; (8015ad4 <defaultBootButtons+0x224>)
 80159a4:	2200      	movs	r2, #0
 80159a6:	615a      	str	r2, [r3, #20]
		  bootButtons.btn5=0;
 80159a8:	4b4a      	ldr	r3, [pc, #296]	; (8015ad4 <defaultBootButtons+0x224>)
 80159aa:	2200      	movs	r2, #0
 80159ac:	619a      	str	r2, [r3, #24]
		  bootButtons.edl_sw=0;
 80159ae:	4b49      	ldr	r3, [pc, #292]	; (8015ad4 <defaultBootButtons+0x224>)
 80159b0:	2200      	movs	r2, #0
 80159b2:	61da      	str	r2, [r3, #28]
		  bootButtons.ex_sw=0;
 80159b4:	4b47      	ldr	r3, [pc, #284]	; (8015ad4 <defaultBootButtons+0x224>)
 80159b6:	2200      	movs	r2, #0
 80159b8:	621a      	str	r2, [r3, #32]
		  bootButtons.modeClear=1;
 80159ba:	4b46      	ldr	r3, [pc, #280]	; (8015ad4 <defaultBootButtons+0x224>)
 80159bc:	2201      	movs	r2, #1
 80159be:	625a      	str	r2, [r3, #36]	; 0x24
		  bootButtons.bootModeSet=0;
 80159c0:	4b44      	ldr	r3, [pc, #272]	; (8015ad4 <defaultBootButtons+0x224>)
 80159c2:	2200      	movs	r2, #0
 80159c4:	601a      	str	r2, [r3, #0]
		  if(!(bootButtons.ex_sw)){
			  EX_SW_OFF;
			  //osDelay(300);
		  }
	  }
	  break;
 80159c6:	e07b      	b.n	8015ac0 <defaultBootButtons+0x210>
		  bootButtons.modeClear=0;
 80159c8:	4b42      	ldr	r3, [pc, #264]	; (8015ad4 <defaultBootButtons+0x224>)
 80159ca:	2200      	movs	r2, #0
 80159cc:	625a      	str	r2, [r3, #36]	; 0x24
		  if((bootButtons.btn0) || pwrBtnReady){ //power button
 80159ce:	4b41      	ldr	r3, [pc, #260]	; (8015ad4 <defaultBootButtons+0x224>)
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d102      	bne.n	80159dc <defaultBootButtons+0x12c>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d02e      	beq.n	8015a3a <defaultBootButtons+0x18a>
			  DEFAULT_PWR_ON;
 80159dc:	2201      	movs	r2, #1
 80159de:	2104      	movs	r1, #4
 80159e0:	483d      	ldr	r0, [pc, #244]	; (8015ad8 <defaultBootButtons+0x228>)
 80159e2:	f7f3 fe6b 	bl	80096bc <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80159e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80159ea:	f7f2 f9e7 	bl	8007dbc <HAL_Delay>
			  DEFAULT_PWR_OFF;
 80159ee:	2200      	movs	r2, #0
 80159f0:	2104      	movs	r1, #4
 80159f2:	4839      	ldr	r0, [pc, #228]	; (8015ad8 <defaultBootButtons+0x228>)
 80159f4:	f7f3 fe62 	bl	80096bc <HAL_GPIO_WritePin>
			  bootButtons.bootMode= STANDARD;
 80159f8:	4b36      	ldr	r3, [pc, #216]	; (8015ad4 <defaultBootButtons+0x224>)
 80159fa:	2201      	movs	r2, #1
 80159fc:	629a      	str	r2, [r3, #40]	; 0x28
			  bootButtons.btn0=0;
 80159fe:	4b35      	ldr	r3, [pc, #212]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a00:	2200      	movs	r2, #0
 8015a02:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8015a04:	4b33      	ldr	r3, [pc, #204]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a06:	2200      	movs	r2, #0
 8015a08:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8015a0a:	4b32      	ldr	r3, [pc, #200]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8015a10:	4b30      	ldr	r3, [pc, #192]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a12:	2200      	movs	r2, #0
 8015a14:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8015a16:	4b2f      	ldr	r3, [pc, #188]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a18:	2200      	movs	r2, #0
 8015a1a:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8015a1c:	4b2d      	ldr	r3, [pc, #180]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a1e:	2200      	movs	r2, #0
 8015a20:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8015a22:	4b2c      	ldr	r3, [pc, #176]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a24:	2200      	movs	r2, #0
 8015a26:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8015a28:	4b2a      	ldr	r3, [pc, #168]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8015a2e:	4b29      	ldr	r3, [pc, #164]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a30:	2201      	movs	r2, #1
 8015a32:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8015a34:	4b27      	ldr	r3, [pc, #156]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a36:	2200      	movs	r2, #0
 8015a38:	601a      	str	r2, [r3, #0]
		  if(!(bootButtons.btn1)){
 8015a3a:	4b26      	ldr	r3, [pc, #152]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a3c:	689b      	ldr	r3, [r3, #8]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d104      	bne.n	8015a4c <defaultBootButtons+0x19c>
			  BTN1_OFF;
 8015a42:	2200      	movs	r2, #0
 8015a44:	2108      	movs	r1, #8
 8015a46:	4824      	ldr	r0, [pc, #144]	; (8015ad8 <defaultBootButtons+0x228>)
 8015a48:	f7f3 fe38 	bl	80096bc <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn2)){
 8015a4c:	4b21      	ldr	r3, [pc, #132]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d104      	bne.n	8015a5e <defaultBootButtons+0x1ae>
			  BTN2_OFF;
 8015a54:	2200      	movs	r2, #0
 8015a56:	2110      	movs	r1, #16
 8015a58:	481f      	ldr	r0, [pc, #124]	; (8015ad8 <defaultBootButtons+0x228>)
 8015a5a:	f7f3 fe2f 	bl	80096bc <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn3)){
 8015a5e:	4b1d      	ldr	r3, [pc, #116]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a60:	691b      	ldr	r3, [r3, #16]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d104      	bne.n	8015a70 <defaultBootButtons+0x1c0>
			  BTN3_OFF;
 8015a66:	2200      	movs	r2, #0
 8015a68:	2120      	movs	r1, #32
 8015a6a:	481b      	ldr	r0, [pc, #108]	; (8015ad8 <defaultBootButtons+0x228>)
 8015a6c:	f7f3 fe26 	bl	80096bc <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn4)){
 8015a70:	4b18      	ldr	r3, [pc, #96]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a72:	695b      	ldr	r3, [r3, #20]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d105      	bne.n	8015a84 <defaultBootButtons+0x1d4>
			  BTN4_OFF;
 8015a78:	2200      	movs	r2, #0
 8015a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015a7e:	4816      	ldr	r0, [pc, #88]	; (8015ad8 <defaultBootButtons+0x228>)
 8015a80:	f7f3 fe1c 	bl	80096bc <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn5)){
 8015a84:	4b13      	ldr	r3, [pc, #76]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a86:	699b      	ldr	r3, [r3, #24]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d105      	bne.n	8015a98 <defaultBootButtons+0x1e8>
			  BTN5_OFF;
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015a92:	4811      	ldr	r0, [pc, #68]	; (8015ad8 <defaultBootButtons+0x228>)
 8015a94:	f7f3 fe12 	bl	80096bc <HAL_GPIO_WritePin>
		  if(!(bootButtons.edl_sw)){
 8015a98:	4b0e      	ldr	r3, [pc, #56]	; (8015ad4 <defaultBootButtons+0x224>)
 8015a9a:	69db      	ldr	r3, [r3, #28]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d105      	bne.n	8015aac <defaultBootButtons+0x1fc>
			  EDL_SW_OFF;
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015aa6:	480d      	ldr	r0, [pc, #52]	; (8015adc <defaultBootButtons+0x22c>)
 8015aa8:	f7f3 fe08 	bl	80096bc <HAL_GPIO_WritePin>
		  if(!(bootButtons.ex_sw)){
 8015aac:	4b09      	ldr	r3, [pc, #36]	; (8015ad4 <defaultBootButtons+0x224>)
 8015aae:	6a1b      	ldr	r3, [r3, #32]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d105      	bne.n	8015ac0 <defaultBootButtons+0x210>
			  EX_SW_OFF;
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015aba:	4808      	ldr	r0, [pc, #32]	; (8015adc <defaultBootButtons+0x22c>)
 8015abc:	f7f3 fdfe 	bl	80096bc <HAL_GPIO_WritePin>
	  break;
 8015ac0:	bf00      	nop
	}
	  return pwrBtnReady;
 8015ac2:	687b      	ldr	r3, [r7, #4]
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3710      	adds	r7, #16
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}
 8015acc:	200001f4 	.word	0x200001f4
 8015ad0:	2003119c 	.word	0x2003119c
 8015ad4:	20003360 	.word	0x20003360
 8015ad8:	40021400 	.word	0x40021400
 8015adc:	40020400 	.word	0x40020400

08015ae0 <defaultErrorLEDs>:

void defaultErrorLEDs(){
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b08a      	sub	sp, #40	; 0x28
 8015ae4:	af02      	add	r7, sp, #8
	float *presentADCValues;
	// An array of voltage rails that are monitored for faults.  Each element maps to the apporpriate ADC channel for monitoring
		// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h

		uint8_t monitor_rails[] = {VSYS};
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	723b      	strb	r3, [r7, #8]

		// An array of falling edge fault thresholds for the voltage rails that are monitored for faults.  Size of the array and index for each fault should match the voltage name in monitor_rails[].
		double monitor_fault_thresholds[] = {VSYS_FLT};
 8015aea:	f04f 0200 	mov.w	r2, #0
 8015aee:	4b7b      	ldr	r3, [pc, #492]	; (8015cdc <defaultErrorLEDs+0x1fc>)
 8015af0:	e9c7 2300 	strd	r2, r3, [r7]

		// An array of logic fault thresholds for the GPIO input rails that are monitored for faults.  The fault thresholds should match the mapping used in monitor_gpio[].
		uint8_t gpio_thresholds[] = {};

		uint8_t * errorLEDptr;
		uint8_t R = false;
 8015af4:	2300      	movs	r3, #0
 8015af6:	76fb      	strb	r3, [r7, #27]
		uint8_t G = false;
 8015af8:	2300      	movs	r3, #0
 8015afa:	76bb      	strb	r3, [r7, #26]
		uint8_t B = false;
 8015afc:	2300      	movs	r3, #0
 8015afe:	74fb      	strb	r3, [r7, #19]
		  // Check that the ADC are available, and if they are, retrieve the last recorded ADC outputs.
		  if(adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8015b00:	4b77      	ldr	r3, [pc, #476]	; (8015ce0 <defaultErrorLEDs+0x200>)
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d00b      	beq.n	8015b20 <defaultErrorLEDs+0x40>
 8015b08:	4b75      	ldr	r3, [pc, #468]	; (8015ce0 <defaultErrorLEDs+0x200>)
 8015b0a:	785b      	ldrb	r3, [r3, #1]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d007      	beq.n	8015b20 <defaultErrorLEDs+0x40>
 8015b10:	4b73      	ldr	r3, [pc, #460]	; (8015ce0 <defaultErrorLEDs+0x200>)
 8015b12:	789b      	ldrb	r3, [r3, #2]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d003      	beq.n	8015b20 <defaultErrorLEDs+0x40>
			  presentADCValues = getADCValues();
 8015b18:	f7ee f9e2 	bl	8003ee0 <getADCValues>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	617b      	str	r3, [r7, #20]
		  }

		  // Iterate through all the ADC channels that are monitored for faults
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8015b20:	2300      	movs	r3, #0
 8015b22:	767b      	strb	r3, [r7, #25]
 8015b24:	e02f      	b.n	8015b86 <defaultErrorLEDs+0xa6>
		  {
			  // This switch statement maps the appropriate errorLED struct fault flag to the errorLEDptr so that we can clear or set it.
			  // To add more faults simply add more case statements.
			  // PLATFORM TEMPLATE: edit the switch statement labels to match the entries in monitor_rails[] array.
			  switch (monitor_rails[rail])
 8015b26:	7e7b      	ldrb	r3, [r7, #25]
 8015b28:	f107 0220 	add.w	r2, r7, #32
 8015b2c:	4413      	add	r3, r2
 8015b2e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d102      	bne.n	8015b3c <defaultErrorLEDs+0x5c>
			  {
			  case VSYS:
				  errorLEDptr = &errorLED.vsysPMIFault;
 8015b36:	4b6b      	ldr	r3, [pc, #428]	; (8015ce4 <defaultErrorLEDs+0x204>)
 8015b38:	61fb      	str	r3, [r7, #28]
				  break;
 8015b3a:	e000      	b.n	8015b3e <defaultErrorLEDs+0x5e>
			  default:
				  break;
 8015b3c:	bf00      	nop
			  }
			  // If the voltage level is above the low fault threshold then clear the fault flag.
			  if (*(presentADCValues+monitor_rails[rail]) > monitor_fault_thresholds[rail])
 8015b3e:	7e7b      	ldrb	r3, [r7, #25]
 8015b40:	f107 0220 	add.w	r2, r7, #32
 8015b44:	4413      	add	r3, r2
 8015b46:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	697a      	ldr	r2, [r7, #20]
 8015b4e:	4413      	add	r3, r2
 8015b50:	edd3 7a00 	vldr	s15, [r3]
 8015b54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8015b58:	7e7b      	ldrb	r3, [r7, #25]
 8015b5a:	00db      	lsls	r3, r3, #3
 8015b5c:	f107 0220 	add.w	r2, r7, #32
 8015b60:	4413      	add	r3, r2
 8015b62:	3b20      	subs	r3, #32
 8015b64:	ed93 7b00 	vldr	d7, [r3]
 8015b68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b70:	dd03      	ble.n	8015b7a <defaultErrorLEDs+0x9a>
			  {
				  *errorLEDptr = false;
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	2200      	movs	r2, #0
 8015b76:	701a      	strb	r2, [r3, #0]
 8015b78:	e002      	b.n	8015b80 <defaultErrorLEDs+0xa0>
			  }
			  else
			  {
				  *errorLEDptr = true;
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	2201      	movs	r2, #1
 8015b7e:	701a      	strb	r2, [r3, #0]
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8015b80:	7e7b      	ldrb	r3, [r7, #25]
 8015b82:	3301      	adds	r3, #1
 8015b84:	767b      	strb	r3, [r7, #25]
 8015b86:	7e7b      	ldrb	r3, [r7, #25]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d0cc      	beq.n	8015b26 <defaultErrorLEDs+0x46>
			  }
		  }

		  // Check GPIO inputs for faults. Iterate through the inputs that are supposed to be monitored for faults.
		  for (uint8_t input = 0; input < sizeof(monitor_gpio)/sizeof(monitor_gpio[0]); input++)
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	74bb      	strb	r3, [r7, #18]
 8015b90:	bf00      	nop
		//	  errorLED.vsysPMIFault=false;
		  //}
		  //else{
		//	  errorLED.vsysPMIFault=true;
		 // }
		  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8015b92:	4b55      	ldr	r3, [pc, #340]	; (8015ce8 <defaultErrorLEDs+0x208>)
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d103      	bne.n	8015ba2 <defaultErrorLEDs+0xc2>
 8015b9a:	4b53      	ldr	r3, [pc, #332]	; (8015ce8 <defaultErrorLEDs+0x208>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d103      	bne.n	8015baa <defaultErrorLEDs+0xca>
 8015ba2:	4b51      	ldr	r3, [pc, #324]	; (8015ce8 <defaultErrorLEDs+0x208>)
 8015ba4:	699b      	ldr	r3, [r3, #24]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	da03      	bge.n	8015bb2 <defaultErrorLEDs+0xd2>
			  errorLED.zionFault=true;
 8015baa:	4b50      	ldr	r3, [pc, #320]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bac:	2201      	movs	r2, #1
 8015bae:	701a      	strb	r2, [r3, #0]
 8015bb0:	e002      	b.n	8015bb8 <defaultErrorLEDs+0xd8>
		  }
		  else{
			  errorLED.zionFault=false;
 8015bb2:	4b4e      	ldr	r3, [pc, #312]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	701a      	strb	r2, [r3, #0]
		  }
		  //HAL_I2C_IsDeviceReady(&hi2c1, SOC_ADDRESS, 2, 100)
		  int i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8015bb8:	4b4d      	ldr	r3, [pc, #308]	; (8015cf0 <defaultErrorLEDs+0x210>)
 8015bba:	7818      	ldrb	r0, [r3, #0]
 8015bbc:	4b4c      	ldr	r3, [pc, #304]	; (8015cf0 <defaultErrorLEDs+0x210>)
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	9300      	str	r3, [sp, #0]
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	21f0      	movs	r1, #240	; 0xf0
 8015bc8:	f7ed ff1a 	bl	8003a00 <writeI2CRegister>
 8015bcc:	60f8      	str	r0, [r7, #12]

		  //only allow the error led write commands if the led driver responds.
		  if(i2cCheck == HAL_OK)
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d17c      	bne.n	8015cce <defaultErrorLEDs+0x1ee>
		  {
			  errorLED.ledDriver=false;
 8015bd4:	4b45      	ldr	r3, [pc, #276]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	735a      	strb	r2, [r3, #13]

			  switch(bootButtons.bootMode)
 8015bda:	4b46      	ldr	r3, [pc, #280]	; (8015cf4 <defaultErrorLEDs+0x214>)
 8015bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d002      	beq.n	8015be8 <defaultErrorLEDs+0x108>
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	d00f      	beq.n	8015c06 <defaultErrorLEDs+0x126>
					errorLED.edl_boot=false;
					errorLED.boot_fault=false;
					G = true;
					break;
				default:
					break;
 8015be6:	e01d      	b.n	8015c24 <defaultErrorLEDs+0x144>
					errorLED.standard_boot=false;
 8015be8:	4b40      	ldr	r3, [pc, #256]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8015bee:	4b3f      	ldr	r3, [pc, #252]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8015bf4:	4b3d      	ldr	r3, [pc, #244]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8015bfa:	4b3c      	ldr	r3, [pc, #240]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	71da      	strb	r2, [r3, #7]
					R = false;
 8015c00:	2300      	movs	r3, #0
 8015c02:	76fb      	strb	r3, [r7, #27]
					break;
 8015c04:	e00e      	b.n	8015c24 <defaultErrorLEDs+0x144>
					errorLED.standard_boot=true;
 8015c06:	4b39      	ldr	r3, [pc, #228]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c08:	2201      	movs	r2, #1
 8015c0a:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8015c0c:	4b37      	ldr	r3, [pc, #220]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c0e:	2200      	movs	r2, #0
 8015c10:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8015c12:	4b36      	ldr	r3, [pc, #216]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c14:	2200      	movs	r2, #0
 8015c16:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8015c18:	4b34      	ldr	r3, [pc, #208]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	71da      	strb	r2, [r3, #7]
					G = true;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	76bb      	strb	r3, [r7, #26]
					break;
 8015c22:	bf00      	nop
			  }
			  setRGBLED(R,G,B);
 8015c24:	7efb      	ldrb	r3, [r7, #27]
 8015c26:	7eb9      	ldrb	r1, [r7, #26]
 8015c28:	7cfa      	ldrb	r2, [r7, #19]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7ee f810 	bl	8003c50 <setRGBLED>
			  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8015c30:	4b2e      	ldr	r3, [pc, #184]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	4619      	mov	r1, r3
 8015c36:	2000      	movs	r0, #0
 8015c38:	f7ee f836 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015c3c:	2014      	movs	r0, #20
 8015c3e:	f7f2 f8bd 	bl	8007dbc <HAL_Delay>
			  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 8015c42:	4b2a      	ldr	r3, [pc, #168]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c44:	785b      	ldrb	r3, [r3, #1]
 8015c46:	4619      	mov	r1, r3
 8015c48:	2001      	movs	r0, #1
 8015c4a:	f7ee f82d 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015c4e:	2014      	movs	r0, #20
 8015c50:	f7f2 f8b4 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT3,errorLED.fault3);
 8015c54:	4b25      	ldr	r3, [pc, #148]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c56:	789b      	ldrb	r3, [r3, #2]
 8015c58:	4619      	mov	r1, r3
 8015c5a:	2002      	movs	r0, #2
 8015c5c:	f7ee f824 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015c60:	2014      	movs	r0, #20
 8015c62:	f7f2 f8ab 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT4,errorLED.fault4);
 8015c66:	4b21      	ldr	r3, [pc, #132]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c68:	78db      	ldrb	r3, [r3, #3]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	2003      	movs	r0, #3
 8015c6e:	f7ee f81b 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015c72:	2014      	movs	r0, #20
 8015c74:	f7f2 f8a2 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT5,errorLED.fault5);
 8015c78:	4b1c      	ldr	r3, [pc, #112]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c7a:	791b      	ldrb	r3, [r3, #4]
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	2004      	movs	r0, #4
 8015c80:	f7ee f812 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015c84:	2014      	movs	r0, #20
 8015c86:	f7f2 f899 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT6,errorLED.fault6);
 8015c8a:	4b18      	ldr	r3, [pc, #96]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c8c:	795b      	ldrb	r3, [r3, #5]
 8015c8e:	4619      	mov	r1, r3
 8015c90:	2005      	movs	r0, #5
 8015c92:	f7ee f809 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015c96:	2014      	movs	r0, #20
 8015c98:	f7f2 f890 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT7,errorLED.fault7);
 8015c9c:	4b13      	ldr	r3, [pc, #76]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015c9e:	799b      	ldrb	r3, [r3, #6]
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	2006      	movs	r0, #6
 8015ca4:	f7ee f800 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015ca8:	2014      	movs	r0, #20
 8015caa:	f7f2 f887 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT8,errorLED.fault8);
 8015cae:	4b0f      	ldr	r3, [pc, #60]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015cb0:	7adb      	ldrb	r3, [r3, #11]
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	200a      	movs	r0, #10
 8015cb6:	f7ed fff7 	bl	8003ca8 <setErrorLED>
			  HAL_Delay(20);
 8015cba:	2014      	movs	r0, #20
 8015cbc:	f7f2 f87e 	bl	8007dbc <HAL_Delay>
			  setErrorLED(FAULT9,errorLED.fault9);
 8015cc0:	4b0a      	ldr	r3, [pc, #40]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015cc2:	7b1b      	ldrb	r3, [r3, #12]
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	200b      	movs	r0, #11
 8015cc8:	f7ed ffee 	bl	8003ca8 <setErrorLED>
		  }
		  else{
			  errorLED.ledDriver = true;
		  }
}
 8015ccc:	e002      	b.n	8015cd4 <defaultErrorLEDs+0x1f4>
			  errorLED.ledDriver = true;
 8015cce:	4b07      	ldr	r3, [pc, #28]	; (8015cec <defaultErrorLEDs+0x20c>)
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	735a      	strb	r2, [r3, #13]
}
 8015cd4:	bf00      	nop
 8015cd6:	3720      	adds	r7, #32
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	400c0000 	.word	0x400c0000
 8015ce0:	20003324 	.word	0x20003324
 8015ce4:	2000338d 	.word	0x2000338d
 8015ce8:	20003328 	.word	0x20003328
 8015cec:	2000338c 	.word	0x2000338c
 8015cf0:	200001d8 	.word	0x200001d8
 8015cf4:	20003360 	.word	0x20003360

08015cf8 <__errno>:
 8015cf8:	4b01      	ldr	r3, [pc, #4]	; (8015d00 <__errno+0x8>)
 8015cfa:	6818      	ldr	r0, [r3, #0]
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop
 8015d00:	20000254 	.word	0x20000254

08015d04 <__libc_init_array>:
 8015d04:	b570      	push	{r4, r5, r6, lr}
 8015d06:	4d0d      	ldr	r5, [pc, #52]	; (8015d3c <__libc_init_array+0x38>)
 8015d08:	4c0d      	ldr	r4, [pc, #52]	; (8015d40 <__libc_init_array+0x3c>)
 8015d0a:	1b64      	subs	r4, r4, r5
 8015d0c:	10a4      	asrs	r4, r4, #2
 8015d0e:	2600      	movs	r6, #0
 8015d10:	42a6      	cmp	r6, r4
 8015d12:	d109      	bne.n	8015d28 <__libc_init_array+0x24>
 8015d14:	4d0b      	ldr	r5, [pc, #44]	; (8015d44 <__libc_init_array+0x40>)
 8015d16:	4c0c      	ldr	r4, [pc, #48]	; (8015d48 <__libc_init_array+0x44>)
 8015d18:	f004 fb8c 	bl	801a434 <_init>
 8015d1c:	1b64      	subs	r4, r4, r5
 8015d1e:	10a4      	asrs	r4, r4, #2
 8015d20:	2600      	movs	r6, #0
 8015d22:	42a6      	cmp	r6, r4
 8015d24:	d105      	bne.n	8015d32 <__libc_init_array+0x2e>
 8015d26:	bd70      	pop	{r4, r5, r6, pc}
 8015d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d2c:	4798      	blx	r3
 8015d2e:	3601      	adds	r6, #1
 8015d30:	e7ee      	b.n	8015d10 <__libc_init_array+0xc>
 8015d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d36:	4798      	blx	r3
 8015d38:	3601      	adds	r6, #1
 8015d3a:	e7f2      	b.n	8015d22 <__libc_init_array+0x1e>
 8015d3c:	0801cbec 	.word	0x0801cbec
 8015d40:	0801cbec 	.word	0x0801cbec
 8015d44:	0801cbec 	.word	0x0801cbec
 8015d48:	0801cbf0 	.word	0x0801cbf0

08015d4c <memcpy>:
 8015d4c:	440a      	add	r2, r1
 8015d4e:	4291      	cmp	r1, r2
 8015d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8015d54:	d100      	bne.n	8015d58 <memcpy+0xc>
 8015d56:	4770      	bx	lr
 8015d58:	b510      	push	{r4, lr}
 8015d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d62:	4291      	cmp	r1, r2
 8015d64:	d1f9      	bne.n	8015d5a <memcpy+0xe>
 8015d66:	bd10      	pop	{r4, pc}

08015d68 <memset>:
 8015d68:	4402      	add	r2, r0
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	4293      	cmp	r3, r2
 8015d6e:	d100      	bne.n	8015d72 <memset+0xa>
 8015d70:	4770      	bx	lr
 8015d72:	f803 1b01 	strb.w	r1, [r3], #1
 8015d76:	e7f9      	b.n	8015d6c <memset+0x4>

08015d78 <__cvt>:
 8015d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d7a:	ed2d 8b02 	vpush	{d8}
 8015d7e:	eeb0 8b40 	vmov.f64	d8, d0
 8015d82:	b085      	sub	sp, #20
 8015d84:	4617      	mov	r7, r2
 8015d86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015d88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015d8a:	ee18 2a90 	vmov	r2, s17
 8015d8e:	f025 0520 	bic.w	r5, r5, #32
 8015d92:	2a00      	cmp	r2, #0
 8015d94:	bfb6      	itet	lt
 8015d96:	222d      	movlt	r2, #45	; 0x2d
 8015d98:	2200      	movge	r2, #0
 8015d9a:	eeb1 8b40 	vneglt.f64	d8, d0
 8015d9e:	2d46      	cmp	r5, #70	; 0x46
 8015da0:	460c      	mov	r4, r1
 8015da2:	701a      	strb	r2, [r3, #0]
 8015da4:	d004      	beq.n	8015db0 <__cvt+0x38>
 8015da6:	2d45      	cmp	r5, #69	; 0x45
 8015da8:	d100      	bne.n	8015dac <__cvt+0x34>
 8015daa:	3401      	adds	r4, #1
 8015dac:	2102      	movs	r1, #2
 8015dae:	e000      	b.n	8015db2 <__cvt+0x3a>
 8015db0:	2103      	movs	r1, #3
 8015db2:	ab03      	add	r3, sp, #12
 8015db4:	9301      	str	r3, [sp, #4]
 8015db6:	ab02      	add	r3, sp, #8
 8015db8:	9300      	str	r3, [sp, #0]
 8015dba:	4622      	mov	r2, r4
 8015dbc:	4633      	mov	r3, r6
 8015dbe:	eeb0 0b48 	vmov.f64	d0, d8
 8015dc2:	f001 fd69 	bl	8017898 <_dtoa_r>
 8015dc6:	2d47      	cmp	r5, #71	; 0x47
 8015dc8:	d109      	bne.n	8015dde <__cvt+0x66>
 8015dca:	07fb      	lsls	r3, r7, #31
 8015dcc:	d407      	bmi.n	8015dde <__cvt+0x66>
 8015dce:	9b03      	ldr	r3, [sp, #12]
 8015dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dd2:	1a1b      	subs	r3, r3, r0
 8015dd4:	6013      	str	r3, [r2, #0]
 8015dd6:	b005      	add	sp, #20
 8015dd8:	ecbd 8b02 	vpop	{d8}
 8015ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dde:	2d46      	cmp	r5, #70	; 0x46
 8015de0:	eb00 0204 	add.w	r2, r0, r4
 8015de4:	d10c      	bne.n	8015e00 <__cvt+0x88>
 8015de6:	7803      	ldrb	r3, [r0, #0]
 8015de8:	2b30      	cmp	r3, #48	; 0x30
 8015dea:	d107      	bne.n	8015dfc <__cvt+0x84>
 8015dec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df4:	bf1c      	itt	ne
 8015df6:	f1c4 0401 	rsbne	r4, r4, #1
 8015dfa:	6034      	strne	r4, [r6, #0]
 8015dfc:	6833      	ldr	r3, [r6, #0]
 8015dfe:	441a      	add	r2, r3
 8015e00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e08:	bf08      	it	eq
 8015e0a:	9203      	streq	r2, [sp, #12]
 8015e0c:	2130      	movs	r1, #48	; 0x30
 8015e0e:	9b03      	ldr	r3, [sp, #12]
 8015e10:	4293      	cmp	r3, r2
 8015e12:	d2dc      	bcs.n	8015dce <__cvt+0x56>
 8015e14:	1c5c      	adds	r4, r3, #1
 8015e16:	9403      	str	r4, [sp, #12]
 8015e18:	7019      	strb	r1, [r3, #0]
 8015e1a:	e7f8      	b.n	8015e0e <__cvt+0x96>

08015e1c <__exponent>:
 8015e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e1e:	4603      	mov	r3, r0
 8015e20:	2900      	cmp	r1, #0
 8015e22:	bfb8      	it	lt
 8015e24:	4249      	neglt	r1, r1
 8015e26:	f803 2b02 	strb.w	r2, [r3], #2
 8015e2a:	bfb4      	ite	lt
 8015e2c:	222d      	movlt	r2, #45	; 0x2d
 8015e2e:	222b      	movge	r2, #43	; 0x2b
 8015e30:	2909      	cmp	r1, #9
 8015e32:	7042      	strb	r2, [r0, #1]
 8015e34:	dd2a      	ble.n	8015e8c <__exponent+0x70>
 8015e36:	f10d 0407 	add.w	r4, sp, #7
 8015e3a:	46a4      	mov	ip, r4
 8015e3c:	270a      	movs	r7, #10
 8015e3e:	46a6      	mov	lr, r4
 8015e40:	460a      	mov	r2, r1
 8015e42:	fb91 f6f7 	sdiv	r6, r1, r7
 8015e46:	fb07 1516 	mls	r5, r7, r6, r1
 8015e4a:	3530      	adds	r5, #48	; 0x30
 8015e4c:	2a63      	cmp	r2, #99	; 0x63
 8015e4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015e56:	4631      	mov	r1, r6
 8015e58:	dcf1      	bgt.n	8015e3e <__exponent+0x22>
 8015e5a:	3130      	adds	r1, #48	; 0x30
 8015e5c:	f1ae 0502 	sub.w	r5, lr, #2
 8015e60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015e64:	1c44      	adds	r4, r0, #1
 8015e66:	4629      	mov	r1, r5
 8015e68:	4561      	cmp	r1, ip
 8015e6a:	d30a      	bcc.n	8015e82 <__exponent+0x66>
 8015e6c:	f10d 0209 	add.w	r2, sp, #9
 8015e70:	eba2 020e 	sub.w	r2, r2, lr
 8015e74:	4565      	cmp	r5, ip
 8015e76:	bf88      	it	hi
 8015e78:	2200      	movhi	r2, #0
 8015e7a:	4413      	add	r3, r2
 8015e7c:	1a18      	subs	r0, r3, r0
 8015e7e:	b003      	add	sp, #12
 8015e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015e8a:	e7ed      	b.n	8015e68 <__exponent+0x4c>
 8015e8c:	2330      	movs	r3, #48	; 0x30
 8015e8e:	3130      	adds	r1, #48	; 0x30
 8015e90:	7083      	strb	r3, [r0, #2]
 8015e92:	70c1      	strb	r1, [r0, #3]
 8015e94:	1d03      	adds	r3, r0, #4
 8015e96:	e7f1      	b.n	8015e7c <__exponent+0x60>

08015e98 <_printf_float>:
 8015e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9c:	b08b      	sub	sp, #44	; 0x2c
 8015e9e:	460c      	mov	r4, r1
 8015ea0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015ea4:	4616      	mov	r6, r2
 8015ea6:	461f      	mov	r7, r3
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	f002 fedb 	bl	8018c64 <_localeconv_r>
 8015eae:	f8d0 b000 	ldr.w	fp, [r0]
 8015eb2:	4658      	mov	r0, fp
 8015eb4:	f7ea f9c4 	bl	8000240 <strlen>
 8015eb8:	2300      	movs	r3, #0
 8015eba:	9308      	str	r3, [sp, #32]
 8015ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8015ec0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015ec4:	6822      	ldr	r2, [r4, #0]
 8015ec6:	3307      	adds	r3, #7
 8015ec8:	f023 0307 	bic.w	r3, r3, #7
 8015ecc:	f103 0108 	add.w	r1, r3, #8
 8015ed0:	f8c8 1000 	str.w	r1, [r8]
 8015ed4:	4682      	mov	sl, r0
 8015ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015eda:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8015ede:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016140 <_printf_float+0x2a8>
 8015ee2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8015ee6:	eeb0 6bc0 	vabs.f64	d6, d0
 8015eea:	eeb4 6b47 	vcmp.f64	d6, d7
 8015eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef2:	dd24      	ble.n	8015f3e <_printf_float+0xa6>
 8015ef4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efc:	d502      	bpl.n	8015f04 <_printf_float+0x6c>
 8015efe:	232d      	movs	r3, #45	; 0x2d
 8015f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f04:	4b90      	ldr	r3, [pc, #576]	; (8016148 <_printf_float+0x2b0>)
 8015f06:	4891      	ldr	r0, [pc, #580]	; (801614c <_printf_float+0x2b4>)
 8015f08:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015f0c:	bf94      	ite	ls
 8015f0e:	4698      	movls	r8, r3
 8015f10:	4680      	movhi	r8, r0
 8015f12:	2303      	movs	r3, #3
 8015f14:	6123      	str	r3, [r4, #16]
 8015f16:	f022 0204 	bic.w	r2, r2, #4
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	6022      	str	r2, [r4, #0]
 8015f1e:	9304      	str	r3, [sp, #16]
 8015f20:	9700      	str	r7, [sp, #0]
 8015f22:	4633      	mov	r3, r6
 8015f24:	aa09      	add	r2, sp, #36	; 0x24
 8015f26:	4621      	mov	r1, r4
 8015f28:	4628      	mov	r0, r5
 8015f2a:	f000 f9d3 	bl	80162d4 <_printf_common>
 8015f2e:	3001      	adds	r0, #1
 8015f30:	f040 808a 	bne.w	8016048 <_printf_float+0x1b0>
 8015f34:	f04f 30ff 	mov.w	r0, #4294967295
 8015f38:	b00b      	add	sp, #44	; 0x2c
 8015f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3e:	eeb4 0b40 	vcmp.f64	d0, d0
 8015f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f46:	d709      	bvc.n	8015f5c <_printf_float+0xc4>
 8015f48:	ee10 3a90 	vmov	r3, s1
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	bfbc      	itt	lt
 8015f50:	232d      	movlt	r3, #45	; 0x2d
 8015f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015f56:	487e      	ldr	r0, [pc, #504]	; (8016150 <_printf_float+0x2b8>)
 8015f58:	4b7e      	ldr	r3, [pc, #504]	; (8016154 <_printf_float+0x2bc>)
 8015f5a:	e7d5      	b.n	8015f08 <_printf_float+0x70>
 8015f5c:	6863      	ldr	r3, [r4, #4]
 8015f5e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8015f62:	9104      	str	r1, [sp, #16]
 8015f64:	1c59      	adds	r1, r3, #1
 8015f66:	d13c      	bne.n	8015fe2 <_printf_float+0x14a>
 8015f68:	2306      	movs	r3, #6
 8015f6a:	6063      	str	r3, [r4, #4]
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	9303      	str	r3, [sp, #12]
 8015f70:	ab08      	add	r3, sp, #32
 8015f72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015f76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015f7a:	ab07      	add	r3, sp, #28
 8015f7c:	6861      	ldr	r1, [r4, #4]
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	6022      	str	r2, [r4, #0]
 8015f82:	f10d 031b 	add.w	r3, sp, #27
 8015f86:	4628      	mov	r0, r5
 8015f88:	f7ff fef6 	bl	8015d78 <__cvt>
 8015f8c:	9b04      	ldr	r3, [sp, #16]
 8015f8e:	9907      	ldr	r1, [sp, #28]
 8015f90:	2b47      	cmp	r3, #71	; 0x47
 8015f92:	4680      	mov	r8, r0
 8015f94:	d108      	bne.n	8015fa8 <_printf_float+0x110>
 8015f96:	1cc8      	adds	r0, r1, #3
 8015f98:	db02      	blt.n	8015fa0 <_printf_float+0x108>
 8015f9a:	6863      	ldr	r3, [r4, #4]
 8015f9c:	4299      	cmp	r1, r3
 8015f9e:	dd41      	ble.n	8016024 <_printf_float+0x18c>
 8015fa0:	f1a9 0902 	sub.w	r9, r9, #2
 8015fa4:	fa5f f989 	uxtb.w	r9, r9
 8015fa8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015fac:	d820      	bhi.n	8015ff0 <_printf_float+0x158>
 8015fae:	3901      	subs	r1, #1
 8015fb0:	464a      	mov	r2, r9
 8015fb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015fb6:	9107      	str	r1, [sp, #28]
 8015fb8:	f7ff ff30 	bl	8015e1c <__exponent>
 8015fbc:	9a08      	ldr	r2, [sp, #32]
 8015fbe:	9004      	str	r0, [sp, #16]
 8015fc0:	1813      	adds	r3, r2, r0
 8015fc2:	2a01      	cmp	r2, #1
 8015fc4:	6123      	str	r3, [r4, #16]
 8015fc6:	dc02      	bgt.n	8015fce <_printf_float+0x136>
 8015fc8:	6822      	ldr	r2, [r4, #0]
 8015fca:	07d2      	lsls	r2, r2, #31
 8015fcc:	d501      	bpl.n	8015fd2 <_printf_float+0x13a>
 8015fce:	3301      	adds	r3, #1
 8015fd0:	6123      	str	r3, [r4, #16]
 8015fd2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d0a2      	beq.n	8015f20 <_printf_float+0x88>
 8015fda:	232d      	movs	r3, #45	; 0x2d
 8015fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fe0:	e79e      	b.n	8015f20 <_printf_float+0x88>
 8015fe2:	9904      	ldr	r1, [sp, #16]
 8015fe4:	2947      	cmp	r1, #71	; 0x47
 8015fe6:	d1c1      	bne.n	8015f6c <_printf_float+0xd4>
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d1bf      	bne.n	8015f6c <_printf_float+0xd4>
 8015fec:	2301      	movs	r3, #1
 8015fee:	e7bc      	b.n	8015f6a <_printf_float+0xd2>
 8015ff0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8015ff4:	d118      	bne.n	8016028 <_printf_float+0x190>
 8015ff6:	2900      	cmp	r1, #0
 8015ff8:	6863      	ldr	r3, [r4, #4]
 8015ffa:	dd0b      	ble.n	8016014 <_printf_float+0x17c>
 8015ffc:	6121      	str	r1, [r4, #16]
 8015ffe:	b913      	cbnz	r3, 8016006 <_printf_float+0x16e>
 8016000:	6822      	ldr	r2, [r4, #0]
 8016002:	07d0      	lsls	r0, r2, #31
 8016004:	d502      	bpl.n	801600c <_printf_float+0x174>
 8016006:	3301      	adds	r3, #1
 8016008:	440b      	add	r3, r1
 801600a:	6123      	str	r3, [r4, #16]
 801600c:	2300      	movs	r3, #0
 801600e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016010:	9304      	str	r3, [sp, #16]
 8016012:	e7de      	b.n	8015fd2 <_printf_float+0x13a>
 8016014:	b913      	cbnz	r3, 801601c <_printf_float+0x184>
 8016016:	6822      	ldr	r2, [r4, #0]
 8016018:	07d2      	lsls	r2, r2, #31
 801601a:	d501      	bpl.n	8016020 <_printf_float+0x188>
 801601c:	3302      	adds	r3, #2
 801601e:	e7f4      	b.n	801600a <_printf_float+0x172>
 8016020:	2301      	movs	r3, #1
 8016022:	e7f2      	b.n	801600a <_printf_float+0x172>
 8016024:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016028:	9b08      	ldr	r3, [sp, #32]
 801602a:	4299      	cmp	r1, r3
 801602c:	db05      	blt.n	801603a <_printf_float+0x1a2>
 801602e:	6823      	ldr	r3, [r4, #0]
 8016030:	6121      	str	r1, [r4, #16]
 8016032:	07d8      	lsls	r0, r3, #31
 8016034:	d5ea      	bpl.n	801600c <_printf_float+0x174>
 8016036:	1c4b      	adds	r3, r1, #1
 8016038:	e7e7      	b.n	801600a <_printf_float+0x172>
 801603a:	2900      	cmp	r1, #0
 801603c:	bfd4      	ite	le
 801603e:	f1c1 0202 	rsble	r2, r1, #2
 8016042:	2201      	movgt	r2, #1
 8016044:	4413      	add	r3, r2
 8016046:	e7e0      	b.n	801600a <_printf_float+0x172>
 8016048:	6823      	ldr	r3, [r4, #0]
 801604a:	055a      	lsls	r2, r3, #21
 801604c:	d407      	bmi.n	801605e <_printf_float+0x1c6>
 801604e:	6923      	ldr	r3, [r4, #16]
 8016050:	4642      	mov	r2, r8
 8016052:	4631      	mov	r1, r6
 8016054:	4628      	mov	r0, r5
 8016056:	47b8      	blx	r7
 8016058:	3001      	adds	r0, #1
 801605a:	d12a      	bne.n	80160b2 <_printf_float+0x21a>
 801605c:	e76a      	b.n	8015f34 <_printf_float+0x9c>
 801605e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016062:	f240 80e2 	bls.w	801622a <_printf_float+0x392>
 8016066:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801606a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016072:	d133      	bne.n	80160dc <_printf_float+0x244>
 8016074:	4a38      	ldr	r2, [pc, #224]	; (8016158 <_printf_float+0x2c0>)
 8016076:	2301      	movs	r3, #1
 8016078:	4631      	mov	r1, r6
 801607a:	4628      	mov	r0, r5
 801607c:	47b8      	blx	r7
 801607e:	3001      	adds	r0, #1
 8016080:	f43f af58 	beq.w	8015f34 <_printf_float+0x9c>
 8016084:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016088:	429a      	cmp	r2, r3
 801608a:	db02      	blt.n	8016092 <_printf_float+0x1fa>
 801608c:	6823      	ldr	r3, [r4, #0]
 801608e:	07d8      	lsls	r0, r3, #31
 8016090:	d50f      	bpl.n	80160b2 <_printf_float+0x21a>
 8016092:	4653      	mov	r3, sl
 8016094:	465a      	mov	r2, fp
 8016096:	4631      	mov	r1, r6
 8016098:	4628      	mov	r0, r5
 801609a:	47b8      	blx	r7
 801609c:	3001      	adds	r0, #1
 801609e:	f43f af49 	beq.w	8015f34 <_printf_float+0x9c>
 80160a2:	f04f 0800 	mov.w	r8, #0
 80160a6:	f104 091a 	add.w	r9, r4, #26
 80160aa:	9b08      	ldr	r3, [sp, #32]
 80160ac:	3b01      	subs	r3, #1
 80160ae:	4543      	cmp	r3, r8
 80160b0:	dc09      	bgt.n	80160c6 <_printf_float+0x22e>
 80160b2:	6823      	ldr	r3, [r4, #0]
 80160b4:	079b      	lsls	r3, r3, #30
 80160b6:	f100 8108 	bmi.w	80162ca <_printf_float+0x432>
 80160ba:	68e0      	ldr	r0, [r4, #12]
 80160bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160be:	4298      	cmp	r0, r3
 80160c0:	bfb8      	it	lt
 80160c2:	4618      	movlt	r0, r3
 80160c4:	e738      	b.n	8015f38 <_printf_float+0xa0>
 80160c6:	2301      	movs	r3, #1
 80160c8:	464a      	mov	r2, r9
 80160ca:	4631      	mov	r1, r6
 80160cc:	4628      	mov	r0, r5
 80160ce:	47b8      	blx	r7
 80160d0:	3001      	adds	r0, #1
 80160d2:	f43f af2f 	beq.w	8015f34 <_printf_float+0x9c>
 80160d6:	f108 0801 	add.w	r8, r8, #1
 80160da:	e7e6      	b.n	80160aa <_printf_float+0x212>
 80160dc:	9b07      	ldr	r3, [sp, #28]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	dc3c      	bgt.n	801615c <_printf_float+0x2c4>
 80160e2:	4a1d      	ldr	r2, [pc, #116]	; (8016158 <_printf_float+0x2c0>)
 80160e4:	2301      	movs	r3, #1
 80160e6:	4631      	mov	r1, r6
 80160e8:	4628      	mov	r0, r5
 80160ea:	47b8      	blx	r7
 80160ec:	3001      	adds	r0, #1
 80160ee:	f43f af21 	beq.w	8015f34 <_printf_float+0x9c>
 80160f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80160f6:	4313      	orrs	r3, r2
 80160f8:	d102      	bne.n	8016100 <_printf_float+0x268>
 80160fa:	6823      	ldr	r3, [r4, #0]
 80160fc:	07d9      	lsls	r1, r3, #31
 80160fe:	d5d8      	bpl.n	80160b2 <_printf_float+0x21a>
 8016100:	4653      	mov	r3, sl
 8016102:	465a      	mov	r2, fp
 8016104:	4631      	mov	r1, r6
 8016106:	4628      	mov	r0, r5
 8016108:	47b8      	blx	r7
 801610a:	3001      	adds	r0, #1
 801610c:	f43f af12 	beq.w	8015f34 <_printf_float+0x9c>
 8016110:	f04f 0900 	mov.w	r9, #0
 8016114:	f104 0a1a 	add.w	sl, r4, #26
 8016118:	9b07      	ldr	r3, [sp, #28]
 801611a:	425b      	negs	r3, r3
 801611c:	454b      	cmp	r3, r9
 801611e:	dc01      	bgt.n	8016124 <_printf_float+0x28c>
 8016120:	9b08      	ldr	r3, [sp, #32]
 8016122:	e795      	b.n	8016050 <_printf_float+0x1b8>
 8016124:	2301      	movs	r3, #1
 8016126:	4652      	mov	r2, sl
 8016128:	4631      	mov	r1, r6
 801612a:	4628      	mov	r0, r5
 801612c:	47b8      	blx	r7
 801612e:	3001      	adds	r0, #1
 8016130:	f43f af00 	beq.w	8015f34 <_printf_float+0x9c>
 8016134:	f109 0901 	add.w	r9, r9, #1
 8016138:	e7ee      	b.n	8016118 <_printf_float+0x280>
 801613a:	bf00      	nop
 801613c:	f3af 8000 	nop.w
 8016140:	ffffffff 	.word	0xffffffff
 8016144:	7fefffff 	.word	0x7fefffff
 8016148:	0801c734 	.word	0x0801c734
 801614c:	0801c738 	.word	0x0801c738
 8016150:	0801c740 	.word	0x0801c740
 8016154:	0801c73c 	.word	0x0801c73c
 8016158:	0801c744 	.word	0x0801c744
 801615c:	9a08      	ldr	r2, [sp, #32]
 801615e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016160:	429a      	cmp	r2, r3
 8016162:	bfa8      	it	ge
 8016164:	461a      	movge	r2, r3
 8016166:	2a00      	cmp	r2, #0
 8016168:	4691      	mov	r9, r2
 801616a:	dc38      	bgt.n	80161de <_printf_float+0x346>
 801616c:	2300      	movs	r3, #0
 801616e:	9305      	str	r3, [sp, #20]
 8016170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016174:	f104 021a 	add.w	r2, r4, #26
 8016178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801617a:	9905      	ldr	r1, [sp, #20]
 801617c:	9304      	str	r3, [sp, #16]
 801617e:	eba3 0309 	sub.w	r3, r3, r9
 8016182:	428b      	cmp	r3, r1
 8016184:	dc33      	bgt.n	80161ee <_printf_float+0x356>
 8016186:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801618a:	429a      	cmp	r2, r3
 801618c:	db3c      	blt.n	8016208 <_printf_float+0x370>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	07da      	lsls	r2, r3, #31
 8016192:	d439      	bmi.n	8016208 <_printf_float+0x370>
 8016194:	9a08      	ldr	r2, [sp, #32]
 8016196:	9b04      	ldr	r3, [sp, #16]
 8016198:	9907      	ldr	r1, [sp, #28]
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	eba2 0901 	sub.w	r9, r2, r1
 80161a0:	4599      	cmp	r9, r3
 80161a2:	bfa8      	it	ge
 80161a4:	4699      	movge	r9, r3
 80161a6:	f1b9 0f00 	cmp.w	r9, #0
 80161aa:	dc35      	bgt.n	8016218 <_printf_float+0x380>
 80161ac:	f04f 0800 	mov.w	r8, #0
 80161b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80161b4:	f104 0a1a 	add.w	sl, r4, #26
 80161b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80161bc:	1a9b      	subs	r3, r3, r2
 80161be:	eba3 0309 	sub.w	r3, r3, r9
 80161c2:	4543      	cmp	r3, r8
 80161c4:	f77f af75 	ble.w	80160b2 <_printf_float+0x21a>
 80161c8:	2301      	movs	r3, #1
 80161ca:	4652      	mov	r2, sl
 80161cc:	4631      	mov	r1, r6
 80161ce:	4628      	mov	r0, r5
 80161d0:	47b8      	blx	r7
 80161d2:	3001      	adds	r0, #1
 80161d4:	f43f aeae 	beq.w	8015f34 <_printf_float+0x9c>
 80161d8:	f108 0801 	add.w	r8, r8, #1
 80161dc:	e7ec      	b.n	80161b8 <_printf_float+0x320>
 80161de:	4613      	mov	r3, r2
 80161e0:	4631      	mov	r1, r6
 80161e2:	4642      	mov	r2, r8
 80161e4:	4628      	mov	r0, r5
 80161e6:	47b8      	blx	r7
 80161e8:	3001      	adds	r0, #1
 80161ea:	d1bf      	bne.n	801616c <_printf_float+0x2d4>
 80161ec:	e6a2      	b.n	8015f34 <_printf_float+0x9c>
 80161ee:	2301      	movs	r3, #1
 80161f0:	4631      	mov	r1, r6
 80161f2:	4628      	mov	r0, r5
 80161f4:	9204      	str	r2, [sp, #16]
 80161f6:	47b8      	blx	r7
 80161f8:	3001      	adds	r0, #1
 80161fa:	f43f ae9b 	beq.w	8015f34 <_printf_float+0x9c>
 80161fe:	9b05      	ldr	r3, [sp, #20]
 8016200:	9a04      	ldr	r2, [sp, #16]
 8016202:	3301      	adds	r3, #1
 8016204:	9305      	str	r3, [sp, #20]
 8016206:	e7b7      	b.n	8016178 <_printf_float+0x2e0>
 8016208:	4653      	mov	r3, sl
 801620a:	465a      	mov	r2, fp
 801620c:	4631      	mov	r1, r6
 801620e:	4628      	mov	r0, r5
 8016210:	47b8      	blx	r7
 8016212:	3001      	adds	r0, #1
 8016214:	d1be      	bne.n	8016194 <_printf_float+0x2fc>
 8016216:	e68d      	b.n	8015f34 <_printf_float+0x9c>
 8016218:	9a04      	ldr	r2, [sp, #16]
 801621a:	464b      	mov	r3, r9
 801621c:	4442      	add	r2, r8
 801621e:	4631      	mov	r1, r6
 8016220:	4628      	mov	r0, r5
 8016222:	47b8      	blx	r7
 8016224:	3001      	adds	r0, #1
 8016226:	d1c1      	bne.n	80161ac <_printf_float+0x314>
 8016228:	e684      	b.n	8015f34 <_printf_float+0x9c>
 801622a:	9a08      	ldr	r2, [sp, #32]
 801622c:	2a01      	cmp	r2, #1
 801622e:	dc01      	bgt.n	8016234 <_printf_float+0x39c>
 8016230:	07db      	lsls	r3, r3, #31
 8016232:	d537      	bpl.n	80162a4 <_printf_float+0x40c>
 8016234:	2301      	movs	r3, #1
 8016236:	4642      	mov	r2, r8
 8016238:	4631      	mov	r1, r6
 801623a:	4628      	mov	r0, r5
 801623c:	47b8      	blx	r7
 801623e:	3001      	adds	r0, #1
 8016240:	f43f ae78 	beq.w	8015f34 <_printf_float+0x9c>
 8016244:	4653      	mov	r3, sl
 8016246:	465a      	mov	r2, fp
 8016248:	4631      	mov	r1, r6
 801624a:	4628      	mov	r0, r5
 801624c:	47b8      	blx	r7
 801624e:	3001      	adds	r0, #1
 8016250:	f43f ae70 	beq.w	8015f34 <_printf_float+0x9c>
 8016254:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016258:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016260:	d01b      	beq.n	801629a <_printf_float+0x402>
 8016262:	9b08      	ldr	r3, [sp, #32]
 8016264:	f108 0201 	add.w	r2, r8, #1
 8016268:	3b01      	subs	r3, #1
 801626a:	4631      	mov	r1, r6
 801626c:	4628      	mov	r0, r5
 801626e:	47b8      	blx	r7
 8016270:	3001      	adds	r0, #1
 8016272:	d10e      	bne.n	8016292 <_printf_float+0x3fa>
 8016274:	e65e      	b.n	8015f34 <_printf_float+0x9c>
 8016276:	2301      	movs	r3, #1
 8016278:	464a      	mov	r2, r9
 801627a:	4631      	mov	r1, r6
 801627c:	4628      	mov	r0, r5
 801627e:	47b8      	blx	r7
 8016280:	3001      	adds	r0, #1
 8016282:	f43f ae57 	beq.w	8015f34 <_printf_float+0x9c>
 8016286:	f108 0801 	add.w	r8, r8, #1
 801628a:	9b08      	ldr	r3, [sp, #32]
 801628c:	3b01      	subs	r3, #1
 801628e:	4543      	cmp	r3, r8
 8016290:	dcf1      	bgt.n	8016276 <_printf_float+0x3de>
 8016292:	9b04      	ldr	r3, [sp, #16]
 8016294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016298:	e6db      	b.n	8016052 <_printf_float+0x1ba>
 801629a:	f04f 0800 	mov.w	r8, #0
 801629e:	f104 091a 	add.w	r9, r4, #26
 80162a2:	e7f2      	b.n	801628a <_printf_float+0x3f2>
 80162a4:	2301      	movs	r3, #1
 80162a6:	4642      	mov	r2, r8
 80162a8:	e7df      	b.n	801626a <_printf_float+0x3d2>
 80162aa:	2301      	movs	r3, #1
 80162ac:	464a      	mov	r2, r9
 80162ae:	4631      	mov	r1, r6
 80162b0:	4628      	mov	r0, r5
 80162b2:	47b8      	blx	r7
 80162b4:	3001      	adds	r0, #1
 80162b6:	f43f ae3d 	beq.w	8015f34 <_printf_float+0x9c>
 80162ba:	f108 0801 	add.w	r8, r8, #1
 80162be:	68e3      	ldr	r3, [r4, #12]
 80162c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162c2:	1a5b      	subs	r3, r3, r1
 80162c4:	4543      	cmp	r3, r8
 80162c6:	dcf0      	bgt.n	80162aa <_printf_float+0x412>
 80162c8:	e6f7      	b.n	80160ba <_printf_float+0x222>
 80162ca:	f04f 0800 	mov.w	r8, #0
 80162ce:	f104 0919 	add.w	r9, r4, #25
 80162d2:	e7f4      	b.n	80162be <_printf_float+0x426>

080162d4 <_printf_common>:
 80162d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162d8:	4616      	mov	r6, r2
 80162da:	4699      	mov	r9, r3
 80162dc:	688a      	ldr	r2, [r1, #8]
 80162de:	690b      	ldr	r3, [r1, #16]
 80162e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162e4:	4293      	cmp	r3, r2
 80162e6:	bfb8      	it	lt
 80162e8:	4613      	movlt	r3, r2
 80162ea:	6033      	str	r3, [r6, #0]
 80162ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162f0:	4607      	mov	r7, r0
 80162f2:	460c      	mov	r4, r1
 80162f4:	b10a      	cbz	r2, 80162fa <_printf_common+0x26>
 80162f6:	3301      	adds	r3, #1
 80162f8:	6033      	str	r3, [r6, #0]
 80162fa:	6823      	ldr	r3, [r4, #0]
 80162fc:	0699      	lsls	r1, r3, #26
 80162fe:	bf42      	ittt	mi
 8016300:	6833      	ldrmi	r3, [r6, #0]
 8016302:	3302      	addmi	r3, #2
 8016304:	6033      	strmi	r3, [r6, #0]
 8016306:	6825      	ldr	r5, [r4, #0]
 8016308:	f015 0506 	ands.w	r5, r5, #6
 801630c:	d106      	bne.n	801631c <_printf_common+0x48>
 801630e:	f104 0a19 	add.w	sl, r4, #25
 8016312:	68e3      	ldr	r3, [r4, #12]
 8016314:	6832      	ldr	r2, [r6, #0]
 8016316:	1a9b      	subs	r3, r3, r2
 8016318:	42ab      	cmp	r3, r5
 801631a:	dc26      	bgt.n	801636a <_printf_common+0x96>
 801631c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016320:	1e13      	subs	r3, r2, #0
 8016322:	6822      	ldr	r2, [r4, #0]
 8016324:	bf18      	it	ne
 8016326:	2301      	movne	r3, #1
 8016328:	0692      	lsls	r2, r2, #26
 801632a:	d42b      	bmi.n	8016384 <_printf_common+0xb0>
 801632c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016330:	4649      	mov	r1, r9
 8016332:	4638      	mov	r0, r7
 8016334:	47c0      	blx	r8
 8016336:	3001      	adds	r0, #1
 8016338:	d01e      	beq.n	8016378 <_printf_common+0xa4>
 801633a:	6823      	ldr	r3, [r4, #0]
 801633c:	68e5      	ldr	r5, [r4, #12]
 801633e:	6832      	ldr	r2, [r6, #0]
 8016340:	f003 0306 	and.w	r3, r3, #6
 8016344:	2b04      	cmp	r3, #4
 8016346:	bf08      	it	eq
 8016348:	1aad      	subeq	r5, r5, r2
 801634a:	68a3      	ldr	r3, [r4, #8]
 801634c:	6922      	ldr	r2, [r4, #16]
 801634e:	bf0c      	ite	eq
 8016350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016354:	2500      	movne	r5, #0
 8016356:	4293      	cmp	r3, r2
 8016358:	bfc4      	itt	gt
 801635a:	1a9b      	subgt	r3, r3, r2
 801635c:	18ed      	addgt	r5, r5, r3
 801635e:	2600      	movs	r6, #0
 8016360:	341a      	adds	r4, #26
 8016362:	42b5      	cmp	r5, r6
 8016364:	d11a      	bne.n	801639c <_printf_common+0xc8>
 8016366:	2000      	movs	r0, #0
 8016368:	e008      	b.n	801637c <_printf_common+0xa8>
 801636a:	2301      	movs	r3, #1
 801636c:	4652      	mov	r2, sl
 801636e:	4649      	mov	r1, r9
 8016370:	4638      	mov	r0, r7
 8016372:	47c0      	blx	r8
 8016374:	3001      	adds	r0, #1
 8016376:	d103      	bne.n	8016380 <_printf_common+0xac>
 8016378:	f04f 30ff 	mov.w	r0, #4294967295
 801637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016380:	3501      	adds	r5, #1
 8016382:	e7c6      	b.n	8016312 <_printf_common+0x3e>
 8016384:	18e1      	adds	r1, r4, r3
 8016386:	1c5a      	adds	r2, r3, #1
 8016388:	2030      	movs	r0, #48	; 0x30
 801638a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801638e:	4422      	add	r2, r4
 8016390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016398:	3302      	adds	r3, #2
 801639a:	e7c7      	b.n	801632c <_printf_common+0x58>
 801639c:	2301      	movs	r3, #1
 801639e:	4622      	mov	r2, r4
 80163a0:	4649      	mov	r1, r9
 80163a2:	4638      	mov	r0, r7
 80163a4:	47c0      	blx	r8
 80163a6:	3001      	adds	r0, #1
 80163a8:	d0e6      	beq.n	8016378 <_printf_common+0xa4>
 80163aa:	3601      	adds	r6, #1
 80163ac:	e7d9      	b.n	8016362 <_printf_common+0x8e>
	...

080163b0 <_printf_i>:
 80163b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80163b4:	460c      	mov	r4, r1
 80163b6:	4691      	mov	r9, r2
 80163b8:	7e27      	ldrb	r7, [r4, #24]
 80163ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80163bc:	2f78      	cmp	r7, #120	; 0x78
 80163be:	4680      	mov	r8, r0
 80163c0:	469a      	mov	sl, r3
 80163c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163c6:	d807      	bhi.n	80163d8 <_printf_i+0x28>
 80163c8:	2f62      	cmp	r7, #98	; 0x62
 80163ca:	d80a      	bhi.n	80163e2 <_printf_i+0x32>
 80163cc:	2f00      	cmp	r7, #0
 80163ce:	f000 80d8 	beq.w	8016582 <_printf_i+0x1d2>
 80163d2:	2f58      	cmp	r7, #88	; 0x58
 80163d4:	f000 80a3 	beq.w	801651e <_printf_i+0x16e>
 80163d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80163dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80163e0:	e03a      	b.n	8016458 <_printf_i+0xa8>
 80163e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80163e6:	2b15      	cmp	r3, #21
 80163e8:	d8f6      	bhi.n	80163d8 <_printf_i+0x28>
 80163ea:	a001      	add	r0, pc, #4	; (adr r0, 80163f0 <_printf_i+0x40>)
 80163ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80163f0:	08016449 	.word	0x08016449
 80163f4:	0801645d 	.word	0x0801645d
 80163f8:	080163d9 	.word	0x080163d9
 80163fc:	080163d9 	.word	0x080163d9
 8016400:	080163d9 	.word	0x080163d9
 8016404:	080163d9 	.word	0x080163d9
 8016408:	0801645d 	.word	0x0801645d
 801640c:	080163d9 	.word	0x080163d9
 8016410:	080163d9 	.word	0x080163d9
 8016414:	080163d9 	.word	0x080163d9
 8016418:	080163d9 	.word	0x080163d9
 801641c:	08016569 	.word	0x08016569
 8016420:	0801648d 	.word	0x0801648d
 8016424:	0801654b 	.word	0x0801654b
 8016428:	080163d9 	.word	0x080163d9
 801642c:	080163d9 	.word	0x080163d9
 8016430:	0801658b 	.word	0x0801658b
 8016434:	080163d9 	.word	0x080163d9
 8016438:	0801648d 	.word	0x0801648d
 801643c:	080163d9 	.word	0x080163d9
 8016440:	080163d9 	.word	0x080163d9
 8016444:	08016553 	.word	0x08016553
 8016448:	680b      	ldr	r3, [r1, #0]
 801644a:	1d1a      	adds	r2, r3, #4
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	600a      	str	r2, [r1, #0]
 8016450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016458:	2301      	movs	r3, #1
 801645a:	e0a3      	b.n	80165a4 <_printf_i+0x1f4>
 801645c:	6825      	ldr	r5, [r4, #0]
 801645e:	6808      	ldr	r0, [r1, #0]
 8016460:	062e      	lsls	r6, r5, #24
 8016462:	f100 0304 	add.w	r3, r0, #4
 8016466:	d50a      	bpl.n	801647e <_printf_i+0xce>
 8016468:	6805      	ldr	r5, [r0, #0]
 801646a:	600b      	str	r3, [r1, #0]
 801646c:	2d00      	cmp	r5, #0
 801646e:	da03      	bge.n	8016478 <_printf_i+0xc8>
 8016470:	232d      	movs	r3, #45	; 0x2d
 8016472:	426d      	negs	r5, r5
 8016474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016478:	485e      	ldr	r0, [pc, #376]	; (80165f4 <_printf_i+0x244>)
 801647a:	230a      	movs	r3, #10
 801647c:	e019      	b.n	80164b2 <_printf_i+0x102>
 801647e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016482:	6805      	ldr	r5, [r0, #0]
 8016484:	600b      	str	r3, [r1, #0]
 8016486:	bf18      	it	ne
 8016488:	b22d      	sxthne	r5, r5
 801648a:	e7ef      	b.n	801646c <_printf_i+0xbc>
 801648c:	680b      	ldr	r3, [r1, #0]
 801648e:	6825      	ldr	r5, [r4, #0]
 8016490:	1d18      	adds	r0, r3, #4
 8016492:	6008      	str	r0, [r1, #0]
 8016494:	0628      	lsls	r0, r5, #24
 8016496:	d501      	bpl.n	801649c <_printf_i+0xec>
 8016498:	681d      	ldr	r5, [r3, #0]
 801649a:	e002      	b.n	80164a2 <_printf_i+0xf2>
 801649c:	0669      	lsls	r1, r5, #25
 801649e:	d5fb      	bpl.n	8016498 <_printf_i+0xe8>
 80164a0:	881d      	ldrh	r5, [r3, #0]
 80164a2:	4854      	ldr	r0, [pc, #336]	; (80165f4 <_printf_i+0x244>)
 80164a4:	2f6f      	cmp	r7, #111	; 0x6f
 80164a6:	bf0c      	ite	eq
 80164a8:	2308      	moveq	r3, #8
 80164aa:	230a      	movne	r3, #10
 80164ac:	2100      	movs	r1, #0
 80164ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80164b2:	6866      	ldr	r6, [r4, #4]
 80164b4:	60a6      	str	r6, [r4, #8]
 80164b6:	2e00      	cmp	r6, #0
 80164b8:	bfa2      	ittt	ge
 80164ba:	6821      	ldrge	r1, [r4, #0]
 80164bc:	f021 0104 	bicge.w	r1, r1, #4
 80164c0:	6021      	strge	r1, [r4, #0]
 80164c2:	b90d      	cbnz	r5, 80164c8 <_printf_i+0x118>
 80164c4:	2e00      	cmp	r6, #0
 80164c6:	d04d      	beq.n	8016564 <_printf_i+0x1b4>
 80164c8:	4616      	mov	r6, r2
 80164ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80164ce:	fb03 5711 	mls	r7, r3, r1, r5
 80164d2:	5dc7      	ldrb	r7, [r0, r7]
 80164d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80164d8:	462f      	mov	r7, r5
 80164da:	42bb      	cmp	r3, r7
 80164dc:	460d      	mov	r5, r1
 80164de:	d9f4      	bls.n	80164ca <_printf_i+0x11a>
 80164e0:	2b08      	cmp	r3, #8
 80164e2:	d10b      	bne.n	80164fc <_printf_i+0x14c>
 80164e4:	6823      	ldr	r3, [r4, #0]
 80164e6:	07df      	lsls	r7, r3, #31
 80164e8:	d508      	bpl.n	80164fc <_printf_i+0x14c>
 80164ea:	6923      	ldr	r3, [r4, #16]
 80164ec:	6861      	ldr	r1, [r4, #4]
 80164ee:	4299      	cmp	r1, r3
 80164f0:	bfde      	ittt	le
 80164f2:	2330      	movle	r3, #48	; 0x30
 80164f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80164f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80164fc:	1b92      	subs	r2, r2, r6
 80164fe:	6122      	str	r2, [r4, #16]
 8016500:	f8cd a000 	str.w	sl, [sp]
 8016504:	464b      	mov	r3, r9
 8016506:	aa03      	add	r2, sp, #12
 8016508:	4621      	mov	r1, r4
 801650a:	4640      	mov	r0, r8
 801650c:	f7ff fee2 	bl	80162d4 <_printf_common>
 8016510:	3001      	adds	r0, #1
 8016512:	d14c      	bne.n	80165ae <_printf_i+0x1fe>
 8016514:	f04f 30ff 	mov.w	r0, #4294967295
 8016518:	b004      	add	sp, #16
 801651a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801651e:	4835      	ldr	r0, [pc, #212]	; (80165f4 <_printf_i+0x244>)
 8016520:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016524:	6823      	ldr	r3, [r4, #0]
 8016526:	680e      	ldr	r6, [r1, #0]
 8016528:	061f      	lsls	r7, r3, #24
 801652a:	f856 5b04 	ldr.w	r5, [r6], #4
 801652e:	600e      	str	r6, [r1, #0]
 8016530:	d514      	bpl.n	801655c <_printf_i+0x1ac>
 8016532:	07d9      	lsls	r1, r3, #31
 8016534:	bf44      	itt	mi
 8016536:	f043 0320 	orrmi.w	r3, r3, #32
 801653a:	6023      	strmi	r3, [r4, #0]
 801653c:	b91d      	cbnz	r5, 8016546 <_printf_i+0x196>
 801653e:	6823      	ldr	r3, [r4, #0]
 8016540:	f023 0320 	bic.w	r3, r3, #32
 8016544:	6023      	str	r3, [r4, #0]
 8016546:	2310      	movs	r3, #16
 8016548:	e7b0      	b.n	80164ac <_printf_i+0xfc>
 801654a:	6823      	ldr	r3, [r4, #0]
 801654c:	f043 0320 	orr.w	r3, r3, #32
 8016550:	6023      	str	r3, [r4, #0]
 8016552:	2378      	movs	r3, #120	; 0x78
 8016554:	4828      	ldr	r0, [pc, #160]	; (80165f8 <_printf_i+0x248>)
 8016556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801655a:	e7e3      	b.n	8016524 <_printf_i+0x174>
 801655c:	065e      	lsls	r6, r3, #25
 801655e:	bf48      	it	mi
 8016560:	b2ad      	uxthmi	r5, r5
 8016562:	e7e6      	b.n	8016532 <_printf_i+0x182>
 8016564:	4616      	mov	r6, r2
 8016566:	e7bb      	b.n	80164e0 <_printf_i+0x130>
 8016568:	680b      	ldr	r3, [r1, #0]
 801656a:	6826      	ldr	r6, [r4, #0]
 801656c:	6960      	ldr	r0, [r4, #20]
 801656e:	1d1d      	adds	r5, r3, #4
 8016570:	600d      	str	r5, [r1, #0]
 8016572:	0635      	lsls	r5, r6, #24
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	d501      	bpl.n	801657c <_printf_i+0x1cc>
 8016578:	6018      	str	r0, [r3, #0]
 801657a:	e002      	b.n	8016582 <_printf_i+0x1d2>
 801657c:	0671      	lsls	r1, r6, #25
 801657e:	d5fb      	bpl.n	8016578 <_printf_i+0x1c8>
 8016580:	8018      	strh	r0, [r3, #0]
 8016582:	2300      	movs	r3, #0
 8016584:	6123      	str	r3, [r4, #16]
 8016586:	4616      	mov	r6, r2
 8016588:	e7ba      	b.n	8016500 <_printf_i+0x150>
 801658a:	680b      	ldr	r3, [r1, #0]
 801658c:	1d1a      	adds	r2, r3, #4
 801658e:	600a      	str	r2, [r1, #0]
 8016590:	681e      	ldr	r6, [r3, #0]
 8016592:	6862      	ldr	r2, [r4, #4]
 8016594:	2100      	movs	r1, #0
 8016596:	4630      	mov	r0, r6
 8016598:	f7e9 fe5a 	bl	8000250 <memchr>
 801659c:	b108      	cbz	r0, 80165a2 <_printf_i+0x1f2>
 801659e:	1b80      	subs	r0, r0, r6
 80165a0:	6060      	str	r0, [r4, #4]
 80165a2:	6863      	ldr	r3, [r4, #4]
 80165a4:	6123      	str	r3, [r4, #16]
 80165a6:	2300      	movs	r3, #0
 80165a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165ac:	e7a8      	b.n	8016500 <_printf_i+0x150>
 80165ae:	6923      	ldr	r3, [r4, #16]
 80165b0:	4632      	mov	r2, r6
 80165b2:	4649      	mov	r1, r9
 80165b4:	4640      	mov	r0, r8
 80165b6:	47d0      	blx	sl
 80165b8:	3001      	adds	r0, #1
 80165ba:	d0ab      	beq.n	8016514 <_printf_i+0x164>
 80165bc:	6823      	ldr	r3, [r4, #0]
 80165be:	079b      	lsls	r3, r3, #30
 80165c0:	d413      	bmi.n	80165ea <_printf_i+0x23a>
 80165c2:	68e0      	ldr	r0, [r4, #12]
 80165c4:	9b03      	ldr	r3, [sp, #12]
 80165c6:	4298      	cmp	r0, r3
 80165c8:	bfb8      	it	lt
 80165ca:	4618      	movlt	r0, r3
 80165cc:	e7a4      	b.n	8016518 <_printf_i+0x168>
 80165ce:	2301      	movs	r3, #1
 80165d0:	4632      	mov	r2, r6
 80165d2:	4649      	mov	r1, r9
 80165d4:	4640      	mov	r0, r8
 80165d6:	47d0      	blx	sl
 80165d8:	3001      	adds	r0, #1
 80165da:	d09b      	beq.n	8016514 <_printf_i+0x164>
 80165dc:	3501      	adds	r5, #1
 80165de:	68e3      	ldr	r3, [r4, #12]
 80165e0:	9903      	ldr	r1, [sp, #12]
 80165e2:	1a5b      	subs	r3, r3, r1
 80165e4:	42ab      	cmp	r3, r5
 80165e6:	dcf2      	bgt.n	80165ce <_printf_i+0x21e>
 80165e8:	e7eb      	b.n	80165c2 <_printf_i+0x212>
 80165ea:	2500      	movs	r5, #0
 80165ec:	f104 0619 	add.w	r6, r4, #25
 80165f0:	e7f5      	b.n	80165de <_printf_i+0x22e>
 80165f2:	bf00      	nop
 80165f4:	0801c746 	.word	0x0801c746
 80165f8:	0801c757 	.word	0x0801c757

080165fc <_scanf_float>:
 80165fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016600:	b087      	sub	sp, #28
 8016602:	4617      	mov	r7, r2
 8016604:	9303      	str	r3, [sp, #12]
 8016606:	688b      	ldr	r3, [r1, #8]
 8016608:	1e5a      	subs	r2, r3, #1
 801660a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801660e:	bf83      	ittte	hi
 8016610:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016614:	195b      	addhi	r3, r3, r5
 8016616:	9302      	strhi	r3, [sp, #8]
 8016618:	2300      	movls	r3, #0
 801661a:	bf86      	itte	hi
 801661c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016620:	608b      	strhi	r3, [r1, #8]
 8016622:	9302      	strls	r3, [sp, #8]
 8016624:	680b      	ldr	r3, [r1, #0]
 8016626:	468b      	mov	fp, r1
 8016628:	2500      	movs	r5, #0
 801662a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801662e:	f84b 3b1c 	str.w	r3, [fp], #28
 8016632:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016636:	4680      	mov	r8, r0
 8016638:	460c      	mov	r4, r1
 801663a:	465e      	mov	r6, fp
 801663c:	46aa      	mov	sl, r5
 801663e:	46a9      	mov	r9, r5
 8016640:	9501      	str	r5, [sp, #4]
 8016642:	68a2      	ldr	r2, [r4, #8]
 8016644:	b152      	cbz	r2, 801665c <_scanf_float+0x60>
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	2b4e      	cmp	r3, #78	; 0x4e
 801664c:	d864      	bhi.n	8016718 <_scanf_float+0x11c>
 801664e:	2b40      	cmp	r3, #64	; 0x40
 8016650:	d83c      	bhi.n	80166cc <_scanf_float+0xd0>
 8016652:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016656:	b2c8      	uxtb	r0, r1
 8016658:	280e      	cmp	r0, #14
 801665a:	d93a      	bls.n	80166d2 <_scanf_float+0xd6>
 801665c:	f1b9 0f00 	cmp.w	r9, #0
 8016660:	d003      	beq.n	801666a <_scanf_float+0x6e>
 8016662:	6823      	ldr	r3, [r4, #0]
 8016664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016668:	6023      	str	r3, [r4, #0]
 801666a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801666e:	f1ba 0f01 	cmp.w	sl, #1
 8016672:	f200 8113 	bhi.w	801689c <_scanf_float+0x2a0>
 8016676:	455e      	cmp	r6, fp
 8016678:	f200 8105 	bhi.w	8016886 <_scanf_float+0x28a>
 801667c:	2501      	movs	r5, #1
 801667e:	4628      	mov	r0, r5
 8016680:	b007      	add	sp, #28
 8016682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016686:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801668a:	2a0d      	cmp	r2, #13
 801668c:	d8e6      	bhi.n	801665c <_scanf_float+0x60>
 801668e:	a101      	add	r1, pc, #4	; (adr r1, 8016694 <_scanf_float+0x98>)
 8016690:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016694:	080167d3 	.word	0x080167d3
 8016698:	0801665d 	.word	0x0801665d
 801669c:	0801665d 	.word	0x0801665d
 80166a0:	0801665d 	.word	0x0801665d
 80166a4:	08016833 	.word	0x08016833
 80166a8:	0801680b 	.word	0x0801680b
 80166ac:	0801665d 	.word	0x0801665d
 80166b0:	0801665d 	.word	0x0801665d
 80166b4:	080167e1 	.word	0x080167e1
 80166b8:	0801665d 	.word	0x0801665d
 80166bc:	0801665d 	.word	0x0801665d
 80166c0:	0801665d 	.word	0x0801665d
 80166c4:	0801665d 	.word	0x0801665d
 80166c8:	08016799 	.word	0x08016799
 80166cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80166d0:	e7db      	b.n	801668a <_scanf_float+0x8e>
 80166d2:	290e      	cmp	r1, #14
 80166d4:	d8c2      	bhi.n	801665c <_scanf_float+0x60>
 80166d6:	a001      	add	r0, pc, #4	; (adr r0, 80166dc <_scanf_float+0xe0>)
 80166d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80166dc:	0801678b 	.word	0x0801678b
 80166e0:	0801665d 	.word	0x0801665d
 80166e4:	0801678b 	.word	0x0801678b
 80166e8:	0801681f 	.word	0x0801681f
 80166ec:	0801665d 	.word	0x0801665d
 80166f0:	08016739 	.word	0x08016739
 80166f4:	08016775 	.word	0x08016775
 80166f8:	08016775 	.word	0x08016775
 80166fc:	08016775 	.word	0x08016775
 8016700:	08016775 	.word	0x08016775
 8016704:	08016775 	.word	0x08016775
 8016708:	08016775 	.word	0x08016775
 801670c:	08016775 	.word	0x08016775
 8016710:	08016775 	.word	0x08016775
 8016714:	08016775 	.word	0x08016775
 8016718:	2b6e      	cmp	r3, #110	; 0x6e
 801671a:	d809      	bhi.n	8016730 <_scanf_float+0x134>
 801671c:	2b60      	cmp	r3, #96	; 0x60
 801671e:	d8b2      	bhi.n	8016686 <_scanf_float+0x8a>
 8016720:	2b54      	cmp	r3, #84	; 0x54
 8016722:	d077      	beq.n	8016814 <_scanf_float+0x218>
 8016724:	2b59      	cmp	r3, #89	; 0x59
 8016726:	d199      	bne.n	801665c <_scanf_float+0x60>
 8016728:	2d07      	cmp	r5, #7
 801672a:	d197      	bne.n	801665c <_scanf_float+0x60>
 801672c:	2508      	movs	r5, #8
 801672e:	e029      	b.n	8016784 <_scanf_float+0x188>
 8016730:	2b74      	cmp	r3, #116	; 0x74
 8016732:	d06f      	beq.n	8016814 <_scanf_float+0x218>
 8016734:	2b79      	cmp	r3, #121	; 0x79
 8016736:	e7f6      	b.n	8016726 <_scanf_float+0x12a>
 8016738:	6821      	ldr	r1, [r4, #0]
 801673a:	05c8      	lsls	r0, r1, #23
 801673c:	d51a      	bpl.n	8016774 <_scanf_float+0x178>
 801673e:	9b02      	ldr	r3, [sp, #8]
 8016740:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016744:	6021      	str	r1, [r4, #0]
 8016746:	f109 0901 	add.w	r9, r9, #1
 801674a:	b11b      	cbz	r3, 8016754 <_scanf_float+0x158>
 801674c:	3b01      	subs	r3, #1
 801674e:	3201      	adds	r2, #1
 8016750:	9302      	str	r3, [sp, #8]
 8016752:	60a2      	str	r2, [r4, #8]
 8016754:	68a3      	ldr	r3, [r4, #8]
 8016756:	3b01      	subs	r3, #1
 8016758:	60a3      	str	r3, [r4, #8]
 801675a:	6923      	ldr	r3, [r4, #16]
 801675c:	3301      	adds	r3, #1
 801675e:	6123      	str	r3, [r4, #16]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3b01      	subs	r3, #1
 8016764:	2b00      	cmp	r3, #0
 8016766:	607b      	str	r3, [r7, #4]
 8016768:	f340 8084 	ble.w	8016874 <_scanf_float+0x278>
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	3301      	adds	r3, #1
 8016770:	603b      	str	r3, [r7, #0]
 8016772:	e766      	b.n	8016642 <_scanf_float+0x46>
 8016774:	eb1a 0f05 	cmn.w	sl, r5
 8016778:	f47f af70 	bne.w	801665c <_scanf_float+0x60>
 801677c:	6822      	ldr	r2, [r4, #0]
 801677e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016782:	6022      	str	r2, [r4, #0]
 8016784:	f806 3b01 	strb.w	r3, [r6], #1
 8016788:	e7e4      	b.n	8016754 <_scanf_float+0x158>
 801678a:	6822      	ldr	r2, [r4, #0]
 801678c:	0610      	lsls	r0, r2, #24
 801678e:	f57f af65 	bpl.w	801665c <_scanf_float+0x60>
 8016792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016796:	e7f4      	b.n	8016782 <_scanf_float+0x186>
 8016798:	f1ba 0f00 	cmp.w	sl, #0
 801679c:	d10e      	bne.n	80167bc <_scanf_float+0x1c0>
 801679e:	f1b9 0f00 	cmp.w	r9, #0
 80167a2:	d10e      	bne.n	80167c2 <_scanf_float+0x1c6>
 80167a4:	6822      	ldr	r2, [r4, #0]
 80167a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80167aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80167ae:	d108      	bne.n	80167c2 <_scanf_float+0x1c6>
 80167b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80167b4:	6022      	str	r2, [r4, #0]
 80167b6:	f04f 0a01 	mov.w	sl, #1
 80167ba:	e7e3      	b.n	8016784 <_scanf_float+0x188>
 80167bc:	f1ba 0f02 	cmp.w	sl, #2
 80167c0:	d055      	beq.n	801686e <_scanf_float+0x272>
 80167c2:	2d01      	cmp	r5, #1
 80167c4:	d002      	beq.n	80167cc <_scanf_float+0x1d0>
 80167c6:	2d04      	cmp	r5, #4
 80167c8:	f47f af48 	bne.w	801665c <_scanf_float+0x60>
 80167cc:	3501      	adds	r5, #1
 80167ce:	b2ed      	uxtb	r5, r5
 80167d0:	e7d8      	b.n	8016784 <_scanf_float+0x188>
 80167d2:	f1ba 0f01 	cmp.w	sl, #1
 80167d6:	f47f af41 	bne.w	801665c <_scanf_float+0x60>
 80167da:	f04f 0a02 	mov.w	sl, #2
 80167de:	e7d1      	b.n	8016784 <_scanf_float+0x188>
 80167e0:	b97d      	cbnz	r5, 8016802 <_scanf_float+0x206>
 80167e2:	f1b9 0f00 	cmp.w	r9, #0
 80167e6:	f47f af3c 	bne.w	8016662 <_scanf_float+0x66>
 80167ea:	6822      	ldr	r2, [r4, #0]
 80167ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80167f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80167f4:	f47f af39 	bne.w	801666a <_scanf_float+0x6e>
 80167f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80167fc:	6022      	str	r2, [r4, #0]
 80167fe:	2501      	movs	r5, #1
 8016800:	e7c0      	b.n	8016784 <_scanf_float+0x188>
 8016802:	2d03      	cmp	r5, #3
 8016804:	d0e2      	beq.n	80167cc <_scanf_float+0x1d0>
 8016806:	2d05      	cmp	r5, #5
 8016808:	e7de      	b.n	80167c8 <_scanf_float+0x1cc>
 801680a:	2d02      	cmp	r5, #2
 801680c:	f47f af26 	bne.w	801665c <_scanf_float+0x60>
 8016810:	2503      	movs	r5, #3
 8016812:	e7b7      	b.n	8016784 <_scanf_float+0x188>
 8016814:	2d06      	cmp	r5, #6
 8016816:	f47f af21 	bne.w	801665c <_scanf_float+0x60>
 801681a:	2507      	movs	r5, #7
 801681c:	e7b2      	b.n	8016784 <_scanf_float+0x188>
 801681e:	6822      	ldr	r2, [r4, #0]
 8016820:	0591      	lsls	r1, r2, #22
 8016822:	f57f af1b 	bpl.w	801665c <_scanf_float+0x60>
 8016826:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801682a:	6022      	str	r2, [r4, #0]
 801682c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016830:	e7a8      	b.n	8016784 <_scanf_float+0x188>
 8016832:	6822      	ldr	r2, [r4, #0]
 8016834:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016838:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801683c:	d006      	beq.n	801684c <_scanf_float+0x250>
 801683e:	0550      	lsls	r0, r2, #21
 8016840:	f57f af0c 	bpl.w	801665c <_scanf_float+0x60>
 8016844:	f1b9 0f00 	cmp.w	r9, #0
 8016848:	f43f af0f 	beq.w	801666a <_scanf_float+0x6e>
 801684c:	0591      	lsls	r1, r2, #22
 801684e:	bf58      	it	pl
 8016850:	9901      	ldrpl	r1, [sp, #4]
 8016852:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016856:	bf58      	it	pl
 8016858:	eba9 0101 	subpl.w	r1, r9, r1
 801685c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016860:	bf58      	it	pl
 8016862:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016866:	6022      	str	r2, [r4, #0]
 8016868:	f04f 0900 	mov.w	r9, #0
 801686c:	e78a      	b.n	8016784 <_scanf_float+0x188>
 801686e:	f04f 0a03 	mov.w	sl, #3
 8016872:	e787      	b.n	8016784 <_scanf_float+0x188>
 8016874:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016878:	4639      	mov	r1, r7
 801687a:	4640      	mov	r0, r8
 801687c:	4798      	blx	r3
 801687e:	2800      	cmp	r0, #0
 8016880:	f43f aedf 	beq.w	8016642 <_scanf_float+0x46>
 8016884:	e6ea      	b.n	801665c <_scanf_float+0x60>
 8016886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801688a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801688e:	463a      	mov	r2, r7
 8016890:	4640      	mov	r0, r8
 8016892:	4798      	blx	r3
 8016894:	6923      	ldr	r3, [r4, #16]
 8016896:	3b01      	subs	r3, #1
 8016898:	6123      	str	r3, [r4, #16]
 801689a:	e6ec      	b.n	8016676 <_scanf_float+0x7a>
 801689c:	1e6b      	subs	r3, r5, #1
 801689e:	2b06      	cmp	r3, #6
 80168a0:	d825      	bhi.n	80168ee <_scanf_float+0x2f2>
 80168a2:	2d02      	cmp	r5, #2
 80168a4:	d836      	bhi.n	8016914 <_scanf_float+0x318>
 80168a6:	455e      	cmp	r6, fp
 80168a8:	f67f aee8 	bls.w	801667c <_scanf_float+0x80>
 80168ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80168b4:	463a      	mov	r2, r7
 80168b6:	4640      	mov	r0, r8
 80168b8:	4798      	blx	r3
 80168ba:	6923      	ldr	r3, [r4, #16]
 80168bc:	3b01      	subs	r3, #1
 80168be:	6123      	str	r3, [r4, #16]
 80168c0:	e7f1      	b.n	80168a6 <_scanf_float+0x2aa>
 80168c2:	9802      	ldr	r0, [sp, #8]
 80168c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80168cc:	9002      	str	r0, [sp, #8]
 80168ce:	463a      	mov	r2, r7
 80168d0:	4640      	mov	r0, r8
 80168d2:	4798      	blx	r3
 80168d4:	6923      	ldr	r3, [r4, #16]
 80168d6:	3b01      	subs	r3, #1
 80168d8:	6123      	str	r3, [r4, #16]
 80168da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80168de:	fa5f fa8a 	uxtb.w	sl, sl
 80168e2:	f1ba 0f02 	cmp.w	sl, #2
 80168e6:	d1ec      	bne.n	80168c2 <_scanf_float+0x2c6>
 80168e8:	3d03      	subs	r5, #3
 80168ea:	b2ed      	uxtb	r5, r5
 80168ec:	1b76      	subs	r6, r6, r5
 80168ee:	6823      	ldr	r3, [r4, #0]
 80168f0:	05da      	lsls	r2, r3, #23
 80168f2:	d52f      	bpl.n	8016954 <_scanf_float+0x358>
 80168f4:	055b      	lsls	r3, r3, #21
 80168f6:	d510      	bpl.n	801691a <_scanf_float+0x31e>
 80168f8:	455e      	cmp	r6, fp
 80168fa:	f67f aebf 	bls.w	801667c <_scanf_float+0x80>
 80168fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016906:	463a      	mov	r2, r7
 8016908:	4640      	mov	r0, r8
 801690a:	4798      	blx	r3
 801690c:	6923      	ldr	r3, [r4, #16]
 801690e:	3b01      	subs	r3, #1
 8016910:	6123      	str	r3, [r4, #16]
 8016912:	e7f1      	b.n	80168f8 <_scanf_float+0x2fc>
 8016914:	46aa      	mov	sl, r5
 8016916:	9602      	str	r6, [sp, #8]
 8016918:	e7df      	b.n	80168da <_scanf_float+0x2de>
 801691a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801691e:	6923      	ldr	r3, [r4, #16]
 8016920:	2965      	cmp	r1, #101	; 0x65
 8016922:	f103 33ff 	add.w	r3, r3, #4294967295
 8016926:	f106 35ff 	add.w	r5, r6, #4294967295
 801692a:	6123      	str	r3, [r4, #16]
 801692c:	d00c      	beq.n	8016948 <_scanf_float+0x34c>
 801692e:	2945      	cmp	r1, #69	; 0x45
 8016930:	d00a      	beq.n	8016948 <_scanf_float+0x34c>
 8016932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016936:	463a      	mov	r2, r7
 8016938:	4640      	mov	r0, r8
 801693a:	4798      	blx	r3
 801693c:	6923      	ldr	r3, [r4, #16]
 801693e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016942:	3b01      	subs	r3, #1
 8016944:	1eb5      	subs	r5, r6, #2
 8016946:	6123      	str	r3, [r4, #16]
 8016948:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801694c:	463a      	mov	r2, r7
 801694e:	4640      	mov	r0, r8
 8016950:	4798      	blx	r3
 8016952:	462e      	mov	r6, r5
 8016954:	6825      	ldr	r5, [r4, #0]
 8016956:	f015 0510 	ands.w	r5, r5, #16
 801695a:	d14d      	bne.n	80169f8 <_scanf_float+0x3fc>
 801695c:	7035      	strb	r5, [r6, #0]
 801695e:	6823      	ldr	r3, [r4, #0]
 8016960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016968:	d11a      	bne.n	80169a0 <_scanf_float+0x3a4>
 801696a:	9b01      	ldr	r3, [sp, #4]
 801696c:	454b      	cmp	r3, r9
 801696e:	eba3 0209 	sub.w	r2, r3, r9
 8016972:	d122      	bne.n	80169ba <_scanf_float+0x3be>
 8016974:	2200      	movs	r2, #0
 8016976:	4659      	mov	r1, fp
 8016978:	4640      	mov	r0, r8
 801697a:	f000 fe73 	bl	8017664 <_strtod_r>
 801697e:	9b03      	ldr	r3, [sp, #12]
 8016980:	6821      	ldr	r1, [r4, #0]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f011 0f02 	tst.w	r1, #2
 8016988:	f103 0204 	add.w	r2, r3, #4
 801698c:	d020      	beq.n	80169d0 <_scanf_float+0x3d4>
 801698e:	9903      	ldr	r1, [sp, #12]
 8016990:	600a      	str	r2, [r1, #0]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	ed83 0b00 	vstr	d0, [r3]
 8016998:	68e3      	ldr	r3, [r4, #12]
 801699a:	3301      	adds	r3, #1
 801699c:	60e3      	str	r3, [r4, #12]
 801699e:	e66e      	b.n	801667e <_scanf_float+0x82>
 80169a0:	9b04      	ldr	r3, [sp, #16]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d0e6      	beq.n	8016974 <_scanf_float+0x378>
 80169a6:	9905      	ldr	r1, [sp, #20]
 80169a8:	230a      	movs	r3, #10
 80169aa:	462a      	mov	r2, r5
 80169ac:	3101      	adds	r1, #1
 80169ae:	4640      	mov	r0, r8
 80169b0:	f000 fee2 	bl	8017778 <_strtol_r>
 80169b4:	9b04      	ldr	r3, [sp, #16]
 80169b6:	9e05      	ldr	r6, [sp, #20]
 80169b8:	1ac2      	subs	r2, r0, r3
 80169ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80169be:	429e      	cmp	r6, r3
 80169c0:	bf28      	it	cs
 80169c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80169c6:	490d      	ldr	r1, [pc, #52]	; (80169fc <_scanf_float+0x400>)
 80169c8:	4630      	mov	r0, r6
 80169ca:	f000 f839 	bl	8016a40 <siprintf>
 80169ce:	e7d1      	b.n	8016974 <_scanf_float+0x378>
 80169d0:	f011 0f04 	tst.w	r1, #4
 80169d4:	9903      	ldr	r1, [sp, #12]
 80169d6:	600a      	str	r2, [r1, #0]
 80169d8:	d1db      	bne.n	8016992 <_scanf_float+0x396>
 80169da:	eeb4 0b40 	vcmp.f64	d0, d0
 80169de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e2:	681e      	ldr	r6, [r3, #0]
 80169e4:	d705      	bvc.n	80169f2 <_scanf_float+0x3f6>
 80169e6:	4806      	ldr	r0, [pc, #24]	; (8016a00 <_scanf_float+0x404>)
 80169e8:	f000 f824 	bl	8016a34 <nanf>
 80169ec:	ed86 0a00 	vstr	s0, [r6]
 80169f0:	e7d2      	b.n	8016998 <_scanf_float+0x39c>
 80169f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80169f6:	e7f9      	b.n	80169ec <_scanf_float+0x3f0>
 80169f8:	2500      	movs	r5, #0
 80169fa:	e640      	b.n	801667e <_scanf_float+0x82>
 80169fc:	0801c768 	.word	0x0801c768
 8016a00:	0801cbe0 	.word	0x0801cbe0

08016a04 <iprintf>:
 8016a04:	b40f      	push	{r0, r1, r2, r3}
 8016a06:	4b0a      	ldr	r3, [pc, #40]	; (8016a30 <iprintf+0x2c>)
 8016a08:	b513      	push	{r0, r1, r4, lr}
 8016a0a:	681c      	ldr	r4, [r3, #0]
 8016a0c:	b124      	cbz	r4, 8016a18 <iprintf+0x14>
 8016a0e:	69a3      	ldr	r3, [r4, #24]
 8016a10:	b913      	cbnz	r3, 8016a18 <iprintf+0x14>
 8016a12:	4620      	mov	r0, r4
 8016a14:	f001 fd1a 	bl	801844c <__sinit>
 8016a18:	ab05      	add	r3, sp, #20
 8016a1a:	9a04      	ldr	r2, [sp, #16]
 8016a1c:	68a1      	ldr	r1, [r4, #8]
 8016a1e:	9301      	str	r3, [sp, #4]
 8016a20:	4620      	mov	r0, r4
 8016a22:	f003 f83d 	bl	8019aa0 <_vfiprintf_r>
 8016a26:	b002      	add	sp, #8
 8016a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a2c:	b004      	add	sp, #16
 8016a2e:	4770      	bx	lr
 8016a30:	20000254 	.word	0x20000254

08016a34 <nanf>:
 8016a34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016a3c <nanf+0x8>
 8016a38:	4770      	bx	lr
 8016a3a:	bf00      	nop
 8016a3c:	7fc00000 	.word	0x7fc00000

08016a40 <siprintf>:
 8016a40:	b40e      	push	{r1, r2, r3}
 8016a42:	b500      	push	{lr}
 8016a44:	b09c      	sub	sp, #112	; 0x70
 8016a46:	ab1d      	add	r3, sp, #116	; 0x74
 8016a48:	9002      	str	r0, [sp, #8]
 8016a4a:	9006      	str	r0, [sp, #24]
 8016a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a50:	4809      	ldr	r0, [pc, #36]	; (8016a78 <siprintf+0x38>)
 8016a52:	9107      	str	r1, [sp, #28]
 8016a54:	9104      	str	r1, [sp, #16]
 8016a56:	4909      	ldr	r1, [pc, #36]	; (8016a7c <siprintf+0x3c>)
 8016a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a5c:	9105      	str	r1, [sp, #20]
 8016a5e:	6800      	ldr	r0, [r0, #0]
 8016a60:	9301      	str	r3, [sp, #4]
 8016a62:	a902      	add	r1, sp, #8
 8016a64:	f002 fef2 	bl	801984c <_svfiprintf_r>
 8016a68:	9b02      	ldr	r3, [sp, #8]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	701a      	strb	r2, [r3, #0]
 8016a6e:	b01c      	add	sp, #112	; 0x70
 8016a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a74:	b003      	add	sp, #12
 8016a76:	4770      	bx	lr
 8016a78:	20000254 	.word	0x20000254
 8016a7c:	ffff0208 	.word	0xffff0208

08016a80 <sulp>:
 8016a80:	b570      	push	{r4, r5, r6, lr}
 8016a82:	4604      	mov	r4, r0
 8016a84:	460d      	mov	r5, r1
 8016a86:	4616      	mov	r6, r2
 8016a88:	ec45 4b10 	vmov	d0, r4, r5
 8016a8c:	f002 fc78 	bl	8019380 <__ulp>
 8016a90:	b17e      	cbz	r6, 8016ab2 <sulp+0x32>
 8016a92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016a96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	dd09      	ble.n	8016ab2 <sulp+0x32>
 8016a9e:	051b      	lsls	r3, r3, #20
 8016aa0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8016aaa:	ec41 0b17 	vmov	d7, r0, r1
 8016aae:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ab2:	bd70      	pop	{r4, r5, r6, pc}
 8016ab4:	0000      	movs	r0, r0
	...

08016ab8 <_strtod_l>:
 8016ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016abc:	ed2d 8b0c 	vpush	{d8-d13}
 8016ac0:	b09d      	sub	sp, #116	; 0x74
 8016ac2:	461f      	mov	r7, r3
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	9318      	str	r3, [sp, #96]	; 0x60
 8016ac8:	4ba6      	ldr	r3, [pc, #664]	; (8016d64 <_strtod_l+0x2ac>)
 8016aca:	9213      	str	r2, [sp, #76]	; 0x4c
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	9308      	str	r3, [sp, #32]
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	468a      	mov	sl, r1
 8016ad6:	f7e9 fbb3 	bl	8000240 <strlen>
 8016ada:	f04f 0800 	mov.w	r8, #0
 8016ade:	4605      	mov	r5, r0
 8016ae0:	f04f 0900 	mov.w	r9, #0
 8016ae4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016aea:	781a      	ldrb	r2, [r3, #0]
 8016aec:	2a2b      	cmp	r2, #43	; 0x2b
 8016aee:	d04d      	beq.n	8016b8c <_strtod_l+0xd4>
 8016af0:	d83a      	bhi.n	8016b68 <_strtod_l+0xb0>
 8016af2:	2a0d      	cmp	r2, #13
 8016af4:	d833      	bhi.n	8016b5e <_strtod_l+0xa6>
 8016af6:	2a08      	cmp	r2, #8
 8016af8:	d833      	bhi.n	8016b62 <_strtod_l+0xaa>
 8016afa:	2a00      	cmp	r2, #0
 8016afc:	d03d      	beq.n	8016b7a <_strtod_l+0xc2>
 8016afe:	2300      	movs	r3, #0
 8016b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016b04:	7833      	ldrb	r3, [r6, #0]
 8016b06:	2b30      	cmp	r3, #48	; 0x30
 8016b08:	f040 80b6 	bne.w	8016c78 <_strtod_l+0x1c0>
 8016b0c:	7873      	ldrb	r3, [r6, #1]
 8016b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016b12:	2b58      	cmp	r3, #88	; 0x58
 8016b14:	d16d      	bne.n	8016bf2 <_strtod_l+0x13a>
 8016b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b18:	9301      	str	r3, [sp, #4]
 8016b1a:	ab18      	add	r3, sp, #96	; 0x60
 8016b1c:	9702      	str	r7, [sp, #8]
 8016b1e:	9300      	str	r3, [sp, #0]
 8016b20:	4a91      	ldr	r2, [pc, #580]	; (8016d68 <_strtod_l+0x2b0>)
 8016b22:	ab19      	add	r3, sp, #100	; 0x64
 8016b24:	a917      	add	r1, sp, #92	; 0x5c
 8016b26:	4620      	mov	r0, r4
 8016b28:	f001 fd94 	bl	8018654 <__gethex>
 8016b2c:	f010 0507 	ands.w	r5, r0, #7
 8016b30:	4607      	mov	r7, r0
 8016b32:	d005      	beq.n	8016b40 <_strtod_l+0x88>
 8016b34:	2d06      	cmp	r5, #6
 8016b36:	d12b      	bne.n	8016b90 <_strtod_l+0xd8>
 8016b38:	3601      	adds	r6, #1
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8016b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	f040 856e 	bne.w	8017624 <_strtod_l+0xb6c>
 8016b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b4a:	b1e3      	cbz	r3, 8016b86 <_strtod_l+0xce>
 8016b4c:	ec49 8b17 	vmov	d7, r8, r9
 8016b50:	eeb1 0b47 	vneg.f64	d0, d7
 8016b54:	b01d      	add	sp, #116	; 0x74
 8016b56:	ecbd 8b0c 	vpop	{d8-d13}
 8016b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5e:	2a20      	cmp	r2, #32
 8016b60:	d1cd      	bne.n	8016afe <_strtod_l+0x46>
 8016b62:	3301      	adds	r3, #1
 8016b64:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b66:	e7bf      	b.n	8016ae8 <_strtod_l+0x30>
 8016b68:	2a2d      	cmp	r2, #45	; 0x2d
 8016b6a:	d1c8      	bne.n	8016afe <_strtod_l+0x46>
 8016b6c:	2201      	movs	r2, #1
 8016b6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8016b70:	1c5a      	adds	r2, r3, #1
 8016b72:	9217      	str	r2, [sp, #92]	; 0x5c
 8016b74:	785b      	ldrb	r3, [r3, #1]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d1c3      	bne.n	8016b02 <_strtod_l+0x4a>
 8016b7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b7c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	f040 854d 	bne.w	8017620 <_strtod_l+0xb68>
 8016b86:	ec49 8b10 	vmov	d0, r8, r9
 8016b8a:	e7e3      	b.n	8016b54 <_strtod_l+0x9c>
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	e7ee      	b.n	8016b6e <_strtod_l+0xb6>
 8016b90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b92:	b13a      	cbz	r2, 8016ba4 <_strtod_l+0xec>
 8016b94:	2135      	movs	r1, #53	; 0x35
 8016b96:	a81a      	add	r0, sp, #104	; 0x68
 8016b98:	f002 fcfe 	bl	8019598 <__copybits>
 8016b9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	f002 f8c2 	bl	8018d28 <_Bfree>
 8016ba4:	3d01      	subs	r5, #1
 8016ba6:	2d05      	cmp	r5, #5
 8016ba8:	d807      	bhi.n	8016bba <_strtod_l+0x102>
 8016baa:	e8df f005 	tbb	[pc, r5]
 8016bae:	0b0e      	.short	0x0b0e
 8016bb0:	030e1d18 	.word	0x030e1d18
 8016bb4:	f04f 0900 	mov.w	r9, #0
 8016bb8:	46c8      	mov	r8, r9
 8016bba:	073b      	lsls	r3, r7, #28
 8016bbc:	d5c0      	bpl.n	8016b40 <_strtod_l+0x88>
 8016bbe:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8016bc2:	e7bd      	b.n	8016b40 <_strtod_l+0x88>
 8016bc4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8016bc8:	e7f7      	b.n	8016bba <_strtod_l+0x102>
 8016bca:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8016bce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016bd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016bd4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016bd8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016bdc:	e7ed      	b.n	8016bba <_strtod_l+0x102>
 8016bde:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8016d6c <_strtod_l+0x2b4>
 8016be2:	f04f 0800 	mov.w	r8, #0
 8016be6:	e7e8      	b.n	8016bba <_strtod_l+0x102>
 8016be8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016bec:	f04f 38ff 	mov.w	r8, #4294967295
 8016bf0:	e7e3      	b.n	8016bba <_strtod_l+0x102>
 8016bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016bf4:	1c5a      	adds	r2, r3, #1
 8016bf6:	9217      	str	r2, [sp, #92]	; 0x5c
 8016bf8:	785b      	ldrb	r3, [r3, #1]
 8016bfa:	2b30      	cmp	r3, #48	; 0x30
 8016bfc:	d0f9      	beq.n	8016bf2 <_strtod_l+0x13a>
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d09e      	beq.n	8016b40 <_strtod_l+0x88>
 8016c02:	2301      	movs	r3, #1
 8016c04:	9306      	str	r3, [sp, #24]
 8016c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c08:	930c      	str	r3, [sp, #48]	; 0x30
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	9304      	str	r3, [sp, #16]
 8016c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8016c10:	461e      	mov	r6, r3
 8016c12:	220a      	movs	r2, #10
 8016c14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016c16:	f890 b000 	ldrb.w	fp, [r0]
 8016c1a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8016c1e:	b2d9      	uxtb	r1, r3
 8016c20:	2909      	cmp	r1, #9
 8016c22:	d92b      	bls.n	8016c7c <_strtod_l+0x1c4>
 8016c24:	9908      	ldr	r1, [sp, #32]
 8016c26:	462a      	mov	r2, r5
 8016c28:	f003 f8c5 	bl	8019db6 <strncmp>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d035      	beq.n	8016c9c <_strtod_l+0x1e4>
 8016c30:	2000      	movs	r0, #0
 8016c32:	465a      	mov	r2, fp
 8016c34:	4633      	mov	r3, r6
 8016c36:	4683      	mov	fp, r0
 8016c38:	4601      	mov	r1, r0
 8016c3a:	2a65      	cmp	r2, #101	; 0x65
 8016c3c:	d001      	beq.n	8016c42 <_strtod_l+0x18a>
 8016c3e:	2a45      	cmp	r2, #69	; 0x45
 8016c40:	d118      	bne.n	8016c74 <_strtod_l+0x1bc>
 8016c42:	b91b      	cbnz	r3, 8016c4c <_strtod_l+0x194>
 8016c44:	9b06      	ldr	r3, [sp, #24]
 8016c46:	4303      	orrs	r3, r0
 8016c48:	d097      	beq.n	8016b7a <_strtod_l+0xc2>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8016c50:	f10a 0201 	add.w	r2, sl, #1
 8016c54:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c56:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016c5a:	2a2b      	cmp	r2, #43	; 0x2b
 8016c5c:	d077      	beq.n	8016d4e <_strtod_l+0x296>
 8016c5e:	2a2d      	cmp	r2, #45	; 0x2d
 8016c60:	d07d      	beq.n	8016d5e <_strtod_l+0x2a6>
 8016c62:	f04f 0e00 	mov.w	lr, #0
 8016c66:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8016c6a:	2d09      	cmp	r5, #9
 8016c6c:	f240 8084 	bls.w	8016d78 <_strtod_l+0x2c0>
 8016c70:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016c74:	2500      	movs	r5, #0
 8016c76:	e09f      	b.n	8016db8 <_strtod_l+0x300>
 8016c78:	2300      	movs	r3, #0
 8016c7a:	e7c3      	b.n	8016c04 <_strtod_l+0x14c>
 8016c7c:	2e08      	cmp	r6, #8
 8016c7e:	bfd5      	itete	le
 8016c80:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8016c82:	9904      	ldrgt	r1, [sp, #16]
 8016c84:	fb02 3301 	mlale	r3, r2, r1, r3
 8016c88:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016c8c:	f100 0001 	add.w	r0, r0, #1
 8016c90:	bfd4      	ite	le
 8016c92:	930a      	strle	r3, [sp, #40]	; 0x28
 8016c94:	9304      	strgt	r3, [sp, #16]
 8016c96:	3601      	adds	r6, #1
 8016c98:	9017      	str	r0, [sp, #92]	; 0x5c
 8016c9a:	e7bb      	b.n	8016c14 <_strtod_l+0x15c>
 8016c9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c9e:	195a      	adds	r2, r3, r5
 8016ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ca2:	5d5a      	ldrb	r2, [r3, r5]
 8016ca4:	b3ae      	cbz	r6, 8016d12 <_strtod_l+0x25a>
 8016ca6:	4683      	mov	fp, r0
 8016ca8:	4633      	mov	r3, r6
 8016caa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016cae:	2909      	cmp	r1, #9
 8016cb0:	d912      	bls.n	8016cd8 <_strtod_l+0x220>
 8016cb2:	2101      	movs	r1, #1
 8016cb4:	e7c1      	b.n	8016c3a <_strtod_l+0x182>
 8016cb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cb8:	1c5a      	adds	r2, r3, #1
 8016cba:	9217      	str	r2, [sp, #92]	; 0x5c
 8016cbc:	785a      	ldrb	r2, [r3, #1]
 8016cbe:	3001      	adds	r0, #1
 8016cc0:	2a30      	cmp	r2, #48	; 0x30
 8016cc2:	d0f8      	beq.n	8016cb6 <_strtod_l+0x1fe>
 8016cc4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016cc8:	2b08      	cmp	r3, #8
 8016cca:	f200 84b0 	bhi.w	801762e <_strtod_l+0xb76>
 8016cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8016cd2:	4683      	mov	fp, r0
 8016cd4:	2000      	movs	r0, #0
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	3a30      	subs	r2, #48	; 0x30
 8016cda:	f100 0101 	add.w	r1, r0, #1
 8016cde:	d012      	beq.n	8016d06 <_strtod_l+0x24e>
 8016ce0:	448b      	add	fp, r1
 8016ce2:	eb00 0c03 	add.w	ip, r0, r3
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	250a      	movs	r5, #10
 8016cea:	4561      	cmp	r1, ip
 8016cec:	d113      	bne.n	8016d16 <_strtod_l+0x25e>
 8016cee:	1819      	adds	r1, r3, r0
 8016cf0:	2908      	cmp	r1, #8
 8016cf2:	f103 0301 	add.w	r3, r3, #1
 8016cf6:	4403      	add	r3, r0
 8016cf8:	dc1d      	bgt.n	8016d36 <_strtod_l+0x27e>
 8016cfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cfc:	210a      	movs	r1, #10
 8016cfe:	fb01 2200 	mla	r2, r1, r0, r2
 8016d02:	920a      	str	r2, [sp, #40]	; 0x28
 8016d04:	2100      	movs	r1, #0
 8016d06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d08:	1c50      	adds	r0, r2, #1
 8016d0a:	9017      	str	r0, [sp, #92]	; 0x5c
 8016d0c:	7852      	ldrb	r2, [r2, #1]
 8016d0e:	4608      	mov	r0, r1
 8016d10:	e7cb      	b.n	8016caa <_strtod_l+0x1f2>
 8016d12:	4630      	mov	r0, r6
 8016d14:	e7d4      	b.n	8016cc0 <_strtod_l+0x208>
 8016d16:	2908      	cmp	r1, #8
 8016d18:	dc04      	bgt.n	8016d24 <_strtod_l+0x26c>
 8016d1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016d1c:	436f      	muls	r7, r5
 8016d1e:	970a      	str	r7, [sp, #40]	; 0x28
 8016d20:	3101      	adds	r1, #1
 8016d22:	e7e2      	b.n	8016cea <_strtod_l+0x232>
 8016d24:	f101 0e01 	add.w	lr, r1, #1
 8016d28:	f1be 0f10 	cmp.w	lr, #16
 8016d2c:	bfde      	ittt	le
 8016d2e:	9f04      	ldrle	r7, [sp, #16]
 8016d30:	436f      	mulle	r7, r5
 8016d32:	9704      	strle	r7, [sp, #16]
 8016d34:	e7f4      	b.n	8016d20 <_strtod_l+0x268>
 8016d36:	2b10      	cmp	r3, #16
 8016d38:	bfdf      	itttt	le
 8016d3a:	9804      	ldrle	r0, [sp, #16]
 8016d3c:	210a      	movle	r1, #10
 8016d3e:	fb01 2200 	mlale	r2, r1, r0, r2
 8016d42:	9204      	strle	r2, [sp, #16]
 8016d44:	e7de      	b.n	8016d04 <_strtod_l+0x24c>
 8016d46:	f04f 0b00 	mov.w	fp, #0
 8016d4a:	2101      	movs	r1, #1
 8016d4c:	e77a      	b.n	8016c44 <_strtod_l+0x18c>
 8016d4e:	f04f 0e00 	mov.w	lr, #0
 8016d52:	f10a 0202 	add.w	r2, sl, #2
 8016d56:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d58:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8016d5c:	e783      	b.n	8016c66 <_strtod_l+0x1ae>
 8016d5e:	f04f 0e01 	mov.w	lr, #1
 8016d62:	e7f6      	b.n	8016d52 <_strtod_l+0x29a>
 8016d64:	0801ca24 	.word	0x0801ca24
 8016d68:	0801c770 	.word	0x0801c770
 8016d6c:	7ff00000 	.word	0x7ff00000
 8016d70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d72:	1c55      	adds	r5, r2, #1
 8016d74:	9517      	str	r5, [sp, #92]	; 0x5c
 8016d76:	7852      	ldrb	r2, [r2, #1]
 8016d78:	2a30      	cmp	r2, #48	; 0x30
 8016d7a:	d0f9      	beq.n	8016d70 <_strtod_l+0x2b8>
 8016d7c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8016d80:	2d08      	cmp	r5, #8
 8016d82:	f63f af77 	bhi.w	8016c74 <_strtod_l+0x1bc>
 8016d86:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8016d8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d8c:	9208      	str	r2, [sp, #32]
 8016d8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d90:	1c55      	adds	r5, r2, #1
 8016d92:	9517      	str	r5, [sp, #92]	; 0x5c
 8016d94:	7852      	ldrb	r2, [r2, #1]
 8016d96:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8016d9a:	2f09      	cmp	r7, #9
 8016d9c:	d937      	bls.n	8016e0e <_strtod_l+0x356>
 8016d9e:	9f08      	ldr	r7, [sp, #32]
 8016da0:	1bed      	subs	r5, r5, r7
 8016da2:	2d08      	cmp	r5, #8
 8016da4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016da8:	dc02      	bgt.n	8016db0 <_strtod_l+0x2f8>
 8016daa:	4565      	cmp	r5, ip
 8016dac:	bfa8      	it	ge
 8016dae:	4665      	movge	r5, ip
 8016db0:	f1be 0f00 	cmp.w	lr, #0
 8016db4:	d000      	beq.n	8016db8 <_strtod_l+0x300>
 8016db6:	426d      	negs	r5, r5
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d14f      	bne.n	8016e5c <_strtod_l+0x3a4>
 8016dbc:	9b06      	ldr	r3, [sp, #24]
 8016dbe:	4303      	orrs	r3, r0
 8016dc0:	f47f aebe 	bne.w	8016b40 <_strtod_l+0x88>
 8016dc4:	2900      	cmp	r1, #0
 8016dc6:	f47f aed8 	bne.w	8016b7a <_strtod_l+0xc2>
 8016dca:	2a69      	cmp	r2, #105	; 0x69
 8016dcc:	d027      	beq.n	8016e1e <_strtod_l+0x366>
 8016dce:	dc24      	bgt.n	8016e1a <_strtod_l+0x362>
 8016dd0:	2a49      	cmp	r2, #73	; 0x49
 8016dd2:	d024      	beq.n	8016e1e <_strtod_l+0x366>
 8016dd4:	2a4e      	cmp	r2, #78	; 0x4e
 8016dd6:	f47f aed0 	bne.w	8016b7a <_strtod_l+0xc2>
 8016dda:	499b      	ldr	r1, [pc, #620]	; (8017048 <_strtod_l+0x590>)
 8016ddc:	a817      	add	r0, sp, #92	; 0x5c
 8016dde:	f001 fe91 	bl	8018b04 <__match>
 8016de2:	2800      	cmp	r0, #0
 8016de4:	f43f aec9 	beq.w	8016b7a <_strtod_l+0xc2>
 8016de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	2b28      	cmp	r3, #40	; 0x28
 8016dee:	d12d      	bne.n	8016e4c <_strtod_l+0x394>
 8016df0:	4996      	ldr	r1, [pc, #600]	; (801704c <_strtod_l+0x594>)
 8016df2:	aa1a      	add	r2, sp, #104	; 0x68
 8016df4:	a817      	add	r0, sp, #92	; 0x5c
 8016df6:	f001 fe99 	bl	8018b2c <__hexnan>
 8016dfa:	2805      	cmp	r0, #5
 8016dfc:	d126      	bne.n	8016e4c <_strtod_l+0x394>
 8016dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016e04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016e08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016e0c:	e698      	b.n	8016b40 <_strtod_l+0x88>
 8016e0e:	250a      	movs	r5, #10
 8016e10:	fb05 250c 	mla	r5, r5, ip, r2
 8016e14:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8016e18:	e7b9      	b.n	8016d8e <_strtod_l+0x2d6>
 8016e1a:	2a6e      	cmp	r2, #110	; 0x6e
 8016e1c:	e7db      	b.n	8016dd6 <_strtod_l+0x31e>
 8016e1e:	498c      	ldr	r1, [pc, #560]	; (8017050 <_strtod_l+0x598>)
 8016e20:	a817      	add	r0, sp, #92	; 0x5c
 8016e22:	f001 fe6f 	bl	8018b04 <__match>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	f43f aea7 	beq.w	8016b7a <_strtod_l+0xc2>
 8016e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e2e:	4989      	ldr	r1, [pc, #548]	; (8017054 <_strtod_l+0x59c>)
 8016e30:	3b01      	subs	r3, #1
 8016e32:	a817      	add	r0, sp, #92	; 0x5c
 8016e34:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e36:	f001 fe65 	bl	8018b04 <__match>
 8016e3a:	b910      	cbnz	r0, 8016e42 <_strtod_l+0x38a>
 8016e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e3e:	3301      	adds	r3, #1
 8016e40:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e42:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8017068 <_strtod_l+0x5b0>
 8016e46:	f04f 0800 	mov.w	r8, #0
 8016e4a:	e679      	b.n	8016b40 <_strtod_l+0x88>
 8016e4c:	4882      	ldr	r0, [pc, #520]	; (8017058 <_strtod_l+0x5a0>)
 8016e4e:	f002 ff57 	bl	8019d00 <nan>
 8016e52:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016e56:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016e5a:	e671      	b.n	8016b40 <_strtod_l+0x88>
 8016e5c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8016e60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e64:	eba5 020b 	sub.w	r2, r5, fp
 8016e68:	2e00      	cmp	r6, #0
 8016e6a:	bf08      	it	eq
 8016e6c:	461e      	moveq	r6, r3
 8016e6e:	2b10      	cmp	r3, #16
 8016e70:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016e74:	9206      	str	r2, [sp, #24]
 8016e76:	461a      	mov	r2, r3
 8016e78:	bfa8      	it	ge
 8016e7a:	2210      	movge	r2, #16
 8016e7c:	2b09      	cmp	r3, #9
 8016e7e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8016e82:	dd0e      	ble.n	8016ea2 <_strtod_l+0x3ea>
 8016e84:	4975      	ldr	r1, [pc, #468]	; (801705c <_strtod_l+0x5a4>)
 8016e86:	eddd 7a04 	vldr	s15, [sp, #16]
 8016e8a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016e8e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8016e92:	ed9d 5b08 	vldr	d5, [sp, #32]
 8016e96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016e9a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016e9e:	ec59 8b17 	vmov	r8, r9, d7
 8016ea2:	2b0f      	cmp	r3, #15
 8016ea4:	dc37      	bgt.n	8016f16 <_strtod_l+0x45e>
 8016ea6:	9906      	ldr	r1, [sp, #24]
 8016ea8:	2900      	cmp	r1, #0
 8016eaa:	f43f ae49 	beq.w	8016b40 <_strtod_l+0x88>
 8016eae:	dd23      	ble.n	8016ef8 <_strtod_l+0x440>
 8016eb0:	2916      	cmp	r1, #22
 8016eb2:	dc0b      	bgt.n	8016ecc <_strtod_l+0x414>
 8016eb4:	4b69      	ldr	r3, [pc, #420]	; (801705c <_strtod_l+0x5a4>)
 8016eb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8016eba:	ed93 7b00 	vldr	d7, [r3]
 8016ebe:	ec49 8b16 	vmov	d6, r8, r9
 8016ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ec6:	ec59 8b17 	vmov	r8, r9, d7
 8016eca:	e639      	b.n	8016b40 <_strtod_l+0x88>
 8016ecc:	9806      	ldr	r0, [sp, #24]
 8016ece:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016ed2:	4281      	cmp	r1, r0
 8016ed4:	db1f      	blt.n	8016f16 <_strtod_l+0x45e>
 8016ed6:	4a61      	ldr	r2, [pc, #388]	; (801705c <_strtod_l+0x5a4>)
 8016ed8:	f1c3 030f 	rsb	r3, r3, #15
 8016edc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016ee0:	ed91 7b00 	vldr	d7, [r1]
 8016ee4:	ec49 8b16 	vmov	d6, r8, r9
 8016ee8:	1ac3      	subs	r3, r0, r3
 8016eea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016eee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ef2:	ed92 6b00 	vldr	d6, [r2]
 8016ef6:	e7e4      	b.n	8016ec2 <_strtod_l+0x40a>
 8016ef8:	9906      	ldr	r1, [sp, #24]
 8016efa:	3116      	adds	r1, #22
 8016efc:	db0b      	blt.n	8016f16 <_strtod_l+0x45e>
 8016efe:	4b57      	ldr	r3, [pc, #348]	; (801705c <_strtod_l+0x5a4>)
 8016f00:	ebab 0505 	sub.w	r5, fp, r5
 8016f04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016f08:	ed95 7b00 	vldr	d7, [r5]
 8016f0c:	ec49 8b16 	vmov	d6, r8, r9
 8016f10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016f14:	e7d7      	b.n	8016ec6 <_strtod_l+0x40e>
 8016f16:	9906      	ldr	r1, [sp, #24]
 8016f18:	1a9a      	subs	r2, r3, r2
 8016f1a:	440a      	add	r2, r1
 8016f1c:	2a00      	cmp	r2, #0
 8016f1e:	dd74      	ble.n	801700a <_strtod_l+0x552>
 8016f20:	f012 000f 	ands.w	r0, r2, #15
 8016f24:	d00a      	beq.n	8016f3c <_strtod_l+0x484>
 8016f26:	494d      	ldr	r1, [pc, #308]	; (801705c <_strtod_l+0x5a4>)
 8016f28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016f2c:	ed91 7b00 	vldr	d7, [r1]
 8016f30:	ec49 8b16 	vmov	d6, r8, r9
 8016f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f38:	ec59 8b17 	vmov	r8, r9, d7
 8016f3c:	f032 020f 	bics.w	r2, r2, #15
 8016f40:	d04f      	beq.n	8016fe2 <_strtod_l+0x52a>
 8016f42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016f46:	dd22      	ble.n	8016f8e <_strtod_l+0x4d6>
 8016f48:	2500      	movs	r5, #0
 8016f4a:	462e      	mov	r6, r5
 8016f4c:	950a      	str	r5, [sp, #40]	; 0x28
 8016f4e:	462f      	mov	r7, r5
 8016f50:	2322      	movs	r3, #34	; 0x22
 8016f52:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8017068 <_strtod_l+0x5b0>
 8016f56:	6023      	str	r3, [r4, #0]
 8016f58:	f04f 0800 	mov.w	r8, #0
 8016f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	f43f adee 	beq.w	8016b40 <_strtod_l+0x88>
 8016f64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016f66:	4620      	mov	r0, r4
 8016f68:	f001 fede 	bl	8018d28 <_Bfree>
 8016f6c:	4639      	mov	r1, r7
 8016f6e:	4620      	mov	r0, r4
 8016f70:	f001 feda 	bl	8018d28 <_Bfree>
 8016f74:	4631      	mov	r1, r6
 8016f76:	4620      	mov	r0, r4
 8016f78:	f001 fed6 	bl	8018d28 <_Bfree>
 8016f7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f001 fed2 	bl	8018d28 <_Bfree>
 8016f84:	4629      	mov	r1, r5
 8016f86:	4620      	mov	r0, r4
 8016f88:	f001 fece 	bl	8018d28 <_Bfree>
 8016f8c:	e5d8      	b.n	8016b40 <_strtod_l+0x88>
 8016f8e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8016f92:	2000      	movs	r0, #0
 8016f94:	4f32      	ldr	r7, [pc, #200]	; (8017060 <_strtod_l+0x5a8>)
 8016f96:	1112      	asrs	r2, r2, #4
 8016f98:	4601      	mov	r1, r0
 8016f9a:	2a01      	cmp	r2, #1
 8016f9c:	dc24      	bgt.n	8016fe8 <_strtod_l+0x530>
 8016f9e:	b108      	cbz	r0, 8016fa4 <_strtod_l+0x4ec>
 8016fa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016fa4:	4a2e      	ldr	r2, [pc, #184]	; (8017060 <_strtod_l+0x5a8>)
 8016fa6:	482f      	ldr	r0, [pc, #188]	; (8017064 <_strtod_l+0x5ac>)
 8016fa8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8016fac:	ed91 7b00 	vldr	d7, [r1]
 8016fb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016fb4:	ec49 8b16 	vmov	d6, r8, r9
 8016fb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016fc0:	9905      	ldr	r1, [sp, #20]
 8016fc2:	4a29      	ldr	r2, [pc, #164]	; (8017068 <_strtod_l+0x5b0>)
 8016fc4:	400a      	ands	r2, r1
 8016fc6:	4282      	cmp	r2, r0
 8016fc8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016fcc:	d8bc      	bhi.n	8016f48 <_strtod_l+0x490>
 8016fce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016fd2:	4282      	cmp	r2, r0
 8016fd4:	bf86      	itte	hi
 8016fd6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801706c <_strtod_l+0x5b4>
 8016fda:	f04f 38ff 	movhi.w	r8, #4294967295
 8016fde:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	9204      	str	r2, [sp, #16]
 8016fe6:	e07f      	b.n	80170e8 <_strtod_l+0x630>
 8016fe8:	f012 0f01 	tst.w	r2, #1
 8016fec:	d00a      	beq.n	8017004 <_strtod_l+0x54c>
 8016fee:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8016ff2:	ed90 7b00 	vldr	d7, [r0]
 8016ff6:	ed9d 6b04 	vldr	d6, [sp, #16]
 8016ffa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016ffe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017002:	2001      	movs	r0, #1
 8017004:	3101      	adds	r1, #1
 8017006:	1052      	asrs	r2, r2, #1
 8017008:	e7c7      	b.n	8016f9a <_strtod_l+0x4e2>
 801700a:	d0ea      	beq.n	8016fe2 <_strtod_l+0x52a>
 801700c:	4252      	negs	r2, r2
 801700e:	f012 000f 	ands.w	r0, r2, #15
 8017012:	d00a      	beq.n	801702a <_strtod_l+0x572>
 8017014:	4911      	ldr	r1, [pc, #68]	; (801705c <_strtod_l+0x5a4>)
 8017016:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801701a:	ed91 7b00 	vldr	d7, [r1]
 801701e:	ec49 8b16 	vmov	d6, r8, r9
 8017022:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017026:	ec59 8b17 	vmov	r8, r9, d7
 801702a:	1112      	asrs	r2, r2, #4
 801702c:	d0d9      	beq.n	8016fe2 <_strtod_l+0x52a>
 801702e:	2a1f      	cmp	r2, #31
 8017030:	dd1e      	ble.n	8017070 <_strtod_l+0x5b8>
 8017032:	2500      	movs	r5, #0
 8017034:	462e      	mov	r6, r5
 8017036:	950a      	str	r5, [sp, #40]	; 0x28
 8017038:	462f      	mov	r7, r5
 801703a:	2322      	movs	r3, #34	; 0x22
 801703c:	f04f 0800 	mov.w	r8, #0
 8017040:	f04f 0900 	mov.w	r9, #0
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	e789      	b.n	8016f5c <_strtod_l+0x4a4>
 8017048:	0801c741 	.word	0x0801c741
 801704c:	0801c784 	.word	0x0801c784
 8017050:	0801c739 	.word	0x0801c739
 8017054:	0801c8c4 	.word	0x0801c8c4
 8017058:	0801cbe0 	.word	0x0801cbe0
 801705c:	0801cac0 	.word	0x0801cac0
 8017060:	0801ca98 	.word	0x0801ca98
 8017064:	7ca00000 	.word	0x7ca00000
 8017068:	7ff00000 	.word	0x7ff00000
 801706c:	7fefffff 	.word	0x7fefffff
 8017070:	f012 0110 	ands.w	r1, r2, #16
 8017074:	bf18      	it	ne
 8017076:	216a      	movne	r1, #106	; 0x6a
 8017078:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801707c:	9104      	str	r1, [sp, #16]
 801707e:	49c0      	ldr	r1, [pc, #768]	; (8017380 <_strtod_l+0x8c8>)
 8017080:	2000      	movs	r0, #0
 8017082:	07d7      	lsls	r7, r2, #31
 8017084:	d508      	bpl.n	8017098 <_strtod_l+0x5e0>
 8017086:	ed9d 6b08 	vldr	d6, [sp, #32]
 801708a:	ed91 7b00 	vldr	d7, [r1]
 801708e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017092:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017096:	2001      	movs	r0, #1
 8017098:	1052      	asrs	r2, r2, #1
 801709a:	f101 0108 	add.w	r1, r1, #8
 801709e:	d1f0      	bne.n	8017082 <_strtod_l+0x5ca>
 80170a0:	b108      	cbz	r0, 80170a6 <_strtod_l+0x5ee>
 80170a2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80170a6:	9a04      	ldr	r2, [sp, #16]
 80170a8:	b1ba      	cbz	r2, 80170da <_strtod_l+0x622>
 80170aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80170ae:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80170b2:	2a00      	cmp	r2, #0
 80170b4:	4649      	mov	r1, r9
 80170b6:	dd10      	ble.n	80170da <_strtod_l+0x622>
 80170b8:	2a1f      	cmp	r2, #31
 80170ba:	f340 8132 	ble.w	8017322 <_strtod_l+0x86a>
 80170be:	2a34      	cmp	r2, #52	; 0x34
 80170c0:	bfde      	ittt	le
 80170c2:	3a20      	suble	r2, #32
 80170c4:	f04f 30ff 	movle.w	r0, #4294967295
 80170c8:	fa00 f202 	lslle.w	r2, r0, r2
 80170cc:	f04f 0800 	mov.w	r8, #0
 80170d0:	bfcc      	ite	gt
 80170d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80170d6:	ea02 0901 	andle.w	r9, r2, r1
 80170da:	ec49 8b17 	vmov	d7, r8, r9
 80170de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80170e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e6:	d0a4      	beq.n	8017032 <_strtod_l+0x57a>
 80170e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170ea:	9200      	str	r2, [sp, #0]
 80170ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80170ee:	4632      	mov	r2, r6
 80170f0:	4620      	mov	r0, r4
 80170f2:	f001 fe85 	bl	8018e00 <__s2b>
 80170f6:	900a      	str	r0, [sp, #40]	; 0x28
 80170f8:	2800      	cmp	r0, #0
 80170fa:	f43f af25 	beq.w	8016f48 <_strtod_l+0x490>
 80170fe:	9b06      	ldr	r3, [sp, #24]
 8017100:	ebab 0505 	sub.w	r5, fp, r5
 8017104:	2b00      	cmp	r3, #0
 8017106:	bfb4      	ite	lt
 8017108:	462b      	movlt	r3, r5
 801710a:	2300      	movge	r3, #0
 801710c:	930c      	str	r3, [sp, #48]	; 0x30
 801710e:	9b06      	ldr	r3, [sp, #24]
 8017110:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8017368 <_strtod_l+0x8b0>
 8017114:	ed9f ab96 	vldr	d10, [pc, #600]	; 8017370 <_strtod_l+0x8b8>
 8017118:	ed9f bb97 	vldr	d11, [pc, #604]	; 8017378 <_strtod_l+0x8c0>
 801711c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017120:	2500      	movs	r5, #0
 8017122:	9312      	str	r3, [sp, #72]	; 0x48
 8017124:	462e      	mov	r6, r5
 8017126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017128:	4620      	mov	r0, r4
 801712a:	6859      	ldr	r1, [r3, #4]
 801712c:	f001 fdbc 	bl	8018ca8 <_Balloc>
 8017130:	4607      	mov	r7, r0
 8017132:	2800      	cmp	r0, #0
 8017134:	f43f af0c 	beq.w	8016f50 <_strtod_l+0x498>
 8017138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801713a:	691a      	ldr	r2, [r3, #16]
 801713c:	3202      	adds	r2, #2
 801713e:	f103 010c 	add.w	r1, r3, #12
 8017142:	0092      	lsls	r2, r2, #2
 8017144:	300c      	adds	r0, #12
 8017146:	f7fe fe01 	bl	8015d4c <memcpy>
 801714a:	ec49 8b10 	vmov	d0, r8, r9
 801714e:	aa1a      	add	r2, sp, #104	; 0x68
 8017150:	a919      	add	r1, sp, #100	; 0x64
 8017152:	4620      	mov	r0, r4
 8017154:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8017158:	f002 f98e 	bl	8019478 <__d2b>
 801715c:	9018      	str	r0, [sp, #96]	; 0x60
 801715e:	2800      	cmp	r0, #0
 8017160:	f43f aef6 	beq.w	8016f50 <_strtod_l+0x498>
 8017164:	2101      	movs	r1, #1
 8017166:	4620      	mov	r0, r4
 8017168:	f001 fee4 	bl	8018f34 <__i2b>
 801716c:	4606      	mov	r6, r0
 801716e:	2800      	cmp	r0, #0
 8017170:	f43f aeee 	beq.w	8016f50 <_strtod_l+0x498>
 8017174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017176:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017178:	2b00      	cmp	r3, #0
 801717a:	bfab      	itete	ge
 801717c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801717e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017180:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8017184:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8017188:	bfac      	ite	ge
 801718a:	eb03 0b02 	addge.w	fp, r3, r2
 801718e:	eba2 0a03 	sublt.w	sl, r2, r3
 8017192:	9a04      	ldr	r2, [sp, #16]
 8017194:	1a9b      	subs	r3, r3, r2
 8017196:	440b      	add	r3, r1
 8017198:	4a7a      	ldr	r2, [pc, #488]	; (8017384 <_strtod_l+0x8cc>)
 801719a:	3b01      	subs	r3, #1
 801719c:	4293      	cmp	r3, r2
 801719e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80171a2:	f280 80d1 	bge.w	8017348 <_strtod_l+0x890>
 80171a6:	1ad2      	subs	r2, r2, r3
 80171a8:	2a1f      	cmp	r2, #31
 80171aa:	eba1 0102 	sub.w	r1, r1, r2
 80171ae:	f04f 0001 	mov.w	r0, #1
 80171b2:	f300 80bd 	bgt.w	8017330 <_strtod_l+0x878>
 80171b6:	fa00 f302 	lsl.w	r3, r0, r2
 80171ba:	930e      	str	r3, [sp, #56]	; 0x38
 80171bc:	2300      	movs	r3, #0
 80171be:	930d      	str	r3, [sp, #52]	; 0x34
 80171c0:	eb0b 0301 	add.w	r3, fp, r1
 80171c4:	9a04      	ldr	r2, [sp, #16]
 80171c6:	459b      	cmp	fp, r3
 80171c8:	448a      	add	sl, r1
 80171ca:	4492      	add	sl, r2
 80171cc:	465a      	mov	r2, fp
 80171ce:	bfa8      	it	ge
 80171d0:	461a      	movge	r2, r3
 80171d2:	4552      	cmp	r2, sl
 80171d4:	bfa8      	it	ge
 80171d6:	4652      	movge	r2, sl
 80171d8:	2a00      	cmp	r2, #0
 80171da:	bfc2      	ittt	gt
 80171dc:	1a9b      	subgt	r3, r3, r2
 80171de:	ebaa 0a02 	subgt.w	sl, sl, r2
 80171e2:	ebab 0b02 	subgt.w	fp, fp, r2
 80171e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171e8:	2a00      	cmp	r2, #0
 80171ea:	dd18      	ble.n	801721e <_strtod_l+0x766>
 80171ec:	4631      	mov	r1, r6
 80171ee:	4620      	mov	r0, r4
 80171f0:	9315      	str	r3, [sp, #84]	; 0x54
 80171f2:	f001 ff5b 	bl	80190ac <__pow5mult>
 80171f6:	4606      	mov	r6, r0
 80171f8:	2800      	cmp	r0, #0
 80171fa:	f43f aea9 	beq.w	8016f50 <_strtod_l+0x498>
 80171fe:	4601      	mov	r1, r0
 8017200:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017202:	4620      	mov	r0, r4
 8017204:	f001 feac 	bl	8018f60 <__multiply>
 8017208:	9014      	str	r0, [sp, #80]	; 0x50
 801720a:	2800      	cmp	r0, #0
 801720c:	f43f aea0 	beq.w	8016f50 <_strtod_l+0x498>
 8017210:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017212:	4620      	mov	r0, r4
 8017214:	f001 fd88 	bl	8018d28 <_Bfree>
 8017218:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801721a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801721c:	9218      	str	r2, [sp, #96]	; 0x60
 801721e:	2b00      	cmp	r3, #0
 8017220:	f300 8097 	bgt.w	8017352 <_strtod_l+0x89a>
 8017224:	9b06      	ldr	r3, [sp, #24]
 8017226:	2b00      	cmp	r3, #0
 8017228:	dd08      	ble.n	801723c <_strtod_l+0x784>
 801722a:	4639      	mov	r1, r7
 801722c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801722e:	4620      	mov	r0, r4
 8017230:	f001 ff3c 	bl	80190ac <__pow5mult>
 8017234:	4607      	mov	r7, r0
 8017236:	2800      	cmp	r0, #0
 8017238:	f43f ae8a 	beq.w	8016f50 <_strtod_l+0x498>
 801723c:	f1ba 0f00 	cmp.w	sl, #0
 8017240:	dd08      	ble.n	8017254 <_strtod_l+0x79c>
 8017242:	4639      	mov	r1, r7
 8017244:	4652      	mov	r2, sl
 8017246:	4620      	mov	r0, r4
 8017248:	f001 ff8a 	bl	8019160 <__lshift>
 801724c:	4607      	mov	r7, r0
 801724e:	2800      	cmp	r0, #0
 8017250:	f43f ae7e 	beq.w	8016f50 <_strtod_l+0x498>
 8017254:	f1bb 0f00 	cmp.w	fp, #0
 8017258:	dd08      	ble.n	801726c <_strtod_l+0x7b4>
 801725a:	4631      	mov	r1, r6
 801725c:	465a      	mov	r2, fp
 801725e:	4620      	mov	r0, r4
 8017260:	f001 ff7e 	bl	8019160 <__lshift>
 8017264:	4606      	mov	r6, r0
 8017266:	2800      	cmp	r0, #0
 8017268:	f43f ae72 	beq.w	8016f50 <_strtod_l+0x498>
 801726c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801726e:	463a      	mov	r2, r7
 8017270:	4620      	mov	r0, r4
 8017272:	f001 fffd 	bl	8019270 <__mdiff>
 8017276:	4605      	mov	r5, r0
 8017278:	2800      	cmp	r0, #0
 801727a:	f43f ae69 	beq.w	8016f50 <_strtod_l+0x498>
 801727e:	2300      	movs	r3, #0
 8017280:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8017284:	60c3      	str	r3, [r0, #12]
 8017286:	4631      	mov	r1, r6
 8017288:	f001 ffd6 	bl	8019238 <__mcmp>
 801728c:	2800      	cmp	r0, #0
 801728e:	da7f      	bge.n	8017390 <_strtod_l+0x8d8>
 8017290:	ea5a 0308 	orrs.w	r3, sl, r8
 8017294:	f040 80a5 	bne.w	80173e2 <_strtod_l+0x92a>
 8017298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801729c:	2b00      	cmp	r3, #0
 801729e:	f040 80a0 	bne.w	80173e2 <_strtod_l+0x92a>
 80172a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80172a6:	0d1b      	lsrs	r3, r3, #20
 80172a8:	051b      	lsls	r3, r3, #20
 80172aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80172ae:	f240 8098 	bls.w	80173e2 <_strtod_l+0x92a>
 80172b2:	696b      	ldr	r3, [r5, #20]
 80172b4:	b91b      	cbnz	r3, 80172be <_strtod_l+0x806>
 80172b6:	692b      	ldr	r3, [r5, #16]
 80172b8:	2b01      	cmp	r3, #1
 80172ba:	f340 8092 	ble.w	80173e2 <_strtod_l+0x92a>
 80172be:	4629      	mov	r1, r5
 80172c0:	2201      	movs	r2, #1
 80172c2:	4620      	mov	r0, r4
 80172c4:	f001 ff4c 	bl	8019160 <__lshift>
 80172c8:	4631      	mov	r1, r6
 80172ca:	4605      	mov	r5, r0
 80172cc:	f001 ffb4 	bl	8019238 <__mcmp>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	f340 8086 	ble.w	80173e2 <_strtod_l+0x92a>
 80172d6:	9904      	ldr	r1, [sp, #16]
 80172d8:	4a2b      	ldr	r2, [pc, #172]	; (8017388 <_strtod_l+0x8d0>)
 80172da:	464b      	mov	r3, r9
 80172dc:	2900      	cmp	r1, #0
 80172de:	f000 80a1 	beq.w	8017424 <_strtod_l+0x96c>
 80172e2:	ea02 0109 	and.w	r1, r2, r9
 80172e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80172ea:	f300 809b 	bgt.w	8017424 <_strtod_l+0x96c>
 80172ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80172f2:	f77f aea2 	ble.w	801703a <_strtod_l+0x582>
 80172f6:	4a25      	ldr	r2, [pc, #148]	; (801738c <_strtod_l+0x8d4>)
 80172f8:	2300      	movs	r3, #0
 80172fa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80172fe:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8017302:	ec49 8b17 	vmov	d7, r8, r9
 8017306:	ee27 7b06 	vmul.f64	d7, d7, d6
 801730a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801730e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017312:	4313      	orrs	r3, r2
 8017314:	bf08      	it	eq
 8017316:	2322      	moveq	r3, #34	; 0x22
 8017318:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801731c:	bf08      	it	eq
 801731e:	6023      	streq	r3, [r4, #0]
 8017320:	e620      	b.n	8016f64 <_strtod_l+0x4ac>
 8017322:	f04f 31ff 	mov.w	r1, #4294967295
 8017326:	fa01 f202 	lsl.w	r2, r1, r2
 801732a:	ea02 0808 	and.w	r8, r2, r8
 801732e:	e6d4      	b.n	80170da <_strtod_l+0x622>
 8017330:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017334:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017338:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801733c:	33e2      	adds	r3, #226	; 0xe2
 801733e:	fa00 f303 	lsl.w	r3, r0, r3
 8017342:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8017346:	e73b      	b.n	80171c0 <_strtod_l+0x708>
 8017348:	2000      	movs	r0, #0
 801734a:	2301      	movs	r3, #1
 801734c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8017350:	e736      	b.n	80171c0 <_strtod_l+0x708>
 8017352:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017354:	461a      	mov	r2, r3
 8017356:	4620      	mov	r0, r4
 8017358:	f001 ff02 	bl	8019160 <__lshift>
 801735c:	9018      	str	r0, [sp, #96]	; 0x60
 801735e:	2800      	cmp	r0, #0
 8017360:	f47f af60 	bne.w	8017224 <_strtod_l+0x76c>
 8017364:	e5f4      	b.n	8016f50 <_strtod_l+0x498>
 8017366:	bf00      	nop
 8017368:	94a03595 	.word	0x94a03595
 801736c:	3fcfffff 	.word	0x3fcfffff
 8017370:	94a03595 	.word	0x94a03595
 8017374:	3fdfffff 	.word	0x3fdfffff
 8017378:	35afe535 	.word	0x35afe535
 801737c:	3fe00000 	.word	0x3fe00000
 8017380:	0801c798 	.word	0x0801c798
 8017384:	fffffc02 	.word	0xfffffc02
 8017388:	7ff00000 	.word	0x7ff00000
 801738c:	39500000 	.word	0x39500000
 8017390:	46cb      	mov	fp, r9
 8017392:	d165      	bne.n	8017460 <_strtod_l+0x9a8>
 8017394:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017398:	f1ba 0f00 	cmp.w	sl, #0
 801739c:	d02a      	beq.n	80173f4 <_strtod_l+0x93c>
 801739e:	4aaa      	ldr	r2, [pc, #680]	; (8017648 <_strtod_l+0xb90>)
 80173a0:	4293      	cmp	r3, r2
 80173a2:	d12b      	bne.n	80173fc <_strtod_l+0x944>
 80173a4:	9b04      	ldr	r3, [sp, #16]
 80173a6:	4641      	mov	r1, r8
 80173a8:	b1fb      	cbz	r3, 80173ea <_strtod_l+0x932>
 80173aa:	4aa8      	ldr	r2, [pc, #672]	; (801764c <_strtod_l+0xb94>)
 80173ac:	ea09 0202 	and.w	r2, r9, r2
 80173b0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80173b4:	f04f 30ff 	mov.w	r0, #4294967295
 80173b8:	d81a      	bhi.n	80173f0 <_strtod_l+0x938>
 80173ba:	0d12      	lsrs	r2, r2, #20
 80173bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80173c0:	fa00 f303 	lsl.w	r3, r0, r3
 80173c4:	4299      	cmp	r1, r3
 80173c6:	d119      	bne.n	80173fc <_strtod_l+0x944>
 80173c8:	4ba1      	ldr	r3, [pc, #644]	; (8017650 <_strtod_l+0xb98>)
 80173ca:	459b      	cmp	fp, r3
 80173cc:	d102      	bne.n	80173d4 <_strtod_l+0x91c>
 80173ce:	3101      	adds	r1, #1
 80173d0:	f43f adbe 	beq.w	8016f50 <_strtod_l+0x498>
 80173d4:	4b9d      	ldr	r3, [pc, #628]	; (801764c <_strtod_l+0xb94>)
 80173d6:	ea0b 0303 	and.w	r3, fp, r3
 80173da:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80173de:	f04f 0800 	mov.w	r8, #0
 80173e2:	9b04      	ldr	r3, [sp, #16]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d186      	bne.n	80172f6 <_strtod_l+0x83e>
 80173e8:	e5bc      	b.n	8016f64 <_strtod_l+0x4ac>
 80173ea:	f04f 33ff 	mov.w	r3, #4294967295
 80173ee:	e7e9      	b.n	80173c4 <_strtod_l+0x90c>
 80173f0:	4603      	mov	r3, r0
 80173f2:	e7e7      	b.n	80173c4 <_strtod_l+0x90c>
 80173f4:	ea53 0308 	orrs.w	r3, r3, r8
 80173f8:	f43f af6d 	beq.w	80172d6 <_strtod_l+0x81e>
 80173fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173fe:	b1db      	cbz	r3, 8017438 <_strtod_l+0x980>
 8017400:	ea13 0f0b 	tst.w	r3, fp
 8017404:	d0ed      	beq.n	80173e2 <_strtod_l+0x92a>
 8017406:	9a04      	ldr	r2, [sp, #16]
 8017408:	4640      	mov	r0, r8
 801740a:	4649      	mov	r1, r9
 801740c:	f1ba 0f00 	cmp.w	sl, #0
 8017410:	d016      	beq.n	8017440 <_strtod_l+0x988>
 8017412:	f7ff fb35 	bl	8016a80 <sulp>
 8017416:	ed9d 7b08 	vldr	d7, [sp, #32]
 801741a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801741e:	ec59 8b17 	vmov	r8, r9, d7
 8017422:	e7de      	b.n	80173e2 <_strtod_l+0x92a>
 8017424:	4013      	ands	r3, r2
 8017426:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801742a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801742e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017432:	f04f 38ff 	mov.w	r8, #4294967295
 8017436:	e7d4      	b.n	80173e2 <_strtod_l+0x92a>
 8017438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801743a:	ea13 0f08 	tst.w	r3, r8
 801743e:	e7e1      	b.n	8017404 <_strtod_l+0x94c>
 8017440:	f7ff fb1e 	bl	8016a80 <sulp>
 8017444:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017448:	ee37 7b40 	vsub.f64	d7, d7, d0
 801744c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017450:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017458:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801745c:	d1c1      	bne.n	80173e2 <_strtod_l+0x92a>
 801745e:	e5ec      	b.n	801703a <_strtod_l+0x582>
 8017460:	4631      	mov	r1, r6
 8017462:	4628      	mov	r0, r5
 8017464:	f002 f864 	bl	8019530 <__ratio>
 8017468:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801746c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017474:	d867      	bhi.n	8017546 <_strtod_l+0xa8e>
 8017476:	f1ba 0f00 	cmp.w	sl, #0
 801747a:	d044      	beq.n	8017506 <_strtod_l+0xa4e>
 801747c:	4b75      	ldr	r3, [pc, #468]	; (8017654 <_strtod_l+0xb9c>)
 801747e:	2200      	movs	r2, #0
 8017480:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8017484:	4971      	ldr	r1, [pc, #452]	; (801764c <_strtod_l+0xb94>)
 8017486:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8017660 <_strtod_l+0xba8>
 801748a:	ea0b 0001 	and.w	r0, fp, r1
 801748e:	4560      	cmp	r0, ip
 8017490:	900d      	str	r0, [sp, #52]	; 0x34
 8017492:	f040 808b 	bne.w	80175ac <_strtod_l+0xaf4>
 8017496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801749a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801749e:	ec49 8b10 	vmov	d0, r8, r9
 80174a2:	ec43 2b1c 	vmov	d12, r2, r3
 80174a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80174aa:	f001 ff69 	bl	8019380 <__ulp>
 80174ae:	ec49 8b1d 	vmov	d13, r8, r9
 80174b2:	eeac db00 	vfma.f64	d13, d12, d0
 80174b6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80174ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174bc:	4963      	ldr	r1, [pc, #396]	; (801764c <_strtod_l+0xb94>)
 80174be:	4a66      	ldr	r2, [pc, #408]	; (8017658 <_strtod_l+0xba0>)
 80174c0:	4019      	ands	r1, r3
 80174c2:	4291      	cmp	r1, r2
 80174c4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80174c8:	d947      	bls.n	801755a <_strtod_l+0xaa2>
 80174ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80174d0:	4293      	cmp	r3, r2
 80174d2:	d103      	bne.n	80174dc <_strtod_l+0xa24>
 80174d4:	9b08      	ldr	r3, [sp, #32]
 80174d6:	3301      	adds	r3, #1
 80174d8:	f43f ad3a 	beq.w	8016f50 <_strtod_l+0x498>
 80174dc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8017650 <_strtod_l+0xb98>
 80174e0:	f04f 38ff 	mov.w	r8, #4294967295
 80174e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80174e6:	4620      	mov	r0, r4
 80174e8:	f001 fc1e 	bl	8018d28 <_Bfree>
 80174ec:	4639      	mov	r1, r7
 80174ee:	4620      	mov	r0, r4
 80174f0:	f001 fc1a 	bl	8018d28 <_Bfree>
 80174f4:	4631      	mov	r1, r6
 80174f6:	4620      	mov	r0, r4
 80174f8:	f001 fc16 	bl	8018d28 <_Bfree>
 80174fc:	4629      	mov	r1, r5
 80174fe:	4620      	mov	r0, r4
 8017500:	f001 fc12 	bl	8018d28 <_Bfree>
 8017504:	e60f      	b.n	8017126 <_strtod_l+0x66e>
 8017506:	f1b8 0f00 	cmp.w	r8, #0
 801750a:	d112      	bne.n	8017532 <_strtod_l+0xa7a>
 801750c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017510:	b9b3      	cbnz	r3, 8017540 <_strtod_l+0xa88>
 8017512:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8017516:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8017522:	d401      	bmi.n	8017528 <_strtod_l+0xa70>
 8017524:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017528:	eeb1 7b48 	vneg.f64	d7, d8
 801752c:	ec53 2b17 	vmov	r2, r3, d7
 8017530:	e7a8      	b.n	8017484 <_strtod_l+0x9cc>
 8017532:	f1b8 0f01 	cmp.w	r8, #1
 8017536:	d103      	bne.n	8017540 <_strtod_l+0xa88>
 8017538:	f1b9 0f00 	cmp.w	r9, #0
 801753c:	f43f ad7d 	beq.w	801703a <_strtod_l+0x582>
 8017540:	4b46      	ldr	r3, [pc, #280]	; (801765c <_strtod_l+0xba4>)
 8017542:	2200      	movs	r2, #0
 8017544:	e79c      	b.n	8017480 <_strtod_l+0x9c8>
 8017546:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801754a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801754e:	f1ba 0f00 	cmp.w	sl, #0
 8017552:	d0e9      	beq.n	8017528 <_strtod_l+0xa70>
 8017554:	ec53 2b18 	vmov	r2, r3, d8
 8017558:	e794      	b.n	8017484 <_strtod_l+0x9cc>
 801755a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801755e:	9b04      	ldr	r3, [sp, #16]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d1bf      	bne.n	80174e4 <_strtod_l+0xa2c>
 8017564:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801756a:	0d1b      	lsrs	r3, r3, #20
 801756c:	051b      	lsls	r3, r3, #20
 801756e:	429a      	cmp	r2, r3
 8017570:	d1b8      	bne.n	80174e4 <_strtod_l+0xa2c>
 8017572:	ec51 0b18 	vmov	r0, r1, d8
 8017576:	f7e9 f88f 	bl	8000698 <__aeabi_d2lz>
 801757a:	f7e9 f847 	bl	800060c <__aeabi_l2d>
 801757e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017582:	ec41 0b17 	vmov	d7, r0, r1
 8017586:	ea43 0308 	orr.w	r3, r3, r8
 801758a:	ea53 030a 	orrs.w	r3, r3, sl
 801758e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017592:	d03e      	beq.n	8017612 <_strtod_l+0xb5a>
 8017594:	eeb4 8bca 	vcmpe.f64	d8, d10
 8017598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801759c:	f53f ace2 	bmi.w	8016f64 <_strtod_l+0x4ac>
 80175a0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80175a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a8:	dd9c      	ble.n	80174e4 <_strtod_l+0xa2c>
 80175aa:	e4db      	b.n	8016f64 <_strtod_l+0x4ac>
 80175ac:	9904      	ldr	r1, [sp, #16]
 80175ae:	b301      	cbz	r1, 80175f2 <_strtod_l+0xb3a>
 80175b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80175b2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80175b6:	d81c      	bhi.n	80175f2 <_strtod_l+0xb3a>
 80175b8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017640 <_strtod_l+0xb88>
 80175bc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80175c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c4:	d811      	bhi.n	80175ea <_strtod_l+0xb32>
 80175c6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80175ca:	ee18 3a10 	vmov	r3, s16
 80175ce:	2b01      	cmp	r3, #1
 80175d0:	bf38      	it	cc
 80175d2:	2301      	movcc	r3, #1
 80175d4:	ee08 3a10 	vmov	s16, r3
 80175d8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80175dc:	f1ba 0f00 	cmp.w	sl, #0
 80175e0:	d114      	bne.n	801760c <_strtod_l+0xb54>
 80175e2:	eeb1 7b48 	vneg.f64	d7, d8
 80175e6:	ec53 2b17 	vmov	r2, r3, d7
 80175ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80175ec:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80175f0:	1a0b      	subs	r3, r1, r0
 80175f2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80175f6:	ec43 2b1c 	vmov	d12, r2, r3
 80175fa:	f001 fec1 	bl	8019380 <__ulp>
 80175fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017602:	eeac 7b00 	vfma.f64	d7, d12, d0
 8017606:	ec59 8b17 	vmov	r8, r9, d7
 801760a:	e7a8      	b.n	801755e <_strtod_l+0xaa6>
 801760c:	ec53 2b18 	vmov	r2, r3, d8
 8017610:	e7eb      	b.n	80175ea <_strtod_l+0xb32>
 8017612:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761a:	f57f af63 	bpl.w	80174e4 <_strtod_l+0xa2c>
 801761e:	e4a1      	b.n	8016f64 <_strtod_l+0x4ac>
 8017620:	2300      	movs	r3, #0
 8017622:	930b      	str	r3, [sp, #44]	; 0x2c
 8017624:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017628:	6013      	str	r3, [r2, #0]
 801762a:	f7ff ba8d 	b.w	8016b48 <_strtod_l+0x90>
 801762e:	2a65      	cmp	r2, #101	; 0x65
 8017630:	f43f ab89 	beq.w	8016d46 <_strtod_l+0x28e>
 8017634:	2a45      	cmp	r2, #69	; 0x45
 8017636:	f43f ab86 	beq.w	8016d46 <_strtod_l+0x28e>
 801763a:	2101      	movs	r1, #1
 801763c:	f7ff bbbe 	b.w	8016dbc <_strtod_l+0x304>
 8017640:	ffc00000 	.word	0xffc00000
 8017644:	41dfffff 	.word	0x41dfffff
 8017648:	000fffff 	.word	0x000fffff
 801764c:	7ff00000 	.word	0x7ff00000
 8017650:	7fefffff 	.word	0x7fefffff
 8017654:	3ff00000 	.word	0x3ff00000
 8017658:	7c9fffff 	.word	0x7c9fffff
 801765c:	bff00000 	.word	0xbff00000
 8017660:	7fe00000 	.word	0x7fe00000

08017664 <_strtod_r>:
 8017664:	4b01      	ldr	r3, [pc, #4]	; (801766c <_strtod_r+0x8>)
 8017666:	f7ff ba27 	b.w	8016ab8 <_strtod_l>
 801766a:	bf00      	nop
 801766c:	200002bc 	.word	0x200002bc

08017670 <_strtol_l.isra.0>:
 8017670:	2b01      	cmp	r3, #1
 8017672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017676:	d001      	beq.n	801767c <_strtol_l.isra.0+0xc>
 8017678:	2b24      	cmp	r3, #36	; 0x24
 801767a:	d906      	bls.n	801768a <_strtol_l.isra.0+0x1a>
 801767c:	f7fe fb3c 	bl	8015cf8 <__errno>
 8017680:	2316      	movs	r3, #22
 8017682:	6003      	str	r3, [r0, #0]
 8017684:	2000      	movs	r0, #0
 8017686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801768a:	4f3a      	ldr	r7, [pc, #232]	; (8017774 <_strtol_l.isra.0+0x104>)
 801768c:	468e      	mov	lr, r1
 801768e:	4676      	mov	r6, lr
 8017690:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017694:	5de5      	ldrb	r5, [r4, r7]
 8017696:	f015 0508 	ands.w	r5, r5, #8
 801769a:	d1f8      	bne.n	801768e <_strtol_l.isra.0+0x1e>
 801769c:	2c2d      	cmp	r4, #45	; 0x2d
 801769e:	d134      	bne.n	801770a <_strtol_l.isra.0+0x9a>
 80176a0:	f89e 4000 	ldrb.w	r4, [lr]
 80176a4:	f04f 0801 	mov.w	r8, #1
 80176a8:	f106 0e02 	add.w	lr, r6, #2
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d05c      	beq.n	801776a <_strtol_l.isra.0+0xfa>
 80176b0:	2b10      	cmp	r3, #16
 80176b2:	d10c      	bne.n	80176ce <_strtol_l.isra.0+0x5e>
 80176b4:	2c30      	cmp	r4, #48	; 0x30
 80176b6:	d10a      	bne.n	80176ce <_strtol_l.isra.0+0x5e>
 80176b8:	f89e 4000 	ldrb.w	r4, [lr]
 80176bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80176c0:	2c58      	cmp	r4, #88	; 0x58
 80176c2:	d14d      	bne.n	8017760 <_strtol_l.isra.0+0xf0>
 80176c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80176c8:	2310      	movs	r3, #16
 80176ca:	f10e 0e02 	add.w	lr, lr, #2
 80176ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80176d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80176d6:	2600      	movs	r6, #0
 80176d8:	fbbc f9f3 	udiv	r9, ip, r3
 80176dc:	4635      	mov	r5, r6
 80176de:	fb03 ca19 	mls	sl, r3, r9, ip
 80176e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80176e6:	2f09      	cmp	r7, #9
 80176e8:	d818      	bhi.n	801771c <_strtol_l.isra.0+0xac>
 80176ea:	463c      	mov	r4, r7
 80176ec:	42a3      	cmp	r3, r4
 80176ee:	dd24      	ble.n	801773a <_strtol_l.isra.0+0xca>
 80176f0:	2e00      	cmp	r6, #0
 80176f2:	db1f      	blt.n	8017734 <_strtol_l.isra.0+0xc4>
 80176f4:	45a9      	cmp	r9, r5
 80176f6:	d31d      	bcc.n	8017734 <_strtol_l.isra.0+0xc4>
 80176f8:	d101      	bne.n	80176fe <_strtol_l.isra.0+0x8e>
 80176fa:	45a2      	cmp	sl, r4
 80176fc:	db1a      	blt.n	8017734 <_strtol_l.isra.0+0xc4>
 80176fe:	fb05 4503 	mla	r5, r5, r3, r4
 8017702:	2601      	movs	r6, #1
 8017704:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017708:	e7eb      	b.n	80176e2 <_strtol_l.isra.0+0x72>
 801770a:	2c2b      	cmp	r4, #43	; 0x2b
 801770c:	bf08      	it	eq
 801770e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017712:	46a8      	mov	r8, r5
 8017714:	bf08      	it	eq
 8017716:	f106 0e02 	addeq.w	lr, r6, #2
 801771a:	e7c7      	b.n	80176ac <_strtol_l.isra.0+0x3c>
 801771c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017720:	2f19      	cmp	r7, #25
 8017722:	d801      	bhi.n	8017728 <_strtol_l.isra.0+0xb8>
 8017724:	3c37      	subs	r4, #55	; 0x37
 8017726:	e7e1      	b.n	80176ec <_strtol_l.isra.0+0x7c>
 8017728:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801772c:	2f19      	cmp	r7, #25
 801772e:	d804      	bhi.n	801773a <_strtol_l.isra.0+0xca>
 8017730:	3c57      	subs	r4, #87	; 0x57
 8017732:	e7db      	b.n	80176ec <_strtol_l.isra.0+0x7c>
 8017734:	f04f 36ff 	mov.w	r6, #4294967295
 8017738:	e7e4      	b.n	8017704 <_strtol_l.isra.0+0x94>
 801773a:	2e00      	cmp	r6, #0
 801773c:	da05      	bge.n	801774a <_strtol_l.isra.0+0xda>
 801773e:	2322      	movs	r3, #34	; 0x22
 8017740:	6003      	str	r3, [r0, #0]
 8017742:	4665      	mov	r5, ip
 8017744:	b942      	cbnz	r2, 8017758 <_strtol_l.isra.0+0xe8>
 8017746:	4628      	mov	r0, r5
 8017748:	e79d      	b.n	8017686 <_strtol_l.isra.0+0x16>
 801774a:	f1b8 0f00 	cmp.w	r8, #0
 801774e:	d000      	beq.n	8017752 <_strtol_l.isra.0+0xe2>
 8017750:	426d      	negs	r5, r5
 8017752:	2a00      	cmp	r2, #0
 8017754:	d0f7      	beq.n	8017746 <_strtol_l.isra.0+0xd6>
 8017756:	b10e      	cbz	r6, 801775c <_strtol_l.isra.0+0xec>
 8017758:	f10e 31ff 	add.w	r1, lr, #4294967295
 801775c:	6011      	str	r1, [r2, #0]
 801775e:	e7f2      	b.n	8017746 <_strtol_l.isra.0+0xd6>
 8017760:	2430      	movs	r4, #48	; 0x30
 8017762:	2b00      	cmp	r3, #0
 8017764:	d1b3      	bne.n	80176ce <_strtol_l.isra.0+0x5e>
 8017766:	2308      	movs	r3, #8
 8017768:	e7b1      	b.n	80176ce <_strtol_l.isra.0+0x5e>
 801776a:	2c30      	cmp	r4, #48	; 0x30
 801776c:	d0a4      	beq.n	80176b8 <_strtol_l.isra.0+0x48>
 801776e:	230a      	movs	r3, #10
 8017770:	e7ad      	b.n	80176ce <_strtol_l.isra.0+0x5e>
 8017772:	bf00      	nop
 8017774:	0801c7c1 	.word	0x0801c7c1

08017778 <_strtol_r>:
 8017778:	f7ff bf7a 	b.w	8017670 <_strtol_l.isra.0>

0801777c <quorem>:
 801777c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017780:	6903      	ldr	r3, [r0, #16]
 8017782:	690c      	ldr	r4, [r1, #16]
 8017784:	42a3      	cmp	r3, r4
 8017786:	4607      	mov	r7, r0
 8017788:	f2c0 8081 	blt.w	801788e <quorem+0x112>
 801778c:	3c01      	subs	r4, #1
 801778e:	f101 0814 	add.w	r8, r1, #20
 8017792:	f100 0514 	add.w	r5, r0, #20
 8017796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801779a:	9301      	str	r3, [sp, #4]
 801779c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80177a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80177a4:	3301      	adds	r3, #1
 80177a6:	429a      	cmp	r2, r3
 80177a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80177ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80177b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80177b4:	d331      	bcc.n	801781a <quorem+0x9e>
 80177b6:	f04f 0e00 	mov.w	lr, #0
 80177ba:	4640      	mov	r0, r8
 80177bc:	46ac      	mov	ip, r5
 80177be:	46f2      	mov	sl, lr
 80177c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80177c4:	b293      	uxth	r3, r2
 80177c6:	fb06 e303 	mla	r3, r6, r3, lr
 80177ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	ebaa 0303 	sub.w	r3, sl, r3
 80177d4:	0c12      	lsrs	r2, r2, #16
 80177d6:	f8dc a000 	ldr.w	sl, [ip]
 80177da:	fb06 e202 	mla	r2, r6, r2, lr
 80177de:	fa13 f38a 	uxtah	r3, r3, sl
 80177e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80177e6:	fa1f fa82 	uxth.w	sl, r2
 80177ea:	f8dc 2000 	ldr.w	r2, [ip]
 80177ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80177f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80177fc:	4581      	cmp	r9, r0
 80177fe:	f84c 3b04 	str.w	r3, [ip], #4
 8017802:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017806:	d2db      	bcs.n	80177c0 <quorem+0x44>
 8017808:	f855 300b 	ldr.w	r3, [r5, fp]
 801780c:	b92b      	cbnz	r3, 801781a <quorem+0x9e>
 801780e:	9b01      	ldr	r3, [sp, #4]
 8017810:	3b04      	subs	r3, #4
 8017812:	429d      	cmp	r5, r3
 8017814:	461a      	mov	r2, r3
 8017816:	d32e      	bcc.n	8017876 <quorem+0xfa>
 8017818:	613c      	str	r4, [r7, #16]
 801781a:	4638      	mov	r0, r7
 801781c:	f001 fd0c 	bl	8019238 <__mcmp>
 8017820:	2800      	cmp	r0, #0
 8017822:	db24      	blt.n	801786e <quorem+0xf2>
 8017824:	3601      	adds	r6, #1
 8017826:	4628      	mov	r0, r5
 8017828:	f04f 0c00 	mov.w	ip, #0
 801782c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017830:	f8d0 e000 	ldr.w	lr, [r0]
 8017834:	b293      	uxth	r3, r2
 8017836:	ebac 0303 	sub.w	r3, ip, r3
 801783a:	0c12      	lsrs	r2, r2, #16
 801783c:	fa13 f38e 	uxtah	r3, r3, lr
 8017840:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017848:	b29b      	uxth	r3, r3
 801784a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801784e:	45c1      	cmp	r9, r8
 8017850:	f840 3b04 	str.w	r3, [r0], #4
 8017854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017858:	d2e8      	bcs.n	801782c <quorem+0xb0>
 801785a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801785e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017862:	b922      	cbnz	r2, 801786e <quorem+0xf2>
 8017864:	3b04      	subs	r3, #4
 8017866:	429d      	cmp	r5, r3
 8017868:	461a      	mov	r2, r3
 801786a:	d30a      	bcc.n	8017882 <quorem+0x106>
 801786c:	613c      	str	r4, [r7, #16]
 801786e:	4630      	mov	r0, r6
 8017870:	b003      	add	sp, #12
 8017872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017876:	6812      	ldr	r2, [r2, #0]
 8017878:	3b04      	subs	r3, #4
 801787a:	2a00      	cmp	r2, #0
 801787c:	d1cc      	bne.n	8017818 <quorem+0x9c>
 801787e:	3c01      	subs	r4, #1
 8017880:	e7c7      	b.n	8017812 <quorem+0x96>
 8017882:	6812      	ldr	r2, [r2, #0]
 8017884:	3b04      	subs	r3, #4
 8017886:	2a00      	cmp	r2, #0
 8017888:	d1f0      	bne.n	801786c <quorem+0xf0>
 801788a:	3c01      	subs	r4, #1
 801788c:	e7eb      	b.n	8017866 <quorem+0xea>
 801788e:	2000      	movs	r0, #0
 8017890:	e7ee      	b.n	8017870 <quorem+0xf4>
 8017892:	0000      	movs	r0, r0
 8017894:	0000      	movs	r0, r0
	...

08017898 <_dtoa_r>:
 8017898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801789c:	ec59 8b10 	vmov	r8, r9, d0
 80178a0:	b095      	sub	sp, #84	; 0x54
 80178a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80178a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80178a6:	9107      	str	r1, [sp, #28]
 80178a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80178ac:	4606      	mov	r6, r0
 80178ae:	9209      	str	r2, [sp, #36]	; 0x24
 80178b0:	9310      	str	r3, [sp, #64]	; 0x40
 80178b2:	b975      	cbnz	r5, 80178d2 <_dtoa_r+0x3a>
 80178b4:	2010      	movs	r0, #16
 80178b6:	f001 f9dd 	bl	8018c74 <malloc>
 80178ba:	4602      	mov	r2, r0
 80178bc:	6270      	str	r0, [r6, #36]	; 0x24
 80178be:	b920      	cbnz	r0, 80178ca <_dtoa_r+0x32>
 80178c0:	4bab      	ldr	r3, [pc, #684]	; (8017b70 <_dtoa_r+0x2d8>)
 80178c2:	21ea      	movs	r1, #234	; 0xea
 80178c4:	48ab      	ldr	r0, [pc, #684]	; (8017b74 <_dtoa_r+0x2dc>)
 80178c6:	f002 fb69 	bl	8019f9c <__assert_func>
 80178ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80178ce:	6005      	str	r5, [r0, #0]
 80178d0:	60c5      	str	r5, [r0, #12]
 80178d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80178d4:	6819      	ldr	r1, [r3, #0]
 80178d6:	b151      	cbz	r1, 80178ee <_dtoa_r+0x56>
 80178d8:	685a      	ldr	r2, [r3, #4]
 80178da:	604a      	str	r2, [r1, #4]
 80178dc:	2301      	movs	r3, #1
 80178de:	4093      	lsls	r3, r2
 80178e0:	608b      	str	r3, [r1, #8]
 80178e2:	4630      	mov	r0, r6
 80178e4:	f001 fa20 	bl	8018d28 <_Bfree>
 80178e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80178ea:	2200      	movs	r2, #0
 80178ec:	601a      	str	r2, [r3, #0]
 80178ee:	f1b9 0300 	subs.w	r3, r9, #0
 80178f2:	bfbb      	ittet	lt
 80178f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80178f8:	9303      	strlt	r3, [sp, #12]
 80178fa:	2300      	movge	r3, #0
 80178fc:	2201      	movlt	r2, #1
 80178fe:	bfac      	ite	ge
 8017900:	6023      	strge	r3, [r4, #0]
 8017902:	6022      	strlt	r2, [r4, #0]
 8017904:	4b9c      	ldr	r3, [pc, #624]	; (8017b78 <_dtoa_r+0x2e0>)
 8017906:	9c03      	ldr	r4, [sp, #12]
 8017908:	43a3      	bics	r3, r4
 801790a:	d11a      	bne.n	8017942 <_dtoa_r+0xaa>
 801790c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801790e:	f242 730f 	movw	r3, #9999	; 0x270f
 8017912:	6013      	str	r3, [r2, #0]
 8017914:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017918:	ea53 0308 	orrs.w	r3, r3, r8
 801791c:	f000 8512 	beq.w	8018344 <_dtoa_r+0xaac>
 8017920:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017922:	b953      	cbnz	r3, 801793a <_dtoa_r+0xa2>
 8017924:	4b95      	ldr	r3, [pc, #596]	; (8017b7c <_dtoa_r+0x2e4>)
 8017926:	e01f      	b.n	8017968 <_dtoa_r+0xd0>
 8017928:	4b95      	ldr	r3, [pc, #596]	; (8017b80 <_dtoa_r+0x2e8>)
 801792a:	9300      	str	r3, [sp, #0]
 801792c:	3308      	adds	r3, #8
 801792e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017930:	6013      	str	r3, [r2, #0]
 8017932:	9800      	ldr	r0, [sp, #0]
 8017934:	b015      	add	sp, #84	; 0x54
 8017936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801793a:	4b90      	ldr	r3, [pc, #576]	; (8017b7c <_dtoa_r+0x2e4>)
 801793c:	9300      	str	r3, [sp, #0]
 801793e:	3303      	adds	r3, #3
 8017940:	e7f5      	b.n	801792e <_dtoa_r+0x96>
 8017942:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017946:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801794e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017952:	d10b      	bne.n	801796c <_dtoa_r+0xd4>
 8017954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017956:	2301      	movs	r3, #1
 8017958:	6013      	str	r3, [r2, #0]
 801795a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801795c:	2b00      	cmp	r3, #0
 801795e:	f000 84ee 	beq.w	801833e <_dtoa_r+0xaa6>
 8017962:	4888      	ldr	r0, [pc, #544]	; (8017b84 <_dtoa_r+0x2ec>)
 8017964:	6018      	str	r0, [r3, #0]
 8017966:	1e43      	subs	r3, r0, #1
 8017968:	9300      	str	r3, [sp, #0]
 801796a:	e7e2      	b.n	8017932 <_dtoa_r+0x9a>
 801796c:	a913      	add	r1, sp, #76	; 0x4c
 801796e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017972:	aa12      	add	r2, sp, #72	; 0x48
 8017974:	4630      	mov	r0, r6
 8017976:	f001 fd7f 	bl	8019478 <__d2b>
 801797a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801797e:	4605      	mov	r5, r0
 8017980:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017982:	2900      	cmp	r1, #0
 8017984:	d047      	beq.n	8017a16 <_dtoa_r+0x17e>
 8017986:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017988:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801798c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017990:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8017994:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017998:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801799c:	2400      	movs	r4, #0
 801799e:	ec43 2b16 	vmov	d6, r2, r3
 80179a2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80179a6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8017b58 <_dtoa_r+0x2c0>
 80179aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80179ae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8017b60 <_dtoa_r+0x2c8>
 80179b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80179b6:	eeb0 7b46 	vmov.f64	d7, d6
 80179ba:	ee06 1a90 	vmov	s13, r1
 80179be:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80179c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017b68 <_dtoa_r+0x2d0>
 80179c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80179ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80179ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80179d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d6:	ee16 ba90 	vmov	fp, s13
 80179da:	9411      	str	r4, [sp, #68]	; 0x44
 80179dc:	d508      	bpl.n	80179f0 <_dtoa_r+0x158>
 80179de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80179e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80179e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ea:	bf18      	it	ne
 80179ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80179f0:	f1bb 0f16 	cmp.w	fp, #22
 80179f4:	d832      	bhi.n	8017a5c <_dtoa_r+0x1c4>
 80179f6:	4b64      	ldr	r3, [pc, #400]	; (8017b88 <_dtoa_r+0x2f0>)
 80179f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80179fc:	ed93 7b00 	vldr	d7, [r3]
 8017a00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017a04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0c:	d501      	bpl.n	8017a12 <_dtoa_r+0x17a>
 8017a0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a12:	2300      	movs	r3, #0
 8017a14:	e023      	b.n	8017a5e <_dtoa_r+0x1c6>
 8017a16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017a18:	4401      	add	r1, r0
 8017a1a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017a1e:	2b20      	cmp	r3, #32
 8017a20:	bfc3      	ittte	gt
 8017a22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017a26:	fa04 f303 	lslgt.w	r3, r4, r3
 8017a2a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017a2e:	f1c3 0320 	rsble	r3, r3, #32
 8017a32:	bfc6      	itte	gt
 8017a34:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017a38:	ea43 0308 	orrgt.w	r3, r3, r8
 8017a3c:	fa08 f303 	lslle.w	r3, r8, r3
 8017a40:	ee07 3a90 	vmov	s15, r3
 8017a44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017a48:	3901      	subs	r1, #1
 8017a4a:	ed8d 7b00 	vstr	d7, [sp]
 8017a4e:	9c01      	ldr	r4, [sp, #4]
 8017a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a54:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017a58:	2401      	movs	r4, #1
 8017a5a:	e7a0      	b.n	801799e <_dtoa_r+0x106>
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a60:	1a43      	subs	r3, r0, r1
 8017a62:	1e5a      	subs	r2, r3, #1
 8017a64:	bf45      	ittet	mi
 8017a66:	f1c3 0301 	rsbmi	r3, r3, #1
 8017a6a:	9305      	strmi	r3, [sp, #20]
 8017a6c:	2300      	movpl	r3, #0
 8017a6e:	2300      	movmi	r3, #0
 8017a70:	9206      	str	r2, [sp, #24]
 8017a72:	bf54      	ite	pl
 8017a74:	9305      	strpl	r3, [sp, #20]
 8017a76:	9306      	strmi	r3, [sp, #24]
 8017a78:	f1bb 0f00 	cmp.w	fp, #0
 8017a7c:	db18      	blt.n	8017ab0 <_dtoa_r+0x218>
 8017a7e:	9b06      	ldr	r3, [sp, #24]
 8017a80:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017a84:	445b      	add	r3, fp
 8017a86:	9306      	str	r3, [sp, #24]
 8017a88:	2300      	movs	r3, #0
 8017a8a:	9a07      	ldr	r2, [sp, #28]
 8017a8c:	2a09      	cmp	r2, #9
 8017a8e:	d849      	bhi.n	8017b24 <_dtoa_r+0x28c>
 8017a90:	2a05      	cmp	r2, #5
 8017a92:	bfc4      	itt	gt
 8017a94:	3a04      	subgt	r2, #4
 8017a96:	9207      	strgt	r2, [sp, #28]
 8017a98:	9a07      	ldr	r2, [sp, #28]
 8017a9a:	f1a2 0202 	sub.w	r2, r2, #2
 8017a9e:	bfcc      	ite	gt
 8017aa0:	2400      	movgt	r4, #0
 8017aa2:	2401      	movle	r4, #1
 8017aa4:	2a03      	cmp	r2, #3
 8017aa6:	d848      	bhi.n	8017b3a <_dtoa_r+0x2a2>
 8017aa8:	e8df f002 	tbb	[pc, r2]
 8017aac:	3a2c2e0b 	.word	0x3a2c2e0b
 8017ab0:	9b05      	ldr	r3, [sp, #20]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	eba3 030b 	sub.w	r3, r3, fp
 8017ab8:	9305      	str	r3, [sp, #20]
 8017aba:	920e      	str	r2, [sp, #56]	; 0x38
 8017abc:	f1cb 0300 	rsb	r3, fp, #0
 8017ac0:	e7e3      	b.n	8017a8a <_dtoa_r+0x1f2>
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	9208      	str	r2, [sp, #32]
 8017ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ac8:	2a00      	cmp	r2, #0
 8017aca:	dc39      	bgt.n	8017b40 <_dtoa_r+0x2a8>
 8017acc:	f04f 0a01 	mov.w	sl, #1
 8017ad0:	46d1      	mov	r9, sl
 8017ad2:	4652      	mov	r2, sl
 8017ad4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017ad8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017ada:	2100      	movs	r1, #0
 8017adc:	6079      	str	r1, [r7, #4]
 8017ade:	2004      	movs	r0, #4
 8017ae0:	f100 0c14 	add.w	ip, r0, #20
 8017ae4:	4594      	cmp	ip, r2
 8017ae6:	6879      	ldr	r1, [r7, #4]
 8017ae8:	d92f      	bls.n	8017b4a <_dtoa_r+0x2b2>
 8017aea:	4630      	mov	r0, r6
 8017aec:	930c      	str	r3, [sp, #48]	; 0x30
 8017aee:	f001 f8db 	bl	8018ca8 <_Balloc>
 8017af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017af4:	9000      	str	r0, [sp, #0]
 8017af6:	4602      	mov	r2, r0
 8017af8:	2800      	cmp	r0, #0
 8017afa:	d149      	bne.n	8017b90 <_dtoa_r+0x2f8>
 8017afc:	4b23      	ldr	r3, [pc, #140]	; (8017b8c <_dtoa_r+0x2f4>)
 8017afe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017b02:	e6df      	b.n	80178c4 <_dtoa_r+0x2c>
 8017b04:	2201      	movs	r2, #1
 8017b06:	e7dd      	b.n	8017ac4 <_dtoa_r+0x22c>
 8017b08:	2200      	movs	r2, #0
 8017b0a:	9208      	str	r2, [sp, #32]
 8017b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b0e:	eb0b 0a02 	add.w	sl, fp, r2
 8017b12:	f10a 0901 	add.w	r9, sl, #1
 8017b16:	464a      	mov	r2, r9
 8017b18:	2a01      	cmp	r2, #1
 8017b1a:	bfb8      	it	lt
 8017b1c:	2201      	movlt	r2, #1
 8017b1e:	e7db      	b.n	8017ad8 <_dtoa_r+0x240>
 8017b20:	2201      	movs	r2, #1
 8017b22:	e7f2      	b.n	8017b0a <_dtoa_r+0x272>
 8017b24:	2401      	movs	r4, #1
 8017b26:	2200      	movs	r2, #0
 8017b28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8017b2c:	f04f 3aff 	mov.w	sl, #4294967295
 8017b30:	2100      	movs	r1, #0
 8017b32:	46d1      	mov	r9, sl
 8017b34:	2212      	movs	r2, #18
 8017b36:	9109      	str	r1, [sp, #36]	; 0x24
 8017b38:	e7ce      	b.n	8017ad8 <_dtoa_r+0x240>
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	9208      	str	r2, [sp, #32]
 8017b3e:	e7f5      	b.n	8017b2c <_dtoa_r+0x294>
 8017b40:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8017b44:	46d1      	mov	r9, sl
 8017b46:	4652      	mov	r2, sl
 8017b48:	e7c6      	b.n	8017ad8 <_dtoa_r+0x240>
 8017b4a:	3101      	adds	r1, #1
 8017b4c:	6079      	str	r1, [r7, #4]
 8017b4e:	0040      	lsls	r0, r0, #1
 8017b50:	e7c6      	b.n	8017ae0 <_dtoa_r+0x248>
 8017b52:	bf00      	nop
 8017b54:	f3af 8000 	nop.w
 8017b58:	636f4361 	.word	0x636f4361
 8017b5c:	3fd287a7 	.word	0x3fd287a7
 8017b60:	8b60c8b3 	.word	0x8b60c8b3
 8017b64:	3fc68a28 	.word	0x3fc68a28
 8017b68:	509f79fb 	.word	0x509f79fb
 8017b6c:	3fd34413 	.word	0x3fd34413
 8017b70:	0801c8ce 	.word	0x0801c8ce
 8017b74:	0801c8e5 	.word	0x0801c8e5
 8017b78:	7ff00000 	.word	0x7ff00000
 8017b7c:	0801c8ca 	.word	0x0801c8ca
 8017b80:	0801c8c1 	.word	0x0801c8c1
 8017b84:	0801c745 	.word	0x0801c745
 8017b88:	0801cac0 	.word	0x0801cac0
 8017b8c:	0801c944 	.word	0x0801c944
 8017b90:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017b92:	9900      	ldr	r1, [sp, #0]
 8017b94:	6011      	str	r1, [r2, #0]
 8017b96:	f1b9 0f0e 	cmp.w	r9, #14
 8017b9a:	d872      	bhi.n	8017c82 <_dtoa_r+0x3ea>
 8017b9c:	2c00      	cmp	r4, #0
 8017b9e:	d070      	beq.n	8017c82 <_dtoa_r+0x3ea>
 8017ba0:	f1bb 0f00 	cmp.w	fp, #0
 8017ba4:	f340 80a6 	ble.w	8017cf4 <_dtoa_r+0x45c>
 8017ba8:	49ca      	ldr	r1, [pc, #808]	; (8017ed4 <_dtoa_r+0x63c>)
 8017baa:	f00b 020f 	and.w	r2, fp, #15
 8017bae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017bb2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017bb6:	ed92 7b00 	vldr	d7, [r2]
 8017bba:	ea4f 112b 	mov.w	r1, fp, asr #4
 8017bbe:	f000 808d 	beq.w	8017cdc <_dtoa_r+0x444>
 8017bc2:	4ac5      	ldr	r2, [pc, #788]	; (8017ed8 <_dtoa_r+0x640>)
 8017bc4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8017bc8:	ed92 6b08 	vldr	d6, [r2, #32]
 8017bcc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8017bd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017bd4:	f001 010f 	and.w	r1, r1, #15
 8017bd8:	2203      	movs	r2, #3
 8017bda:	48bf      	ldr	r0, [pc, #764]	; (8017ed8 <_dtoa_r+0x640>)
 8017bdc:	2900      	cmp	r1, #0
 8017bde:	d17f      	bne.n	8017ce0 <_dtoa_r+0x448>
 8017be0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017be4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017be8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017bec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017bee:	2900      	cmp	r1, #0
 8017bf0:	f000 80b2 	beq.w	8017d58 <_dtoa_r+0x4c0>
 8017bf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017bfc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c04:	f140 80a8 	bpl.w	8017d58 <_dtoa_r+0x4c0>
 8017c08:	f1b9 0f00 	cmp.w	r9, #0
 8017c0c:	f000 80a4 	beq.w	8017d58 <_dtoa_r+0x4c0>
 8017c10:	f1ba 0f00 	cmp.w	sl, #0
 8017c14:	dd31      	ble.n	8017c7a <_dtoa_r+0x3e2>
 8017c16:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017c1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017c26:	3201      	adds	r2, #1
 8017c28:	4650      	mov	r0, sl
 8017c2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017c2e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8017c32:	ee07 2a90 	vmov	s15, r2
 8017c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017c3e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8017c42:	9c03      	ldr	r4, [sp, #12]
 8017c44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017c48:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	f040 8086 	bne.w	8017d5e <_dtoa_r+0x4c6>
 8017c52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017c56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017c5a:	ec42 1b17 	vmov	d7, r1, r2
 8017c5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c66:	f300 8272 	bgt.w	801814e <_dtoa_r+0x8b6>
 8017c6a:	eeb1 7b47 	vneg.f64	d7, d7
 8017c6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c76:	f100 8267 	bmi.w	8018148 <_dtoa_r+0x8b0>
 8017c7a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017c7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017c82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c84:	2a00      	cmp	r2, #0
 8017c86:	f2c0 8129 	blt.w	8017edc <_dtoa_r+0x644>
 8017c8a:	f1bb 0f0e 	cmp.w	fp, #14
 8017c8e:	f300 8125 	bgt.w	8017edc <_dtoa_r+0x644>
 8017c92:	4b90      	ldr	r3, [pc, #576]	; (8017ed4 <_dtoa_r+0x63c>)
 8017c94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017c98:	ed93 6b00 	vldr	d6, [r3]
 8017c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	f280 80c3 	bge.w	8017e2a <_dtoa_r+0x592>
 8017ca4:	f1b9 0f00 	cmp.w	r9, #0
 8017ca8:	f300 80bf 	bgt.w	8017e2a <_dtoa_r+0x592>
 8017cac:	f040 824c 	bne.w	8018148 <_dtoa_r+0x8b0>
 8017cb0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017cb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017cbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc4:	464c      	mov	r4, r9
 8017cc6:	464f      	mov	r7, r9
 8017cc8:	f280 8222 	bge.w	8018110 <_dtoa_r+0x878>
 8017ccc:	f8dd 8000 	ldr.w	r8, [sp]
 8017cd0:	2331      	movs	r3, #49	; 0x31
 8017cd2:	f808 3b01 	strb.w	r3, [r8], #1
 8017cd6:	f10b 0b01 	add.w	fp, fp, #1
 8017cda:	e21e      	b.n	801811a <_dtoa_r+0x882>
 8017cdc:	2202      	movs	r2, #2
 8017cde:	e77c      	b.n	8017bda <_dtoa_r+0x342>
 8017ce0:	07cc      	lsls	r4, r1, #31
 8017ce2:	d504      	bpl.n	8017cee <_dtoa_r+0x456>
 8017ce4:	ed90 6b00 	vldr	d6, [r0]
 8017ce8:	3201      	adds	r2, #1
 8017cea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017cee:	1049      	asrs	r1, r1, #1
 8017cf0:	3008      	adds	r0, #8
 8017cf2:	e773      	b.n	8017bdc <_dtoa_r+0x344>
 8017cf4:	d02e      	beq.n	8017d54 <_dtoa_r+0x4bc>
 8017cf6:	f1cb 0100 	rsb	r1, fp, #0
 8017cfa:	4a76      	ldr	r2, [pc, #472]	; (8017ed4 <_dtoa_r+0x63c>)
 8017cfc:	f001 000f 	and.w	r0, r1, #15
 8017d00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017d04:	ed92 7b00 	vldr	d7, [r2]
 8017d08:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017d10:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017d14:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8017d18:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017d1c:	486e      	ldr	r0, [pc, #440]	; (8017ed8 <_dtoa_r+0x640>)
 8017d1e:	1109      	asrs	r1, r1, #4
 8017d20:	2400      	movs	r4, #0
 8017d22:	2202      	movs	r2, #2
 8017d24:	b939      	cbnz	r1, 8017d36 <_dtoa_r+0x49e>
 8017d26:	2c00      	cmp	r4, #0
 8017d28:	f43f af60 	beq.w	8017bec <_dtoa_r+0x354>
 8017d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d34:	e75a      	b.n	8017bec <_dtoa_r+0x354>
 8017d36:	07cf      	lsls	r7, r1, #31
 8017d38:	d509      	bpl.n	8017d4e <_dtoa_r+0x4b6>
 8017d3a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8017d3e:	ed90 7b00 	vldr	d7, [r0]
 8017d42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017d46:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017d4a:	3201      	adds	r2, #1
 8017d4c:	2401      	movs	r4, #1
 8017d4e:	1049      	asrs	r1, r1, #1
 8017d50:	3008      	adds	r0, #8
 8017d52:	e7e7      	b.n	8017d24 <_dtoa_r+0x48c>
 8017d54:	2202      	movs	r2, #2
 8017d56:	e749      	b.n	8017bec <_dtoa_r+0x354>
 8017d58:	465f      	mov	r7, fp
 8017d5a:	4648      	mov	r0, r9
 8017d5c:	e765      	b.n	8017c2a <_dtoa_r+0x392>
 8017d5e:	ec42 1b17 	vmov	d7, r1, r2
 8017d62:	4a5c      	ldr	r2, [pc, #368]	; (8017ed4 <_dtoa_r+0x63c>)
 8017d64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017d68:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017d6c:	9a00      	ldr	r2, [sp, #0]
 8017d6e:	1814      	adds	r4, r2, r0
 8017d70:	9a08      	ldr	r2, [sp, #32]
 8017d72:	b352      	cbz	r2, 8017dca <_dtoa_r+0x532>
 8017d74:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017d78:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017d7c:	f8dd 8000 	ldr.w	r8, [sp]
 8017d80:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017d84:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017d88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017d8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017d90:	ee14 2a90 	vmov	r2, s9
 8017d94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017d98:	3230      	adds	r2, #48	; 0x30
 8017d9a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017d9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017da6:	f808 2b01 	strb.w	r2, [r8], #1
 8017daa:	d439      	bmi.n	8017e20 <_dtoa_r+0x588>
 8017dac:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017db0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db8:	d472      	bmi.n	8017ea0 <_dtoa_r+0x608>
 8017dba:	45a0      	cmp	r8, r4
 8017dbc:	f43f af5d 	beq.w	8017c7a <_dtoa_r+0x3e2>
 8017dc0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017dc4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017dc8:	e7e0      	b.n	8017d8c <_dtoa_r+0x4f4>
 8017dca:	f8dd 8000 	ldr.w	r8, [sp]
 8017dce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017dd2:	4621      	mov	r1, r4
 8017dd4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017dd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017ddc:	ee14 2a90 	vmov	r2, s9
 8017de0:	3230      	adds	r2, #48	; 0x30
 8017de2:	f808 2b01 	strb.w	r2, [r8], #1
 8017de6:	45a0      	cmp	r8, r4
 8017de8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017dec:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017df0:	d118      	bne.n	8017e24 <_dtoa_r+0x58c>
 8017df2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8017df6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017dfa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e02:	dc4d      	bgt.n	8017ea0 <_dtoa_r+0x608>
 8017e04:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017e08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e10:	f57f af33 	bpl.w	8017c7a <_dtoa_r+0x3e2>
 8017e14:	4688      	mov	r8, r1
 8017e16:	3901      	subs	r1, #1
 8017e18:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017e1c:	2b30      	cmp	r3, #48	; 0x30
 8017e1e:	d0f9      	beq.n	8017e14 <_dtoa_r+0x57c>
 8017e20:	46bb      	mov	fp, r7
 8017e22:	e02a      	b.n	8017e7a <_dtoa_r+0x5e2>
 8017e24:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017e28:	e7d6      	b.n	8017dd8 <_dtoa_r+0x540>
 8017e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e2e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017e32:	f8dd 8000 	ldr.w	r8, [sp]
 8017e36:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017e3a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017e3e:	ee15 3a10 	vmov	r3, s10
 8017e42:	3330      	adds	r3, #48	; 0x30
 8017e44:	f808 3b01 	strb.w	r3, [r8], #1
 8017e48:	9b00      	ldr	r3, [sp, #0]
 8017e4a:	eba8 0303 	sub.w	r3, r8, r3
 8017e4e:	4599      	cmp	r9, r3
 8017e50:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017e54:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017e58:	d133      	bne.n	8017ec2 <_dtoa_r+0x62a>
 8017e5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017e5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e66:	dc1a      	bgt.n	8017e9e <_dtoa_r+0x606>
 8017e68:	eeb4 7b46 	vcmp.f64	d7, d6
 8017e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e70:	d103      	bne.n	8017e7a <_dtoa_r+0x5e2>
 8017e72:	ee15 3a10 	vmov	r3, s10
 8017e76:	07d9      	lsls	r1, r3, #31
 8017e78:	d411      	bmi.n	8017e9e <_dtoa_r+0x606>
 8017e7a:	4629      	mov	r1, r5
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	f000 ff53 	bl	8018d28 <_Bfree>
 8017e82:	2300      	movs	r3, #0
 8017e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017e86:	f888 3000 	strb.w	r3, [r8]
 8017e8a:	f10b 0301 	add.w	r3, fp, #1
 8017e8e:	6013      	str	r3, [r2, #0]
 8017e90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	f43f ad4d 	beq.w	8017932 <_dtoa_r+0x9a>
 8017e98:	f8c3 8000 	str.w	r8, [r3]
 8017e9c:	e549      	b.n	8017932 <_dtoa_r+0x9a>
 8017e9e:	465f      	mov	r7, fp
 8017ea0:	4643      	mov	r3, r8
 8017ea2:	4698      	mov	r8, r3
 8017ea4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017ea8:	2a39      	cmp	r2, #57	; 0x39
 8017eaa:	d106      	bne.n	8017eba <_dtoa_r+0x622>
 8017eac:	9a00      	ldr	r2, [sp, #0]
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d1f7      	bne.n	8017ea2 <_dtoa_r+0x60a>
 8017eb2:	9900      	ldr	r1, [sp, #0]
 8017eb4:	2230      	movs	r2, #48	; 0x30
 8017eb6:	3701      	adds	r7, #1
 8017eb8:	700a      	strb	r2, [r1, #0]
 8017eba:	781a      	ldrb	r2, [r3, #0]
 8017ebc:	3201      	adds	r2, #1
 8017ebe:	701a      	strb	r2, [r3, #0]
 8017ec0:	e7ae      	b.n	8017e20 <_dtoa_r+0x588>
 8017ec2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017ec6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ece:	d1b2      	bne.n	8017e36 <_dtoa_r+0x59e>
 8017ed0:	e7d3      	b.n	8017e7a <_dtoa_r+0x5e2>
 8017ed2:	bf00      	nop
 8017ed4:	0801cac0 	.word	0x0801cac0
 8017ed8:	0801ca98 	.word	0x0801ca98
 8017edc:	9908      	ldr	r1, [sp, #32]
 8017ede:	2900      	cmp	r1, #0
 8017ee0:	f000 80d1 	beq.w	8018086 <_dtoa_r+0x7ee>
 8017ee4:	9907      	ldr	r1, [sp, #28]
 8017ee6:	2901      	cmp	r1, #1
 8017ee8:	f300 80b4 	bgt.w	8018054 <_dtoa_r+0x7bc>
 8017eec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017eee:	2900      	cmp	r1, #0
 8017ef0:	f000 80ac 	beq.w	801804c <_dtoa_r+0x7b4>
 8017ef4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017ef8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017efc:	461c      	mov	r4, r3
 8017efe:	930a      	str	r3, [sp, #40]	; 0x28
 8017f00:	9b05      	ldr	r3, [sp, #20]
 8017f02:	4413      	add	r3, r2
 8017f04:	9305      	str	r3, [sp, #20]
 8017f06:	9b06      	ldr	r3, [sp, #24]
 8017f08:	2101      	movs	r1, #1
 8017f0a:	4413      	add	r3, r2
 8017f0c:	4630      	mov	r0, r6
 8017f0e:	9306      	str	r3, [sp, #24]
 8017f10:	f001 f810 	bl	8018f34 <__i2b>
 8017f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f16:	4607      	mov	r7, r0
 8017f18:	f1b8 0f00 	cmp.w	r8, #0
 8017f1c:	dd0d      	ble.n	8017f3a <_dtoa_r+0x6a2>
 8017f1e:	9a06      	ldr	r2, [sp, #24]
 8017f20:	2a00      	cmp	r2, #0
 8017f22:	dd0a      	ble.n	8017f3a <_dtoa_r+0x6a2>
 8017f24:	4542      	cmp	r2, r8
 8017f26:	9905      	ldr	r1, [sp, #20]
 8017f28:	bfa8      	it	ge
 8017f2a:	4642      	movge	r2, r8
 8017f2c:	1a89      	subs	r1, r1, r2
 8017f2e:	9105      	str	r1, [sp, #20]
 8017f30:	9906      	ldr	r1, [sp, #24]
 8017f32:	eba8 0802 	sub.w	r8, r8, r2
 8017f36:	1a8a      	subs	r2, r1, r2
 8017f38:	9206      	str	r2, [sp, #24]
 8017f3a:	b303      	cbz	r3, 8017f7e <_dtoa_r+0x6e6>
 8017f3c:	9a08      	ldr	r2, [sp, #32]
 8017f3e:	2a00      	cmp	r2, #0
 8017f40:	f000 80a6 	beq.w	8018090 <_dtoa_r+0x7f8>
 8017f44:	2c00      	cmp	r4, #0
 8017f46:	dd13      	ble.n	8017f70 <_dtoa_r+0x6d8>
 8017f48:	4639      	mov	r1, r7
 8017f4a:	4622      	mov	r2, r4
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f50:	f001 f8ac 	bl	80190ac <__pow5mult>
 8017f54:	462a      	mov	r2, r5
 8017f56:	4601      	mov	r1, r0
 8017f58:	4607      	mov	r7, r0
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	f001 f800 	bl	8018f60 <__multiply>
 8017f60:	4629      	mov	r1, r5
 8017f62:	900a      	str	r0, [sp, #40]	; 0x28
 8017f64:	4630      	mov	r0, r6
 8017f66:	f000 fedf 	bl	8018d28 <_Bfree>
 8017f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f6e:	4615      	mov	r5, r2
 8017f70:	1b1a      	subs	r2, r3, r4
 8017f72:	d004      	beq.n	8017f7e <_dtoa_r+0x6e6>
 8017f74:	4629      	mov	r1, r5
 8017f76:	4630      	mov	r0, r6
 8017f78:	f001 f898 	bl	80190ac <__pow5mult>
 8017f7c:	4605      	mov	r5, r0
 8017f7e:	2101      	movs	r1, #1
 8017f80:	4630      	mov	r0, r6
 8017f82:	f000 ffd7 	bl	8018f34 <__i2b>
 8017f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	f340 8082 	ble.w	8018094 <_dtoa_r+0x7fc>
 8017f90:	461a      	mov	r2, r3
 8017f92:	4601      	mov	r1, r0
 8017f94:	4630      	mov	r0, r6
 8017f96:	f001 f889 	bl	80190ac <__pow5mult>
 8017f9a:	9b07      	ldr	r3, [sp, #28]
 8017f9c:	2b01      	cmp	r3, #1
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	dd7b      	ble.n	801809a <_dtoa_r+0x802>
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8017fa6:	6922      	ldr	r2, [r4, #16]
 8017fa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017fac:	6910      	ldr	r0, [r2, #16]
 8017fae:	f000 ff71 	bl	8018e94 <__hi0bits>
 8017fb2:	f1c0 0020 	rsb	r0, r0, #32
 8017fb6:	9b06      	ldr	r3, [sp, #24]
 8017fb8:	4418      	add	r0, r3
 8017fba:	f010 001f 	ands.w	r0, r0, #31
 8017fbe:	f000 808d 	beq.w	80180dc <_dtoa_r+0x844>
 8017fc2:	f1c0 0220 	rsb	r2, r0, #32
 8017fc6:	2a04      	cmp	r2, #4
 8017fc8:	f340 8086 	ble.w	80180d8 <_dtoa_r+0x840>
 8017fcc:	f1c0 001c 	rsb	r0, r0, #28
 8017fd0:	9b05      	ldr	r3, [sp, #20]
 8017fd2:	4403      	add	r3, r0
 8017fd4:	9305      	str	r3, [sp, #20]
 8017fd6:	9b06      	ldr	r3, [sp, #24]
 8017fd8:	4403      	add	r3, r0
 8017fda:	4480      	add	r8, r0
 8017fdc:	9306      	str	r3, [sp, #24]
 8017fde:	9b05      	ldr	r3, [sp, #20]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	dd05      	ble.n	8017ff0 <_dtoa_r+0x758>
 8017fe4:	4629      	mov	r1, r5
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f001 f8b9 	bl	8019160 <__lshift>
 8017fee:	4605      	mov	r5, r0
 8017ff0:	9b06      	ldr	r3, [sp, #24]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	dd05      	ble.n	8018002 <_dtoa_r+0x76a>
 8017ff6:	4621      	mov	r1, r4
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	4630      	mov	r0, r6
 8017ffc:	f001 f8b0 	bl	8019160 <__lshift>
 8018000:	4604      	mov	r4, r0
 8018002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018004:	2b00      	cmp	r3, #0
 8018006:	d06b      	beq.n	80180e0 <_dtoa_r+0x848>
 8018008:	4621      	mov	r1, r4
 801800a:	4628      	mov	r0, r5
 801800c:	f001 f914 	bl	8019238 <__mcmp>
 8018010:	2800      	cmp	r0, #0
 8018012:	da65      	bge.n	80180e0 <_dtoa_r+0x848>
 8018014:	2300      	movs	r3, #0
 8018016:	4629      	mov	r1, r5
 8018018:	220a      	movs	r2, #10
 801801a:	4630      	mov	r0, r6
 801801c:	f000 fea6 	bl	8018d6c <__multadd>
 8018020:	9b08      	ldr	r3, [sp, #32]
 8018022:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018026:	4605      	mov	r5, r0
 8018028:	2b00      	cmp	r3, #0
 801802a:	f000 8192 	beq.w	8018352 <_dtoa_r+0xaba>
 801802e:	4639      	mov	r1, r7
 8018030:	2300      	movs	r3, #0
 8018032:	220a      	movs	r2, #10
 8018034:	4630      	mov	r0, r6
 8018036:	f000 fe99 	bl	8018d6c <__multadd>
 801803a:	f1ba 0f00 	cmp.w	sl, #0
 801803e:	4607      	mov	r7, r0
 8018040:	f300 808e 	bgt.w	8018160 <_dtoa_r+0x8c8>
 8018044:	9b07      	ldr	r3, [sp, #28]
 8018046:	2b02      	cmp	r3, #2
 8018048:	dc51      	bgt.n	80180ee <_dtoa_r+0x856>
 801804a:	e089      	b.n	8018160 <_dtoa_r+0x8c8>
 801804c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801804e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018052:	e751      	b.n	8017ef8 <_dtoa_r+0x660>
 8018054:	f109 34ff 	add.w	r4, r9, #4294967295
 8018058:	42a3      	cmp	r3, r4
 801805a:	bfbf      	itttt	lt
 801805c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801805e:	1ae3      	sublt	r3, r4, r3
 8018060:	18d2      	addlt	r2, r2, r3
 8018062:	4613      	movlt	r3, r2
 8018064:	bfb7      	itett	lt
 8018066:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018068:	1b1c      	subge	r4, r3, r4
 801806a:	4623      	movlt	r3, r4
 801806c:	2400      	movlt	r4, #0
 801806e:	f1b9 0f00 	cmp.w	r9, #0
 8018072:	bfb5      	itete	lt
 8018074:	9a05      	ldrlt	r2, [sp, #20]
 8018076:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801807a:	eba2 0809 	sublt.w	r8, r2, r9
 801807e:	464a      	movge	r2, r9
 8018080:	bfb8      	it	lt
 8018082:	2200      	movlt	r2, #0
 8018084:	e73b      	b.n	8017efe <_dtoa_r+0x666>
 8018086:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801808a:	9f08      	ldr	r7, [sp, #32]
 801808c:	461c      	mov	r4, r3
 801808e:	e743      	b.n	8017f18 <_dtoa_r+0x680>
 8018090:	461a      	mov	r2, r3
 8018092:	e76f      	b.n	8017f74 <_dtoa_r+0x6dc>
 8018094:	9b07      	ldr	r3, [sp, #28]
 8018096:	2b01      	cmp	r3, #1
 8018098:	dc18      	bgt.n	80180cc <_dtoa_r+0x834>
 801809a:	9b02      	ldr	r3, [sp, #8]
 801809c:	b9b3      	cbnz	r3, 80180cc <_dtoa_r+0x834>
 801809e:	9b03      	ldr	r3, [sp, #12]
 80180a0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80180a4:	b9a2      	cbnz	r2, 80180d0 <_dtoa_r+0x838>
 80180a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80180aa:	0d12      	lsrs	r2, r2, #20
 80180ac:	0512      	lsls	r2, r2, #20
 80180ae:	b18a      	cbz	r2, 80180d4 <_dtoa_r+0x83c>
 80180b0:	9b05      	ldr	r3, [sp, #20]
 80180b2:	3301      	adds	r3, #1
 80180b4:	9305      	str	r3, [sp, #20]
 80180b6:	9b06      	ldr	r3, [sp, #24]
 80180b8:	3301      	adds	r3, #1
 80180ba:	9306      	str	r3, [sp, #24]
 80180bc:	2301      	movs	r3, #1
 80180be:	930a      	str	r3, [sp, #40]	; 0x28
 80180c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	f47f af6f 	bne.w	8017fa6 <_dtoa_r+0x70e>
 80180c8:	2001      	movs	r0, #1
 80180ca:	e774      	b.n	8017fb6 <_dtoa_r+0x71e>
 80180cc:	2300      	movs	r3, #0
 80180ce:	e7f6      	b.n	80180be <_dtoa_r+0x826>
 80180d0:	9b02      	ldr	r3, [sp, #8]
 80180d2:	e7f4      	b.n	80180be <_dtoa_r+0x826>
 80180d4:	920a      	str	r2, [sp, #40]	; 0x28
 80180d6:	e7f3      	b.n	80180c0 <_dtoa_r+0x828>
 80180d8:	d081      	beq.n	8017fde <_dtoa_r+0x746>
 80180da:	4610      	mov	r0, r2
 80180dc:	301c      	adds	r0, #28
 80180de:	e777      	b.n	8017fd0 <_dtoa_r+0x738>
 80180e0:	f1b9 0f00 	cmp.w	r9, #0
 80180e4:	dc37      	bgt.n	8018156 <_dtoa_r+0x8be>
 80180e6:	9b07      	ldr	r3, [sp, #28]
 80180e8:	2b02      	cmp	r3, #2
 80180ea:	dd34      	ble.n	8018156 <_dtoa_r+0x8be>
 80180ec:	46ca      	mov	sl, r9
 80180ee:	f1ba 0f00 	cmp.w	sl, #0
 80180f2:	d10d      	bne.n	8018110 <_dtoa_r+0x878>
 80180f4:	4621      	mov	r1, r4
 80180f6:	4653      	mov	r3, sl
 80180f8:	2205      	movs	r2, #5
 80180fa:	4630      	mov	r0, r6
 80180fc:	f000 fe36 	bl	8018d6c <__multadd>
 8018100:	4601      	mov	r1, r0
 8018102:	4604      	mov	r4, r0
 8018104:	4628      	mov	r0, r5
 8018106:	f001 f897 	bl	8019238 <__mcmp>
 801810a:	2800      	cmp	r0, #0
 801810c:	f73f adde 	bgt.w	8017ccc <_dtoa_r+0x434>
 8018110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018112:	f8dd 8000 	ldr.w	r8, [sp]
 8018116:	ea6f 0b03 	mvn.w	fp, r3
 801811a:	f04f 0900 	mov.w	r9, #0
 801811e:	4621      	mov	r1, r4
 8018120:	4630      	mov	r0, r6
 8018122:	f000 fe01 	bl	8018d28 <_Bfree>
 8018126:	2f00      	cmp	r7, #0
 8018128:	f43f aea7 	beq.w	8017e7a <_dtoa_r+0x5e2>
 801812c:	f1b9 0f00 	cmp.w	r9, #0
 8018130:	d005      	beq.n	801813e <_dtoa_r+0x8a6>
 8018132:	45b9      	cmp	r9, r7
 8018134:	d003      	beq.n	801813e <_dtoa_r+0x8a6>
 8018136:	4649      	mov	r1, r9
 8018138:	4630      	mov	r0, r6
 801813a:	f000 fdf5 	bl	8018d28 <_Bfree>
 801813e:	4639      	mov	r1, r7
 8018140:	4630      	mov	r0, r6
 8018142:	f000 fdf1 	bl	8018d28 <_Bfree>
 8018146:	e698      	b.n	8017e7a <_dtoa_r+0x5e2>
 8018148:	2400      	movs	r4, #0
 801814a:	4627      	mov	r7, r4
 801814c:	e7e0      	b.n	8018110 <_dtoa_r+0x878>
 801814e:	46bb      	mov	fp, r7
 8018150:	4604      	mov	r4, r0
 8018152:	4607      	mov	r7, r0
 8018154:	e5ba      	b.n	8017ccc <_dtoa_r+0x434>
 8018156:	9b08      	ldr	r3, [sp, #32]
 8018158:	46ca      	mov	sl, r9
 801815a:	2b00      	cmp	r3, #0
 801815c:	f000 8100 	beq.w	8018360 <_dtoa_r+0xac8>
 8018160:	f1b8 0f00 	cmp.w	r8, #0
 8018164:	dd05      	ble.n	8018172 <_dtoa_r+0x8da>
 8018166:	4639      	mov	r1, r7
 8018168:	4642      	mov	r2, r8
 801816a:	4630      	mov	r0, r6
 801816c:	f000 fff8 	bl	8019160 <__lshift>
 8018170:	4607      	mov	r7, r0
 8018172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018174:	2b00      	cmp	r3, #0
 8018176:	d05d      	beq.n	8018234 <_dtoa_r+0x99c>
 8018178:	6879      	ldr	r1, [r7, #4]
 801817a:	4630      	mov	r0, r6
 801817c:	f000 fd94 	bl	8018ca8 <_Balloc>
 8018180:	4680      	mov	r8, r0
 8018182:	b928      	cbnz	r0, 8018190 <_dtoa_r+0x8f8>
 8018184:	4b82      	ldr	r3, [pc, #520]	; (8018390 <_dtoa_r+0xaf8>)
 8018186:	4602      	mov	r2, r0
 8018188:	f240 21ea 	movw	r1, #746	; 0x2ea
 801818c:	f7ff bb9a 	b.w	80178c4 <_dtoa_r+0x2c>
 8018190:	693a      	ldr	r2, [r7, #16]
 8018192:	3202      	adds	r2, #2
 8018194:	0092      	lsls	r2, r2, #2
 8018196:	f107 010c 	add.w	r1, r7, #12
 801819a:	300c      	adds	r0, #12
 801819c:	f7fd fdd6 	bl	8015d4c <memcpy>
 80181a0:	2201      	movs	r2, #1
 80181a2:	4641      	mov	r1, r8
 80181a4:	4630      	mov	r0, r6
 80181a6:	f000 ffdb 	bl	8019160 <__lshift>
 80181aa:	9b00      	ldr	r3, [sp, #0]
 80181ac:	3301      	adds	r3, #1
 80181ae:	9305      	str	r3, [sp, #20]
 80181b0:	9b00      	ldr	r3, [sp, #0]
 80181b2:	4453      	add	r3, sl
 80181b4:	9309      	str	r3, [sp, #36]	; 0x24
 80181b6:	9b02      	ldr	r3, [sp, #8]
 80181b8:	f003 0301 	and.w	r3, r3, #1
 80181bc:	46b9      	mov	r9, r7
 80181be:	9308      	str	r3, [sp, #32]
 80181c0:	4607      	mov	r7, r0
 80181c2:	9b05      	ldr	r3, [sp, #20]
 80181c4:	4621      	mov	r1, r4
 80181c6:	3b01      	subs	r3, #1
 80181c8:	4628      	mov	r0, r5
 80181ca:	9302      	str	r3, [sp, #8]
 80181cc:	f7ff fad6 	bl	801777c <quorem>
 80181d0:	4603      	mov	r3, r0
 80181d2:	3330      	adds	r3, #48	; 0x30
 80181d4:	9006      	str	r0, [sp, #24]
 80181d6:	4649      	mov	r1, r9
 80181d8:	4628      	mov	r0, r5
 80181da:	930a      	str	r3, [sp, #40]	; 0x28
 80181dc:	f001 f82c 	bl	8019238 <__mcmp>
 80181e0:	463a      	mov	r2, r7
 80181e2:	4682      	mov	sl, r0
 80181e4:	4621      	mov	r1, r4
 80181e6:	4630      	mov	r0, r6
 80181e8:	f001 f842 	bl	8019270 <__mdiff>
 80181ec:	68c2      	ldr	r2, [r0, #12]
 80181ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181f0:	4680      	mov	r8, r0
 80181f2:	bb0a      	cbnz	r2, 8018238 <_dtoa_r+0x9a0>
 80181f4:	4601      	mov	r1, r0
 80181f6:	4628      	mov	r0, r5
 80181f8:	f001 f81e 	bl	8019238 <__mcmp>
 80181fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181fe:	4602      	mov	r2, r0
 8018200:	4641      	mov	r1, r8
 8018202:	4630      	mov	r0, r6
 8018204:	920e      	str	r2, [sp, #56]	; 0x38
 8018206:	930a      	str	r3, [sp, #40]	; 0x28
 8018208:	f000 fd8e 	bl	8018d28 <_Bfree>
 801820c:	9b07      	ldr	r3, [sp, #28]
 801820e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018210:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018214:	ea43 0102 	orr.w	r1, r3, r2
 8018218:	9b08      	ldr	r3, [sp, #32]
 801821a:	430b      	orrs	r3, r1
 801821c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801821e:	d10d      	bne.n	801823c <_dtoa_r+0x9a4>
 8018220:	2b39      	cmp	r3, #57	; 0x39
 8018222:	d029      	beq.n	8018278 <_dtoa_r+0x9e0>
 8018224:	f1ba 0f00 	cmp.w	sl, #0
 8018228:	dd01      	ble.n	801822e <_dtoa_r+0x996>
 801822a:	9b06      	ldr	r3, [sp, #24]
 801822c:	3331      	adds	r3, #49	; 0x31
 801822e:	9a02      	ldr	r2, [sp, #8]
 8018230:	7013      	strb	r3, [r2, #0]
 8018232:	e774      	b.n	801811e <_dtoa_r+0x886>
 8018234:	4638      	mov	r0, r7
 8018236:	e7b8      	b.n	80181aa <_dtoa_r+0x912>
 8018238:	2201      	movs	r2, #1
 801823a:	e7e1      	b.n	8018200 <_dtoa_r+0x968>
 801823c:	f1ba 0f00 	cmp.w	sl, #0
 8018240:	db06      	blt.n	8018250 <_dtoa_r+0x9b8>
 8018242:	9907      	ldr	r1, [sp, #28]
 8018244:	ea41 0a0a 	orr.w	sl, r1, sl
 8018248:	9908      	ldr	r1, [sp, #32]
 801824a:	ea5a 0101 	orrs.w	r1, sl, r1
 801824e:	d120      	bne.n	8018292 <_dtoa_r+0x9fa>
 8018250:	2a00      	cmp	r2, #0
 8018252:	ddec      	ble.n	801822e <_dtoa_r+0x996>
 8018254:	4629      	mov	r1, r5
 8018256:	2201      	movs	r2, #1
 8018258:	4630      	mov	r0, r6
 801825a:	9305      	str	r3, [sp, #20]
 801825c:	f000 ff80 	bl	8019160 <__lshift>
 8018260:	4621      	mov	r1, r4
 8018262:	4605      	mov	r5, r0
 8018264:	f000 ffe8 	bl	8019238 <__mcmp>
 8018268:	2800      	cmp	r0, #0
 801826a:	9b05      	ldr	r3, [sp, #20]
 801826c:	dc02      	bgt.n	8018274 <_dtoa_r+0x9dc>
 801826e:	d1de      	bne.n	801822e <_dtoa_r+0x996>
 8018270:	07da      	lsls	r2, r3, #31
 8018272:	d5dc      	bpl.n	801822e <_dtoa_r+0x996>
 8018274:	2b39      	cmp	r3, #57	; 0x39
 8018276:	d1d8      	bne.n	801822a <_dtoa_r+0x992>
 8018278:	9a02      	ldr	r2, [sp, #8]
 801827a:	2339      	movs	r3, #57	; 0x39
 801827c:	7013      	strb	r3, [r2, #0]
 801827e:	4643      	mov	r3, r8
 8018280:	4698      	mov	r8, r3
 8018282:	3b01      	subs	r3, #1
 8018284:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018288:	2a39      	cmp	r2, #57	; 0x39
 801828a:	d051      	beq.n	8018330 <_dtoa_r+0xa98>
 801828c:	3201      	adds	r2, #1
 801828e:	701a      	strb	r2, [r3, #0]
 8018290:	e745      	b.n	801811e <_dtoa_r+0x886>
 8018292:	2a00      	cmp	r2, #0
 8018294:	dd03      	ble.n	801829e <_dtoa_r+0xa06>
 8018296:	2b39      	cmp	r3, #57	; 0x39
 8018298:	d0ee      	beq.n	8018278 <_dtoa_r+0x9e0>
 801829a:	3301      	adds	r3, #1
 801829c:	e7c7      	b.n	801822e <_dtoa_r+0x996>
 801829e:	9a05      	ldr	r2, [sp, #20]
 80182a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80182a6:	428a      	cmp	r2, r1
 80182a8:	d02b      	beq.n	8018302 <_dtoa_r+0xa6a>
 80182aa:	4629      	mov	r1, r5
 80182ac:	2300      	movs	r3, #0
 80182ae:	220a      	movs	r2, #10
 80182b0:	4630      	mov	r0, r6
 80182b2:	f000 fd5b 	bl	8018d6c <__multadd>
 80182b6:	45b9      	cmp	r9, r7
 80182b8:	4605      	mov	r5, r0
 80182ba:	f04f 0300 	mov.w	r3, #0
 80182be:	f04f 020a 	mov.w	r2, #10
 80182c2:	4649      	mov	r1, r9
 80182c4:	4630      	mov	r0, r6
 80182c6:	d107      	bne.n	80182d8 <_dtoa_r+0xa40>
 80182c8:	f000 fd50 	bl	8018d6c <__multadd>
 80182cc:	4681      	mov	r9, r0
 80182ce:	4607      	mov	r7, r0
 80182d0:	9b05      	ldr	r3, [sp, #20]
 80182d2:	3301      	adds	r3, #1
 80182d4:	9305      	str	r3, [sp, #20]
 80182d6:	e774      	b.n	80181c2 <_dtoa_r+0x92a>
 80182d8:	f000 fd48 	bl	8018d6c <__multadd>
 80182dc:	4639      	mov	r1, r7
 80182de:	4681      	mov	r9, r0
 80182e0:	2300      	movs	r3, #0
 80182e2:	220a      	movs	r2, #10
 80182e4:	4630      	mov	r0, r6
 80182e6:	f000 fd41 	bl	8018d6c <__multadd>
 80182ea:	4607      	mov	r7, r0
 80182ec:	e7f0      	b.n	80182d0 <_dtoa_r+0xa38>
 80182ee:	f1ba 0f00 	cmp.w	sl, #0
 80182f2:	9a00      	ldr	r2, [sp, #0]
 80182f4:	bfcc      	ite	gt
 80182f6:	46d0      	movgt	r8, sl
 80182f8:	f04f 0801 	movle.w	r8, #1
 80182fc:	4490      	add	r8, r2
 80182fe:	f04f 0900 	mov.w	r9, #0
 8018302:	4629      	mov	r1, r5
 8018304:	2201      	movs	r2, #1
 8018306:	4630      	mov	r0, r6
 8018308:	9302      	str	r3, [sp, #8]
 801830a:	f000 ff29 	bl	8019160 <__lshift>
 801830e:	4621      	mov	r1, r4
 8018310:	4605      	mov	r5, r0
 8018312:	f000 ff91 	bl	8019238 <__mcmp>
 8018316:	2800      	cmp	r0, #0
 8018318:	dcb1      	bgt.n	801827e <_dtoa_r+0x9e6>
 801831a:	d102      	bne.n	8018322 <_dtoa_r+0xa8a>
 801831c:	9b02      	ldr	r3, [sp, #8]
 801831e:	07db      	lsls	r3, r3, #31
 8018320:	d4ad      	bmi.n	801827e <_dtoa_r+0x9e6>
 8018322:	4643      	mov	r3, r8
 8018324:	4698      	mov	r8, r3
 8018326:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801832a:	2a30      	cmp	r2, #48	; 0x30
 801832c:	d0fa      	beq.n	8018324 <_dtoa_r+0xa8c>
 801832e:	e6f6      	b.n	801811e <_dtoa_r+0x886>
 8018330:	9a00      	ldr	r2, [sp, #0]
 8018332:	429a      	cmp	r2, r3
 8018334:	d1a4      	bne.n	8018280 <_dtoa_r+0x9e8>
 8018336:	f10b 0b01 	add.w	fp, fp, #1
 801833a:	2331      	movs	r3, #49	; 0x31
 801833c:	e778      	b.n	8018230 <_dtoa_r+0x998>
 801833e:	4b15      	ldr	r3, [pc, #84]	; (8018394 <_dtoa_r+0xafc>)
 8018340:	f7ff bb12 	b.w	8017968 <_dtoa_r+0xd0>
 8018344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018346:	2b00      	cmp	r3, #0
 8018348:	f47f aaee 	bne.w	8017928 <_dtoa_r+0x90>
 801834c:	4b12      	ldr	r3, [pc, #72]	; (8018398 <_dtoa_r+0xb00>)
 801834e:	f7ff bb0b 	b.w	8017968 <_dtoa_r+0xd0>
 8018352:	f1ba 0f00 	cmp.w	sl, #0
 8018356:	dc03      	bgt.n	8018360 <_dtoa_r+0xac8>
 8018358:	9b07      	ldr	r3, [sp, #28]
 801835a:	2b02      	cmp	r3, #2
 801835c:	f73f aec7 	bgt.w	80180ee <_dtoa_r+0x856>
 8018360:	f8dd 8000 	ldr.w	r8, [sp]
 8018364:	4621      	mov	r1, r4
 8018366:	4628      	mov	r0, r5
 8018368:	f7ff fa08 	bl	801777c <quorem>
 801836c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018370:	f808 3b01 	strb.w	r3, [r8], #1
 8018374:	9a00      	ldr	r2, [sp, #0]
 8018376:	eba8 0202 	sub.w	r2, r8, r2
 801837a:	4592      	cmp	sl, r2
 801837c:	ddb7      	ble.n	80182ee <_dtoa_r+0xa56>
 801837e:	4629      	mov	r1, r5
 8018380:	2300      	movs	r3, #0
 8018382:	220a      	movs	r2, #10
 8018384:	4630      	mov	r0, r6
 8018386:	f000 fcf1 	bl	8018d6c <__multadd>
 801838a:	4605      	mov	r5, r0
 801838c:	e7ea      	b.n	8018364 <_dtoa_r+0xacc>
 801838e:	bf00      	nop
 8018390:	0801c944 	.word	0x0801c944
 8018394:	0801c744 	.word	0x0801c744
 8018398:	0801c8c1 	.word	0x0801c8c1

0801839c <std>:
 801839c:	2300      	movs	r3, #0
 801839e:	b510      	push	{r4, lr}
 80183a0:	4604      	mov	r4, r0
 80183a2:	e9c0 3300 	strd	r3, r3, [r0]
 80183a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80183aa:	6083      	str	r3, [r0, #8]
 80183ac:	8181      	strh	r1, [r0, #12]
 80183ae:	6643      	str	r3, [r0, #100]	; 0x64
 80183b0:	81c2      	strh	r2, [r0, #14]
 80183b2:	6183      	str	r3, [r0, #24]
 80183b4:	4619      	mov	r1, r3
 80183b6:	2208      	movs	r2, #8
 80183b8:	305c      	adds	r0, #92	; 0x5c
 80183ba:	f7fd fcd5 	bl	8015d68 <memset>
 80183be:	4b05      	ldr	r3, [pc, #20]	; (80183d4 <std+0x38>)
 80183c0:	6263      	str	r3, [r4, #36]	; 0x24
 80183c2:	4b05      	ldr	r3, [pc, #20]	; (80183d8 <std+0x3c>)
 80183c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80183c6:	4b05      	ldr	r3, [pc, #20]	; (80183dc <std+0x40>)
 80183c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80183ca:	4b05      	ldr	r3, [pc, #20]	; (80183e0 <std+0x44>)
 80183cc:	6224      	str	r4, [r4, #32]
 80183ce:	6323      	str	r3, [r4, #48]	; 0x30
 80183d0:	bd10      	pop	{r4, pc}
 80183d2:	bf00      	nop
 80183d4:	08019d31 	.word	0x08019d31
 80183d8:	08019d53 	.word	0x08019d53
 80183dc:	08019d8b 	.word	0x08019d8b
 80183e0:	08019daf 	.word	0x08019daf

080183e4 <_cleanup_r>:
 80183e4:	4901      	ldr	r1, [pc, #4]	; (80183ec <_cleanup_r+0x8>)
 80183e6:	f000 b8af 	b.w	8018548 <_fwalk_reent>
 80183ea:	bf00      	nop
 80183ec:	0801a105 	.word	0x0801a105

080183f0 <__sfmoreglue>:
 80183f0:	b570      	push	{r4, r5, r6, lr}
 80183f2:	1e4a      	subs	r2, r1, #1
 80183f4:	2568      	movs	r5, #104	; 0x68
 80183f6:	4355      	muls	r5, r2
 80183f8:	460e      	mov	r6, r1
 80183fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80183fe:	f001 f96f 	bl	80196e0 <_malloc_r>
 8018402:	4604      	mov	r4, r0
 8018404:	b140      	cbz	r0, 8018418 <__sfmoreglue+0x28>
 8018406:	2100      	movs	r1, #0
 8018408:	e9c0 1600 	strd	r1, r6, [r0]
 801840c:	300c      	adds	r0, #12
 801840e:	60a0      	str	r0, [r4, #8]
 8018410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018414:	f7fd fca8 	bl	8015d68 <memset>
 8018418:	4620      	mov	r0, r4
 801841a:	bd70      	pop	{r4, r5, r6, pc}

0801841c <__sfp_lock_acquire>:
 801841c:	4801      	ldr	r0, [pc, #4]	; (8018424 <__sfp_lock_acquire+0x8>)
 801841e:	f000 bc26 	b.w	8018c6e <__retarget_lock_acquire_recursive>
 8018422:	bf00      	nop
 8018424:	2003127c 	.word	0x2003127c

08018428 <__sfp_lock_release>:
 8018428:	4801      	ldr	r0, [pc, #4]	; (8018430 <__sfp_lock_release+0x8>)
 801842a:	f000 bc21 	b.w	8018c70 <__retarget_lock_release_recursive>
 801842e:	bf00      	nop
 8018430:	2003127c 	.word	0x2003127c

08018434 <__sinit_lock_acquire>:
 8018434:	4801      	ldr	r0, [pc, #4]	; (801843c <__sinit_lock_acquire+0x8>)
 8018436:	f000 bc1a 	b.w	8018c6e <__retarget_lock_acquire_recursive>
 801843a:	bf00      	nop
 801843c:	20031277 	.word	0x20031277

08018440 <__sinit_lock_release>:
 8018440:	4801      	ldr	r0, [pc, #4]	; (8018448 <__sinit_lock_release+0x8>)
 8018442:	f000 bc15 	b.w	8018c70 <__retarget_lock_release_recursive>
 8018446:	bf00      	nop
 8018448:	20031277 	.word	0x20031277

0801844c <__sinit>:
 801844c:	b510      	push	{r4, lr}
 801844e:	4604      	mov	r4, r0
 8018450:	f7ff fff0 	bl	8018434 <__sinit_lock_acquire>
 8018454:	69a3      	ldr	r3, [r4, #24]
 8018456:	b11b      	cbz	r3, 8018460 <__sinit+0x14>
 8018458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801845c:	f7ff bff0 	b.w	8018440 <__sinit_lock_release>
 8018460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018464:	6523      	str	r3, [r4, #80]	; 0x50
 8018466:	4b13      	ldr	r3, [pc, #76]	; (80184b4 <__sinit+0x68>)
 8018468:	4a13      	ldr	r2, [pc, #76]	; (80184b8 <__sinit+0x6c>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	62a2      	str	r2, [r4, #40]	; 0x28
 801846e:	42a3      	cmp	r3, r4
 8018470:	bf04      	itt	eq
 8018472:	2301      	moveq	r3, #1
 8018474:	61a3      	streq	r3, [r4, #24]
 8018476:	4620      	mov	r0, r4
 8018478:	f000 f820 	bl	80184bc <__sfp>
 801847c:	6060      	str	r0, [r4, #4]
 801847e:	4620      	mov	r0, r4
 8018480:	f000 f81c 	bl	80184bc <__sfp>
 8018484:	60a0      	str	r0, [r4, #8]
 8018486:	4620      	mov	r0, r4
 8018488:	f000 f818 	bl	80184bc <__sfp>
 801848c:	2200      	movs	r2, #0
 801848e:	60e0      	str	r0, [r4, #12]
 8018490:	2104      	movs	r1, #4
 8018492:	6860      	ldr	r0, [r4, #4]
 8018494:	f7ff ff82 	bl	801839c <std>
 8018498:	68a0      	ldr	r0, [r4, #8]
 801849a:	2201      	movs	r2, #1
 801849c:	2109      	movs	r1, #9
 801849e:	f7ff ff7d 	bl	801839c <std>
 80184a2:	68e0      	ldr	r0, [r4, #12]
 80184a4:	2202      	movs	r2, #2
 80184a6:	2112      	movs	r1, #18
 80184a8:	f7ff ff78 	bl	801839c <std>
 80184ac:	2301      	movs	r3, #1
 80184ae:	61a3      	str	r3, [r4, #24]
 80184b0:	e7d2      	b.n	8018458 <__sinit+0xc>
 80184b2:	bf00      	nop
 80184b4:	0801c730 	.word	0x0801c730
 80184b8:	080183e5 	.word	0x080183e5

080184bc <__sfp>:
 80184bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184be:	4607      	mov	r7, r0
 80184c0:	f7ff ffac 	bl	801841c <__sfp_lock_acquire>
 80184c4:	4b1e      	ldr	r3, [pc, #120]	; (8018540 <__sfp+0x84>)
 80184c6:	681e      	ldr	r6, [r3, #0]
 80184c8:	69b3      	ldr	r3, [r6, #24]
 80184ca:	b913      	cbnz	r3, 80184d2 <__sfp+0x16>
 80184cc:	4630      	mov	r0, r6
 80184ce:	f7ff ffbd 	bl	801844c <__sinit>
 80184d2:	3648      	adds	r6, #72	; 0x48
 80184d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80184d8:	3b01      	subs	r3, #1
 80184da:	d503      	bpl.n	80184e4 <__sfp+0x28>
 80184dc:	6833      	ldr	r3, [r6, #0]
 80184de:	b30b      	cbz	r3, 8018524 <__sfp+0x68>
 80184e0:	6836      	ldr	r6, [r6, #0]
 80184e2:	e7f7      	b.n	80184d4 <__sfp+0x18>
 80184e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80184e8:	b9d5      	cbnz	r5, 8018520 <__sfp+0x64>
 80184ea:	4b16      	ldr	r3, [pc, #88]	; (8018544 <__sfp+0x88>)
 80184ec:	60e3      	str	r3, [r4, #12]
 80184ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80184f2:	6665      	str	r5, [r4, #100]	; 0x64
 80184f4:	f000 fbba 	bl	8018c6c <__retarget_lock_init_recursive>
 80184f8:	f7ff ff96 	bl	8018428 <__sfp_lock_release>
 80184fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018504:	6025      	str	r5, [r4, #0]
 8018506:	61a5      	str	r5, [r4, #24]
 8018508:	2208      	movs	r2, #8
 801850a:	4629      	mov	r1, r5
 801850c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018510:	f7fd fc2a 	bl	8015d68 <memset>
 8018514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801851c:	4620      	mov	r0, r4
 801851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018520:	3468      	adds	r4, #104	; 0x68
 8018522:	e7d9      	b.n	80184d8 <__sfp+0x1c>
 8018524:	2104      	movs	r1, #4
 8018526:	4638      	mov	r0, r7
 8018528:	f7ff ff62 	bl	80183f0 <__sfmoreglue>
 801852c:	4604      	mov	r4, r0
 801852e:	6030      	str	r0, [r6, #0]
 8018530:	2800      	cmp	r0, #0
 8018532:	d1d5      	bne.n	80184e0 <__sfp+0x24>
 8018534:	f7ff ff78 	bl	8018428 <__sfp_lock_release>
 8018538:	230c      	movs	r3, #12
 801853a:	603b      	str	r3, [r7, #0]
 801853c:	e7ee      	b.n	801851c <__sfp+0x60>
 801853e:	bf00      	nop
 8018540:	0801c730 	.word	0x0801c730
 8018544:	ffff0001 	.word	0xffff0001

08018548 <_fwalk_reent>:
 8018548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801854c:	4606      	mov	r6, r0
 801854e:	4688      	mov	r8, r1
 8018550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018554:	2700      	movs	r7, #0
 8018556:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801855a:	f1b9 0901 	subs.w	r9, r9, #1
 801855e:	d505      	bpl.n	801856c <_fwalk_reent+0x24>
 8018560:	6824      	ldr	r4, [r4, #0]
 8018562:	2c00      	cmp	r4, #0
 8018564:	d1f7      	bne.n	8018556 <_fwalk_reent+0xe>
 8018566:	4638      	mov	r0, r7
 8018568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801856c:	89ab      	ldrh	r3, [r5, #12]
 801856e:	2b01      	cmp	r3, #1
 8018570:	d907      	bls.n	8018582 <_fwalk_reent+0x3a>
 8018572:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018576:	3301      	adds	r3, #1
 8018578:	d003      	beq.n	8018582 <_fwalk_reent+0x3a>
 801857a:	4629      	mov	r1, r5
 801857c:	4630      	mov	r0, r6
 801857e:	47c0      	blx	r8
 8018580:	4307      	orrs	r7, r0
 8018582:	3568      	adds	r5, #104	; 0x68
 8018584:	e7e9      	b.n	801855a <_fwalk_reent+0x12>

08018586 <rshift>:
 8018586:	6903      	ldr	r3, [r0, #16]
 8018588:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801858c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018590:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018594:	f100 0414 	add.w	r4, r0, #20
 8018598:	dd45      	ble.n	8018626 <rshift+0xa0>
 801859a:	f011 011f 	ands.w	r1, r1, #31
 801859e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80185a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80185a6:	d10c      	bne.n	80185c2 <rshift+0x3c>
 80185a8:	f100 0710 	add.w	r7, r0, #16
 80185ac:	4629      	mov	r1, r5
 80185ae:	42b1      	cmp	r1, r6
 80185b0:	d334      	bcc.n	801861c <rshift+0x96>
 80185b2:	1a9b      	subs	r3, r3, r2
 80185b4:	009b      	lsls	r3, r3, #2
 80185b6:	1eea      	subs	r2, r5, #3
 80185b8:	4296      	cmp	r6, r2
 80185ba:	bf38      	it	cc
 80185bc:	2300      	movcc	r3, #0
 80185be:	4423      	add	r3, r4
 80185c0:	e015      	b.n	80185ee <rshift+0x68>
 80185c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80185c6:	f1c1 0820 	rsb	r8, r1, #32
 80185ca:	40cf      	lsrs	r7, r1
 80185cc:	f105 0e04 	add.w	lr, r5, #4
 80185d0:	46a1      	mov	r9, r4
 80185d2:	4576      	cmp	r6, lr
 80185d4:	46f4      	mov	ip, lr
 80185d6:	d815      	bhi.n	8018604 <rshift+0x7e>
 80185d8:	1a9b      	subs	r3, r3, r2
 80185da:	009a      	lsls	r2, r3, #2
 80185dc:	3a04      	subs	r2, #4
 80185de:	3501      	adds	r5, #1
 80185e0:	42ae      	cmp	r6, r5
 80185e2:	bf38      	it	cc
 80185e4:	2200      	movcc	r2, #0
 80185e6:	18a3      	adds	r3, r4, r2
 80185e8:	50a7      	str	r7, [r4, r2]
 80185ea:	b107      	cbz	r7, 80185ee <rshift+0x68>
 80185ec:	3304      	adds	r3, #4
 80185ee:	1b1a      	subs	r2, r3, r4
 80185f0:	42a3      	cmp	r3, r4
 80185f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80185f6:	bf08      	it	eq
 80185f8:	2300      	moveq	r3, #0
 80185fa:	6102      	str	r2, [r0, #16]
 80185fc:	bf08      	it	eq
 80185fe:	6143      	streq	r3, [r0, #20]
 8018600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018604:	f8dc c000 	ldr.w	ip, [ip]
 8018608:	fa0c fc08 	lsl.w	ip, ip, r8
 801860c:	ea4c 0707 	orr.w	r7, ip, r7
 8018610:	f849 7b04 	str.w	r7, [r9], #4
 8018614:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018618:	40cf      	lsrs	r7, r1
 801861a:	e7da      	b.n	80185d2 <rshift+0x4c>
 801861c:	f851 cb04 	ldr.w	ip, [r1], #4
 8018620:	f847 cf04 	str.w	ip, [r7, #4]!
 8018624:	e7c3      	b.n	80185ae <rshift+0x28>
 8018626:	4623      	mov	r3, r4
 8018628:	e7e1      	b.n	80185ee <rshift+0x68>

0801862a <__hexdig_fun>:
 801862a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801862e:	2b09      	cmp	r3, #9
 8018630:	d802      	bhi.n	8018638 <__hexdig_fun+0xe>
 8018632:	3820      	subs	r0, #32
 8018634:	b2c0      	uxtb	r0, r0
 8018636:	4770      	bx	lr
 8018638:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801863c:	2b05      	cmp	r3, #5
 801863e:	d801      	bhi.n	8018644 <__hexdig_fun+0x1a>
 8018640:	3847      	subs	r0, #71	; 0x47
 8018642:	e7f7      	b.n	8018634 <__hexdig_fun+0xa>
 8018644:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018648:	2b05      	cmp	r3, #5
 801864a:	d801      	bhi.n	8018650 <__hexdig_fun+0x26>
 801864c:	3827      	subs	r0, #39	; 0x27
 801864e:	e7f1      	b.n	8018634 <__hexdig_fun+0xa>
 8018650:	2000      	movs	r0, #0
 8018652:	4770      	bx	lr

08018654 <__gethex>:
 8018654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018658:	ed2d 8b02 	vpush	{d8}
 801865c:	b089      	sub	sp, #36	; 0x24
 801865e:	ee08 0a10 	vmov	s16, r0
 8018662:	9304      	str	r3, [sp, #16]
 8018664:	4bbc      	ldr	r3, [pc, #752]	; (8018958 <__gethex+0x304>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	9301      	str	r3, [sp, #4]
 801866a:	4618      	mov	r0, r3
 801866c:	468b      	mov	fp, r1
 801866e:	4690      	mov	r8, r2
 8018670:	f7e7 fde6 	bl	8000240 <strlen>
 8018674:	9b01      	ldr	r3, [sp, #4]
 8018676:	f8db 2000 	ldr.w	r2, [fp]
 801867a:	4403      	add	r3, r0
 801867c:	4682      	mov	sl, r0
 801867e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018682:	9305      	str	r3, [sp, #20]
 8018684:	1c93      	adds	r3, r2, #2
 8018686:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801868a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801868e:	32fe      	adds	r2, #254	; 0xfe
 8018690:	18d1      	adds	r1, r2, r3
 8018692:	461f      	mov	r7, r3
 8018694:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018698:	9100      	str	r1, [sp, #0]
 801869a:	2830      	cmp	r0, #48	; 0x30
 801869c:	d0f8      	beq.n	8018690 <__gethex+0x3c>
 801869e:	f7ff ffc4 	bl	801862a <__hexdig_fun>
 80186a2:	4604      	mov	r4, r0
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d13a      	bne.n	801871e <__gethex+0xca>
 80186a8:	9901      	ldr	r1, [sp, #4]
 80186aa:	4652      	mov	r2, sl
 80186ac:	4638      	mov	r0, r7
 80186ae:	f001 fb82 	bl	8019db6 <strncmp>
 80186b2:	4605      	mov	r5, r0
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d168      	bne.n	801878a <__gethex+0x136>
 80186b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80186bc:	eb07 060a 	add.w	r6, r7, sl
 80186c0:	f7ff ffb3 	bl	801862a <__hexdig_fun>
 80186c4:	2800      	cmp	r0, #0
 80186c6:	d062      	beq.n	801878e <__gethex+0x13a>
 80186c8:	4633      	mov	r3, r6
 80186ca:	7818      	ldrb	r0, [r3, #0]
 80186cc:	2830      	cmp	r0, #48	; 0x30
 80186ce:	461f      	mov	r7, r3
 80186d0:	f103 0301 	add.w	r3, r3, #1
 80186d4:	d0f9      	beq.n	80186ca <__gethex+0x76>
 80186d6:	f7ff ffa8 	bl	801862a <__hexdig_fun>
 80186da:	2301      	movs	r3, #1
 80186dc:	fab0 f480 	clz	r4, r0
 80186e0:	0964      	lsrs	r4, r4, #5
 80186e2:	4635      	mov	r5, r6
 80186e4:	9300      	str	r3, [sp, #0]
 80186e6:	463a      	mov	r2, r7
 80186e8:	4616      	mov	r6, r2
 80186ea:	3201      	adds	r2, #1
 80186ec:	7830      	ldrb	r0, [r6, #0]
 80186ee:	f7ff ff9c 	bl	801862a <__hexdig_fun>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d1f8      	bne.n	80186e8 <__gethex+0x94>
 80186f6:	9901      	ldr	r1, [sp, #4]
 80186f8:	4652      	mov	r2, sl
 80186fa:	4630      	mov	r0, r6
 80186fc:	f001 fb5b 	bl	8019db6 <strncmp>
 8018700:	b980      	cbnz	r0, 8018724 <__gethex+0xd0>
 8018702:	b94d      	cbnz	r5, 8018718 <__gethex+0xc4>
 8018704:	eb06 050a 	add.w	r5, r6, sl
 8018708:	462a      	mov	r2, r5
 801870a:	4616      	mov	r6, r2
 801870c:	3201      	adds	r2, #1
 801870e:	7830      	ldrb	r0, [r6, #0]
 8018710:	f7ff ff8b 	bl	801862a <__hexdig_fun>
 8018714:	2800      	cmp	r0, #0
 8018716:	d1f8      	bne.n	801870a <__gethex+0xb6>
 8018718:	1bad      	subs	r5, r5, r6
 801871a:	00ad      	lsls	r5, r5, #2
 801871c:	e004      	b.n	8018728 <__gethex+0xd4>
 801871e:	2400      	movs	r4, #0
 8018720:	4625      	mov	r5, r4
 8018722:	e7e0      	b.n	80186e6 <__gethex+0x92>
 8018724:	2d00      	cmp	r5, #0
 8018726:	d1f7      	bne.n	8018718 <__gethex+0xc4>
 8018728:	7833      	ldrb	r3, [r6, #0]
 801872a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801872e:	2b50      	cmp	r3, #80	; 0x50
 8018730:	d13b      	bne.n	80187aa <__gethex+0x156>
 8018732:	7873      	ldrb	r3, [r6, #1]
 8018734:	2b2b      	cmp	r3, #43	; 0x2b
 8018736:	d02c      	beq.n	8018792 <__gethex+0x13e>
 8018738:	2b2d      	cmp	r3, #45	; 0x2d
 801873a:	d02e      	beq.n	801879a <__gethex+0x146>
 801873c:	1c71      	adds	r1, r6, #1
 801873e:	f04f 0900 	mov.w	r9, #0
 8018742:	7808      	ldrb	r0, [r1, #0]
 8018744:	f7ff ff71 	bl	801862a <__hexdig_fun>
 8018748:	1e43      	subs	r3, r0, #1
 801874a:	b2db      	uxtb	r3, r3
 801874c:	2b18      	cmp	r3, #24
 801874e:	d82c      	bhi.n	80187aa <__gethex+0x156>
 8018750:	f1a0 0210 	sub.w	r2, r0, #16
 8018754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018758:	f7ff ff67 	bl	801862a <__hexdig_fun>
 801875c:	1e43      	subs	r3, r0, #1
 801875e:	b2db      	uxtb	r3, r3
 8018760:	2b18      	cmp	r3, #24
 8018762:	d91d      	bls.n	80187a0 <__gethex+0x14c>
 8018764:	f1b9 0f00 	cmp.w	r9, #0
 8018768:	d000      	beq.n	801876c <__gethex+0x118>
 801876a:	4252      	negs	r2, r2
 801876c:	4415      	add	r5, r2
 801876e:	f8cb 1000 	str.w	r1, [fp]
 8018772:	b1e4      	cbz	r4, 80187ae <__gethex+0x15a>
 8018774:	9b00      	ldr	r3, [sp, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	bf14      	ite	ne
 801877a:	2700      	movne	r7, #0
 801877c:	2706      	moveq	r7, #6
 801877e:	4638      	mov	r0, r7
 8018780:	b009      	add	sp, #36	; 0x24
 8018782:	ecbd 8b02 	vpop	{d8}
 8018786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801878a:	463e      	mov	r6, r7
 801878c:	4625      	mov	r5, r4
 801878e:	2401      	movs	r4, #1
 8018790:	e7ca      	b.n	8018728 <__gethex+0xd4>
 8018792:	f04f 0900 	mov.w	r9, #0
 8018796:	1cb1      	adds	r1, r6, #2
 8018798:	e7d3      	b.n	8018742 <__gethex+0xee>
 801879a:	f04f 0901 	mov.w	r9, #1
 801879e:	e7fa      	b.n	8018796 <__gethex+0x142>
 80187a0:	230a      	movs	r3, #10
 80187a2:	fb03 0202 	mla	r2, r3, r2, r0
 80187a6:	3a10      	subs	r2, #16
 80187a8:	e7d4      	b.n	8018754 <__gethex+0x100>
 80187aa:	4631      	mov	r1, r6
 80187ac:	e7df      	b.n	801876e <__gethex+0x11a>
 80187ae:	1bf3      	subs	r3, r6, r7
 80187b0:	3b01      	subs	r3, #1
 80187b2:	4621      	mov	r1, r4
 80187b4:	2b07      	cmp	r3, #7
 80187b6:	dc0b      	bgt.n	80187d0 <__gethex+0x17c>
 80187b8:	ee18 0a10 	vmov	r0, s16
 80187bc:	f000 fa74 	bl	8018ca8 <_Balloc>
 80187c0:	4604      	mov	r4, r0
 80187c2:	b940      	cbnz	r0, 80187d6 <__gethex+0x182>
 80187c4:	4b65      	ldr	r3, [pc, #404]	; (801895c <__gethex+0x308>)
 80187c6:	4602      	mov	r2, r0
 80187c8:	21de      	movs	r1, #222	; 0xde
 80187ca:	4865      	ldr	r0, [pc, #404]	; (8018960 <__gethex+0x30c>)
 80187cc:	f001 fbe6 	bl	8019f9c <__assert_func>
 80187d0:	3101      	adds	r1, #1
 80187d2:	105b      	asrs	r3, r3, #1
 80187d4:	e7ee      	b.n	80187b4 <__gethex+0x160>
 80187d6:	f100 0914 	add.w	r9, r0, #20
 80187da:	f04f 0b00 	mov.w	fp, #0
 80187de:	f1ca 0301 	rsb	r3, sl, #1
 80187e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80187e6:	f8cd b000 	str.w	fp, [sp]
 80187ea:	9306      	str	r3, [sp, #24]
 80187ec:	42b7      	cmp	r7, r6
 80187ee:	d340      	bcc.n	8018872 <__gethex+0x21e>
 80187f0:	9802      	ldr	r0, [sp, #8]
 80187f2:	9b00      	ldr	r3, [sp, #0]
 80187f4:	f840 3b04 	str.w	r3, [r0], #4
 80187f8:	eba0 0009 	sub.w	r0, r0, r9
 80187fc:	1080      	asrs	r0, r0, #2
 80187fe:	0146      	lsls	r6, r0, #5
 8018800:	6120      	str	r0, [r4, #16]
 8018802:	4618      	mov	r0, r3
 8018804:	f000 fb46 	bl	8018e94 <__hi0bits>
 8018808:	1a30      	subs	r0, r6, r0
 801880a:	f8d8 6000 	ldr.w	r6, [r8]
 801880e:	42b0      	cmp	r0, r6
 8018810:	dd63      	ble.n	80188da <__gethex+0x286>
 8018812:	1b87      	subs	r7, r0, r6
 8018814:	4639      	mov	r1, r7
 8018816:	4620      	mov	r0, r4
 8018818:	f000 fee1 	bl	80195de <__any_on>
 801881c:	4682      	mov	sl, r0
 801881e:	b1a8      	cbz	r0, 801884c <__gethex+0x1f8>
 8018820:	1e7b      	subs	r3, r7, #1
 8018822:	1159      	asrs	r1, r3, #5
 8018824:	f003 021f 	and.w	r2, r3, #31
 8018828:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801882c:	f04f 0a01 	mov.w	sl, #1
 8018830:	fa0a f202 	lsl.w	r2, sl, r2
 8018834:	420a      	tst	r2, r1
 8018836:	d009      	beq.n	801884c <__gethex+0x1f8>
 8018838:	4553      	cmp	r3, sl
 801883a:	dd05      	ble.n	8018848 <__gethex+0x1f4>
 801883c:	1eb9      	subs	r1, r7, #2
 801883e:	4620      	mov	r0, r4
 8018840:	f000 fecd 	bl	80195de <__any_on>
 8018844:	2800      	cmp	r0, #0
 8018846:	d145      	bne.n	80188d4 <__gethex+0x280>
 8018848:	f04f 0a02 	mov.w	sl, #2
 801884c:	4639      	mov	r1, r7
 801884e:	4620      	mov	r0, r4
 8018850:	f7ff fe99 	bl	8018586 <rshift>
 8018854:	443d      	add	r5, r7
 8018856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801885a:	42ab      	cmp	r3, r5
 801885c:	da4c      	bge.n	80188f8 <__gethex+0x2a4>
 801885e:	ee18 0a10 	vmov	r0, s16
 8018862:	4621      	mov	r1, r4
 8018864:	f000 fa60 	bl	8018d28 <_Bfree>
 8018868:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801886a:	2300      	movs	r3, #0
 801886c:	6013      	str	r3, [r2, #0]
 801886e:	27a3      	movs	r7, #163	; 0xa3
 8018870:	e785      	b.n	801877e <__gethex+0x12a>
 8018872:	1e73      	subs	r3, r6, #1
 8018874:	9a05      	ldr	r2, [sp, #20]
 8018876:	9303      	str	r3, [sp, #12]
 8018878:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801887c:	4293      	cmp	r3, r2
 801887e:	d019      	beq.n	80188b4 <__gethex+0x260>
 8018880:	f1bb 0f20 	cmp.w	fp, #32
 8018884:	d107      	bne.n	8018896 <__gethex+0x242>
 8018886:	9b02      	ldr	r3, [sp, #8]
 8018888:	9a00      	ldr	r2, [sp, #0]
 801888a:	f843 2b04 	str.w	r2, [r3], #4
 801888e:	9302      	str	r3, [sp, #8]
 8018890:	2300      	movs	r3, #0
 8018892:	9300      	str	r3, [sp, #0]
 8018894:	469b      	mov	fp, r3
 8018896:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801889a:	f7ff fec6 	bl	801862a <__hexdig_fun>
 801889e:	9b00      	ldr	r3, [sp, #0]
 80188a0:	f000 000f 	and.w	r0, r0, #15
 80188a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80188a8:	4303      	orrs	r3, r0
 80188aa:	9300      	str	r3, [sp, #0]
 80188ac:	f10b 0b04 	add.w	fp, fp, #4
 80188b0:	9b03      	ldr	r3, [sp, #12]
 80188b2:	e00d      	b.n	80188d0 <__gethex+0x27c>
 80188b4:	9b03      	ldr	r3, [sp, #12]
 80188b6:	9a06      	ldr	r2, [sp, #24]
 80188b8:	4413      	add	r3, r2
 80188ba:	42bb      	cmp	r3, r7
 80188bc:	d3e0      	bcc.n	8018880 <__gethex+0x22c>
 80188be:	4618      	mov	r0, r3
 80188c0:	9901      	ldr	r1, [sp, #4]
 80188c2:	9307      	str	r3, [sp, #28]
 80188c4:	4652      	mov	r2, sl
 80188c6:	f001 fa76 	bl	8019db6 <strncmp>
 80188ca:	9b07      	ldr	r3, [sp, #28]
 80188cc:	2800      	cmp	r0, #0
 80188ce:	d1d7      	bne.n	8018880 <__gethex+0x22c>
 80188d0:	461e      	mov	r6, r3
 80188d2:	e78b      	b.n	80187ec <__gethex+0x198>
 80188d4:	f04f 0a03 	mov.w	sl, #3
 80188d8:	e7b8      	b.n	801884c <__gethex+0x1f8>
 80188da:	da0a      	bge.n	80188f2 <__gethex+0x29e>
 80188dc:	1a37      	subs	r7, r6, r0
 80188de:	4621      	mov	r1, r4
 80188e0:	ee18 0a10 	vmov	r0, s16
 80188e4:	463a      	mov	r2, r7
 80188e6:	f000 fc3b 	bl	8019160 <__lshift>
 80188ea:	1bed      	subs	r5, r5, r7
 80188ec:	4604      	mov	r4, r0
 80188ee:	f100 0914 	add.w	r9, r0, #20
 80188f2:	f04f 0a00 	mov.w	sl, #0
 80188f6:	e7ae      	b.n	8018856 <__gethex+0x202>
 80188f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80188fc:	42a8      	cmp	r0, r5
 80188fe:	dd72      	ble.n	80189e6 <__gethex+0x392>
 8018900:	1b45      	subs	r5, r0, r5
 8018902:	42ae      	cmp	r6, r5
 8018904:	dc36      	bgt.n	8018974 <__gethex+0x320>
 8018906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801890a:	2b02      	cmp	r3, #2
 801890c:	d02a      	beq.n	8018964 <__gethex+0x310>
 801890e:	2b03      	cmp	r3, #3
 8018910:	d02c      	beq.n	801896c <__gethex+0x318>
 8018912:	2b01      	cmp	r3, #1
 8018914:	d115      	bne.n	8018942 <__gethex+0x2ee>
 8018916:	42ae      	cmp	r6, r5
 8018918:	d113      	bne.n	8018942 <__gethex+0x2ee>
 801891a:	2e01      	cmp	r6, #1
 801891c:	d10b      	bne.n	8018936 <__gethex+0x2e2>
 801891e:	9a04      	ldr	r2, [sp, #16]
 8018920:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018924:	6013      	str	r3, [r2, #0]
 8018926:	2301      	movs	r3, #1
 8018928:	6123      	str	r3, [r4, #16]
 801892a:	f8c9 3000 	str.w	r3, [r9]
 801892e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018930:	2762      	movs	r7, #98	; 0x62
 8018932:	601c      	str	r4, [r3, #0]
 8018934:	e723      	b.n	801877e <__gethex+0x12a>
 8018936:	1e71      	subs	r1, r6, #1
 8018938:	4620      	mov	r0, r4
 801893a:	f000 fe50 	bl	80195de <__any_on>
 801893e:	2800      	cmp	r0, #0
 8018940:	d1ed      	bne.n	801891e <__gethex+0x2ca>
 8018942:	ee18 0a10 	vmov	r0, s16
 8018946:	4621      	mov	r1, r4
 8018948:	f000 f9ee 	bl	8018d28 <_Bfree>
 801894c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801894e:	2300      	movs	r3, #0
 8018950:	6013      	str	r3, [r2, #0]
 8018952:	2750      	movs	r7, #80	; 0x50
 8018954:	e713      	b.n	801877e <__gethex+0x12a>
 8018956:	bf00      	nop
 8018958:	0801ca24 	.word	0x0801ca24
 801895c:	0801c944 	.word	0x0801c944
 8018960:	0801c9b8 	.word	0x0801c9b8
 8018964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018966:	2b00      	cmp	r3, #0
 8018968:	d1eb      	bne.n	8018942 <__gethex+0x2ee>
 801896a:	e7d8      	b.n	801891e <__gethex+0x2ca>
 801896c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801896e:	2b00      	cmp	r3, #0
 8018970:	d1d5      	bne.n	801891e <__gethex+0x2ca>
 8018972:	e7e6      	b.n	8018942 <__gethex+0x2ee>
 8018974:	1e6f      	subs	r7, r5, #1
 8018976:	f1ba 0f00 	cmp.w	sl, #0
 801897a:	d131      	bne.n	80189e0 <__gethex+0x38c>
 801897c:	b127      	cbz	r7, 8018988 <__gethex+0x334>
 801897e:	4639      	mov	r1, r7
 8018980:	4620      	mov	r0, r4
 8018982:	f000 fe2c 	bl	80195de <__any_on>
 8018986:	4682      	mov	sl, r0
 8018988:	117b      	asrs	r3, r7, #5
 801898a:	2101      	movs	r1, #1
 801898c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018990:	f007 071f 	and.w	r7, r7, #31
 8018994:	fa01 f707 	lsl.w	r7, r1, r7
 8018998:	421f      	tst	r7, r3
 801899a:	4629      	mov	r1, r5
 801899c:	4620      	mov	r0, r4
 801899e:	bf18      	it	ne
 80189a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80189a4:	1b76      	subs	r6, r6, r5
 80189a6:	f7ff fdee 	bl	8018586 <rshift>
 80189aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80189ae:	2702      	movs	r7, #2
 80189b0:	f1ba 0f00 	cmp.w	sl, #0
 80189b4:	d048      	beq.n	8018a48 <__gethex+0x3f4>
 80189b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80189ba:	2b02      	cmp	r3, #2
 80189bc:	d015      	beq.n	80189ea <__gethex+0x396>
 80189be:	2b03      	cmp	r3, #3
 80189c0:	d017      	beq.n	80189f2 <__gethex+0x39e>
 80189c2:	2b01      	cmp	r3, #1
 80189c4:	d109      	bne.n	80189da <__gethex+0x386>
 80189c6:	f01a 0f02 	tst.w	sl, #2
 80189ca:	d006      	beq.n	80189da <__gethex+0x386>
 80189cc:	f8d9 0000 	ldr.w	r0, [r9]
 80189d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80189d4:	f01a 0f01 	tst.w	sl, #1
 80189d8:	d10e      	bne.n	80189f8 <__gethex+0x3a4>
 80189da:	f047 0710 	orr.w	r7, r7, #16
 80189de:	e033      	b.n	8018a48 <__gethex+0x3f4>
 80189e0:	f04f 0a01 	mov.w	sl, #1
 80189e4:	e7d0      	b.n	8018988 <__gethex+0x334>
 80189e6:	2701      	movs	r7, #1
 80189e8:	e7e2      	b.n	80189b0 <__gethex+0x35c>
 80189ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189ec:	f1c3 0301 	rsb	r3, r3, #1
 80189f0:	9315      	str	r3, [sp, #84]	; 0x54
 80189f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d0f0      	beq.n	80189da <__gethex+0x386>
 80189f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80189fc:	f104 0314 	add.w	r3, r4, #20
 8018a00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018a04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018a08:	f04f 0c00 	mov.w	ip, #0
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018a16:	d01c      	beq.n	8018a52 <__gethex+0x3fe>
 8018a18:	3201      	adds	r2, #1
 8018a1a:	6002      	str	r2, [r0, #0]
 8018a1c:	2f02      	cmp	r7, #2
 8018a1e:	f104 0314 	add.w	r3, r4, #20
 8018a22:	d13f      	bne.n	8018aa4 <__gethex+0x450>
 8018a24:	f8d8 2000 	ldr.w	r2, [r8]
 8018a28:	3a01      	subs	r2, #1
 8018a2a:	42b2      	cmp	r2, r6
 8018a2c:	d10a      	bne.n	8018a44 <__gethex+0x3f0>
 8018a2e:	1171      	asrs	r1, r6, #5
 8018a30:	2201      	movs	r2, #1
 8018a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018a36:	f006 061f 	and.w	r6, r6, #31
 8018a3a:	fa02 f606 	lsl.w	r6, r2, r6
 8018a3e:	421e      	tst	r6, r3
 8018a40:	bf18      	it	ne
 8018a42:	4617      	movne	r7, r2
 8018a44:	f047 0720 	orr.w	r7, r7, #32
 8018a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a4a:	601c      	str	r4, [r3, #0]
 8018a4c:	9b04      	ldr	r3, [sp, #16]
 8018a4e:	601d      	str	r5, [r3, #0]
 8018a50:	e695      	b.n	801877e <__gethex+0x12a>
 8018a52:	4299      	cmp	r1, r3
 8018a54:	f843 cc04 	str.w	ip, [r3, #-4]
 8018a58:	d8d8      	bhi.n	8018a0c <__gethex+0x3b8>
 8018a5a:	68a3      	ldr	r3, [r4, #8]
 8018a5c:	459b      	cmp	fp, r3
 8018a5e:	db19      	blt.n	8018a94 <__gethex+0x440>
 8018a60:	6861      	ldr	r1, [r4, #4]
 8018a62:	ee18 0a10 	vmov	r0, s16
 8018a66:	3101      	adds	r1, #1
 8018a68:	f000 f91e 	bl	8018ca8 <_Balloc>
 8018a6c:	4681      	mov	r9, r0
 8018a6e:	b918      	cbnz	r0, 8018a78 <__gethex+0x424>
 8018a70:	4b1a      	ldr	r3, [pc, #104]	; (8018adc <__gethex+0x488>)
 8018a72:	4602      	mov	r2, r0
 8018a74:	2184      	movs	r1, #132	; 0x84
 8018a76:	e6a8      	b.n	80187ca <__gethex+0x176>
 8018a78:	6922      	ldr	r2, [r4, #16]
 8018a7a:	3202      	adds	r2, #2
 8018a7c:	f104 010c 	add.w	r1, r4, #12
 8018a80:	0092      	lsls	r2, r2, #2
 8018a82:	300c      	adds	r0, #12
 8018a84:	f7fd f962 	bl	8015d4c <memcpy>
 8018a88:	4621      	mov	r1, r4
 8018a8a:	ee18 0a10 	vmov	r0, s16
 8018a8e:	f000 f94b 	bl	8018d28 <_Bfree>
 8018a92:	464c      	mov	r4, r9
 8018a94:	6923      	ldr	r3, [r4, #16]
 8018a96:	1c5a      	adds	r2, r3, #1
 8018a98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018a9c:	6122      	str	r2, [r4, #16]
 8018a9e:	2201      	movs	r2, #1
 8018aa0:	615a      	str	r2, [r3, #20]
 8018aa2:	e7bb      	b.n	8018a1c <__gethex+0x3c8>
 8018aa4:	6922      	ldr	r2, [r4, #16]
 8018aa6:	455a      	cmp	r2, fp
 8018aa8:	dd0b      	ble.n	8018ac2 <__gethex+0x46e>
 8018aaa:	2101      	movs	r1, #1
 8018aac:	4620      	mov	r0, r4
 8018aae:	f7ff fd6a 	bl	8018586 <rshift>
 8018ab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ab6:	3501      	adds	r5, #1
 8018ab8:	42ab      	cmp	r3, r5
 8018aba:	f6ff aed0 	blt.w	801885e <__gethex+0x20a>
 8018abe:	2701      	movs	r7, #1
 8018ac0:	e7c0      	b.n	8018a44 <__gethex+0x3f0>
 8018ac2:	f016 061f 	ands.w	r6, r6, #31
 8018ac6:	d0fa      	beq.n	8018abe <__gethex+0x46a>
 8018ac8:	449a      	add	sl, r3
 8018aca:	f1c6 0620 	rsb	r6, r6, #32
 8018ace:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018ad2:	f000 f9df 	bl	8018e94 <__hi0bits>
 8018ad6:	42b0      	cmp	r0, r6
 8018ad8:	dbe7      	blt.n	8018aaa <__gethex+0x456>
 8018ada:	e7f0      	b.n	8018abe <__gethex+0x46a>
 8018adc:	0801c944 	.word	0x0801c944

08018ae0 <L_shift>:
 8018ae0:	f1c2 0208 	rsb	r2, r2, #8
 8018ae4:	0092      	lsls	r2, r2, #2
 8018ae6:	b570      	push	{r4, r5, r6, lr}
 8018ae8:	f1c2 0620 	rsb	r6, r2, #32
 8018aec:	6843      	ldr	r3, [r0, #4]
 8018aee:	6804      	ldr	r4, [r0, #0]
 8018af0:	fa03 f506 	lsl.w	r5, r3, r6
 8018af4:	432c      	orrs	r4, r5
 8018af6:	40d3      	lsrs	r3, r2
 8018af8:	6004      	str	r4, [r0, #0]
 8018afa:	f840 3f04 	str.w	r3, [r0, #4]!
 8018afe:	4288      	cmp	r0, r1
 8018b00:	d3f4      	bcc.n	8018aec <L_shift+0xc>
 8018b02:	bd70      	pop	{r4, r5, r6, pc}

08018b04 <__match>:
 8018b04:	b530      	push	{r4, r5, lr}
 8018b06:	6803      	ldr	r3, [r0, #0]
 8018b08:	3301      	adds	r3, #1
 8018b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b0e:	b914      	cbnz	r4, 8018b16 <__match+0x12>
 8018b10:	6003      	str	r3, [r0, #0]
 8018b12:	2001      	movs	r0, #1
 8018b14:	bd30      	pop	{r4, r5, pc}
 8018b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018b1e:	2d19      	cmp	r5, #25
 8018b20:	bf98      	it	ls
 8018b22:	3220      	addls	r2, #32
 8018b24:	42a2      	cmp	r2, r4
 8018b26:	d0f0      	beq.n	8018b0a <__match+0x6>
 8018b28:	2000      	movs	r0, #0
 8018b2a:	e7f3      	b.n	8018b14 <__match+0x10>

08018b2c <__hexnan>:
 8018b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b30:	680b      	ldr	r3, [r1, #0]
 8018b32:	6801      	ldr	r1, [r0, #0]
 8018b34:	115e      	asrs	r6, r3, #5
 8018b36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018b3a:	f013 031f 	ands.w	r3, r3, #31
 8018b3e:	b087      	sub	sp, #28
 8018b40:	bf18      	it	ne
 8018b42:	3604      	addne	r6, #4
 8018b44:	2500      	movs	r5, #0
 8018b46:	1f37      	subs	r7, r6, #4
 8018b48:	4682      	mov	sl, r0
 8018b4a:	4690      	mov	r8, r2
 8018b4c:	9301      	str	r3, [sp, #4]
 8018b4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8018b52:	46b9      	mov	r9, r7
 8018b54:	463c      	mov	r4, r7
 8018b56:	9502      	str	r5, [sp, #8]
 8018b58:	46ab      	mov	fp, r5
 8018b5a:	784a      	ldrb	r2, [r1, #1]
 8018b5c:	1c4b      	adds	r3, r1, #1
 8018b5e:	9303      	str	r3, [sp, #12]
 8018b60:	b342      	cbz	r2, 8018bb4 <__hexnan+0x88>
 8018b62:	4610      	mov	r0, r2
 8018b64:	9105      	str	r1, [sp, #20]
 8018b66:	9204      	str	r2, [sp, #16]
 8018b68:	f7ff fd5f 	bl	801862a <__hexdig_fun>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	d14f      	bne.n	8018c10 <__hexnan+0xe4>
 8018b70:	9a04      	ldr	r2, [sp, #16]
 8018b72:	9905      	ldr	r1, [sp, #20]
 8018b74:	2a20      	cmp	r2, #32
 8018b76:	d818      	bhi.n	8018baa <__hexnan+0x7e>
 8018b78:	9b02      	ldr	r3, [sp, #8]
 8018b7a:	459b      	cmp	fp, r3
 8018b7c:	dd13      	ble.n	8018ba6 <__hexnan+0x7a>
 8018b7e:	454c      	cmp	r4, r9
 8018b80:	d206      	bcs.n	8018b90 <__hexnan+0x64>
 8018b82:	2d07      	cmp	r5, #7
 8018b84:	dc04      	bgt.n	8018b90 <__hexnan+0x64>
 8018b86:	462a      	mov	r2, r5
 8018b88:	4649      	mov	r1, r9
 8018b8a:	4620      	mov	r0, r4
 8018b8c:	f7ff ffa8 	bl	8018ae0 <L_shift>
 8018b90:	4544      	cmp	r4, r8
 8018b92:	d950      	bls.n	8018c36 <__hexnan+0x10a>
 8018b94:	2300      	movs	r3, #0
 8018b96:	f1a4 0904 	sub.w	r9, r4, #4
 8018b9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8018b9e:	f8cd b008 	str.w	fp, [sp, #8]
 8018ba2:	464c      	mov	r4, r9
 8018ba4:	461d      	mov	r5, r3
 8018ba6:	9903      	ldr	r1, [sp, #12]
 8018ba8:	e7d7      	b.n	8018b5a <__hexnan+0x2e>
 8018baa:	2a29      	cmp	r2, #41	; 0x29
 8018bac:	d156      	bne.n	8018c5c <__hexnan+0x130>
 8018bae:	3102      	adds	r1, #2
 8018bb0:	f8ca 1000 	str.w	r1, [sl]
 8018bb4:	f1bb 0f00 	cmp.w	fp, #0
 8018bb8:	d050      	beq.n	8018c5c <__hexnan+0x130>
 8018bba:	454c      	cmp	r4, r9
 8018bbc:	d206      	bcs.n	8018bcc <__hexnan+0xa0>
 8018bbe:	2d07      	cmp	r5, #7
 8018bc0:	dc04      	bgt.n	8018bcc <__hexnan+0xa0>
 8018bc2:	462a      	mov	r2, r5
 8018bc4:	4649      	mov	r1, r9
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	f7ff ff8a 	bl	8018ae0 <L_shift>
 8018bcc:	4544      	cmp	r4, r8
 8018bce:	d934      	bls.n	8018c3a <__hexnan+0x10e>
 8018bd0:	f1a8 0204 	sub.w	r2, r8, #4
 8018bd4:	4623      	mov	r3, r4
 8018bd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8018bda:	f842 1f04 	str.w	r1, [r2, #4]!
 8018bde:	429f      	cmp	r7, r3
 8018be0:	d2f9      	bcs.n	8018bd6 <__hexnan+0xaa>
 8018be2:	1b3b      	subs	r3, r7, r4
 8018be4:	f023 0303 	bic.w	r3, r3, #3
 8018be8:	3304      	adds	r3, #4
 8018bea:	3401      	adds	r4, #1
 8018bec:	3e03      	subs	r6, #3
 8018bee:	42b4      	cmp	r4, r6
 8018bf0:	bf88      	it	hi
 8018bf2:	2304      	movhi	r3, #4
 8018bf4:	4443      	add	r3, r8
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	f843 2b04 	str.w	r2, [r3], #4
 8018bfc:	429f      	cmp	r7, r3
 8018bfe:	d2fb      	bcs.n	8018bf8 <__hexnan+0xcc>
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	b91b      	cbnz	r3, 8018c0c <__hexnan+0xe0>
 8018c04:	4547      	cmp	r7, r8
 8018c06:	d127      	bne.n	8018c58 <__hexnan+0x12c>
 8018c08:	2301      	movs	r3, #1
 8018c0a:	603b      	str	r3, [r7, #0]
 8018c0c:	2005      	movs	r0, #5
 8018c0e:	e026      	b.n	8018c5e <__hexnan+0x132>
 8018c10:	3501      	adds	r5, #1
 8018c12:	2d08      	cmp	r5, #8
 8018c14:	f10b 0b01 	add.w	fp, fp, #1
 8018c18:	dd06      	ble.n	8018c28 <__hexnan+0xfc>
 8018c1a:	4544      	cmp	r4, r8
 8018c1c:	d9c3      	bls.n	8018ba6 <__hexnan+0x7a>
 8018c1e:	2300      	movs	r3, #0
 8018c20:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c24:	2501      	movs	r5, #1
 8018c26:	3c04      	subs	r4, #4
 8018c28:	6822      	ldr	r2, [r4, #0]
 8018c2a:	f000 000f 	and.w	r0, r0, #15
 8018c2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018c32:	6022      	str	r2, [r4, #0]
 8018c34:	e7b7      	b.n	8018ba6 <__hexnan+0x7a>
 8018c36:	2508      	movs	r5, #8
 8018c38:	e7b5      	b.n	8018ba6 <__hexnan+0x7a>
 8018c3a:	9b01      	ldr	r3, [sp, #4]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d0df      	beq.n	8018c00 <__hexnan+0xd4>
 8018c40:	f04f 32ff 	mov.w	r2, #4294967295
 8018c44:	f1c3 0320 	rsb	r3, r3, #32
 8018c48:	fa22 f303 	lsr.w	r3, r2, r3
 8018c4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018c50:	401a      	ands	r2, r3
 8018c52:	f846 2c04 	str.w	r2, [r6, #-4]
 8018c56:	e7d3      	b.n	8018c00 <__hexnan+0xd4>
 8018c58:	3f04      	subs	r7, #4
 8018c5a:	e7d1      	b.n	8018c00 <__hexnan+0xd4>
 8018c5c:	2004      	movs	r0, #4
 8018c5e:	b007      	add	sp, #28
 8018c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c64 <_localeconv_r>:
 8018c64:	4800      	ldr	r0, [pc, #0]	; (8018c68 <_localeconv_r+0x4>)
 8018c66:	4770      	bx	lr
 8018c68:	200003ac 	.word	0x200003ac

08018c6c <__retarget_lock_init_recursive>:
 8018c6c:	4770      	bx	lr

08018c6e <__retarget_lock_acquire_recursive>:
 8018c6e:	4770      	bx	lr

08018c70 <__retarget_lock_release_recursive>:
 8018c70:	4770      	bx	lr
	...

08018c74 <malloc>:
 8018c74:	4b02      	ldr	r3, [pc, #8]	; (8018c80 <malloc+0xc>)
 8018c76:	4601      	mov	r1, r0
 8018c78:	6818      	ldr	r0, [r3, #0]
 8018c7a:	f000 bd31 	b.w	80196e0 <_malloc_r>
 8018c7e:	bf00      	nop
 8018c80:	20000254 	.word	0x20000254

08018c84 <__ascii_mbtowc>:
 8018c84:	b082      	sub	sp, #8
 8018c86:	b901      	cbnz	r1, 8018c8a <__ascii_mbtowc+0x6>
 8018c88:	a901      	add	r1, sp, #4
 8018c8a:	b142      	cbz	r2, 8018c9e <__ascii_mbtowc+0x1a>
 8018c8c:	b14b      	cbz	r3, 8018ca2 <__ascii_mbtowc+0x1e>
 8018c8e:	7813      	ldrb	r3, [r2, #0]
 8018c90:	600b      	str	r3, [r1, #0]
 8018c92:	7812      	ldrb	r2, [r2, #0]
 8018c94:	1e10      	subs	r0, r2, #0
 8018c96:	bf18      	it	ne
 8018c98:	2001      	movne	r0, #1
 8018c9a:	b002      	add	sp, #8
 8018c9c:	4770      	bx	lr
 8018c9e:	4610      	mov	r0, r2
 8018ca0:	e7fb      	b.n	8018c9a <__ascii_mbtowc+0x16>
 8018ca2:	f06f 0001 	mvn.w	r0, #1
 8018ca6:	e7f8      	b.n	8018c9a <__ascii_mbtowc+0x16>

08018ca8 <_Balloc>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018cac:	4604      	mov	r4, r0
 8018cae:	460d      	mov	r5, r1
 8018cb0:	b976      	cbnz	r6, 8018cd0 <_Balloc+0x28>
 8018cb2:	2010      	movs	r0, #16
 8018cb4:	f7ff ffde 	bl	8018c74 <malloc>
 8018cb8:	4602      	mov	r2, r0
 8018cba:	6260      	str	r0, [r4, #36]	; 0x24
 8018cbc:	b920      	cbnz	r0, 8018cc8 <_Balloc+0x20>
 8018cbe:	4b18      	ldr	r3, [pc, #96]	; (8018d20 <_Balloc+0x78>)
 8018cc0:	4818      	ldr	r0, [pc, #96]	; (8018d24 <_Balloc+0x7c>)
 8018cc2:	2166      	movs	r1, #102	; 0x66
 8018cc4:	f001 f96a 	bl	8019f9c <__assert_func>
 8018cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ccc:	6006      	str	r6, [r0, #0]
 8018cce:	60c6      	str	r6, [r0, #12]
 8018cd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018cd2:	68f3      	ldr	r3, [r6, #12]
 8018cd4:	b183      	cbz	r3, 8018cf8 <_Balloc+0x50>
 8018cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cd8:	68db      	ldr	r3, [r3, #12]
 8018cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018cde:	b9b8      	cbnz	r0, 8018d10 <_Balloc+0x68>
 8018ce0:	2101      	movs	r1, #1
 8018ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8018ce6:	1d72      	adds	r2, r6, #5
 8018ce8:	0092      	lsls	r2, r2, #2
 8018cea:	4620      	mov	r0, r4
 8018cec:	f000 fc98 	bl	8019620 <_calloc_r>
 8018cf0:	b160      	cbz	r0, 8018d0c <_Balloc+0x64>
 8018cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018cf6:	e00e      	b.n	8018d16 <_Balloc+0x6e>
 8018cf8:	2221      	movs	r2, #33	; 0x21
 8018cfa:	2104      	movs	r1, #4
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	f000 fc8f 	bl	8019620 <_calloc_r>
 8018d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d04:	60f0      	str	r0, [r6, #12]
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d1e4      	bne.n	8018cd6 <_Balloc+0x2e>
 8018d0c:	2000      	movs	r0, #0
 8018d0e:	bd70      	pop	{r4, r5, r6, pc}
 8018d10:	6802      	ldr	r2, [r0, #0]
 8018d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018d16:	2300      	movs	r3, #0
 8018d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018d1c:	e7f7      	b.n	8018d0e <_Balloc+0x66>
 8018d1e:	bf00      	nop
 8018d20:	0801c8ce 	.word	0x0801c8ce
 8018d24:	0801ca38 	.word	0x0801ca38

08018d28 <_Bfree>:
 8018d28:	b570      	push	{r4, r5, r6, lr}
 8018d2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018d2c:	4605      	mov	r5, r0
 8018d2e:	460c      	mov	r4, r1
 8018d30:	b976      	cbnz	r6, 8018d50 <_Bfree+0x28>
 8018d32:	2010      	movs	r0, #16
 8018d34:	f7ff ff9e 	bl	8018c74 <malloc>
 8018d38:	4602      	mov	r2, r0
 8018d3a:	6268      	str	r0, [r5, #36]	; 0x24
 8018d3c:	b920      	cbnz	r0, 8018d48 <_Bfree+0x20>
 8018d3e:	4b09      	ldr	r3, [pc, #36]	; (8018d64 <_Bfree+0x3c>)
 8018d40:	4809      	ldr	r0, [pc, #36]	; (8018d68 <_Bfree+0x40>)
 8018d42:	218a      	movs	r1, #138	; 0x8a
 8018d44:	f001 f92a 	bl	8019f9c <__assert_func>
 8018d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d4c:	6006      	str	r6, [r0, #0]
 8018d4e:	60c6      	str	r6, [r0, #12]
 8018d50:	b13c      	cbz	r4, 8018d62 <_Bfree+0x3a>
 8018d52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018d54:	6862      	ldr	r2, [r4, #4]
 8018d56:	68db      	ldr	r3, [r3, #12]
 8018d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d5c:	6021      	str	r1, [r4, #0]
 8018d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018d62:	bd70      	pop	{r4, r5, r6, pc}
 8018d64:	0801c8ce 	.word	0x0801c8ce
 8018d68:	0801ca38 	.word	0x0801ca38

08018d6c <__multadd>:
 8018d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d70:	690e      	ldr	r6, [r1, #16]
 8018d72:	4607      	mov	r7, r0
 8018d74:	4698      	mov	r8, r3
 8018d76:	460c      	mov	r4, r1
 8018d78:	f101 0014 	add.w	r0, r1, #20
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	6805      	ldr	r5, [r0, #0]
 8018d80:	b2a9      	uxth	r1, r5
 8018d82:	fb02 8101 	mla	r1, r2, r1, r8
 8018d86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018d8a:	0c2d      	lsrs	r5, r5, #16
 8018d8c:	fb02 c505 	mla	r5, r2, r5, ip
 8018d90:	b289      	uxth	r1, r1
 8018d92:	3301      	adds	r3, #1
 8018d94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018d98:	429e      	cmp	r6, r3
 8018d9a:	f840 1b04 	str.w	r1, [r0], #4
 8018d9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018da2:	dcec      	bgt.n	8018d7e <__multadd+0x12>
 8018da4:	f1b8 0f00 	cmp.w	r8, #0
 8018da8:	d022      	beq.n	8018df0 <__multadd+0x84>
 8018daa:	68a3      	ldr	r3, [r4, #8]
 8018dac:	42b3      	cmp	r3, r6
 8018dae:	dc19      	bgt.n	8018de4 <__multadd+0x78>
 8018db0:	6861      	ldr	r1, [r4, #4]
 8018db2:	4638      	mov	r0, r7
 8018db4:	3101      	adds	r1, #1
 8018db6:	f7ff ff77 	bl	8018ca8 <_Balloc>
 8018dba:	4605      	mov	r5, r0
 8018dbc:	b928      	cbnz	r0, 8018dca <__multadd+0x5e>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	4b0d      	ldr	r3, [pc, #52]	; (8018df8 <__multadd+0x8c>)
 8018dc2:	480e      	ldr	r0, [pc, #56]	; (8018dfc <__multadd+0x90>)
 8018dc4:	21b5      	movs	r1, #181	; 0xb5
 8018dc6:	f001 f8e9 	bl	8019f9c <__assert_func>
 8018dca:	6922      	ldr	r2, [r4, #16]
 8018dcc:	3202      	adds	r2, #2
 8018dce:	f104 010c 	add.w	r1, r4, #12
 8018dd2:	0092      	lsls	r2, r2, #2
 8018dd4:	300c      	adds	r0, #12
 8018dd6:	f7fc ffb9 	bl	8015d4c <memcpy>
 8018dda:	4621      	mov	r1, r4
 8018ddc:	4638      	mov	r0, r7
 8018dde:	f7ff ffa3 	bl	8018d28 <_Bfree>
 8018de2:	462c      	mov	r4, r5
 8018de4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018de8:	3601      	adds	r6, #1
 8018dea:	f8c3 8014 	str.w	r8, [r3, #20]
 8018dee:	6126      	str	r6, [r4, #16]
 8018df0:	4620      	mov	r0, r4
 8018df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df6:	bf00      	nop
 8018df8:	0801c944 	.word	0x0801c944
 8018dfc:	0801ca38 	.word	0x0801ca38

08018e00 <__s2b>:
 8018e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e04:	460c      	mov	r4, r1
 8018e06:	4615      	mov	r5, r2
 8018e08:	461f      	mov	r7, r3
 8018e0a:	2209      	movs	r2, #9
 8018e0c:	3308      	adds	r3, #8
 8018e0e:	4606      	mov	r6, r0
 8018e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8018e14:	2100      	movs	r1, #0
 8018e16:	2201      	movs	r2, #1
 8018e18:	429a      	cmp	r2, r3
 8018e1a:	db09      	blt.n	8018e30 <__s2b+0x30>
 8018e1c:	4630      	mov	r0, r6
 8018e1e:	f7ff ff43 	bl	8018ca8 <_Balloc>
 8018e22:	b940      	cbnz	r0, 8018e36 <__s2b+0x36>
 8018e24:	4602      	mov	r2, r0
 8018e26:	4b19      	ldr	r3, [pc, #100]	; (8018e8c <__s2b+0x8c>)
 8018e28:	4819      	ldr	r0, [pc, #100]	; (8018e90 <__s2b+0x90>)
 8018e2a:	21ce      	movs	r1, #206	; 0xce
 8018e2c:	f001 f8b6 	bl	8019f9c <__assert_func>
 8018e30:	0052      	lsls	r2, r2, #1
 8018e32:	3101      	adds	r1, #1
 8018e34:	e7f0      	b.n	8018e18 <__s2b+0x18>
 8018e36:	9b08      	ldr	r3, [sp, #32]
 8018e38:	6143      	str	r3, [r0, #20]
 8018e3a:	2d09      	cmp	r5, #9
 8018e3c:	f04f 0301 	mov.w	r3, #1
 8018e40:	6103      	str	r3, [r0, #16]
 8018e42:	dd16      	ble.n	8018e72 <__s2b+0x72>
 8018e44:	f104 0909 	add.w	r9, r4, #9
 8018e48:	46c8      	mov	r8, r9
 8018e4a:	442c      	add	r4, r5
 8018e4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018e50:	4601      	mov	r1, r0
 8018e52:	3b30      	subs	r3, #48	; 0x30
 8018e54:	220a      	movs	r2, #10
 8018e56:	4630      	mov	r0, r6
 8018e58:	f7ff ff88 	bl	8018d6c <__multadd>
 8018e5c:	45a0      	cmp	r8, r4
 8018e5e:	d1f5      	bne.n	8018e4c <__s2b+0x4c>
 8018e60:	f1a5 0408 	sub.w	r4, r5, #8
 8018e64:	444c      	add	r4, r9
 8018e66:	1b2d      	subs	r5, r5, r4
 8018e68:	1963      	adds	r3, r4, r5
 8018e6a:	42bb      	cmp	r3, r7
 8018e6c:	db04      	blt.n	8018e78 <__s2b+0x78>
 8018e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e72:	340a      	adds	r4, #10
 8018e74:	2509      	movs	r5, #9
 8018e76:	e7f6      	b.n	8018e66 <__s2b+0x66>
 8018e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e7c:	4601      	mov	r1, r0
 8018e7e:	3b30      	subs	r3, #48	; 0x30
 8018e80:	220a      	movs	r2, #10
 8018e82:	4630      	mov	r0, r6
 8018e84:	f7ff ff72 	bl	8018d6c <__multadd>
 8018e88:	e7ee      	b.n	8018e68 <__s2b+0x68>
 8018e8a:	bf00      	nop
 8018e8c:	0801c944 	.word	0x0801c944
 8018e90:	0801ca38 	.word	0x0801ca38

08018e94 <__hi0bits>:
 8018e94:	0c03      	lsrs	r3, r0, #16
 8018e96:	041b      	lsls	r3, r3, #16
 8018e98:	b9d3      	cbnz	r3, 8018ed0 <__hi0bits+0x3c>
 8018e9a:	0400      	lsls	r0, r0, #16
 8018e9c:	2310      	movs	r3, #16
 8018e9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018ea2:	bf04      	itt	eq
 8018ea4:	0200      	lsleq	r0, r0, #8
 8018ea6:	3308      	addeq	r3, #8
 8018ea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018eac:	bf04      	itt	eq
 8018eae:	0100      	lsleq	r0, r0, #4
 8018eb0:	3304      	addeq	r3, #4
 8018eb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018eb6:	bf04      	itt	eq
 8018eb8:	0080      	lsleq	r0, r0, #2
 8018eba:	3302      	addeq	r3, #2
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	db05      	blt.n	8018ecc <__hi0bits+0x38>
 8018ec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018ec4:	f103 0301 	add.w	r3, r3, #1
 8018ec8:	bf08      	it	eq
 8018eca:	2320      	moveq	r3, #32
 8018ecc:	4618      	mov	r0, r3
 8018ece:	4770      	bx	lr
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	e7e4      	b.n	8018e9e <__hi0bits+0xa>

08018ed4 <__lo0bits>:
 8018ed4:	6803      	ldr	r3, [r0, #0]
 8018ed6:	f013 0207 	ands.w	r2, r3, #7
 8018eda:	4601      	mov	r1, r0
 8018edc:	d00b      	beq.n	8018ef6 <__lo0bits+0x22>
 8018ede:	07da      	lsls	r2, r3, #31
 8018ee0:	d424      	bmi.n	8018f2c <__lo0bits+0x58>
 8018ee2:	0798      	lsls	r0, r3, #30
 8018ee4:	bf49      	itett	mi
 8018ee6:	085b      	lsrmi	r3, r3, #1
 8018ee8:	089b      	lsrpl	r3, r3, #2
 8018eea:	2001      	movmi	r0, #1
 8018eec:	600b      	strmi	r3, [r1, #0]
 8018eee:	bf5c      	itt	pl
 8018ef0:	600b      	strpl	r3, [r1, #0]
 8018ef2:	2002      	movpl	r0, #2
 8018ef4:	4770      	bx	lr
 8018ef6:	b298      	uxth	r0, r3
 8018ef8:	b9b0      	cbnz	r0, 8018f28 <__lo0bits+0x54>
 8018efa:	0c1b      	lsrs	r3, r3, #16
 8018efc:	2010      	movs	r0, #16
 8018efe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018f02:	bf04      	itt	eq
 8018f04:	0a1b      	lsreq	r3, r3, #8
 8018f06:	3008      	addeq	r0, #8
 8018f08:	071a      	lsls	r2, r3, #28
 8018f0a:	bf04      	itt	eq
 8018f0c:	091b      	lsreq	r3, r3, #4
 8018f0e:	3004      	addeq	r0, #4
 8018f10:	079a      	lsls	r2, r3, #30
 8018f12:	bf04      	itt	eq
 8018f14:	089b      	lsreq	r3, r3, #2
 8018f16:	3002      	addeq	r0, #2
 8018f18:	07da      	lsls	r2, r3, #31
 8018f1a:	d403      	bmi.n	8018f24 <__lo0bits+0x50>
 8018f1c:	085b      	lsrs	r3, r3, #1
 8018f1e:	f100 0001 	add.w	r0, r0, #1
 8018f22:	d005      	beq.n	8018f30 <__lo0bits+0x5c>
 8018f24:	600b      	str	r3, [r1, #0]
 8018f26:	4770      	bx	lr
 8018f28:	4610      	mov	r0, r2
 8018f2a:	e7e8      	b.n	8018efe <__lo0bits+0x2a>
 8018f2c:	2000      	movs	r0, #0
 8018f2e:	4770      	bx	lr
 8018f30:	2020      	movs	r0, #32
 8018f32:	4770      	bx	lr

08018f34 <__i2b>:
 8018f34:	b510      	push	{r4, lr}
 8018f36:	460c      	mov	r4, r1
 8018f38:	2101      	movs	r1, #1
 8018f3a:	f7ff feb5 	bl	8018ca8 <_Balloc>
 8018f3e:	4602      	mov	r2, r0
 8018f40:	b928      	cbnz	r0, 8018f4e <__i2b+0x1a>
 8018f42:	4b05      	ldr	r3, [pc, #20]	; (8018f58 <__i2b+0x24>)
 8018f44:	4805      	ldr	r0, [pc, #20]	; (8018f5c <__i2b+0x28>)
 8018f46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018f4a:	f001 f827 	bl	8019f9c <__assert_func>
 8018f4e:	2301      	movs	r3, #1
 8018f50:	6144      	str	r4, [r0, #20]
 8018f52:	6103      	str	r3, [r0, #16]
 8018f54:	bd10      	pop	{r4, pc}
 8018f56:	bf00      	nop
 8018f58:	0801c944 	.word	0x0801c944
 8018f5c:	0801ca38 	.word	0x0801ca38

08018f60 <__multiply>:
 8018f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f64:	4614      	mov	r4, r2
 8018f66:	690a      	ldr	r2, [r1, #16]
 8018f68:	6923      	ldr	r3, [r4, #16]
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	bfb8      	it	lt
 8018f6e:	460b      	movlt	r3, r1
 8018f70:	460d      	mov	r5, r1
 8018f72:	bfbc      	itt	lt
 8018f74:	4625      	movlt	r5, r4
 8018f76:	461c      	movlt	r4, r3
 8018f78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018f7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018f80:	68ab      	ldr	r3, [r5, #8]
 8018f82:	6869      	ldr	r1, [r5, #4]
 8018f84:	eb0a 0709 	add.w	r7, sl, r9
 8018f88:	42bb      	cmp	r3, r7
 8018f8a:	b085      	sub	sp, #20
 8018f8c:	bfb8      	it	lt
 8018f8e:	3101      	addlt	r1, #1
 8018f90:	f7ff fe8a 	bl	8018ca8 <_Balloc>
 8018f94:	b930      	cbnz	r0, 8018fa4 <__multiply+0x44>
 8018f96:	4602      	mov	r2, r0
 8018f98:	4b42      	ldr	r3, [pc, #264]	; (80190a4 <__multiply+0x144>)
 8018f9a:	4843      	ldr	r0, [pc, #268]	; (80190a8 <__multiply+0x148>)
 8018f9c:	f240 115d 	movw	r1, #349	; 0x15d
 8018fa0:	f000 fffc 	bl	8019f9c <__assert_func>
 8018fa4:	f100 0614 	add.w	r6, r0, #20
 8018fa8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018fac:	4633      	mov	r3, r6
 8018fae:	2200      	movs	r2, #0
 8018fb0:	4543      	cmp	r3, r8
 8018fb2:	d31e      	bcc.n	8018ff2 <__multiply+0x92>
 8018fb4:	f105 0c14 	add.w	ip, r5, #20
 8018fb8:	f104 0314 	add.w	r3, r4, #20
 8018fbc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018fc0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018fc4:	9202      	str	r2, [sp, #8]
 8018fc6:	ebac 0205 	sub.w	r2, ip, r5
 8018fca:	3a15      	subs	r2, #21
 8018fcc:	f022 0203 	bic.w	r2, r2, #3
 8018fd0:	3204      	adds	r2, #4
 8018fd2:	f105 0115 	add.w	r1, r5, #21
 8018fd6:	458c      	cmp	ip, r1
 8018fd8:	bf38      	it	cc
 8018fda:	2204      	movcc	r2, #4
 8018fdc:	9201      	str	r2, [sp, #4]
 8018fde:	9a02      	ldr	r2, [sp, #8]
 8018fe0:	9303      	str	r3, [sp, #12]
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	d808      	bhi.n	8018ff8 <__multiply+0x98>
 8018fe6:	2f00      	cmp	r7, #0
 8018fe8:	dc55      	bgt.n	8019096 <__multiply+0x136>
 8018fea:	6107      	str	r7, [r0, #16]
 8018fec:	b005      	add	sp, #20
 8018fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff2:	f843 2b04 	str.w	r2, [r3], #4
 8018ff6:	e7db      	b.n	8018fb0 <__multiply+0x50>
 8018ff8:	f8b3 a000 	ldrh.w	sl, [r3]
 8018ffc:	f1ba 0f00 	cmp.w	sl, #0
 8019000:	d020      	beq.n	8019044 <__multiply+0xe4>
 8019002:	f105 0e14 	add.w	lr, r5, #20
 8019006:	46b1      	mov	r9, r6
 8019008:	2200      	movs	r2, #0
 801900a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801900e:	f8d9 b000 	ldr.w	fp, [r9]
 8019012:	b2a1      	uxth	r1, r4
 8019014:	fa1f fb8b 	uxth.w	fp, fp
 8019018:	fb0a b101 	mla	r1, sl, r1, fp
 801901c:	4411      	add	r1, r2
 801901e:	f8d9 2000 	ldr.w	r2, [r9]
 8019022:	0c24      	lsrs	r4, r4, #16
 8019024:	0c12      	lsrs	r2, r2, #16
 8019026:	fb0a 2404 	mla	r4, sl, r4, r2
 801902a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801902e:	b289      	uxth	r1, r1
 8019030:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019034:	45f4      	cmp	ip, lr
 8019036:	f849 1b04 	str.w	r1, [r9], #4
 801903a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801903e:	d8e4      	bhi.n	801900a <__multiply+0xaa>
 8019040:	9901      	ldr	r1, [sp, #4]
 8019042:	5072      	str	r2, [r6, r1]
 8019044:	9a03      	ldr	r2, [sp, #12]
 8019046:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801904a:	3304      	adds	r3, #4
 801904c:	f1b9 0f00 	cmp.w	r9, #0
 8019050:	d01f      	beq.n	8019092 <__multiply+0x132>
 8019052:	6834      	ldr	r4, [r6, #0]
 8019054:	f105 0114 	add.w	r1, r5, #20
 8019058:	46b6      	mov	lr, r6
 801905a:	f04f 0a00 	mov.w	sl, #0
 801905e:	880a      	ldrh	r2, [r1, #0]
 8019060:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019064:	fb09 b202 	mla	r2, r9, r2, fp
 8019068:	4492      	add	sl, r2
 801906a:	b2a4      	uxth	r4, r4
 801906c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019070:	f84e 4b04 	str.w	r4, [lr], #4
 8019074:	f851 4b04 	ldr.w	r4, [r1], #4
 8019078:	f8be 2000 	ldrh.w	r2, [lr]
 801907c:	0c24      	lsrs	r4, r4, #16
 801907e:	fb09 2404 	mla	r4, r9, r4, r2
 8019082:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019086:	458c      	cmp	ip, r1
 8019088:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801908c:	d8e7      	bhi.n	801905e <__multiply+0xfe>
 801908e:	9a01      	ldr	r2, [sp, #4]
 8019090:	50b4      	str	r4, [r6, r2]
 8019092:	3604      	adds	r6, #4
 8019094:	e7a3      	b.n	8018fde <__multiply+0x7e>
 8019096:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801909a:	2b00      	cmp	r3, #0
 801909c:	d1a5      	bne.n	8018fea <__multiply+0x8a>
 801909e:	3f01      	subs	r7, #1
 80190a0:	e7a1      	b.n	8018fe6 <__multiply+0x86>
 80190a2:	bf00      	nop
 80190a4:	0801c944 	.word	0x0801c944
 80190a8:	0801ca38 	.word	0x0801ca38

080190ac <__pow5mult>:
 80190ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190b0:	4615      	mov	r5, r2
 80190b2:	f012 0203 	ands.w	r2, r2, #3
 80190b6:	4606      	mov	r6, r0
 80190b8:	460f      	mov	r7, r1
 80190ba:	d007      	beq.n	80190cc <__pow5mult+0x20>
 80190bc:	4c25      	ldr	r4, [pc, #148]	; (8019154 <__pow5mult+0xa8>)
 80190be:	3a01      	subs	r2, #1
 80190c0:	2300      	movs	r3, #0
 80190c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80190c6:	f7ff fe51 	bl	8018d6c <__multadd>
 80190ca:	4607      	mov	r7, r0
 80190cc:	10ad      	asrs	r5, r5, #2
 80190ce:	d03d      	beq.n	801914c <__pow5mult+0xa0>
 80190d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80190d2:	b97c      	cbnz	r4, 80190f4 <__pow5mult+0x48>
 80190d4:	2010      	movs	r0, #16
 80190d6:	f7ff fdcd 	bl	8018c74 <malloc>
 80190da:	4602      	mov	r2, r0
 80190dc:	6270      	str	r0, [r6, #36]	; 0x24
 80190de:	b928      	cbnz	r0, 80190ec <__pow5mult+0x40>
 80190e0:	4b1d      	ldr	r3, [pc, #116]	; (8019158 <__pow5mult+0xac>)
 80190e2:	481e      	ldr	r0, [pc, #120]	; (801915c <__pow5mult+0xb0>)
 80190e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80190e8:	f000 ff58 	bl	8019f9c <__assert_func>
 80190ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80190f0:	6004      	str	r4, [r0, #0]
 80190f2:	60c4      	str	r4, [r0, #12]
 80190f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80190f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80190fc:	b94c      	cbnz	r4, 8019112 <__pow5mult+0x66>
 80190fe:	f240 2171 	movw	r1, #625	; 0x271
 8019102:	4630      	mov	r0, r6
 8019104:	f7ff ff16 	bl	8018f34 <__i2b>
 8019108:	2300      	movs	r3, #0
 801910a:	f8c8 0008 	str.w	r0, [r8, #8]
 801910e:	4604      	mov	r4, r0
 8019110:	6003      	str	r3, [r0, #0]
 8019112:	f04f 0900 	mov.w	r9, #0
 8019116:	07eb      	lsls	r3, r5, #31
 8019118:	d50a      	bpl.n	8019130 <__pow5mult+0x84>
 801911a:	4639      	mov	r1, r7
 801911c:	4622      	mov	r2, r4
 801911e:	4630      	mov	r0, r6
 8019120:	f7ff ff1e 	bl	8018f60 <__multiply>
 8019124:	4639      	mov	r1, r7
 8019126:	4680      	mov	r8, r0
 8019128:	4630      	mov	r0, r6
 801912a:	f7ff fdfd 	bl	8018d28 <_Bfree>
 801912e:	4647      	mov	r7, r8
 8019130:	106d      	asrs	r5, r5, #1
 8019132:	d00b      	beq.n	801914c <__pow5mult+0xa0>
 8019134:	6820      	ldr	r0, [r4, #0]
 8019136:	b938      	cbnz	r0, 8019148 <__pow5mult+0x9c>
 8019138:	4622      	mov	r2, r4
 801913a:	4621      	mov	r1, r4
 801913c:	4630      	mov	r0, r6
 801913e:	f7ff ff0f 	bl	8018f60 <__multiply>
 8019142:	6020      	str	r0, [r4, #0]
 8019144:	f8c0 9000 	str.w	r9, [r0]
 8019148:	4604      	mov	r4, r0
 801914a:	e7e4      	b.n	8019116 <__pow5mult+0x6a>
 801914c:	4638      	mov	r0, r7
 801914e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019152:	bf00      	nop
 8019154:	0801cb88 	.word	0x0801cb88
 8019158:	0801c8ce 	.word	0x0801c8ce
 801915c:	0801ca38 	.word	0x0801ca38

08019160 <__lshift>:
 8019160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019164:	460c      	mov	r4, r1
 8019166:	6849      	ldr	r1, [r1, #4]
 8019168:	6923      	ldr	r3, [r4, #16]
 801916a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801916e:	68a3      	ldr	r3, [r4, #8]
 8019170:	4607      	mov	r7, r0
 8019172:	4691      	mov	r9, r2
 8019174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019178:	f108 0601 	add.w	r6, r8, #1
 801917c:	42b3      	cmp	r3, r6
 801917e:	db0b      	blt.n	8019198 <__lshift+0x38>
 8019180:	4638      	mov	r0, r7
 8019182:	f7ff fd91 	bl	8018ca8 <_Balloc>
 8019186:	4605      	mov	r5, r0
 8019188:	b948      	cbnz	r0, 801919e <__lshift+0x3e>
 801918a:	4602      	mov	r2, r0
 801918c:	4b28      	ldr	r3, [pc, #160]	; (8019230 <__lshift+0xd0>)
 801918e:	4829      	ldr	r0, [pc, #164]	; (8019234 <__lshift+0xd4>)
 8019190:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019194:	f000 ff02 	bl	8019f9c <__assert_func>
 8019198:	3101      	adds	r1, #1
 801919a:	005b      	lsls	r3, r3, #1
 801919c:	e7ee      	b.n	801917c <__lshift+0x1c>
 801919e:	2300      	movs	r3, #0
 80191a0:	f100 0114 	add.w	r1, r0, #20
 80191a4:	f100 0210 	add.w	r2, r0, #16
 80191a8:	4618      	mov	r0, r3
 80191aa:	4553      	cmp	r3, sl
 80191ac:	db33      	blt.n	8019216 <__lshift+0xb6>
 80191ae:	6920      	ldr	r0, [r4, #16]
 80191b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80191b4:	f104 0314 	add.w	r3, r4, #20
 80191b8:	f019 091f 	ands.w	r9, r9, #31
 80191bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80191c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80191c4:	d02b      	beq.n	801921e <__lshift+0xbe>
 80191c6:	f1c9 0e20 	rsb	lr, r9, #32
 80191ca:	468a      	mov	sl, r1
 80191cc:	2200      	movs	r2, #0
 80191ce:	6818      	ldr	r0, [r3, #0]
 80191d0:	fa00 f009 	lsl.w	r0, r0, r9
 80191d4:	4302      	orrs	r2, r0
 80191d6:	f84a 2b04 	str.w	r2, [sl], #4
 80191da:	f853 2b04 	ldr.w	r2, [r3], #4
 80191de:	459c      	cmp	ip, r3
 80191e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80191e4:	d8f3      	bhi.n	80191ce <__lshift+0x6e>
 80191e6:	ebac 0304 	sub.w	r3, ip, r4
 80191ea:	3b15      	subs	r3, #21
 80191ec:	f023 0303 	bic.w	r3, r3, #3
 80191f0:	3304      	adds	r3, #4
 80191f2:	f104 0015 	add.w	r0, r4, #21
 80191f6:	4584      	cmp	ip, r0
 80191f8:	bf38      	it	cc
 80191fa:	2304      	movcc	r3, #4
 80191fc:	50ca      	str	r2, [r1, r3]
 80191fe:	b10a      	cbz	r2, 8019204 <__lshift+0xa4>
 8019200:	f108 0602 	add.w	r6, r8, #2
 8019204:	3e01      	subs	r6, #1
 8019206:	4638      	mov	r0, r7
 8019208:	612e      	str	r6, [r5, #16]
 801920a:	4621      	mov	r1, r4
 801920c:	f7ff fd8c 	bl	8018d28 <_Bfree>
 8019210:	4628      	mov	r0, r5
 8019212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019216:	f842 0f04 	str.w	r0, [r2, #4]!
 801921a:	3301      	adds	r3, #1
 801921c:	e7c5      	b.n	80191aa <__lshift+0x4a>
 801921e:	3904      	subs	r1, #4
 8019220:	f853 2b04 	ldr.w	r2, [r3], #4
 8019224:	f841 2f04 	str.w	r2, [r1, #4]!
 8019228:	459c      	cmp	ip, r3
 801922a:	d8f9      	bhi.n	8019220 <__lshift+0xc0>
 801922c:	e7ea      	b.n	8019204 <__lshift+0xa4>
 801922e:	bf00      	nop
 8019230:	0801c944 	.word	0x0801c944
 8019234:	0801ca38 	.word	0x0801ca38

08019238 <__mcmp>:
 8019238:	b530      	push	{r4, r5, lr}
 801923a:	6902      	ldr	r2, [r0, #16]
 801923c:	690c      	ldr	r4, [r1, #16]
 801923e:	1b12      	subs	r2, r2, r4
 8019240:	d10e      	bne.n	8019260 <__mcmp+0x28>
 8019242:	f100 0314 	add.w	r3, r0, #20
 8019246:	3114      	adds	r1, #20
 8019248:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801924c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019250:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019254:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019258:	42a5      	cmp	r5, r4
 801925a:	d003      	beq.n	8019264 <__mcmp+0x2c>
 801925c:	d305      	bcc.n	801926a <__mcmp+0x32>
 801925e:	2201      	movs	r2, #1
 8019260:	4610      	mov	r0, r2
 8019262:	bd30      	pop	{r4, r5, pc}
 8019264:	4283      	cmp	r3, r0
 8019266:	d3f3      	bcc.n	8019250 <__mcmp+0x18>
 8019268:	e7fa      	b.n	8019260 <__mcmp+0x28>
 801926a:	f04f 32ff 	mov.w	r2, #4294967295
 801926e:	e7f7      	b.n	8019260 <__mcmp+0x28>

08019270 <__mdiff>:
 8019270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019274:	460c      	mov	r4, r1
 8019276:	4606      	mov	r6, r0
 8019278:	4611      	mov	r1, r2
 801927a:	4620      	mov	r0, r4
 801927c:	4617      	mov	r7, r2
 801927e:	f7ff ffdb 	bl	8019238 <__mcmp>
 8019282:	1e05      	subs	r5, r0, #0
 8019284:	d110      	bne.n	80192a8 <__mdiff+0x38>
 8019286:	4629      	mov	r1, r5
 8019288:	4630      	mov	r0, r6
 801928a:	f7ff fd0d 	bl	8018ca8 <_Balloc>
 801928e:	b930      	cbnz	r0, 801929e <__mdiff+0x2e>
 8019290:	4b39      	ldr	r3, [pc, #228]	; (8019378 <__mdiff+0x108>)
 8019292:	4602      	mov	r2, r0
 8019294:	f240 2132 	movw	r1, #562	; 0x232
 8019298:	4838      	ldr	r0, [pc, #224]	; (801937c <__mdiff+0x10c>)
 801929a:	f000 fe7f 	bl	8019f9c <__assert_func>
 801929e:	2301      	movs	r3, #1
 80192a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80192a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192a8:	bfa4      	itt	ge
 80192aa:	463b      	movge	r3, r7
 80192ac:	4627      	movge	r7, r4
 80192ae:	4630      	mov	r0, r6
 80192b0:	6879      	ldr	r1, [r7, #4]
 80192b2:	bfa6      	itte	ge
 80192b4:	461c      	movge	r4, r3
 80192b6:	2500      	movge	r5, #0
 80192b8:	2501      	movlt	r5, #1
 80192ba:	f7ff fcf5 	bl	8018ca8 <_Balloc>
 80192be:	b920      	cbnz	r0, 80192ca <__mdiff+0x5a>
 80192c0:	4b2d      	ldr	r3, [pc, #180]	; (8019378 <__mdiff+0x108>)
 80192c2:	4602      	mov	r2, r0
 80192c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80192c8:	e7e6      	b.n	8019298 <__mdiff+0x28>
 80192ca:	693e      	ldr	r6, [r7, #16]
 80192cc:	60c5      	str	r5, [r0, #12]
 80192ce:	6925      	ldr	r5, [r4, #16]
 80192d0:	f107 0114 	add.w	r1, r7, #20
 80192d4:	f104 0914 	add.w	r9, r4, #20
 80192d8:	f100 0e14 	add.w	lr, r0, #20
 80192dc:	f107 0210 	add.w	r2, r7, #16
 80192e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80192e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80192e8:	46f2      	mov	sl, lr
 80192ea:	2700      	movs	r7, #0
 80192ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80192f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80192f4:	fa1f f883 	uxth.w	r8, r3
 80192f8:	fa17 f78b 	uxtah	r7, r7, fp
 80192fc:	0c1b      	lsrs	r3, r3, #16
 80192fe:	eba7 0808 	sub.w	r8, r7, r8
 8019302:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019306:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801930a:	fa1f f888 	uxth.w	r8, r8
 801930e:	141f      	asrs	r7, r3, #16
 8019310:	454d      	cmp	r5, r9
 8019312:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019316:	f84a 3b04 	str.w	r3, [sl], #4
 801931a:	d8e7      	bhi.n	80192ec <__mdiff+0x7c>
 801931c:	1b2b      	subs	r3, r5, r4
 801931e:	3b15      	subs	r3, #21
 8019320:	f023 0303 	bic.w	r3, r3, #3
 8019324:	3304      	adds	r3, #4
 8019326:	3415      	adds	r4, #21
 8019328:	42a5      	cmp	r5, r4
 801932a:	bf38      	it	cc
 801932c:	2304      	movcc	r3, #4
 801932e:	4419      	add	r1, r3
 8019330:	4473      	add	r3, lr
 8019332:	469e      	mov	lr, r3
 8019334:	460d      	mov	r5, r1
 8019336:	4565      	cmp	r5, ip
 8019338:	d30e      	bcc.n	8019358 <__mdiff+0xe8>
 801933a:	f10c 0203 	add.w	r2, ip, #3
 801933e:	1a52      	subs	r2, r2, r1
 8019340:	f022 0203 	bic.w	r2, r2, #3
 8019344:	3903      	subs	r1, #3
 8019346:	458c      	cmp	ip, r1
 8019348:	bf38      	it	cc
 801934a:	2200      	movcc	r2, #0
 801934c:	441a      	add	r2, r3
 801934e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019352:	b17b      	cbz	r3, 8019374 <__mdiff+0x104>
 8019354:	6106      	str	r6, [r0, #16]
 8019356:	e7a5      	b.n	80192a4 <__mdiff+0x34>
 8019358:	f855 8b04 	ldr.w	r8, [r5], #4
 801935c:	fa17 f488 	uxtah	r4, r7, r8
 8019360:	1422      	asrs	r2, r4, #16
 8019362:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019366:	b2a4      	uxth	r4, r4
 8019368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801936c:	f84e 4b04 	str.w	r4, [lr], #4
 8019370:	1417      	asrs	r7, r2, #16
 8019372:	e7e0      	b.n	8019336 <__mdiff+0xc6>
 8019374:	3e01      	subs	r6, #1
 8019376:	e7ea      	b.n	801934e <__mdiff+0xde>
 8019378:	0801c944 	.word	0x0801c944
 801937c:	0801ca38 	.word	0x0801ca38

08019380 <__ulp>:
 8019380:	b082      	sub	sp, #8
 8019382:	ed8d 0b00 	vstr	d0, [sp]
 8019386:	9b01      	ldr	r3, [sp, #4]
 8019388:	4912      	ldr	r1, [pc, #72]	; (80193d4 <__ulp+0x54>)
 801938a:	4019      	ands	r1, r3
 801938c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019390:	2900      	cmp	r1, #0
 8019392:	dd05      	ble.n	80193a0 <__ulp+0x20>
 8019394:	2200      	movs	r2, #0
 8019396:	460b      	mov	r3, r1
 8019398:	ec43 2b10 	vmov	d0, r2, r3
 801939c:	b002      	add	sp, #8
 801939e:	4770      	bx	lr
 80193a0:	4249      	negs	r1, r1
 80193a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80193a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80193aa:	f04f 0200 	mov.w	r2, #0
 80193ae:	f04f 0300 	mov.w	r3, #0
 80193b2:	da04      	bge.n	80193be <__ulp+0x3e>
 80193b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80193b8:	fa41 f300 	asr.w	r3, r1, r0
 80193bc:	e7ec      	b.n	8019398 <__ulp+0x18>
 80193be:	f1a0 0114 	sub.w	r1, r0, #20
 80193c2:	291e      	cmp	r1, #30
 80193c4:	bfda      	itte	le
 80193c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80193ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80193ce:	2101      	movgt	r1, #1
 80193d0:	460a      	mov	r2, r1
 80193d2:	e7e1      	b.n	8019398 <__ulp+0x18>
 80193d4:	7ff00000 	.word	0x7ff00000

080193d8 <__b2d>:
 80193d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193da:	6905      	ldr	r5, [r0, #16]
 80193dc:	f100 0714 	add.w	r7, r0, #20
 80193e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80193e4:	1f2e      	subs	r6, r5, #4
 80193e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80193ea:	4620      	mov	r0, r4
 80193ec:	f7ff fd52 	bl	8018e94 <__hi0bits>
 80193f0:	f1c0 0320 	rsb	r3, r0, #32
 80193f4:	280a      	cmp	r0, #10
 80193f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019474 <__b2d+0x9c>
 80193fa:	600b      	str	r3, [r1, #0]
 80193fc:	dc14      	bgt.n	8019428 <__b2d+0x50>
 80193fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8019402:	fa24 f10e 	lsr.w	r1, r4, lr
 8019406:	42b7      	cmp	r7, r6
 8019408:	ea41 030c 	orr.w	r3, r1, ip
 801940c:	bf34      	ite	cc
 801940e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019412:	2100      	movcs	r1, #0
 8019414:	3015      	adds	r0, #21
 8019416:	fa04 f000 	lsl.w	r0, r4, r0
 801941a:	fa21 f10e 	lsr.w	r1, r1, lr
 801941e:	ea40 0201 	orr.w	r2, r0, r1
 8019422:	ec43 2b10 	vmov	d0, r2, r3
 8019426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019428:	42b7      	cmp	r7, r6
 801942a:	bf3a      	itte	cc
 801942c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019430:	f1a5 0608 	subcc.w	r6, r5, #8
 8019434:	2100      	movcs	r1, #0
 8019436:	380b      	subs	r0, #11
 8019438:	d017      	beq.n	801946a <__b2d+0x92>
 801943a:	f1c0 0c20 	rsb	ip, r0, #32
 801943e:	fa04 f500 	lsl.w	r5, r4, r0
 8019442:	42be      	cmp	r6, r7
 8019444:	fa21 f40c 	lsr.w	r4, r1, ip
 8019448:	ea45 0504 	orr.w	r5, r5, r4
 801944c:	bf8c      	ite	hi
 801944e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019452:	2400      	movls	r4, #0
 8019454:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019458:	fa01 f000 	lsl.w	r0, r1, r0
 801945c:	fa24 f40c 	lsr.w	r4, r4, ip
 8019460:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019464:	ea40 0204 	orr.w	r2, r0, r4
 8019468:	e7db      	b.n	8019422 <__b2d+0x4a>
 801946a:	ea44 030c 	orr.w	r3, r4, ip
 801946e:	460a      	mov	r2, r1
 8019470:	e7d7      	b.n	8019422 <__b2d+0x4a>
 8019472:	bf00      	nop
 8019474:	3ff00000 	.word	0x3ff00000

08019478 <__d2b>:
 8019478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801947c:	4689      	mov	r9, r1
 801947e:	2101      	movs	r1, #1
 8019480:	ec57 6b10 	vmov	r6, r7, d0
 8019484:	4690      	mov	r8, r2
 8019486:	f7ff fc0f 	bl	8018ca8 <_Balloc>
 801948a:	4604      	mov	r4, r0
 801948c:	b930      	cbnz	r0, 801949c <__d2b+0x24>
 801948e:	4602      	mov	r2, r0
 8019490:	4b25      	ldr	r3, [pc, #148]	; (8019528 <__d2b+0xb0>)
 8019492:	4826      	ldr	r0, [pc, #152]	; (801952c <__d2b+0xb4>)
 8019494:	f240 310a 	movw	r1, #778	; 0x30a
 8019498:	f000 fd80 	bl	8019f9c <__assert_func>
 801949c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80194a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80194a4:	bb35      	cbnz	r5, 80194f4 <__d2b+0x7c>
 80194a6:	2e00      	cmp	r6, #0
 80194a8:	9301      	str	r3, [sp, #4]
 80194aa:	d028      	beq.n	80194fe <__d2b+0x86>
 80194ac:	4668      	mov	r0, sp
 80194ae:	9600      	str	r6, [sp, #0]
 80194b0:	f7ff fd10 	bl	8018ed4 <__lo0bits>
 80194b4:	9900      	ldr	r1, [sp, #0]
 80194b6:	b300      	cbz	r0, 80194fa <__d2b+0x82>
 80194b8:	9a01      	ldr	r2, [sp, #4]
 80194ba:	f1c0 0320 	rsb	r3, r0, #32
 80194be:	fa02 f303 	lsl.w	r3, r2, r3
 80194c2:	430b      	orrs	r3, r1
 80194c4:	40c2      	lsrs	r2, r0
 80194c6:	6163      	str	r3, [r4, #20]
 80194c8:	9201      	str	r2, [sp, #4]
 80194ca:	9b01      	ldr	r3, [sp, #4]
 80194cc:	61a3      	str	r3, [r4, #24]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	bf14      	ite	ne
 80194d2:	2202      	movne	r2, #2
 80194d4:	2201      	moveq	r2, #1
 80194d6:	6122      	str	r2, [r4, #16]
 80194d8:	b1d5      	cbz	r5, 8019510 <__d2b+0x98>
 80194da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80194de:	4405      	add	r5, r0
 80194e0:	f8c9 5000 	str.w	r5, [r9]
 80194e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80194e8:	f8c8 0000 	str.w	r0, [r8]
 80194ec:	4620      	mov	r0, r4
 80194ee:	b003      	add	sp, #12
 80194f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80194f8:	e7d5      	b.n	80194a6 <__d2b+0x2e>
 80194fa:	6161      	str	r1, [r4, #20]
 80194fc:	e7e5      	b.n	80194ca <__d2b+0x52>
 80194fe:	a801      	add	r0, sp, #4
 8019500:	f7ff fce8 	bl	8018ed4 <__lo0bits>
 8019504:	9b01      	ldr	r3, [sp, #4]
 8019506:	6163      	str	r3, [r4, #20]
 8019508:	2201      	movs	r2, #1
 801950a:	6122      	str	r2, [r4, #16]
 801950c:	3020      	adds	r0, #32
 801950e:	e7e3      	b.n	80194d8 <__d2b+0x60>
 8019510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019518:	f8c9 0000 	str.w	r0, [r9]
 801951c:	6918      	ldr	r0, [r3, #16]
 801951e:	f7ff fcb9 	bl	8018e94 <__hi0bits>
 8019522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019526:	e7df      	b.n	80194e8 <__d2b+0x70>
 8019528:	0801c944 	.word	0x0801c944
 801952c:	0801ca38 	.word	0x0801ca38

08019530 <__ratio>:
 8019530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019534:	468a      	mov	sl, r1
 8019536:	4669      	mov	r1, sp
 8019538:	4683      	mov	fp, r0
 801953a:	f7ff ff4d 	bl	80193d8 <__b2d>
 801953e:	a901      	add	r1, sp, #4
 8019540:	4650      	mov	r0, sl
 8019542:	ec59 8b10 	vmov	r8, r9, d0
 8019546:	ee10 6a10 	vmov	r6, s0
 801954a:	f7ff ff45 	bl	80193d8 <__b2d>
 801954e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019552:	f8da 2010 	ldr.w	r2, [sl, #16]
 8019556:	eba3 0c02 	sub.w	ip, r3, r2
 801955a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801955e:	1a9b      	subs	r3, r3, r2
 8019560:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019564:	ec55 4b10 	vmov	r4, r5, d0
 8019568:	2b00      	cmp	r3, #0
 801956a:	ee10 0a10 	vmov	r0, s0
 801956e:	bfce      	itee	gt
 8019570:	464a      	movgt	r2, r9
 8019572:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019576:	462a      	movle	r2, r5
 8019578:	464f      	mov	r7, r9
 801957a:	4629      	mov	r1, r5
 801957c:	bfcc      	ite	gt
 801957e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019582:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019586:	ec47 6b17 	vmov	d7, r6, r7
 801958a:	ec41 0b16 	vmov	d6, r0, r1
 801958e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8019592:	b003      	add	sp, #12
 8019594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019598 <__copybits>:
 8019598:	3901      	subs	r1, #1
 801959a:	b570      	push	{r4, r5, r6, lr}
 801959c:	1149      	asrs	r1, r1, #5
 801959e:	6914      	ldr	r4, [r2, #16]
 80195a0:	3101      	adds	r1, #1
 80195a2:	f102 0314 	add.w	r3, r2, #20
 80195a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80195aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80195ae:	1f05      	subs	r5, r0, #4
 80195b0:	42a3      	cmp	r3, r4
 80195b2:	d30c      	bcc.n	80195ce <__copybits+0x36>
 80195b4:	1aa3      	subs	r3, r4, r2
 80195b6:	3b11      	subs	r3, #17
 80195b8:	f023 0303 	bic.w	r3, r3, #3
 80195bc:	3211      	adds	r2, #17
 80195be:	42a2      	cmp	r2, r4
 80195c0:	bf88      	it	hi
 80195c2:	2300      	movhi	r3, #0
 80195c4:	4418      	add	r0, r3
 80195c6:	2300      	movs	r3, #0
 80195c8:	4288      	cmp	r0, r1
 80195ca:	d305      	bcc.n	80195d8 <__copybits+0x40>
 80195cc:	bd70      	pop	{r4, r5, r6, pc}
 80195ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80195d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80195d6:	e7eb      	b.n	80195b0 <__copybits+0x18>
 80195d8:	f840 3b04 	str.w	r3, [r0], #4
 80195dc:	e7f4      	b.n	80195c8 <__copybits+0x30>

080195de <__any_on>:
 80195de:	f100 0214 	add.w	r2, r0, #20
 80195e2:	6900      	ldr	r0, [r0, #16]
 80195e4:	114b      	asrs	r3, r1, #5
 80195e6:	4298      	cmp	r0, r3
 80195e8:	b510      	push	{r4, lr}
 80195ea:	db11      	blt.n	8019610 <__any_on+0x32>
 80195ec:	dd0a      	ble.n	8019604 <__any_on+0x26>
 80195ee:	f011 011f 	ands.w	r1, r1, #31
 80195f2:	d007      	beq.n	8019604 <__any_on+0x26>
 80195f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80195f8:	fa24 f001 	lsr.w	r0, r4, r1
 80195fc:	fa00 f101 	lsl.w	r1, r0, r1
 8019600:	428c      	cmp	r4, r1
 8019602:	d10b      	bne.n	801961c <__any_on+0x3e>
 8019604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019608:	4293      	cmp	r3, r2
 801960a:	d803      	bhi.n	8019614 <__any_on+0x36>
 801960c:	2000      	movs	r0, #0
 801960e:	bd10      	pop	{r4, pc}
 8019610:	4603      	mov	r3, r0
 8019612:	e7f7      	b.n	8019604 <__any_on+0x26>
 8019614:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019618:	2900      	cmp	r1, #0
 801961a:	d0f5      	beq.n	8019608 <__any_on+0x2a>
 801961c:	2001      	movs	r0, #1
 801961e:	e7f6      	b.n	801960e <__any_on+0x30>

08019620 <_calloc_r>:
 8019620:	b513      	push	{r0, r1, r4, lr}
 8019622:	434a      	muls	r2, r1
 8019624:	4611      	mov	r1, r2
 8019626:	9201      	str	r2, [sp, #4]
 8019628:	f000 f85a 	bl	80196e0 <_malloc_r>
 801962c:	4604      	mov	r4, r0
 801962e:	b118      	cbz	r0, 8019638 <_calloc_r+0x18>
 8019630:	9a01      	ldr	r2, [sp, #4]
 8019632:	2100      	movs	r1, #0
 8019634:	f7fc fb98 	bl	8015d68 <memset>
 8019638:	4620      	mov	r0, r4
 801963a:	b002      	add	sp, #8
 801963c:	bd10      	pop	{r4, pc}
	...

08019640 <_free_r>:
 8019640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019642:	2900      	cmp	r1, #0
 8019644:	d048      	beq.n	80196d8 <_free_r+0x98>
 8019646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801964a:	9001      	str	r0, [sp, #4]
 801964c:	2b00      	cmp	r3, #0
 801964e:	f1a1 0404 	sub.w	r4, r1, #4
 8019652:	bfb8      	it	lt
 8019654:	18e4      	addlt	r4, r4, r3
 8019656:	f000 fe33 	bl	801a2c0 <__malloc_lock>
 801965a:	4a20      	ldr	r2, [pc, #128]	; (80196dc <_free_r+0x9c>)
 801965c:	9801      	ldr	r0, [sp, #4]
 801965e:	6813      	ldr	r3, [r2, #0]
 8019660:	4615      	mov	r5, r2
 8019662:	b933      	cbnz	r3, 8019672 <_free_r+0x32>
 8019664:	6063      	str	r3, [r4, #4]
 8019666:	6014      	str	r4, [r2, #0]
 8019668:	b003      	add	sp, #12
 801966a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801966e:	f000 be2d 	b.w	801a2cc <__malloc_unlock>
 8019672:	42a3      	cmp	r3, r4
 8019674:	d90b      	bls.n	801968e <_free_r+0x4e>
 8019676:	6821      	ldr	r1, [r4, #0]
 8019678:	1862      	adds	r2, r4, r1
 801967a:	4293      	cmp	r3, r2
 801967c:	bf04      	itt	eq
 801967e:	681a      	ldreq	r2, [r3, #0]
 8019680:	685b      	ldreq	r3, [r3, #4]
 8019682:	6063      	str	r3, [r4, #4]
 8019684:	bf04      	itt	eq
 8019686:	1852      	addeq	r2, r2, r1
 8019688:	6022      	streq	r2, [r4, #0]
 801968a:	602c      	str	r4, [r5, #0]
 801968c:	e7ec      	b.n	8019668 <_free_r+0x28>
 801968e:	461a      	mov	r2, r3
 8019690:	685b      	ldr	r3, [r3, #4]
 8019692:	b10b      	cbz	r3, 8019698 <_free_r+0x58>
 8019694:	42a3      	cmp	r3, r4
 8019696:	d9fa      	bls.n	801968e <_free_r+0x4e>
 8019698:	6811      	ldr	r1, [r2, #0]
 801969a:	1855      	adds	r5, r2, r1
 801969c:	42a5      	cmp	r5, r4
 801969e:	d10b      	bne.n	80196b8 <_free_r+0x78>
 80196a0:	6824      	ldr	r4, [r4, #0]
 80196a2:	4421      	add	r1, r4
 80196a4:	1854      	adds	r4, r2, r1
 80196a6:	42a3      	cmp	r3, r4
 80196a8:	6011      	str	r1, [r2, #0]
 80196aa:	d1dd      	bne.n	8019668 <_free_r+0x28>
 80196ac:	681c      	ldr	r4, [r3, #0]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	6053      	str	r3, [r2, #4]
 80196b2:	4421      	add	r1, r4
 80196b4:	6011      	str	r1, [r2, #0]
 80196b6:	e7d7      	b.n	8019668 <_free_r+0x28>
 80196b8:	d902      	bls.n	80196c0 <_free_r+0x80>
 80196ba:	230c      	movs	r3, #12
 80196bc:	6003      	str	r3, [r0, #0]
 80196be:	e7d3      	b.n	8019668 <_free_r+0x28>
 80196c0:	6825      	ldr	r5, [r4, #0]
 80196c2:	1961      	adds	r1, r4, r5
 80196c4:	428b      	cmp	r3, r1
 80196c6:	bf04      	itt	eq
 80196c8:	6819      	ldreq	r1, [r3, #0]
 80196ca:	685b      	ldreq	r3, [r3, #4]
 80196cc:	6063      	str	r3, [r4, #4]
 80196ce:	bf04      	itt	eq
 80196d0:	1949      	addeq	r1, r1, r5
 80196d2:	6021      	streq	r1, [r4, #0]
 80196d4:	6054      	str	r4, [r2, #4]
 80196d6:	e7c7      	b.n	8019668 <_free_r+0x28>
 80196d8:	b003      	add	sp, #12
 80196da:	bd30      	pop	{r4, r5, pc}
 80196dc:	20028b58 	.word	0x20028b58

080196e0 <_malloc_r>:
 80196e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196e2:	1ccd      	adds	r5, r1, #3
 80196e4:	f025 0503 	bic.w	r5, r5, #3
 80196e8:	3508      	adds	r5, #8
 80196ea:	2d0c      	cmp	r5, #12
 80196ec:	bf38      	it	cc
 80196ee:	250c      	movcc	r5, #12
 80196f0:	2d00      	cmp	r5, #0
 80196f2:	4606      	mov	r6, r0
 80196f4:	db01      	blt.n	80196fa <_malloc_r+0x1a>
 80196f6:	42a9      	cmp	r1, r5
 80196f8:	d903      	bls.n	8019702 <_malloc_r+0x22>
 80196fa:	230c      	movs	r3, #12
 80196fc:	6033      	str	r3, [r6, #0]
 80196fe:	2000      	movs	r0, #0
 8019700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019702:	f000 fddd 	bl	801a2c0 <__malloc_lock>
 8019706:	4921      	ldr	r1, [pc, #132]	; (801978c <_malloc_r+0xac>)
 8019708:	680a      	ldr	r2, [r1, #0]
 801970a:	4614      	mov	r4, r2
 801970c:	b99c      	cbnz	r4, 8019736 <_malloc_r+0x56>
 801970e:	4f20      	ldr	r7, [pc, #128]	; (8019790 <_malloc_r+0xb0>)
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	b923      	cbnz	r3, 801971e <_malloc_r+0x3e>
 8019714:	4621      	mov	r1, r4
 8019716:	4630      	mov	r0, r6
 8019718:	f000 fafa 	bl	8019d10 <_sbrk_r>
 801971c:	6038      	str	r0, [r7, #0]
 801971e:	4629      	mov	r1, r5
 8019720:	4630      	mov	r0, r6
 8019722:	f000 faf5 	bl	8019d10 <_sbrk_r>
 8019726:	1c43      	adds	r3, r0, #1
 8019728:	d123      	bne.n	8019772 <_malloc_r+0x92>
 801972a:	230c      	movs	r3, #12
 801972c:	6033      	str	r3, [r6, #0]
 801972e:	4630      	mov	r0, r6
 8019730:	f000 fdcc 	bl	801a2cc <__malloc_unlock>
 8019734:	e7e3      	b.n	80196fe <_malloc_r+0x1e>
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	1b5b      	subs	r3, r3, r5
 801973a:	d417      	bmi.n	801976c <_malloc_r+0x8c>
 801973c:	2b0b      	cmp	r3, #11
 801973e:	d903      	bls.n	8019748 <_malloc_r+0x68>
 8019740:	6023      	str	r3, [r4, #0]
 8019742:	441c      	add	r4, r3
 8019744:	6025      	str	r5, [r4, #0]
 8019746:	e004      	b.n	8019752 <_malloc_r+0x72>
 8019748:	6863      	ldr	r3, [r4, #4]
 801974a:	42a2      	cmp	r2, r4
 801974c:	bf0c      	ite	eq
 801974e:	600b      	streq	r3, [r1, #0]
 8019750:	6053      	strne	r3, [r2, #4]
 8019752:	4630      	mov	r0, r6
 8019754:	f000 fdba 	bl	801a2cc <__malloc_unlock>
 8019758:	f104 000b 	add.w	r0, r4, #11
 801975c:	1d23      	adds	r3, r4, #4
 801975e:	f020 0007 	bic.w	r0, r0, #7
 8019762:	1ac2      	subs	r2, r0, r3
 8019764:	d0cc      	beq.n	8019700 <_malloc_r+0x20>
 8019766:	1a1b      	subs	r3, r3, r0
 8019768:	50a3      	str	r3, [r4, r2]
 801976a:	e7c9      	b.n	8019700 <_malloc_r+0x20>
 801976c:	4622      	mov	r2, r4
 801976e:	6864      	ldr	r4, [r4, #4]
 8019770:	e7cc      	b.n	801970c <_malloc_r+0x2c>
 8019772:	1cc4      	adds	r4, r0, #3
 8019774:	f024 0403 	bic.w	r4, r4, #3
 8019778:	42a0      	cmp	r0, r4
 801977a:	d0e3      	beq.n	8019744 <_malloc_r+0x64>
 801977c:	1a21      	subs	r1, r4, r0
 801977e:	4630      	mov	r0, r6
 8019780:	f000 fac6 	bl	8019d10 <_sbrk_r>
 8019784:	3001      	adds	r0, #1
 8019786:	d1dd      	bne.n	8019744 <_malloc_r+0x64>
 8019788:	e7cf      	b.n	801972a <_malloc_r+0x4a>
 801978a:	bf00      	nop
 801978c:	20028b58 	.word	0x20028b58
 8019790:	20028b5c 	.word	0x20028b5c

08019794 <__ssputs_r>:
 8019794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019798:	688e      	ldr	r6, [r1, #8]
 801979a:	429e      	cmp	r6, r3
 801979c:	4682      	mov	sl, r0
 801979e:	460c      	mov	r4, r1
 80197a0:	4690      	mov	r8, r2
 80197a2:	461f      	mov	r7, r3
 80197a4:	d838      	bhi.n	8019818 <__ssputs_r+0x84>
 80197a6:	898a      	ldrh	r2, [r1, #12]
 80197a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80197ac:	d032      	beq.n	8019814 <__ssputs_r+0x80>
 80197ae:	6825      	ldr	r5, [r4, #0]
 80197b0:	6909      	ldr	r1, [r1, #16]
 80197b2:	eba5 0901 	sub.w	r9, r5, r1
 80197b6:	6965      	ldr	r5, [r4, #20]
 80197b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80197c0:	3301      	adds	r3, #1
 80197c2:	444b      	add	r3, r9
 80197c4:	106d      	asrs	r5, r5, #1
 80197c6:	429d      	cmp	r5, r3
 80197c8:	bf38      	it	cc
 80197ca:	461d      	movcc	r5, r3
 80197cc:	0553      	lsls	r3, r2, #21
 80197ce:	d531      	bpl.n	8019834 <__ssputs_r+0xa0>
 80197d0:	4629      	mov	r1, r5
 80197d2:	f7ff ff85 	bl	80196e0 <_malloc_r>
 80197d6:	4606      	mov	r6, r0
 80197d8:	b950      	cbnz	r0, 80197f0 <__ssputs_r+0x5c>
 80197da:	230c      	movs	r3, #12
 80197dc:	f8ca 3000 	str.w	r3, [sl]
 80197e0:	89a3      	ldrh	r3, [r4, #12]
 80197e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197e6:	81a3      	strh	r3, [r4, #12]
 80197e8:	f04f 30ff 	mov.w	r0, #4294967295
 80197ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197f0:	6921      	ldr	r1, [r4, #16]
 80197f2:	464a      	mov	r2, r9
 80197f4:	f7fc faaa 	bl	8015d4c <memcpy>
 80197f8:	89a3      	ldrh	r3, [r4, #12]
 80197fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019802:	81a3      	strh	r3, [r4, #12]
 8019804:	6126      	str	r6, [r4, #16]
 8019806:	6165      	str	r5, [r4, #20]
 8019808:	444e      	add	r6, r9
 801980a:	eba5 0509 	sub.w	r5, r5, r9
 801980e:	6026      	str	r6, [r4, #0]
 8019810:	60a5      	str	r5, [r4, #8]
 8019812:	463e      	mov	r6, r7
 8019814:	42be      	cmp	r6, r7
 8019816:	d900      	bls.n	801981a <__ssputs_r+0x86>
 8019818:	463e      	mov	r6, r7
 801981a:	4632      	mov	r2, r6
 801981c:	6820      	ldr	r0, [r4, #0]
 801981e:	4641      	mov	r1, r8
 8019820:	f000 fd34 	bl	801a28c <memmove>
 8019824:	68a3      	ldr	r3, [r4, #8]
 8019826:	6822      	ldr	r2, [r4, #0]
 8019828:	1b9b      	subs	r3, r3, r6
 801982a:	4432      	add	r2, r6
 801982c:	60a3      	str	r3, [r4, #8]
 801982e:	6022      	str	r2, [r4, #0]
 8019830:	2000      	movs	r0, #0
 8019832:	e7db      	b.n	80197ec <__ssputs_r+0x58>
 8019834:	462a      	mov	r2, r5
 8019836:	f000 fd4f 	bl	801a2d8 <_realloc_r>
 801983a:	4606      	mov	r6, r0
 801983c:	2800      	cmp	r0, #0
 801983e:	d1e1      	bne.n	8019804 <__ssputs_r+0x70>
 8019840:	6921      	ldr	r1, [r4, #16]
 8019842:	4650      	mov	r0, sl
 8019844:	f7ff fefc 	bl	8019640 <_free_r>
 8019848:	e7c7      	b.n	80197da <__ssputs_r+0x46>
	...

0801984c <_svfiprintf_r>:
 801984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019850:	4698      	mov	r8, r3
 8019852:	898b      	ldrh	r3, [r1, #12]
 8019854:	061b      	lsls	r3, r3, #24
 8019856:	b09d      	sub	sp, #116	; 0x74
 8019858:	4607      	mov	r7, r0
 801985a:	460d      	mov	r5, r1
 801985c:	4614      	mov	r4, r2
 801985e:	d50e      	bpl.n	801987e <_svfiprintf_r+0x32>
 8019860:	690b      	ldr	r3, [r1, #16]
 8019862:	b963      	cbnz	r3, 801987e <_svfiprintf_r+0x32>
 8019864:	2140      	movs	r1, #64	; 0x40
 8019866:	f7ff ff3b 	bl	80196e0 <_malloc_r>
 801986a:	6028      	str	r0, [r5, #0]
 801986c:	6128      	str	r0, [r5, #16]
 801986e:	b920      	cbnz	r0, 801987a <_svfiprintf_r+0x2e>
 8019870:	230c      	movs	r3, #12
 8019872:	603b      	str	r3, [r7, #0]
 8019874:	f04f 30ff 	mov.w	r0, #4294967295
 8019878:	e0d1      	b.n	8019a1e <_svfiprintf_r+0x1d2>
 801987a:	2340      	movs	r3, #64	; 0x40
 801987c:	616b      	str	r3, [r5, #20]
 801987e:	2300      	movs	r3, #0
 8019880:	9309      	str	r3, [sp, #36]	; 0x24
 8019882:	2320      	movs	r3, #32
 8019884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019888:	f8cd 800c 	str.w	r8, [sp, #12]
 801988c:	2330      	movs	r3, #48	; 0x30
 801988e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019a38 <_svfiprintf_r+0x1ec>
 8019892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019896:	f04f 0901 	mov.w	r9, #1
 801989a:	4623      	mov	r3, r4
 801989c:	469a      	mov	sl, r3
 801989e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198a2:	b10a      	cbz	r2, 80198a8 <_svfiprintf_r+0x5c>
 80198a4:	2a25      	cmp	r2, #37	; 0x25
 80198a6:	d1f9      	bne.n	801989c <_svfiprintf_r+0x50>
 80198a8:	ebba 0b04 	subs.w	fp, sl, r4
 80198ac:	d00b      	beq.n	80198c6 <_svfiprintf_r+0x7a>
 80198ae:	465b      	mov	r3, fp
 80198b0:	4622      	mov	r2, r4
 80198b2:	4629      	mov	r1, r5
 80198b4:	4638      	mov	r0, r7
 80198b6:	f7ff ff6d 	bl	8019794 <__ssputs_r>
 80198ba:	3001      	adds	r0, #1
 80198bc:	f000 80aa 	beq.w	8019a14 <_svfiprintf_r+0x1c8>
 80198c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198c2:	445a      	add	r2, fp
 80198c4:	9209      	str	r2, [sp, #36]	; 0x24
 80198c6:	f89a 3000 	ldrb.w	r3, [sl]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	f000 80a2 	beq.w	8019a14 <_svfiprintf_r+0x1c8>
 80198d0:	2300      	movs	r3, #0
 80198d2:	f04f 32ff 	mov.w	r2, #4294967295
 80198d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198da:	f10a 0a01 	add.w	sl, sl, #1
 80198de:	9304      	str	r3, [sp, #16]
 80198e0:	9307      	str	r3, [sp, #28]
 80198e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198e6:	931a      	str	r3, [sp, #104]	; 0x68
 80198e8:	4654      	mov	r4, sl
 80198ea:	2205      	movs	r2, #5
 80198ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198f0:	4851      	ldr	r0, [pc, #324]	; (8019a38 <_svfiprintf_r+0x1ec>)
 80198f2:	f7e6 fcad 	bl	8000250 <memchr>
 80198f6:	9a04      	ldr	r2, [sp, #16]
 80198f8:	b9d8      	cbnz	r0, 8019932 <_svfiprintf_r+0xe6>
 80198fa:	06d0      	lsls	r0, r2, #27
 80198fc:	bf44      	itt	mi
 80198fe:	2320      	movmi	r3, #32
 8019900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019904:	0711      	lsls	r1, r2, #28
 8019906:	bf44      	itt	mi
 8019908:	232b      	movmi	r3, #43	; 0x2b
 801990a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801990e:	f89a 3000 	ldrb.w	r3, [sl]
 8019912:	2b2a      	cmp	r3, #42	; 0x2a
 8019914:	d015      	beq.n	8019942 <_svfiprintf_r+0xf6>
 8019916:	9a07      	ldr	r2, [sp, #28]
 8019918:	4654      	mov	r4, sl
 801991a:	2000      	movs	r0, #0
 801991c:	f04f 0c0a 	mov.w	ip, #10
 8019920:	4621      	mov	r1, r4
 8019922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019926:	3b30      	subs	r3, #48	; 0x30
 8019928:	2b09      	cmp	r3, #9
 801992a:	d94e      	bls.n	80199ca <_svfiprintf_r+0x17e>
 801992c:	b1b0      	cbz	r0, 801995c <_svfiprintf_r+0x110>
 801992e:	9207      	str	r2, [sp, #28]
 8019930:	e014      	b.n	801995c <_svfiprintf_r+0x110>
 8019932:	eba0 0308 	sub.w	r3, r0, r8
 8019936:	fa09 f303 	lsl.w	r3, r9, r3
 801993a:	4313      	orrs	r3, r2
 801993c:	9304      	str	r3, [sp, #16]
 801993e:	46a2      	mov	sl, r4
 8019940:	e7d2      	b.n	80198e8 <_svfiprintf_r+0x9c>
 8019942:	9b03      	ldr	r3, [sp, #12]
 8019944:	1d19      	adds	r1, r3, #4
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	9103      	str	r1, [sp, #12]
 801994a:	2b00      	cmp	r3, #0
 801994c:	bfbb      	ittet	lt
 801994e:	425b      	neglt	r3, r3
 8019950:	f042 0202 	orrlt.w	r2, r2, #2
 8019954:	9307      	strge	r3, [sp, #28]
 8019956:	9307      	strlt	r3, [sp, #28]
 8019958:	bfb8      	it	lt
 801995a:	9204      	strlt	r2, [sp, #16]
 801995c:	7823      	ldrb	r3, [r4, #0]
 801995e:	2b2e      	cmp	r3, #46	; 0x2e
 8019960:	d10c      	bne.n	801997c <_svfiprintf_r+0x130>
 8019962:	7863      	ldrb	r3, [r4, #1]
 8019964:	2b2a      	cmp	r3, #42	; 0x2a
 8019966:	d135      	bne.n	80199d4 <_svfiprintf_r+0x188>
 8019968:	9b03      	ldr	r3, [sp, #12]
 801996a:	1d1a      	adds	r2, r3, #4
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	9203      	str	r2, [sp, #12]
 8019970:	2b00      	cmp	r3, #0
 8019972:	bfb8      	it	lt
 8019974:	f04f 33ff 	movlt.w	r3, #4294967295
 8019978:	3402      	adds	r4, #2
 801997a:	9305      	str	r3, [sp, #20]
 801997c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019a48 <_svfiprintf_r+0x1fc>
 8019980:	7821      	ldrb	r1, [r4, #0]
 8019982:	2203      	movs	r2, #3
 8019984:	4650      	mov	r0, sl
 8019986:	f7e6 fc63 	bl	8000250 <memchr>
 801998a:	b140      	cbz	r0, 801999e <_svfiprintf_r+0x152>
 801998c:	2340      	movs	r3, #64	; 0x40
 801998e:	eba0 000a 	sub.w	r0, r0, sl
 8019992:	fa03 f000 	lsl.w	r0, r3, r0
 8019996:	9b04      	ldr	r3, [sp, #16]
 8019998:	4303      	orrs	r3, r0
 801999a:	3401      	adds	r4, #1
 801999c:	9304      	str	r3, [sp, #16]
 801999e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199a2:	4826      	ldr	r0, [pc, #152]	; (8019a3c <_svfiprintf_r+0x1f0>)
 80199a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199a8:	2206      	movs	r2, #6
 80199aa:	f7e6 fc51 	bl	8000250 <memchr>
 80199ae:	2800      	cmp	r0, #0
 80199b0:	d038      	beq.n	8019a24 <_svfiprintf_r+0x1d8>
 80199b2:	4b23      	ldr	r3, [pc, #140]	; (8019a40 <_svfiprintf_r+0x1f4>)
 80199b4:	bb1b      	cbnz	r3, 80199fe <_svfiprintf_r+0x1b2>
 80199b6:	9b03      	ldr	r3, [sp, #12]
 80199b8:	3307      	adds	r3, #7
 80199ba:	f023 0307 	bic.w	r3, r3, #7
 80199be:	3308      	adds	r3, #8
 80199c0:	9303      	str	r3, [sp, #12]
 80199c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199c4:	4433      	add	r3, r6
 80199c6:	9309      	str	r3, [sp, #36]	; 0x24
 80199c8:	e767      	b.n	801989a <_svfiprintf_r+0x4e>
 80199ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80199ce:	460c      	mov	r4, r1
 80199d0:	2001      	movs	r0, #1
 80199d2:	e7a5      	b.n	8019920 <_svfiprintf_r+0xd4>
 80199d4:	2300      	movs	r3, #0
 80199d6:	3401      	adds	r4, #1
 80199d8:	9305      	str	r3, [sp, #20]
 80199da:	4619      	mov	r1, r3
 80199dc:	f04f 0c0a 	mov.w	ip, #10
 80199e0:	4620      	mov	r0, r4
 80199e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199e6:	3a30      	subs	r2, #48	; 0x30
 80199e8:	2a09      	cmp	r2, #9
 80199ea:	d903      	bls.n	80199f4 <_svfiprintf_r+0x1a8>
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d0c5      	beq.n	801997c <_svfiprintf_r+0x130>
 80199f0:	9105      	str	r1, [sp, #20]
 80199f2:	e7c3      	b.n	801997c <_svfiprintf_r+0x130>
 80199f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80199f8:	4604      	mov	r4, r0
 80199fa:	2301      	movs	r3, #1
 80199fc:	e7f0      	b.n	80199e0 <_svfiprintf_r+0x194>
 80199fe:	ab03      	add	r3, sp, #12
 8019a00:	9300      	str	r3, [sp, #0]
 8019a02:	462a      	mov	r2, r5
 8019a04:	4b0f      	ldr	r3, [pc, #60]	; (8019a44 <_svfiprintf_r+0x1f8>)
 8019a06:	a904      	add	r1, sp, #16
 8019a08:	4638      	mov	r0, r7
 8019a0a:	f7fc fa45 	bl	8015e98 <_printf_float>
 8019a0e:	1c42      	adds	r2, r0, #1
 8019a10:	4606      	mov	r6, r0
 8019a12:	d1d6      	bne.n	80199c2 <_svfiprintf_r+0x176>
 8019a14:	89ab      	ldrh	r3, [r5, #12]
 8019a16:	065b      	lsls	r3, r3, #25
 8019a18:	f53f af2c 	bmi.w	8019874 <_svfiprintf_r+0x28>
 8019a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a1e:	b01d      	add	sp, #116	; 0x74
 8019a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a24:	ab03      	add	r3, sp, #12
 8019a26:	9300      	str	r3, [sp, #0]
 8019a28:	462a      	mov	r2, r5
 8019a2a:	4b06      	ldr	r3, [pc, #24]	; (8019a44 <_svfiprintf_r+0x1f8>)
 8019a2c:	a904      	add	r1, sp, #16
 8019a2e:	4638      	mov	r0, r7
 8019a30:	f7fc fcbe 	bl	80163b0 <_printf_i>
 8019a34:	e7eb      	b.n	8019a0e <_svfiprintf_r+0x1c2>
 8019a36:	bf00      	nop
 8019a38:	0801cb94 	.word	0x0801cb94
 8019a3c:	0801cb9e 	.word	0x0801cb9e
 8019a40:	08015e99 	.word	0x08015e99
 8019a44:	08019795 	.word	0x08019795
 8019a48:	0801cb9a 	.word	0x0801cb9a

08019a4c <__sfputc_r>:
 8019a4c:	6893      	ldr	r3, [r2, #8]
 8019a4e:	3b01      	subs	r3, #1
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	b410      	push	{r4}
 8019a54:	6093      	str	r3, [r2, #8]
 8019a56:	da08      	bge.n	8019a6a <__sfputc_r+0x1e>
 8019a58:	6994      	ldr	r4, [r2, #24]
 8019a5a:	42a3      	cmp	r3, r4
 8019a5c:	db01      	blt.n	8019a62 <__sfputc_r+0x16>
 8019a5e:	290a      	cmp	r1, #10
 8019a60:	d103      	bne.n	8019a6a <__sfputc_r+0x1e>
 8019a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a66:	f000 b9b9 	b.w	8019ddc <__swbuf_r>
 8019a6a:	6813      	ldr	r3, [r2, #0]
 8019a6c:	1c58      	adds	r0, r3, #1
 8019a6e:	6010      	str	r0, [r2, #0]
 8019a70:	7019      	strb	r1, [r3, #0]
 8019a72:	4608      	mov	r0, r1
 8019a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a78:	4770      	bx	lr

08019a7a <__sfputs_r>:
 8019a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a7c:	4606      	mov	r6, r0
 8019a7e:	460f      	mov	r7, r1
 8019a80:	4614      	mov	r4, r2
 8019a82:	18d5      	adds	r5, r2, r3
 8019a84:	42ac      	cmp	r4, r5
 8019a86:	d101      	bne.n	8019a8c <__sfputs_r+0x12>
 8019a88:	2000      	movs	r0, #0
 8019a8a:	e007      	b.n	8019a9c <__sfputs_r+0x22>
 8019a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a90:	463a      	mov	r2, r7
 8019a92:	4630      	mov	r0, r6
 8019a94:	f7ff ffda 	bl	8019a4c <__sfputc_r>
 8019a98:	1c43      	adds	r3, r0, #1
 8019a9a:	d1f3      	bne.n	8019a84 <__sfputs_r+0xa>
 8019a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019aa0 <_vfiprintf_r>:
 8019aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa4:	460d      	mov	r5, r1
 8019aa6:	b09d      	sub	sp, #116	; 0x74
 8019aa8:	4614      	mov	r4, r2
 8019aaa:	4698      	mov	r8, r3
 8019aac:	4606      	mov	r6, r0
 8019aae:	b118      	cbz	r0, 8019ab8 <_vfiprintf_r+0x18>
 8019ab0:	6983      	ldr	r3, [r0, #24]
 8019ab2:	b90b      	cbnz	r3, 8019ab8 <_vfiprintf_r+0x18>
 8019ab4:	f7fe fcca 	bl	801844c <__sinit>
 8019ab8:	4b89      	ldr	r3, [pc, #548]	; (8019ce0 <_vfiprintf_r+0x240>)
 8019aba:	429d      	cmp	r5, r3
 8019abc:	d11b      	bne.n	8019af6 <_vfiprintf_r+0x56>
 8019abe:	6875      	ldr	r5, [r6, #4]
 8019ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ac2:	07d9      	lsls	r1, r3, #31
 8019ac4:	d405      	bmi.n	8019ad2 <_vfiprintf_r+0x32>
 8019ac6:	89ab      	ldrh	r3, [r5, #12]
 8019ac8:	059a      	lsls	r2, r3, #22
 8019aca:	d402      	bmi.n	8019ad2 <_vfiprintf_r+0x32>
 8019acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ace:	f7ff f8ce 	bl	8018c6e <__retarget_lock_acquire_recursive>
 8019ad2:	89ab      	ldrh	r3, [r5, #12]
 8019ad4:	071b      	lsls	r3, r3, #28
 8019ad6:	d501      	bpl.n	8019adc <_vfiprintf_r+0x3c>
 8019ad8:	692b      	ldr	r3, [r5, #16]
 8019ada:	b9eb      	cbnz	r3, 8019b18 <_vfiprintf_r+0x78>
 8019adc:	4629      	mov	r1, r5
 8019ade:	4630      	mov	r0, r6
 8019ae0:	f000 f9ee 	bl	8019ec0 <__swsetup_r>
 8019ae4:	b1c0      	cbz	r0, 8019b18 <_vfiprintf_r+0x78>
 8019ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ae8:	07dc      	lsls	r4, r3, #31
 8019aea:	d50e      	bpl.n	8019b0a <_vfiprintf_r+0x6a>
 8019aec:	f04f 30ff 	mov.w	r0, #4294967295
 8019af0:	b01d      	add	sp, #116	; 0x74
 8019af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019af6:	4b7b      	ldr	r3, [pc, #492]	; (8019ce4 <_vfiprintf_r+0x244>)
 8019af8:	429d      	cmp	r5, r3
 8019afa:	d101      	bne.n	8019b00 <_vfiprintf_r+0x60>
 8019afc:	68b5      	ldr	r5, [r6, #8]
 8019afe:	e7df      	b.n	8019ac0 <_vfiprintf_r+0x20>
 8019b00:	4b79      	ldr	r3, [pc, #484]	; (8019ce8 <_vfiprintf_r+0x248>)
 8019b02:	429d      	cmp	r5, r3
 8019b04:	bf08      	it	eq
 8019b06:	68f5      	ldreq	r5, [r6, #12]
 8019b08:	e7da      	b.n	8019ac0 <_vfiprintf_r+0x20>
 8019b0a:	89ab      	ldrh	r3, [r5, #12]
 8019b0c:	0598      	lsls	r0, r3, #22
 8019b0e:	d4ed      	bmi.n	8019aec <_vfiprintf_r+0x4c>
 8019b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b12:	f7ff f8ad 	bl	8018c70 <__retarget_lock_release_recursive>
 8019b16:	e7e9      	b.n	8019aec <_vfiprintf_r+0x4c>
 8019b18:	2300      	movs	r3, #0
 8019b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8019b1c:	2320      	movs	r3, #32
 8019b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b26:	2330      	movs	r3, #48	; 0x30
 8019b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019cec <_vfiprintf_r+0x24c>
 8019b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b30:	f04f 0901 	mov.w	r9, #1
 8019b34:	4623      	mov	r3, r4
 8019b36:	469a      	mov	sl, r3
 8019b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b3c:	b10a      	cbz	r2, 8019b42 <_vfiprintf_r+0xa2>
 8019b3e:	2a25      	cmp	r2, #37	; 0x25
 8019b40:	d1f9      	bne.n	8019b36 <_vfiprintf_r+0x96>
 8019b42:	ebba 0b04 	subs.w	fp, sl, r4
 8019b46:	d00b      	beq.n	8019b60 <_vfiprintf_r+0xc0>
 8019b48:	465b      	mov	r3, fp
 8019b4a:	4622      	mov	r2, r4
 8019b4c:	4629      	mov	r1, r5
 8019b4e:	4630      	mov	r0, r6
 8019b50:	f7ff ff93 	bl	8019a7a <__sfputs_r>
 8019b54:	3001      	adds	r0, #1
 8019b56:	f000 80aa 	beq.w	8019cae <_vfiprintf_r+0x20e>
 8019b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b5c:	445a      	add	r2, fp
 8019b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8019b60:	f89a 3000 	ldrb.w	r3, [sl]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	f000 80a2 	beq.w	8019cae <_vfiprintf_r+0x20e>
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8019b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b74:	f10a 0a01 	add.w	sl, sl, #1
 8019b78:	9304      	str	r3, [sp, #16]
 8019b7a:	9307      	str	r3, [sp, #28]
 8019b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b80:	931a      	str	r3, [sp, #104]	; 0x68
 8019b82:	4654      	mov	r4, sl
 8019b84:	2205      	movs	r2, #5
 8019b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b8a:	4858      	ldr	r0, [pc, #352]	; (8019cec <_vfiprintf_r+0x24c>)
 8019b8c:	f7e6 fb60 	bl	8000250 <memchr>
 8019b90:	9a04      	ldr	r2, [sp, #16]
 8019b92:	b9d8      	cbnz	r0, 8019bcc <_vfiprintf_r+0x12c>
 8019b94:	06d1      	lsls	r1, r2, #27
 8019b96:	bf44      	itt	mi
 8019b98:	2320      	movmi	r3, #32
 8019b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b9e:	0713      	lsls	r3, r2, #28
 8019ba0:	bf44      	itt	mi
 8019ba2:	232b      	movmi	r3, #43	; 0x2b
 8019ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8019bac:	2b2a      	cmp	r3, #42	; 0x2a
 8019bae:	d015      	beq.n	8019bdc <_vfiprintf_r+0x13c>
 8019bb0:	9a07      	ldr	r2, [sp, #28]
 8019bb2:	4654      	mov	r4, sl
 8019bb4:	2000      	movs	r0, #0
 8019bb6:	f04f 0c0a 	mov.w	ip, #10
 8019bba:	4621      	mov	r1, r4
 8019bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bc0:	3b30      	subs	r3, #48	; 0x30
 8019bc2:	2b09      	cmp	r3, #9
 8019bc4:	d94e      	bls.n	8019c64 <_vfiprintf_r+0x1c4>
 8019bc6:	b1b0      	cbz	r0, 8019bf6 <_vfiprintf_r+0x156>
 8019bc8:	9207      	str	r2, [sp, #28]
 8019bca:	e014      	b.n	8019bf6 <_vfiprintf_r+0x156>
 8019bcc:	eba0 0308 	sub.w	r3, r0, r8
 8019bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8019bd4:	4313      	orrs	r3, r2
 8019bd6:	9304      	str	r3, [sp, #16]
 8019bd8:	46a2      	mov	sl, r4
 8019bda:	e7d2      	b.n	8019b82 <_vfiprintf_r+0xe2>
 8019bdc:	9b03      	ldr	r3, [sp, #12]
 8019bde:	1d19      	adds	r1, r3, #4
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	9103      	str	r1, [sp, #12]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	bfbb      	ittet	lt
 8019be8:	425b      	neglt	r3, r3
 8019bea:	f042 0202 	orrlt.w	r2, r2, #2
 8019bee:	9307      	strge	r3, [sp, #28]
 8019bf0:	9307      	strlt	r3, [sp, #28]
 8019bf2:	bfb8      	it	lt
 8019bf4:	9204      	strlt	r2, [sp, #16]
 8019bf6:	7823      	ldrb	r3, [r4, #0]
 8019bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8019bfa:	d10c      	bne.n	8019c16 <_vfiprintf_r+0x176>
 8019bfc:	7863      	ldrb	r3, [r4, #1]
 8019bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8019c00:	d135      	bne.n	8019c6e <_vfiprintf_r+0x1ce>
 8019c02:	9b03      	ldr	r3, [sp, #12]
 8019c04:	1d1a      	adds	r2, r3, #4
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	9203      	str	r2, [sp, #12]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	bfb8      	it	lt
 8019c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c12:	3402      	adds	r4, #2
 8019c14:	9305      	str	r3, [sp, #20]
 8019c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019cfc <_vfiprintf_r+0x25c>
 8019c1a:	7821      	ldrb	r1, [r4, #0]
 8019c1c:	2203      	movs	r2, #3
 8019c1e:	4650      	mov	r0, sl
 8019c20:	f7e6 fb16 	bl	8000250 <memchr>
 8019c24:	b140      	cbz	r0, 8019c38 <_vfiprintf_r+0x198>
 8019c26:	2340      	movs	r3, #64	; 0x40
 8019c28:	eba0 000a 	sub.w	r0, r0, sl
 8019c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8019c30:	9b04      	ldr	r3, [sp, #16]
 8019c32:	4303      	orrs	r3, r0
 8019c34:	3401      	adds	r4, #1
 8019c36:	9304      	str	r3, [sp, #16]
 8019c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c3c:	482c      	ldr	r0, [pc, #176]	; (8019cf0 <_vfiprintf_r+0x250>)
 8019c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c42:	2206      	movs	r2, #6
 8019c44:	f7e6 fb04 	bl	8000250 <memchr>
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	d03f      	beq.n	8019ccc <_vfiprintf_r+0x22c>
 8019c4c:	4b29      	ldr	r3, [pc, #164]	; (8019cf4 <_vfiprintf_r+0x254>)
 8019c4e:	bb1b      	cbnz	r3, 8019c98 <_vfiprintf_r+0x1f8>
 8019c50:	9b03      	ldr	r3, [sp, #12]
 8019c52:	3307      	adds	r3, #7
 8019c54:	f023 0307 	bic.w	r3, r3, #7
 8019c58:	3308      	adds	r3, #8
 8019c5a:	9303      	str	r3, [sp, #12]
 8019c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c5e:	443b      	add	r3, r7
 8019c60:	9309      	str	r3, [sp, #36]	; 0x24
 8019c62:	e767      	b.n	8019b34 <_vfiprintf_r+0x94>
 8019c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c68:	460c      	mov	r4, r1
 8019c6a:	2001      	movs	r0, #1
 8019c6c:	e7a5      	b.n	8019bba <_vfiprintf_r+0x11a>
 8019c6e:	2300      	movs	r3, #0
 8019c70:	3401      	adds	r4, #1
 8019c72:	9305      	str	r3, [sp, #20]
 8019c74:	4619      	mov	r1, r3
 8019c76:	f04f 0c0a 	mov.w	ip, #10
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c80:	3a30      	subs	r2, #48	; 0x30
 8019c82:	2a09      	cmp	r2, #9
 8019c84:	d903      	bls.n	8019c8e <_vfiprintf_r+0x1ee>
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d0c5      	beq.n	8019c16 <_vfiprintf_r+0x176>
 8019c8a:	9105      	str	r1, [sp, #20]
 8019c8c:	e7c3      	b.n	8019c16 <_vfiprintf_r+0x176>
 8019c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c92:	4604      	mov	r4, r0
 8019c94:	2301      	movs	r3, #1
 8019c96:	e7f0      	b.n	8019c7a <_vfiprintf_r+0x1da>
 8019c98:	ab03      	add	r3, sp, #12
 8019c9a:	9300      	str	r3, [sp, #0]
 8019c9c:	462a      	mov	r2, r5
 8019c9e:	4b16      	ldr	r3, [pc, #88]	; (8019cf8 <_vfiprintf_r+0x258>)
 8019ca0:	a904      	add	r1, sp, #16
 8019ca2:	4630      	mov	r0, r6
 8019ca4:	f7fc f8f8 	bl	8015e98 <_printf_float>
 8019ca8:	4607      	mov	r7, r0
 8019caa:	1c78      	adds	r0, r7, #1
 8019cac:	d1d6      	bne.n	8019c5c <_vfiprintf_r+0x1bc>
 8019cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cb0:	07d9      	lsls	r1, r3, #31
 8019cb2:	d405      	bmi.n	8019cc0 <_vfiprintf_r+0x220>
 8019cb4:	89ab      	ldrh	r3, [r5, #12]
 8019cb6:	059a      	lsls	r2, r3, #22
 8019cb8:	d402      	bmi.n	8019cc0 <_vfiprintf_r+0x220>
 8019cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cbc:	f7fe ffd8 	bl	8018c70 <__retarget_lock_release_recursive>
 8019cc0:	89ab      	ldrh	r3, [r5, #12]
 8019cc2:	065b      	lsls	r3, r3, #25
 8019cc4:	f53f af12 	bmi.w	8019aec <_vfiprintf_r+0x4c>
 8019cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cca:	e711      	b.n	8019af0 <_vfiprintf_r+0x50>
 8019ccc:	ab03      	add	r3, sp, #12
 8019cce:	9300      	str	r3, [sp, #0]
 8019cd0:	462a      	mov	r2, r5
 8019cd2:	4b09      	ldr	r3, [pc, #36]	; (8019cf8 <_vfiprintf_r+0x258>)
 8019cd4:	a904      	add	r1, sp, #16
 8019cd6:	4630      	mov	r0, r6
 8019cd8:	f7fc fb6a 	bl	80163b0 <_printf_i>
 8019cdc:	e7e4      	b.n	8019ca8 <_vfiprintf_r+0x208>
 8019cde:	bf00      	nop
 8019ce0:	0801c978 	.word	0x0801c978
 8019ce4:	0801c998 	.word	0x0801c998
 8019ce8:	0801c958 	.word	0x0801c958
 8019cec:	0801cb94 	.word	0x0801cb94
 8019cf0:	0801cb9e 	.word	0x0801cb9e
 8019cf4:	08015e99 	.word	0x08015e99
 8019cf8:	08019a7b 	.word	0x08019a7b
 8019cfc:	0801cb9a 	.word	0x0801cb9a

08019d00 <nan>:
 8019d00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019d08 <nan+0x8>
 8019d04:	4770      	bx	lr
 8019d06:	bf00      	nop
 8019d08:	00000000 	.word	0x00000000
 8019d0c:	7ff80000 	.word	0x7ff80000

08019d10 <_sbrk_r>:
 8019d10:	b538      	push	{r3, r4, r5, lr}
 8019d12:	4d06      	ldr	r5, [pc, #24]	; (8019d2c <_sbrk_r+0x1c>)
 8019d14:	2300      	movs	r3, #0
 8019d16:	4604      	mov	r4, r0
 8019d18:	4608      	mov	r0, r1
 8019d1a:	602b      	str	r3, [r5, #0]
 8019d1c:	f7ed fcf8 	bl	8007710 <_sbrk>
 8019d20:	1c43      	adds	r3, r0, #1
 8019d22:	d102      	bne.n	8019d2a <_sbrk_r+0x1a>
 8019d24:	682b      	ldr	r3, [r5, #0]
 8019d26:	b103      	cbz	r3, 8019d2a <_sbrk_r+0x1a>
 8019d28:	6023      	str	r3, [r4, #0]
 8019d2a:	bd38      	pop	{r3, r4, r5, pc}
 8019d2c:	20031280 	.word	0x20031280

08019d30 <__sread>:
 8019d30:	b510      	push	{r4, lr}
 8019d32:	460c      	mov	r4, r1
 8019d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d38:	f000 faf4 	bl	801a324 <_read_r>
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	bfab      	itete	ge
 8019d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d42:	89a3      	ldrhlt	r3, [r4, #12]
 8019d44:	181b      	addge	r3, r3, r0
 8019d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019d4a:	bfac      	ite	ge
 8019d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8019d4e:	81a3      	strhlt	r3, [r4, #12]
 8019d50:	bd10      	pop	{r4, pc}

08019d52 <__swrite>:
 8019d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d56:	461f      	mov	r7, r3
 8019d58:	898b      	ldrh	r3, [r1, #12]
 8019d5a:	05db      	lsls	r3, r3, #23
 8019d5c:	4605      	mov	r5, r0
 8019d5e:	460c      	mov	r4, r1
 8019d60:	4616      	mov	r6, r2
 8019d62:	d505      	bpl.n	8019d70 <__swrite+0x1e>
 8019d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d68:	2302      	movs	r3, #2
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	f000 fa18 	bl	801a1a0 <_lseek_r>
 8019d70:	89a3      	ldrh	r3, [r4, #12]
 8019d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019d7a:	81a3      	strh	r3, [r4, #12]
 8019d7c:	4632      	mov	r2, r6
 8019d7e:	463b      	mov	r3, r7
 8019d80:	4628      	mov	r0, r5
 8019d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d86:	f000 b889 	b.w	8019e9c <_write_r>

08019d8a <__sseek>:
 8019d8a:	b510      	push	{r4, lr}
 8019d8c:	460c      	mov	r4, r1
 8019d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d92:	f000 fa05 	bl	801a1a0 <_lseek_r>
 8019d96:	1c43      	adds	r3, r0, #1
 8019d98:	89a3      	ldrh	r3, [r4, #12]
 8019d9a:	bf15      	itete	ne
 8019d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8019d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019da6:	81a3      	strheq	r3, [r4, #12]
 8019da8:	bf18      	it	ne
 8019daa:	81a3      	strhne	r3, [r4, #12]
 8019dac:	bd10      	pop	{r4, pc}

08019dae <__sclose>:
 8019dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019db2:	f000 b911 	b.w	8019fd8 <_close_r>

08019db6 <strncmp>:
 8019db6:	b510      	push	{r4, lr}
 8019db8:	b16a      	cbz	r2, 8019dd6 <strncmp+0x20>
 8019dba:	3901      	subs	r1, #1
 8019dbc:	1884      	adds	r4, r0, r2
 8019dbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019dc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019dc6:	4293      	cmp	r3, r2
 8019dc8:	d103      	bne.n	8019dd2 <strncmp+0x1c>
 8019dca:	42a0      	cmp	r0, r4
 8019dcc:	d001      	beq.n	8019dd2 <strncmp+0x1c>
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d1f5      	bne.n	8019dbe <strncmp+0x8>
 8019dd2:	1a98      	subs	r0, r3, r2
 8019dd4:	bd10      	pop	{r4, pc}
 8019dd6:	4610      	mov	r0, r2
 8019dd8:	e7fc      	b.n	8019dd4 <strncmp+0x1e>
	...

08019ddc <__swbuf_r>:
 8019ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dde:	460e      	mov	r6, r1
 8019de0:	4614      	mov	r4, r2
 8019de2:	4605      	mov	r5, r0
 8019de4:	b118      	cbz	r0, 8019dee <__swbuf_r+0x12>
 8019de6:	6983      	ldr	r3, [r0, #24]
 8019de8:	b90b      	cbnz	r3, 8019dee <__swbuf_r+0x12>
 8019dea:	f7fe fb2f 	bl	801844c <__sinit>
 8019dee:	4b21      	ldr	r3, [pc, #132]	; (8019e74 <__swbuf_r+0x98>)
 8019df0:	429c      	cmp	r4, r3
 8019df2:	d12b      	bne.n	8019e4c <__swbuf_r+0x70>
 8019df4:	686c      	ldr	r4, [r5, #4]
 8019df6:	69a3      	ldr	r3, [r4, #24]
 8019df8:	60a3      	str	r3, [r4, #8]
 8019dfa:	89a3      	ldrh	r3, [r4, #12]
 8019dfc:	071a      	lsls	r2, r3, #28
 8019dfe:	d52f      	bpl.n	8019e60 <__swbuf_r+0x84>
 8019e00:	6923      	ldr	r3, [r4, #16]
 8019e02:	b36b      	cbz	r3, 8019e60 <__swbuf_r+0x84>
 8019e04:	6923      	ldr	r3, [r4, #16]
 8019e06:	6820      	ldr	r0, [r4, #0]
 8019e08:	1ac0      	subs	r0, r0, r3
 8019e0a:	6963      	ldr	r3, [r4, #20]
 8019e0c:	b2f6      	uxtb	r6, r6
 8019e0e:	4283      	cmp	r3, r0
 8019e10:	4637      	mov	r7, r6
 8019e12:	dc04      	bgt.n	8019e1e <__swbuf_r+0x42>
 8019e14:	4621      	mov	r1, r4
 8019e16:	4628      	mov	r0, r5
 8019e18:	f000 f974 	bl	801a104 <_fflush_r>
 8019e1c:	bb30      	cbnz	r0, 8019e6c <__swbuf_r+0x90>
 8019e1e:	68a3      	ldr	r3, [r4, #8]
 8019e20:	3b01      	subs	r3, #1
 8019e22:	60a3      	str	r3, [r4, #8]
 8019e24:	6823      	ldr	r3, [r4, #0]
 8019e26:	1c5a      	adds	r2, r3, #1
 8019e28:	6022      	str	r2, [r4, #0]
 8019e2a:	701e      	strb	r6, [r3, #0]
 8019e2c:	6963      	ldr	r3, [r4, #20]
 8019e2e:	3001      	adds	r0, #1
 8019e30:	4283      	cmp	r3, r0
 8019e32:	d004      	beq.n	8019e3e <__swbuf_r+0x62>
 8019e34:	89a3      	ldrh	r3, [r4, #12]
 8019e36:	07db      	lsls	r3, r3, #31
 8019e38:	d506      	bpl.n	8019e48 <__swbuf_r+0x6c>
 8019e3a:	2e0a      	cmp	r6, #10
 8019e3c:	d104      	bne.n	8019e48 <__swbuf_r+0x6c>
 8019e3e:	4621      	mov	r1, r4
 8019e40:	4628      	mov	r0, r5
 8019e42:	f000 f95f 	bl	801a104 <_fflush_r>
 8019e46:	b988      	cbnz	r0, 8019e6c <__swbuf_r+0x90>
 8019e48:	4638      	mov	r0, r7
 8019e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e4c:	4b0a      	ldr	r3, [pc, #40]	; (8019e78 <__swbuf_r+0x9c>)
 8019e4e:	429c      	cmp	r4, r3
 8019e50:	d101      	bne.n	8019e56 <__swbuf_r+0x7a>
 8019e52:	68ac      	ldr	r4, [r5, #8]
 8019e54:	e7cf      	b.n	8019df6 <__swbuf_r+0x1a>
 8019e56:	4b09      	ldr	r3, [pc, #36]	; (8019e7c <__swbuf_r+0xa0>)
 8019e58:	429c      	cmp	r4, r3
 8019e5a:	bf08      	it	eq
 8019e5c:	68ec      	ldreq	r4, [r5, #12]
 8019e5e:	e7ca      	b.n	8019df6 <__swbuf_r+0x1a>
 8019e60:	4621      	mov	r1, r4
 8019e62:	4628      	mov	r0, r5
 8019e64:	f000 f82c 	bl	8019ec0 <__swsetup_r>
 8019e68:	2800      	cmp	r0, #0
 8019e6a:	d0cb      	beq.n	8019e04 <__swbuf_r+0x28>
 8019e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8019e70:	e7ea      	b.n	8019e48 <__swbuf_r+0x6c>
 8019e72:	bf00      	nop
 8019e74:	0801c978 	.word	0x0801c978
 8019e78:	0801c998 	.word	0x0801c998
 8019e7c:	0801c958 	.word	0x0801c958

08019e80 <__ascii_wctomb>:
 8019e80:	b149      	cbz	r1, 8019e96 <__ascii_wctomb+0x16>
 8019e82:	2aff      	cmp	r2, #255	; 0xff
 8019e84:	bf85      	ittet	hi
 8019e86:	238a      	movhi	r3, #138	; 0x8a
 8019e88:	6003      	strhi	r3, [r0, #0]
 8019e8a:	700a      	strbls	r2, [r1, #0]
 8019e8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019e90:	bf98      	it	ls
 8019e92:	2001      	movls	r0, #1
 8019e94:	4770      	bx	lr
 8019e96:	4608      	mov	r0, r1
 8019e98:	4770      	bx	lr
	...

08019e9c <_write_r>:
 8019e9c:	b538      	push	{r3, r4, r5, lr}
 8019e9e:	4d07      	ldr	r5, [pc, #28]	; (8019ebc <_write_r+0x20>)
 8019ea0:	4604      	mov	r4, r0
 8019ea2:	4608      	mov	r0, r1
 8019ea4:	4611      	mov	r1, r2
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	602a      	str	r2, [r5, #0]
 8019eaa:	461a      	mov	r2, r3
 8019eac:	f7ed fbdf 	bl	800766e <_write>
 8019eb0:	1c43      	adds	r3, r0, #1
 8019eb2:	d102      	bne.n	8019eba <_write_r+0x1e>
 8019eb4:	682b      	ldr	r3, [r5, #0]
 8019eb6:	b103      	cbz	r3, 8019eba <_write_r+0x1e>
 8019eb8:	6023      	str	r3, [r4, #0]
 8019eba:	bd38      	pop	{r3, r4, r5, pc}
 8019ebc:	20031280 	.word	0x20031280

08019ec0 <__swsetup_r>:
 8019ec0:	4b32      	ldr	r3, [pc, #200]	; (8019f8c <__swsetup_r+0xcc>)
 8019ec2:	b570      	push	{r4, r5, r6, lr}
 8019ec4:	681d      	ldr	r5, [r3, #0]
 8019ec6:	4606      	mov	r6, r0
 8019ec8:	460c      	mov	r4, r1
 8019eca:	b125      	cbz	r5, 8019ed6 <__swsetup_r+0x16>
 8019ecc:	69ab      	ldr	r3, [r5, #24]
 8019ece:	b913      	cbnz	r3, 8019ed6 <__swsetup_r+0x16>
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	f7fe fabb 	bl	801844c <__sinit>
 8019ed6:	4b2e      	ldr	r3, [pc, #184]	; (8019f90 <__swsetup_r+0xd0>)
 8019ed8:	429c      	cmp	r4, r3
 8019eda:	d10f      	bne.n	8019efc <__swsetup_r+0x3c>
 8019edc:	686c      	ldr	r4, [r5, #4]
 8019ede:	89a3      	ldrh	r3, [r4, #12]
 8019ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ee4:	0719      	lsls	r1, r3, #28
 8019ee6:	d42c      	bmi.n	8019f42 <__swsetup_r+0x82>
 8019ee8:	06dd      	lsls	r5, r3, #27
 8019eea:	d411      	bmi.n	8019f10 <__swsetup_r+0x50>
 8019eec:	2309      	movs	r3, #9
 8019eee:	6033      	str	r3, [r6, #0]
 8019ef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ef4:	81a3      	strh	r3, [r4, #12]
 8019ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8019efa:	e03e      	b.n	8019f7a <__swsetup_r+0xba>
 8019efc:	4b25      	ldr	r3, [pc, #148]	; (8019f94 <__swsetup_r+0xd4>)
 8019efe:	429c      	cmp	r4, r3
 8019f00:	d101      	bne.n	8019f06 <__swsetup_r+0x46>
 8019f02:	68ac      	ldr	r4, [r5, #8]
 8019f04:	e7eb      	b.n	8019ede <__swsetup_r+0x1e>
 8019f06:	4b24      	ldr	r3, [pc, #144]	; (8019f98 <__swsetup_r+0xd8>)
 8019f08:	429c      	cmp	r4, r3
 8019f0a:	bf08      	it	eq
 8019f0c:	68ec      	ldreq	r4, [r5, #12]
 8019f0e:	e7e6      	b.n	8019ede <__swsetup_r+0x1e>
 8019f10:	0758      	lsls	r0, r3, #29
 8019f12:	d512      	bpl.n	8019f3a <__swsetup_r+0x7a>
 8019f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f16:	b141      	cbz	r1, 8019f2a <__swsetup_r+0x6a>
 8019f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f1c:	4299      	cmp	r1, r3
 8019f1e:	d002      	beq.n	8019f26 <__swsetup_r+0x66>
 8019f20:	4630      	mov	r0, r6
 8019f22:	f7ff fb8d 	bl	8019640 <_free_r>
 8019f26:	2300      	movs	r3, #0
 8019f28:	6363      	str	r3, [r4, #52]	; 0x34
 8019f2a:	89a3      	ldrh	r3, [r4, #12]
 8019f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f30:	81a3      	strh	r3, [r4, #12]
 8019f32:	2300      	movs	r3, #0
 8019f34:	6063      	str	r3, [r4, #4]
 8019f36:	6923      	ldr	r3, [r4, #16]
 8019f38:	6023      	str	r3, [r4, #0]
 8019f3a:	89a3      	ldrh	r3, [r4, #12]
 8019f3c:	f043 0308 	orr.w	r3, r3, #8
 8019f40:	81a3      	strh	r3, [r4, #12]
 8019f42:	6923      	ldr	r3, [r4, #16]
 8019f44:	b94b      	cbnz	r3, 8019f5a <__swsetup_r+0x9a>
 8019f46:	89a3      	ldrh	r3, [r4, #12]
 8019f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f50:	d003      	beq.n	8019f5a <__swsetup_r+0x9a>
 8019f52:	4621      	mov	r1, r4
 8019f54:	4630      	mov	r0, r6
 8019f56:	f000 f959 	bl	801a20c <__smakebuf_r>
 8019f5a:	89a0      	ldrh	r0, [r4, #12]
 8019f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f60:	f010 0301 	ands.w	r3, r0, #1
 8019f64:	d00a      	beq.n	8019f7c <__swsetup_r+0xbc>
 8019f66:	2300      	movs	r3, #0
 8019f68:	60a3      	str	r3, [r4, #8]
 8019f6a:	6963      	ldr	r3, [r4, #20]
 8019f6c:	425b      	negs	r3, r3
 8019f6e:	61a3      	str	r3, [r4, #24]
 8019f70:	6923      	ldr	r3, [r4, #16]
 8019f72:	b943      	cbnz	r3, 8019f86 <__swsetup_r+0xc6>
 8019f74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f78:	d1ba      	bne.n	8019ef0 <__swsetup_r+0x30>
 8019f7a:	bd70      	pop	{r4, r5, r6, pc}
 8019f7c:	0781      	lsls	r1, r0, #30
 8019f7e:	bf58      	it	pl
 8019f80:	6963      	ldrpl	r3, [r4, #20]
 8019f82:	60a3      	str	r3, [r4, #8]
 8019f84:	e7f4      	b.n	8019f70 <__swsetup_r+0xb0>
 8019f86:	2000      	movs	r0, #0
 8019f88:	e7f7      	b.n	8019f7a <__swsetup_r+0xba>
 8019f8a:	bf00      	nop
 8019f8c:	20000254 	.word	0x20000254
 8019f90:	0801c978 	.word	0x0801c978
 8019f94:	0801c998 	.word	0x0801c998
 8019f98:	0801c958 	.word	0x0801c958

08019f9c <__assert_func>:
 8019f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019f9e:	4614      	mov	r4, r2
 8019fa0:	461a      	mov	r2, r3
 8019fa2:	4b09      	ldr	r3, [pc, #36]	; (8019fc8 <__assert_func+0x2c>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4605      	mov	r5, r0
 8019fa8:	68d8      	ldr	r0, [r3, #12]
 8019faa:	b14c      	cbz	r4, 8019fc0 <__assert_func+0x24>
 8019fac:	4b07      	ldr	r3, [pc, #28]	; (8019fcc <__assert_func+0x30>)
 8019fae:	9100      	str	r1, [sp, #0]
 8019fb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019fb4:	4906      	ldr	r1, [pc, #24]	; (8019fd0 <__assert_func+0x34>)
 8019fb6:	462b      	mov	r3, r5
 8019fb8:	f000 f8e0 	bl	801a17c <fiprintf>
 8019fbc:	f000 f9c4 	bl	801a348 <abort>
 8019fc0:	4b04      	ldr	r3, [pc, #16]	; (8019fd4 <__assert_func+0x38>)
 8019fc2:	461c      	mov	r4, r3
 8019fc4:	e7f3      	b.n	8019fae <__assert_func+0x12>
 8019fc6:	bf00      	nop
 8019fc8:	20000254 	.word	0x20000254
 8019fcc:	0801cba5 	.word	0x0801cba5
 8019fd0:	0801cbb2 	.word	0x0801cbb2
 8019fd4:	0801cbe0 	.word	0x0801cbe0

08019fd8 <_close_r>:
 8019fd8:	b538      	push	{r3, r4, r5, lr}
 8019fda:	4d06      	ldr	r5, [pc, #24]	; (8019ff4 <_close_r+0x1c>)
 8019fdc:	2300      	movs	r3, #0
 8019fde:	4604      	mov	r4, r0
 8019fe0:	4608      	mov	r0, r1
 8019fe2:	602b      	str	r3, [r5, #0]
 8019fe4:	f7ed fb5f 	bl	80076a6 <_close>
 8019fe8:	1c43      	adds	r3, r0, #1
 8019fea:	d102      	bne.n	8019ff2 <_close_r+0x1a>
 8019fec:	682b      	ldr	r3, [r5, #0]
 8019fee:	b103      	cbz	r3, 8019ff2 <_close_r+0x1a>
 8019ff0:	6023      	str	r3, [r4, #0]
 8019ff2:	bd38      	pop	{r3, r4, r5, pc}
 8019ff4:	20031280 	.word	0x20031280

08019ff8 <__sflush_r>:
 8019ff8:	898a      	ldrh	r2, [r1, #12]
 8019ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ffe:	4605      	mov	r5, r0
 801a000:	0710      	lsls	r0, r2, #28
 801a002:	460c      	mov	r4, r1
 801a004:	d458      	bmi.n	801a0b8 <__sflush_r+0xc0>
 801a006:	684b      	ldr	r3, [r1, #4]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	dc05      	bgt.n	801a018 <__sflush_r+0x20>
 801a00c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a00e:	2b00      	cmp	r3, #0
 801a010:	dc02      	bgt.n	801a018 <__sflush_r+0x20>
 801a012:	2000      	movs	r0, #0
 801a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a01a:	2e00      	cmp	r6, #0
 801a01c:	d0f9      	beq.n	801a012 <__sflush_r+0x1a>
 801a01e:	2300      	movs	r3, #0
 801a020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a024:	682f      	ldr	r7, [r5, #0]
 801a026:	602b      	str	r3, [r5, #0]
 801a028:	d032      	beq.n	801a090 <__sflush_r+0x98>
 801a02a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a02c:	89a3      	ldrh	r3, [r4, #12]
 801a02e:	075a      	lsls	r2, r3, #29
 801a030:	d505      	bpl.n	801a03e <__sflush_r+0x46>
 801a032:	6863      	ldr	r3, [r4, #4]
 801a034:	1ac0      	subs	r0, r0, r3
 801a036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a038:	b10b      	cbz	r3, 801a03e <__sflush_r+0x46>
 801a03a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a03c:	1ac0      	subs	r0, r0, r3
 801a03e:	2300      	movs	r3, #0
 801a040:	4602      	mov	r2, r0
 801a042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a044:	6a21      	ldr	r1, [r4, #32]
 801a046:	4628      	mov	r0, r5
 801a048:	47b0      	blx	r6
 801a04a:	1c43      	adds	r3, r0, #1
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	d106      	bne.n	801a05e <__sflush_r+0x66>
 801a050:	6829      	ldr	r1, [r5, #0]
 801a052:	291d      	cmp	r1, #29
 801a054:	d82c      	bhi.n	801a0b0 <__sflush_r+0xb8>
 801a056:	4a2a      	ldr	r2, [pc, #168]	; (801a100 <__sflush_r+0x108>)
 801a058:	40ca      	lsrs	r2, r1
 801a05a:	07d6      	lsls	r6, r2, #31
 801a05c:	d528      	bpl.n	801a0b0 <__sflush_r+0xb8>
 801a05e:	2200      	movs	r2, #0
 801a060:	6062      	str	r2, [r4, #4]
 801a062:	04d9      	lsls	r1, r3, #19
 801a064:	6922      	ldr	r2, [r4, #16]
 801a066:	6022      	str	r2, [r4, #0]
 801a068:	d504      	bpl.n	801a074 <__sflush_r+0x7c>
 801a06a:	1c42      	adds	r2, r0, #1
 801a06c:	d101      	bne.n	801a072 <__sflush_r+0x7a>
 801a06e:	682b      	ldr	r3, [r5, #0]
 801a070:	b903      	cbnz	r3, 801a074 <__sflush_r+0x7c>
 801a072:	6560      	str	r0, [r4, #84]	; 0x54
 801a074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a076:	602f      	str	r7, [r5, #0]
 801a078:	2900      	cmp	r1, #0
 801a07a:	d0ca      	beq.n	801a012 <__sflush_r+0x1a>
 801a07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a080:	4299      	cmp	r1, r3
 801a082:	d002      	beq.n	801a08a <__sflush_r+0x92>
 801a084:	4628      	mov	r0, r5
 801a086:	f7ff fadb 	bl	8019640 <_free_r>
 801a08a:	2000      	movs	r0, #0
 801a08c:	6360      	str	r0, [r4, #52]	; 0x34
 801a08e:	e7c1      	b.n	801a014 <__sflush_r+0x1c>
 801a090:	6a21      	ldr	r1, [r4, #32]
 801a092:	2301      	movs	r3, #1
 801a094:	4628      	mov	r0, r5
 801a096:	47b0      	blx	r6
 801a098:	1c41      	adds	r1, r0, #1
 801a09a:	d1c7      	bne.n	801a02c <__sflush_r+0x34>
 801a09c:	682b      	ldr	r3, [r5, #0]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d0c4      	beq.n	801a02c <__sflush_r+0x34>
 801a0a2:	2b1d      	cmp	r3, #29
 801a0a4:	d001      	beq.n	801a0aa <__sflush_r+0xb2>
 801a0a6:	2b16      	cmp	r3, #22
 801a0a8:	d101      	bne.n	801a0ae <__sflush_r+0xb6>
 801a0aa:	602f      	str	r7, [r5, #0]
 801a0ac:	e7b1      	b.n	801a012 <__sflush_r+0x1a>
 801a0ae:	89a3      	ldrh	r3, [r4, #12]
 801a0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0b4:	81a3      	strh	r3, [r4, #12]
 801a0b6:	e7ad      	b.n	801a014 <__sflush_r+0x1c>
 801a0b8:	690f      	ldr	r7, [r1, #16]
 801a0ba:	2f00      	cmp	r7, #0
 801a0bc:	d0a9      	beq.n	801a012 <__sflush_r+0x1a>
 801a0be:	0793      	lsls	r3, r2, #30
 801a0c0:	680e      	ldr	r6, [r1, #0]
 801a0c2:	bf08      	it	eq
 801a0c4:	694b      	ldreq	r3, [r1, #20]
 801a0c6:	600f      	str	r7, [r1, #0]
 801a0c8:	bf18      	it	ne
 801a0ca:	2300      	movne	r3, #0
 801a0cc:	eba6 0807 	sub.w	r8, r6, r7
 801a0d0:	608b      	str	r3, [r1, #8]
 801a0d2:	f1b8 0f00 	cmp.w	r8, #0
 801a0d6:	dd9c      	ble.n	801a012 <__sflush_r+0x1a>
 801a0d8:	6a21      	ldr	r1, [r4, #32]
 801a0da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a0dc:	4643      	mov	r3, r8
 801a0de:	463a      	mov	r2, r7
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	47b0      	blx	r6
 801a0e4:	2800      	cmp	r0, #0
 801a0e6:	dc06      	bgt.n	801a0f6 <__sflush_r+0xfe>
 801a0e8:	89a3      	ldrh	r3, [r4, #12]
 801a0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0ee:	81a3      	strh	r3, [r4, #12]
 801a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 801a0f4:	e78e      	b.n	801a014 <__sflush_r+0x1c>
 801a0f6:	4407      	add	r7, r0
 801a0f8:	eba8 0800 	sub.w	r8, r8, r0
 801a0fc:	e7e9      	b.n	801a0d2 <__sflush_r+0xda>
 801a0fe:	bf00      	nop
 801a100:	20400001 	.word	0x20400001

0801a104 <_fflush_r>:
 801a104:	b538      	push	{r3, r4, r5, lr}
 801a106:	690b      	ldr	r3, [r1, #16]
 801a108:	4605      	mov	r5, r0
 801a10a:	460c      	mov	r4, r1
 801a10c:	b913      	cbnz	r3, 801a114 <_fflush_r+0x10>
 801a10e:	2500      	movs	r5, #0
 801a110:	4628      	mov	r0, r5
 801a112:	bd38      	pop	{r3, r4, r5, pc}
 801a114:	b118      	cbz	r0, 801a11e <_fflush_r+0x1a>
 801a116:	6983      	ldr	r3, [r0, #24]
 801a118:	b90b      	cbnz	r3, 801a11e <_fflush_r+0x1a>
 801a11a:	f7fe f997 	bl	801844c <__sinit>
 801a11e:	4b14      	ldr	r3, [pc, #80]	; (801a170 <_fflush_r+0x6c>)
 801a120:	429c      	cmp	r4, r3
 801a122:	d11b      	bne.n	801a15c <_fflush_r+0x58>
 801a124:	686c      	ldr	r4, [r5, #4]
 801a126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d0ef      	beq.n	801a10e <_fflush_r+0xa>
 801a12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a130:	07d0      	lsls	r0, r2, #31
 801a132:	d404      	bmi.n	801a13e <_fflush_r+0x3a>
 801a134:	0599      	lsls	r1, r3, #22
 801a136:	d402      	bmi.n	801a13e <_fflush_r+0x3a>
 801a138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a13a:	f7fe fd98 	bl	8018c6e <__retarget_lock_acquire_recursive>
 801a13e:	4628      	mov	r0, r5
 801a140:	4621      	mov	r1, r4
 801a142:	f7ff ff59 	bl	8019ff8 <__sflush_r>
 801a146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a148:	07da      	lsls	r2, r3, #31
 801a14a:	4605      	mov	r5, r0
 801a14c:	d4e0      	bmi.n	801a110 <_fflush_r+0xc>
 801a14e:	89a3      	ldrh	r3, [r4, #12]
 801a150:	059b      	lsls	r3, r3, #22
 801a152:	d4dd      	bmi.n	801a110 <_fflush_r+0xc>
 801a154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a156:	f7fe fd8b 	bl	8018c70 <__retarget_lock_release_recursive>
 801a15a:	e7d9      	b.n	801a110 <_fflush_r+0xc>
 801a15c:	4b05      	ldr	r3, [pc, #20]	; (801a174 <_fflush_r+0x70>)
 801a15e:	429c      	cmp	r4, r3
 801a160:	d101      	bne.n	801a166 <_fflush_r+0x62>
 801a162:	68ac      	ldr	r4, [r5, #8]
 801a164:	e7df      	b.n	801a126 <_fflush_r+0x22>
 801a166:	4b04      	ldr	r3, [pc, #16]	; (801a178 <_fflush_r+0x74>)
 801a168:	429c      	cmp	r4, r3
 801a16a:	bf08      	it	eq
 801a16c:	68ec      	ldreq	r4, [r5, #12]
 801a16e:	e7da      	b.n	801a126 <_fflush_r+0x22>
 801a170:	0801c978 	.word	0x0801c978
 801a174:	0801c998 	.word	0x0801c998
 801a178:	0801c958 	.word	0x0801c958

0801a17c <fiprintf>:
 801a17c:	b40e      	push	{r1, r2, r3}
 801a17e:	b503      	push	{r0, r1, lr}
 801a180:	4601      	mov	r1, r0
 801a182:	ab03      	add	r3, sp, #12
 801a184:	4805      	ldr	r0, [pc, #20]	; (801a19c <fiprintf+0x20>)
 801a186:	f853 2b04 	ldr.w	r2, [r3], #4
 801a18a:	6800      	ldr	r0, [r0, #0]
 801a18c:	9301      	str	r3, [sp, #4]
 801a18e:	f7ff fc87 	bl	8019aa0 <_vfiprintf_r>
 801a192:	b002      	add	sp, #8
 801a194:	f85d eb04 	ldr.w	lr, [sp], #4
 801a198:	b003      	add	sp, #12
 801a19a:	4770      	bx	lr
 801a19c:	20000254 	.word	0x20000254

0801a1a0 <_lseek_r>:
 801a1a0:	b538      	push	{r3, r4, r5, lr}
 801a1a2:	4d07      	ldr	r5, [pc, #28]	; (801a1c0 <_lseek_r+0x20>)
 801a1a4:	4604      	mov	r4, r0
 801a1a6:	4608      	mov	r0, r1
 801a1a8:	4611      	mov	r1, r2
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	602a      	str	r2, [r5, #0]
 801a1ae:	461a      	mov	r2, r3
 801a1b0:	f7ed faa0 	bl	80076f4 <_lseek>
 801a1b4:	1c43      	adds	r3, r0, #1
 801a1b6:	d102      	bne.n	801a1be <_lseek_r+0x1e>
 801a1b8:	682b      	ldr	r3, [r5, #0]
 801a1ba:	b103      	cbz	r3, 801a1be <_lseek_r+0x1e>
 801a1bc:	6023      	str	r3, [r4, #0]
 801a1be:	bd38      	pop	{r3, r4, r5, pc}
 801a1c0:	20031280 	.word	0x20031280

0801a1c4 <__swhatbuf_r>:
 801a1c4:	b570      	push	{r4, r5, r6, lr}
 801a1c6:	460e      	mov	r6, r1
 801a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1cc:	2900      	cmp	r1, #0
 801a1ce:	b096      	sub	sp, #88	; 0x58
 801a1d0:	4614      	mov	r4, r2
 801a1d2:	461d      	mov	r5, r3
 801a1d4:	da07      	bge.n	801a1e6 <__swhatbuf_r+0x22>
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	602b      	str	r3, [r5, #0]
 801a1da:	89b3      	ldrh	r3, [r6, #12]
 801a1dc:	061a      	lsls	r2, r3, #24
 801a1de:	d410      	bmi.n	801a202 <__swhatbuf_r+0x3e>
 801a1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1e4:	e00e      	b.n	801a204 <__swhatbuf_r+0x40>
 801a1e6:	466a      	mov	r2, sp
 801a1e8:	f000 f8b6 	bl	801a358 <_fstat_r>
 801a1ec:	2800      	cmp	r0, #0
 801a1ee:	dbf2      	blt.n	801a1d6 <__swhatbuf_r+0x12>
 801a1f0:	9a01      	ldr	r2, [sp, #4]
 801a1f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a1f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a1fa:	425a      	negs	r2, r3
 801a1fc:	415a      	adcs	r2, r3
 801a1fe:	602a      	str	r2, [r5, #0]
 801a200:	e7ee      	b.n	801a1e0 <__swhatbuf_r+0x1c>
 801a202:	2340      	movs	r3, #64	; 0x40
 801a204:	2000      	movs	r0, #0
 801a206:	6023      	str	r3, [r4, #0]
 801a208:	b016      	add	sp, #88	; 0x58
 801a20a:	bd70      	pop	{r4, r5, r6, pc}

0801a20c <__smakebuf_r>:
 801a20c:	898b      	ldrh	r3, [r1, #12]
 801a20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a210:	079d      	lsls	r5, r3, #30
 801a212:	4606      	mov	r6, r0
 801a214:	460c      	mov	r4, r1
 801a216:	d507      	bpl.n	801a228 <__smakebuf_r+0x1c>
 801a218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a21c:	6023      	str	r3, [r4, #0]
 801a21e:	6123      	str	r3, [r4, #16]
 801a220:	2301      	movs	r3, #1
 801a222:	6163      	str	r3, [r4, #20]
 801a224:	b002      	add	sp, #8
 801a226:	bd70      	pop	{r4, r5, r6, pc}
 801a228:	ab01      	add	r3, sp, #4
 801a22a:	466a      	mov	r2, sp
 801a22c:	f7ff ffca 	bl	801a1c4 <__swhatbuf_r>
 801a230:	9900      	ldr	r1, [sp, #0]
 801a232:	4605      	mov	r5, r0
 801a234:	4630      	mov	r0, r6
 801a236:	f7ff fa53 	bl	80196e0 <_malloc_r>
 801a23a:	b948      	cbnz	r0, 801a250 <__smakebuf_r+0x44>
 801a23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a240:	059a      	lsls	r2, r3, #22
 801a242:	d4ef      	bmi.n	801a224 <__smakebuf_r+0x18>
 801a244:	f023 0303 	bic.w	r3, r3, #3
 801a248:	f043 0302 	orr.w	r3, r3, #2
 801a24c:	81a3      	strh	r3, [r4, #12]
 801a24e:	e7e3      	b.n	801a218 <__smakebuf_r+0xc>
 801a250:	4b0d      	ldr	r3, [pc, #52]	; (801a288 <__smakebuf_r+0x7c>)
 801a252:	62b3      	str	r3, [r6, #40]	; 0x28
 801a254:	89a3      	ldrh	r3, [r4, #12]
 801a256:	6020      	str	r0, [r4, #0]
 801a258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a25c:	81a3      	strh	r3, [r4, #12]
 801a25e:	9b00      	ldr	r3, [sp, #0]
 801a260:	6163      	str	r3, [r4, #20]
 801a262:	9b01      	ldr	r3, [sp, #4]
 801a264:	6120      	str	r0, [r4, #16]
 801a266:	b15b      	cbz	r3, 801a280 <__smakebuf_r+0x74>
 801a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a26c:	4630      	mov	r0, r6
 801a26e:	f000 f885 	bl	801a37c <_isatty_r>
 801a272:	b128      	cbz	r0, 801a280 <__smakebuf_r+0x74>
 801a274:	89a3      	ldrh	r3, [r4, #12]
 801a276:	f023 0303 	bic.w	r3, r3, #3
 801a27a:	f043 0301 	orr.w	r3, r3, #1
 801a27e:	81a3      	strh	r3, [r4, #12]
 801a280:	89a0      	ldrh	r0, [r4, #12]
 801a282:	4305      	orrs	r5, r0
 801a284:	81a5      	strh	r5, [r4, #12]
 801a286:	e7cd      	b.n	801a224 <__smakebuf_r+0x18>
 801a288:	080183e5 	.word	0x080183e5

0801a28c <memmove>:
 801a28c:	4288      	cmp	r0, r1
 801a28e:	b510      	push	{r4, lr}
 801a290:	eb01 0402 	add.w	r4, r1, r2
 801a294:	d902      	bls.n	801a29c <memmove+0x10>
 801a296:	4284      	cmp	r4, r0
 801a298:	4623      	mov	r3, r4
 801a29a:	d807      	bhi.n	801a2ac <memmove+0x20>
 801a29c:	1e43      	subs	r3, r0, #1
 801a29e:	42a1      	cmp	r1, r4
 801a2a0:	d008      	beq.n	801a2b4 <memmove+0x28>
 801a2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a2aa:	e7f8      	b.n	801a29e <memmove+0x12>
 801a2ac:	4402      	add	r2, r0
 801a2ae:	4601      	mov	r1, r0
 801a2b0:	428a      	cmp	r2, r1
 801a2b2:	d100      	bne.n	801a2b6 <memmove+0x2a>
 801a2b4:	bd10      	pop	{r4, pc}
 801a2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a2be:	e7f7      	b.n	801a2b0 <memmove+0x24>

0801a2c0 <__malloc_lock>:
 801a2c0:	4801      	ldr	r0, [pc, #4]	; (801a2c8 <__malloc_lock+0x8>)
 801a2c2:	f7fe bcd4 	b.w	8018c6e <__retarget_lock_acquire_recursive>
 801a2c6:	bf00      	nop
 801a2c8:	20031278 	.word	0x20031278

0801a2cc <__malloc_unlock>:
 801a2cc:	4801      	ldr	r0, [pc, #4]	; (801a2d4 <__malloc_unlock+0x8>)
 801a2ce:	f7fe bccf 	b.w	8018c70 <__retarget_lock_release_recursive>
 801a2d2:	bf00      	nop
 801a2d4:	20031278 	.word	0x20031278

0801a2d8 <_realloc_r>:
 801a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2da:	4607      	mov	r7, r0
 801a2dc:	4614      	mov	r4, r2
 801a2de:	460e      	mov	r6, r1
 801a2e0:	b921      	cbnz	r1, 801a2ec <_realloc_r+0x14>
 801a2e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a2e6:	4611      	mov	r1, r2
 801a2e8:	f7ff b9fa 	b.w	80196e0 <_malloc_r>
 801a2ec:	b922      	cbnz	r2, 801a2f8 <_realloc_r+0x20>
 801a2ee:	f7ff f9a7 	bl	8019640 <_free_r>
 801a2f2:	4625      	mov	r5, r4
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2f8:	f000 f850 	bl	801a39c <_malloc_usable_size_r>
 801a2fc:	42a0      	cmp	r0, r4
 801a2fe:	d20f      	bcs.n	801a320 <_realloc_r+0x48>
 801a300:	4621      	mov	r1, r4
 801a302:	4638      	mov	r0, r7
 801a304:	f7ff f9ec 	bl	80196e0 <_malloc_r>
 801a308:	4605      	mov	r5, r0
 801a30a:	2800      	cmp	r0, #0
 801a30c:	d0f2      	beq.n	801a2f4 <_realloc_r+0x1c>
 801a30e:	4631      	mov	r1, r6
 801a310:	4622      	mov	r2, r4
 801a312:	f7fb fd1b 	bl	8015d4c <memcpy>
 801a316:	4631      	mov	r1, r6
 801a318:	4638      	mov	r0, r7
 801a31a:	f7ff f991 	bl	8019640 <_free_r>
 801a31e:	e7e9      	b.n	801a2f4 <_realloc_r+0x1c>
 801a320:	4635      	mov	r5, r6
 801a322:	e7e7      	b.n	801a2f4 <_realloc_r+0x1c>

0801a324 <_read_r>:
 801a324:	b538      	push	{r3, r4, r5, lr}
 801a326:	4d07      	ldr	r5, [pc, #28]	; (801a344 <_read_r+0x20>)
 801a328:	4604      	mov	r4, r0
 801a32a:	4608      	mov	r0, r1
 801a32c:	4611      	mov	r1, r2
 801a32e:	2200      	movs	r2, #0
 801a330:	602a      	str	r2, [r5, #0]
 801a332:	461a      	mov	r2, r3
 801a334:	f7ed f97e 	bl	8007634 <_read>
 801a338:	1c43      	adds	r3, r0, #1
 801a33a:	d102      	bne.n	801a342 <_read_r+0x1e>
 801a33c:	682b      	ldr	r3, [r5, #0]
 801a33e:	b103      	cbz	r3, 801a342 <_read_r+0x1e>
 801a340:	6023      	str	r3, [r4, #0]
 801a342:	bd38      	pop	{r3, r4, r5, pc}
 801a344:	20031280 	.word	0x20031280

0801a348 <abort>:
 801a348:	b508      	push	{r3, lr}
 801a34a:	2006      	movs	r0, #6
 801a34c:	f000 f856 	bl	801a3fc <raise>
 801a350:	2001      	movs	r0, #1
 801a352:	f7ed f965 	bl	8007620 <_exit>
	...

0801a358 <_fstat_r>:
 801a358:	b538      	push	{r3, r4, r5, lr}
 801a35a:	4d07      	ldr	r5, [pc, #28]	; (801a378 <_fstat_r+0x20>)
 801a35c:	2300      	movs	r3, #0
 801a35e:	4604      	mov	r4, r0
 801a360:	4608      	mov	r0, r1
 801a362:	4611      	mov	r1, r2
 801a364:	602b      	str	r3, [r5, #0]
 801a366:	f7ed f9aa 	bl	80076be <_fstat>
 801a36a:	1c43      	adds	r3, r0, #1
 801a36c:	d102      	bne.n	801a374 <_fstat_r+0x1c>
 801a36e:	682b      	ldr	r3, [r5, #0]
 801a370:	b103      	cbz	r3, 801a374 <_fstat_r+0x1c>
 801a372:	6023      	str	r3, [r4, #0]
 801a374:	bd38      	pop	{r3, r4, r5, pc}
 801a376:	bf00      	nop
 801a378:	20031280 	.word	0x20031280

0801a37c <_isatty_r>:
 801a37c:	b538      	push	{r3, r4, r5, lr}
 801a37e:	4d06      	ldr	r5, [pc, #24]	; (801a398 <_isatty_r+0x1c>)
 801a380:	2300      	movs	r3, #0
 801a382:	4604      	mov	r4, r0
 801a384:	4608      	mov	r0, r1
 801a386:	602b      	str	r3, [r5, #0]
 801a388:	f7ed f9a9 	bl	80076de <_isatty>
 801a38c:	1c43      	adds	r3, r0, #1
 801a38e:	d102      	bne.n	801a396 <_isatty_r+0x1a>
 801a390:	682b      	ldr	r3, [r5, #0]
 801a392:	b103      	cbz	r3, 801a396 <_isatty_r+0x1a>
 801a394:	6023      	str	r3, [r4, #0]
 801a396:	bd38      	pop	{r3, r4, r5, pc}
 801a398:	20031280 	.word	0x20031280

0801a39c <_malloc_usable_size_r>:
 801a39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3a0:	1f18      	subs	r0, r3, #4
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	bfbc      	itt	lt
 801a3a6:	580b      	ldrlt	r3, [r1, r0]
 801a3a8:	18c0      	addlt	r0, r0, r3
 801a3aa:	4770      	bx	lr

0801a3ac <_raise_r>:
 801a3ac:	291f      	cmp	r1, #31
 801a3ae:	b538      	push	{r3, r4, r5, lr}
 801a3b0:	4604      	mov	r4, r0
 801a3b2:	460d      	mov	r5, r1
 801a3b4:	d904      	bls.n	801a3c0 <_raise_r+0x14>
 801a3b6:	2316      	movs	r3, #22
 801a3b8:	6003      	str	r3, [r0, #0]
 801a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a3be:	bd38      	pop	{r3, r4, r5, pc}
 801a3c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a3c2:	b112      	cbz	r2, 801a3ca <_raise_r+0x1e>
 801a3c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a3c8:	b94b      	cbnz	r3, 801a3de <_raise_r+0x32>
 801a3ca:	4620      	mov	r0, r4
 801a3cc:	f000 f830 	bl	801a430 <_getpid_r>
 801a3d0:	462a      	mov	r2, r5
 801a3d2:	4601      	mov	r1, r0
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3da:	f000 b817 	b.w	801a40c <_kill_r>
 801a3de:	2b01      	cmp	r3, #1
 801a3e0:	d00a      	beq.n	801a3f8 <_raise_r+0x4c>
 801a3e2:	1c59      	adds	r1, r3, #1
 801a3e4:	d103      	bne.n	801a3ee <_raise_r+0x42>
 801a3e6:	2316      	movs	r3, #22
 801a3e8:	6003      	str	r3, [r0, #0]
 801a3ea:	2001      	movs	r0, #1
 801a3ec:	e7e7      	b.n	801a3be <_raise_r+0x12>
 801a3ee:	2400      	movs	r4, #0
 801a3f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a3f4:	4628      	mov	r0, r5
 801a3f6:	4798      	blx	r3
 801a3f8:	2000      	movs	r0, #0
 801a3fa:	e7e0      	b.n	801a3be <_raise_r+0x12>

0801a3fc <raise>:
 801a3fc:	4b02      	ldr	r3, [pc, #8]	; (801a408 <raise+0xc>)
 801a3fe:	4601      	mov	r1, r0
 801a400:	6818      	ldr	r0, [r3, #0]
 801a402:	f7ff bfd3 	b.w	801a3ac <_raise_r>
 801a406:	bf00      	nop
 801a408:	20000254 	.word	0x20000254

0801a40c <_kill_r>:
 801a40c:	b538      	push	{r3, r4, r5, lr}
 801a40e:	4d07      	ldr	r5, [pc, #28]	; (801a42c <_kill_r+0x20>)
 801a410:	2300      	movs	r3, #0
 801a412:	4604      	mov	r4, r0
 801a414:	4608      	mov	r0, r1
 801a416:	4611      	mov	r1, r2
 801a418:	602b      	str	r3, [r5, #0]
 801a41a:	f7ed f8f1 	bl	8007600 <_kill>
 801a41e:	1c43      	adds	r3, r0, #1
 801a420:	d102      	bne.n	801a428 <_kill_r+0x1c>
 801a422:	682b      	ldr	r3, [r5, #0]
 801a424:	b103      	cbz	r3, 801a428 <_kill_r+0x1c>
 801a426:	6023      	str	r3, [r4, #0]
 801a428:	bd38      	pop	{r3, r4, r5, pc}
 801a42a:	bf00      	nop
 801a42c:	20031280 	.word	0x20031280

0801a430 <_getpid_r>:
 801a430:	f7ed b8de 	b.w	80075f0 <_getpid>

0801a434 <_init>:
 801a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a436:	bf00      	nop
 801a438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a43a:	bc08      	pop	{r3}
 801a43c:	469e      	mov	lr, r3
 801a43e:	4770      	bx	lr

0801a440 <_fini>:
 801a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a442:	bf00      	nop
 801a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a446:	bc08      	pop	{r3}
 801a448:	469e      	mov	lr, r3
 801a44a:	4770      	bx	lr
