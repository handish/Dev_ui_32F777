
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014054  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd0  08014258  08014258  00024258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015228  08015228  00030338  2**0
                  CONTENTS
  4 .ARM          00000008  08015228  08015228  00025228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015230  08015230  00030338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015230  08015230  00025230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015234  08015234  00025234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  08015238  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023df0  20000338  08015570  00030338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20024128  08015570  00034128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca54  00000000  00000000  00030366  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f9e  00000000  00000000  0005cdba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002238  00000000  00000000  00061d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002000  00000000  00000000  00063f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006ff8  00000000  00000000  00065f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c26f  00000000  00000000  0006cf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011acb6  00000000  00000000  000891f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a3ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a160  00000000  00000000  001a3f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000338 	.word	0x20000338
 800021c:	00000000 	.word	0x00000000
 8000220:	0801423c 	.word	0x0801423c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000033c 	.word	0x2000033c
 800023c:	0801423c 	.word	0x0801423c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f008 fb3d 	bl	8008ca0 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f008 fb38 	bl	8008ca0 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f008 fb33 	bl	8008ca0 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f008 fb2d 	bl	8008ca0 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f00f fdba 	bl	80101f0 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20010308 	.word	0x20010308
 8000694:	20010310 	.word	0x20010310

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f008 fafc 	bl	8008ca0 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00a fba6 	bl	800ae08 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f008 faed 	bl	8008ca0 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20010310 	.word	0x20010310

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00f fd53 	bl	8010206 <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f008 fa67 	bl	8008ca0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00a fb15 	bl	800ae08 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f008 fa5c 	bl	8008ca0 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00a fafe 	bl	800ae08 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00a faf3 	bl	800ae08 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00a faea 	bl	800ae08 <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00a fad8 	bl	800ae08 <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00a facd 	bl	800ae08 <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00a fac4 	bl	800ae08 <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f008 f9e3 	bl	8008ca0 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00a fa91 	bl	800ae08 <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f008 f9d8 	bl	8008ca0 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000354 	.word	0x20000354
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20010310 	.word	0x20010310
 8000918:	20003233 	.word	0x20003233

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2001030a 	.word	0x2001030a
 8000964:	2001030c 	.word	0x2001030c
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f00f fc44 	bl	8010206 <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000354 	.word	0x20000354

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20010308 	.word	0x20010308
 8000a3c:	20000354 	.word	0x20000354
 8000a40:	0801479c 	.word	0x0801479c
 8000a44:	08014794 	.word	0x08014794

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000354 	.word	0x20000354
 8000aec:	20010308 	.word	0x20010308
 8000af0:	0801479c 	.word	0x0801479c
 8000af4:	08014794 	.word	0x08014794

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000354 	.word	0x20000354
 8000cc4:	080147a4 	.word	0x080147a4
 8000cc8:	080147ac 	.word	0x080147ac
 8000ccc:	20010308 	.word	0x20010308

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	080147b4 	.word	0x080147b4
 8001154:	080147bc 	.word	0x080147bc
 8001158:	20000354 	.word	0x20000354
 800115c:	20010308 	.word	0x20010308

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2001030a 	.word	0x2001030a

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f005 fb26 	bl	8007352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f8f3 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 ff27 	bl	8002b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 fee3 	bl	8002ad8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 f995 	bl	8002040 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fa71 	bl	80021fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 faeb 	bl	80022f4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fb81 	bl	8002424 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fbbf 	bl	80024a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fbfd 	bl	8002524 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fc3b 	bl	80025a4 <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fc79 	bl	8002624 <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fc9d 	bl	8002670 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fcd9 	bl	80026ec <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fd15 	bl	8002768 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fd8b 	bl	8002858 <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fe0b 	bl	800295c <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 fe39 	bl	80029bc <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 fe67 	bl	8002a1c <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 fe95 	bl	8002a7c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f8b3 	bl	8002ebc <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	494e      	ldr	r1, [pc, #312]	; (8001e94 <main+0x198>)
 8001d5c:	484e      	ldr	r0, [pc, #312]	; (8001e98 <main+0x19c>)
 8001d5e:	f005 fccd 	bl	80076fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	494d      	ldr	r1, [pc, #308]	; (8001e9c <main+0x1a0>)
 8001d68:	484d      	ldr	r0, [pc, #308]	; (8001ea0 <main+0x1a4>)
 8001d6a:	f005 fcc7 	bl	80076fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	494c      	ldr	r1, [pc, #304]	; (8001ea4 <main+0x1a8>)
 8001d74:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <main+0x1ac>)
 8001d76:	f005 fcc1 	bl	80076fc <HAL_ADC_Start_DMA>
   int x=1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d7e:	f001 fa07 	bl	8003190 <configureLEDDriver>
    setErrorLED(4,OFF);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2004      	movs	r0, #4
 8001d86:	f001 fa8f 	bl	80032a8 <setErrorLED>
    HAL_Delay(1000);
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	f005 fb0d 	bl	80073ac <HAL_Delay>
    setErrorLED(7,OFF);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2007      	movs	r0, #7
 8001d96:	f001 fa87 	bl	80032a8 <setErrorLED>
    setErrorLED(8,ON);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	f001 fa83 	bl	80032a8 <setErrorLED>
    HAL_Delay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f005 fb01 	bl	80073ac <HAL_Delay>
    setErrorLED(8,OFF);
 8001daa:	2100      	movs	r1, #0
 8001dac:	2008      	movs	r0, #8
 8001dae:	f001 fa7b 	bl	80032a8 <setErrorLED>
    setErrorLED(9,ON);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2009      	movs	r0, #9
 8001db6:	f001 fa77 	bl	80032a8 <setErrorLED>
    HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dbe:	f005 faf5 	bl	80073ac <HAL_Delay>
    setErrorLED(8,ON);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2008      	movs	r0, #8
 8001dc6:	f001 fa6f 	bl	80032a8 <setErrorLED>
    setErrorLED(9,ON);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2009      	movs	r0, #9
 8001dce:	f001 fa6b 	bl	80032a8 <setErrorLED>
    HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd6:	f005 fae9 	bl	80073ac <HAL_Delay>
    setErrorLED(9,OFF);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2009      	movs	r0, #9
 8001dde:	f001 fa63 	bl	80032a8 <setErrorLED>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001de2:	f00b fb3f 	bl	800d464 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <main+0x1b0>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <main+0x1b4>)
 8001dec:	f00b fba4 	bl	800d538 <osThreadNew>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <main+0x1b8>)
 8001df4:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <main+0x1bc>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4830      	ldr	r0, [pc, #192]	; (8001ebc <main+0x1c0>)
 8001dfc:	f00b fb9c 	bl	800d538 <osThreadNew>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <main+0x1c4>)
 8001e04:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <main+0x1c8>)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	482f      	ldr	r0, [pc, #188]	; (8001ec8 <main+0x1cc>)
 8001e0c:	f00b fb94 	bl	800d538 <osThreadNew>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <main+0x1d0>)
 8001e14:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <main+0x1d4>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <main+0x1d8>)
 8001e1c:	f00b fb8c 	bl	800d538 <osThreadNew>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <main+0x1dc>)
 8001e24:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <main+0x1e0>)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <main+0x1e4>)
 8001e2c:	f00b fb84 	bl	800d538 <osThreadNew>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <main+0x1e8>)
 8001e34:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e36:	f00b fb49 	bl	800d4cc <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e3e:	f005 fab5 	bl	80073ac <HAL_Delay>
	  if (!x) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <main+0x172>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <main+0x1ec>)
 8001e50:	f006 ff26 	bl	8008ca0 <HAL_GPIO_WritePin>
		  x=1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <main+0x1f0>)
 8001e5e:	f006 ff1f 	bl	8008ca0 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2110      	movs	r1, #16
 8001e66:	4821      	ldr	r0, [pc, #132]	; (8001eec <main+0x1f0>)
 8001e68:	f006 ff1a 	bl	8008ca0 <HAL_GPIO_WritePin>
 8001e6c:	e7e5      	b.n	8001e3a <main+0x13e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <main+0x1ec>)
 8001e76:	f006 ff13 	bl	8008ca0 <HAL_GPIO_WritePin>
		  x=0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2110      	movs	r1, #16
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <main+0x1f0>)
 8001e84:	f006 ff0c 	bl	8008ca0 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <main+0x1f0>)
 8001e8e:	f006 ff07 	bl	8008ca0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001e92:	e7d2      	b.n	8001e3a <main+0x13e>
 8001e94:	20010ac4 	.word	0x20010ac4
 8001e98:	20013254 	.word	0x20013254
 8001e9c:	20021874 	.word	0x20021874
 8001ea0:	2001053c 	.word	0x2001053c
 8001ea4:	2001337c 	.word	0x2001337c
 8001ea8:	200132a0 	.word	0x200132a0
 8001eac:	080147c4 	.word	0x080147c4
 8001eb0:	08003d69 	.word	0x08003d69
 8001eb4:	20021870 	.word	0x20021870
 8001eb8:	080147e8 	.word	0x080147e8
 8001ebc:	08003d89 	.word	0x08003d89
 8001ec0:	20024048 	.word	0x20024048
 8001ec4:	0801480c 	.word	0x0801480c
 8001ec8:	08003e09 	.word	0x08003e09
 8001ecc:	20024044 	.word	0x20024044
 8001ed0:	08014830 	.word	0x08014830
 8001ed4:	08003ef5 	.word	0x08003ef5
 8001ed8:	2001329c 	.word	0x2001329c
 8001edc:	08014854 	.word	0x08014854
 8001ee0:	08004021 	.word	0x08004021
 8001ee4:	20013378 	.word	0x20013378
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b8      	sub	sp, #224	; 0xe0
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001efa:	2234      	movs	r2, #52	; 0x34
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f00e f981 	bl	8010206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	2290      	movs	r2, #144	; 0x90
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00e f972 	bl	8010206 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f22:	f007 fd4f 	bl	80099c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <SystemClock_Config+0x144>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <SystemClock_Config+0x144>)
 8001f2c:	f023 0318 	bic.w	r3, r3, #24
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <SystemClock_Config+0x144>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <SystemClock_Config+0x144>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <SystemClock_Config+0x144>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <SystemClock_Config+0x148>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f52:	4a39      	ldr	r2, [pc, #228]	; (8002038 <SystemClock_Config+0x148>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <SystemClock_Config+0x148>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001f8e:	2390      	movs	r3, #144	; 0x90
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f007 fd1d 	bl	80099e4 <HAL_RCC_OscConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fb0:	f002 f8fa 	bl	80041a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f007 ffaf 	bl	8009f40 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001fe8:	f002 f8de 	bl	80041a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <SystemClock_Config+0x14c>)
 8001fee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002006:	2300      	movs	r3, #0
 8002008:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800200e:	2300      	movs	r3, #0
 8002010:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4618      	mov	r0, r3
 800201e:	f008 f993 	bl	800a348 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002028:	f002 f8be 	bl	80041a8 <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	37e0      	adds	r7, #224	; 0xe0
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	0023d620 	.word	0x0023d620

08002040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002046:	463b      	mov	r3, r7
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002054:	4a67      	ldr	r2, [pc, #412]	; (80021f4 <MX_ADC1_Init+0x1b4>)
 8002056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800205a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002066:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002068:	2201      	movs	r2, #1
 800206a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800206c:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800206e:	2201      	movs	r2, #1
 8002070:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800207c:	2200      	movs	r2, #0
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002082:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <MX_ADC1_Init+0x1b8>)
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800208e:	220b      	movs	r2, #11
 8002090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800209c:	2201      	movs	r2, #1
 800209e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a0:	4853      	ldr	r0, [pc, #332]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020a2:	f005 f9a5 	bl	80073f0 <HAL_ADC_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020ac:	f002 f87c 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020b0:	2303      	movs	r3, #3
 80020b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020b8:	2307      	movs	r3, #7
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	484b      	ldr	r0, [pc, #300]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020c2:	f005 fc71 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020cc:	f002 f86c 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4844      	ldr	r0, [pc, #272]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020de:	f005 fc63 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020e8:	f002 f85e 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020ec:	2305      	movs	r3, #5
 80020ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020f0:	2303      	movs	r3, #3
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	483d      	ldr	r0, [pc, #244]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020fa:	f005 fc55 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002104:	f002 f850 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002108:	2306      	movs	r3, #6
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800210c:	2304      	movs	r3, #4
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4836      	ldr	r0, [pc, #216]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002116:	f005 fc47 	bl	80079a8 <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002120:	f002 f842 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002124:	2307      	movs	r3, #7
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002128:	2305      	movs	r3, #5
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	482f      	ldr	r0, [pc, #188]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002132:	f005 fc39 	bl	80079a8 <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800213c:	f002 f834 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002140:	2308      	movs	r3, #8
 8002142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002144:	2306      	movs	r3, #6
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800214e:	f005 fc2b 	bl	80079a8 <HAL_ADC_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002158:	f002 f826 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800215c:	2309      	movs	r3, #9
 800215e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002160:	2307      	movs	r3, #7
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4821      	ldr	r0, [pc, #132]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800216a:	f005 fc1d 	bl	80079a8 <HAL_ADC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002174:	f002 f818 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002178:	230a      	movs	r3, #10
 800217a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800217c:	2308      	movs	r3, #8
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002186:	f005 fc0f 	bl	80079a8 <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002190:	f002 f80a 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002194:	230b      	movs	r3, #11
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002198:	2309      	movs	r3, #9
 800219a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021a2:	f005 fc01 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80021ac:	f001 fffc 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80021b0:	230c      	movs	r3, #12
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80021b4:	230a      	movs	r3, #10
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021be:	f005 fbf3 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80021c8:	f001 ffee 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021cc:	230d      	movs	r3, #13
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80021d0:	230b      	movs	r3, #11
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021da:	f005 fbe5 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80021e4:	f001 ffe0 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20013254 	.word	0x20013254
 80021f4:	40012000 	.word	0x40012000
 80021f8:	0f000001 	.word	0x0f000001

080021fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002202:	463b      	mov	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002210:	4a36      	ldr	r2, [pc, #216]	; (80022ec <MX_ADC2_Init+0xf0>)
 8002212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <MX_ADC2_Init+0xec>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002224:	2201      	movs	r2, #1
 8002226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <MX_ADC2_Init+0xec>)
 800222a:	2201      	movs	r2, #1
 800222c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002238:	2200      	movs	r2, #0
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <MX_ADC2_Init+0xec>)
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <MX_ADC2_Init+0xf4>)
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <MX_ADC2_Init+0xec>)
 800224a:	2204      	movs	r2, #4
 800224c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <MX_ADC2_Init+0xec>)
 800225e:	f005 f8c7 	bl	80073f0 <HAL_ADC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002268:	f001 ff9e 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002270:	2301      	movs	r3, #1
 8002272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002274:	2307      	movs	r3, #7
 8002276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	481a      	ldr	r0, [pc, #104]	; (80022e8 <MX_ADC2_Init+0xec>)
 800227e:	f005 fb93 	bl	80079a8 <HAL_ADC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002288:	f001 ff8e 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800228c:	2301      	movs	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002290:	2302      	movs	r3, #2
 8002292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	4619      	mov	r1, r3
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_ADC2_Init+0xec>)
 800229a:	f005 fb85 	bl	80079a8 <HAL_ADC_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80022a4:	f001 ff80 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80022a8:	230e      	movs	r3, #14
 80022aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022ac:	2303      	movs	r3, #3
 80022ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	4619      	mov	r1, r3
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022b6:	f005 fb77 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80022c0:	f001 ff72 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80022c4:	230f      	movs	r3, #15
 80022c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022c8:	2304      	movs	r3, #4
 80022ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022d2:	f005 fb69 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80022dc:	f001 ff64 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2001053c 	.word	0x2001053c
 80022ec:	40012100 	.word	0x40012100
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <MX_ADC3_Init+0x124>)
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <MX_ADC3_Init+0x128>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800230c:	4b42      	ldr	r3, [pc, #264]	; (8002418 <MX_ADC3_Init+0x124>)
 800230e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002312:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <MX_ADC3_Init+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <MX_ADC3_Init+0x124>)
 800231c:	2201      	movs	r2, #1
 800231e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002320:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <MX_ADC3_Init+0x124>)
 8002322:	2201      	movs	r2, #1
 8002324:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <MX_ADC3_Init+0x124>)
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <MX_ADC3_Init+0x124>)
 8002330:	2200      	movs	r2, #0
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <MX_ADC3_Init+0x124>)
 8002336:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <MX_ADC3_Init+0x12c>)
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <MX_ADC3_Init+0x124>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_ADC3_Init+0x124>)
 8002342:	2206      	movs	r2, #6
 8002344:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <MX_ADC3_Init+0x124>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <MX_ADC3_Init+0x124>)
 8002350:	2201      	movs	r2, #1
 8002352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002354:	4830      	ldr	r0, [pc, #192]	; (8002418 <MX_ADC3_Init+0x124>)
 8002356:	f005 f84b 	bl	80073f0 <HAL_ADC_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002360:	f001 ff22 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002364:	2302      	movs	r3, #2
 8002366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002368:	2301      	movs	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800236c:	2307      	movs	r3, #7
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4828      	ldr	r0, [pc, #160]	; (8002418 <MX_ADC3_Init+0x124>)
 8002376:	f005 fb17 	bl	80079a8 <HAL_ADC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002380:	f001 ff12 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002384:	2304      	movs	r3, #4
 8002386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002388:	2302      	movs	r3, #2
 800238a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <MX_ADC3_Init+0x124>)
 8002392:	f005 fb09 	bl	80079a8 <HAL_ADC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800239c:	f001 ff04 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023a0:	2305      	movs	r3, #5
 80023a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	481a      	ldr	r0, [pc, #104]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ae:	f005 fafb 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80023b8:	f001 fef6 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80023bc:	2306      	movs	r3, #6
 80023be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4619      	mov	r1, r3
 80023c8:	4813      	ldr	r0, [pc, #76]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ca:	f005 faed 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80023d4:	f001 fee8 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023d8:	2307      	movs	r3, #7
 80023da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80023dc:	2305      	movs	r3, #5
 80023de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <MX_ADC3_Init+0x124>)
 80023e6:	f005 fadf 	bl	80079a8 <HAL_ADC_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80023f0:	f001 feda 	bl	80041a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023f4:	2308      	movs	r3, #8
 80023f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80023f8:	2306      	movs	r3, #6
 80023fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023fc:	463b      	mov	r3, r7
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_ADC3_Init+0x124>)
 8002402:	f005 fad1 	bl	80079a8 <HAL_ADC_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 800240c:	f001 fecc 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200132a0 	.word	0x200132a0
 800241c:	40012200 	.word	0x40012200
 8002420:	0f000001 	.word	0x0f000001

08002424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_I2C1_Init+0x74>)
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <MX_I2C1_Init+0x78>)
 800242c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_I2C1_Init+0x74>)
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <MX_I2C1_Init+0x7c>)
 8002432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_I2C1_Init+0x74>)
 800243c:	2201      	movs	r2, #1
 800243e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_I2C1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_I2C1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <MX_I2C1_Init+0x74>)
 8002460:	f006 fc76 	bl	8008d50 <HAL_I2C_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800246a:	f001 fe9d 	bl	80041a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <MX_I2C1_Init+0x74>)
 8002472:	f007 f8c7 	bl	8009604 <HAL_I2CEx_ConfigAnalogFilter>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800247c:	f001 fe94 	bl	80041a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002480:	2100      	movs	r1, #0
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_I2C1_Init+0x74>)
 8002484:	f007 f909 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800248e:	f001 fe8b 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20010584 	.word	0x20010584
 800249c:	40005400 	.word	0x40005400
 80024a0:	007074af 	.word	0x007074af

080024a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_I2C2_Init+0x74>)
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <MX_I2C2_Init+0x78>)
 80024ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <MX_I2C2_Init+0x7c>)
 80024b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_I2C2_Init+0x74>)
 80024bc:	2201      	movs	r2, #1
 80024be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_I2C2_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_I2C2_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_I2C2_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_I2C2_Init+0x74>)
 80024e0:	f006 fc36 	bl	8008d50 <HAL_I2C_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024ea:	f001 fe5d 	bl	80041a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <MX_I2C2_Init+0x74>)
 80024f2:	f007 f887 	bl	8009604 <HAL_I2CEx_ConfigAnalogFilter>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024fc:	f001 fe54 	bl	80041a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002500:	2100      	movs	r1, #0
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_I2C2_Init+0x74>)
 8002504:	f007 f8c9 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800250e:	f001 fe4b 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200109d4 	.word	0x200109d4
 800251c:	40005800 	.word	0x40005800
 8002520:	007074af 	.word	0x007074af

08002524 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_I2C3_Init+0x74>)
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <MX_I2C3_Init+0x78>)
 800252c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10303DEA;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_I2C3_Init+0x74>)
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <MX_I2C3_Init+0x7c>)
 8002532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <MX_I2C3_Init+0x74>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_I2C3_Init+0x74>)
 800253c:	2201      	movs	r2, #1
 800253e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <MX_I2C3_Init+0x74>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_I2C3_Init+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_I2C3_Init+0x74>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_I2C3_Init+0x74>)
 8002554:	2200      	movs	r2, #0
 8002556:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_I2C3_Init+0x74>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800255e:	480e      	ldr	r0, [pc, #56]	; (8002598 <MX_I2C3_Init+0x74>)
 8002560:	f006 fbf6 	bl	8008d50 <HAL_I2C_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800256a:	f001 fe1d 	bl	80041a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	4809      	ldr	r0, [pc, #36]	; (8002598 <MX_I2C3_Init+0x74>)
 8002572:	f007 f847 	bl	8009604 <HAL_I2CEx_ConfigAnalogFilter>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800257c:	f001 fe14 	bl	80041a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_I2C3_Init+0x74>)
 8002584:	f007 f889 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800258e:	f001 fe0b 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20010374 	.word	0x20010374
 800259c:	40005c00 	.word	0x40005c00
 80025a0:	10303dea 	.word	0x10303dea

080025a4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_I2C4_Init+0x74>)
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <MX_I2C4_Init+0x78>)
 80025ac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_I2C4_Init+0x74>)
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <MX_I2C4_Init+0x7c>)
 80025b2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_I2C4_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <MX_I2C4_Init+0x74>)
 80025bc:	2201      	movs	r2, #1
 80025be:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_I2C4_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MX_I2C4_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <MX_I2C4_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_I2C4_Init+0x74>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_I2C4_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80025de:	480e      	ldr	r0, [pc, #56]	; (8002618 <MX_I2C4_Init+0x74>)
 80025e0:	f006 fbb6 	bl	8008d50 <HAL_I2C_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80025ea:	f001 fddd 	bl	80041a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ee:	2100      	movs	r1, #0
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <MX_I2C4_Init+0x74>)
 80025f2:	f007 f807 	bl	8009604 <HAL_I2CEx_ConfigAnalogFilter>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80025fc:	f001 fdd4 	bl	80041a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002600:	2100      	movs	r1, #0
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_I2C4_Init+0x74>)
 8002604:	f007 f849 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800260e:	f001 fdcb 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200103c0 	.word	0x200103c0
 800261c:	40006000 	.word	0x40006000
 8002620:	007074af 	.word	0x007074af

08002624 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <MX_RTC_Init+0x44>)
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <MX_RTC_Init+0x48>)
 800262c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_RTC_Init+0x44>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <MX_RTC_Init+0x44>)
 8002636:	227f      	movs	r2, #127	; 0x7f
 8002638:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_RTC_Init+0x44>)
 800263c:	22ff      	movs	r2, #255	; 0xff
 800263e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <MX_RTC_Init+0x44>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <MX_RTC_Init+0x44>)
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MX_RTC_Init+0x44>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_RTC_Init+0x44>)
 8002654:	f008 fa9e 	bl	800ab94 <HAL_RTC_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800265e:	f001 fda3 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20013358 	.word	0x20013358
 800266c:	40002800 	.word	0x40002800

08002670 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <MX_SPI4_Init+0x74>)
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <MX_SPI4_Init+0x78>)
 8002678:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <MX_SPI4_Init+0x74>)
 800267c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002680:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <MX_SPI4_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <MX_SPI4_Init+0x74>)
 800268a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800268e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_SPI4_Init+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <MX_SPI4_Init+0x74>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_SPI4_Init+0x74>)
 800269e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026a6:	2210      	movs	r2, #16
 80026a8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026be:	2207      	movs	r2, #7
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_SPI4_Init+0x74>)
 80026d0:	f008 fb08 	bl	800ace4 <HAL_SPI_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80026da:	f001 fd65 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20010310 	.word	0x20010310
 80026e8:	40013400 	.word	0x40013400

080026ec <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_SPI5_Init+0x74>)
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <MX_SPI5_Init+0x78>)
 80026f4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_SPI5_Init+0x74>)
 80026f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026fc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_SPI5_Init+0x74>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MX_SPI5_Init+0x74>)
 8002706:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800270a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_SPI5_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <MX_SPI5_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_SPI5_Init+0x74>)
 800271a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800271e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_SPI5_Init+0x74>)
 8002722:	2218      	movs	r2, #24
 8002724:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_SPI5_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_SPI5_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_SPI5_Init+0x74>)
 8002734:	2200      	movs	r2, #0
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_SPI5_Init+0x74>)
 800273a:	2207      	movs	r2, #7
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_SPI5_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_SPI5_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_SPI5_Init+0x74>)
 800274c:	f008 faca 	bl	800ace4 <HAL_SPI_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002756:	f001 fd27 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2001048c 	.word	0x2001048c
 8002764:	40015000 	.word	0x40015000

08002768 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08e      	sub	sp, #56	; 0x38
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002788:	463b      	mov	r3, r7
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	615a      	str	r2, [r3, #20]
 8002798:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <MX_TIM4_Init+0xe8>)
 800279c:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <MX_TIM4_Init+0xec>)
 800279e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027c0:	4823      	ldr	r0, [pc, #140]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027c2:	f008 fec3 	bl	800b54c <HAL_TIM_Base_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80027cc:	f001 fcec 	bl	80041a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027da:	4619      	mov	r1, r3
 80027dc:	481c      	ldr	r0, [pc, #112]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027de:	f009 f977 	bl	800bad0 <HAL_TIM_ConfigClockSource>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80027e8:	f001 fcde 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027ec:	4818      	ldr	r0, [pc, #96]	; (8002850 <MX_TIM4_Init+0xe8>)
 80027ee:	f008 ff03 	bl	800b5f8 <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80027f8:	f001 fcd6 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4811      	ldr	r0, [pc, #68]	; (8002850 <MX_TIM4_Init+0xe8>)
 800280c:	f009 fdda 	bl	800c3c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002816:	f001 fcc7 	bl	80041a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282a:	463b      	mov	r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	4619      	mov	r1, r3
 8002830:	4807      	ldr	r0, [pc, #28]	; (8002850 <MX_TIM4_Init+0xe8>)
 8002832:	f009 f835 	bl	800b8a0 <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800283c:	f001 fcb4 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002840:	4803      	ldr	r0, [pc, #12]	; (8002850 <MX_TIM4_Init+0xe8>)
 8002842:	f004 f9a7 	bl	8006b94 <HAL_TIM_MspPostInit>

}
 8002846:	bf00      	nop
 8002848:	3738      	adds	r7, #56	; 0x38
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200104f0 	.word	0x200104f0
 8002854:	40000800 	.word	0x40000800

08002858 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800288a:	4b32      	ldr	r3, [pc, #200]	; (8002954 <MX_TIM5_Init+0xfc>)
 800288c:	4a32      	ldr	r2, [pc, #200]	; (8002958 <MX_TIM5_Init+0x100>)
 800288e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <MX_TIM5_Init+0xfc>)
 8002892:	2200      	movs	r2, #0
 8002894:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <MX_TIM5_Init+0xfc>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <MX_TIM5_Init+0xfc>)
 800289e:	f04f 32ff 	mov.w	r2, #4294967295
 80028a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <MX_TIM5_Init+0xfc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <MX_TIM5_Init+0xfc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028b0:	4828      	ldr	r0, [pc, #160]	; (8002954 <MX_TIM5_Init+0xfc>)
 80028b2:	f008 fe4b 	bl	800b54c <HAL_TIM_Base_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80028bc:	f001 fc74 	bl	80041a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4821      	ldr	r0, [pc, #132]	; (8002954 <MX_TIM5_Init+0xfc>)
 80028ce:	f009 f8ff 	bl	800bad0 <HAL_TIM_ConfigClockSource>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80028d8:	f001 fc66 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028dc:	481d      	ldr	r0, [pc, #116]	; (8002954 <MX_TIM5_Init+0xfc>)
 80028de:	f008 fe8b 	bl	800b5f8 <HAL_TIM_PWM_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80028e8:	f001 fc5e 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	4816      	ldr	r0, [pc, #88]	; (8002954 <MX_TIM5_Init+0xfc>)
 80028fc:	f009 fd62 	bl	800c3c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002906:	f001 fc4f 	bl	80041a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290a:	2360      	movs	r3, #96	; 0x60
 800290c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291a:	463b      	mov	r3, r7
 800291c:	2200      	movs	r2, #0
 800291e:	4619      	mov	r1, r3
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <MX_TIM5_Init+0xfc>)
 8002922:	f008 ffbd 	bl	800b8a0 <HAL_TIM_PWM_ConfigChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800292c:	f001 fc3c 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	2204      	movs	r2, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <MX_TIM5_Init+0xfc>)
 8002938:	f008 ffb2 	bl	800b8a0 <HAL_TIM_PWM_ConfigChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002942:	f001 fc31 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002946:	4803      	ldr	r0, [pc, #12]	; (8002954 <MX_TIM5_Init+0xfc>)
 8002948:	f004 f924 	bl	8006b94 <HAL_TIM_MspPostInit>

}
 800294c:	bf00      	nop
 800294e:	3738      	adds	r7, #56	; 0x38
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20010a84 	.word	0x20010a84
 8002958:	40000c00 	.word	0x40000c00

0800295c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <MX_UART4_Init+0x58>)
 8002962:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <MX_UART4_Init+0x5c>)
 8002964:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <MX_UART4_Init+0x58>)
 8002968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800296c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <MX_UART4_Init+0x58>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <MX_UART4_Init+0x58>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <MX_UART4_Init+0x58>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <MX_UART4_Init+0x58>)
 8002982:	220c      	movs	r2, #12
 8002984:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <MX_UART4_Init+0x58>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <MX_UART4_Init+0x58>)
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <MX_UART4_Init+0x58>)
 8002994:	2200      	movs	r2, #0
 8002996:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <MX_UART4_Init+0x58>)
 800299a:	2200      	movs	r2, #0
 800299c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800299e:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_UART4_Init+0x58>)
 80029a0:	f009 fdbc 	bl	800c51c <HAL_UART_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80029aa:	f001 fbfd 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20015a8c 	.word	0x20015a8c
 80029b8:	40004c00 	.word	0x40004c00

080029bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_UART5_Init+0x58>)
 80029c2:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <MX_UART5_Init+0x5c>)
 80029c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <MX_UART5_Init+0x58>)
 80029c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_UART5_Init+0x58>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_UART5_Init+0x58>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_UART5_Init+0x58>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_UART5_Init+0x58>)
 80029e2:	220c      	movs	r2, #12
 80029e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_UART5_Init+0x58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_UART5_Init+0x58>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <MX_UART5_Init+0x58>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_UART5_Init+0x58>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_UART5_Init+0x58>)
 8002a00:	f009 fd8c 	bl	800c51c <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002a0a:	f001 fbcd 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200131d4 	.word	0x200131d4
 8002a18:	40005000 	.word	0x40005000

08002a1c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <MX_UART7_Init+0x5c>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a2c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a48:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a4c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002a60:	4804      	ldr	r0, [pc, #16]	; (8002a74 <MX_UART7_Init+0x58>)
 8002a62:	f009 fd5b 	bl	800c51c <HAL_UART_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002a6c:	f001 fb9c 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2001040c 	.word	0x2001040c
 8002a78:	40007800 	.word	0x40007800

08002a7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a90:	2202      	movs	r2, #2
 8002a92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ac0:	f006 fe37 	bl	8009732 <HAL_PCD_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002aca:	f001 fb6d 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200105d0 	.word	0x200105d0

08002ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <MX_DMA_Init+0x80>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <MX_DMA_Init+0x80>)
 8002ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_DMA_Init+0x80>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_DMA_Init+0x80>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <MX_DMA_Init+0x80>)
 8002afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_DMA_Init+0x80>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2105      	movs	r1, #5
 8002b12:	200b      	movs	r0, #11
 8002b14:	f005 fad0 	bl	80080b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b18:	200b      	movs	r0, #11
 8002b1a:	f005 fae9 	bl	80080f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2105      	movs	r1, #5
 8002b22:	2038      	movs	r0, #56	; 0x38
 8002b24:	f005 fac8 	bl	80080b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b28:	2038      	movs	r0, #56	; 0x38
 8002b2a:	f005 fae1 	bl	80080f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2105      	movs	r1, #5
 8002b32:	2039      	movs	r0, #57	; 0x39
 8002b34:	f005 fac0 	bl	80080b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002b38:	2039      	movs	r0, #57	; 0x39
 8002b3a:	f005 fad9 	bl	80080f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2105      	movs	r1, #5
 8002b42:	203a      	movs	r0, #58	; 0x3a
 8002b44:	f005 fab8 	bl	80080b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b48:	203a      	movs	r0, #58	; 0x3a
 8002b4a:	f005 fad1 	bl	80080f0 <HAL_NVIC_EnableIRQ>

}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b72:	4bb0      	ldr	r3, [pc, #704]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4aaf      	ldr	r2, [pc, #700]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4bad      	ldr	r3, [pc, #692]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b8a:	4baa      	ldr	r3, [pc, #680]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4aa9      	ldr	r2, [pc, #676]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4ba7      	ldr	r3, [pc, #668]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	4ba4      	ldr	r3, [pc, #656]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4aa3      	ldr	r2, [pc, #652]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4ba1      	ldr	r3, [pc, #644]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	4b9e      	ldr	r3, [pc, #632]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a9d      	ldr	r2, [pc, #628]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a97      	ldr	r2, [pc, #604]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b95      	ldr	r3, [pc, #596]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bea:	4b92      	ldr	r3, [pc, #584]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a91      	ldr	r2, [pc, #580]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b8f      	ldr	r3, [pc, #572]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a8b      	ldr	r2, [pc, #556]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1a:	4b86      	ldr	r3, [pc, #536]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a85      	ldr	r2, [pc, #532]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c20:	f043 0320 	orr.w	r3, r3, #32
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b83      	ldr	r3, [pc, #524]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c32:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a79      	ldr	r2, [pc, #484]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c62:	4b74      	ldr	r3, [pc, #464]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a73      	ldr	r2, [pc, #460]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b71      	ldr	r3, [pc, #452]	; (8002e34 <MX_GPIO_Init+0x2d8>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2110      	movs	r1, #16
 8002c7e:	486e      	ldr	r0, [pc, #440]	; (8002e38 <MX_GPIO_Init+0x2dc>)
 8002c80:	f006 f80e 	bl	8008ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002c84:	2200      	movs	r2, #0
 8002c86:	f244 012f 	movw	r1, #16431	; 0x402f
 8002c8a:	486c      	ldr	r0, [pc, #432]	; (8002e3c <MX_GPIO_Init+0x2e0>)
 8002c8c:	f006 f808 	bl	8008ca0 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	f241 1150 	movw	r1, #4432	; 0x1150
 8002c96:	486a      	ldr	r0, [pc, #424]	; (8002e40 <MX_GPIO_Init+0x2e4>)
 8002c98:	f006 f802 	bl	8008ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	4868      	ldr	r0, [pc, #416]	; (8002e44 <MX_GPIO_Init+0x2e8>)
 8002ca2:	f005 fffd 	bl	8008ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f243 013c 	movw	r1, #12348	; 0x303c
 8002cac:	4866      	ldr	r0, [pc, #408]	; (8002e48 <MX_GPIO_Init+0x2ec>)
 8002cae:	f005 fff7 	bl	8008ca0 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f241 0104 	movw	r1, #4100	; 0x1004
 8002cb8:	4864      	ldr	r0, [pc, #400]	; (8002e4c <MX_GPIO_Init+0x2f0>)
 8002cba:	f005 fff1 	bl	8008ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cc4:	4862      	ldr	r0, [pc, #392]	; (8002e50 <MX_GPIO_Init+0x2f4>)
 8002cc6:	f005 ffeb 	bl	8008ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	211b      	movs	r1, #27
 8002cce:	4861      	ldr	r0, [pc, #388]	; (8002e54 <MX_GPIO_Init+0x2f8>)
 8002cd0:	f005 ffe6 	bl	8008ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4853      	ldr	r0, [pc, #332]	; (8002e38 <MX_GPIO_Init+0x2dc>)
 8002cec:	f005 fe16 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d00:	4619      	mov	r1, r3
 8002d02:	484d      	ldr	r0, [pc, #308]	; (8002e38 <MX_GPIO_Init+0x2dc>)
 8002d04:	f005 fe0a 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002d08:	f244 032f 	movw	r3, #16431	; 0x402f
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4846      	ldr	r0, [pc, #280]	; (8002e3c <MX_GPIO_Init+0x2e0>)
 8002d22:	f005 fdfb 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d36:	4619      	mov	r1, r3
 8002d38:	4845      	ldr	r0, [pc, #276]	; (8002e50 <MX_GPIO_Init+0x2f4>)
 8002d3a:	f005 fdef 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002d3e:	f241 1350 	movw	r3, #4432	; 0x1150
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d54:	4619      	mov	r1, r3
 8002d56:	483a      	ldr	r0, [pc, #232]	; (8002e40 <MX_GPIO_Init+0x2e4>)
 8002d58:	f005 fde0 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002d5c:	23f0      	movs	r3, #240	; 0xf0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d60:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <MX_GPIO_Init+0x2fc>)
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4835      	ldr	r0, [pc, #212]	; (8002e44 <MX_GPIO_Init+0x2e8>)
 8002d70:	f005 fdd4 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d86:	4619      	mov	r1, r3
 8002d88:	4834      	ldr	r0, [pc, #208]	; (8002e5c <MX_GPIO_Init+0x300>)
 8002d8a:	f005 fdc7 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002d8e:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da0:	4619      	mov	r1, r3
 8002da2:	482f      	ldr	r0, [pc, #188]	; (8002e60 <MX_GPIO_Init+0x304>)
 8002da4:	f005 fdba 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002da8:	2303      	movs	r3, #3
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4821      	ldr	r0, [pc, #132]	; (8002e44 <MX_GPIO_Init+0x2e8>)
 8002dc0:	f005 fdac 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002dc4:	f243 033c 	movw	r3, #12348	; 0x303c
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	481a      	ldr	r0, [pc, #104]	; (8002e48 <MX_GPIO_Init+0x2ec>)
 8002dde:	f005 fd9d 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002de2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de8:	2301      	movs	r3, #1
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4814      	ldr	r0, [pc, #80]	; (8002e4c <MX_GPIO_Init+0x2f0>)
 8002dfc:	f005 fd8e 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002e00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e06:	2301      	movs	r3, #1
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	480d      	ldr	r0, [pc, #52]	; (8002e50 <MX_GPIO_Init+0x2f4>)
 8002e1a:	f005 fd7f 	bl	800891c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002e1e:	231b      	movs	r3, #27
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e22:	2301      	movs	r3, #1
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e32:	e017      	b.n	8002e64 <MX_GPIO_Init+0x308>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021800 	.word	0x40021800
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40022800 	.word	0x40022800
 8002e48:	40021400 	.word	0x40021400
 8002e4c:	40021c00 	.word	0x40021c00
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40022400 	.word	0x40022400
 8002e58:	10210000 	.word	0x10210000
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	4619      	mov	r1, r3
 8002e66:	480b      	ldr	r0, [pc, #44]	; (8002e94 <MX_GPIO_Init+0x338>)
 8002e68:	f005 fd58 	bl	800891c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2105      	movs	r1, #5
 8002e70:	200a      	movs	r0, #10
 8002e72:	f005 f921 	bl	80080b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002e76:	200a      	movs	r0, #10
 8002e78:	f005 f93a 	bl	80080f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2105      	movs	r1, #5
 8002e80:	2017      	movs	r0, #23
 8002e82:	f005 f919 	bl	80080b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e86:	2017      	movs	r0, #23
 8002e88:	f005 f932 	bl	80080f0 <HAL_NVIC_EnableIRQ>

}
 8002e8c:	bf00      	nop
 8002e8e:	3740      	adds	r7, #64	; 0x40
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40022400 	.word	0x40022400

08002e98 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002ea0:	1d39      	adds	r1, r7, #4
 8002ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <__io_putchar+0x20>)
 8002eaa:	f009 fb85 	bl	800c5b8 <HAL_UART_Transmit>

	return ch;
 8002eae:	687b      	ldr	r3, [r7, #4]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2001040c 	.word	0x2001040c

08002ebc <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8002ec0:	220e      	movs	r2, #14
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <outputGPIOBufInitialization+0x14>)
 8002ec6:	f00d f99e 	bl	8010206 <memset>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20013348 	.word	0x20013348

08002ed4 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b098      	sub	sp, #96	; 0x60
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4909      	ldr	r1, [pc, #36]	; (8002f0c <uartTransmitInt+0x38>)
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f00e f810 	bl	8010f0c <siprintf>
 8002eec:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b07      	cmp	r3, #7
 8002ef2:	d107      	bne.n	8002f04 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8002ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	f107 010c 	add.w	r1, r7, #12
 8002efc:	2364      	movs	r3, #100	; 0x64
 8002efe:	4804      	ldr	r0, [pc, #16]	; (8002f10 <uartTransmitInt+0x3c>)
 8002f00:	f009 fb5a 	bl	800c5b8 <HAL_UART_Transmit>
	}

}
 8002f04:	bf00      	nop
 8002f06:	3760      	adds	r7, #96	; 0x60
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	0801429c 	.word	0x0801429c
 8002f10:	2001040c 	.word	0x2001040c

08002f14 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60ba      	str	r2, [r7, #8]
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	4603      	mov	r3, r0
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	460b      	mov	r3, r1
 8002f24:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8002f26:	4a4f      	ldr	r2, [pc, #316]	; (8003064 <readI2CRegister+0x150>)
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10c      	bne.n	8002f4c <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	b299      	uxth	r1, r3
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	4a49      	ldr	r2, [pc, #292]	; (8003064 <readI2CRegister+0x150>)
 8002f40:	4849      	ldr	r0, [pc, #292]	; (8003068 <readI2CRegister+0x154>)
 8002f42:	f005 ff95 	bl	8008e70 <HAL_I2C_Master_Transmit>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]
 8002f4a:	e02e      	b.n	8002faa <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d10c      	bne.n	8002f6c <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	b299      	uxth	r1, r3
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4a41      	ldr	r2, [pc, #260]	; (8003064 <readI2CRegister+0x150>)
 8002f60:	4842      	ldr	r0, [pc, #264]	; (800306c <readI2CRegister+0x158>)
 8002f62:	f005 ff85 	bl	8008e70 <HAL_I2C_Master_Transmit>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
 8002f6a:	e01e      	b.n	8002faa <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d10c      	bne.n	8002f8c <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	b299      	uxth	r1, r3
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4a39      	ldr	r2, [pc, #228]	; (8003064 <readI2CRegister+0x150>)
 8002f80:	483b      	ldr	r0, [pc, #236]	; (8003070 <readI2CRegister+0x15c>)
 8002f82:	f005 ff75 	bl	8008e70 <HAL_I2C_Master_Transmit>
 8002f86:	4603      	mov	r3, r0
 8002f88:	75fb      	strb	r3, [r7, #23]
 8002f8a:	e00e      	b.n	8002faa <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d10b      	bne.n	8002faa <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	b299      	uxth	r1, r3
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4a31      	ldr	r2, [pc, #196]	; (8003064 <readI2CRegister+0x150>)
 8002fa0:	4834      	ldr	r0, [pc, #208]	; (8003074 <readI2CRegister+0x160>)
 8002fa2:	f005 ff65 	bl	8008e70 <HAL_I2C_Master_Transmit>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <readI2CRegister+0xa0>
	          return 0xfe;
 8002fb0:	23fe      	movs	r3, #254	; 0xfe
 8002fb2:	e052      	b.n	800305a <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	b299      	uxth	r1, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	4a26      	ldr	r2, [pc, #152]	; (8003064 <readI2CRegister+0x150>)
 8002fcc:	4826      	ldr	r0, [pc, #152]	; (8003068 <readI2CRegister+0x154>)
 8002fce:	f006 f843 	bl	8009058 <HAL_I2C_Master_Receive>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	75fb      	strb	r3, [r7, #23]
 8002fd6:	e034      	b.n	8003042 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d10e      	bne.n	8002ffc <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	b299      	uxth	r1, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <readI2CRegister+0x150>)
 8002ff0:	481e      	ldr	r0, [pc, #120]	; (800306c <readI2CRegister+0x158>)
 8002ff2:	f006 f831 	bl	8009058 <HAL_I2C_Master_Receive>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]
 8002ffa:	e022      	b.n	8003042 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d10e      	bne.n	8003020 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	b299      	uxth	r1, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	b29a      	uxth	r2, r3
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	4a14      	ldr	r2, [pc, #80]	; (8003064 <readI2CRegister+0x150>)
 8003014:	4816      	ldr	r0, [pc, #88]	; (8003070 <readI2CRegister+0x15c>)
 8003016:	f006 f81f 	bl	8009058 <HAL_I2C_Master_Receive>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
 800301e:	e010      	b.n	8003042 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d10d      	bne.n	8003042 <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	b299      	uxth	r1, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	b29a      	uxth	r2, r3
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <readI2CRegister+0x150>)
 8003038:	480e      	ldr	r0, [pc, #56]	; (8003074 <readI2CRegister+0x160>)
 800303a:	f006 f80d 	bl	8009058 <HAL_I2C_Master_Receive>
 800303e:	4603      	mov	r3, r0
 8003040:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <readI2CRegister+0x138>
		          return 0xfe;
 8003048:	23fe      	movs	r3, #254	; 0xfe
 800304a:	e006      	b.n	800305a <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <readI2CRegister+0x150>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2107      	movs	r1, #7
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff3e 	bl	8002ed4 <uartTransmitInt>
			  return buf;
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <readI2CRegister+0x150>)
		  }
}
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20003234 	.word	0x20003234
 8003068:	20010584 	.word	0x20010584
 800306c:	200109d4 	.word	0x200109d4
 8003070:	20010374 	.word	0x20010374
 8003074:	200103c0 	.word	0x200103c0

08003078 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	; 0x38
 800307c:	af02      	add	r7, sp, #8
 800307e:	60ba      	str	r2, [r7, #8]
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4603      	mov	r3, r0
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	460b      	mov	r3, r1
 8003088:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 8003096:	e00d      	b.n	80030b4 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	441a      	add	r2, r3
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	3301      	adds	r3, #1
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030a8:	440b      	add	r3, r1
 80030aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	3301      	adds	r3, #1
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d9ee      	bls.n	8003098 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d112      	bne.n	80030e6 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	b299      	uxth	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	b298      	uxth	r0, r3
 80030cc:	f107 0214 	add.w	r2, r7, #20
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4603      	mov	r3, r0
 80030d8:	4829      	ldr	r0, [pc, #164]	; (8003180 <writeI2CRegister+0x108>)
 80030da:	f005 fec9 	bl	8008e70 <HAL_I2C_Master_Transmit>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80030e4:	e040      	b.n	8003168 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d112      	bne.n	8003112 <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	b299      	uxth	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	b298      	uxth	r0, r3
 80030f8:	f107 0214 	add.w	r2, r7, #20
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4603      	mov	r3, r0
 8003104:	481f      	ldr	r0, [pc, #124]	; (8003184 <writeI2CRegister+0x10c>)
 8003106:	f005 feb3 	bl	8008e70 <HAL_I2C_Master_Transmit>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003110:	e02a      	b.n	8003168 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	2b03      	cmp	r3, #3
 8003116:	d112      	bne.n	800313e <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	b299      	uxth	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	b29b      	uxth	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	b298      	uxth	r0, r3
 8003124:	f107 0214 	add.w	r2, r7, #20
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4603      	mov	r3, r0
 8003130:	4815      	ldr	r0, [pc, #84]	; (8003188 <writeI2CRegister+0x110>)
 8003132:	f005 fe9d 	bl	8008e70 <HAL_I2C_Master_Transmit>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800313c:	e014      	b.n	8003168 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	2b04      	cmp	r3, #4
 8003142:	d111      	bne.n	8003168 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	b299      	uxth	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	b29b      	uxth	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	b298      	uxth	r0, r3
 8003150:	f107 0214 	add.w	r2, r7, #20
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <writeI2CRegister+0x114>)
 800315e:	f005 fe87 	bl	8008e70 <HAL_I2C_Master_Transmit>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8003168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <writeI2CRegister+0xfc>
	  	          return 0;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003174:	2301      	movs	r3, #1
	  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3730      	adds	r7, #48	; 0x30
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20010584 	.word	0x20010584
 8003184:	200109d4 	.word	0x200109d4
 8003188:	20010374 	.word	0x20010374
 800318c:	200103c0 	.word	0x200103c0

08003190 <configureLEDDriver>:
void configureLEDDriver(){
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003196:	2301      	movs	r3, #1
 8003198:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <configureLEDDriver+0x110>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 80031a0:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <configureLEDDriver+0x114>)
 80031a2:	7818      	ldrb	r0, [r3, #0]
 80031a4:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <configureLEDDriver+0x114>)
 80031a6:	7999      	ldrb	r1, [r3, #6]
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <configureLEDDriver+0x114>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	f7ff ff60 	bl	8003078 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <configureLEDDriver+0x114>)
 80031ba:	7818      	ldrb	r0, [r3, #0]
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <configureLEDDriver+0x114>)
 80031be:	7999      	ldrb	r1, [r3, #6]
 80031c0:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <configureLEDDriver+0x114>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f7ff fea5 	bl	8002f14 <readI2CRegister>
 80031ca:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2107      	movs	r1, #7
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fe7e 	bl	8002ed4 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <configureLEDDriver+0x114>)
 80031da:	7818      	ldrb	r0, [r3, #0]
 80031dc:	4b31      	ldr	r3, [pc, #196]	; (80032a4 <configureLEDDriver+0x114>)
 80031de:	7859      	ldrb	r1, [r3, #1]
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <configureLEDDriver+0x114>)
 80031e2:	79db      	ldrb	r3, [r3, #7]
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <configureLEDDriver+0x114>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	f7ff ff43 	bl	8003078 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 80031f2:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <configureLEDDriver+0x114>)
 80031f4:	7818      	ldrb	r0, [r3, #0]
 80031f6:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <configureLEDDriver+0x114>)
 80031f8:	7899      	ldrb	r1, [r3, #2]
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <configureLEDDriver+0x114>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <configureLEDDriver+0x110>)
 8003204:	f7ff ff38 	bl	8003078 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <configureLEDDriver+0x114>)
 800320a:	7818      	ldrb	r0, [r3, #0]
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <configureLEDDriver+0x114>)
 800320e:	78d9      	ldrb	r1, [r3, #3]
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <configureLEDDriver+0x114>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2301      	movs	r3, #1
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <configureLEDDriver+0x110>)
 800321a:	f7ff ff2d 	bl	8003078 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <configureLEDDriver+0x114>)
 8003220:	7818      	ldrb	r0, [r3, #0]
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <configureLEDDriver+0x114>)
 8003224:	7919      	ldrb	r1, [r3, #4]
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <configureLEDDriver+0x114>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <configureLEDDriver+0x110>)
 8003230:	f7ff ff22 	bl	8003078 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <configureLEDDriver+0x114>)
 8003236:	7818      	ldrb	r0, [r3, #0]
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <configureLEDDriver+0x114>)
 800323a:	7959      	ldrb	r1, [r3, #5]
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <configureLEDDriver+0x114>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2301      	movs	r3, #1
 8003244:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <configureLEDDriver+0x110>)
 8003246:	f7ff ff17 	bl	8003078 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <configureLEDDriver+0x114>)
 800324c:	7818      	ldrb	r0, [r3, #0]
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <configureLEDDriver+0x114>)
 8003250:	7a19      	ldrb	r1, [r3, #8]
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <configureLEDDriver+0x114>)
 8003254:	7adb      	ldrb	r3, [r3, #11]
 8003256:	461a      	mov	r2, r3
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <configureLEDDriver+0x114>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2301      	movs	r3, #1
 8003260:	f7ff ff0a 	bl	8003078 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <configureLEDDriver+0x114>)
 8003266:	7818      	ldrb	r0, [r3, #0]
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <configureLEDDriver+0x114>)
 800326a:	7a59      	ldrb	r1, [r3, #9]
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <configureLEDDriver+0x114>)
 800326e:	7adb      	ldrb	r3, [r3, #11]
 8003270:	461a      	mov	r2, r3
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <configureLEDDriver+0x114>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2301      	movs	r3, #1
 800327a:	f7ff fefd 	bl	8003078 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <configureLEDDriver+0x114>)
 8003280:	7818      	ldrb	r0, [r3, #0]
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <configureLEDDriver+0x114>)
 8003284:	7a99      	ldrb	r1, [r3, #10]
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <configureLEDDriver+0x114>)
 8003288:	7adb      	ldrb	r3, [r3, #11]
 800328a:	461a      	mov	r2, r3
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <configureLEDDriver+0x114>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2301      	movs	r3, #1
 8003294:	f7ff fef0 	bl	8003078 <writeI2CRegister>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20003248 	.word	0x20003248
 80032a4:	20000004 	.word	0x20000004

080032a8 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80032b4:	2301      	movs	r3, #1
 80032b6:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80032b8:	2304      	movs	r3, #4
 80032ba:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80032bc:	2310      	movs	r3, #16
 80032be:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80032c4:	2302      	movs	r3, #2
 80032c6:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80032c8:	2308      	movs	r3, #8
 80032ca:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80032cc:	2320      	movs	r3, #32
 80032ce:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	dc05      	bgt.n	80032e6 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80032da:	4b80      	ldr	r3, [pc, #512]	; (80034dc <setErrorLED+0x234>)
 80032dc:	789b      	ldrb	r3, [r3, #2]
 80032de:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	e019      	b.n	800331a <setErrorLED+0x72>
	}
	else if(led <8){
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b07      	cmp	r3, #7
 80032ea:	dc06      	bgt.n	80032fa <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <setErrorLED+0x234>)
 80032ee:	78db      	ldrb	r3, [r3, #3]
 80032f0:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3b04      	subs	r3, #4
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	e00f      	b.n	800331a <setErrorLED+0x72>
	}
	else if(led <12){
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b0b      	cmp	r3, #11
 80032fe:	dc06      	bgt.n	800330e <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003300:	4b76      	ldr	r3, [pc, #472]	; (80034dc <setErrorLED+0x234>)
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3b08      	subs	r3, #8
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	e005      	b.n	800331a <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <setErrorLED+0x234>)
 8003310:	795b      	ldrb	r3, [r3, #5]
 8003312:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b0c      	subs	r3, #12
 8003318:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <setErrorLED+0x234>)
 800331c:	7818      	ldrb	r0, [r3, #0]
 800331e:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <setErrorLED+0x234>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	7ef9      	ldrb	r1, [r7, #27]
 8003324:	2201      	movs	r2, #1
 8003326:	f7ff fdf5 	bl	8002f14 <readI2CRegister>
 800332a:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b03      	cmp	r3, #3
 8003330:	f200 80bd 	bhi.w	80034ae <setErrorLED+0x206>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <setErrorLED+0x94>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	0800334d 	.word	0x0800334d
 8003340:	080033b3 	.word	0x080033b3
 8003344:	08003419 	.word	0x08003419
 8003348:	08003449 	.word	0x08003449

	case 0:
		if(change){
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <setErrorLED+0xd0>
			if(led == 8){
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d107      	bne.n	8003368 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	7dbb      	ldrb	r3, [r7, #22]
 800335e:	4313      	orrs	r3, r2
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003366:	e0a2      	b.n	80034ae <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	7ebb      	ldrb	r3, [r7, #26]
 800336e:	4313      	orrs	r3, r2
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	701a      	strb	r2, [r3, #0]
		break;
 8003376:	e09a      	b.n	80034ae <setErrorLED+0x206>
			if(led == 8){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d10c      	bne.n	8003398 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b25a      	sxtb	r2, r3
 8003384:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003388:	43db      	mvns	r3, r3
 800338a:	b25b      	sxtb	r3, r3
 800338c:	4013      	ands	r3, r2
 800338e:	b25b      	sxtb	r3, r3
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	701a      	strb	r2, [r3, #0]
		break;
 8003396:	e08a      	b.n	80034ae <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b25a      	sxtb	r2, r3
 800339e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	b25b      	sxtb	r3, r3
 80033a6:	4013      	ands	r3, r2
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	701a      	strb	r2, [r3, #0]
		break;
 80033b0:	e07d      	b.n	80034ae <setErrorLED+0x206>

	case 1:
		if(change){
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <setErrorLED+0x136>
			if(led == 9){
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d107      	bne.n	80033ce <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	7d7b      	ldrb	r3, [r7, #21]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80033cc:	e06f      	b.n	80034ae <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	781a      	ldrb	r2, [r3, #0]
 80033d2:	7e7b      	ldrb	r3, [r7, #25]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	701a      	strb	r2, [r3, #0]
		break;
 80033dc:	e067      	b.n	80034ae <setErrorLED+0x206>
			if(led == 9){
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d10c      	bne.n	80033fe <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b25a      	sxtb	r2, r3
 80033ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	4013      	ands	r3, r2
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	701a      	strb	r2, [r3, #0]
		break;
 80033fc:	e057      	b.n	80034ae <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b25a      	sxtb	r2, r3
 8003404:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003408:	43db      	mvns	r3, r3
 800340a:	b25b      	sxtb	r3, r3
 800340c:	4013      	ands	r3, r2
 800340e:	b25b      	sxtb	r3, r3
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	701a      	strb	r2, [r3, #0]
		break;
 8003416:	e04a      	b.n	80034ae <setErrorLED+0x206>

	case 2:
		if(change){
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	7e3b      	ldrb	r3, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 800342c:	e03f      	b.n	80034ae <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	b25a      	sxtb	r2, r3
 8003434:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003438:	43db      	mvns	r3, r3
 800343a:	b25b      	sxtb	r3, r3
 800343c:	4013      	ands	r3, r2
 800343e:	b25b      	sxtb	r3, r3
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]
		break;
 8003446:	e032      	b.n	80034ae <setErrorLED+0x206>

	case 3:
		if(change){
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <setErrorLED+0x1cc>
			if(led == 7){
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b07      	cmp	r3, #7
 8003452:	d107      	bne.n	8003464 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	4313      	orrs	r3, r2
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003462:	e023      	b.n	80034ac <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	4313      	orrs	r3, r2
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	701a      	strb	r2, [r3, #0]
		break;
 8003472:	e01b      	b.n	80034ac <setErrorLED+0x204>
			if(led == 7){
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d10c      	bne.n	8003494 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b25a      	sxtb	r2, r3
 8003480:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003484:	43db      	mvns	r3, r3
 8003486:	b25b      	sxtb	r3, r3
 8003488:	4013      	ands	r3, r2
 800348a:	b25b      	sxtb	r3, r3
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	701a      	strb	r2, [r3, #0]
		break;
 8003492:	e00b      	b.n	80034ac <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b25a      	sxtb	r2, r3
 800349a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800349e:	43db      	mvns	r3, r3
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	4013      	ands	r3, r2
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	701a      	strb	r2, [r3, #0]
		break;
 80034ac:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <setErrorLED+0x234>)
 80034b0:	7818      	ldrb	r0, [r3, #0]
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <setErrorLED+0x234>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	7ef9      	ldrb	r1, [r7, #27]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2301      	movs	r3, #1
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f7ff fddb 	bl	8003078 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <setErrorLED+0x234>)
 80034c4:	7818      	ldrb	r0, [r3, #0]
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <setErrorLED+0x234>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	7ef9      	ldrb	r1, [r7, #27]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f7ff fd21 	bl	8002f14 <readI2CRegister>
 80034d2:	60f8      	str	r0, [r7, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000004 	.word	0x20000004

080034e0 <getADCValues>:


float* getADCValues(){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b09e      	sub	sp, #120	; 0x78
 80034e4:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80034e6:	463b      	mov	r3, r7
 80034e8:	2254      	movs	r2, #84	; 0x54
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f00c fe8a 	bl	8010206 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80034f2:	2316      	movs	r3, #22
 80034f4:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 80034f6:	2308      	movs	r3, #8
 80034f8:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 80034fa:	230c      	movs	r3, #12
 80034fc:	663b      	str	r3, [r7, #96]	; 0x60
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80034fe:	2300      	movs	r3, #0
 8003500:	677b      	str	r3, [r7, #116]	; 0x74
 8003502:	e171      	b.n	80037e8 <getADCValues+0x308>
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003504:	4b97      	ldr	r3, [pc, #604]	; (8003764 <getADCValues+0x284>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800350a:	429a      	cmp	r2, r3
 800350c:	d009      	beq.n	8003522 <getADCValues+0x42>
 800350e:	4b95      	ldr	r3, [pc, #596]	; (8003764 <getADCValues+0x284>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003514:	429a      	cmp	r2, r3
 8003516:	d004      	beq.n	8003522 <getADCValues+0x42>
 8003518:	4b92      	ldr	r3, [pc, #584]	; (8003764 <getADCValues+0x284>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800351e:	429a      	cmp	r2, r3
 8003520:	d102      	bne.n	8003528 <getADCValues+0x48>
			adcIndex=0;
 8003522:	2300      	movs	r3, #0
 8003524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003526:	e071      	b.n	800360c <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003528:	4b8e      	ldr	r3, [pc, #568]	; (8003764 <getADCValues+0x284>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800352e:	429a      	cmp	r2, r3
 8003530:	d009      	beq.n	8003546 <getADCValues+0x66>
 8003532:	4b8c      	ldr	r3, [pc, #560]	; (8003764 <getADCValues+0x284>)
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003538:	429a      	cmp	r2, r3
 800353a:	d004      	beq.n	8003546 <getADCValues+0x66>
 800353c:	4b89      	ldr	r3, [pc, #548]	; (8003764 <getADCValues+0x284>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003542:	429a      	cmp	r2, r3
 8003544:	d102      	bne.n	800354c <getADCValues+0x6c>
			adcIndex=2;
 8003546:	2302      	movs	r3, #2
 8003548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354a:	e05f      	b.n	800360c <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 800354c:	4b85      	ldr	r3, [pc, #532]	; (8003764 <getADCValues+0x284>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003552:	429a      	cmp	r2, r3
 8003554:	d009      	beq.n	800356a <getADCValues+0x8a>
 8003556:	4b83      	ldr	r3, [pc, #524]	; (8003764 <getADCValues+0x284>)
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800355c:	429a      	cmp	r2, r3
 800355e:	d004      	beq.n	800356a <getADCValues+0x8a>
 8003560:	4b80      	ldr	r3, [pc, #512]	; (8003764 <getADCValues+0x284>)
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003566:	429a      	cmp	r2, r3
 8003568:	d102      	bne.n	8003570 <getADCValues+0x90>
			adcIndex=4;
 800356a:	2304      	movs	r3, #4
 800356c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800356e:	e04d      	b.n	800360c <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003570:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <getADCValues+0x284>)
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003576:	429a      	cmp	r2, r3
 8003578:	d009      	beq.n	800358e <getADCValues+0xae>
 800357a:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <getADCValues+0x284>)
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003580:	429a      	cmp	r2, r3
 8003582:	d004      	beq.n	800358e <getADCValues+0xae>
 8003584:	4b77      	ldr	r3, [pc, #476]	; (8003764 <getADCValues+0x284>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800358a:	429a      	cmp	r2, r3
 800358c:	d102      	bne.n	8003594 <getADCValues+0xb4>
			adcIndex=6;
 800358e:	2306      	movs	r3, #6
 8003590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003592:	e03b      	b.n	800360c <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003594:	4b73      	ldr	r3, [pc, #460]	; (8003764 <getADCValues+0x284>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800359a:	429a      	cmp	r2, r3
 800359c:	d004      	beq.n	80035a8 <getADCValues+0xc8>
 800359e:	4b71      	ldr	r3, [pc, #452]	; (8003764 <getADCValues+0x284>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d102      	bne.n	80035ae <getADCValues+0xce>
			adcIndex=8;
 80035a8:	2308      	movs	r3, #8
 80035aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ac:	e02e      	b.n	800360c <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80035ae:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <getADCValues+0x284>)
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d004      	beq.n	80035c2 <getADCValues+0xe2>
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <getADCValues+0x284>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035be:	429a      	cmp	r2, r3
 80035c0:	d102      	bne.n	80035c8 <getADCValues+0xe8>
			adcIndex=10;
 80035c2:	230a      	movs	r3, #10
 80035c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035c6:	e021      	b.n	800360c <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc9){
 80035c8:	4b66      	ldr	r3, [pc, #408]	; (8003764 <getADCValues+0x284>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d102      	bne.n	80035d8 <getADCValues+0xf8>
			adcIndex=12;
 80035d2:	230c      	movs	r3, #12
 80035d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035d6:	e019      	b.n	800360c <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc10){
 80035d8:	4b62      	ldr	r3, [pc, #392]	; (8003764 <getADCValues+0x284>)
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035de:	429a      	cmp	r2, r3
 80035e0:	d102      	bne.n	80035e8 <getADCValues+0x108>
			adcIndex=14;
 80035e2:	230e      	movs	r3, #14
 80035e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e6:	e011      	b.n	800360c <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc11){
 80035e8:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <getADCValues+0x284>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d102      	bne.n	80035f8 <getADCValues+0x118>
			adcIndex=16;
 80035f2:	2310      	movs	r3, #16
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f6:	e009      	b.n	800360c <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc12){
 80035f8:	4b5a      	ldr	r3, [pc, #360]	; (8003764 <getADCValues+0x284>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035fe:	429a      	cmp	r2, r3
 8003600:	d102      	bne.n	8003608 <getADCValues+0x128>
			adcIndex=18;
 8003602:	2312      	movs	r3, #18
 8003604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003606:	e001      	b.n	800360c <getADCValues+0x12c>
		}
		else{
			adcIndex=20;
 8003608:	2314      	movs	r3, #20
 800360a:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 800360c:	4b55      	ldr	r3, [pc, #340]	; (8003764 <getADCValues+0x284>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003612:	429a      	cmp	r2, r3
 8003614:	d00e      	beq.n	8003634 <getADCValues+0x154>
 8003616:	4b53      	ldr	r3, [pc, #332]	; (8003764 <getADCValues+0x284>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800361c:	429a      	cmp	r2, r3
 800361e:	d009      	beq.n	8003634 <getADCValues+0x154>
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <getADCValues+0x284>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003626:	429a      	cmp	r2, r3
 8003628:	d004      	beq.n	8003634 <getADCValues+0x154>
 800362a:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <getADCValues+0x284>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003630:	429a      	cmp	r2, r3
 8003632:	d13a      	bne.n	80036aa <getADCValues+0x1ca>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003634:	2300      	movs	r3, #0
 8003636:	673b      	str	r3, [r7, #112]	; 0x70
 8003638:	e033      	b.n	80036a2 <getADCValues+0x1c2>
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800363c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003644:	4413      	add	r3, r2
 8003646:	657b      	str	r3, [r7, #84]	; 0x54
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003650:	4413      	add	r3, r2
 8003652:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003656:	4944      	ldr	r1, [pc, #272]	; (8003768 <getADCValues+0x288>)
 8003658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800365e:	441a      	add	r2, r3
 8003660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003668:	440b      	add	r3, r1
 800366a:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 800366e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003670:	2b13      	cmp	r3, #19
 8003672:	d113      	bne.n	800369c <getADCValues+0x1bc>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800367c:	4413      	add	r3, r2
 800367e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003682:	4a3a      	ldr	r2, [pc, #232]	; (800376c <getADCValues+0x28c>)
 8003684:	fb82 1203 	smull	r1, r2, r2, r3
 8003688:	10d2      	asrs	r2, r2, #3
 800368a:	17db      	asrs	r3, r3, #31
 800368c:	1ad2      	subs	r2, r2, r3
 800368e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003696:	440b      	add	r3, r1
 8003698:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800369c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369e:	3301      	adds	r3, #1
 80036a0:	673b      	str	r3, [r7, #112]	; 0x70
 80036a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a4:	2b13      	cmp	r3, #19
 80036a6:	ddc8      	ble.n	800363a <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80036a8:	e09b      	b.n	80037e2 <getADCValues+0x302>
				}
			}
		}
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80036aa:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <getADCValues+0x284>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d018      	beq.n	80036e6 <getADCValues+0x206>
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <getADCValues+0x284>)
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d013      	beq.n	80036e6 <getADCValues+0x206>
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <getADCValues+0x284>)
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d00e      	beq.n	80036e6 <getADCValues+0x206>
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <getADCValues+0x284>)
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d009      	beq.n	80036e6 <getADCValues+0x206>
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <getADCValues+0x284>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036d8:	429a      	cmp	r2, r3
 80036da:	d004      	beq.n	80036e6 <getADCValues+0x206>
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <getADCValues+0x284>)
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d13a      	bne.n	800375c <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036e6:	2300      	movs	r3, #0
 80036e8:	673b      	str	r3, [r7, #112]	; 0x70
 80036ea:	e033      	b.n	8003754 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 80036ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f6:	4413      	add	r3, r2
 80036f8:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 80036fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003702:	4413      	add	r3, r2
 8003704:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003708:	4919      	ldr	r1, [pc, #100]	; (8003770 <getADCValues+0x290>)
 800370a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003710:	441a      	add	r2, r3
 8003712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800371a:	440b      	add	r3, r1
 800371c:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003722:	2b13      	cmp	r3, #19
 8003724:	d113      	bne.n	800374e <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800372e:	4413      	add	r3, r2
 8003730:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <getADCValues+0x28c>)
 8003736:	fb82 1203 	smull	r1, r2, r2, r3
 800373a:	10d2      	asrs	r2, r2, #3
 800373c:	17db      	asrs	r3, r3, #31
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003748:	440b      	add	r3, r1
 800374a:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800374e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003750:	3301      	adds	r3, #1
 8003752:	673b      	str	r3, [r7, #112]	; 0x70
 8003754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003756:	2b13      	cmp	r3, #19
 8003758:	ddc8      	ble.n	80036ec <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800375a:	e042      	b.n	80037e2 <getADCValues+0x302>
				}
			}
		}
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800375c:	2300      	movs	r3, #0
 800375e:	673b      	str	r3, [r7, #112]	; 0x70
 8003760:	e03c      	b.n	80037dc <getADCValues+0x2fc>
 8003762:	bf00      	nop
 8003764:	20000044 	.word	0x20000044
 8003768:	20021874 	.word	0x20021874
 800376c:	66666667 	.word	0x66666667
 8003770:	2001337c 	.word	0x2001337c
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003776:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800377e:	4413      	add	r3, r2
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800378a:	4413      	add	r3, r2
 800378c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003790:	49c9      	ldr	r1, [pc, #804]	; (8003ab8 <getADCValues+0x5d8>)
 8003792:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003794:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003798:	441a      	add	r2, r3
 800379a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037a2:	440b      	add	r3, r1
 80037a4:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80037a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037aa:	2b13      	cmp	r3, #19
 80037ac:	d113      	bne.n	80037d6 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80037ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037b6:	4413      	add	r3, r2
 80037b8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80037bc:	4abf      	ldr	r2, [pc, #764]	; (8003abc <getADCValues+0x5dc>)
 80037be:	fb82 1203 	smull	r1, r2, r2, r3
 80037c2:	10d2      	asrs	r2, r2, #3
 80037c4:	17db      	asrs	r3, r3, #31
 80037c6:	1ad2      	subs	r2, r2, r3
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037d0:	440b      	add	r3, r1
 80037d2:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80037d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d8:	3301      	adds	r3, #1
 80037da:	673b      	str	r3, [r7, #112]	; 0x70
 80037dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037de:	2b13      	cmp	r3, #19
 80037e0:	ddc8      	ble.n	8003774 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	3301      	adds	r3, #1
 80037e6:	677b      	str	r3, [r7, #116]	; 0x74
 80037e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ea:	2b14      	cmp	r3, #20
 80037ec:	f77f ae8a 	ble.w	8003504 <getADCValues+0x24>
				}
			}
		}
	}
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80037f0:	4bb3      	ldr	r3, [pc, #716]	; (8003ac0 <getADCValues+0x5e0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037fa:	4413      	add	r3, r2
 80037fc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003808:	4bad      	ldr	r3, [pc, #692]	; (8003ac0 <getADCValues+0x5e0>)
 800380a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800380e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003812:	4bab      	ldr	r3, [pc, #684]	; (8003ac0 <getADCValues+0x5e0>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381e:	4ba8      	ldr	r3, [pc, #672]	; (8003ac0 <getADCValues+0x5e0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	4aa7      	ldr	r2, [pc, #668]	; (8003ac4 <getADCValues+0x5e4>)
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003830:	4ba3      	ldr	r3, [pc, #652]	; (8003ac0 <getADCValues+0x5e0>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800383a:	4413      	add	r3, r2
 800383c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003848:	4b9d      	ldr	r3, [pc, #628]	; (8003ac0 <getADCValues+0x5e0>)
 800384a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800384e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003852:	4b9b      	ldr	r3, [pc, #620]	; (8003ac0 <getADCValues+0x5e0>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385e:	4b98      	ldr	r3, [pc, #608]	; (8003ac0 <getADCValues+0x5e0>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	4a97      	ldr	r2, [pc, #604]	; (8003ac4 <getADCValues+0x5e4>)
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003870:	4b93      	ldr	r3, [pc, #588]	; (8003ac0 <getADCValues+0x5e0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800387a:	4413      	add	r3, r2
 800387c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003888:	4b8d      	ldr	r3, [pc, #564]	; (8003ac0 <getADCValues+0x5e0>)
 800388a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800388e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003892:	4b8b      	ldr	r3, [pc, #556]	; (8003ac0 <getADCValues+0x5e0>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389e:	4b88      	ldr	r3, [pc, #544]	; (8003ac0 <getADCValues+0x5e0>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	4a87      	ldr	r2, [pc, #540]	; (8003ac4 <getADCValues+0x5e4>)
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038b0:	4b83      	ldr	r3, [pc, #524]	; (8003ac0 <getADCValues+0x5e0>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038ba:	4413      	add	r3, r2
 80038bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c8:	4b7d      	ldr	r3, [pc, #500]	; (8003ac0 <getADCValues+0x5e0>)
 80038ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80038ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d2:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <getADCValues+0x5e0>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038de:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <getADCValues+0x5e0>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <getADCValues+0x5e4>)
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038f0:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <getADCValues+0x5e0>)
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038fa:	4413      	add	r3, r2
 80038fc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003908:	4b6d      	ldr	r3, [pc, #436]	; (8003ac0 <getADCValues+0x5e0>)
 800390a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800390e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003912:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <getADCValues+0x5e0>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391e:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <getADCValues+0x5e0>)
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003926:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <getADCValues+0x5e4>)
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003930:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <getADCValues+0x5e0>)
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800393a:	4413      	add	r3, r2
 800393c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003948:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <getADCValues+0x5e0>)
 800394a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800394e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003952:	4b5b      	ldr	r3, [pc, #364]	; (8003ac0 <getADCValues+0x5e0>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395e:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <getADCValues+0x5e0>)
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003966:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <getADCValues+0x5e4>)
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003970:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <getADCValues+0x5e0>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800397a:	4413      	add	r3, r2
 800397c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003988:	4b4d      	ldr	r3, [pc, #308]	; (8003ac0 <getADCValues+0x5e0>)
 800398a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800398e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003992:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <getADCValues+0x5e0>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399e:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <getADCValues+0x5e0>)
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a6:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <getADCValues+0x5e4>)
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <getADCValues+0x5e0>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039ba:	4413      	add	r3, r2
 80039bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c8:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <getADCValues+0x5e0>)
 80039ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80039ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d2:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <getADCValues+0x5e0>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <getADCValues+0x5e0>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <getADCValues+0x5e4>)
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <getADCValues+0x5e0>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039fa:	4413      	add	r3, r2
 80039fc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <getADCValues+0x5e0>)
 8003a0a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <getADCValues+0x5e0>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <getADCValues+0x5e0>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <getADCValues+0x5e4>)
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a30:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <getADCValues+0x5e0>)
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <getADCValues+0x5e0>)
 8003a4a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <getADCValues+0x5e0>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <getADCValues+0x5e0>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <getADCValues+0x5e4>)
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <getADCValues+0x5e0>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a88:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <getADCValues+0x5e0>)
 8003a8a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <getADCValues+0x5e0>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <getADCValues+0x5e0>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <getADCValues+0x5e4>)
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <getADCValues+0x5e0>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	e007      	b.n	8003ac8 <getADCValues+0x5e8>
 8003ab8:	20010ac4 	.word	0x20010ac4
 8003abc:	66666667 	.word	0x66666667
 8003ac0:	20000044 	.word	0x20000044
 8003ac4:	2000324c 	.word	0x2000324c
 8003ac8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003acc:	4413      	add	r3, r2
 8003ace:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ada:	4b9c      	ldr	r3, [pc, #624]	; (8003d4c <getADCValues+0x86c>)
 8003adc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae4:	4b99      	ldr	r3, [pc, #612]	; (8003d4c <getADCValues+0x86c>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af0:	4b96      	ldr	r3, [pc, #600]	; (8003d4c <getADCValues+0x86c>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	4a95      	ldr	r2, [pc, #596]	; (8003d50 <getADCValues+0x870>)
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b02:	4b92      	ldr	r3, [pc, #584]	; (8003d4c <getADCValues+0x86c>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1a:	4b8c      	ldr	r3, [pc, #560]	; (8003d4c <getADCValues+0x86c>)
 8003b1c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b24:	4b89      	ldr	r3, [pc, #548]	; (8003d4c <getADCValues+0x86c>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b30:	4b86      	ldr	r3, [pc, #536]	; (8003d4c <getADCValues+0x86c>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b38:	4a85      	ldr	r2, [pc, #532]	; (8003d50 <getADCValues+0x870>)
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b42:	4b82      	ldr	r3, [pc, #520]	; (8003d4c <getADCValues+0x86c>)
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b5a:	4b7c      	ldr	r3, [pc, #496]	; (8003d4c <getADCValues+0x86c>)
 8003b5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b64:	4b79      	ldr	r3, [pc, #484]	; (8003d4c <getADCValues+0x86c>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b70:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <getADCValues+0x86c>)
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b78:	4a75      	ldr	r2, [pc, #468]	; (8003d50 <getADCValues+0x870>)
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b82:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <getADCValues+0x86c>)
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9a:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <getADCValues+0x86c>)
 8003b9c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba4:	4b69      	ldr	r3, [pc, #420]	; (8003d4c <getADCValues+0x86c>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	ee07 3a90 	vmov	s15, r3
 8003bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb0:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <getADCValues+0x86c>)
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb8:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <getADCValues+0x870>)
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bc2:	4b62      	ldr	r3, [pc, #392]	; (8003d4c <getADCValues+0x86c>)
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bcc:	4413      	add	r3, r2
 8003bce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bda:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <getADCValues+0x86c>)
 8003bdc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be4:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <getADCValues+0x86c>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf0:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <getADCValues+0x86c>)
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf8:	4a55      	ldr	r2, [pc, #340]	; (8003d50 <getADCValues+0x870>)
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c02:	4b52      	ldr	r3, [pc, #328]	; (8003d4c <getADCValues+0x86c>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1a:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <getADCValues+0x86c>)
 8003c1c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <getADCValues+0x86c>)
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c30:	4b46      	ldr	r3, [pc, #280]	; (8003d4c <getADCValues+0x86c>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c38:	4a45      	ldr	r2, [pc, #276]	; (8003d50 <getADCValues+0x870>)
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c42:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <getADCValues+0x86c>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <getADCValues+0x86c>)
 8003c5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <getADCValues+0x86c>)
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	ee07 3a90 	vmov	s15, r3
 8003c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c70:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <getADCValues+0x86c>)
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <getADCValues+0x870>)
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <getADCValues+0x86c>)
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <getADCValues+0x86c>)
 8003c9c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <getADCValues+0x86c>)
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb0:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <getADCValues+0x86c>)
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <getADCValues+0x870>)
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <getADCValues+0x86c>)
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ccc:	4413      	add	r3, r2
 8003cce:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cda:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <getADCValues+0x86c>)
 8003cdc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <getADCValues+0x86c>)
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf0:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <getADCValues+0x86c>)
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <getADCValues+0x870>)
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <getADCValues+0x86c>)
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <getADCValues+0x86c>)
 8003d1c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <getADCValues+0x86c>)
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <getADCValues+0x86c>)
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d38:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <getADCValues+0x870>)
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8003d42:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <getADCValues+0x870>)
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3778      	adds	r7, #120	; 0x78
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000044 	.word	0x20000044
 8003d50:	2000324c 	.word	0x2000324c

08003d54 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d74:	4803      	ldr	r0, [pc, #12]	; (8003d84 <startHeartbeat+0x1c>)
 8003d76:	f004 ffac 	bl	8008cd2 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8003d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d7e:	f009 fc81 	bl	800d684 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003d82:	e7f5      	b.n	8003d70 <startHeartbeat+0x8>
 8003d84:	40022000 	.word	0x40022000

08003d88 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8003d90:	2203      	movs	r2, #3
 8003d92:	2100      	movs	r1, #0
 8003d94:	4815      	ldr	r0, [pc, #84]	; (8003dec <startADCRead+0x64>)
 8003d96:	f00c fa36 	bl	8010206 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8003d9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4813      	ldr	r0, [pc, #76]	; (8003df0 <startADCRead+0x68>)
 8003da2:	f00c fa30 	bl	8010206 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8003da6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003daa:	2100      	movs	r1, #0
 8003dac:	4811      	ldr	r0, [pc, #68]	; (8003df4 <startADCRead+0x6c>)
 8003dae:	f00c fa2a 	bl	8010206 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8003db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003db6:	2100      	movs	r1, #0
 8003db8:	480f      	ldr	r0, [pc, #60]	; (8003df8 <startADCRead+0x70>)
 8003dba:	f00c fa24 	bl	8010206 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	490b      	ldr	r1, [pc, #44]	; (8003df0 <startADCRead+0x68>)
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <startADCRead+0x74>)
 8003dc6:	f003 fc99 	bl	80076fc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4909      	ldr	r1, [pc, #36]	; (8003df4 <startADCRead+0x6c>)
 8003dd0:	480b      	ldr	r0, [pc, #44]	; (8003e00 <startADCRead+0x78>)
 8003dd2:	f003 fc93 	bl	80076fc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4907      	ldr	r1, [pc, #28]	; (8003df8 <startADCRead+0x70>)
 8003ddc:	4809      	ldr	r0, [pc, #36]	; (8003e04 <startADCRead+0x7c>)
 8003dde:	f003 fc8d 	bl	80076fc <HAL_ADC_Start_DMA>
    osDelay(600);
 8003de2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003de6:	f009 fc4d 	bl	800d684 <osDelay>
  {
 8003dea:	e7d1      	b.n	8003d90 <startADCRead+0x8>
 8003dec:	20010a80 	.word	0x20010a80
 8003df0:	20010ac4 	.word	0x20010ac4
 8003df4:	20021874 	.word	0x20021874
 8003df8:	2001337c 	.word	0x2001337c
 8003dfc:	20013254 	.word	0x20013254
 8003e00:	2001053c 	.word	0x2001053c
 8003e04:	200132a0 	.word	0x200132a0

08003e08 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
	 static uint8_t LCD_Blink_White2 = 0b00000000;
	 static uint8_t LCD_Blink_Black1 = 0b00010000;
	 static uint8_t LCD_Blink_Black2 = 0b00000000;
	 //static uint16_t LCD_Blink_White = 0b0001100000000000;
	 //static uint16_t LCD_Blink_Black = 0b0001000000000000;
	 int x = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
	 float *adcValues;
	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8003e14:	f000 f9d8 	bl	80041c8 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	74fb      	strb	r3, [r7, #19]
	 uint8_t menu_val = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	74bb      	strb	r3, [r7, #18]
	 uint8_t running_menu = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	747b      	strb	r3, [r7, #17]
	 uint8_t * readI2c;
	 uint8_t eepromTest[3];
	 eepromTest[0]=0x01;
 8003e24:	2301      	movs	r3, #1
 8003e26:	723b      	strb	r3, [r7, #8]
	 eepromTest[1]=0x01;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	727b      	strb	r3, [r7, #9]
	 eepromTest[2]=0xfa;
 8003e2c:	23fa      	movs	r3, #250	; 0xfa
 8003e2e:	72bb      	strb	r3, [r7, #10]

	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8003e34:	f107 020c 	add.w	r2, r7, #12
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	21ff      	movs	r1, #255	; 0xff
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f00b f8e2 	bl	800f008 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	74fb      	strb	r3, [r7, #19]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	74bb      	strb	r3, [r7, #18]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	747b      	strb	r3, [r7, #17]
	 	  x = writeI2CRegister(0x4c,0x14,eepromTest,1,3);
 8003e66:	f107 0208 	add.w	r2, r7, #8
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2301      	movs	r3, #1
 8003e70:	2114      	movs	r1, #20
 8003e72:	204c      	movs	r0, #76	; 0x4c
 8003e74:	f7ff f900 	bl	8003078 <writeI2CRegister>
 8003e78:	6178      	str	r0, [r7, #20]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8003e7a:	7c7b      	ldrb	r3, [r7, #17]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d82c      	bhi.n	8003edc <GetDaScreenBlink+0xd4>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <GetDaScreenBlink+0x80>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003e99 	.word	0x08003e99
 8003e90:	08003ebd 	.word	0x08003ebd
 8003e94:	08003ecd 	.word	0x08003ecd
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 8003e98:	4812      	ldr	r0, [pc, #72]	; (8003ee4 <GetDaScreenBlink+0xdc>)
 8003e9a:	f00d f829 	bl	8010ef0 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 8003e9e:	7cbb      	ldrb	r3, [r7, #18]
 8003ea0:	7cf9      	ldrb	r1, [r7, #19]
 8003ea2:	7c7a      	ldrb	r2, [r7, #17]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 f8bf 	bl	8006028 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8003eaa:	e017      	b.n	8003edc <GetDaScreenBlink+0xd4>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8003eac:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <GetDaScreenBlink+0xe0>)
 8003eae:	f00d f81f 	bl	8010ef0 <puts>
			  drawMainMenu(menu_val);
 8003eb2:	7cbb      	ldrb	r3, [r7, #18]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f9b1 	bl	800421c <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8003eba:	e00f      	b.n	8003edc <GetDaScreenBlink+0xd4>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <GetDaScreenBlink+0xe4>)
 8003ebe:	f00d f817 	bl	8010ef0 <puts>
			  drawStatusMenu(menu_val);
 8003ec2:	7cbb      	ldrb	r3, [r7, #18]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fc55 	bl	8004774 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8003eca:	e007      	b.n	8003edc <GetDaScreenBlink+0xd4>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 8003ecc:	4808      	ldr	r0, [pc, #32]	; (8003ef0 <GetDaScreenBlink+0xe8>)
 8003ece:	f00d f80f 	bl	8010ef0 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8003ed2:	7cbb      	ldrb	r3, [r7, #18]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fd81 	bl	80059dc <drawSystemInfoMenu>
			  break;
 8003eda:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8003edc:	2064      	movs	r0, #100	; 0x64
 8003ede:	f009 fbd1 	bl	800d684 <osDelay>
	 	  ulNotifiedValue = 0;
 8003ee2:	e7a5      	b.n	8003e30 <GetDaScreenBlink+0x28>
 8003ee4:	080142ac 	.word	0x080142ac
 8003ee8:	080142b8 	.word	0x080142b8
 8003eec:	080142c4 	.word	0x080142c4
 8003ef0:	080142d4 	.word	0x080142d4

08003ef4 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <startGpioInputRead+0x114>)
 8003efe:	681c      	ldr	r4, [r3, #0]
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	4842      	ldr	r0, [pc, #264]	; (800400c <startGpioInputRead+0x118>)
 8003f04:	f004 feb4 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b40      	ldr	r3, [pc, #256]	; (8004010 <startGpioInputRead+0x11c>)
 8003f0e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8003f10:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <startGpioInputRead+0x114>)
 8003f12:	685c      	ldr	r4, [r3, #4]
 8003f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f18:	483e      	ldr	r0, [pc, #248]	; (8004014 <startGpioInputRead+0x120>)
 8003f1a:	f004 fea9 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <startGpioInputRead+0x11c>)
 8003f24:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8003f26:	4b38      	ldr	r3, [pc, #224]	; (8004008 <startGpioInputRead+0x114>)
 8003f28:	689c      	ldr	r4, [r3, #8]
 8003f2a:	2110      	movs	r1, #16
 8003f2c:	483a      	ldr	r0, [pc, #232]	; (8004018 <startGpioInputRead+0x124>)
 8003f2e:	f004 fe9f 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <startGpioInputRead+0x11c>)
 8003f38:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8003f3a:	4b33      	ldr	r3, [pc, #204]	; (8004008 <startGpioInputRead+0x114>)
 8003f3c:	68dc      	ldr	r4, [r3, #12]
 8003f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f42:	4835      	ldr	r0, [pc, #212]	; (8004018 <startGpioInputRead+0x124>)
 8003f44:	f004 fe94 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b30      	ldr	r3, [pc, #192]	; (8004010 <startGpioInputRead+0x11c>)
 8003f4e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8003f50:	4b2d      	ldr	r3, [pc, #180]	; (8004008 <startGpioInputRead+0x114>)
 8003f52:	691c      	ldr	r4, [r3, #16]
 8003f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f58:	482f      	ldr	r0, [pc, #188]	; (8004018 <startGpioInputRead+0x124>)
 8003f5a:	f004 fe89 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <startGpioInputRead+0x11c>)
 8003f64:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8003f66:	4b28      	ldr	r3, [pc, #160]	; (8004008 <startGpioInputRead+0x114>)
 8003f68:	695c      	ldr	r4, [r3, #20]
 8003f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f6e:	482a      	ldr	r0, [pc, #168]	; (8004018 <startGpioInputRead+0x124>)
 8003f70:	f004 fe7e 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <startGpioInputRead+0x11c>)
 8003f7a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8003f7c:	4b22      	ldr	r3, [pc, #136]	; (8004008 <startGpioInputRead+0x114>)
 8003f7e:	699c      	ldr	r4, [r3, #24]
 8003f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f84:	4824      	ldr	r0, [pc, #144]	; (8004018 <startGpioInputRead+0x124>)
 8003f86:	f004 fe73 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <startGpioInputRead+0x11c>)
 8003f90:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8003f92:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <startGpioInputRead+0x114>)
 8003f94:	69dc      	ldr	r4, [r3, #28]
 8003f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f9a:	481f      	ldr	r0, [pc, #124]	; (8004018 <startGpioInputRead+0x124>)
 8003f9c:	f004 fe68 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <startGpioInputRead+0x11c>)
 8003fa6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <startGpioInputRead+0x114>)
 8003faa:	6a1c      	ldr	r4, [r3, #32]
 8003fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fb0:	4819      	ldr	r0, [pc, #100]	; (8004018 <startGpioInputRead+0x124>)
 8003fb2:	f004 fe5d 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <startGpioInputRead+0x11c>)
 8003fbc:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <startGpioInputRead+0x114>)
 8003fc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fc6:	4814      	ldr	r0, [pc, #80]	; (8004018 <startGpioInputRead+0x124>)
 8003fc8:	f004 fe52 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <startGpioInputRead+0x11c>)
 8003fd2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <startGpioInputRead+0x114>)
 8003fd6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fdc:	480e      	ldr	r0, [pc, #56]	; (8004018 <startGpioInputRead+0x124>)
 8003fde:	f004 fe47 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <startGpioInputRead+0x11c>)
 8003fe8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <startGpioInputRead+0x114>)
 8003fec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003fee:	2108      	movs	r1, #8
 8003ff0:	480a      	ldr	r0, [pc, #40]	; (800401c <startGpioInputRead+0x128>)
 8003ff2:	f004 fe3d 	bl	8008c70 <HAL_GPIO_ReadPin>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <startGpioInputRead+0x11c>)
 8003ffc:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8003ffe:	f240 30b6 	movw	r0, #950	; 0x3b6
 8004002:	f009 fb3f 	bl	800d684 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004006:	e779      	b.n	8003efc <startGpioInputRead+0x8>
 8004008:	20000014 	.word	0x20000014
 800400c:	40020400 	.word	0x40020400
 8004010:	20010530 	.word	0x20010530
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000

08004020 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 800402c:	2301      	movs	r3, #1
 800402e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004030:	7bbb      	ldrb	r3, [r7, #14]
 8004032:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004034:	2303      	movs	r3, #3
 8004036:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 800403c:	4b4f      	ldr	r3, [pc, #316]	; (800417c <startNavigationTask+0x15c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	2b03      	cmp	r3, #3
 8004044:	d863      	bhi.n	800410e <startNavigationTask+0xee>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <startNavigationTask+0x2c>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004087 	.word	0x08004087
 8004054:	080040b3 	.word	0x080040b3
 8004058:	080040d9 	.word	0x080040d9
	{
	case UP:
	{
		if (menu_highlight == MENU_TOP)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d064      	beq.n	800412c <startNavigationTask+0x10c>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3b01      	subs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004068:	4b45      	ldr	r3, [pc, #276]	; (8004180 <startNavigationTask+0x160>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	7bbb      	ldrb	r3, [r7, #14]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	4313      	orrs	r3, r2
 800407a:	4619      	mov	r1, r3
 800407c:	2300      	movs	r3, #0
 800407e:	2204      	movs	r2, #4
 8004080:	f00b f81c 	bl	800f0bc <xTaskGenericNotify>
		}
		break;
 8004084:	e052      	b.n	800412c <startNavigationTask+0x10c>
	}
	case DWN:
	{
		if (menu_highlight >= menu_Max_Items)
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	7b3b      	ldrb	r3, [r7, #12]
 800408a:	429a      	cmp	r2, r3
 800408c:	d250      	bcs.n	8004130 <startNavigationTask+0x110>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	3301      	adds	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004094:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <startNavigationTask+0x160>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	f043 0202 	orr.w	r2, r3, #2
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	4313      	orrs	r3, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	2204      	movs	r2, #4
 80040ac:	f00b f806 	bl	800f0bc <xTaskGenericNotify>
		}
		break;
 80040b0:	e03e      	b.n	8004130 <startNavigationTask+0x110>
	}
	case BACK:
	{
		menu_run = prev_menu;
 80040b2:	7b7b      	ldrb	r3, [r7, #13]
 80040b4:	73bb      	strb	r3, [r7, #14]
		menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <startNavigationTask+0x160>)
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	f043 0203 	orr.w	r2, r3, #3
 80040c6:	7bbb      	ldrb	r3, [r7, #14]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	4313      	orrs	r3, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	2204      	movs	r2, #4
 80040d2:	f00a fff3 	bl	800f0bc <xTaskGenericNotify>
		break;
 80040d6:	e02c      	b.n	8004132 <startNavigationTask+0x112>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 80040d8:	7bbb      	ldrb	r3, [r7, #14]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d108      	bne.n	80040f0 <startNavigationTask+0xd0>
			prev_menu = menu_run;		// save currently running menu for BACK button
 80040de:	7bbb      	ldrb	r3, [r7, #14]
 80040e0:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	3301      	adds	r3, #1
 80040e6:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <startNavigationTask+0x160>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	7bbb      	ldrb	r3, [r7, #14]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	4313      	orrs	r3, r2
 8004102:	4619      	mov	r1, r3
 8004104:	2300      	movs	r3, #0
 8004106:	2204      	movs	r2, #4
 8004108:	f00a ffd8 	bl	800f0bc <xTaskGenericNotify>
		break;
 800410c:	e011      	b.n	8004132 <startNavigationTask+0x112>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <startNavigationTask+0x160>)
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	f043 0205 	orr.w	r2, r3, #5
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	4313      	orrs	r3, r2
 8004120:	4619      	mov	r1, r3
 8004122:	2300      	movs	r3, #0
 8004124:	2204      	movs	r2, #4
 8004126:	f00a ffc9 	bl	800f0bc <xTaskGenericNotify>
		break;
 800412a:	e002      	b.n	8004132 <startNavigationTask+0x112>
		break;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <startNavigationTask+0x112>
		break;
 8004130:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	3b01      	subs	r3, #1
 8004136:	2b03      	cmp	r3, #3
 8004138:	d816      	bhi.n	8004168 <startNavigationTask+0x148>
 800413a:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <startNavigationTask+0x120>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004157 	.word	0x08004157
 8004144:	08004151 	.word	0x08004151
 8004148:	0800415d 	.word	0x0800415d
 800414c:	08004163 	.word	0x08004163

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004150:	2305      	movs	r3, #5
 8004152:	733b      	strb	r3, [r7, #12]
		break;
 8004154:	e00b      	b.n	800416e <startNavigationTask+0x14e>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004156:	2303      	movs	r3, #3
 8004158:	733b      	strb	r3, [r7, #12]
		break;
 800415a:	e008      	b.n	800416e <startNavigationTask+0x14e>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 800415c:	2303      	movs	r3, #3
 800415e:	733b      	strb	r3, [r7, #12]
		break;
 8004160:	e005      	b.n	800416e <startNavigationTask+0x14e>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004162:	2302      	movs	r3, #2
 8004164:	733b      	strb	r3, [r7, #12]
		break;
 8004166:	e002      	b.n	800416e <startNavigationTask+0x14e>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004168:	2305      	movs	r3, #5
 800416a:	733b      	strb	r3, [r7, #12]
		break;
 800416c:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 800416e:	4b03      	ldr	r3, [pc, #12]	; (800417c <startNavigationTask+0x15c>)
 8004170:	2205      	movs	r2, #5
 8004172:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004174:	20c8      	movs	r0, #200	; 0xc8
 8004176:	f009 fa85 	bl	800d684 <osDelay>
	switch(inputButtonSet)
 800417a:	e75f      	b.n	800403c <startNavigationTask+0x1c>
 800417c:	200000a4 	.word	0x200000a4
 8004180:	20024044 	.word	0x20024044

08004184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004196:	f003 f8e9 	bl	800736c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40001000 	.word	0x40001000

080041a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ae:	e7fe      	b.n	80041ae <Error_Handler+0x6>

080041b0 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80041b4:	2201      	movs	r2, #1
 80041b6:	2102      	movs	r1, #2
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <SMLCD_Enable+0x14>)
 80041ba:	f004 fd71 	bl	8008ca0 <HAL_GPIO_WritePin>
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40022400 	.word	0x40022400

080041c8 <initializeDisplay>:
#include "menu.h"


float displayAdcValues[21];

void initializeDisplay(){
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b099      	sub	sp, #100	; 0x64
 80041cc:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 80041ce:	f7fc fa23 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 80041d2:	4c10      	ldr	r4, [pc, #64]	; (8004214 <initializeDisplay+0x4c>)
 80041d4:	4668      	mov	r0, sp
 80041d6:	f104 0310 	add.w	r3, r4, #16
 80041da:	2254      	movs	r2, #84	; 0x54
 80041dc:	4619      	mov	r1, r3
 80041de:	f00c f807 	bl	80101f0 <memcpy>
 80041e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041e6:	f7fc fa37 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 80041ea:	f7ff ffe1 	bl	80041b0 <SMLCD_Enable>
	SMLCD_Clear();
 80041ee:	f7fc fa53 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 80041f2:	2301      	movs	r3, #1
 80041f4:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc fb8f 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 80041fe:	f7fc fbb5 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8004202:	2254      	movs	r2, #84	; 0x54
 8004204:	2100      	movs	r1, #0
 8004206:	4804      	ldr	r0, [pc, #16]	; (8004218 <initializeDisplay+0x50>)
 8004208:	f00b fffd 	bl	8010206 <memset>
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	20010310 	.word	0x20010310
 8004218:	2002404c 	.word	0x2002404c

0800421c <drawMainMenu>:

void drawMainMenu(int indicator){
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8004224:	4b9a      	ldr	r3, [pc, #616]	; (8004490 <drawMainMenu+0x274>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800422a:	f7fc fb9f 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 800422e:	4b99      	ldr	r3, [pc, #612]	; (8004494 <drawMainMenu+0x278>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004234:	4b98      	ldr	r3, [pc, #608]	; (8004498 <drawMainMenu+0x27c>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	4b97      	ldr	r3, [pc, #604]	; (800449c <drawMainMenu+0x280>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	3b01      	subs	r3, #1
 8004242:	b29b      	uxth	r3, r3
 8004244:	2100      	movs	r1, #0
 8004246:	2000      	movs	r0, #0
 8004248:	f7fc fde2 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 800424c:	4b92      	ldr	r3, [pc, #584]	; (8004498 <drawMainMenu+0x27c>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	3b03      	subs	r3, #3
 8004252:	b29a      	uxth	r2, r3
 8004254:	4b91      	ldr	r3, [pc, #580]	; (800449c <drawMainMenu+0x280>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	3b03      	subs	r3, #3
 800425a:	b29b      	uxth	r3, r3
 800425c:	2102      	movs	r1, #2
 800425e:	2002      	movs	r0, #2
 8004260:	f7fc fdd6 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004264:	230a      	movs	r3, #10
 8004266:	60bb      	str	r3, [r7, #8]
	j  = 10;
 8004268:	230a      	movs	r3, #10
 800426a:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	b298      	uxth	r0, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	b299      	uxth	r1, r3
 8004274:	4b8a      	ldr	r3, [pc, #552]	; (80044a0 <drawMainMenu+0x284>)
 8004276:	4a8b      	ldr	r2, [pc, #556]	; (80044a4 <drawMainMenu+0x288>)
 8004278:	f7fd f958 	bl	800152c <LCD_PutStr>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4413      	add	r3, r2
 8004284:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	b298      	uxth	r0, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b299      	uxth	r1, r3
 800428e:	4b84      	ldr	r3, [pc, #528]	; (80044a0 <drawMainMenu+0x284>)
 8004290:	4a85      	ldr	r2, [pc, #532]	; (80044a8 <drawMainMenu+0x28c>)
 8004292:	f7fd f94b 	bl	800152c <LCD_PutStr>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
	i+=20;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3314      	adds	r3, #20
 80042a4:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	b298      	uxth	r0, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	b299      	uxth	r1, r3
 80042ae:	4b7c      	ldr	r3, [pc, #496]	; (80044a0 <drawMainMenu+0x284>)
 80042b0:	4a7e      	ldr	r2, [pc, #504]	; (80044ac <drawMainMenu+0x290>)
 80042b2:	f7fd f93b 	bl	800152c <LCD_PutStr>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	b298      	uxth	r0, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	b299      	uxth	r1, r3
 80042c8:	4b75      	ldr	r3, [pc, #468]	; (80044a0 <drawMainMenu+0x284>)
 80042ca:	4a79      	ldr	r2, [pc, #484]	; (80044b0 <drawMainMenu+0x294>)
 80042cc:	f7fd f92e 	bl	800152c <LCD_PutStr>
 80042d0:	4603      	mov	r3, r0
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4413      	add	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]
	i  = 135;
 80042da:	2387      	movs	r3, #135	; 0x87
 80042dc:	60bb      	str	r3, [r7, #8]
	j += 14;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	330e      	adds	r3, #14
 80042e2:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	b299      	uxth	r1, r3
 80042e8:	4b6b      	ldr	r3, [pc, #428]	; (8004498 <drawMainMenu+0x27c>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	3b5e      	subs	r3, #94	; 0x5e
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3303      	adds	r3, #3
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2002      	movs	r0, #2
 80042fa:	f7fc fdcb 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	b29b      	uxth	r3, r3
 8004302:	3305      	adds	r3, #5
 8004304:	b298      	uxth	r0, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	b29b      	uxth	r3, r3
 800430a:	3308      	adds	r3, #8
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	b29b      	uxth	r3, r3
 8004312:	2102      	movs	r1, #2
 8004314:	f7fc fdbe 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 8004318:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <drawMainMenu+0x27c>)
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	3b61      	subs	r3, #97	; 0x61
 800431e:	b298      	uxth	r0, r3
 8004320:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <drawMainMenu+0x27c>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	3b5e      	subs	r3, #94	; 0x5e
 8004326:	b29a      	uxth	r2, r3
 8004328:	4b5c      	ldr	r3, [pc, #368]	; (800449c <drawMainMenu+0x280>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	b29b      	uxth	r3, r3
 8004330:	2102      	movs	r1, #2
 8004332:	f7fc fdaf 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-80;
 8004336:	4b58      	ldr	r3, [pc, #352]	; (8004498 <drawMainMenu+0x27c>)
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	3b50      	subs	r3, #80	; 0x50
 800433c:	60bb      	str	r3, [r7, #8]
	j  = 3;
 800433e:	2303      	movs	r3, #3
 8004340:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	b298      	uxth	r0, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b02      	subs	r3, #2
 800434c:	b299      	uxth	r1, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	b29b      	uxth	r3, r3
 8004352:	330c      	adds	r3, #12
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	b29b      	uxth	r3, r3
 800435a:	3308      	adds	r3, #8
 800435c:	b29b      	uxth	r3, r3
 800435e:	f7fc fd99 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3314      	adds	r3, #20
 8004366:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT1 LED", fnt7x10);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	b298      	uxth	r0, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	b299      	uxth	r1, r3
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <drawMainMenu+0x284>)
 8004372:	4a50      	ldr	r2, [pc, #320]	; (80044b4 <drawMainMenu+0x298>)
 8004374:	f7fd f8da 	bl	800152c <LCD_PutStr>
	j+=22;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3316      	adds	r3, #22
 800437c:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <drawMainMenu+0x27c>)
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	3b50      	subs	r3, #80	; 0x50
 8004384:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	b298      	uxth	r0, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b02      	subs	r3, #2
 8004390:	b299      	uxth	r1, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	b29b      	uxth	r3, r3
 8004396:	330c      	adds	r3, #12
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	b29b      	uxth	r3, r3
 800439e:	3308      	adds	r3, #8
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f7fc fd77 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3314      	adds	r3, #20
 80043aa:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT2 LED", fnt7x10);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	b298      	uxth	r0, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	b299      	uxth	r1, r3
 80043b4:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <drawMainMenu+0x284>)
 80043b6:	4a40      	ldr	r2, [pc, #256]	; (80044b8 <drawMainMenu+0x29c>)
 80043b8:	f7fd f8b8 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80043bc:	4b36      	ldr	r3, [pc, #216]	; (8004498 <drawMainMenu+0x27c>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	3b50      	subs	r3, #80	; 0x50
 80043c2:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3316      	adds	r3, #22
 80043c8:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	b298      	uxth	r0, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b02      	subs	r3, #2
 80043d4:	b299      	uxth	r1, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	330c      	adds	r3, #12
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3308      	adds	r3, #8
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f7fc fd55 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3314      	adds	r3, #20
 80043ee:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3 LED", fnt7x10);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	b298      	uxth	r0, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	b299      	uxth	r1, r3
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <drawMainMenu+0x284>)
 80043fa:	4a30      	ldr	r2, [pc, #192]	; (80044bc <drawMainMenu+0x2a0>)
 80043fc:	f7fd f896 	bl	800152c <LCD_PutStr>
	j+=22;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3316      	adds	r3, #22
 8004404:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004406:	4b24      	ldr	r3, [pc, #144]	; (8004498 <drawMainMenu+0x27c>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	3b50      	subs	r3, #80	; 0x50
 800440c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	b298      	uxth	r0, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b02      	subs	r3, #2
 8004418:	b299      	uxth	r1, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	b29b      	uxth	r3, r3
 800441e:	330c      	adds	r3, #12
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	b29b      	uxth	r3, r3
 8004426:	3308      	adds	r3, #8
 8004428:	b29b      	uxth	r3, r3
 800442a:	f7fc fd33 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3314      	adds	r3, #20
 8004432:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4 LED", fnt7x10);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	b298      	uxth	r0, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	b299      	uxth	r1, r3
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <drawMainMenu+0x284>)
 800443e:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <drawMainMenu+0x2a4>)
 8004440:	f7fd f874 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004444:	4b14      	ldr	r3, [pc, #80]	; (8004498 <drawMainMenu+0x27c>)
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	3b50      	subs	r3, #80	; 0x50
 800444a:	60bb      	str	r3, [r7, #8]
	j  += 22;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3316      	adds	r3, #22
 8004450:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	b298      	uxth	r0, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b02      	subs	r3, #2
 800445c:	b299      	uxth	r1, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	b29b      	uxth	r3, r3
 8004462:	330c      	adds	r3, #12
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	b29b      	uxth	r3, r3
 800446a:	3308      	adds	r3, #8
 800446c:	b29b      	uxth	r3, r3
 800446e:	f7fc fd11 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3314      	adds	r3, #20
 8004476:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5 LED", fnt7x10);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	b298      	uxth	r0, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	b299      	uxth	r1, r3
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <drawMainMenu+0x284>)
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <drawMainMenu+0x2a8>)
 8004484:	f7fd f852 	bl	800152c <LCD_PutStr>
	j+=22;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3316      	adds	r3, #22
 800448c:	e01c      	b.n	80044c8 <drawMainMenu+0x2ac>
 800448e:	bf00      	nop
 8004490:	200032a0 	.word	0x200032a0
 8004494:	20010308 	.word	0x20010308
 8004498:	2001030a 	.word	0x2001030a
 800449c:	2001030c 	.word	0x2001030c
 80044a0:	08014878 	.word	0x08014878
 80044a4:	080142e8 	.word	0x080142e8
 80044a8:	080142f0 	.word	0x080142f0
 80044ac:	080142fc 	.word	0x080142fc
 80044b0:	08014304 	.word	0x08014304
 80044b4:	08014308 	.word	0x08014308
 80044b8:	08014314 	.word	0x08014314
 80044bc:	08014320 	.word	0x08014320
 80044c0:	0801432c 	.word	0x0801432c
 80044c4:	08014338 	.word	0x08014338
 80044c8:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80044ca:	4b93      	ldr	r3, [pc, #588]	; (8004718 <drawMainMenu+0x4fc>)
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	3b50      	subs	r3, #80	; 0x50
 80044d0:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	b298      	uxth	r0, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b02      	subs	r3, #2
 80044dc:	b299      	uxth	r1, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	330c      	adds	r3, #12
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3308      	adds	r3, #8
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f7fc fcd1 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3314      	adds	r3, #20
 80044f6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6 LED", fnt7x10);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	b298      	uxth	r0, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	b299      	uxth	r1, r3
 8004500:	4b86      	ldr	r3, [pc, #536]	; (800471c <drawMainMenu+0x500>)
 8004502:	4a87      	ldr	r2, [pc, #540]	; (8004720 <drawMainMenu+0x504>)
 8004504:	f7fd f812 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004508:	4b83      	ldr	r3, [pc, #524]	; (8004718 <drawMainMenu+0x4fc>)
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	3b50      	subs	r3, #80	; 0x50
 800450e:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3316      	adds	r3, #22
 8004514:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	b298      	uxth	r0, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b02      	subs	r3, #2
 8004520:	b299      	uxth	r1, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	b29b      	uxth	r3, r3
 8004526:	330c      	adds	r3, #12
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	b29b      	uxth	r3, r3
 800452e:	3308      	adds	r3, #8
 8004530:	b29b      	uxth	r3, r3
 8004532:	f7fc fcaf 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3314      	adds	r3, #20
 800453a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7 LED", fnt7x10);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	b298      	uxth	r0, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	b299      	uxth	r1, r3
 8004544:	4b75      	ldr	r3, [pc, #468]	; (800471c <drawMainMenu+0x500>)
 8004546:	4a77      	ldr	r2, [pc, #476]	; (8004724 <drawMainMenu+0x508>)
 8004548:	f7fc fff0 	bl	800152c <LCD_PutStr>
	j+=22;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3316      	adds	r3, #22
 8004550:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004552:	4b71      	ldr	r3, [pc, #452]	; (8004718 <drawMainMenu+0x4fc>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	3b50      	subs	r3, #80	; 0x50
 8004558:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	b298      	uxth	r0, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b02      	subs	r3, #2
 8004564:	b299      	uxth	r1, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	b29b      	uxth	r3, r3
 800456a:	330c      	adds	r3, #12
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	b29b      	uxth	r3, r3
 8004572:	3308      	adds	r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	f7fc fc8d 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3314      	adds	r3, #20
 800457e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8 LED", fnt7x10);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	b298      	uxth	r0, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	b299      	uxth	r1, r3
 8004588:	4b64      	ldr	r3, [pc, #400]	; (800471c <drawMainMenu+0x500>)
 800458a:	4a67      	ldr	r2, [pc, #412]	; (8004728 <drawMainMenu+0x50c>)
 800458c:	f7fc ffce 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004590:	4b61      	ldr	r3, [pc, #388]	; (8004718 <drawMainMenu+0x4fc>)
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	3b50      	subs	r3, #80	; 0x50
 8004596:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3316      	adds	r3, #22
 800459c:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	b298      	uxth	r0, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b02      	subs	r3, #2
 80045a8:	b299      	uxth	r1, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	330c      	adds	r3, #12
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3308      	adds	r3, #8
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f7fc fc6b 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3314      	adds	r3, #20
 80045c2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9 LED", fnt7x10);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	b298      	uxth	r0, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	b299      	uxth	r1, r3
 80045cc:	4b53      	ldr	r3, [pc, #332]	; (800471c <drawMainMenu+0x500>)
 80045ce:	4a57      	ldr	r2, [pc, #348]	; (800472c <drawMainMenu+0x510>)
 80045d0:	f7fc ffac 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 80045d4:	4b56      	ldr	r3, [pc, #344]	; (8004730 <drawMainMenu+0x514>)
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	3b14      	subs	r3, #20
 80045da:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80045dc:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <drawMainMenu+0x4fc>)
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	3b50      	subs	r3, #80	; 0x50
 80045e2:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	b298      	uxth	r0, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b02      	subs	r3, #2
 80045ee:	b299      	uxth	r1, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	330c      	adds	r3, #12
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3308      	adds	r3, #8
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f7fc fc48 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3314      	adds	r3, #20
 8004608:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	b298      	uxth	r0, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	b299      	uxth	r1, r3
 8004612:	4b42      	ldr	r3, [pc, #264]	; (800471c <drawMainMenu+0x500>)
 8004614:	4a47      	ldr	r2, [pc, #284]	; (8004734 <drawMainMenu+0x518>)
 8004616:	f7fc ff89 	bl	800152c <LCD_PutStr>

	i=100;
 800461a:	2364      	movs	r3, #100	; 0x64
 800461c:	60bb      	str	r3, [r7, #8]
	j=75;
 800461e:	234b      	movs	r3, #75	; 0x4b
 8004620:	60fb      	str	r3, [r7, #12]
	i+=20;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3314      	adds	r3, #20
 8004626:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	b298      	uxth	r0, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	b299      	uxth	r1, r3
 8004630:	4b3a      	ldr	r3, [pc, #232]	; (800471c <drawMainMenu+0x500>)
 8004632:	4a41      	ldr	r2, [pc, #260]	; (8004738 <drawMainMenu+0x51c>)
 8004634:	f7fc ff7a 	bl	800152c <LCD_PutStr>
	j+=15;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	330f      	adds	r3, #15
 800463c:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b03      	subs	r3, #3
 8004644:	b298      	uxth	r0, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b02      	subs	r3, #2
 800464c:	b299      	uxth	r1, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	b29b      	uxth	r3, r3
 8004652:	3347      	adds	r3, #71	; 0x47
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	b29b      	uxth	r3, r3
 800465a:	3302      	adds	r3, #2
 800465c:	b29b      	uxth	r3, r3
 800465e:	f7fc fc19 	bl	8000e94 <LCD_FillRect>

	i=100;
 8004662:	2364      	movs	r3, #100	; 0x64
 8004664:	60bb      	str	r3, [r7, #8]
	j=110;
 8004666:	236e      	movs	r3, #110	; 0x6e
 8004668:	60fb      	str	r3, [r7, #12]
	i+=20;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3314      	adds	r3, #20
 800466e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	b298      	uxth	r0, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	b299      	uxth	r1, r3
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <drawMainMenu+0x500>)
 800467a:	4a30      	ldr	r2, [pc, #192]	; (800473c <drawMainMenu+0x520>)
 800467c:	f7fc ff56 	bl	800152c <LCD_PutStr>
	j+=15;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	330f      	adds	r3, #15
 8004684:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b03      	subs	r3, #3
 800468c:	b298      	uxth	r0, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b02      	subs	r3, #2
 8004694:	b299      	uxth	r1, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	b29b      	uxth	r3, r3
 800469a:	3332      	adds	r3, #50	; 0x32
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3302      	adds	r3, #2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f7fc fbf5 	bl	8000e94 <LCD_FillRect>

	i=100;
 80046aa:	2364      	movs	r3, #100	; 0x64
 80046ac:	60bb      	str	r3, [r7, #8]
	j=145;
 80046ae:	2391      	movs	r3, #145	; 0x91
 80046b0:	60fb      	str	r3, [r7, #12]
	i+=20;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3314      	adds	r3, #20
 80046b6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b298      	uxth	r0, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	b299      	uxth	r1, r3
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <drawMainMenu+0x500>)
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <drawMainMenu+0x524>)
 80046c4:	f7fc ff32 	bl	800152c <LCD_PutStr>
	j+=15;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	330f      	adds	r3, #15
 80046cc:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b03      	subs	r3, #3
 80046d4:	b298      	uxth	r0, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b02      	subs	r3, #2
 80046dc:	b299      	uxth	r1, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3355      	adds	r3, #85	; 0x55
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3302      	adds	r3, #2
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f7fc fbd1 	bl	8000e94 <LCD_FillRect>
	i=100;
 80046f2:	2364      	movs	r3, #100	; 0x64
 80046f4:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d006      	beq.n	800470a <drawMainMenu+0x4ee>
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d007      	beq.n	8004710 <drawMainMenu+0x4f4>
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11f      	bne.n	8004744 <drawMainMenu+0x528>
	case FIRST:
	{
		j=75;
 8004704:	234b      	movs	r3, #75	; 0x4b
 8004706:	60fb      	str	r3, [r7, #12]
		break;
 8004708:	e01f      	b.n	800474a <drawMainMenu+0x52e>
	}
	case SECOND:
	{
		j=110;
 800470a:	236e      	movs	r3, #110	; 0x6e
 800470c:	60fb      	str	r3, [r7, #12]
		break;
 800470e:	e01c      	b.n	800474a <drawMainMenu+0x52e>
	}
	case THIRD:
	{
		j=145;
 8004710:	2391      	movs	r3, #145	; 0x91
 8004712:	60fb      	str	r3, [r7, #12]
		break;
 8004714:	e019      	b.n	800474a <drawMainMenu+0x52e>
 8004716:	bf00      	nop
 8004718:	2001030a 	.word	0x2001030a
 800471c:	08014878 	.word	0x08014878
 8004720:	08014344 	.word	0x08014344
 8004724:	08014350 	.word	0x08014350
 8004728:	0801435c 	.word	0x0801435c
 800472c:	08014368 	.word	0x08014368
 8004730:	2001030c 	.word	0x2001030c
 8004734:	08014374 	.word	0x08014374
 8004738:	0801437c 	.word	0x0801437c
 800473c:	08014388 	.word	0x08014388
 8004740:	08014390 	.word	0x08014390
	}
	default:
	{
		j=75;
 8004744:	234b      	movs	r3, #75	; 0x4b
 8004746:	60fb      	str	r3, [r7, #12]
		break;
 8004748:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	b298      	uxth	r0, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	b299      	uxth	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	b29b      	uxth	r3, r3
 8004756:	330c      	adds	r3, #12
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	b29b      	uxth	r3, r3
 800475e:	330a      	adds	r3, #10
 8004760:	b29b      	uxth	r3, r3
 8004762:	f7fc fb97 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 8004766:	f7fb ffb7 	bl	80006d8 <SMLCD_Flush>
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop

08004774 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8004774:	b580      	push	{r7, lr}
 8004776:	b090      	sub	sp, #64	; 0x40
 8004778:	af02      	add	r7, sp, #8
 800477a:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 800477c:	2314      	movs	r3, #20
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int inputGpioAlignment=245;
 8004780:	23f5      	movs	r3, #245	; 0xf5
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
	int daughterCardAlignment=240;
 8004784:	23f0      	movs	r3, #240	; 0xf0
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
	int i2cCheck;
	int arrowUp = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
	int arrowDown=1;
 800478c:	2301      	movs	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
	int arrowSize=3;
 8004790:	2303      	movs	r3, #3
 8004792:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <drawStatusMenu+0x50>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800479a:	f7fc f8e7 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <drawStatusMenu+0x54>)
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <drawStatusMenu+0x54>)
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	4013      	ands	r3, r2
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <drawStatusMenu+0x54>)
 80047ac:	789b      	ldrb	r3, [r3, #2]
 80047ae:	4013      	ands	r3, r2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01a      	beq.n	80047ec <drawStatusMenu+0x78>
 		  adcValuePointer = getADCValues();
 80047b6:	f7fe fe93 	bl	80034e0 <getADCValues>
 80047ba:	4603      	mov	r3, r0
 80047bc:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 80047be:	2300      	movs	r3, #0
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
 80047c2:	e010      	b.n	80047e6 <drawStatusMenu+0x72>
 80047c4:	200032a0 	.word	0x200032a0
 80047c8:	20010a80 	.word	0x20010a80
	  		  displayAdcValues[i]=*adcValuePointer;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	499d      	ldr	r1, [pc, #628]	; (8004a48 <drawStatusMenu+0x2d4>)
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	3304      	adds	r3, #4
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	3301      	adds	r3, #1
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	2b13      	cmp	r3, #19
 80047ea:	ddef      	ble.n	80047cc <drawStatusMenu+0x58>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 80047ec:	4b97      	ldr	r3, [pc, #604]	; (8004a4c <drawStatusMenu+0x2d8>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80047f2:	4b97      	ldr	r3, [pc, #604]	; (8004a50 <drawStatusMenu+0x2dc>)
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	4b96      	ldr	r3, [pc, #600]	; (8004a54 <drawStatusMenu+0x2e0>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29b      	uxth	r3, r3
 8004802:	2100      	movs	r1, #0
 8004804:	2000      	movs	r0, #0
 8004806:	f7fc fb03 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 800480a:	4b91      	ldr	r3, [pc, #580]	; (8004a50 <drawStatusMenu+0x2dc>)
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	3b03      	subs	r3, #3
 8004810:	b29a      	uxth	r2, r3
 8004812:	4b90      	ldr	r3, [pc, #576]	; (8004a54 <drawStatusMenu+0x2e0>)
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	3b03      	subs	r3, #3
 8004818:	b29b      	uxth	r3, r3
 800481a:	2102      	movs	r1, #2
 800481c:	2002      	movs	r0, #2
 800481e:	f7fc faf7 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004822:	230a      	movs	r3, #10
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
	j  = 10;
 8004826:	230a      	movs	r3, #10
 8004828:	617b      	str	r3, [r7, #20]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800482a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482c:	b298      	uxth	r0, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	b299      	uxth	r1, r3
 8004832:	4b89      	ldr	r3, [pc, #548]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004834:	4a89      	ldr	r2, [pc, #548]	; (8004a5c <drawStatusMenu+0x2e8>)
 8004836:	f7fc fe79 	bl	800152c <LCD_PutStr>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	4413      	add	r3, r2
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8004844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004846:	b298      	uxth	r0, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	b299      	uxth	r1, r3
 800484c:	4b82      	ldr	r3, [pc, #520]	; (8004a58 <drawStatusMenu+0x2e4>)
 800484e:	4a84      	ldr	r2, [pc, #528]	; (8004a60 <drawStatusMenu+0x2ec>)
 8004850:	f7fc fe6c 	bl	800152c <LCD_PutStr>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485a:	4413      	add	r3, r2
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
	i+=170;
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	33aa      	adds	r3, #170	; 0xaa
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	b298      	uxth	r0, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	b299      	uxth	r1, r3
 800486c:	4b7a      	ldr	r3, [pc, #488]	; (8004a58 <drawStatusMenu+0x2e4>)
 800486e:	4a7d      	ldr	r2, [pc, #500]	; (8004a64 <drawStatusMenu+0x2f0>)
 8004870:	f7fc fe5c 	bl	800152c <LCD_PutStr>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487a:	4413      	add	r3, r2
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	b298      	uxth	r0, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	b299      	uxth	r1, r3
 8004886:	4b74      	ldr	r3, [pc, #464]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004888:	4a77      	ldr	r2, [pc, #476]	; (8004a68 <drawStatusMenu+0x2f4>)
 800488a:	f7fc fe4f 	bl	800152c <LCD_PutStr>
 800488e:	4603      	mov	r3, r0
 8004890:	461a      	mov	r2, r3
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	4413      	add	r3, r2
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
	i  = 135;
 8004898:	2387      	movs	r3, #135	; 0x87
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
	j += 12;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	330c      	adds	r3, #12
 80048a0:	617b      	str	r3, [r7, #20]

	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	b299      	uxth	r1, r3
 80048a6:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <drawStatusMenu+0x2dc>)
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	3b02      	subs	r3, #2
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3303      	adds	r3, #3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2002      	movs	r0, #2
 80048b8:	f7fc faec 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	f000 81e6 	beq.w	8004c90 <drawStatusMenu+0x51c>
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	f000 8783 	beq.w	80057d0 <drawStatusMenu+0x105c>
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f041 8064 	bne.w	8005998 <drawStatusMenu+0x1224>
	case 1:{
		i=35;
 80048d0:	2323      	movs	r3, #35	; 0x23
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 80048d4:	235a      	movs	r3, #90	; 0x5a
 80048d6:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b02      	subs	r3, #2
 80048de:	b299      	uxth	r1, r3
 80048e0:	4b5b      	ldr	r3, [pc, #364]	; (8004a50 <drawStatusMenu+0x2dc>)
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	3b02      	subs	r3, #2
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3302      	adds	r3, #2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2002      	movs	r0, #2
 80048f2:	f7fc facf 	bl	8000e94 <LCD_FillRect>
		j=75;
 80048f6:	234b      	movs	r3, #75	; 0x4b
 80048f8:	617b      	str	r3, [r7, #20]
		i=62;
 80048fa:	233e      	movs	r3, #62	; 0x3e
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	b298      	uxth	r0, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	b299      	uxth	r1, r3
 8004906:	4b54      	ldr	r3, [pc, #336]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004908:	4a54      	ldr	r2, [pc, #336]	; (8004a5c <drawStatusMenu+0x2e8>)
 800490a:	f7fc fe0f 	bl	800152c <LCD_PutStr>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	4413      	add	r3, r2
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
		i+=145;
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	3391      	adds	r3, #145	; 0x91
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	b298      	uxth	r0, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	b299      	uxth	r1, r3
 8004926:	4b4c      	ldr	r3, [pc, #304]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004928:	4a50      	ldr	r2, [pc, #320]	; (8004a6c <drawStatusMenu+0x2f8>)
 800492a:	f7fc fdff 	bl	800152c <LCD_PutStr>

		i=10;
 800492e:	230a      	movs	r3, #10
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004932:	235f      	movs	r3, #95	; 0x5f
 8004934:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault0: ", fnt7x10);
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	b298      	uxth	r0, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	b299      	uxth	r1, r3
 800493e:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004940:	4a4b      	ldr	r2, [pc, #300]	; (8004a70 <drawStatusMenu+0x2fc>)
 8004942:	f7fc fdf3 	bl	800152c <LCD_PutStr>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	4413      	add	r3, r2
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	b298      	uxth	r0, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	b299      	uxth	r1, r3
 8004958:	4b3f      	ldr	r3, [pc, #252]	; (8004a58 <drawStatusMenu+0x2e4>)
 800495a:	4a46      	ldr	r2, [pc, #280]	; (8004a74 <drawStatusMenu+0x300>)
 800495c:	f7fc fde6 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	b298      	uxth	r0, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	b299      	uxth	r1, r3
 800496c:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <drawStatusMenu+0x2e4>)
 800496e:	4a42      	ldr	r2, [pc, #264]	; (8004a78 <drawStatusMenu+0x304>)
 8004970:	f7fc fddc 	bl	800152c <LCD_PutStr>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	4413      	add	r3, r2
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	b298      	uxth	r0, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	b299      	uxth	r1, r3
 8004986:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004988:	4a3a      	ldr	r2, [pc, #232]	; (8004a74 <drawStatusMenu+0x300>)
 800498a:	f7fc fdcf 	bl	800152c <LCD_PutStr>

		i=10;
 800498e:	230a      	movs	r3, #10
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	330f      	adds	r3, #15
 8004996:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault1: ", fnt7x10);
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	b298      	uxth	r0, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	b299      	uxth	r1, r3
 80049a0:	4b2d      	ldr	r3, [pc, #180]	; (8004a58 <drawStatusMenu+0x2e4>)
 80049a2:	4a36      	ldr	r2, [pc, #216]	; (8004a7c <drawStatusMenu+0x308>)
 80049a4:	f7fc fdc2 	bl	800152c <LCD_PutStr>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	4413      	add	r3, r2
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	b298      	uxth	r0, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	b299      	uxth	r1, r3
 80049ba:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <drawStatusMenu+0x2e4>)
 80049bc:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <drawStatusMenu+0x300>)
 80049be:	f7fc fdb5 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	b298      	uxth	r0, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	b299      	uxth	r1, r3
 80049ce:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <drawStatusMenu+0x2e4>)
 80049d0:	4a2b      	ldr	r2, [pc, #172]	; (8004a80 <drawStatusMenu+0x30c>)
 80049d2:	f7fc fdab 	bl	800152c <LCD_PutStr>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	4413      	add	r3, r2
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	b298      	uxth	r0, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	b299      	uxth	r1, r3
 80049e8:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <drawStatusMenu+0x2e4>)
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <drawStatusMenu+0x300>)
 80049ec:	f7fc fd9e 	bl	800152c <LCD_PutStr>

		i=10;
 80049f0:	230a      	movs	r3, #10
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	330f      	adds	r3, #15
 80049f8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault2: ", fnt7x10);
 80049fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fc:	b298      	uxth	r0, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	b299      	uxth	r1, r3
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004a04:	4a1f      	ldr	r2, [pc, #124]	; (8004a84 <drawStatusMenu+0x310>)
 8004a06:	f7fc fd91 	bl	800152c <LCD_PutStr>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	4413      	add	r3, r2
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	b298      	uxth	r0, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	b299      	uxth	r1, r3
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004a1e:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <drawStatusMenu+0x300>)
 8004a20:	f7fc fd84 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	b298      	uxth	r0, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	b299      	uxth	r1, r3
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <drawStatusMenu+0x2e4>)
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <drawStatusMenu+0x314>)
 8004a34:	f7fc fd7a 	bl	800152c <LCD_PutStr>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	4413      	add	r3, r2
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	b298      	uxth	r0, r3
 8004a46:	e021      	b.n	8004a8c <drawStatusMenu+0x318>
 8004a48:	2002404c 	.word	0x2002404c
 8004a4c:	20010308 	.word	0x20010308
 8004a50:	2001030a 	.word	0x2001030a
 8004a54:	2001030c 	.word	0x2001030c
 8004a58:	08014878 	.word	0x08014878
 8004a5c:	080142e8 	.word	0x080142e8
 8004a60:	080142f0 	.word	0x080142f0
 8004a64:	080142fc 	.word	0x080142fc
 8004a68:	08014304 	.word	0x08014304
 8004a6c:	0801439c 	.word	0x0801439c
 8004a70:	080143ac 	.word	0x080143ac
 8004a74:	080143b8 	.word	0x080143b8
 8004a78:	080143c4 	.word	0x080143c4
 8004a7c:	080143cc 	.word	0x080143cc
 8004a80:	080143d8 	.word	0x080143d8
 8004a84:	080143e0 	.word	0x080143e0
 8004a88:	080143ec 	.word	0x080143ec
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	b299      	uxth	r1, r3
 8004a90:	4b75      	ldr	r3, [pc, #468]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004a92:	4a76      	ldr	r2, [pc, #472]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004a94:	f7fc fd4a 	bl	800152c <LCD_PutStr>

		i=10;
 8004a98:	230a      	movs	r3, #10
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	330f      	adds	r3, #15
 8004aa0:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	b298      	uxth	r0, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	b299      	uxth	r1, r3
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004aac:	4a70      	ldr	r2, [pc, #448]	; (8004c70 <drawStatusMenu+0x4fc>)
 8004aae:	f7fc fd3d 	bl	800152c <LCD_PutStr>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	4413      	add	r3, r2
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	b298      	uxth	r0, r3
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	b299      	uxth	r1, r3
 8004ac4:	4b68      	ldr	r3, [pc, #416]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004ac6:	4a69      	ldr	r2, [pc, #420]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004ac8:	f7fc fd30 	bl	800152c <LCD_PutStr>

		i=10;
 8004acc:	230a      	movs	r3, #10
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	330f      	adds	r3, #15
 8004ad4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	b298      	uxth	r0, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	b299      	uxth	r1, r3
 8004ade:	4b62      	ldr	r3, [pc, #392]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004ae0:	4a64      	ldr	r2, [pc, #400]	; (8004c74 <drawStatusMenu+0x500>)
 8004ae2:	f7fc fd23 	bl	800152c <LCD_PutStr>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	4413      	add	r3, r2
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	b298      	uxth	r0, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	b299      	uxth	r1, r3
 8004af8:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004afa:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004afc:	f7fc fd16 	bl	800152c <LCD_PutStr>

		i=10;
 8004b00:	230a      	movs	r3, #10
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	330f      	adds	r3, #15
 8004b08:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	b298      	uxth	r0, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	b299      	uxth	r1, r3
 8004b12:	4b55      	ldr	r3, [pc, #340]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004b14:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <drawStatusMenu+0x504>)
 8004b16:	f7fc fd09 	bl	800152c <LCD_PutStr>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	4413      	add	r3, r2
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	b298      	uxth	r0, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	b299      	uxth	r1, r3
 8004b2c:	4b4e      	ldr	r3, [pc, #312]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004b2e:	4a4f      	ldr	r2, [pc, #316]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004b30:	f7fc fcfc 	bl	800152c <LCD_PutStr>

		i=10;
 8004b34:	230a      	movs	r3, #10
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	330f      	adds	r3, #15
 8004b3c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	b298      	uxth	r0, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	b299      	uxth	r1, r3
 8004b46:	4b48      	ldr	r3, [pc, #288]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004b48:	4a4c      	ldr	r2, [pc, #304]	; (8004c7c <drawStatusMenu+0x508>)
 8004b4a:	f7fc fcef 	bl	800152c <LCD_PutStr>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	4413      	add	r3, r2
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	b298      	uxth	r0, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	b299      	uxth	r1, r3
 8004b60:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004b62:	4a42      	ldr	r2, [pc, #264]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004b64:	f7fc fce2 	bl	800152c <LCD_PutStr>

		i=10;
 8004b68:	230a      	movs	r3, #10
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	330f      	adds	r3, #15
 8004b70:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	b298      	uxth	r0, r3
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	b299      	uxth	r1, r3
 8004b7a:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004b7c:	4a40      	ldr	r2, [pc, #256]	; (8004c80 <drawStatusMenu+0x50c>)
 8004b7e:	f7fc fcd5 	bl	800152c <LCD_PutStr>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	4413      	add	r3, r2
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	b298      	uxth	r0, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	b299      	uxth	r1, r3
 8004b94:	4b34      	ldr	r3, [pc, #208]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004b96:	4a35      	ldr	r2, [pc, #212]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004b98:	f7fc fcc8 	bl	800152c <LCD_PutStr>

		i=10;
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	330f      	adds	r3, #15
 8004ba4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	b298      	uxth	r0, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	b299      	uxth	r1, r3
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004bb0:	4a34      	ldr	r2, [pc, #208]	; (8004c84 <drawStatusMenu+0x510>)
 8004bb2:	f7fc fcbb 	bl	800152c <LCD_PutStr>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	4413      	add	r3, r2
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	b298      	uxth	r0, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	b299      	uxth	r1, r3
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <drawStatusMenu+0x4f4>)
 8004bca:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <drawStatusMenu+0x4f8>)
 8004bcc:	f7fc fcae 	bl	800152c <LCD_PutStr>


		//horizontal divider
		j=65;
 8004bd0:	2341      	movs	r3, #65	; 0x41
 8004bd2:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b299      	uxth	r1, r3
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <drawStatusMenu+0x514>)
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	3b02      	subs	r3, #2
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2002      	movs	r0, #2
 8004bee:	f7fc f951 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8004bf2:	23e6      	movs	r3, #230	; 0xe6
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b03      	subs	r3, #3
 8004bfc:	b298      	uxth	r0, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	b299      	uxth	r1, r3
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3303      	adds	r3, #3
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <drawStatusMenu+0x518>)
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	3b02      	subs	r3, #2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f7fc f93f 	bl	8000e94 <LCD_FillRect>

		i=200;
 8004c16:	23c8      	movs	r3, #200	; 0xc8
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8004c1a:	23dc      	movs	r3, #220	; 0xdc
 8004c1c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c20:	b298      	uxth	r0, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	b299      	uxth	r1, r3
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f7fc fdcd 	bl	80017cc <drawUpDownArrow>
		i=180;
 8004c32:	23b4      	movs	r3, #180	; 0xb4
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	b298      	uxth	r0, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	b299      	uxth	r1, r3
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f7fc fdc1 	bl	80017cc <drawUpDownArrow>
		i=220;
 8004c4a:	23dc      	movs	r3, #220	; 0xdc
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	b298      	uxth	r0, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	b299      	uxth	r1, r3
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f7fc fdb5 	bl	80017cc <drawUpDownArrow>
		break;
 8004c62:	f000 be99 	b.w	8005998 <drawStatusMenu+0x1224>
 8004c66:	bf00      	nop
 8004c68:	08014878 	.word	0x08014878
 8004c6c:	080143b8 	.word	0x080143b8
 8004c70:	080143f8 	.word	0x080143f8
 8004c74:	08014404 	.word	0x08014404
 8004c78:	08014410 	.word	0x08014410
 8004c7c:	0801441c 	.word	0x0801441c
 8004c80:	08014428 	.word	0x08014428
 8004c84:	08014434 	.word	0x08014434
 8004c88:	2001030a 	.word	0x2001030a
 8004c8c:	2001030c 	.word	0x2001030c
	}
	case 2:{
		i=35;
 8004c90:	2323      	movs	r3, #35	; 0x23
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004c94:	235a      	movs	r3, #90	; 0x5a
 8004c96:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b02      	subs	r3, #2
 8004c9e:	b299      	uxth	r1, r3
 8004ca0:	4ba4      	ldr	r3, [pc, #656]	; (8004f34 <drawStatusMenu+0x7c0>)
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	3b02      	subs	r3, #2
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3302      	adds	r3, #2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2002      	movs	r0, #2
 8004cb2:	f7fc f8ef 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004cb6:	234b      	movs	r3, #75	; 0x4b
 8004cb8:	617b      	str	r3, [r7, #20]
		i=42;
 8004cba:	232a      	movs	r3, #42	; 0x2a
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	b298      	uxth	r0, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	b299      	uxth	r1, r3
 8004cc6:	4b9c      	ldr	r3, [pc, #624]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004cc8:	4a9c      	ldr	r2, [pc, #624]	; (8004f3c <drawStatusMenu+0x7c8>)
 8004cca:	f7fc fc2f 	bl	800152c <LCD_PutStr>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	4413      	add	r3, r2
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
		i+=125;
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cda:	337d      	adds	r3, #125	; 0x7d
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	b298      	uxth	r0, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	b299      	uxth	r1, r3
 8004ce6:	4b94      	ldr	r3, [pc, #592]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004ce8:	4a95      	ldr	r2, [pc, #596]	; (8004f40 <drawStatusMenu+0x7cc>)
 8004cea:	f7fc fc1f 	bl	800152c <LCD_PutStr>

		i=10;
 8004cee:	230a      	movs	r3, #10
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004cf2:	235f      	movs	r3, #95	; 0x5f
 8004cf4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	b298      	uxth	r0, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	b299      	uxth	r1, r3
 8004cfe:	4b8e      	ldr	r3, [pc, #568]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004d00:	4a90      	ldr	r2, [pc, #576]	; (8004f44 <drawStatusMenu+0x7d0>)
 8004d02:	f7fc fc13 	bl	800152c <LCD_PutStr>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	4413      	add	r3, r2
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8004d10:	4b8d      	ldr	r3, [pc, #564]	; (8004f48 <drawStatusMenu+0x7d4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a8d      	ldr	r2, [pc, #564]	; (8004f4c <drawStatusMenu+0x7d8>)
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	edd3 7a00 	vldr	s15, [r3]
 8004d1e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004f50 <drawStatusMenu+0x7dc>
 8004d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d2a:	ee17 3a90 	vmov	r3, s15
 8004d2e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	b298      	uxth	r0, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	b299      	uxth	r1, r3
 8004d38:	4b7f      	ldr	r3, [pc, #508]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	f7fc fc92 	bl	8001668 <LCD_PutIntF>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	4413      	add	r3, r2
 8004d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4e:	4413      	add	r3, r2
 8004d50:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	b298      	uxth	r0, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	4b77      	ldr	r3, [pc, #476]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004d5c:	4a7d      	ldr	r2, [pc, #500]	; (8004f54 <drawStatusMenu+0x7e0>)
 8004d5e:	f7fc fbe5 	bl	800152c <LCD_PutStr>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	4413      	add	r3, r2
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8004d6c:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <drawStatusMenu+0x7d4>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	4a76      	ldr	r2, [pc, #472]	; (8004f4c <drawStatusMenu+0x7d8>)
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	edd3 7a00 	vldr	s15, [r3]
 8004d7a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004f50 <drawStatusMenu+0x7dc>
 8004d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d86:	ee17 3a90 	vmov	r3, s15
 8004d8a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	b298      	uxth	r0, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	b299      	uxth	r1, r3
 8004d94:	4b68      	ldr	r3, [pc, #416]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2303      	movs	r3, #3
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	f7fc fc64 	bl	8001668 <LCD_PutIntF>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	4413      	add	r3, r2
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	b298      	uxth	r0, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	b299      	uxth	r1, r3
 8004db6:	4b60      	ldr	r3, [pc, #384]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004db8:	4a67      	ldr	r2, [pc, #412]	; (8004f58 <drawStatusMenu+0x7e4>)
 8004dba:	f7fc fbb7 	bl	800152c <LCD_PutStr>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	4413      	add	r3, r2
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	b298      	uxth	r0, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	b299      	uxth	r1, r3
 8004dd0:	4b62      	ldr	r3, [pc, #392]	; (8004f5c <drawStatusMenu+0x7e8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a62      	ldr	r2, [pc, #392]	; (8004f60 <drawStatusMenu+0x7ec>)
 8004dd6:	5cd3      	ldrb	r3, [r2, r3]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b57      	ldr	r3, [pc, #348]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004ddc:	f7fc fbde 	bl	800159c <LCD_PutInt>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	4413      	add	r3, r2
 8004de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dea:	4413      	add	r3, r2
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	b298      	uxth	r0, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	b299      	uxth	r1, r3
 8004df6:	4b50      	ldr	r3, [pc, #320]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004df8:	4a5a      	ldr	r2, [pc, #360]	; (8004f64 <drawStatusMenu+0x7f0>)
 8004dfa:	f7fc fb97 	bl	800152c <LCD_PutStr>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	4413      	add	r3, r2
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	b298      	uxth	r0, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	4b52      	ldr	r3, [pc, #328]	; (8004f5c <drawStatusMenu+0x7e8>)
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	4a52      	ldr	r2, [pc, #328]	; (8004f60 <drawStatusMenu+0x7ec>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004e1c:	f7fc fbbe 	bl	800159c <LCD_PutInt>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	4413      	add	r3, r2
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34


		i=10;
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	330f      	adds	r3, #15
 8004e32:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	b298      	uxth	r0, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	b299      	uxth	r1, r3
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004e3e:	4a4a      	ldr	r2, [pc, #296]	; (8004f68 <drawStatusMenu+0x7f4>)
 8004e40:	f7fc fb74 	bl	800152c <LCD_PutStr>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	4413      	add	r3, r2
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <drawStatusMenu+0x7d4>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4a3e      	ldr	r2, [pc, #248]	; (8004f4c <drawStatusMenu+0x7d8>)
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	edd3 7a00 	vldr	s15, [r3]
 8004e5c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004f50 <drawStatusMenu+0x7dc>
 8004e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e68:	ee17 3a90 	vmov	r3, s15
 8004e6c:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	b298      	uxth	r0, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	b299      	uxth	r1, r3
 8004e76:	4b30      	ldr	r3, [pc, #192]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	f7fc fbf3 	bl	8001668 <LCD_PutIntF>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	4413      	add	r3, r2
 8004e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e8c:	4413      	add	r3, r2
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	b298      	uxth	r0, r3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	b299      	uxth	r1, r3
 8004e98:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004e9a:	4a34      	ldr	r2, [pc, #208]	; (8004f6c <drawStatusMenu+0x7f8>)
 8004e9c:	f7fc fb46 	bl	800152c <LCD_PutStr>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	4413      	add	r3, r2
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <drawStatusMenu+0x7d4>)
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <drawStatusMenu+0x7d8>)
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	edd3 7a00 	vldr	s15, [r3]
 8004eb8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004f50 <drawStatusMenu+0x7dc>
 8004ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ec4:	ee17 3a90 	vmov	r3, s15
 8004ec8:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	b298      	uxth	r0, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	b299      	uxth	r1, r3
 8004ed2:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	f7fc fbc5 	bl	8001668 <LCD_PutIntF>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	4413      	add	r3, r2
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	b298      	uxth	r0, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	b299      	uxth	r1, r3
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004ef6:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <drawStatusMenu+0x7fc>)
 8004ef8:	f7fc fb18 	bl	800152c <LCD_PutStr>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	4413      	add	r3, r2
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	b298      	uxth	r0, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	b299      	uxth	r1, r3
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <drawStatusMenu+0x7e8>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <drawStatusMenu+0x7ec>)
 8004f14:	5cd3      	ldrb	r3, [r2, r3]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <drawStatusMenu+0x7c4>)
 8004f1a:	f7fc fb3f 	bl	800159c <LCD_PutInt>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	4413      	add	r3, r2
 8004f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f28:	4413      	add	r3, r2
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	b298      	uxth	r0, r3
 8004f30:	e020      	b.n	8004f74 <drawStatusMenu+0x800>
 8004f32:	bf00      	nop
 8004f34:	2001030a 	.word	0x2001030a
 8004f38:	08014878 	.word	0x08014878
 8004f3c:	08014440 	.word	0x08014440
 8004f40:	08014450 	.word	0x08014450
 8004f44:	08014460 	.word	0x08014460
 8004f48:	200000e8 	.word	0x200000e8
 8004f4c:	2002404c 	.word	0x2002404c
 8004f50:	447a0000 	.word	0x447a0000
 8004f54:	08014468 	.word	0x08014468
 8004f58:	08014470 	.word	0x08014470
 8004f5c:	200000b8 	.word	0x200000b8
 8004f60:	20010530 	.word	0x20010530
 8004f64:	08014478 	.word	0x08014478
 8004f68:	08014480 	.word	0x08014480
 8004f6c:	08014488 	.word	0x08014488
 8004f70:	08014490 	.word	0x08014490
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	b299      	uxth	r1, r3
 8004f78:	4ba3      	ldr	r3, [pc, #652]	; (8005208 <drawStatusMenu+0xa94>)
 8004f7a:	4aa4      	ldr	r2, [pc, #656]	; (800520c <drawStatusMenu+0xa98>)
 8004f7c:	f7fc fad6 	bl	800152c <LCD_PutStr>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	4413      	add	r3, r2
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	b298      	uxth	r0, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	b299      	uxth	r1, r3
 8004f92:	4b9f      	ldr	r3, [pc, #636]	; (8005210 <drawStatusMenu+0xa9c>)
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	4a9f      	ldr	r2, [pc, #636]	; (8005214 <drawStatusMenu+0xaa0>)
 8004f98:	5cd3      	ldrb	r3, [r2, r3]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b9a      	ldr	r3, [pc, #616]	; (8005208 <drawStatusMenu+0xa94>)
 8004f9e:	f7fc fafd 	bl	800159c <LCD_PutInt>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	4413      	add	r3, r2
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 8004fac:	230a      	movs	r3, #10
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	330f      	adds	r3, #15
 8004fb4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	b298      	uxth	r0, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	b299      	uxth	r1, r3
 8004fbe:	4b92      	ldr	r3, [pc, #584]	; (8005208 <drawStatusMenu+0xa94>)
 8004fc0:	4a95      	ldr	r2, [pc, #596]	; (8005218 <drawStatusMenu+0xaa4>)
 8004fc2:	f7fc fab3 	bl	800152c <LCD_PutStr>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	4413      	add	r3, r2
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8004fd0:	4b92      	ldr	r3, [pc, #584]	; (800521c <drawStatusMenu+0xaa8>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a92      	ldr	r2, [pc, #584]	; (8005220 <drawStatusMenu+0xaac>)
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	edd3 7a00 	vldr	s15, [r3]
 8004fde:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005224 <drawStatusMenu+0xab0>
 8004fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fea:	ee17 3a90 	vmov	r3, s15
 8004fee:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	b298      	uxth	r0, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	4b83      	ldr	r3, [pc, #524]	; (8005208 <drawStatusMenu+0xa94>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	f7fc fb32 	bl	8001668 <LCD_PutIntF>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	4413      	add	r3, r2
 800500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500e:	4413      	add	r3, r2
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	b298      	uxth	r0, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	b299      	uxth	r1, r3
 800501a:	4b7b      	ldr	r3, [pc, #492]	; (8005208 <drawStatusMenu+0xa94>)
 800501c:	4a82      	ldr	r2, [pc, #520]	; (8005228 <drawStatusMenu+0xab4>)
 800501e:	f7fc fa85 	bl	800152c <LCD_PutStr>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	4413      	add	r3, r2
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 800502c:	4b7b      	ldr	r3, [pc, #492]	; (800521c <drawStatusMenu+0xaa8>)
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	4a7b      	ldr	r2, [pc, #492]	; (8005220 <drawStatusMenu+0xaac>)
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005224 <drawStatusMenu+0xab0>
 800503e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005046:	ee17 3a90 	vmov	r3, s15
 800504a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	b298      	uxth	r0, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	b299      	uxth	r1, r3
 8005054:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <drawStatusMenu+0xa94>)
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2303      	movs	r3, #3
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	f7fc fb04 	bl	8001668 <LCD_PutIntF>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	4413      	add	r3, r2
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	b298      	uxth	r0, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	b299      	uxth	r1, r3
 8005076:	4b64      	ldr	r3, [pc, #400]	; (8005208 <drawStatusMenu+0xa94>)
 8005078:	4a6c      	ldr	r2, [pc, #432]	; (800522c <drawStatusMenu+0xab8>)
 800507a:	f7fc fa57 	bl	800152c <LCD_PutStr>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	4413      	add	r3, r2
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	b298      	uxth	r0, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	b299      	uxth	r1, r3
 8005090:	4b5f      	ldr	r3, [pc, #380]	; (8005210 <drawStatusMenu+0xa9c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a5f      	ldr	r2, [pc, #380]	; (8005214 <drawStatusMenu+0xaa0>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	461a      	mov	r2, r3
 800509a:	4b5b      	ldr	r3, [pc, #364]	; (8005208 <drawStatusMenu+0xa94>)
 800509c:	f7fc fa7e 	bl	800159c <LCD_PutInt>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	4413      	add	r3, r2
 80050a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050aa:	4413      	add	r3, r2
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	b298      	uxth	r0, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	b299      	uxth	r1, r3
 80050b6:	4b54      	ldr	r3, [pc, #336]	; (8005208 <drawStatusMenu+0xa94>)
 80050b8:	4a5d      	ldr	r2, [pc, #372]	; (8005230 <drawStatusMenu+0xabc>)
 80050ba:	f7fc fa37 	bl	800152c <LCD_PutStr>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	4413      	add	r3, r2
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	b298      	uxth	r0, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	b299      	uxth	r1, r3
 80050d0:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <drawStatusMenu+0xa9c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a4f      	ldr	r2, [pc, #316]	; (8005214 <drawStatusMenu+0xaa0>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	461a      	mov	r2, r3
 80050da:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <drawStatusMenu+0xa94>)
 80050dc:	f7fc fa5e 	bl	800159c <LCD_PutInt>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	4413      	add	r3, r2
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 80050ea:	230a      	movs	r3, #10
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	330f      	adds	r3, #15
 80050f2:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	b298      	uxth	r0, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	b299      	uxth	r1, r3
 80050fc:	4b42      	ldr	r3, [pc, #264]	; (8005208 <drawStatusMenu+0xa94>)
 80050fe:	4a4d      	ldr	r2, [pc, #308]	; (8005234 <drawStatusMenu+0xac0>)
 8005100:	f7fc fa14 	bl	800152c <LCD_PutStr>
 8005104:	4603      	mov	r3, r0
 8005106:	461a      	mov	r2, r3
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	4413      	add	r3, r2
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 800510e:	4b43      	ldr	r3, [pc, #268]	; (800521c <drawStatusMenu+0xaa8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4a43      	ldr	r2, [pc, #268]	; (8005220 <drawStatusMenu+0xaac>)
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	edd3 7a00 	vldr	s15, [r3]
 800511c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005224 <drawStatusMenu+0xab0>
 8005120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005128:	ee17 3a90 	vmov	r3, s15
 800512c:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	b298      	uxth	r0, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	b299      	uxth	r1, r3
 8005136:	4b34      	ldr	r3, [pc, #208]	; (8005208 <drawStatusMenu+0xa94>)
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2303      	movs	r3, #3
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	f7fc fa93 	bl	8001668 <LCD_PutIntF>
 8005142:	4603      	mov	r3, r0
 8005144:	461a      	mov	r2, r3
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	4413      	add	r3, r2
 800514a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800514c:	4413      	add	r3, r2
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8005150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005152:	b298      	uxth	r0, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	b299      	uxth	r1, r3
 8005158:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <drawStatusMenu+0xa94>)
 800515a:	4a37      	ldr	r2, [pc, #220]	; (8005238 <drawStatusMenu+0xac4>)
 800515c:	f7fc f9e6 	bl	800152c <LCD_PutStr>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	4413      	add	r3, r2
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <drawStatusMenu+0xaa8>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <drawStatusMenu+0xaac>)
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	edd3 7a00 	vldr	s15, [r3]
 8005178:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005224 <drawStatusMenu+0xab0>
 800517c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005184:	ee17 3a90 	vmov	r3, s15
 8005188:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	b298      	uxth	r0, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	b299      	uxth	r1, r3
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <drawStatusMenu+0xa94>)
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2303      	movs	r3, #3
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	f7fc fa65 	bl	8001668 <LCD_PutIntF>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	4413      	add	r3, r2
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	b298      	uxth	r0, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	b299      	uxth	r1, r3
 80051b4:	4b14      	ldr	r3, [pc, #80]	; (8005208 <drawStatusMenu+0xa94>)
 80051b6:	4a21      	ldr	r2, [pc, #132]	; (800523c <drawStatusMenu+0xac8>)
 80051b8:	f7fc f9b8 	bl	800152c <LCD_PutStr>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	4413      	add	r3, r2
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	b298      	uxth	r0, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	b299      	uxth	r1, r3
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <drawStatusMenu+0xa9c>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4a10      	ldr	r2, [pc, #64]	; (8005214 <drawStatusMenu+0xaa0>)
 80051d4:	5cd3      	ldrb	r3, [r2, r3]
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <drawStatusMenu+0xa94>)
 80051da:	f7fc f9df 	bl	800159c <LCD_PutInt>


		i=10;
 80051de:	230a      	movs	r3, #10
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	330f      	adds	r3, #15
 80051e6:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 80051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ea:	b298      	uxth	r0, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	b299      	uxth	r1, r3
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <drawStatusMenu+0xa94>)
 80051f2:	4a13      	ldr	r2, [pc, #76]	; (8005240 <drawStatusMenu+0xacc>)
 80051f4:	f7fc f99a 	bl	800152c <LCD_PutStr>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	4413      	add	r3, r2
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <drawStatusMenu+0xaa8>)
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	e01d      	b.n	8005244 <drawStatusMenu+0xad0>
 8005208:	08014878 	.word	0x08014878
 800520c:	08014498 	.word	0x08014498
 8005210:	200000b8 	.word	0x200000b8
 8005214:	20010530 	.word	0x20010530
 8005218:	080144a0 	.word	0x080144a0
 800521c:	200000e8 	.word	0x200000e8
 8005220:	2002404c 	.word	0x2002404c
 8005224:	447a0000 	.word	0x447a0000
 8005228:	080144a8 	.word	0x080144a8
 800522c:	080144b0 	.word	0x080144b0
 8005230:	080144b8 	.word	0x080144b8
 8005234:	080144c0 	.word	0x080144c0
 8005238:	080144c8 	.word	0x080144c8
 800523c:	080144d0 	.word	0x080144d0
 8005240:	080144d8 	.word	0x080144d8
 8005244:	4aa7      	ldr	r2, [pc, #668]	; (80054e4 <drawStatusMenu+0xd70>)
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	edd3 7a00 	vldr	s15, [r3]
 800524e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80054e8 <drawStatusMenu+0xd74>
 8005252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800525a:	ee17 3a90 	vmov	r3, s15
 800525e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	b298      	uxth	r0, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	b299      	uxth	r1, r3
 8005268:	4ba0      	ldr	r3, [pc, #640]	; (80054ec <drawStatusMenu+0xd78>)
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2303      	movs	r3, #3
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	f7fc f9fa 	bl	8001668 <LCD_PutIntF>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	4413      	add	r3, r2
 800527c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527e:	4413      	add	r3, r2
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	b298      	uxth	r0, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	b299      	uxth	r1, r3
 800528a:	4b98      	ldr	r3, [pc, #608]	; (80054ec <drawStatusMenu+0xd78>)
 800528c:	4a98      	ldr	r2, [pc, #608]	; (80054f0 <drawStatusMenu+0xd7c>)
 800528e:	f7fc f94d 	bl	800152c <LCD_PutStr>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	4413      	add	r3, r2
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 800529c:	4b95      	ldr	r3, [pc, #596]	; (80054f4 <drawStatusMenu+0xd80>)
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	4a90      	ldr	r2, [pc, #576]	; (80054e4 <drawStatusMenu+0xd70>)
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	edd3 7a00 	vldr	s15, [r3]
 80052aa:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80054e8 <drawStatusMenu+0xd74>
 80052ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b6:	ee17 3a90 	vmov	r3, s15
 80052ba:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	b298      	uxth	r0, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	b299      	uxth	r1, r3
 80052c4:	4b89      	ldr	r3, [pc, #548]	; (80054ec <drawStatusMenu+0xd78>)
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2303      	movs	r3, #3
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	f7fc f9cc 	bl	8001668 <LCD_PutIntF>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	4413      	add	r3, r2
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 80052de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e0:	b298      	uxth	r0, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	b299      	uxth	r1, r3
 80052e6:	4b81      	ldr	r3, [pc, #516]	; (80054ec <drawStatusMenu+0xd78>)
 80052e8:	4a83      	ldr	r2, [pc, #524]	; (80054f8 <drawStatusMenu+0xd84>)
 80052ea:	f7fc f91f 	bl	800152c <LCD_PutStr>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	4413      	add	r3, r2
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	b298      	uxth	r0, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	b299      	uxth	r1, r3
 8005300:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <drawStatusMenu+0xd88>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <drawStatusMenu+0xd8c>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	461a      	mov	r2, r3
 800530a:	4b78      	ldr	r3, [pc, #480]	; (80054ec <drawStatusMenu+0xd78>)
 800530c:	f7fc f946 	bl	800159c <LCD_PutInt>

		i=10;
 8005310:	230a      	movs	r3, #10
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	330f      	adds	r3, #15
 8005318:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	b298      	uxth	r0, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	b299      	uxth	r1, r3
 8005322:	4b72      	ldr	r3, [pc, #456]	; (80054ec <drawStatusMenu+0xd78>)
 8005324:	4a77      	ldr	r2, [pc, #476]	; (8005504 <drawStatusMenu+0xd90>)
 8005326:	f7fc f901 	bl	800152c <LCD_PutStr>
 800532a:	4603      	mov	r3, r0
 800532c:	461a      	mov	r2, r3
 800532e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005330:	4413      	add	r3, r2
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 8005334:	4b6f      	ldr	r3, [pc, #444]	; (80054f4 <drawStatusMenu+0xd80>)
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	4a6a      	ldr	r2, [pc, #424]	; (80054e4 <drawStatusMenu+0xd70>)
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	edd3 7a00 	vldr	s15, [r3]
 8005342:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80054e8 <drawStatusMenu+0xd74>
 8005346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800534a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800534e:	ee17 3a90 	vmov	r3, s15
 8005352:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	b298      	uxth	r0, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	b299      	uxth	r1, r3
 800535c:	4b63      	ldr	r3, [pc, #396]	; (80054ec <drawStatusMenu+0xd78>)
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2303      	movs	r3, #3
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	f7fc f980 	bl	8001668 <LCD_PutIntF>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	4413      	add	r3, r2
 8005370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005372:	4413      	add	r3, r2
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	b298      	uxth	r0, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	b299      	uxth	r1, r3
 800537e:	4b5b      	ldr	r3, [pc, #364]	; (80054ec <drawStatusMenu+0xd78>)
 8005380:	4a61      	ldr	r2, [pc, #388]	; (8005508 <drawStatusMenu+0xd94>)
 8005382:	f7fc f8d3 	bl	800152c <LCD_PutStr>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	4413      	add	r3, r2
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8005390:	4b58      	ldr	r3, [pc, #352]	; (80054f4 <drawStatusMenu+0xd80>)
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	4a53      	ldr	r2, [pc, #332]	; (80054e4 <drawStatusMenu+0xd70>)
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80054e8 <drawStatusMenu+0xd74>
 80053a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053aa:	ee17 3a90 	vmov	r3, s15
 80053ae:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	b298      	uxth	r0, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	b299      	uxth	r1, r3
 80053b8:	4b4c      	ldr	r3, [pc, #304]	; (80054ec <drawStatusMenu+0xd78>)
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2303      	movs	r3, #3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	f7fc f952 	bl	8001668 <LCD_PutIntF>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	4413      	add	r3, r2
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	b298      	uxth	r0, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	b299      	uxth	r1, r3
 80053da:	4b44      	ldr	r3, [pc, #272]	; (80054ec <drawStatusMenu+0xd78>)
 80053dc:	4a4b      	ldr	r2, [pc, #300]	; (800550c <drawStatusMenu+0xd98>)
 80053de:	f7fc f8a5 	bl	800152c <LCD_PutStr>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	4413      	add	r3, r2
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	b298      	uxth	r0, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	b299      	uxth	r1, r3
 80053f4:	4b41      	ldr	r3, [pc, #260]	; (80054fc <drawStatusMenu+0xd88>)
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	4a41      	ldr	r2, [pc, #260]	; (8005500 <drawStatusMenu+0xd8c>)
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	461a      	mov	r2, r3
 80053fe:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <drawStatusMenu+0xd78>)
 8005400:	f7fc f8cc 	bl	800159c <LCD_PutInt>

		i=10;
 8005404:	230a      	movs	r3, #10
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	330f      	adds	r3, #15
 800540c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	b298      	uxth	r0, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	b299      	uxth	r1, r3
 8005416:	4b35      	ldr	r3, [pc, #212]	; (80054ec <drawStatusMenu+0xd78>)
 8005418:	4a3d      	ldr	r2, [pc, #244]	; (8005510 <drawStatusMenu+0xd9c>)
 800541a:	f7fc f887 	bl	800152c <LCD_PutStr>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	4413      	add	r3, r2
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 8005428:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <drawStatusMenu+0xd80>)
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	4a2d      	ldr	r2, [pc, #180]	; (80054e4 <drawStatusMenu+0xd70>)
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80054e8 <drawStatusMenu+0xd74>
 800543a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800543e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005442:	ee17 3a90 	vmov	r3, s15
 8005446:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	b298      	uxth	r0, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	b299      	uxth	r1, r3
 8005450:	4b26      	ldr	r3, [pc, #152]	; (80054ec <drawStatusMenu+0xd78>)
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2303      	movs	r3, #3
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	f7fc f906 	bl	8001668 <LCD_PutIntF>
 800545c:	4603      	mov	r3, r0
 800545e:	461a      	mov	r2, r3
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	4413      	add	r3, r2
 8005464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005466:	4413      	add	r3, r2
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	b298      	uxth	r0, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	b299      	uxth	r1, r3
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <drawStatusMenu+0xd78>)
 8005474:	4a27      	ldr	r2, [pc, #156]	; (8005514 <drawStatusMenu+0xda0>)
 8005476:	f7fc f859 	bl	800152c <LCD_PutStr>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	4413      	add	r3, r2
 8005482:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <drawStatusMenu+0xd80>)
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <drawStatusMenu+0xd70>)
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	edd3 7a00 	vldr	s15, [r3]
 8005492:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80054e8 <drawStatusMenu+0xd74>
 8005496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800549a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800549e:	ee17 3a90 	vmov	r3, s15
 80054a2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	b298      	uxth	r0, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	b299      	uxth	r1, r3
 80054ac:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <drawStatusMenu+0xd78>)
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	2303      	movs	r3, #3
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	f7fc f8d8 	bl	8001668 <LCD_PutIntF>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	4413      	add	r3, r2
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	b298      	uxth	r0, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	b299      	uxth	r1, r3
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <drawStatusMenu+0xd78>)
 80054d0:	4a11      	ldr	r2, [pc, #68]	; (8005518 <drawStatusMenu+0xda4>)
 80054d2:	f7fc f82b 	bl	800152c <LCD_PutStr>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054dc:	4413      	add	r3, r2
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	e01c      	b.n	800551c <drawStatusMenu+0xda8>
 80054e2:	bf00      	nop
 80054e4:	2002404c 	.word	0x2002404c
 80054e8:	447a0000 	.word	0x447a0000
 80054ec:	08014878 	.word	0x08014878
 80054f0:	080144e0 	.word	0x080144e0
 80054f4:	200000e8 	.word	0x200000e8
 80054f8:	080144e8 	.word	0x080144e8
 80054fc:	200000b8 	.word	0x200000b8
 8005500:	20010530 	.word	0x20010530
 8005504:	080144f0 	.word	0x080144f0
 8005508:	080144f8 	.word	0x080144f8
 800550c:	08014500 	.word	0x08014500
 8005510:	08014508 	.word	0x08014508
 8005514:	08014510 	.word	0x08014510
 8005518:	08014518 	.word	0x08014518
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	b298      	uxth	r0, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	b299      	uxth	r1, r3
 8005524:	4b9b      	ldr	r3, [pc, #620]	; (8005794 <drawStatusMenu+0x1020>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	4a9b      	ldr	r2, [pc, #620]	; (8005798 <drawStatusMenu+0x1024>)
 800552a:	5cd3      	ldrb	r3, [r2, r3]
 800552c:	461a      	mov	r2, r3
 800552e:	4b9b      	ldr	r3, [pc, #620]	; (800579c <drawStatusMenu+0x1028>)
 8005530:	f7fc f834 	bl	800159c <LCD_PutInt>

		i=10;
 8005534:	230a      	movs	r3, #10
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	330f      	adds	r3, #15
 800553c:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	b298      	uxth	r0, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	b299      	uxth	r1, r3
 8005546:	4b95      	ldr	r3, [pc, #596]	; (800579c <drawStatusMenu+0x1028>)
 8005548:	4a95      	ldr	r2, [pc, #596]	; (80057a0 <drawStatusMenu+0x102c>)
 800554a:	f7fb ffef 	bl	800152c <LCD_PutStr>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	4413      	add	r3, r2
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 8005558:	4b92      	ldr	r3, [pc, #584]	; (80057a4 <drawStatusMenu+0x1030>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	4a92      	ldr	r2, [pc, #584]	; (80057a8 <drawStatusMenu+0x1034>)
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	edd3 7a00 	vldr	s15, [r3]
 8005566:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80057ac <drawStatusMenu+0x1038>
 800556a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005572:	ee17 3a90 	vmov	r3, s15
 8005576:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557a:	b298      	uxth	r0, r3
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	b299      	uxth	r1, r3
 8005580:	4b86      	ldr	r3, [pc, #536]	; (800579c <drawStatusMenu+0x1028>)
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2303      	movs	r3, #3
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	f7fc f86e 	bl	8001668 <LCD_PutIntF>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	4413      	add	r3, r2
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	b298      	uxth	r0, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	b299      	uxth	r1, r3
 80055a2:	4b7e      	ldr	r3, [pc, #504]	; (800579c <drawStatusMenu+0x1028>)
 80055a4:	4a82      	ldr	r2, [pc, #520]	; (80057b0 <drawStatusMenu+0x103c>)
 80055a6:	f7fb ffc1 	bl	800152c <LCD_PutStr>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	4413      	add	r3, r2
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	b298      	uxth	r0, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	b299      	uxth	r1, r3
 80055bc:	4b75      	ldr	r3, [pc, #468]	; (8005794 <drawStatusMenu+0x1020>)
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	4a75      	ldr	r2, [pc, #468]	; (8005798 <drawStatusMenu+0x1024>)
 80055c2:	5cd3      	ldrb	r3, [r2, r3]
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b75      	ldr	r3, [pc, #468]	; (800579c <drawStatusMenu+0x1028>)
 80055c8:	f7fb ffe8 	bl	800159c <LCD_PutInt>

		i=10;
 80055cc:	230a      	movs	r3, #10
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	330f      	adds	r3, #15
 80055d4:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	b298      	uxth	r0, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	b299      	uxth	r1, r3
 80055de:	4b6f      	ldr	r3, [pc, #444]	; (800579c <drawStatusMenu+0x1028>)
 80055e0:	4a74      	ldr	r2, [pc, #464]	; (80057b4 <drawStatusMenu+0x1040>)
 80055e2:	f7fb ffa3 	bl	800152c <LCD_PutStr>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	4413      	add	r3, r2
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 80055f0:	4b6c      	ldr	r3, [pc, #432]	; (80057a4 <drawStatusMenu+0x1030>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	4a6c      	ldr	r2, [pc, #432]	; (80057a8 <drawStatusMenu+0x1034>)
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	edd3 7a00 	vldr	s15, [r3]
 80055fe:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80057ac <drawStatusMenu+0x1038>
 8005602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800560a:	ee17 3a90 	vmov	r3, s15
 800560e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	b298      	uxth	r0, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	b299      	uxth	r1, r3
 8005618:	4b60      	ldr	r3, [pc, #384]	; (800579c <drawStatusMenu+0x1028>)
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2303      	movs	r3, #3
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	f7fc f822 	bl	8001668 <LCD_PutIntF>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	4413      	add	r3, r2
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	b298      	uxth	r0, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	b299      	uxth	r1, r3
 800563a:	4b58      	ldr	r3, [pc, #352]	; (800579c <drawStatusMenu+0x1028>)
 800563c:	4a5e      	ldr	r2, [pc, #376]	; (80057b8 <drawStatusMenu+0x1044>)
 800563e:	f7fb ff75 	bl	800152c <LCD_PutStr>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	4413      	add	r3, r2
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	b298      	uxth	r0, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	b299      	uxth	r1, r3
 8005654:	4b4f      	ldr	r3, [pc, #316]	; (8005794 <drawStatusMenu+0x1020>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4a4f      	ldr	r2, [pc, #316]	; (8005798 <drawStatusMenu+0x1024>)
 800565a:	5cd3      	ldrb	r3, [r2, r3]
 800565c:	461a      	mov	r2, r3
 800565e:	4b4f      	ldr	r3, [pc, #316]	; (800579c <drawStatusMenu+0x1028>)
 8005660:	f7fb ff9c 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8005664:	2341      	movs	r3, #65	; 0x41
 8005666:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b299      	uxth	r1, r3
 8005670:	4b52      	ldr	r3, [pc, #328]	; (80057bc <drawStatusMenu+0x1048>)
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	3b02      	subs	r3, #2
 8005676:	b29a      	uxth	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	b29b      	uxth	r3, r3
 800567c:	3301      	adds	r3, #1
 800567e:	b29b      	uxth	r3, r3
 8005680:	2002      	movs	r0, #2
 8005682:	f7fb fc07 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8005686:	23e6      	movs	r3, #230	; 0xe6
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b03      	subs	r3, #3
 8005690:	b298      	uxth	r0, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	b299      	uxth	r1, r3
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	b29b      	uxth	r3, r3
 800569a:	3303      	adds	r3, #3
 800569c:	b29a      	uxth	r2, r3
 800569e:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <drawStatusMenu+0x104c>)
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	3b02      	subs	r3, #2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f7fb fbf5 	bl	8000e94 <LCD_FillRect>

		i=155;
 80056aa:	239b      	movs	r3, #155	; 0x9b
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
		j=35;
 80056ae:	2323      	movs	r3, #35	; 0x23
 80056b0:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	b298      	uxth	r0, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	b299      	uxth	r1, r3
 80056ba:	4b38      	ldr	r3, [pc, #224]	; (800579c <drawStatusMenu+0x1028>)
 80056bc:	4a41      	ldr	r2, [pc, #260]	; (80057c4 <drawStatusMenu+0x1050>)
 80056be:	f7fb ff35 	bl	800152c <LCD_PutStr>
		i=155;
 80056c2:	239b      	movs	r3, #155	; 0x9b
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
		j=50;
 80056c6:	2332      	movs	r3, #50	; 0x32
 80056c8:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	b298      	uxth	r0, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	b299      	uxth	r1, r3
 80056d2:	4b32      	ldr	r3, [pc, #200]	; (800579c <drawStatusMenu+0x1028>)
 80056d4:	4a3c      	ldr	r2, [pc, #240]	; (80057c8 <drawStatusMenu+0x1054>)
 80056d6:	f7fb ff29 	bl	800152c <LCD_PutStr>
 80056da:	4603      	mov	r3, r0
 80056dc:	3308      	adds	r3, #8
 80056de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e0:	4413      	add	r3, r2
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
		j=28;
 80056e4:	231c      	movs	r3, #28
 80056e6:	617b      	str	r3, [r7, #20]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	b298      	uxth	r0, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	b299      	uxth	r1, r3
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <drawStatusMenu+0x1058>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2302      	movs	r3, #2
 80056f6:	f640 729f 	movw	r2, #3999	; 0xf9f
 80056fa:	f7fb ffb5 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 80056fe:	23c8      	movs	r3, #200	; 0xc8
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8005702:	23dc      	movs	r3, #220	; 0xdc
 8005704:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	b298      	uxth	r0, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	b299      	uxth	r1, r3
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	b29a      	uxth	r2, r3
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f7fc f859 	bl	80017cc <drawUpDownArrow>
		j=15;
 800571a:	230f      	movs	r3, #15
 800571c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	b298      	uxth	r0, r3
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	b299      	uxth	r1, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	b29a      	uxth	r2, r3
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f7fc f84d 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005732:	23b4      	movs	r3, #180	; 0xb4
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	b298      	uxth	r0, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	b299      	uxth	r1, r3
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	b29a      	uxth	r2, r3
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f7fc f841 	bl	80017cc <drawUpDownArrow>
		j=220;
 800574a:	23dc      	movs	r3, #220	; 0xdc
 800574c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	b298      	uxth	r0, r3
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	b299      	uxth	r1, r3
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	b29a      	uxth	r2, r3
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f7fc f835 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005762:	23dc      	movs	r3, #220	; 0xdc
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	b298      	uxth	r0, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	b299      	uxth	r1, r3
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	b29a      	uxth	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f7fc f829 	bl	80017cc <drawUpDownArrow>
		j=15;
 800577a:	230f      	movs	r3, #15
 800577c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	b298      	uxth	r0, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	b299      	uxth	r1, r3
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	b29a      	uxth	r2, r3
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f7fc f81d 	bl	80017cc <drawUpDownArrow>
		break;
 8005792:	e101      	b.n	8005998 <drawStatusMenu+0x1224>
 8005794:	200000b8 	.word	0x200000b8
 8005798:	20010530 	.word	0x20010530
 800579c:	08014878 	.word	0x08014878
 80057a0:	08014520 	.word	0x08014520
 80057a4:	200000e8 	.word	0x200000e8
 80057a8:	2002404c 	.word	0x2002404c
 80057ac:	447a0000 	.word	0x447a0000
 80057b0:	08014528 	.word	0x08014528
 80057b4:	08014530 	.word	0x08014530
 80057b8:	08014538 	.word	0x08014538
 80057bc:	2001030a 	.word	0x2001030a
 80057c0:	2001030c 	.word	0x2001030c
 80057c4:	08014540 	.word	0x08014540
 80057c8:	08014550 	.word	0x08014550
 80057cc:	08014c38 	.word	0x08014c38
	}
	case 3:{
		i=35;
 80057d0:	2323      	movs	r3, #35	; 0x23
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
		j=75;
 80057d4:	234b      	movs	r3, #75	; 0x4b
 80057d6:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b02      	subs	r3, #2
 80057de:	b299      	uxth	r1, r3
 80057e0:	4b70      	ldr	r3, [pc, #448]	; (80059a4 <drawStatusMenu+0x1230>)
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	3b02      	subs	r3, #2
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3302      	adds	r3, #2
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2002      	movs	r0, #2
 80057f2:	f7fb fb4f 	bl	8000e94 <LCD_FillRect>
		j=55;
 80057f6:	2337      	movs	r3, #55	; 0x37
 80057f8:	617b      	str	r3, [r7, #20]
		i=150;
 80057fa:	2396      	movs	r3, #150	; 0x96
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	b298      	uxth	r0, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	b299      	uxth	r1, r3
 8005806:	4b68      	ldr	r3, [pc, #416]	; (80059a8 <drawStatusMenu+0x1234>)
 8005808:	4a68      	ldr	r2, [pc, #416]	; (80059ac <drawStatusMenu+0x1238>)
 800580a:	f7fb fe8f 	bl	800152c <LCD_PutStr>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	4413      	add	r3, r2
 8005816:	637b      	str	r3, [r7, #52]	; 0x34

		i=40;
 8005818:	2328      	movs	r3, #40	; 0x28
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
		j=85;
 800581c:	2355      	movs	r3, #85	; 0x55
 800581e:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	b298      	uxth	r0, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	b299      	uxth	r1, r3
 8005828:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <drawStatusMenu+0x1234>)
 800582a:	4a61      	ldr	r2, [pc, #388]	; (80059b0 <drawStatusMenu+0x123c>)
 800582c:	f7fb fe7e 	bl	800152c <LCD_PutStr>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	4413      	add	r3, r2
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	b298      	uxth	r0, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	b299      	uxth	r1, r3
 8005842:	4b59      	ldr	r3, [pc, #356]	; (80059a8 <drawStatusMenu+0x1234>)
 8005844:	4a5b      	ldr	r2, [pc, #364]	; (80059b4 <drawStatusMenu+0x1240>)
 8005846:	f7fb fe71 	bl	800152c <LCD_PutStr>

		i=40;
 800584a:	2328      	movs	r3, #40	; 0x28
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	3319      	adds	r3, #25
 8005852:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005856:	b298      	uxth	r0, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	b299      	uxth	r1, r3
 800585c:	4b52      	ldr	r3, [pc, #328]	; (80059a8 <drawStatusMenu+0x1234>)
 800585e:	4a56      	ldr	r2, [pc, #344]	; (80059b8 <drawStatusMenu+0x1244>)
 8005860:	f7fb fe64 	bl	800152c <LCD_PutStr>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	4413      	add	r3, r2
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
		//ping the LED Driver
		i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 800586e:	4b53      	ldr	r3, [pc, #332]	; (80059bc <drawStatusMenu+0x1248>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	4b51      	ldr	r3, [pc, #324]	; (80059bc <drawStatusMenu+0x1248>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	2301      	movs	r3, #1
 800587c:	2200      	movs	r2, #0
 800587e:	21f0      	movs	r1, #240	; 0xf0
 8005880:	f7fd fbfa 	bl	8003078 <writeI2CRegister>
 8005884:	6138      	str	r0, [r7, #16]

		if(i2cCheck){
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d008      	beq.n	800589e <drawStatusMenu+0x112a>
			LCD_PutStr(i, j, "Present", fnt7x10);
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	b298      	uxth	r0, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	b299      	uxth	r1, r3
 8005894:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <drawStatusMenu+0x1234>)
 8005896:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <drawStatusMenu+0x124c>)
 8005898:	f7fb fe48 	bl	800152c <LCD_PutStr>
 800589c:	e007      	b.n	80058ae <drawStatusMenu+0x113a>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	b298      	uxth	r0, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	b299      	uxth	r1, r3
 80058a6:	4b40      	ldr	r3, [pc, #256]	; (80059a8 <drawStatusMenu+0x1234>)
 80058a8:	4a46      	ldr	r2, [pc, #280]	; (80059c4 <drawStatusMenu+0x1250>)
 80058aa:	f7fb fe3f 	bl	800152c <LCD_PutStr>
		}

		i=40;
 80058ae:	2328      	movs	r3, #40	; 0x28
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	3319      	adds	r3, #25
 80058b6:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	b298      	uxth	r0, r3
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	b299      	uxth	r1, r3
 80058c0:	4b39      	ldr	r3, [pc, #228]	; (80059a8 <drawStatusMenu+0x1234>)
 80058c2:	4a41      	ldr	r2, [pc, #260]	; (80059c8 <drawStatusMenu+0x1254>)
 80058c4:	f7fb fe32 	bl	800152c <LCD_PutStr>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	4413      	add	r3, r2
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	b298      	uxth	r0, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	b299      	uxth	r1, r3
 80058da:	4b33      	ldr	r3, [pc, #204]	; (80059a8 <drawStatusMenu+0x1234>)
 80058dc:	4a3b      	ldr	r2, [pc, #236]	; (80059cc <drawStatusMenu+0x1258>)
 80058de:	f7fb fe25 	bl	800152c <LCD_PutStr>

		i=40;
 80058e2:	2328      	movs	r3, #40	; 0x28
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	3319      	adds	r3, #25
 80058ea:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	b298      	uxth	r0, r3
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	b299      	uxth	r1, r3
 80058f4:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <drawStatusMenu+0x1234>)
 80058f6:	4a36      	ldr	r2, [pc, #216]	; (80059d0 <drawStatusMenu+0x125c>)
 80058f8:	f7fb fe18 	bl	800152c <LCD_PutStr>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	4413      	add	r3, r2
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8005906:	f001 fd45 	bl	8007394 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <drawStatusMenu+0x1260>)
 800590e:	fba3 2302 	umull	r2, r3, r3, r2
 8005912:	099b      	lsrs	r3, r3, #6
 8005914:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	b298      	uxth	r0, r3
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	b299      	uxth	r1, r3
 800591e:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <drawStatusMenu+0x1234>)
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f7fb fe3b 	bl	800159c <LCD_PutInt>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	4413      	add	r3, r2
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	b298      	uxth	r0, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	b299      	uxth	r1, r3
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <drawStatusMenu+0x1234>)
 800593a:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <drawStatusMenu+0x1264>)
 800593c:	f7fb fdf6 	bl	800152c <LCD_PutStr>
 8005940:	4603      	mov	r3, r0
 8005942:	461a      	mov	r2, r3
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	4413      	add	r3, r2
 8005948:	637b      	str	r3, [r7, #52]	; 0x34

		i=200;
 800594a:	23c8      	movs	r3, #200	; 0xc8
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
		j=15;
 800594e:	230f      	movs	r3, #15
 8005950:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	b298      	uxth	r0, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	b299      	uxth	r1, r3
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	b29a      	uxth	r2, r3
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f7fb ff33 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005966:	23b4      	movs	r3, #180	; 0xb4
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	b298      	uxth	r0, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	b299      	uxth	r1, r3
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	b29a      	uxth	r2, r3
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f7fb ff27 	bl	80017cc <drawUpDownArrow>
		i=220;
 800597e:	23dc      	movs	r3, #220	; 0xdc
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	b298      	uxth	r0, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	b299      	uxth	r1, r3
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	b29a      	uxth	r2, r3
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f7fb ff1b 	bl	80017cc <drawUpDownArrow>

		break;
 8005996:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005998:	f7fa fe9e 	bl	80006d8 <SMLCD_Flush>



}
 800599c:	bf00      	nop
 800599e:	3738      	adds	r7, #56	; 0x38
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2001030a 	.word	0x2001030a
 80059a8:	08014878 	.word	0x08014878
 80059ac:	08014560 	.word	0x08014560
 80059b0:	08014570 	.word	0x08014570
 80059b4:	08014578 	.word	0x08014578
 80059b8:	08014598 	.word	0x08014598
 80059bc:	200000a8 	.word	0x200000a8
 80059c0:	080145a8 	.word	0x080145a8
 80059c4:	080145b0 	.word	0x080145b0
 80059c8:	080145c0 	.word	0x080145c0
 80059cc:	080145cc 	.word	0x080145cc
 80059d0:	080145e4 	.word	0x080145e4
 80059d4:	10624dd3 	.word	0x10624dd3
 80059d8:	080145f8 	.word	0x080145f8

080059dc <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 80059e4:	2314      	movs	r3, #20
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
	int indentAlignment=50;
 80059e8:	2332      	movs	r3, #50	; 0x32
 80059ea:	623b      	str	r3, [r7, #32]
	int arrowUp = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
	int arrowDown=1;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
	int arrowSize=3;
 80059f4:	2303      	movs	r3, #3
 80059f6:	617b      	str	r3, [r7, #20]
	int otherBoardAlignment = 220;
 80059f8:	23dc      	movs	r3, #220	; 0xdc
 80059fa:	613b      	str	r3, [r7, #16]
	previousMenu=0;
 80059fc:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <drawSystemInfoMenu+0x150>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005a02:	f7fa ffb3 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8005a06:	4b4a      	ldr	r3, [pc, #296]	; (8005b30 <drawSystemInfoMenu+0x154>)
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	4b49      	ldr	r3, [pc, #292]	; (8005b30 <drawSystemInfoMenu+0x154>)
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	4b47      	ldr	r3, [pc, #284]	; (8005b30 <drawSystemInfoMenu+0x154>)
 8005a14:	789b      	ldrb	r3, [r3, #2]
 8005a16:	4013      	ands	r3, r2
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <drawSystemInfoMenu+0x70>
 		  adcValuePointer = getADCValues();
 8005a1e:	f7fd fd5f 	bl	80034e0 <getADCValues>
 8005a22:	4603      	mov	r3, r0
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005a26:	2300      	movs	r3, #0
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2a:	e00c      	b.n	8005a46 <drawSystemInfoMenu+0x6a>
	  		  displayAdcValues[i]=*adcValuePointer;
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4940      	ldr	r1, [pc, #256]	; (8005b34 <drawSystemInfoMenu+0x158>)
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	3301      	adds	r3, #1
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b13      	cmp	r3, #19
 8005a4a:	ddef      	ble.n	8005a2c <drawSystemInfoMenu+0x50>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8005a4c:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <drawSystemInfoMenu+0x15c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005a52:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <drawSystemInfoMenu+0x160>)
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	4b39      	ldr	r3, [pc, #228]	; (8005b40 <drawSystemInfoMenu+0x164>)
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2100      	movs	r1, #0
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fb f9d3 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8005a6a:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <drawSystemInfoMenu+0x160>)
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	3b03      	subs	r3, #3
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <drawSystemInfoMenu+0x164>)
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	3b03      	subs	r3, #3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	2002      	movs	r0, #2
 8005a7e:	f7fb f9c7 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005a82:	230a      	movs	r3, #10
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	j  = 10;
 8005a86:	230a      	movs	r3, #10
 8005a88:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	b298      	uxth	r0, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	b299      	uxth	r1, r3
 8005a92:	4b2c      	ldr	r3, [pc, #176]	; (8005b44 <drawSystemInfoMenu+0x168>)
 8005a94:	4a2c      	ldr	r2, [pc, #176]	; (8005b48 <drawSystemInfoMenu+0x16c>)
 8005a96:	f7fb fd49 	bl	800152c <LCD_PutStr>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	4413      	add	r3, r2
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	b298      	uxth	r0, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	b299      	uxth	r1, r3
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <drawSystemInfoMenu+0x168>)
 8005aae:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <drawSystemInfoMenu+0x170>)
 8005ab0:	f7fb fd3c 	bl	800152c <LCD_PutStr>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	4413      	add	r3, r2
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	i+=170;
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	33aa      	adds	r3, #170	; 0xaa
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	b298      	uxth	r0, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	b299      	uxth	r1, r3
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <drawSystemInfoMenu+0x168>)
 8005ace:	4a20      	ldr	r2, [pc, #128]	; (8005b50 <drawSystemInfoMenu+0x174>)
 8005ad0:	f7fb fd2c 	bl	800152c <LCD_PutStr>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	4413      	add	r3, r2
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	b298      	uxth	r0, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	b299      	uxth	r1, r3
 8005ae6:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <drawSystemInfoMenu+0x168>)
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <drawSystemInfoMenu+0x178>)
 8005aea:	f7fb fd1f 	bl	800152c <LCD_PutStr>
 8005aee:	4603      	mov	r3, r0
 8005af0:	461a      	mov	r2, r3
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	4413      	add	r3, r2
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
	i  = 135;
 8005af8:	2387      	movs	r3, #135	; 0x87
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
	j += 12;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	330c      	adds	r3, #12
 8005b00:	60fb      	str	r3, [r7, #12]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	b299      	uxth	r1, r3
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <drawSystemInfoMenu+0x160>)
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	3b02      	subs	r3, #2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3303      	adds	r3, #3
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2002      	movs	r0, #2
 8005b18:	f7fb f9bc 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d01a      	beq.n	8005b58 <drawSystemInfoMenu+0x17c>
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	f000 812e 	beq.w	8005d84 <drawSystemInfoMenu+0x3a8>
 8005b28:	e261      	b.n	8005fee <drawSystemInfoMenu+0x612>
 8005b2a:	bf00      	nop
 8005b2c:	200032a0 	.word	0x200032a0
 8005b30:	20010a80 	.word	0x20010a80
 8005b34:	2002404c 	.word	0x2002404c
 8005b38:	20010308 	.word	0x20010308
 8005b3c:	2001030a 	.word	0x2001030a
 8005b40:	2001030c 	.word	0x2001030c
 8005b44:	08014878 	.word	0x08014878
 8005b48:	080142e8 	.word	0x080142e8
 8005b4c:	080142f0 	.word	0x080142f0
 8005b50:	080142fc 	.word	0x080142fc
 8005b54:	08014304 	.word	0x08014304
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005b58:	232d      	movs	r3, #45	; 0x2d
 8005b5a:	60fb      	str	r3, [r7, #12]
		i=42;
 8005b5c:	232a      	movs	r3, #42	; 0x2a
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	b298      	uxth	r0, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	b299      	uxth	r1, r3
 8005b68:	4b77      	ldr	r3, [pc, #476]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005b6a:	4a78      	ldr	r2, [pc, #480]	; (8005d4c <drawSystemInfoMenu+0x370>)
 8005b6c:	f7fb fcde 	bl	800152c <LCD_PutStr>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	4413      	add	r3, r2
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	b298      	uxth	r0, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	b299      	uxth	r1, r3
 8005b82:	4b71      	ldr	r3, [pc, #452]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005b84:	4a72      	ldr	r2, [pc, #456]	; (8005d50 <drawSystemInfoMenu+0x374>)
 8005b86:	f7fb fcd1 	bl	800152c <LCD_PutStr>

		j+=15;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	330f      	adds	r3, #15
 8005b8e:	60fb      	str	r3, [r7, #12]
		i=42;
 8005b90:	232a      	movs	r3, #42	; 0x2a
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	b298      	uxth	r0, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	b299      	uxth	r1, r3
 8005b9c:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005b9e:	4a6d      	ldr	r2, [pc, #436]	; (8005d54 <drawSystemInfoMenu+0x378>)
 8005ba0:	f7fb fcc4 	bl	800152c <LCD_PutStr>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	4413      	add	r3, r2
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	b298      	uxth	r0, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	b299      	uxth	r1, r3
 8005bb6:	4b64      	ldr	r3, [pc, #400]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005bb8:	4a67      	ldr	r2, [pc, #412]	; (8005d58 <drawSystemInfoMenu+0x37c>)
 8005bba:	f7fb fcb7 	bl	800152c <LCD_PutStr>

		j+=30;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	331e      	adds	r3, #30
 8005bc2:	60fb      	str	r3, [r7, #12]
		i=10;
 8005bc4:	230a      	movs	r3, #10
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	b298      	uxth	r0, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	4b5d      	ldr	r3, [pc, #372]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005bd2:	4a62      	ldr	r2, [pc, #392]	; (8005d5c <drawSystemInfoMenu+0x380>)
 8005bd4:	f7fb fcaa 	bl	800152c <LCD_PutStr>

		j+=15;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	330f      	adds	r3, #15
 8005bdc:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	b298      	uxth	r0, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	b299      	uxth	r1, r3
 8005bea:	4b57      	ldr	r3, [pc, #348]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005bec:	4a58      	ldr	r2, [pc, #352]	; (8005d50 <drawSystemInfoMenu+0x374>)
 8005bee:	f7fb fc9d 	bl	800152c <LCD_PutStr>

		j+=15;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	330f      	adds	r3, #15
 8005bf6:	60fb      	str	r3, [r7, #12]
		i=10;
 8005bf8:	230a      	movs	r3, #10
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	b298      	uxth	r0, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	b299      	uxth	r1, r3
 8005c04:	4b50      	ldr	r3, [pc, #320]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005c06:	4a56      	ldr	r2, [pc, #344]	; (8005d60 <drawSystemInfoMenu+0x384>)
 8005c08:	f7fb fc90 	bl	800152c <LCD_PutStr>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	4413      	add	r3, r2
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
		i=otherBoardAlignment;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	b298      	uxth	r0, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	b299      	uxth	r1, r3
 8005c22:	4b49      	ldr	r3, [pc, #292]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005c24:	4a4f      	ldr	r2, [pc, #316]	; (8005d64 <drawSystemInfoMenu+0x388>)
 8005c26:	f7fb fc81 	bl	800152c <LCD_PutStr>

		j+=15;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	330f      	adds	r3, #15
 8005c2e:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	b298      	uxth	r0, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	b299      	uxth	r1, r3
 8005c3c:	4b42      	ldr	r3, [pc, #264]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005c3e:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <drawSystemInfoMenu+0x38c>)
 8005c40:	f7fb fc74 	bl	800152c <LCD_PutStr>
 8005c44:	4603      	mov	r3, r0
 8005c46:	461a      	mov	r2, r3
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	4413      	add	r3, r2
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Trident Fab A", fnt7x10);
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	b298      	uxth	r0, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	b299      	uxth	r1, r3
 8005c56:	4b3c      	ldr	r3, [pc, #240]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005c58:	4a44      	ldr	r2, [pc, #272]	; (8005d6c <drawSystemInfoMenu+0x390>)
 8005c5a:	f7fb fc67 	bl	800152c <LCD_PutStr>
		i=otherBoardAlignment+indentAlignment;
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	4413      	add	r3, r2
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	b298      	uxth	r0, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	b299      	uxth	r1, r3
 8005c6e:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005c70:	4a3f      	ldr	r2, [pc, #252]	; (8005d70 <drawSystemInfoMenu+0x394>)
 8005c72:	f7fb fc5b 	bl	800152c <LCD_PutStr>
 8005c76:	4603      	mov	r3, r0
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	4413      	add	r3, r2
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Not Here", fnt7x10);
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	b298      	uxth	r0, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	b299      	uxth	r1, r3
 8005c88:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <drawSystemInfoMenu+0x398>)
 8005c8c:	f7fb fc4e 	bl	800152c <LCD_PutStr>

		j+=15;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	330f      	adds	r3, #15
 8005c94:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	b298      	uxth	r0, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	b299      	uxth	r1, r3
 8005ca2:	4b29      	ldr	r3, [pc, #164]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005ca4:	4a34      	ldr	r2, [pc, #208]	; (8005d78 <drawSystemInfoMenu+0x39c>)
 8005ca6:	f7fb fc41 	bl	800152c <LCD_PutStr>
 8005caa:	4603      	mov	r3, r0
 8005cac:	461a      	mov	r2, r3
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	4413      	add	r3, r2
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	b298      	uxth	r0, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	b299      	uxth	r1, r3
 8005cbc:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	; (8005d7c <drawSystemInfoMenu+0x3a0>)
 8005cc0:	f7fb fc34 	bl	800152c <LCD_PutStr>

		j+=15;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	330f      	adds	r3, #15
 8005cc8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	b298      	uxth	r0, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	b299      	uxth	r1, r3
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <drawSystemInfoMenu+0x3a4>)
 8005cda:	f7fb fc27 	bl	800152c <LCD_PutStr>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	4413      	add	r3, r2
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	b298      	uxth	r0, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <drawSystemInfoMenu+0x36c>)
 8005cf2:	4a22      	ldr	r2, [pc, #136]	; (8005d7c <drawSystemInfoMenu+0x3a0>)
 8005cf4:	f7fb fc1a 	bl	800152c <LCD_PutStr>

		i=200;
 8005cf8:	23c8      	movs	r3, #200	; 0xc8
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=220;
 8005cfc:	23dc      	movs	r3, #220	; 0xdc
 8005cfe:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	b298      	uxth	r0, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	b299      	uxth	r1, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f7fb fd5c 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005d14:	23b4      	movs	r3, #180	; 0xb4
 8005d16:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	b298      	uxth	r0, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f7fb fd50 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005d2c:	23dc      	movs	r3, #220	; 0xdc
 8005d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	b298      	uxth	r0, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	b299      	uxth	r1, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f7fb fd44 	bl	80017cc <drawUpDownArrow>
		break;
 8005d44:	e153      	b.n	8005fee <drawSystemInfoMenu+0x612>
 8005d46:	bf00      	nop
 8005d48:	08014878 	.word	0x08014878
 8005d4c:	08014604 	.word	0x08014604
 8005d50:	08014614 	.word	0x08014614
 8005d54:	0801461c 	.word	0x0801461c
 8005d58:	08014634 	.word	0x08014634
 8005d5c:	0801463c 	.word	0x0801463c
 8005d60:	08014648 	.word	0x08014648
 8005d64:	0801465c 	.word	0x0801465c
 8005d68:	080143c4 	.word	0x080143c4
 8005d6c:	0801466c 	.word	0x0801466c
 8005d70:	0801467c 	.word	0x0801467c
 8005d74:	08014684 	.word	0x08014684
 8005d78:	080143d8 	.word	0x080143d8
 8005d7c:	08014690 	.word	0x08014690
 8005d80:	080146a8 	.word	0x080146a8
	}
	case 2:{
		j=45;
 8005d84:	232d      	movs	r3, #45	; 0x2d
 8005d86:	60fb      	str	r3, [r7, #12]
		i=10;
 8005d88:	230a      	movs	r3, #10
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	b298      	uxth	r0, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	b299      	uxth	r1, r3
 8005d94:	4b99      	ldr	r3, [pc, #612]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005d96:	4a9a      	ldr	r2, [pc, #616]	; (8006000 <drawSystemInfoMenu+0x624>)
 8005d98:	f7fb fbc8 	bl	800152c <LCD_PutStr>

		j+=25;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3319      	adds	r3, #25
 8005da0:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	b298      	uxth	r0, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	b299      	uxth	r1, r3
 8005dae:	4b93      	ldr	r3, [pc, #588]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005db0:	4a94      	ldr	r2, [pc, #592]	; (8006004 <drawSystemInfoMenu+0x628>)
 8005db2:	f7fb fbbb 	bl	800152c <LCD_PutStr>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	4413      	add	r3, r2
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8005dc0:	4b91      	ldr	r3, [pc, #580]	; (8006008 <drawSystemInfoMenu+0x62c>)
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	4a91      	ldr	r2, [pc, #580]	; (800600c <drawSystemInfoMenu+0x630>)
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	edd3 7a00 	vldr	s15, [r3]
 8005dce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005dd2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005dd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005dde:	ee17 3a90 	vmov	r3, s15
 8005de2:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	b298      	uxth	r0, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	b299      	uxth	r1, r3
 8005dec:	4b83      	ldr	r3, [pc, #524]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2301      	movs	r3, #1
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f7fb fc38 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3319      	adds	r3, #25
 8005dfc:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	b298      	uxth	r0, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	4b7c      	ldr	r3, [pc, #496]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005e0c:	4a80      	ldr	r2, [pc, #512]	; (8006010 <drawSystemInfoMenu+0x634>)
 8005e0e:	f7fb fb8d 	bl	800152c <LCD_PutStr>
 8005e12:	4603      	mov	r3, r0
 8005e14:	461a      	mov	r2, r3
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	4413      	add	r3, r2
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8005e1c:	4b7a      	ldr	r3, [pc, #488]	; (8006008 <drawSystemInfoMenu+0x62c>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	4a7a      	ldr	r2, [pc, #488]	; (800600c <drawSystemInfoMenu+0x630>)
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	edd3 7a00 	vldr	s15, [r3]
 8005e2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e2e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005e32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e36:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005e3a:	ee17 3a90 	vmov	r3, s15
 8005e3e:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	b298      	uxth	r0, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	b299      	uxth	r1, r3
 8005e48:	4b6c      	ldr	r3, [pc, #432]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	f7fb fc0a 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3319      	adds	r3, #25
 8005e58:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	b298      	uxth	r0, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	b299      	uxth	r1, r3
 8005e66:	4b65      	ldr	r3, [pc, #404]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005e68:	4a6a      	ldr	r2, [pc, #424]	; (8006014 <drawSystemInfoMenu+0x638>)
 8005e6a:	f7fb fb5f 	bl	800152c <LCD_PutStr>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	4413      	add	r3, r2
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8005e78:	4b63      	ldr	r3, [pc, #396]	; (8006008 <drawSystemInfoMenu+0x62c>)
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	4a63      	ldr	r2, [pc, #396]	; (800600c <drawSystemInfoMenu+0x630>)
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	edd3 7a00 	vldr	s15, [r3]
 8005e86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005e8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005e96:	ee17 3a90 	vmov	r3, s15
 8005e9a:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	b298      	uxth	r0, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	b299      	uxth	r1, r3
 8005ea4:	4b55      	ldr	r3, [pc, #340]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	f7fb fbdc 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3319      	adds	r3, #25
 8005eb4:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	b298      	uxth	r0, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	b299      	uxth	r1, r3
 8005ec2:	4b4e      	ldr	r3, [pc, #312]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005ec4:	4a54      	ldr	r2, [pc, #336]	; (8006018 <drawSystemInfoMenu+0x63c>)
 8005ec6:	f7fb fb31 	bl	800152c <LCD_PutStr>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	4413      	add	r3, r2
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8005ed4:	4b4c      	ldr	r3, [pc, #304]	; (8006008 <drawSystemInfoMenu+0x62c>)
 8005ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed8:	4a4c      	ldr	r2, [pc, #304]	; (800600c <drawSystemInfoMenu+0x630>)
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	edd3 7a00 	vldr	s15, [r3]
 8005ee2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ee6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005eea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005eee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005ef2:	ee17 3a90 	vmov	r3, s15
 8005ef6:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	b298      	uxth	r0, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	b299      	uxth	r1, r3
 8005f00:	4b3e      	ldr	r3, [pc, #248]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2301      	movs	r3, #1
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	f7fb fbae 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3319      	adds	r3, #25
 8005f10:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	b298      	uxth	r0, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	b299      	uxth	r1, r3
 8005f1e:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005f20:	4a3e      	ldr	r2, [pc, #248]	; (800601c <drawSystemInfoMenu+0x640>)
 8005f22:	f7fb fb03 	bl	800152c <LCD_PutStr>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	4413      	add	r3, r2
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 8005f30:	4b35      	ldr	r3, [pc, #212]	; (8006008 <drawSystemInfoMenu+0x62c>)
 8005f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f34:	4a35      	ldr	r2, [pc, #212]	; (800600c <drawSystemInfoMenu+0x630>)
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	edd3 7a00 	vldr	s15, [r3]
 8005f3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005f46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f4e:	ee17 3a90 	vmov	r3, s15
 8005f52:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	b298      	uxth	r0, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	b299      	uxth	r1, r3
 8005f5c:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2301      	movs	r3, #1
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	f7fb fb80 	bl	8001668 <LCD_PutIntF>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	4413      	add	r3, r2
 8005f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f72:	4413      	add	r3, r2
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	b298      	uxth	r0, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	b299      	uxth	r1, r3
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005f80:	4a27      	ldr	r2, [pc, #156]	; (8006020 <drawSystemInfoMenu+0x644>)
 8005f82:	f7fb fad3 	bl	800152c <LCD_PutStr>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	4413      	add	r3, r2
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	b298      	uxth	r0, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	b299      	uxth	r1, r3
 8005f98:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <drawSystemInfoMenu+0x620>)
 8005f9a:	4a22      	ldr	r2, [pc, #136]	; (8006024 <drawSystemInfoMenu+0x648>)
 8005f9c:	f7fb fac6 	bl	800152c <LCD_PutStr>

		i=200;
 8005fa0:	23c8      	movs	r3, #200	; 0xc8
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=15;
 8005fa4:	230f      	movs	r3, #15
 8005fa6:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	b298      	uxth	r0, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	b299      	uxth	r1, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f7fb fc08 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005fbc:	23b4      	movs	r3, #180	; 0xb4
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	b298      	uxth	r0, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	b299      	uxth	r1, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f7fb fbfc 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005fd4:	23dc      	movs	r3, #220	; 0xdc
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	b298      	uxth	r0, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	b299      	uxth	r1, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f7fb fbf0 	bl	80017cc <drawUpDownArrow>

		break;
 8005fec:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8005fee:	f7fa fb73 	bl	80006d8 <SMLCD_Flush>
}
 8005ff2:	bf00      	nop
 8005ff4:	3730      	adds	r7, #48	; 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	08014878 	.word	0x08014878
 8006000:	080146b4 	.word	0x080146b4
 8006004:	080146cc 	.word	0x080146cc
 8006008:	200000e8 	.word	0x200000e8
 800600c:	2002404c 	.word	0x2002404c
 8006010:	080146dc 	.word	0x080146dc
 8006014:	080146e8 	.word	0x080146e8
 8006018:	080146f4 	.word	0x080146f4
 800601c:	0801467c 	.word	0x0801467c
 8006020:	08014700 	.word	0x08014700
 8006024:	08014710 	.word	0x08014710

08006028 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	460b      	mov	r3, r1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 8006036:	2314      	movs	r3, #20
 8006038:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 800603a:	2332      	movs	r3, #50	; 0x32
 800603c:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 800603e:	f7fa fc95 	bl	800096c <LCD_Clear>
		LCD_PixelMode = LCD_PSET;
 8006042:	4b94      	ldr	r3, [pc, #592]	; (8006294 <drawBootMenu+0x26c>)
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]

		LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8006048:	4b93      	ldr	r3, [pc, #588]	; (8006298 <drawBootMenu+0x270>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	4b92      	ldr	r3, [pc, #584]	; (800629c <drawBootMenu+0x274>)
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	3b01      	subs	r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	2100      	movs	r1, #0
 800605a:	2000      	movs	r0, #0
 800605c:	f7fa fed8 	bl	8000e10 <LCD_Rect>
		LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8006060:	4b8d      	ldr	r3, [pc, #564]	; (8006298 <drawBootMenu+0x270>)
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	3b03      	subs	r3, #3
 8006066:	b29a      	uxth	r2, r3
 8006068:	4b8c      	ldr	r3, [pc, #560]	; (800629c <drawBootMenu+0x274>)
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	3b03      	subs	r3, #3
 800606e:	b29b      	uxth	r3, r3
 8006070:	2102      	movs	r1, #2
 8006072:	2002      	movs	r0, #2
 8006074:	f7fa fecc 	bl	8000e10 <LCD_Rect>

		// RTC :)
		i  = 10;
 8006078:	230a      	movs	r3, #10
 800607a:	613b      	str	r3, [r7, #16]
		j  = 10;
 800607c:	230a      	movs	r3, #10
 800607e:	61fb      	str	r3, [r7, #28]
		i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	b298      	uxth	r0, r3
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	b299      	uxth	r1, r3
 8006088:	4b85      	ldr	r3, [pc, #532]	; (80062a0 <drawBootMenu+0x278>)
 800608a:	4a86      	ldr	r2, [pc, #536]	; (80062a4 <drawBootMenu+0x27c>)
 800608c:	f7fb fa4e 	bl	800152c <LCD_PutStr>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "So many!", fnt7x10);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	b298      	uxth	r0, r3
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	b299      	uxth	r1, r3
 80060a2:	4b7f      	ldr	r3, [pc, #508]	; (80062a0 <drawBootMenu+0x278>)
 80060a4:	4a80      	ldr	r2, [pc, #512]	; (80062a8 <drawBootMenu+0x280>)
 80060a6:	f7fb fa41 	bl	800152c <LCD_PutStr>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
		i+=170;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	33aa      	adds	r3, #170	; 0xaa
 80060b8:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	b298      	uxth	r0, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	b299      	uxth	r1, r3
 80060c2:	4b77      	ldr	r3, [pc, #476]	; (80062a0 <drawBootMenu+0x278>)
 80060c4:	4a79      	ldr	r2, [pc, #484]	; (80062ac <drawBootMenu+0x284>)
 80060c6:	f7fb fa31 	bl	800152c <LCD_PutStr>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "QED", fnt7x10);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	b298      	uxth	r0, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	b299      	uxth	r1, r3
 80060dc:	4b70      	ldr	r3, [pc, #448]	; (80062a0 <drawBootMenu+0x278>)
 80060de:	4a74      	ldr	r2, [pc, #464]	; (80062b0 <drawBootMenu+0x288>)
 80060e0:	f7fb fa24 	bl	800152c <LCD_PutStr>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
		i  = 135;
 80060ee:	2387      	movs	r3, #135	; 0x87
 80060f0:	613b      	str	r3, [r7, #16]
		j += 12;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	330c      	adds	r3, #12
 80060f6:	61fb      	str	r3, [r7, #28]

		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	b299      	uxth	r1, r3
 80060fc:	4b66      	ldr	r3, [pc, #408]	; (8006298 <drawBootMenu+0x270>)
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	3b02      	subs	r3, #2
 8006102:	b29a      	uxth	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	b29b      	uxth	r3, r3
 8006108:	3303      	adds	r3, #3
 800610a:	b29b      	uxth	r3, r3
 800610c:	2002      	movs	r0, #2
 800610e:	f7fa fec1 	bl	8000e94 <LCD_FillRect>

		j=45;
 8006112:	232d      	movs	r3, #45	; 0x2d
 8006114:	61fb      	str	r3, [r7, #28]
		i=42;
 8006116:	232a      	movs	r3, #42	; 0x2a
 8006118:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	b298      	uxth	r0, r3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	b299      	uxth	r1, r3
 8006122:	4b5f      	ldr	r3, [pc, #380]	; (80062a0 <drawBootMenu+0x278>)
 8006124:	4a63      	ldr	r2, [pc, #396]	; (80062b4 <drawBootMenu+0x28c>)
 8006126:	f7fb fa01 	bl	800152c <LCD_PutStr>
		j+=20;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3314      	adds	r3, #20
 800612e:	61fb      	str	r3, [r7, #28]
		i=indentAlignment;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	b298      	uxth	r0, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	b299      	uxth	r1, r3
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <drawBootMenu+0x278>)
 800613e:	4a5e      	ldr	r2, [pc, #376]	; (80062b8 <drawBootMenu+0x290>)
 8006140:	f7fb f9f4 	bl	800152c <LCD_PutStr>
		j+=20;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3314      	adds	r3, #20
 8006148:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	b298      	uxth	r0, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	b299      	uxth	r1, r3
 8006152:	4b53      	ldr	r3, [pc, #332]	; (80062a0 <drawBootMenu+0x278>)
 8006154:	4a59      	ldr	r2, [pc, #356]	; (80062bc <drawBootMenu+0x294>)
 8006156:	f7fb f9e9 	bl	800152c <LCD_PutStr>
		j+=20;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3314      	adds	r3, #20
 800615e:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	b298      	uxth	r0, r3
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	b299      	uxth	r1, r3
 8006168:	4b4d      	ldr	r3, [pc, #308]	; (80062a0 <drawBootMenu+0x278>)
 800616a:	4a55      	ldr	r2, [pc, #340]	; (80062c0 <drawBootMenu+0x298>)
 800616c:	f7fb f9de 	bl	800152c <LCD_PutStr>
		j+=20;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3314      	adds	r3, #20
 8006174:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	b298      	uxth	r0, r3
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	b299      	uxth	r1, r3
 800617e:	4b48      	ldr	r3, [pc, #288]	; (80062a0 <drawBootMenu+0x278>)
 8006180:	4a50      	ldr	r2, [pc, #320]	; (80062c4 <drawBootMenu+0x29c>)
 8006182:	f7fb f9d3 	bl	800152c <LCD_PutStr>
		j+=20;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3314      	adds	r3, #20
 800618a:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "UEFI", fnt7x10);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	b298      	uxth	r0, r3
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	b299      	uxth	r1, r3
 8006194:	4b42      	ldr	r3, [pc, #264]	; (80062a0 <drawBootMenu+0x278>)
 8006196:	4a4c      	ldr	r2, [pc, #304]	; (80062c8 <drawBootMenu+0x2a0>)
 8006198:	f7fb f9c8 	bl	800152c <LCD_PutStr>
		i-= 17;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3b11      	subs	r3, #17
 80061a0:	613b      	str	r3, [r7, #16]
		switch(indicator){
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	f200 80d4 	bhi.w	8006354 <drawBootMenu+0x32c>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <drawBootMenu+0x18c>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061c9 	.word	0x080061c9
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	08006251 	.word	0x08006251
 80061c0:	080062d1 	.word	0x080062d1
 80061c4:	08006313 	.word	0x08006313
		case FIRST:
		{
			j=65;
 80061c8:	2341      	movs	r3, #65	; 0x41
 80061ca:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	4b3c      	ldr	r3, [pc, #240]	; (80062cc <drawBootMenu+0x2a4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4299      	cmp	r1, r3
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4013      	ands	r3, r2
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80b4 	beq.w	800635a <drawBootMenu+0x332>
				i=140;
 80061f2:	238c      	movs	r3, #140	; 0x8c
 80061f4:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	b298      	uxth	r0, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3305      	adds	r3, #5
 8006200:	b299      	uxth	r1, r3
 8006202:	2303      	movs	r3, #3
 8006204:	2203      	movs	r2, #3
 8006206:	f7fb fae1 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800620a:	e0a6      	b.n	800635a <drawBootMenu+0x332>
		}
		case SECOND:
		{
			j=85;
 800620c:	2355      	movs	r3, #85	; 0x55
 800620e:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	2b04      	cmp	r3, #4
 8006214:	bf0c      	ite	eq
 8006216:	2301      	moveq	r3, #1
 8006218:	2300      	movne	r3, #0
 800621a:	b2da      	uxtb	r2, r3
 800621c:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <drawBootMenu+0x2a4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4299      	cmp	r1, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4013      	ands	r3, r2
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8094 	beq.w	800635e <drawBootMenu+0x336>
				i=220;
 8006236:	23dc      	movs	r3, #220	; 0xdc
 8006238:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	b298      	uxth	r0, r3
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	b29b      	uxth	r3, r3
 8006242:	3305      	adds	r3, #5
 8006244:	b299      	uxth	r1, r3
 8006246:	2303      	movs	r3, #3
 8006248:	2203      	movs	r2, #3
 800624a:	f7fb fabf 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800624e:	e086      	b.n	800635e <drawBootMenu+0x336>
		}
		case THIRD:
		{
			j=105;
 8006250:	2369      	movs	r3, #105	; 0x69
 8006252:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	2b04      	cmp	r3, #4
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2da      	uxtb	r2, r3
 8006260:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <drawBootMenu+0x2a4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4299      	cmp	r1, r3
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	4013      	ands	r3, r2
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d074      	beq.n	8006362 <drawBootMenu+0x33a>
				i=130;
 8006278:	2382      	movs	r3, #130	; 0x82
 800627a:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	b298      	uxth	r0, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	b29b      	uxth	r3, r3
 8006284:	3305      	adds	r3, #5
 8006286:	b299      	uxth	r1, r3
 8006288:	2303      	movs	r3, #3
 800628a:	2203      	movs	r2, #3
 800628c:	f7fb fa9e 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006290:	e067      	b.n	8006362 <drawBootMenu+0x33a>
 8006292:	bf00      	nop
 8006294:	20010308 	.word	0x20010308
 8006298:	2001030a 	.word	0x2001030a
 800629c:	2001030c 	.word	0x2001030c
 80062a0:	08014878 	.word	0x08014878
 80062a4:	080142e8 	.word	0x080142e8
 80062a8:	080142f0 	.word	0x080142f0
 80062ac:	080142fc 	.word	0x080142fc
 80062b0:	08014304 	.word	0x08014304
 80062b4:	0801471c 	.word	0x0801471c
 80062b8:	08014738 	.word	0x08014738
 80062bc:	08014744 	.word	0x08014744
 80062c0:	08014758 	.word	0x08014758
 80062c4:	08014764 	.word	0x08014764
 80062c8:	08014774 	.word	0x08014774
 80062cc:	200032a0 	.word	0x200032a0
		}
		case FOURTH:
		{
			j=125;
 80062d0:	237d      	movs	r3, #125	; 0x7d
 80062d2:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80062d4:	7afb      	ldrb	r3, [r7, #11]
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	bf0c      	ite	eq
 80062da:	2301      	moveq	r3, #1
 80062dc:	2300      	movne	r3, #0
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	4b2f      	ldr	r3, [pc, #188]	; (80063a0 <drawBootMenu+0x378>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4299      	cmp	r1, r3
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	2300      	movne	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	4013      	ands	r3, r2
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d036      	beq.n	8006366 <drawBootMenu+0x33e>
				i=160;
 80062f8:	23a0      	movs	r3, #160	; 0xa0
 80062fa:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	b298      	uxth	r0, r3
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	b29b      	uxth	r3, r3
 8006304:	3305      	adds	r3, #5
 8006306:	b299      	uxth	r1, r3
 8006308:	2303      	movs	r3, #3
 800630a:	2203      	movs	r2, #3
 800630c:	f7fb fa5e 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006310:	e029      	b.n	8006366 <drawBootMenu+0x33e>
		}
		case FIFTH:
		{
			j=145;
 8006312:	2391      	movs	r3, #145	; 0x91
 8006314:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	2b04      	cmp	r3, #4
 800631a:	bf0c      	ite	eq
 800631c:	2301      	moveq	r3, #1
 800631e:	2300      	movne	r3, #0
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <drawBootMenu+0x378>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4299      	cmp	r1, r3
 800632a:	bf0c      	ite	eq
 800632c:	2301      	moveq	r3, #1
 800632e:	2300      	movne	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	4013      	ands	r3, r2
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d017      	beq.n	800636a <drawBootMenu+0x342>
				i=100;
 800633a:	2364      	movs	r3, #100	; 0x64
 800633c:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	b298      	uxth	r0, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	b29b      	uxth	r3, r3
 8006346:	3305      	adds	r3, #5
 8006348:	b299      	uxth	r1, r3
 800634a:	2303      	movs	r3, #3
 800634c:	2203      	movs	r2, #3
 800634e:	f7fb fa3d 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006352:	e00a      	b.n	800636a <drawBootMenu+0x342>
		}
		default:
		{
			j=75;
 8006354:	234b      	movs	r3, #75	; 0x4b
 8006356:	61fb      	str	r3, [r7, #28]
			break;
 8006358:	e008      	b.n	800636c <drawBootMenu+0x344>
			break;
 800635a:	bf00      	nop
 800635c:	e006      	b.n	800636c <drawBootMenu+0x344>
			break;
 800635e:	bf00      	nop
 8006360:	e004      	b.n	800636c <drawBootMenu+0x344>
			break;
 8006362:	bf00      	nop
 8006364:	e002      	b.n	800636c <drawBootMenu+0x344>
			break;
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <drawBootMenu+0x344>
			break;
 800636a:	bf00      	nop
		}
		}
		previousMenu=menu;
 800636c:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <drawBootMenu+0x378>)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6013      	str	r3, [r2, #0]
		i=25;
 8006372:	2319      	movs	r3, #25
 8006374:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	b298      	uxth	r0, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	b299      	uxth	r1, r3
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	b29b      	uxth	r3, r3
 8006382:	330c      	adds	r3, #12
 8006384:	b29a      	uxth	r2, r3
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	b29b      	uxth	r3, r3
 800638a:	330a      	adds	r3, #10
 800638c:	b29b      	uxth	r3, r3
 800638e:	f7fa fd81 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 8006392:	f7fa f9a1 	bl	80006d8 <SMLCD_Flush>
}
 8006396:	bf00      	nop
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200032a0 	.word	0x200032a0

080063a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <HAL_MspInit+0x4c>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <HAL_MspInit+0x4c>)
 80063b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b4:	6413      	str	r3, [r2, #64]	; 0x40
 80063b6:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <HAL_MspInit+0x4c>)
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_MspInit+0x4c>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	4a0a      	ldr	r2, [pc, #40]	; (80063f0 <HAL_MspInit+0x4c>)
 80063c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063cc:	6453      	str	r3, [r2, #68]	; 0x44
 80063ce:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <HAL_MspInit+0x4c>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063da:	2200      	movs	r2, #0
 80063dc:	210f      	movs	r1, #15
 80063de:	f06f 0001 	mvn.w	r0, #1
 80063e2:	f001 fe69 	bl	80080b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800

080063f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b094      	sub	sp, #80	; 0x50
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	609a      	str	r2, [r3, #8]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a91      	ldr	r2, [pc, #580]	; (8006658 <HAL_ADC_MspInit+0x264>)
 8006412:	4293      	cmp	r3, r2
 8006414:	f040 808c 	bne.w	8006530 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006418:	4b90      	ldr	r3, [pc, #576]	; (800665c <HAL_ADC_MspInit+0x268>)
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	4a8f      	ldr	r2, [pc, #572]	; (800665c <HAL_ADC_MspInit+0x268>)
 800641e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006422:	6453      	str	r3, [r2, #68]	; 0x44
 8006424:	4b8d      	ldr	r3, [pc, #564]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006430:	4b8a      	ldr	r3, [pc, #552]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	4a89      	ldr	r2, [pc, #548]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006436:	f043 0304 	orr.w	r3, r3, #4
 800643a:	6313      	str	r3, [r2, #48]	; 0x30
 800643c:	4b87      	ldr	r3, [pc, #540]	; (800665c <HAL_ADC_MspInit+0x268>)
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006448:	4b84      	ldr	r3, [pc, #528]	; (800665c <HAL_ADC_MspInit+0x268>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	4a83      	ldr	r2, [pc, #524]	; (800665c <HAL_ADC_MspInit+0x268>)
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	6313      	str	r3, [r2, #48]	; 0x30
 8006454:	4b81      	ldr	r3, [pc, #516]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	633b      	str	r3, [r7, #48]	; 0x30
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006460:	4b7e      	ldr	r3, [pc, #504]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	4a7d      	ldr	r2, [pc, #500]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006466:	f043 0302 	orr.w	r3, r3, #2
 800646a:	6313      	str	r3, [r2, #48]	; 0x30
 800646c:	4b7b      	ldr	r3, [pc, #492]	; (800665c <HAL_ADC_MspInit+0x268>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006478:	230f      	movs	r3, #15
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800647c:	2303      	movs	r3, #3
 800647e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006484:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006488:	4619      	mov	r1, r3
 800648a:	4875      	ldr	r0, [pc, #468]	; (8006660 <HAL_ADC_MspInit+0x26c>)
 800648c:	f002 fa46 	bl	800891c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8006490:	23f8      	movs	r3, #248	; 0xf8
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006494:	2303      	movs	r3, #3
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006498:	2300      	movs	r3, #0
 800649a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800649c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064a0:	4619      	mov	r1, r3
 80064a2:	4870      	ldr	r0, [pc, #448]	; (8006664 <HAL_ADC_MspInit+0x270>)
 80064a4:	f002 fa3a 	bl	800891c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80064a8:	2303      	movs	r3, #3
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064ac:	2303      	movs	r3, #3
 80064ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064b8:	4619      	mov	r1, r3
 80064ba:	486b      	ldr	r0, [pc, #428]	; (8006668 <HAL_ADC_MspInit+0x274>)
 80064bc:	f002 fa2e 	bl	800891c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80064c0:	4b6a      	ldr	r3, [pc, #424]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064c2:	4a6b      	ldr	r2, [pc, #428]	; (8006670 <HAL_ADC_MspInit+0x27c>)
 80064c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064c6:	4b69      	ldr	r3, [pc, #420]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064cc:	4b67      	ldr	r3, [pc, #412]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064d2:	4b66      	ldr	r3, [pc, #408]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064d8:	4b64      	ldr	r3, [pc, #400]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064e0:	4b62      	ldr	r3, [pc, #392]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064e8:	4b60      	ldr	r3, [pc, #384]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80064f0:	4b5e      	ldr	r3, [pc, #376]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064f6:	4b5d      	ldr	r3, [pc, #372]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064fc:	4b5b      	ldr	r3, [pc, #364]	; (800666c <HAL_ADC_MspInit+0x278>)
 80064fe:	2200      	movs	r2, #0
 8006500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006502:	485a      	ldr	r0, [pc, #360]	; (800666c <HAL_ADC_MspInit+0x278>)
 8006504:	f001 fe02 	bl	800810c <HAL_DMA_Init>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 800650e:	f7fd fe4b 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a55      	ldr	r2, [pc, #340]	; (800666c <HAL_ADC_MspInit+0x278>)
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
 8006518:	4a54      	ldr	r2, [pc, #336]	; (800666c <HAL_ADC_MspInit+0x278>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800651e:	2200      	movs	r2, #0
 8006520:	2105      	movs	r1, #5
 8006522:	2012      	movs	r0, #18
 8006524:	f001 fdc8 	bl	80080b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006528:	2012      	movs	r0, #18
 800652a:	f001 fde1 	bl	80080f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800652e:	e13a      	b.n	80067a6 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a4f      	ldr	r2, [pc, #316]	; (8006674 <HAL_ADC_MspInit+0x280>)
 8006536:	4293      	cmp	r3, r2
 8006538:	f040 80a2 	bne.w	8006680 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800653c:	4b47      	ldr	r3, [pc, #284]	; (800665c <HAL_ADC_MspInit+0x268>)
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	4a46      	ldr	r2, [pc, #280]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006546:	6453      	str	r3, [r2, #68]	; 0x44
 8006548:	4b44      	ldr	r3, [pc, #272]	; (800665c <HAL_ADC_MspInit+0x268>)
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4a40      	ldr	r2, [pc, #256]	; (800665c <HAL_ADC_MspInit+0x268>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6313      	str	r3, [r2, #48]	; 0x30
 8006560:	4b3e      	ldr	r3, [pc, #248]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800656c:	4b3b      	ldr	r3, [pc, #236]	; (800665c <HAL_ADC_MspInit+0x268>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	4a3a      	ldr	r2, [pc, #232]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6313      	str	r3, [r2, #48]	; 0x30
 8006578:	4b38      	ldr	r3, [pc, #224]	; (800665c <HAL_ADC_MspInit+0x268>)
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006584:	4b35      	ldr	r3, [pc, #212]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	4a34      	ldr	r2, [pc, #208]	; (800665c <HAL_ADC_MspInit+0x268>)
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	6313      	str	r3, [r2, #48]	; 0x30
 8006590:	4b32      	ldr	r3, [pc, #200]	; (800665c <HAL_ADC_MspInit+0x268>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 800659c:	233f      	movs	r3, #63	; 0x3f
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065a0:	2303      	movs	r3, #3
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065ac:	4619      	mov	r1, r3
 80065ae:	482c      	ldr	r0, [pc, #176]	; (8006660 <HAL_ADC_MspInit+0x26c>)
 80065b0:	f002 f9b4 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 80065b4:	237b      	movs	r3, #123	; 0x7b
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065b8:	2303      	movs	r3, #3
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065c4:	4619      	mov	r1, r3
 80065c6:	4827      	ldr	r0, [pc, #156]	; (8006664 <HAL_ADC_MspInit+0x270>)
 80065c8:	f002 f9a8 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 80065cc:	2302      	movs	r3, #2
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065d0:	2303      	movs	r3, #3
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 80065d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065dc:	4619      	mov	r1, r3
 80065de:	4822      	ldr	r0, [pc, #136]	; (8006668 <HAL_ADC_MspInit+0x274>)
 80065e0:	f002 f99c 	bl	800891c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80065e4:	4b24      	ldr	r3, [pc, #144]	; (8006678 <HAL_ADC_MspInit+0x284>)
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <HAL_ADC_MspInit+0x288>)
 80065e8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_ADC_MspInit+0x284>)
 80065ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065f0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065f2:	4b21      	ldr	r3, [pc, #132]	; (8006678 <HAL_ADC_MspInit+0x284>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80065f8:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <HAL_ADC_MspInit+0x284>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80065fe:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <HAL_ADC_MspInit+0x284>)
 8006600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006604:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_ADC_MspInit+0x284>)
 8006608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800660c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <HAL_ADC_MspInit+0x284>)
 8006610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006614:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006616:	4b18      	ldr	r3, [pc, #96]	; (8006678 <HAL_ADC_MspInit+0x284>)
 8006618:	2200      	movs	r2, #0
 800661a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800661c:	4b16      	ldr	r3, [pc, #88]	; (8006678 <HAL_ADC_MspInit+0x284>)
 800661e:	2200      	movs	r2, #0
 8006620:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <HAL_ADC_MspInit+0x284>)
 8006624:	2200      	movs	r2, #0
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006628:	4813      	ldr	r0, [pc, #76]	; (8006678 <HAL_ADC_MspInit+0x284>)
 800662a:	f001 fd6f 	bl	800810c <HAL_DMA_Init>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8006634:	f7fd fdb8 	bl	80041a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a0f      	ldr	r2, [pc, #60]	; (8006678 <HAL_ADC_MspInit+0x284>)
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
 800663e:	4a0e      	ldr	r2, [pc, #56]	; (8006678 <HAL_ADC_MspInit+0x284>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006644:	2200      	movs	r2, #0
 8006646:	2105      	movs	r1, #5
 8006648:	2012      	movs	r0, #18
 800664a:	f001 fd35 	bl	80080b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800664e:	2012      	movs	r0, #18
 8006650:	f001 fd4e 	bl	80080f0 <HAL_NVIC_EnableIRQ>
}
 8006654:	e0a7      	b.n	80067a6 <HAL_ADC_MspInit+0x3b2>
 8006656:	bf00      	nop
 8006658:	40012000 	.word	0x40012000
 800665c:	40023800 	.word	0x40023800
 8006660:	40020800 	.word	0x40020800
 8006664:	40020000 	.word	0x40020000
 8006668:	40020400 	.word	0x40020400
 800666c:	200132e8 	.word	0x200132e8
 8006670:	40026410 	.word	0x40026410
 8006674:	40012100 	.word	0x40012100
 8006678:	20023f84 	.word	0x20023f84
 800667c:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a4a      	ldr	r2, [pc, #296]	; (80067b0 <HAL_ADC_MspInit+0x3bc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	f040 808d 	bne.w	80067a6 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800668c:	4b49      	ldr	r3, [pc, #292]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	4a48      	ldr	r2, [pc, #288]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 8006692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006696:	6453      	str	r3, [r2, #68]	; 0x44
 8006698:	4b46      	ldr	r3, [pc, #280]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066a4:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	4a42      	ldr	r2, [pc, #264]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066aa:	f043 0320 	orr.w	r3, r3, #32
 80066ae:	6313      	str	r3, [r2, #48]	; 0x30
 80066b0:	4b40      	ldr	r3, [pc, #256]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066bc:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4a3c      	ldr	r2, [pc, #240]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066c2:	f043 0304 	orr.w	r3, r3, #4
 80066c6:	6313      	str	r3, [r2, #48]	; 0x30
 80066c8:	4b3a      	ldr	r3, [pc, #232]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066d4:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	4a36      	ldr	r2, [pc, #216]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	6313      	str	r3, [r2, #48]	; 0x30
 80066e0:	4b34      	ldr	r3, [pc, #208]	; (80067b4 <HAL_ADC_MspInit+0x3c0>)
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 80066ec:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066f2:	2303      	movs	r3, #3
 80066f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80066fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066fe:	4619      	mov	r1, r3
 8006700:	482d      	ldr	r0, [pc, #180]	; (80067b8 <HAL_ADC_MspInit+0x3c4>)
 8006702:	f002 f90b 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006706:	230f      	movs	r3, #15
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800670a:	2303      	movs	r3, #3
 800670c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670e:	2300      	movs	r3, #0
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006712:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006716:	4619      	mov	r1, r3
 8006718:	4828      	ldr	r0, [pc, #160]	; (80067bc <HAL_ADC_MspInit+0x3c8>)
 800671a:	f002 f8ff 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 800671e:	230c      	movs	r3, #12
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006722:	2303      	movs	r3, #3
 8006724:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006726:	2300      	movs	r3, #0
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800672a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800672e:	4619      	mov	r1, r3
 8006730:	4823      	ldr	r0, [pc, #140]	; (80067c0 <HAL_ADC_MspInit+0x3cc>)
 8006732:	f002 f8f3 	bl	800891c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006736:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006738:	4a23      	ldr	r2, [pc, #140]	; (80067c8 <HAL_ADC_MspInit+0x3d4>)
 800673a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800673c:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 800673e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006742:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006744:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800674a:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 800674c:	2200      	movs	r2, #0
 800674e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006750:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006756:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006758:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 800675a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800675e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006760:	4b18      	ldr	r3, [pc, #96]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006766:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 800676a:	2200      	movs	r2, #0
 800676c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800676e:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006770:	2200      	movs	r2, #0
 8006772:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006774:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006776:	2200      	movs	r2, #0
 8006778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800677a:	4812      	ldr	r0, [pc, #72]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 800677c:	f001 fcc6 	bl	800810c <HAL_DMA_Init>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8006786:	f7fd fd0f 	bl	80041a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a0d      	ldr	r2, [pc, #52]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
 8006790:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <HAL_ADC_MspInit+0x3d0>)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006796:	2200      	movs	r2, #0
 8006798:	2105      	movs	r1, #5
 800679a:	2012      	movs	r0, #18
 800679c:	f001 fc8c 	bl	80080b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80067a0:	2012      	movs	r0, #18
 80067a2:	f001 fca5 	bl	80080f0 <HAL_NVIC_EnableIRQ>
}
 80067a6:	bf00      	nop
 80067a8:	3750      	adds	r7, #80	; 0x50
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40012200 	.word	0x40012200
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40021400 	.word	0x40021400
 80067bc:	40020800 	.word	0x40020800
 80067c0:	40020000 	.word	0x40020000
 80067c4:	20010a20 	.word	0x20010a20
 80067c8:	40026428 	.word	0x40026428

080067cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b090      	sub	sp, #64	; 0x40
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6c      	ldr	r2, [pc, #432]	; (800699c <HAL_I2C_MspInit+0x1d0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d129      	bne.n	8006842 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ee:	4b6c      	ldr	r3, [pc, #432]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	4a6b      	ldr	r2, [pc, #428]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80067f4:	f043 0302 	orr.w	r3, r3, #2
 80067f8:	6313      	str	r3, [r2, #48]	; 0x30
 80067fa:	4b69      	ldr	r3, [pc, #420]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8006806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800680c:	2312      	movs	r3, #18
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006810:	2301      	movs	r3, #1
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006814:	2303      	movs	r3, #3
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006818:	2304      	movs	r3, #4
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800681c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006820:	4619      	mov	r1, r3
 8006822:	4860      	ldr	r0, [pc, #384]	; (80069a4 <HAL_I2C_MspInit+0x1d8>)
 8006824:	f002 f87a 	bl	800891c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006828:	4b5d      	ldr	r3, [pc, #372]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	4a5c      	ldr	r2, [pc, #368]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800682e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006832:	6413      	str	r3, [r2, #64]	; 0x40
 8006834:	4b5a      	ldr	r3, [pc, #360]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006840:	e0a7      	b.n	8006992 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a58      	ldr	r2, [pc, #352]	; (80069a8 <HAL_I2C_MspInit+0x1dc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d128      	bne.n	800689e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800684c:	4b54      	ldr	r3, [pc, #336]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	4a53      	ldr	r2, [pc, #332]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006852:	f043 0320 	orr.w	r3, r3, #32
 8006856:	6313      	str	r3, [r2, #48]	; 0x30
 8006858:	4b51      	ldr	r3, [pc, #324]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8006864:	2303      	movs	r3, #3
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006868:	2312      	movs	r3, #18
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800686c:	2301      	movs	r3, #1
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006870:	2303      	movs	r3, #3
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006874:	2304      	movs	r3, #4
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800687c:	4619      	mov	r1, r3
 800687e:	484b      	ldr	r0, [pc, #300]	; (80069ac <HAL_I2C_MspInit+0x1e0>)
 8006880:	f002 f84c 	bl	800891c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006884:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	4a45      	ldr	r2, [pc, #276]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800688a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800688e:	6413      	str	r3, [r2, #64]	; 0x40
 8006890:	4b43      	ldr	r3, [pc, #268]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	69fb      	ldr	r3, [r7, #28]
}
 800689c:	e079      	b.n	8006992 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a43      	ldr	r2, [pc, #268]	; (80069b0 <HAL_I2C_MspInit+0x1e4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d146      	bne.n	8006936 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068a8:	4b3d      	ldr	r3, [pc, #244]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	4a3c      	ldr	r2, [pc, #240]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80068ae:	f043 0304 	orr.w	r3, r3, #4
 80068b2:	6313      	str	r3, [r2, #48]	; 0x30
 80068b4:	4b3a      	ldr	r3, [pc, #232]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c0:	4b37      	ldr	r3, [pc, #220]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	4a36      	ldr	r2, [pc, #216]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6313      	str	r3, [r2, #48]	; 0x30
 80068cc:	4b34      	ldr	r3, [pc, #208]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80068d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068de:	2312      	movs	r3, #18
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068e2:	2301      	movs	r3, #1
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e6:	2303      	movs	r3, #3
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068ea:	2304      	movs	r3, #4
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 80068ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068f2:	4619      	mov	r1, r3
 80068f4:	482f      	ldr	r0, [pc, #188]	; (80069b4 <HAL_I2C_MspInit+0x1e8>)
 80068f6:	f002 f811 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 80068fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006900:	2312      	movs	r3, #18
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006904:	2301      	movs	r3, #1
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006908:	2303      	movs	r3, #3
 800690a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800690c:	2304      	movs	r3, #4
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8006910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006914:	4619      	mov	r1, r3
 8006916:	4828      	ldr	r0, [pc, #160]	; (80069b8 <HAL_I2C_MspInit+0x1ec>)
 8006918:	f002 f800 	bl	800891c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800691c:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006922:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006926:	6413      	str	r3, [r2, #64]	; 0x40
 8006928:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	693b      	ldr	r3, [r7, #16]
}
 8006934:	e02d      	b.n	8006992 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a20      	ldr	r2, [pc, #128]	; (80069bc <HAL_I2C_MspInit+0x1f0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d128      	bne.n	8006992 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006940:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006946:	f043 0320 	orr.w	r3, r3, #32
 800694a:	6313      	str	r3, [r2, #48]	; 0x30
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8006958:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800695e:	2312      	movs	r3, #18
 8006960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006962:	2301      	movs	r3, #1
 8006964:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006966:	2303      	movs	r3, #3
 8006968:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800696a:	2304      	movs	r3, #4
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800696e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006972:	4619      	mov	r1, r3
 8006974:	480d      	ldr	r0, [pc, #52]	; (80069ac <HAL_I2C_MspInit+0x1e0>)
 8006976:	f001 ffd1 	bl	800891c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006984:	6413      	str	r3, [r2, #64]	; 0x40
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_I2C_MspInit+0x1d4>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	68bb      	ldr	r3, [r7, #8]
}
 8006992:	bf00      	nop
 8006994:	3740      	adds	r7, #64	; 0x40
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40005400 	.word	0x40005400
 80069a0:	40023800 	.word	0x40023800
 80069a4:	40020400 	.word	0x40020400
 80069a8:	40005800 	.word	0x40005800
 80069ac:	40021400 	.word	0x40021400
 80069b0:	40005c00 	.word	0x40005c00
 80069b4:	40020800 	.word	0x40020800
 80069b8:	40020000 	.word	0x40020000
 80069bc:	40006000 	.word	0x40006000

080069c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a07      	ldr	r2, [pc, #28]	; (80069ec <HAL_RTC_MspInit+0x2c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d105      	bne.n	80069de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <HAL_RTC_MspInit+0x30>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a06      	ldr	r2, [pc, #24]	; (80069f0 <HAL_RTC_MspInit+0x30>)
 80069d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40002800 	.word	0x40002800
 80069f0:	40023800 	.word	0x40023800

080069f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08c      	sub	sp, #48	; 0x30
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069fc:	f107 031c 	add.w	r3, r7, #28
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a40      	ldr	r2, [pc, #256]	; (8006b14 <HAL_SPI_MspInit+0x120>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d130      	bne.n	8006a78 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006a16:	4b40      	ldr	r3, [pc, #256]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	4a3f      	ldr	r2, [pc, #252]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a20:	6453      	str	r3, [r2, #68]	; 0x44
 8006a22:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a2e:	4b3a      	ldr	r3, [pc, #232]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	4a39      	ldr	r2, [pc, #228]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a34:	f043 0310 	orr.w	r3, r3, #16
 8006a38:	6313      	str	r3, [r2, #48]	; 0x30
 8006a3a:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006a46:	2364      	movs	r3, #100	; 0x64
 8006a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a52:	2303      	movs	r3, #3
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006a56:	2305      	movs	r3, #5
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a5a:	f107 031c 	add.w	r3, r7, #28
 8006a5e:	4619      	mov	r1, r3
 8006a60:	482e      	ldr	r0, [pc, #184]	; (8006b1c <HAL_SPI_MspInit+0x128>)
 8006a62:	f001 ff5b 	bl	800891c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006a66:	2200      	movs	r2, #0
 8006a68:	2105      	movs	r1, #5
 8006a6a:	2054      	movs	r0, #84	; 0x54
 8006a6c:	f001 fb24 	bl	80080b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006a70:	2054      	movs	r0, #84	; 0x54
 8006a72:	f001 fb3d 	bl	80080f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006a76:	e049      	b.n	8006b0c <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a28      	ldr	r2, [pc, #160]	; (8006b20 <HAL_SPI_MspInit+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d144      	bne.n	8006b0c <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006a82:	4b25      	ldr	r3, [pc, #148]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	4a24      	ldr	r2, [pc, #144]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a8e:	4b22      	ldr	r3, [pc, #136]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a9a:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ab2:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006ab8:	f043 0320 	orr.w	r3, r3, #32
 8006abc:	6313      	str	r3, [r2, #48]	; 0x30
 8006abe:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <HAL_SPI_MspInit+0x124>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8006aca:	23e0      	movs	r3, #224	; 0xe0
 8006acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006ada:	2305      	movs	r3, #5
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006ade:	f107 031c 	add.w	r3, r7, #28
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	480f      	ldr	r0, [pc, #60]	; (8006b24 <HAL_SPI_MspInit+0x130>)
 8006ae6:	f001 ff19 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8006aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af0:	2302      	movs	r3, #2
 8006af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af8:	2303      	movs	r3, #3
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006afc:	2305      	movs	r3, #5
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	4619      	mov	r1, r3
 8006b06:	4808      	ldr	r0, [pc, #32]	; (8006b28 <HAL_SPI_MspInit+0x134>)
 8006b08:	f001 ff08 	bl	800891c <HAL_GPIO_Init>
}
 8006b0c:	bf00      	nop
 8006b0e:	3730      	adds	r7, #48	; 0x30
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	40015000 	.word	0x40015000
 8006b24:	40021c00 	.word	0x40021c00
 8006b28:	40021400 	.word	0x40021400

08006b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a13      	ldr	r2, [pc, #76]	; (8006b88 <HAL_TIM_Base_MspInit+0x5c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d10c      	bne.n	8006b58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006b3e:	4b13      	ldr	r3, [pc, #76]	; (8006b8c <HAL_TIM_Base_MspInit+0x60>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	4a12      	ldr	r2, [pc, #72]	; (8006b8c <HAL_TIM_Base_MspInit+0x60>)
 8006b44:	f043 0304 	orr.w	r3, r3, #4
 8006b48:	6413      	str	r3, [r2, #64]	; 0x40
 8006b4a:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <HAL_TIM_Base_MspInit+0x60>)
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006b56:	e010      	b.n	8006b7a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a0c      	ldr	r2, [pc, #48]	; (8006b90 <HAL_TIM_Base_MspInit+0x64>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d10b      	bne.n	8006b7a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <HAL_TIM_Base_MspInit+0x60>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_TIM_Base_MspInit+0x60>)
 8006b68:	f043 0308 	orr.w	r3, r3, #8
 8006b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6e:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <HAL_TIM_Base_MspInit+0x60>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40000c00 	.word	0x40000c00

08006b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	609a      	str	r2, [r3, #8]
 8006ba8:	60da      	str	r2, [r3, #12]
 8006baa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <HAL_TIM_MspPostInit+0xa8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d11c      	bne.n	8006bf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_TIM_MspPostInit+0xac>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_TIM_MspPostInit+0xac>)
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc2:	4b1f      	ldr	r3, [pc, #124]	; (8006c40 <HAL_TIM_MspPostInit+0xac>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8006bce:	2340      	movs	r3, #64	; 0x40
 8006bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006bde:	2302      	movs	r3, #2
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8006be2:	f107 0314 	add.w	r3, r7, #20
 8006be6:	4619      	mov	r1, r3
 8006be8:	4816      	ldr	r0, [pc, #88]	; (8006c44 <HAL_TIM_MspPostInit+0xb0>)
 8006bea:	f001 fe97 	bl	800891c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006bee:	e021      	b.n	8006c34 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <HAL_TIM_MspPostInit+0xb4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d11c      	bne.n	8006c34 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bfa:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <HAL_TIM_MspPostInit+0xac>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	4a10      	ldr	r2, [pc, #64]	; (8006c40 <HAL_TIM_MspPostInit+0xac>)
 8006c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c04:	6313      	str	r3, [r2, #48]	; 0x30
 8006c06:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <HAL_TIM_MspPostInit+0xac>)
 8006c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8006c12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c20:	2300      	movs	r3, #0
 8006c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006c24:	2302      	movs	r3, #2
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006c28:	f107 0314 	add.w	r3, r7, #20
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4807      	ldr	r0, [pc, #28]	; (8006c4c <HAL_TIM_MspPostInit+0xb8>)
 8006c30:	f001 fe74 	bl	800891c <HAL_GPIO_Init>
}
 8006c34:	bf00      	nop
 8006c36:	3728      	adds	r7, #40	; 0x28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40020400 	.word	0x40020400
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40021c00 	.word	0x40021c00

08006c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08e      	sub	sp, #56	; 0x38
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	60da      	str	r2, [r3, #12]
 8006c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6c      	ldr	r2, [pc, #432]	; (8006e20 <HAL_UART_MspInit+0x1d0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d129      	bne.n	8006cc6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006c72:	4b6c      	ldr	r3, [pc, #432]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	4a6b      	ldr	r2, [pc, #428]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c7e:	4b69      	ldr	r3, [pc, #420]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c86:	623b      	str	r3, [r7, #32]
 8006c88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c8a:	4b66      	ldr	r3, [pc, #408]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	4a65      	ldr	r2, [pc, #404]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006c90:	f043 0304 	orr.w	r3, r3, #4
 8006c94:	6313      	str	r3, [r2, #48]	; 0x30
 8006c96:	4b63      	ldr	r3, [pc, #396]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8006ca2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	485a      	ldr	r0, [pc, #360]	; (8006e28 <HAL_UART_MspInit+0x1d8>)
 8006cc0:	f001 fe2c 	bl	800891c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8006cc4:	e0a7      	b.n	8006e16 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a58      	ldr	r2, [pc, #352]	; (8006e2c <HAL_UART_MspInit+0x1dc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d174      	bne.n	8006dba <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006cd0:	4b54      	ldr	r3, [pc, #336]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	4a53      	ldr	r2, [pc, #332]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cda:	6413      	str	r3, [r2, #64]	; 0x40
 8006cdc:	4b51      	ldr	r3, [pc, #324]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ce8:	4b4e      	ldr	r3, [pc, #312]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	4a4d      	ldr	r2, [pc, #308]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006cee:	f043 0304 	orr.w	r3, r3, #4
 8006cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf4:	4b4b      	ldr	r3, [pc, #300]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d00:	4b48      	ldr	r3, [pc, #288]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	4a47      	ldr	r2, [pc, #284]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006d06:	f043 0308 	orr.w	r3, r3, #8
 8006d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0c:	4b45      	ldr	r3, [pc, #276]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8006d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d26:	2303      	movs	r3, #3
 8006d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d32:	4619      	mov	r1, r3
 8006d34:	483c      	ldr	r0, [pc, #240]	; (8006e28 <HAL_UART_MspInit+0x1d8>)
 8006d36:	f001 fdf1 	bl	800891c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d46:	2303      	movs	r3, #3
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d52:	4619      	mov	r1, r3
 8006d54:	4836      	ldr	r0, [pc, #216]	; (8006e30 <HAL_UART_MspInit+0x1e0>)
 8006d56:	f001 fde1 	bl	800891c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006d5a:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d5c:	4a36      	ldr	r2, [pc, #216]	; (8006e38 <HAL_UART_MspInit+0x1e8>)
 8006d5e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006d60:	4b34      	ldr	r3, [pc, #208]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d66:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d68:	4b32      	ldr	r3, [pc, #200]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d6e:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d74:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d7a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d82:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006d88:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d8e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d96:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006d9c:	4825      	ldr	r0, [pc, #148]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006d9e:	f001 f9b5 	bl	800810c <HAL_DMA_Init>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8006da8:	f7fd f9fe 	bl	80041a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a21      	ldr	r2, [pc, #132]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006db0:	66da      	str	r2, [r3, #108]	; 0x6c
 8006db2:	4a20      	ldr	r2, [pc, #128]	; (8006e34 <HAL_UART_MspInit+0x1e4>)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006db8:	e02d      	b.n	8006e16 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <HAL_UART_MspInit+0x1ec>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d128      	bne.n	8006e16 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006dc4:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dce:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ddc:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	4a10      	ldr	r2, [pc, #64]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006de2:	f043 0310 	orr.w	r3, r3, #16
 8006de6:	6313      	str	r3, [r2, #48]	; 0x30
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <HAL_UART_MspInit+0x1d4>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8006df4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e02:	2303      	movs	r3, #3
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006e06:	2308      	movs	r3, #8
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e0e:	4619      	mov	r1, r3
 8006e10:	480b      	ldr	r0, [pc, #44]	; (8006e40 <HAL_UART_MspInit+0x1f0>)
 8006e12:	f001 fd83 	bl	800891c <HAL_GPIO_Init>
}
 8006e16:	bf00      	nop
 8006e18:	3738      	adds	r7, #56	; 0x38
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40004c00 	.word	0x40004c00
 8006e24:	40023800 	.word	0x40023800
 8006e28:	40020800 	.word	0x40020800
 8006e2c:	40005000 	.word	0x40005000
 8006e30:	40020c00 	.word	0x40020c00
 8006e34:	20023fe4 	.word	0x20023fe4
 8006e38:	40026010 	.word	0x40026010
 8006e3c:	40007800 	.word	0x40007800
 8006e40:	40021000 	.word	0x40021000

08006e44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	609a      	str	r2, [r3, #8]
 8006e58:	60da      	str	r2, [r3, #12]
 8006e5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e64:	d134      	bne.n	8006ed0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e66:	4b1c      	ldr	r3, [pc, #112]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	4a1b      	ldr	r2, [pc, #108]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	6313      	str	r3, [r2, #48]	; 0x30
 8006e72:	4b19      	ldr	r3, [pc, #100]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8006e7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e84:	2302      	movs	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e90:	230a      	movs	r3, #10
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4810      	ldr	r0, [pc, #64]	; (8006edc <HAL_PCD_MspInit+0x98>)
 8006e9c:	f001 fd3e 	bl	800891c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eaa:	6353      	str	r3, [r2, #52]	; 0x34
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebc:	4a06      	ldr	r2, [pc, #24]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <HAL_PCD_MspInit+0x94>)
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006ed0:	bf00      	nop
 8006ed2:	3728      	adds	r7, #40	; 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	40020000 	.word	0x40020000

08006ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	2036      	movs	r0, #54	; 0x36
 8006ef6:	f001 f8df 	bl	80080b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006efa:	2036      	movs	r0, #54	; 0x36
 8006efc:	f001 f8f8 	bl	80080f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006f00:	4b1f      	ldr	r3, [pc, #124]	; (8006f80 <HAL_InitTick+0xa0>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <HAL_InitTick+0xa0>)
 8006f06:	f043 0310 	orr.w	r3, r3, #16
 8006f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <HAL_InitTick+0xa0>)
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	f003 0310 	and.w	r3, r3, #16
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f18:	f107 0210 	add.w	r2, r7, #16
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4611      	mov	r1, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f003 f9de 	bl	800a2e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006f28:	f003 f9b4 	bl	800a294 <HAL_RCC_GetPCLK1Freq>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <HAL_InitTick+0xa4>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	0c9b      	lsrs	r3, r3, #18
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006f40:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f42:	4a12      	ldr	r2, [pc, #72]	; (8006f8c <HAL_InitTick+0xac>)
 8006f44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006f4e:	4a0e      	ldr	r2, [pc, #56]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006f60:	4809      	ldr	r0, [pc, #36]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f62:	f004 faf3 	bl	800b54c <HAL_TIM_Base_Init>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006f6c:	4806      	ldr	r0, [pc, #24]	; (8006f88 <HAL_InitTick+0xa8>)
 8006f6e:	f004 fb19 	bl	800b5a4 <HAL_TIM_Base_Start_IT>
 8006f72:	4603      	mov	r3, r0
 8006f74:	e000      	b.n	8006f78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3730      	adds	r7, #48	; 0x30
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40023800 	.word	0x40023800
 8006f84:	431bde83 	.word	0x431bde83
 8006f88:	200240a0 	.word	0x200240a0
 8006f8c:	40001000 	.word	0x40001000

08006f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f94:	e7fe      	b.n	8006f94 <NMI_Handler+0x4>

08006f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f96:	b480      	push	{r7}
 8006f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f9a:	e7fe      	b.n	8006f9a <HardFault_Handler+0x4>

08006f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fa0:	e7fe      	b.n	8006fa0 <MemManage_Handler+0x4>

08006fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fa6:	e7fe      	b.n	8006fa6 <BusFault_Handler+0x4>

08006fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fac:	e7fe      	b.n	8006fac <UsageFault_Handler+0x4>

08006fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fb2:	bf00      	nop
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f001 fea1 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(inputButtonSet>buttonPriority.back){
 8006fc6:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <EXTI4_IRQHandler+0x28>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <EXTI4_IRQHandler+0x2c>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	dd04      	ble.n	8006fde <EXTI4_IRQHandler+0x22>
	  inputButtonSet = buttonPriority.back;
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <EXTI4_IRQHandler+0x2c>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <EXTI4_IRQHandler+0x28>)
 8006fdc:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200000a4 	.word	0x200000a4
 8006fe8:	20000148 	.word	0x20000148

08006fec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006ff0:	4802      	ldr	r0, [pc, #8]	; (8006ffc <DMA1_Stream0_IRQHandler+0x10>)
 8006ff2:	f001 fa2b 	bl	800844c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20023fe4 	.word	0x20023fe4

08007000 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007004:	4805      	ldr	r0, [pc, #20]	; (800701c <ADC_IRQHandler+0x1c>)
 8007006:	f000 fa37 	bl	8007478 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800700a:	4805      	ldr	r0, [pc, #20]	; (8007020 <ADC_IRQHandler+0x20>)
 800700c:	f000 fa34 	bl	8007478 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8007010:	4804      	ldr	r0, [pc, #16]	; (8007024 <ADC_IRQHandler+0x24>)
 8007012:	f000 fa31 	bl	8007478 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007016:	bf00      	nop
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20013254 	.word	0x20013254
 8007020:	2001053c 	.word	0x2001053c
 8007024:	200132a0 	.word	0x200132a0

08007028 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 800702e:	2120      	movs	r1, #32
 8007030:	482a      	ldr	r0, [pc, #168]	; (80070dc <EXTI9_5_IRQHandler+0xb4>)
 8007032:	f001 fe1d 	bl	8008c70 <HAL_GPIO_ReadPin>
 8007036:	4603      	mov	r3, r0
 8007038:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 800703a:	2140      	movs	r1, #64	; 0x40
 800703c:	4827      	ldr	r0, [pc, #156]	; (80070dc <EXTI9_5_IRQHandler+0xb4>)
 800703e:	f001 fe17 	bl	8008c70 <HAL_GPIO_ReadPin>
 8007042:	4603      	mov	r3, r0
 8007044:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	4824      	ldr	r0, [pc, #144]	; (80070dc <EXTI9_5_IRQHandler+0xb4>)
 800704a:	f001 fe11 	bl	8008c70 <HAL_GPIO_ReadPin>
 800704e:	4603      	mov	r3, r0
 8007050:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){ //up button
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <EXTI9_5_IRQHandler+0xb8>)
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00c      	beq.n	8007078 <EXTI9_5_IRQHandler+0x50>
		if(inputButtonSet > buttonPriority.up){
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <EXTI9_5_IRQHandler+0xbc>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <EXTI9_5_IRQHandler+0xc0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	dd2a      	ble.n	80070c2 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <EXTI9_5_IRQHandler+0xc0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	b2da      	uxtb	r2, r3
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <EXTI9_5_IRQHandler+0xbc>)
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	e024      	b.n	80070c2 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){ //sel button
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <EXTI9_5_IRQHandler+0xb8>)
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00c      	beq.n	800709e <EXTI9_5_IRQHandler+0x76>
		if(inputButtonSet > buttonPriority.sel){
 8007084:	4b17      	ldr	r3, [pc, #92]	; (80070e4 <EXTI9_5_IRQHandler+0xbc>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <EXTI9_5_IRQHandler+0xc0>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	429a      	cmp	r2, r3
 8007090:	dd17      	ble.n	80070c2 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <EXTI9_5_IRQHandler+0xc0>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <EXTI9_5_IRQHandler+0xbc>)
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e011      	b.n	80070c2 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){ //down button
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <EXTI9_5_IRQHandler+0xb8>)
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <EXTI9_5_IRQHandler+0xbc>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <EXTI9_5_IRQHandler+0xc0>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	dd04      	ble.n	80070c2 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <EXTI9_5_IRQHandler+0xc0>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <EXTI9_5_IRQHandler+0xbc>)
 80070c0:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80070c2:	2020      	movs	r0, #32
 80070c4:	f001 fe20 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80070c8:	2040      	movs	r0, #64	; 0x40
 80070ca:	f001 fe1d 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80070ce:	2080      	movs	r0, #128	; 0x80
 80070d0:	f001 fe1a 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40022800 	.word	0x40022800
 80070e0:	40013c00 	.word	0x40013c00
 80070e4:	200000a4 	.word	0x200000a4
 80070e8:	20000148 	.word	0x20000148

080070ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <TIM6_DAC_IRQHandler+0x10>)
 80070f2:	f004 fab6 	bl	800b662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200240a0 	.word	0x200240a0

08007100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007104:	4805      	ldr	r0, [pc, #20]	; (800711c <DMA2_Stream0_IRQHandler+0x1c>)
 8007106:	f001 f9a1 	bl	800844c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800710a:	4805      	ldr	r0, [pc, #20]	; (8007120 <DMA2_Stream0_IRQHandler+0x20>)
 800710c:	f000 fbe4 	bl	80078d8 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <DMA2_Stream0_IRQHandler+0x24>)
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200132e8 	.word	0x200132e8
 8007120:	20013254 	.word	0x20013254
 8007124:	20010a80 	.word	0x20010a80

08007128 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800712c:	4805      	ldr	r0, [pc, #20]	; (8007144 <DMA2_Stream1_IRQHandler+0x1c>)
 800712e:	f001 f98d 	bl	800844c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8007132:	4805      	ldr	r0, [pc, #20]	; (8007148 <DMA2_Stream1_IRQHandler+0x20>)
 8007134:	f000 fbd0 	bl	80078d8 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 8007138:	4b04      	ldr	r3, [pc, #16]	; (800714c <DMA2_Stream1_IRQHandler+0x24>)
 800713a:	2201      	movs	r2, #1
 800713c:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20010a20 	.word	0x20010a20
 8007148:	200132a0 	.word	0x200132a0
 800714c:	20010a80 	.word	0x20010a80

08007150 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007154:	4805      	ldr	r0, [pc, #20]	; (800716c <DMA2_Stream2_IRQHandler+0x1c>)
 8007156:	f001 f979 	bl	800844c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 800715a:	4805      	ldr	r0, [pc, #20]	; (8007170 <DMA2_Stream2_IRQHandler+0x20>)
 800715c:	f000 fbbc 	bl	80078d8 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <DMA2_Stream2_IRQHandler+0x24>)
 8007162:	2201      	movs	r2, #1
 8007164:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007166:	bf00      	nop
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20023f84 	.word	0x20023f84
 8007170:	2001053c 	.word	0x2001053c
 8007174:	20010a80 	.word	0x20010a80

08007178 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800717c:	4802      	ldr	r0, [pc, #8]	; (8007188 <SPI4_IRQHandler+0x10>)
 800717e:	f003 ffa9 	bl	800b0d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20010310 	.word	0x20010310

0800718c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e00a      	b.n	80071b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800719e:	f3af 8000 	nop.w
 80071a2:	4601      	mov	r1, r0
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	60ba      	str	r2, [r7, #8]
 80071aa:	b2ca      	uxtb	r2, r1
 80071ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3301      	adds	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	dbf0      	blt.n	800719e <_read+0x12>
	}

return len;
 80071bc:	687b      	ldr	r3, [r7, #4]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	e009      	b.n	80071ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	60ba      	str	r2, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fb fe59 	bl	8002e98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	3301      	adds	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	dbf1      	blt.n	80071d8 <_write+0x12>
	}
	return len;
 80071f4:	687b      	ldr	r3, [r7, #4]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <_close>:

int _close(int file)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
	return -1;
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007226:	605a      	str	r2, [r3, #4]
	return 0;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <_isatty>:

int _isatty(int file)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
	return 1;
 800723e:	2301      	movs	r3, #1
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
	return 0;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
	...

08007268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007270:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <_sbrk+0x5c>)
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <_sbrk+0x60>)
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800727c:	4b13      	ldr	r3, [pc, #76]	; (80072cc <_sbrk+0x64>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <_sbrk+0x64>)
 8007286:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <_sbrk+0x68>)
 8007288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <_sbrk+0x64>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	429a      	cmp	r2, r3
 8007296:	d207      	bcs.n	80072a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007298:	f008 ff80 	bl	801019c <__errno>
 800729c:	4602      	mov	r2, r0
 800729e:	230c      	movs	r3, #12
 80072a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80072a2:	f04f 33ff 	mov.w	r3, #4294967295
 80072a6:	e009      	b.n	80072bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <_sbrk+0x64>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <_sbrk+0x64>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4413      	add	r3, r2
 80072b6:	4a05      	ldr	r2, [pc, #20]	; (80072cc <_sbrk+0x64>)
 80072b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20080000 	.word	0x20080000
 80072c8:	00000400 	.word	0x00000400
 80072cc:	200032a4 	.word	0x200032a4
 80072d0:	20024128 	.word	0x20024128

080072d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <SystemInit+0x28>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072de:	4a07      	ldr	r2, [pc, #28]	; (80072fc <SystemInit+0x28>)
 80072e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072e8:	4b04      	ldr	r3, [pc, #16]	; (80072fc <SystemInit+0x28>)
 80072ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072ee:	609a      	str	r2, [r3, #8]
#endif
}
 80072f0:	bf00      	nop
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000ed00 	.word	0xe000ed00

08007300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007338 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007304:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007306:	e003      	b.n	8007310 <LoopCopyDataInit>

08007308 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800730a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800730c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800730e:	3104      	adds	r1, #4

08007310 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007310:	480b      	ldr	r0, [pc, #44]	; (8007340 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007314:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007316:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007318:	d3f6      	bcc.n	8007308 <CopyDataInit>
  ldr  r2, =_sbss
 800731a:	4a0b      	ldr	r2, [pc, #44]	; (8007348 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800731c:	e002      	b.n	8007324 <LoopFillZerobss>

0800731e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800731e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007320:	f842 3b04 	str.w	r3, [r2], #4

08007324 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007326:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007328:	d3f9      	bcc.n	800731e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800732a:	f7ff ffd3 	bl	80072d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800732e:	f008 ff3b 	bl	80101a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007332:	f7fa fce3 	bl	8001cfc <main>
  bx  lr    
 8007336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007338:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800733c:	08015238 	.word	0x08015238
  ldr  r0, =_sdata
 8007340:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007344:	20000338 	.word	0x20000338
  ldr  r2, =_sbss
 8007348:	20000338 	.word	0x20000338
  ldr  r3, = _ebss
 800734c:	20024128 	.word	0x20024128

08007350 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007350:	e7fe      	b.n	8007350 <CAN1_RX0_IRQHandler>

08007352 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007356:	2003      	movs	r0, #3
 8007358:	f000 fea3 	bl	80080a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800735c:	2000      	movs	r0, #0
 800735e:	f7ff fdbf 	bl	8006ee0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007362:	f7ff f81f 	bl	80063a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007370:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_IncTick+0x20>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <HAL_IncTick+0x24>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4413      	add	r3, r2
 800737c:	4a04      	ldr	r2, [pc, #16]	; (8007390 <HAL_IncTick+0x24>)
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000160 	.word	0x20000160
 8007390:	200240e0 	.word	0x200240e0

08007394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  return uwTick;
 8007398:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <HAL_GetTick+0x14>)
 800739a:	681b      	ldr	r3, [r3, #0]
}
 800739c:	4618      	mov	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	200240e0 	.word	0x200240e0

080073ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073b4:	f7ff ffee 	bl	8007394 <HAL_GetTick>
 80073b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d005      	beq.n	80073d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <HAL_Delay+0x40>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073d2:	bf00      	nop
 80073d4:	f7ff ffde 	bl	8007394 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d8f7      	bhi.n	80073d4 <HAL_Delay+0x28>
  {
  }
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000160 	.word	0x20000160

080073f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e031      	b.n	800746a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fe fff0 	bl	80063f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b00      	cmp	r3, #0
 800742c:	d116      	bne.n	800745c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <HAL_ADC_Init+0x84>)
 8007434:	4013      	ands	r3, r2
 8007436:	f043 0202 	orr.w	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fbfc 	bl	8007c3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	f043 0201 	orr.w	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	641a      	str	r2, [r3, #64]	; 0x40
 800745a:	e001      	b.n	8007460 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	ffffeefd 	.word	0xffffeefd

08007478 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	2300      	movs	r3, #0
 8007486:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b02      	cmp	r3, #2
 8007494:	bf0c      	ite	eq
 8007496:	2301      	moveq	r3, #1
 8007498:	2300      	movne	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	bf0c      	ite	eq
 80074ac:	2301      	moveq	r3, #1
 80074ae:	2300      	movne	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d049      	beq.n	800754e <HAL_ADC_IRQHandler+0xd6>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d046      	beq.n	800754e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d12b      	bne.n	800753e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d127      	bne.n	800753e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007506:	2b00      	cmp	r3, #0
 8007508:	d119      	bne.n	800753e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0220 	bic.w	r2, r2, #32
 8007518:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f043 0201 	orr.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fc fc08 	bl	8003d54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0212 	mvn.w	r2, #18
 800754c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b04      	cmp	r3, #4
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d057      	beq.n	8007630 <HAL_ADC_IRQHandler+0x1b8>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d054      	beq.n	8007630 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d139      	bne.n	8007620 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d006      	beq.n	80075c8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d12b      	bne.n	8007620 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d124      	bne.n	8007620 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d11d      	bne.n	8007620 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d119      	bne.n	8007620 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f043 0201 	orr.w	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc87 	bl	8007f34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f06f 020c 	mvn.w	r2, #12
 800762e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b01      	cmp	r3, #1
 800763c:	bf0c      	ite	eq
 800763e:	2301      	moveq	r3, #1
 8007640:	2300      	movne	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d017      	beq.n	8007692 <HAL_ADC_IRQHandler+0x21a>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d014      	beq.n	8007692 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b01      	cmp	r3, #1
 8007674:	d10d      	bne.n	8007692 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f97c 	bl	8007980 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 0201 	mvn.w	r2, #1
 8007690:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b20      	cmp	r3, #32
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076b6:	bf0c      	ite	eq
 80076b8:	2301      	moveq	r3, #1
 80076ba:	2300      	movne	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d015      	beq.n	80076f2 <HAL_ADC_IRQHandler+0x27a>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d012      	beq.n	80076f2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d0:	f043 0202 	orr.w	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0220 	mvn.w	r2, #32
 80076e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f956 	bl	8007994 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0220 	mvn.w	r2, #32
 80076f0:	601a      	str	r2, [r3, #0]
  }
}
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_ADC_Start_DMA+0x1e>
 8007716:	2302      	movs	r3, #2
 8007718:	e0c7      	b.n	80078aa <HAL_ADC_Start_DMA+0x1ae>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b01      	cmp	r3, #1
 800772e:	d018      	beq.n	8007762 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007740:	4b5c      	ldr	r3, [pc, #368]	; (80078b4 <HAL_ADC_Start_DMA+0x1b8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a5c      	ldr	r2, [pc, #368]	; (80078b8 <HAL_ADC_Start_DMA+0x1bc>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	0c9a      	lsrs	r2, r3, #18
 800774c:	4613      	mov	r3, r2
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007754:	e002      	b.n	800775c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	3b01      	subs	r3, #1
 800775a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f9      	bne.n	8007756 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	f040 809b 	bne.w	80078a8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007776:	4b51      	ldr	r3, [pc, #324]	; (80078bc <HAL_ADC_Start_DMA+0x1c0>)
 8007778:	4013      	ands	r3, r2
 800777a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007798:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ac:	d106      	bne.n	80077bc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	f023 0206 	bic.w	r2, r3, #6
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	645a      	str	r2, [r3, #68]	; 0x44
 80077ba:	e002      	b.n	80077c2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	4a3c      	ldr	r2, [pc, #240]	; (80078c0 <HAL_ADC_Start_DMA+0x1c4>)
 80077d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	4a3b      	ldr	r2, [pc, #236]	; (80078c4 <HAL_ADC_Start_DMA+0x1c8>)
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	4a3a      	ldr	r2, [pc, #232]	; (80078c8 <HAL_ADC_Start_DMA+0x1cc>)
 80077e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80077ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80077fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800780a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	334c      	adds	r3, #76	; 0x4c
 8007816:	4619      	mov	r1, r3
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f000 fd24 	bl	8008268 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007820:	4b2a      	ldr	r3, [pc, #168]	; (80078cc <HAL_ADC_Start_DMA+0x1d0>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10f      	bne.n	800784c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d136      	bne.n	80078a8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007848:	609a      	str	r2, [r3, #8]
 800784a:	e02d      	b.n	80078a8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <HAL_ADC_Start_DMA+0x1d4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10e      	bne.n	8007874 <HAL_ADC_Start_DMA+0x178>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d107      	bne.n	8007874 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007872:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007874:	4b15      	ldr	r3, [pc, #84]	; (80078cc <HAL_ADC_Start_DMA+0x1d0>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d113      	bne.n	80078a8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a13      	ldr	r2, [pc, #76]	; (80078d4 <HAL_ADC_Start_DMA+0x1d8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d10e      	bne.n	80078a8 <HAL_ADC_Start_DMA+0x1ac>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078a6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000158 	.word	0x20000158
 80078b8:	431bde83 	.word	0x431bde83
 80078bc:	fffff8fe 	.word	0xfffff8fe
 80078c0:	08007e31 	.word	0x08007e31
 80078c4:	08007eeb 	.word	0x08007eeb
 80078c8:	08007f07 	.word	0x08007f07
 80078cc:	40012300 	.word	0x40012300
 80078d0:	40012000 	.word	0x40012000
 80078d4:	40012200 	.word	0x40012200

080078d8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_ADC_Stop_DMA+0x1a>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e036      	b.n	8007960 <HAL_ADC_Stop_DMA+0x88>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11e      	bne.n	8007956 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007926:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fcfb 	bl	8008328 <HAL_DMA_Abort>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007944:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800794a:	4b07      	ldr	r3, [pc, #28]	; (8007968 <HAL_ADC_Stop_DMA+0x90>)
 800794c:	4013      	ands	r3, r2
 800794e:	f043 0201 	orr.w	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	ffffeefe 	.word	0xffffeefe

0800796c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_ADC_ConfigChannel+0x1c>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e12a      	b.n	8007c1a <HAL_ADC_ConfigChannel+0x272>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b09      	cmp	r3, #9
 80079d2:	d93a      	bls.n	8007a4a <HAL_ADC_ConfigChannel+0xa2>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079dc:	d035      	beq.n	8007a4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68d9      	ldr	r1, [r3, #12]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	4613      	mov	r3, r2
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	4413      	add	r3, r2
 80079f2:	3b1e      	subs	r3, #30
 80079f4:	2207      	movs	r2, #7
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43da      	mvns	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	400a      	ands	r2, r1
 8007a02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a87      	ldr	r2, [pc, #540]	; (8007c28 <HAL_ADC_ConfigChannel+0x280>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d10a      	bne.n	8007a24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68d9      	ldr	r1, [r3, #12]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	061a      	lsls	r2, r3, #24
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a22:	e035      	b.n	8007a90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68d9      	ldr	r1, [r3, #12]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	4618      	mov	r0, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	4403      	add	r3, r0
 8007a3c:	3b1e      	subs	r3, #30
 8007a3e:	409a      	lsls	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a48:	e022      	b.n	8007a90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6919      	ldr	r1, [r3, #16]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	4613      	mov	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2207      	movs	r2, #7
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	43da      	mvns	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6919      	ldr	r1, [r3, #16]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	4618      	mov	r0, r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	4403      	add	r3, r0
 8007a86:	409a      	lsls	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b06      	cmp	r3, #6
 8007a96:	d824      	bhi.n	8007ae2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3b05      	subs	r3, #5
 8007aaa:	221f      	movs	r2, #31
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	43da      	mvns	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	400a      	ands	r2, r1
 8007ab8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3b05      	subs	r3, #5
 8007ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	635a      	str	r2, [r3, #52]	; 0x34
 8007ae0:	e04c      	b.n	8007b7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b0c      	cmp	r3, #12
 8007ae8:	d824      	bhi.n	8007b34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	3b23      	subs	r3, #35	; 0x23
 8007afc:	221f      	movs	r2, #31
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	43da      	mvns	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	400a      	ands	r2, r1
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4618      	mov	r0, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	3b23      	subs	r3, #35	; 0x23
 8007b26:	fa00 f203 	lsl.w	r2, r0, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30
 8007b32:	e023      	b.n	8007b7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	3b41      	subs	r3, #65	; 0x41
 8007b46:	221f      	movs	r2, #31
 8007b48:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4c:	43da      	mvns	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	400a      	ands	r2, r1
 8007b54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4618      	mov	r0, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3b41      	subs	r3, #65	; 0x41
 8007b70:	fa00 f203 	lsl.w	r2, r0, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2a      	ldr	r2, [pc, #168]	; (8007c2c <HAL_ADC_ConfigChannel+0x284>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10a      	bne.n	8007b9c <HAL_ADC_ConfigChannel+0x1f4>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b8e:	d105      	bne.n	8007b9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007b90:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <HAL_ADC_ConfigChannel+0x288>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <HAL_ADC_ConfigChannel+0x288>)
 8007b96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007b9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a22      	ldr	r2, [pc, #136]	; (8007c2c <HAL_ADC_ConfigChannel+0x284>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d109      	bne.n	8007bba <HAL_ADC_ConfigChannel+0x212>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b12      	cmp	r3, #18
 8007bac:	d105      	bne.n	8007bba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007bae:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <HAL_ADC_ConfigChannel+0x288>)
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4a1f      	ldr	r2, [pc, #124]	; (8007c30 <HAL_ADC_ConfigChannel+0x288>)
 8007bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007bb8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <HAL_ADC_ConfigChannel+0x284>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d125      	bne.n	8007c10 <HAL_ADC_ConfigChannel+0x268>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <HAL_ADC_ConfigChannel+0x280>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <HAL_ADC_ConfigChannel+0x22e>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b11      	cmp	r3, #17
 8007bd4:	d11c      	bne.n	8007c10 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007bd6:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <HAL_ADC_ConfigChannel+0x288>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <HAL_ADC_ConfigChannel+0x288>)
 8007bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007be0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <HAL_ADC_ConfigChannel+0x280>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d111      	bne.n	8007c10 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007bec:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <HAL_ADC_ConfigChannel+0x28c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a11      	ldr	r2, [pc, #68]	; (8007c38 <HAL_ADC_ConfigChannel+0x290>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	0c9a      	lsrs	r2, r3, #18
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007c02:	e002      	b.n	8007c0a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f9      	bne.n	8007c04 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	10000012 	.word	0x10000012
 8007c2c:	40012000 	.word	0x40012000
 8007c30:	40012300 	.word	0x40012300
 8007c34:	20000158 	.word	0x20000158
 8007c38:	431bde83 	.word	0x431bde83

08007c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007c44:	4b78      	ldr	r3, [pc, #480]	; (8007e28 <ADC_Init+0x1ec>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4a77      	ldr	r2, [pc, #476]	; (8007e28 <ADC_Init+0x1ec>)
 8007c4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007c4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007c50:	4b75      	ldr	r3, [pc, #468]	; (8007e28 <ADC_Init+0x1ec>)
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	4973      	ldr	r1, [pc, #460]	; (8007e28 <ADC_Init+0x1ec>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6859      	ldr	r1, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	021a      	lsls	r2, r3, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6859      	ldr	r1, [r3, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6899      	ldr	r1, [r3, #8]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	4a58      	ldr	r2, [pc, #352]	; (8007e2c <ADC_Init+0x1f0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d022      	beq.n	8007d16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6899      	ldr	r1, [r3, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6899      	ldr	r1, [r3, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	e00f      	b.n	8007d36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0202 	bic.w	r2, r2, #2
 8007d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6899      	ldr	r1, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	005a      	lsls	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01b      	beq.n	8007d9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6859      	ldr	r1, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	035a      	lsls	r2, r3, #13
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
 8007d9a:	e007      	b.n	8007dac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007daa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	051a      	lsls	r2, r3, #20
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dee:	025a      	lsls	r2, r3, #9
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6899      	ldr	r1, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	029a      	lsls	r2, r3, #10
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	40012300 	.word	0x40012300
 8007e2c:	0f000001 	.word	0x0f000001

08007e30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d13c      	bne.n	8007ec4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d12b      	bne.n	8007ebc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d127      	bne.n	8007ebc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d006      	beq.n	8007e88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d119      	bne.n	8007ebc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0220 	bic.w	r2, r2, #32
 8007e96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d105      	bne.n	8007ebc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	f043 0201 	orr.w	r2, r3, #1
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7fb ff49 	bl	8003d54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007ec2:	e00e      	b.n	8007ee2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff fd5f 	bl	8007994 <HAL_ADC_ErrorCallback>
}
 8007ed6:	e004      	b.n	8007ee2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fd37 	bl	800796c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2240      	movs	r2, #64	; 0x40
 8007f18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	f043 0204 	orr.w	r2, r3, #4
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fd34 	bl	8007994 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <__NVIC_SetPriorityGrouping+0x40>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f64:	4013      	ands	r3, r2
 8007f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007f70:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <__NVIC_SetPriorityGrouping+0x44>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f76:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <__NVIC_SetPriorityGrouping+0x40>)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	60d3      	str	r3, [r2, #12]
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	e000ed00 	.word	0xe000ed00
 8007f8c:	05fa0000 	.word	0x05fa0000

08007f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	0a1b      	lsrs	r3, r3, #8
 8007f9a:	f003 0307 	and.w	r3, r3, #7
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	e000ed00 	.word	0xe000ed00

08007fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	db0b      	blt.n	8007fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	f003 021f 	and.w	r2, r3, #31
 8007fc4:	4907      	ldr	r1, [pc, #28]	; (8007fe4 <__NVIC_EnableIRQ+0x38>)
 8007fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	2001      	movs	r0, #1
 8007fce:	fa00 f202 	lsl.w	r2, r0, r2
 8007fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	e000e100 	.word	0xe000e100

08007fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	db0a      	blt.n	8008012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	490c      	ldr	r1, [pc, #48]	; (8008034 <__NVIC_SetPriority+0x4c>)
 8008002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008006:	0112      	lsls	r2, r2, #4
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	440b      	add	r3, r1
 800800c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008010:	e00a      	b.n	8008028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	b2da      	uxtb	r2, r3
 8008016:	4908      	ldr	r1, [pc, #32]	; (8008038 <__NVIC_SetPriority+0x50>)
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	3b04      	subs	r3, #4
 8008020:	0112      	lsls	r2, r2, #4
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	440b      	add	r3, r1
 8008026:	761a      	strb	r2, [r3, #24]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	e000e100 	.word	0xe000e100
 8008038:	e000ed00 	.word	0xe000ed00

0800803c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800803c:	b480      	push	{r7}
 800803e:	b089      	sub	sp, #36	; 0x24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f1c3 0307 	rsb	r3, r3, #7
 8008056:	2b04      	cmp	r3, #4
 8008058:	bf28      	it	cs
 800805a:	2304      	movcs	r3, #4
 800805c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	3304      	adds	r3, #4
 8008062:	2b06      	cmp	r3, #6
 8008064:	d902      	bls.n	800806c <NVIC_EncodePriority+0x30>
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	3b03      	subs	r3, #3
 800806a:	e000      	b.n	800806e <NVIC_EncodePriority+0x32>
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008070:	f04f 32ff 	mov.w	r2, #4294967295
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	43da      	mvns	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	401a      	ands	r2, r3
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008084:	f04f 31ff 	mov.w	r1, #4294967295
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	fa01 f303 	lsl.w	r3, r1, r3
 800808e:	43d9      	mvns	r1, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008094:	4313      	orrs	r3, r2
         );
}
 8008096:	4618      	mov	r0, r3
 8008098:	3724      	adds	r7, #36	; 0x24
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff ff4c 	bl	8007f48 <__NVIC_SetPriorityGrouping>
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080ca:	f7ff ff61 	bl	8007f90 <__NVIC_GetPriorityGrouping>
 80080ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	6978      	ldr	r0, [r7, #20]
 80080d6:	f7ff ffb1 	bl	800803c <NVIC_EncodePriority>
 80080da:	4602      	mov	r2, r0
 80080dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff ff80 	bl	8007fe8 <__NVIC_SetPriority>
}
 80080e8:	bf00      	nop
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff ff54 	bl	8007fac <__NVIC_EnableIRQ>
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008118:	f7ff f93c 	bl	8007394 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e099      	b.n	800825c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008148:	e00f      	b.n	800816a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800814a:	f7ff f923 	bl	8007394 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b05      	cmp	r3, #5
 8008156:	d908      	bls.n	800816a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2203      	movs	r2, #3
 8008162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e078      	b.n	800825c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e8      	bne.n	800814a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4b38      	ldr	r3, [pc, #224]	; (8008264 <HAL_DMA_Init+0x158>)
 8008184:	4013      	ands	r3, r2
 8008186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d107      	bne.n	80081d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	4313      	orrs	r3, r2
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d117      	bne.n	800822e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00e      	beq.n	800822e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fb09 	bl	8008828 <DMA_CheckFifoParam>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2240      	movs	r2, #64	; 0x40
 8008220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800822a:	2301      	movs	r3, #1
 800822c:	e016      	b.n	800825c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fac0 	bl	80087bc <DMA_CalcBaseAndBitshift>
 800823c:	4603      	mov	r3, r0
 800823e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008244:	223f      	movs	r2, #63	; 0x3f
 8008246:	409a      	lsls	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	e010803f 	.word	0xe010803f

08008268 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <HAL_DMA_Start_IT+0x26>
 800828a:	2302      	movs	r3, #2
 800828c:	e048      	b.n	8008320 <HAL_DMA_Start_IT+0xb8>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d137      	bne.n	8008312 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2202      	movs	r2, #2
 80082a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fa52 	bl	8008760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c0:	223f      	movs	r2, #63	; 0x3f
 80082c2:	409a      	lsls	r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0216 	orr.w	r2, r2, #22
 80082d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0208 	orr.w	r2, r2, #8
 80082fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e005      	b.n	800831e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800831a:	2302      	movs	r3, #2
 800831c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008336:	f7ff f82d 	bl	8007394 <HAL_GetTick>
 800833a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d008      	beq.n	800835a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2280      	movs	r2, #128	; 0x80
 800834c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e052      	b.n	8008400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0216 	bic.w	r2, r2, #22
 8008368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695a      	ldr	r2, [r3, #20]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d103      	bne.n	800838a <HAL_DMA_Abort+0x62>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0208 	bic.w	r2, r2, #8
 8008398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0201 	bic.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80083aa:	e013      	b.n	80083d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80083ac:	f7fe fff2 	bl	8007394 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d90c      	bls.n	80083d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2203      	movs	r2, #3
 80083cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e015      	b.n	8008400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e4      	bne.n	80083ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e6:	223f      	movs	r2, #63	; 0x3f
 80083e8:	409a      	lsls	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d004      	beq.n	8008426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2280      	movs	r2, #128	; 0x80
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e00c      	b.n	8008440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2205      	movs	r2, #5
 800842a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008458:	4b92      	ldr	r3, [pc, #584]	; (80086a4 <HAL_DMA_IRQHandler+0x258>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a92      	ldr	r2, [pc, #584]	; (80086a8 <HAL_DMA_IRQHandler+0x25c>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	0a9b      	lsrs	r3, r3, #10
 8008464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008476:	2208      	movs	r2, #8
 8008478:	409a      	lsls	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4013      	ands	r3, r2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01a      	beq.n	80084b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d013      	beq.n	80084b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0204 	bic.w	r2, r2, #4
 800849e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	2208      	movs	r2, #8
 80084a6:	409a      	lsls	r2, r3
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b0:	f043 0201 	orr.w	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084bc:	2201      	movs	r2, #1
 80084be:	409a      	lsls	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4013      	ands	r3, r2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d012      	beq.n	80084ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084da:	2201      	movs	r2, #1
 80084dc:	409a      	lsls	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	f043 0202 	orr.w	r2, r3, #2
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f2:	2204      	movs	r2, #4
 80084f4:	409a      	lsls	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d012      	beq.n	8008524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008510:	2204      	movs	r2, #4
 8008512:	409a      	lsls	r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851c:	f043 0204 	orr.w	r2, r3, #4
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008528:	2210      	movs	r2, #16
 800852a:	409a      	lsls	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4013      	ands	r3, r2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d043      	beq.n	80085bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d03c      	beq.n	80085bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008546:	2210      	movs	r2, #16
 8008548:	409a      	lsls	r2, r3
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d018      	beq.n	800858e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d108      	bne.n	800857c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d024      	beq.n	80085bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
 800857a:	e01f      	b.n	80085bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01b      	beq.n	80085bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
 800858c:	e016      	b.n	80085bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	2b00      	cmp	r3, #0
 800859a:	d107      	bne.n	80085ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0208 	bic.w	r2, r2, #8
 80085aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c0:	2220      	movs	r2, #32
 80085c2:	409a      	lsls	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 808e 	beq.w	80086ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8086 	beq.w	80086ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e2:	2220      	movs	r2, #32
 80085e4:	409a      	lsls	r2, r3
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d136      	bne.n	8008664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0216 	bic.w	r2, r2, #22
 8008604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	695a      	ldr	r2, [r3, #20]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <HAL_DMA_IRQHandler+0x1da>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0208 	bic.w	r2, r2, #8
 8008634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863a:	223f      	movs	r2, #63	; 0x3f
 800863c:	409a      	lsls	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008656:	2b00      	cmp	r3, #0
 8008658:	d07d      	beq.n	8008756 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
        }
        return;
 8008662:	e078      	b.n	8008756 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01c      	beq.n	80086ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d108      	bne.n	8008692 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008684:	2b00      	cmp	r3, #0
 8008686:	d030      	beq.n	80086ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
 8008690:	e02b      	b.n	80086ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d027      	beq.n	80086ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
 80086a2:	e022      	b.n	80086ea <HAL_DMA_IRQHandler+0x29e>
 80086a4:	20000158 	.word	0x20000158
 80086a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10f      	bne.n	80086da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0210 	bic.w	r2, r2, #16
 80086c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d032      	beq.n	8008758 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d022      	beq.n	8008744 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2205      	movs	r2, #5
 8008702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0201 	bic.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3301      	adds	r3, #1
 800871a:	60bb      	str	r3, [r7, #8]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	429a      	cmp	r2, r3
 8008720:	d307      	bcc.n	8008732 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f2      	bne.n	8008716 <HAL_DMA_IRQHandler+0x2ca>
 8008730:	e000      	b.n	8008734 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008732:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
 8008754:	e000      	b.n	8008758 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008756:	bf00      	nop
    }
  }
}
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop

08008760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800877c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d108      	bne.n	80087a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800879e:	e007      	b.n	80087b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	60da      	str	r2, [r3, #12]
}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	3b10      	subs	r3, #16
 80087cc:	4a13      	ldr	r2, [pc, #76]	; (800881c <DMA_CalcBaseAndBitshift+0x60>)
 80087ce:	fba2 2303 	umull	r2, r3, r2, r3
 80087d2:	091b      	lsrs	r3, r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80087d6:	4a12      	ldr	r2, [pc, #72]	; (8008820 <DMA_CalcBaseAndBitshift+0x64>)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d908      	bls.n	80087fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <DMA_CalcBaseAndBitshift+0x68>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	659a      	str	r2, [r3, #88]	; 0x58
 80087fa:	e006      	b.n	800880a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	4b08      	ldr	r3, [pc, #32]	; (8008824 <DMA_CalcBaseAndBitshift+0x68>)
 8008804:	4013      	ands	r3, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	aaaaaaab 	.word	0xaaaaaaab
 8008820:	08014f00 	.word	0x08014f00
 8008824:	fffffc00 	.word	0xfffffc00

08008828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d11f      	bne.n	8008882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b03      	cmp	r3, #3
 8008846:	d855      	bhi.n	80088f4 <DMA_CheckFifoParam+0xcc>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <DMA_CheckFifoParam+0x28>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008861 	.word	0x08008861
 8008854:	08008873 	.word	0x08008873
 8008858:	08008861 	.word	0x08008861
 800885c:	080088f5 	.word	0x080088f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d045      	beq.n	80088f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008870:	e042      	b.n	80088f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800887a:	d13f      	bne.n	80088fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008880:	e03c      	b.n	80088fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888a:	d121      	bne.n	80088d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b03      	cmp	r3, #3
 8008890:	d836      	bhi.n	8008900 <DMA_CheckFifoParam+0xd8>
 8008892:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <DMA_CheckFifoParam+0x70>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088a9 	.word	0x080088a9
 800889c:	080088af 	.word	0x080088af
 80088a0:	080088a9 	.word	0x080088a9
 80088a4:	080088c1 	.word	0x080088c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e02f      	b.n	800890e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d024      	beq.n	8008904 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088be:	e021      	b.n	8008904 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088c8:	d11e      	bne.n	8008908 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80088ce:	e01b      	b.n	8008908 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d902      	bls.n	80088dc <DMA_CheckFifoParam+0xb4>
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d003      	beq.n	80088e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80088da:	e018      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
      break;
 80088e0:	e015      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	e00b      	b.n	800890c <DMA_CheckFifoParam+0xe4>
      break;
 80088f4:	bf00      	nop
 80088f6:	e00a      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      break;
 80088f8:	bf00      	nop
 80088fa:	e008      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      break;
 80088fc:	bf00      	nop
 80088fe:	e006      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      break;
 8008900:	bf00      	nop
 8008902:	e004      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      break;
 8008904:	bf00      	nop
 8008906:	e002      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      break;   
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <DMA_CheckFifoParam+0xe6>
      break;
 800890c:	bf00      	nop
    }
  } 
  
  return status; 
 800890e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800891c:	b480      	push	{r7}
 800891e:	b089      	sub	sp, #36	; 0x24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008926:	2300      	movs	r3, #0
 8008928:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800892a:	2300      	movs	r3, #0
 800892c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008936:	2300      	movs	r3, #0
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	e175      	b.n	8008c28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800893c:	2201      	movs	r2, #1
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4013      	ands	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	429a      	cmp	r2, r3
 8008956:	f040 8164 	bne.w	8008c22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d00b      	beq.n	800897a <HAL_GPIO_Init+0x5e>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d007      	beq.n	800897a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800896e:	2b11      	cmp	r3, #17
 8008970:	d003      	beq.n	800897a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b12      	cmp	r3, #18
 8008978:	d130      	bne.n	80089dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	2203      	movs	r2, #3
 8008986:	fa02 f303 	lsl.w	r3, r2, r3
 800898a:	43db      	mvns	r3, r3
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	4013      	ands	r3, r2
 8008990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	fa02 f303 	lsl.w	r3, r2, r3
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80089b0:	2201      	movs	r2, #1
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	43db      	mvns	r3, r3
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	4013      	ands	r3, r2
 80089be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	091b      	lsrs	r3, r3, #4
 80089c6:	f003 0201 	and.w	r2, r3, #1
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	fa02 f303 	lsl.w	r3, r2, r3
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	2203      	movs	r2, #3
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	43db      	mvns	r3, r3
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	4013      	ands	r3, r2
 80089f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d003      	beq.n	8008a1c <HAL_GPIO_Init+0x100>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b12      	cmp	r3, #18
 8008a1a:	d123      	bne.n	8008a64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	08da      	lsrs	r2, r3, #3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3208      	adds	r2, #8
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	220f      	movs	r2, #15
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	08da      	lsrs	r2, r3, #3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3208      	adds	r2, #8
 8008a5e:	69b9      	ldr	r1, [r7, #24]
 8008a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	2203      	movs	r2, #3
 8008a70:	fa02 f303 	lsl.w	r3, r2, r3
 8008a74:	43db      	mvns	r3, r3
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f003 0203 	and.w	r2, r3, #3
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80be 	beq.w	8008c22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aa6:	4b65      	ldr	r3, [pc, #404]	; (8008c3c <HAL_GPIO_Init+0x320>)
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aaa:	4a64      	ldr	r2, [pc, #400]	; (8008c3c <HAL_GPIO_Init+0x320>)
 8008aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ab2:	4b62      	ldr	r3, [pc, #392]	; (8008c3c <HAL_GPIO_Init+0x320>)
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008abe:	4a60      	ldr	r2, [pc, #384]	; (8008c40 <HAL_GPIO_Init+0x324>)
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	220f      	movs	r2, #15
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a57      	ldr	r2, [pc, #348]	; (8008c44 <HAL_GPIO_Init+0x328>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d037      	beq.n	8008b5a <HAL_GPIO_Init+0x23e>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a56      	ldr	r2, [pc, #344]	; (8008c48 <HAL_GPIO_Init+0x32c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d031      	beq.n	8008b56 <HAL_GPIO_Init+0x23a>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a55      	ldr	r2, [pc, #340]	; (8008c4c <HAL_GPIO_Init+0x330>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d02b      	beq.n	8008b52 <HAL_GPIO_Init+0x236>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a54      	ldr	r2, [pc, #336]	; (8008c50 <HAL_GPIO_Init+0x334>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d025      	beq.n	8008b4e <HAL_GPIO_Init+0x232>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a53      	ldr	r2, [pc, #332]	; (8008c54 <HAL_GPIO_Init+0x338>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d01f      	beq.n	8008b4a <HAL_GPIO_Init+0x22e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a52      	ldr	r2, [pc, #328]	; (8008c58 <HAL_GPIO_Init+0x33c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d019      	beq.n	8008b46 <HAL_GPIO_Init+0x22a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a51      	ldr	r2, [pc, #324]	; (8008c5c <HAL_GPIO_Init+0x340>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d013      	beq.n	8008b42 <HAL_GPIO_Init+0x226>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a50      	ldr	r2, [pc, #320]	; (8008c60 <HAL_GPIO_Init+0x344>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00d      	beq.n	8008b3e <HAL_GPIO_Init+0x222>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a4f      	ldr	r2, [pc, #316]	; (8008c64 <HAL_GPIO_Init+0x348>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d007      	beq.n	8008b3a <HAL_GPIO_Init+0x21e>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a4e      	ldr	r2, [pc, #312]	; (8008c68 <HAL_GPIO_Init+0x34c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d101      	bne.n	8008b36 <HAL_GPIO_Init+0x21a>
 8008b32:	2309      	movs	r3, #9
 8008b34:	e012      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b36:	230a      	movs	r3, #10
 8008b38:	e010      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b3a:	2308      	movs	r3, #8
 8008b3c:	e00e      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b3e:	2307      	movs	r3, #7
 8008b40:	e00c      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b42:	2306      	movs	r3, #6
 8008b44:	e00a      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b46:	2305      	movs	r3, #5
 8008b48:	e008      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	e006      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e004      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e002      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <HAL_GPIO_Init+0x240>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	f002 0203 	and.w	r2, r2, #3
 8008b62:	0092      	lsls	r2, r2, #2
 8008b64:	4093      	lsls	r3, r2
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008b6c:	4934      	ldr	r1, [pc, #208]	; (8008c40 <HAL_GPIO_Init+0x324>)
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	089b      	lsrs	r3, r3, #2
 8008b72:	3302      	adds	r3, #2
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b7a:	4b3c      	ldr	r3, [pc, #240]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	43db      	mvns	r3, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4013      	ands	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b9e:	4a33      	ldr	r2, [pc, #204]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ba4:	4b31      	ldr	r3, [pc, #196]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	43db      	mvns	r3, r3
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008bc8:	4a28      	ldr	r2, [pc, #160]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008bce:	4b27      	ldr	r3, [pc, #156]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008bf2:	4a1e      	ldr	r2, [pc, #120]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	43db      	mvns	r3, r3
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	4013      	ands	r3, r2
 8008c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c1c:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <HAL_GPIO_Init+0x350>)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3301      	adds	r3, #1
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2b0f      	cmp	r3, #15
 8008c2c:	f67f ae86 	bls.w	800893c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008c30:	bf00      	nop
 8008c32:	3724      	adds	r7, #36	; 0x24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	40013800 	.word	0x40013800
 8008c44:	40020000 	.word	0x40020000
 8008c48:	40020400 	.word	0x40020400
 8008c4c:	40020800 	.word	0x40020800
 8008c50:	40020c00 	.word	0x40020c00
 8008c54:	40021000 	.word	0x40021000
 8008c58:	40021400 	.word	0x40021400
 8008c5c:	40021800 	.word	0x40021800
 8008c60:	40021c00 	.word	0x40021c00
 8008c64:	40022000 	.word	0x40022000
 8008c68:	40022400 	.word	0x40022400
 8008c6c:	40013c00 	.word	0x40013c00

08008c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691a      	ldr	r2, [r3, #16]
 8008c80:	887b      	ldrh	r3, [r7, #2]
 8008c82:	4013      	ands	r3, r2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	73fb      	strb	r3, [r7, #15]
 8008c8c:	e001      	b.n	8008c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	807b      	strh	r3, [r7, #2]
 8008cac:	4613      	mov	r3, r2
 8008cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008cb0:	787b      	ldrb	r3, [r7, #1]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cb6:	887a      	ldrh	r2, [r7, #2]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008cbc:	e003      	b.n	8008cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008cbe:	887b      	ldrh	r3, [r7, #2]
 8008cc0:	041a      	lsls	r2, r3, #16
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	619a      	str	r2, [r3, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	887b      	ldrh	r3, [r7, #2]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	041a      	lsls	r2, r3, #16
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008cf2:	e002      	b.n	8008cfa <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008cf4:	887a      	ldrh	r2, [r7, #2]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	619a      	str	r2, [r3, #24]
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008d12:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	88fb      	ldrh	r3, [r7, #6]
 8008d18:	4013      	ands	r3, r2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d006      	beq.n	8008d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d1e:	4a05      	ldr	r2, [pc, #20]	; (8008d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d20:	88fb      	ldrh	r3, [r7, #6]
 8008d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d24:	88fb      	ldrh	r3, [r7, #6]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 f806 	bl	8008d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40013c00 	.word	0x40013c00

08008d38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008d42:	bf00      	nop
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e07f      	b.n	8008e62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7fd fd28 	bl	80067cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2224      	movs	r2, #36	; 0x24
 8008d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d107      	bne.n	8008dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689a      	ldr	r2, [r3, #8]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	e006      	b.n	8008dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d104      	bne.n	8008dea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6859      	ldr	r1, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <HAL_I2C_Init+0x11c>)
 8008df6:	430b      	orrs	r3, r1
 8008df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691a      	ldr	r2, [r3, #16]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	ea42 0103 	orr.w	r1, r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	021a      	lsls	r2, r3, #8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69d9      	ldr	r1, [r3, #28]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a1a      	ldr	r2, [r3, #32]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	02008000 	.word	0x02008000

08008e70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	817b      	strh	r3, [r7, #10]
 8008e80:	4613      	mov	r3, r2
 8008e82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	f040 80da 	bne.w	8009046 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d101      	bne.n	8008ea0 <HAL_I2C_Master_Transmit+0x30>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e0d3      	b.n	8009048 <HAL_I2C_Master_Transmit+0x1d8>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ea8:	f7fe fa74 	bl	8007394 <HAL_GetTick>
 8008eac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	2319      	movs	r3, #25
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f9e6 	bl	800928c <I2C_WaitOnFlagUntilTimeout>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e0be      	b.n	8009048 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2221      	movs	r2, #33	; 0x21
 8008ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2210      	movs	r2, #16
 8008ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	893a      	ldrh	r2, [r7, #8]
 8008eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2bff      	cmp	r3, #255	; 0xff
 8008efa:	d90e      	bls.n	8008f1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	22ff      	movs	r2, #255	; 0xff
 8008f00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	8979      	ldrh	r1, [r7, #10]
 8008f0a:	4b51      	ldr	r3, [pc, #324]	; (8009050 <HAL_I2C_Master_Transmit+0x1e0>)
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fb48 	bl	80095a8 <I2C_TransferConfig>
 8008f18:	e06c      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	8979      	ldrh	r1, [r7, #10]
 8008f2c:	4b48      	ldr	r3, [pc, #288]	; (8009050 <HAL_I2C_Master_Transmit+0x1e0>)
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fb37 	bl	80095a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008f3a:	e05b      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	6a39      	ldr	r1, [r7, #32]
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 f9e3 	bl	800930c <I2C_WaitOnTXISFlagUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e07b      	b.n	8009048 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d034      	beq.n	8008ff4 <HAL_I2C_Master_Transmit+0x184>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d130      	bne.n	8008ff4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2180      	movs	r1, #128	; 0x80
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f975 	bl	800928c <I2C_WaitOnFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e04d      	b.n	8009048 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2bff      	cmp	r3, #255	; 0xff
 8008fb4:	d90e      	bls.n	8008fd4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	22ff      	movs	r2, #255	; 0xff
 8008fba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	8979      	ldrh	r1, [r7, #10]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 faeb 	bl	80095a8 <I2C_TransferConfig>
 8008fd2:	e00f      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	8979      	ldrh	r1, [r7, #10]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fada 	bl	80095a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d19e      	bne.n	8008f3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	6a39      	ldr	r1, [r7, #32]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f9c2 	bl	800938c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e01a      	b.n	8009048 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2220      	movs	r2, #32
 8009018:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <HAL_I2C_Master_Transmit+0x1e4>)
 8009026:	400b      	ands	r3, r1
 8009028:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	e000      	b.n	8009048 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009046:	2302      	movs	r3, #2
  }
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	80002000 	.word	0x80002000
 8009054:	fe00e800 	.word	0xfe00e800

08009058 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	461a      	mov	r2, r3
 8009064:	460b      	mov	r3, r1
 8009066:	817b      	strh	r3, [r7, #10]
 8009068:	4613      	mov	r3, r2
 800906a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b20      	cmp	r3, #32
 8009076:	f040 80db 	bne.w	8009230 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_I2C_Master_Receive+0x30>
 8009084:	2302      	movs	r3, #2
 8009086:	e0d4      	b.n	8009232 <HAL_I2C_Master_Receive+0x1da>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009090:	f7fe f980 	bl	8007394 <HAL_GetTick>
 8009094:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	2319      	movs	r3, #25
 800909c:	2201      	movs	r2, #1
 800909e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 f8f2 	bl	800928c <I2C_WaitOnFlagUntilTimeout>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e0bf      	b.n	8009232 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2222      	movs	r2, #34	; 0x22
 80090b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2210      	movs	r2, #16
 80090be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	893a      	ldrh	r2, [r7, #8]
 80090d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2bff      	cmp	r3, #255	; 0xff
 80090e2:	d90e      	bls.n	8009102 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	22ff      	movs	r2, #255	; 0xff
 80090e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	8979      	ldrh	r1, [r7, #10]
 80090f2:	4b52      	ldr	r3, [pc, #328]	; (800923c <HAL_I2C_Master_Receive+0x1e4>)
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fa54 	bl	80095a8 <I2C_TransferConfig>
 8009100:	e06d      	b.n	80091de <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009110:	b2da      	uxtb	r2, r3
 8009112:	8979      	ldrh	r1, [r7, #10]
 8009114:	4b49      	ldr	r3, [pc, #292]	; (800923c <HAL_I2C_Master_Receive+0x1e4>)
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fa43 	bl	80095a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009122:	e05c      	b.n	80091de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	6a39      	ldr	r1, [r7, #32]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f96b 	bl	8009404 <I2C_WaitOnRXNEFlagUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e07c      	b.n	8009232 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916e:	b29b      	uxth	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d034      	beq.n	80091de <HAL_I2C_Master_Receive+0x186>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009178:	2b00      	cmp	r3, #0
 800917a:	d130      	bne.n	80091de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	2200      	movs	r2, #0
 8009184:	2180      	movs	r1, #128	; 0x80
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f880 	bl	800928c <I2C_WaitOnFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e04d      	b.n	8009232 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919a:	b29b      	uxth	r3, r3
 800919c:	2bff      	cmp	r3, #255	; 0xff
 800919e:	d90e      	bls.n	80091be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	22ff      	movs	r2, #255	; 0xff
 80091a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	8979      	ldrh	r1, [r7, #10]
 80091ae:	2300      	movs	r3, #0
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f9f6 	bl	80095a8 <I2C_TransferConfig>
 80091bc:	e00f      	b.n	80091de <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	8979      	ldrh	r1, [r7, #10]
 80091d0:	2300      	movs	r3, #0
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 f9e5 	bl	80095a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d19d      	bne.n	8009124 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	6a39      	ldr	r1, [r7, #32]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f8cd 	bl	800938c <I2C_WaitOnSTOPFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e01a      	b.n	8009232 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2220      	movs	r2, #32
 8009202:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6859      	ldr	r1, [r3, #4]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <HAL_I2C_Master_Receive+0x1e8>)
 8009210:	400b      	ands	r3, r1
 8009212:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	e000      	b.n	8009232 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009230:	2302      	movs	r3, #2
  }
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	80002400 	.word	0x80002400
 8009240:	fe00e800 	.word	0xfe00e800

08009244 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d103      	bne.n	8009262 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2200      	movs	r2, #0
 8009260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b01      	cmp	r3, #1
 800926e:	d007      	beq.n	8009280 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699a      	ldr	r2, [r3, #24]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	619a      	str	r2, [r3, #24]
  }
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800929c:	e022      	b.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a4:	d01e      	beq.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092a6:	f7fe f875 	bl	8007394 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d302      	bcc.n	80092bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d113      	bne.n	80092e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c0:	f043 0220 	orr.w	r2, r3, #32
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e00f      	b.n	8009304 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4013      	ands	r3, r2
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	bf0c      	ite	eq
 80092f4:	2301      	moveq	r3, #1
 80092f6:	2300      	movne	r3, #0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d0cd      	beq.n	800929e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009318:	e02c      	b.n	8009374 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f8dc 	bl	80094dc <I2C_IsAcknowledgeFailed>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e02a      	b.n	8009384 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009334:	d01e      	beq.n	8009374 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009336:	f7fe f82d 	bl	8007394 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d113      	bne.n	8009374 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009350:	f043 0220 	orr.w	r2, r3, #32
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e007      	b.n	8009384 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b02      	cmp	r3, #2
 8009380:	d1cb      	bne.n	800931a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009398:	e028      	b.n	80093ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f89c 	bl	80094dc <I2C_IsAcknowledgeFailed>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e026      	b.n	80093fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ae:	f7fd fff1 	bl	8007394 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d302      	bcc.n	80093c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d113      	bne.n	80093ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	f043 0220 	orr.w	r2, r3, #32
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e007      	b.n	80093fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d1cf      	bne.n	800939a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009410:	e055      	b.n	80094be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 f860 	bl	80094dc <I2C_IsAcknowledgeFailed>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e053      	b.n	80094ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0320 	and.w	r3, r3, #32
 8009430:	2b20      	cmp	r3, #32
 8009432:	d129      	bne.n	8009488 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b04      	cmp	r3, #4
 8009440:	d105      	bne.n	800944e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	e03f      	b.n	80094ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2220      	movs	r2, #32
 8009454:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6859      	ldr	r1, [r3, #4]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	4b1d      	ldr	r3, [pc, #116]	; (80094d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8009462:	400b      	ands	r3, r1
 8009464:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e022      	b.n	80094ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009488:	f7fd ff84 	bl	8007394 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	429a      	cmp	r2, r3
 8009496:	d302      	bcc.n	800949e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10f      	bne.n	80094be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	f043 0220 	orr.w	r2, r3, #32
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e007      	b.n	80094ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d1a2      	bne.n	8009412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	fe00e800 	.word	0xfe00e800

080094dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	f003 0310 	and.w	r3, r3, #16
 80094f2:	2b10      	cmp	r3, #16
 80094f4:	d151      	bne.n	800959a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094f6:	e022      	b.n	800953e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fe:	d01e      	beq.n	800953e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009500:	f7fd ff48 	bl	8007394 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	429a      	cmp	r2, r3
 800950e:	d302      	bcc.n	8009516 <I2C_IsAcknowledgeFailed+0x3a>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d113      	bne.n	800953e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951a:	f043 0220 	orr.w	r2, r3, #32
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e02e      	b.n	800959c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b20      	cmp	r3, #32
 800954a:	d1d5      	bne.n	80094f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2210      	movs	r2, #16
 8009552:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2220      	movs	r2, #32
 800955a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff fe71 	bl	8009244 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6859      	ldr	r1, [r3, #4]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	4b0d      	ldr	r3, [pc, #52]	; (80095a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800956e:	400b      	ands	r3, r1
 8009570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009576:	f043 0204 	orr.w	r2, r3, #4
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2220      	movs	r2, #32
 8009582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	fe00e800 	.word	0xfe00e800

080095a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	817b      	strh	r3, [r7, #10]
 80095b6:	4613      	mov	r3, r2
 80095b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	0d5b      	lsrs	r3, r3, #21
 80095c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <I2C_TransferConfig+0x58>)
 80095ca:	430b      	orrs	r3, r1
 80095cc:	43db      	mvns	r3, r3
 80095ce:	ea02 0103 	and.w	r1, r2, r3
 80095d2:	897b      	ldrh	r3, [r7, #10]
 80095d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095d8:	7a7b      	ldrb	r3, [r7, #9]
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095e0:	431a      	orrs	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	431a      	orrs	r2, r3
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	431a      	orrs	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	03ff63ff 	.word	0x03ff63ff

08009604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b20      	cmp	r3, #32
 8009618:	d138      	bne.n	800968c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009624:	2302      	movs	r3, #2
 8009626:	e032      	b.n	800968e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2224      	movs	r2, #36	; 0x24
 8009634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 0201 	bic.w	r2, r2, #1
 8009646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6819      	ldr	r1, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	e000      	b.n	800968e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800968c:	2302      	movs	r3, #2
  }
}
 800968e:	4618      	mov	r0, r3
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d139      	bne.n	8009724 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e033      	b.n	8009726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2224      	movs	r2, #36	; 0x24
 80096ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0201 	bic.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0201 	orr.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2220      	movs	r2, #32
 8009714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	e000      	b.n	8009726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009724:	2302      	movs	r3, #2
  }
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009734:	b08f      	sub	sp, #60	; 0x3c
 8009736:	af0a      	add	r7, sp, #40	; 0x28
 8009738:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e116      	b.n	8009972 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d106      	bne.n	8009764 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fd fb70 	bl	8006e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2203      	movs	r2, #3
 8009768:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f003 fc0e 	bl	800cfa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	687e      	ldr	r6, [r7, #4]
 8009790:	466d      	mov	r5, sp
 8009792:	f106 0410 	add.w	r4, r6, #16
 8009796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800979a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800979c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800979e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80097a6:	1d33      	adds	r3, r6, #4
 80097a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097aa:	6838      	ldr	r0, [r7, #0]
 80097ac:	f003 fba2 	bl	800cef4 <USB_CoreInit>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e0d7      	b.n	8009972 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f003 fbfc 	bl	800cfc6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
 80097d2:	e04a      	b.n	800986a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80097d4:	7bfa      	ldrb	r2, [r7, #15]
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	4613      	mov	r3, r2
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	333d      	adds	r3, #61	; 0x3d
 80097e4:	2201      	movs	r2, #1
 80097e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80097e8:	7bfa      	ldrb	r2, [r7, #15]
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	4613      	mov	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	333c      	adds	r3, #60	; 0x3c
 80097f8:	7bfa      	ldrb	r2, [r7, #15]
 80097fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80097fc:	7bfa      	ldrb	r2, [r7, #15]
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	b298      	uxth	r0, r3
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	4613      	mov	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	1a9b      	subs	r3, r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	440b      	add	r3, r1
 800980e:	3342      	adds	r3, #66	; 0x42
 8009810:	4602      	mov	r2, r0
 8009812:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009814:	7bfa      	ldrb	r2, [r7, #15]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	333f      	adds	r3, #63	; 0x3f
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009828:	7bfa      	ldrb	r2, [r7, #15]
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	4613      	mov	r3, r2
 800982e:	00db      	lsls	r3, r3, #3
 8009830:	1a9b      	subs	r3, r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	440b      	add	r3, r1
 8009836:	3344      	adds	r3, #68	; 0x44
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800983c:	7bfa      	ldrb	r2, [r7, #15]
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4613      	mov	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	3348      	adds	r3, #72	; 0x48
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	3350      	adds	r3, #80	; 0x50
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	3301      	adds	r3, #1
 8009868:	73fb      	strb	r3, [r7, #15]
 800986a:	7bfa      	ldrb	r2, [r7, #15]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	429a      	cmp	r2, r3
 8009872:	d3af      	bcc.n	80097d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
 8009878:	e044      	b.n	8009904 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800987a:	7bfa      	ldrb	r2, [r7, #15]
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009890:	7bfa      	ldrb	r2, [r7, #15]
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	4613      	mov	r3, r2
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80098a2:	7bfa      	ldrb	r2, [r7, #15]
 80098a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80098a6:	7bfa      	ldrb	r2, [r7, #15]
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	4613      	mov	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	440b      	add	r3, r1
 80098b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80098bc:	7bfa      	ldrb	r2, [r7, #15]
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4613      	mov	r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80098d2:	7bfa      	ldrb	r2, [r7, #15]
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	1a9b      	subs	r3, r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	440b      	add	r3, r1
 80098e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80098e8:	7bfa      	ldrb	r2, [r7, #15]
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	4613      	mov	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	3301      	adds	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]
 8009904:	7bfa      	ldrb	r2, [r7, #15]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	429a      	cmp	r2, r3
 800990c:	d3b5      	bcc.n	800987a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	687e      	ldr	r6, [r7, #4]
 8009916:	466d      	mov	r5, sp
 8009918:	f106 0410 	add.w	r4, r6, #16
 800991c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800991e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009924:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009928:	e885 0003 	stmia.w	r5, {r0, r1}
 800992c:	1d33      	adds	r3, r6, #4
 800992e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009930:	6838      	ldr	r0, [r7, #0]
 8009932:	f003 fb73 	bl	800d01c <USB_DevInit>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d005      	beq.n	8009948 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2202      	movs	r2, #2
 8009940:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e014      	b.n	8009972 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f80b 	bl	800997c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f003 fd25 	bl	800d3ba <USB_DevDisconnect>

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800997c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099aa:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	10000003 	.word	0x10000003

080099c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099c8:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a04      	ldr	r2, [pc, #16]	; (80099e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099d2:	6013      	str	r3, [r2, #0]
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	40007000 	.word	0x40007000

080099e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e29b      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8087 	beq.w	8009b16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a08:	4b96      	ldr	r3, [pc, #600]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 030c 	and.w	r3, r3, #12
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d00c      	beq.n	8009a2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a14:	4b93      	ldr	r3, [pc, #588]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 030c 	and.w	r3, r3, #12
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d112      	bne.n	8009a46 <HAL_RCC_OscConfig+0x62>
 8009a20:	4b90      	ldr	r3, [pc, #576]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a2c:	d10b      	bne.n	8009a46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a2e:	4b8d      	ldr	r3, [pc, #564]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d06c      	beq.n	8009b14 <HAL_RCC_OscConfig+0x130>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d168      	bne.n	8009b14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e275      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4e:	d106      	bne.n	8009a5e <HAL_RCC_OscConfig+0x7a>
 8009a50:	4b84      	ldr	r3, [pc, #528]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a83      	ldr	r2, [pc, #524]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	e02e      	b.n	8009abc <HAL_RCC_OscConfig+0xd8>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10c      	bne.n	8009a80 <HAL_RCC_OscConfig+0x9c>
 8009a66:	4b7f      	ldr	r3, [pc, #508]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a7e      	ldr	r2, [pc, #504]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	4b7c      	ldr	r3, [pc, #496]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a7b      	ldr	r2, [pc, #492]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	e01d      	b.n	8009abc <HAL_RCC_OscConfig+0xd8>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a88:	d10c      	bne.n	8009aa4 <HAL_RCC_OscConfig+0xc0>
 8009a8a:	4b76      	ldr	r3, [pc, #472]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a75      	ldr	r2, [pc, #468]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	4b73      	ldr	r3, [pc, #460]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a72      	ldr	r2, [pc, #456]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	e00b      	b.n	8009abc <HAL_RCC_OscConfig+0xd8>
 8009aa4:	4b6f      	ldr	r3, [pc, #444]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a6e      	ldr	r2, [pc, #440]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	4b6c      	ldr	r3, [pc, #432]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a6b      	ldr	r2, [pc, #428]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d013      	beq.n	8009aec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac4:	f7fd fc66 	bl	8007394 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009acc:	f7fd fc62 	bl	8007394 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b64      	cmp	r3, #100	; 0x64
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e229      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ade:	4b61      	ldr	r3, [pc, #388]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0f0      	beq.n	8009acc <HAL_RCC_OscConfig+0xe8>
 8009aea:	e014      	b.n	8009b16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aec:	f7fd fc52 	bl	8007394 <HAL_GetTick>
 8009af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009af2:	e008      	b.n	8009b06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009af4:	f7fd fc4e 	bl	8007394 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b64      	cmp	r3, #100	; 0x64
 8009b00:	d901      	bls.n	8009b06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e215      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b06:	4b57      	ldr	r3, [pc, #348]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f0      	bne.n	8009af4 <HAL_RCC_OscConfig+0x110>
 8009b12:	e000      	b.n	8009b16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0302 	and.w	r3, r3, #2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d069      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b22:	4b50      	ldr	r3, [pc, #320]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f003 030c 	and.w	r3, r3, #12
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00b      	beq.n	8009b46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b2e:	4b4d      	ldr	r3, [pc, #308]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f003 030c 	and.w	r3, r3, #12
 8009b36:	2b08      	cmp	r3, #8
 8009b38:	d11c      	bne.n	8009b74 <HAL_RCC_OscConfig+0x190>
 8009b3a:	4b4a      	ldr	r3, [pc, #296]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d116      	bne.n	8009b74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b46:	4b47      	ldr	r3, [pc, #284]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <HAL_RCC_OscConfig+0x17a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d001      	beq.n	8009b5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e1e9      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b5e:	4b41      	ldr	r3, [pc, #260]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	493d      	ldr	r1, [pc, #244]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b72:	e040      	b.n	8009bf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d023      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b7c:	4b39      	ldr	r3, [pc, #228]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a38      	ldr	r2, [pc, #224]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b88:	f7fd fc04 	bl	8007394 <HAL_GetTick>
 8009b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b8e:	e008      	b.n	8009ba2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b90:	f7fd fc00 	bl	8007394 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e1c7      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ba2:	4b30      	ldr	r3, [pc, #192]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f0      	beq.n	8009b90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bae:	4b2d      	ldr	r3, [pc, #180]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	4929      	ldr	r1, [pc, #164]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	600b      	str	r3, [r1, #0]
 8009bc2:	e018      	b.n	8009bf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bc4:	4b27      	ldr	r3, [pc, #156]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a26      	ldr	r2, [pc, #152]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009bca:	f023 0301 	bic.w	r3, r3, #1
 8009bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd0:	f7fd fbe0 	bl	8007394 <HAL_GetTick>
 8009bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bd8:	f7fd fbdc 	bl	8007394 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e1a3      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bea:	4b1e      	ldr	r3, [pc, #120]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1f0      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d038      	beq.n	8009c74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d019      	beq.n	8009c3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c0a:	4b16      	ldr	r3, [pc, #88]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0e:	4a15      	ldr	r2, [pc, #84]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009c10:	f043 0301 	orr.w	r3, r3, #1
 8009c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c16:	f7fd fbbd 	bl	8007394 <HAL_GetTick>
 8009c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c1c:	e008      	b.n	8009c30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c1e:	f7fd fbb9 	bl	8007394 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d901      	bls.n	8009c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e180      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c30:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0f0      	beq.n	8009c1e <HAL_RCC_OscConfig+0x23a>
 8009c3c:	e01a      	b.n	8009c74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c42:	4a08      	ldr	r2, [pc, #32]	; (8009c64 <HAL_RCC_OscConfig+0x280>)
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c4a:	f7fd fba3 	bl	8007394 <HAL_GetTick>
 8009c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c50:	e00a      	b.n	8009c68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c52:	f7fd fb9f 	bl	8007394 <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d903      	bls.n	8009c68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e166      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
 8009c64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c68:	4b92      	ldr	r3, [pc, #584]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1ee      	bne.n	8009c52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80a4 	beq.w	8009dca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c82:	4b8c      	ldr	r3, [pc, #560]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10d      	bne.n	8009caa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c8e:	4b89      	ldr	r3, [pc, #548]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	4a88      	ldr	r2, [pc, #544]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c98:	6413      	str	r3, [r2, #64]	; 0x40
 8009c9a:	4b86      	ldr	r3, [pc, #536]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ca2:	60bb      	str	r3, [r7, #8]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009caa:	4b83      	ldr	r3, [pc, #524]	; (8009eb8 <HAL_RCC_OscConfig+0x4d4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d118      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009cb6:	4b80      	ldr	r3, [pc, #512]	; (8009eb8 <HAL_RCC_OscConfig+0x4d4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a7f      	ldr	r2, [pc, #508]	; (8009eb8 <HAL_RCC_OscConfig+0x4d4>)
 8009cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cc2:	f7fd fb67 	bl	8007394 <HAL_GetTick>
 8009cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cc8:	e008      	b.n	8009cdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cca:	f7fd fb63 	bl	8007394 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b64      	cmp	r3, #100	; 0x64
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e12a      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cdc:	4b76      	ldr	r3, [pc, #472]	; (8009eb8 <HAL_RCC_OscConfig+0x4d4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0f0      	beq.n	8009cca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d106      	bne.n	8009cfe <HAL_RCC_OscConfig+0x31a>
 8009cf0:	4b70      	ldr	r3, [pc, #448]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf4:	4a6f      	ldr	r2, [pc, #444]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009cf6:	f043 0301 	orr.w	r3, r3, #1
 8009cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009cfc:	e02d      	b.n	8009d5a <HAL_RCC_OscConfig+0x376>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10c      	bne.n	8009d20 <HAL_RCC_OscConfig+0x33c>
 8009d06:	4b6b      	ldr	r3, [pc, #428]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0a:	4a6a      	ldr	r2, [pc, #424]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d0c:	f023 0301 	bic.w	r3, r3, #1
 8009d10:	6713      	str	r3, [r2, #112]	; 0x70
 8009d12:	4b68      	ldr	r3, [pc, #416]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	4a67      	ldr	r2, [pc, #412]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d18:	f023 0304 	bic.w	r3, r3, #4
 8009d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d1e:	e01c      	b.n	8009d5a <HAL_RCC_OscConfig+0x376>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	2b05      	cmp	r3, #5
 8009d26:	d10c      	bne.n	8009d42 <HAL_RCC_OscConfig+0x35e>
 8009d28:	4b62      	ldr	r3, [pc, #392]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2c:	4a61      	ldr	r2, [pc, #388]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d2e:	f043 0304 	orr.w	r3, r3, #4
 8009d32:	6713      	str	r3, [r2, #112]	; 0x70
 8009d34:	4b5f      	ldr	r3, [pc, #380]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	4a5e      	ldr	r2, [pc, #376]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d3a:	f043 0301 	orr.w	r3, r3, #1
 8009d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d40:	e00b      	b.n	8009d5a <HAL_RCC_OscConfig+0x376>
 8009d42:	4b5c      	ldr	r3, [pc, #368]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	4a5b      	ldr	r2, [pc, #364]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d4e:	4b59      	ldr	r3, [pc, #356]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d52:	4a58      	ldr	r2, [pc, #352]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d54:	f023 0304 	bic.w	r3, r3, #4
 8009d58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d015      	beq.n	8009d8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d62:	f7fd fb17 	bl	8007394 <HAL_GetTick>
 8009d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d68:	e00a      	b.n	8009d80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d6a:	f7fd fb13 	bl	8007394 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e0d8      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d80:	4b4c      	ldr	r3, [pc, #304]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0ee      	beq.n	8009d6a <HAL_RCC_OscConfig+0x386>
 8009d8c:	e014      	b.n	8009db8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d8e:	f7fd fb01 	bl	8007394 <HAL_GetTick>
 8009d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d94:	e00a      	b.n	8009dac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d96:	f7fd fafd 	bl	8007394 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e0c2      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dac:	4b41      	ldr	r3, [pc, #260]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1ee      	bne.n	8009d96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d105      	bne.n	8009dca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dbe:	4b3d      	ldr	r3, [pc, #244]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	4a3c      	ldr	r2, [pc, #240]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80ae 	beq.w	8009f30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009dd4:	4b37      	ldr	r3, [pc, #220]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 030c 	and.w	r3, r3, #12
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d06d      	beq.n	8009ebc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d14b      	bne.n	8009e80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009de8:	4b32      	ldr	r3, [pc, #200]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a31      	ldr	r2, [pc, #196]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df4:	f7fd face 	bl	8007394 <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dfa:	e008      	b.n	8009e0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dfc:	f7fd faca 	bl	8007394 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e091      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e0e:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1f0      	bne.n	8009dfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	69da      	ldr	r2, [r3, #28]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	019b      	lsls	r3, r3, #6
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	3b01      	subs	r3, #1
 8009e34:	041b      	lsls	r3, r3, #16
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3c:	061b      	lsls	r3, r3, #24
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	071b      	lsls	r3, r3, #28
 8009e46:	491b      	ldr	r1, [pc, #108]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e4c:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a18      	ldr	r2, [pc, #96]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e58:	f7fd fa9c 	bl	8007394 <HAL_GetTick>
 8009e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e5e:	e008      	b.n	8009e72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e60:	f7fd fa98 	bl	8007394 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e05f      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e72:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0f0      	beq.n	8009e60 <HAL_RCC_OscConfig+0x47c>
 8009e7e:	e057      	b.n	8009f30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e80:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a0b      	ldr	r2, [pc, #44]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e8c:	f7fd fa82 	bl	8007394 <HAL_GetTick>
 8009e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e92:	e008      	b.n	8009ea6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e94:	f7fd fa7e 	bl	8007394 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e045      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ea6:	4b03      	ldr	r3, [pc, #12]	; (8009eb4 <HAL_RCC_OscConfig+0x4d0>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f0      	bne.n	8009e94 <HAL_RCC_OscConfig+0x4b0>
 8009eb2:	e03d      	b.n	8009f30 <HAL_RCC_OscConfig+0x54c>
 8009eb4:	40023800 	.word	0x40023800
 8009eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009ebc:	4b1f      	ldr	r3, [pc, #124]	; (8009f3c <HAL_RCC_OscConfig+0x558>)
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d030      	beq.n	8009f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d129      	bne.n	8009f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d122      	bne.n	8009f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009eec:	4013      	ands	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ef2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d119      	bne.n	8009f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	085b      	lsrs	r3, r3, #1
 8009f04:	3b01      	subs	r3, #1
 8009f06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d10f      	bne.n	8009f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d107      	bne.n	8009f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d001      	beq.n	8009f30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e000      	b.n	8009f32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	40023800 	.word	0x40023800

08009f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e0d0      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f58:	4b6a      	ldr	r3, [pc, #424]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d910      	bls.n	8009f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f66:	4b67      	ldr	r3, [pc, #412]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f023 020f 	bic.w	r2, r3, #15
 8009f6e:	4965      	ldr	r1, [pc, #404]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f76:	4b63      	ldr	r3, [pc, #396]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 030f 	and.w	r3, r3, #15
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d001      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0b8      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d020      	beq.n	8009fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fa0:	4b59      	ldr	r3, [pc, #356]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	4a58      	ldr	r2, [pc, #352]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fb8:	4b53      	ldr	r3, [pc, #332]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	4a52      	ldr	r2, [pc, #328]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009fc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fc4:	4b50      	ldr	r3, [pc, #320]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	494d      	ldr	r1, [pc, #308]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d040      	beq.n	800a064 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d107      	bne.n	8009ffa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fea:	4b47      	ldr	r3, [pc, #284]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d115      	bne.n	800a022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e07f      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d107      	bne.n	800a012 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a002:	4b41      	ldr	r3, [pc, #260]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d109      	bne.n	800a022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e073      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a012:	4b3d      	ldr	r3, [pc, #244]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e06b      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a022:	4b39      	ldr	r3, [pc, #228]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f023 0203 	bic.w	r2, r3, #3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	4936      	ldr	r1, [pc, #216]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a030:	4313      	orrs	r3, r2
 800a032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a034:	f7fd f9ae 	bl	8007394 <HAL_GetTick>
 800a038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a03a:	e00a      	b.n	800a052 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a03c:	f7fd f9aa 	bl	8007394 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	f241 3288 	movw	r2, #5000	; 0x1388
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e053      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a052:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 020c 	and.w	r2, r3, #12
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	429a      	cmp	r2, r3
 800a062:	d1eb      	bne.n	800a03c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a064:	4b27      	ldr	r3, [pc, #156]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d210      	bcs.n	800a094 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a072:	4b24      	ldr	r3, [pc, #144]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f023 020f 	bic.w	r2, r3, #15
 800a07a:	4922      	ldr	r1, [pc, #136]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	4313      	orrs	r3, r2
 800a080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a082:	4b20      	ldr	r3, [pc, #128]	; (800a104 <HAL_RCC_ClockConfig+0x1c4>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 030f 	and.w	r3, r3, #15
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d001      	beq.n	800a094 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e032      	b.n	800a0fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d008      	beq.n	800a0b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0a0:	4b19      	ldr	r3, [pc, #100]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	4916      	ldr	r1, [pc, #88]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0308 	and.w	r3, r3, #8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d009      	beq.n	800a0d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	490e      	ldr	r1, [pc, #56]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a0d2:	f000 f821 	bl	800a118 <HAL_RCC_GetSysClockFreq>
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	4b0b      	ldr	r3, [pc, #44]	; (800a108 <HAL_RCC_ClockConfig+0x1c8>)
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	091b      	lsrs	r3, r3, #4
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	4a0a      	ldr	r2, [pc, #40]	; (800a10c <HAL_RCC_ClockConfig+0x1cc>)
 800a0e4:	5cd3      	ldrb	r3, [r2, r3]
 800a0e6:	fa21 f303 	lsr.w	r3, r1, r3
 800a0ea:	4a09      	ldr	r2, [pc, #36]	; (800a110 <HAL_RCC_ClockConfig+0x1d0>)
 800a0ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a0ee:	4b09      	ldr	r3, [pc, #36]	; (800a114 <HAL_RCC_ClockConfig+0x1d4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fc fef4 	bl	8006ee0 <HAL_InitTick>

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	40023c00 	.word	0x40023c00
 800a108:	40023800 	.word	0x40023800
 800a10c:	08014ee8 	.word	0x08014ee8
 800a110:	20000158 	.word	0x20000158
 800a114:	2000015c 	.word	0x2000015c

0800a118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	2300      	movs	r3, #0
 800a128:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a12e:	4b50      	ldr	r3, [pc, #320]	; (800a270 <HAL_RCC_GetSysClockFreq+0x158>)
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f003 030c 	and.w	r3, r3, #12
 800a136:	2b04      	cmp	r3, #4
 800a138:	d007      	beq.n	800a14a <HAL_RCC_GetSysClockFreq+0x32>
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d008      	beq.n	800a150 <HAL_RCC_GetSysClockFreq+0x38>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 808d 	bne.w	800a25e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a144:	4b4b      	ldr	r3, [pc, #300]	; (800a274 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a146:	60bb      	str	r3, [r7, #8]
      break;
 800a148:	e08c      	b.n	800a264 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a14a:	4b4b      	ldr	r3, [pc, #300]	; (800a278 <HAL_RCC_GetSysClockFreq+0x160>)
 800a14c:	60bb      	str	r3, [r7, #8]
      break;
 800a14e:	e089      	b.n	800a264 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a150:	4b47      	ldr	r3, [pc, #284]	; (800a270 <HAL_RCC_GetSysClockFreq+0x158>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a158:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a15a:	4b45      	ldr	r3, [pc, #276]	; (800a270 <HAL_RCC_GetSysClockFreq+0x158>)
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d023      	beq.n	800a1ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a166:	4b42      	ldr	r3, [pc, #264]	; (800a270 <HAL_RCC_GetSysClockFreq+0x158>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	099b      	lsrs	r3, r3, #6
 800a16c:	f04f 0400 	mov.w	r4, #0
 800a170:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	ea03 0501 	and.w	r5, r3, r1
 800a17c:	ea04 0602 	and.w	r6, r4, r2
 800a180:	4a3d      	ldr	r2, [pc, #244]	; (800a278 <HAL_RCC_GetSysClockFreq+0x160>)
 800a182:	fb02 f106 	mul.w	r1, r2, r6
 800a186:	2200      	movs	r2, #0
 800a188:	fb02 f205 	mul.w	r2, r2, r5
 800a18c:	440a      	add	r2, r1
 800a18e:	493a      	ldr	r1, [pc, #232]	; (800a278 <HAL_RCC_GetSysClockFreq+0x160>)
 800a190:	fba5 0101 	umull	r0, r1, r5, r1
 800a194:	1853      	adds	r3, r2, r1
 800a196:	4619      	mov	r1, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f04f 0400 	mov.w	r4, #0
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	f7f6 f8a5 	bl	80002f0 <__aeabi_uldivmod>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e049      	b.n	800a242 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1ae:	4b30      	ldr	r3, [pc, #192]	; (800a270 <HAL_RCC_GetSysClockFreq+0x158>)
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	099b      	lsrs	r3, r3, #6
 800a1b4:	f04f 0400 	mov.w	r4, #0
 800a1b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	ea03 0501 	and.w	r5, r3, r1
 800a1c4:	ea04 0602 	and.w	r6, r4, r2
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	f04f 0300 	mov.w	r3, #0
 800a1d0:	f04f 0400 	mov.w	r4, #0
 800a1d4:	0154      	lsls	r4, r2, #5
 800a1d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a1da:	014b      	lsls	r3, r1, #5
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4622      	mov	r2, r4
 800a1e0:	1b49      	subs	r1, r1, r5
 800a1e2:	eb62 0206 	sbc.w	r2, r2, r6
 800a1e6:	f04f 0300 	mov.w	r3, #0
 800a1ea:	f04f 0400 	mov.w	r4, #0
 800a1ee:	0194      	lsls	r4, r2, #6
 800a1f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a1f4:	018b      	lsls	r3, r1, #6
 800a1f6:	1a5b      	subs	r3, r3, r1
 800a1f8:	eb64 0402 	sbc.w	r4, r4, r2
 800a1fc:	f04f 0100 	mov.w	r1, #0
 800a200:	f04f 0200 	mov.w	r2, #0
 800a204:	00e2      	lsls	r2, r4, #3
 800a206:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a20a:	00d9      	lsls	r1, r3, #3
 800a20c:	460b      	mov	r3, r1
 800a20e:	4614      	mov	r4, r2
 800a210:	195b      	adds	r3, r3, r5
 800a212:	eb44 0406 	adc.w	r4, r4, r6
 800a216:	f04f 0100 	mov.w	r1, #0
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	02a2      	lsls	r2, r4, #10
 800a220:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a224:	0299      	lsls	r1, r3, #10
 800a226:	460b      	mov	r3, r1
 800a228:	4614      	mov	r4, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	4621      	mov	r1, r4
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f04f 0400 	mov.w	r4, #0
 800a234:	461a      	mov	r2, r3
 800a236:	4623      	mov	r3, r4
 800a238:	f7f6 f85a 	bl	80002f0 <__aeabi_uldivmod>
 800a23c:	4603      	mov	r3, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <HAL_RCC_GetSysClockFreq+0x158>)
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	0c1b      	lsrs	r3, r3, #16
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	3301      	adds	r3, #1
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25a:	60bb      	str	r3, [r7, #8]
      break;
 800a25c:	e002      	b.n	800a264 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a260:	60bb      	str	r3, [r7, #8]
      break;
 800a262:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a264:	68bb      	ldr	r3, [r7, #8]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a26e:	bf00      	nop
 800a270:	40023800 	.word	0x40023800
 800a274:	00f42400 	.word	0x00f42400
 800a278:	017d7840 	.word	0x017d7840

0800a27c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a280:	4b03      	ldr	r3, [pc, #12]	; (800a290 <HAL_RCC_GetHCLKFreq+0x14>)
 800a282:	681b      	ldr	r3, [r3, #0]
}
 800a284:	4618      	mov	r0, r3
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20000158 	.word	0x20000158

0800a294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a298:	f7ff fff0 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800a29c:	4601      	mov	r1, r0
 800a29e:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	0a9b      	lsrs	r3, r3, #10
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	4a03      	ldr	r2, [pc, #12]	; (800a2b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2aa:	5cd3      	ldrb	r3, [r2, r3]
 800a2ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	40023800 	.word	0x40023800
 800a2b8:	08014ef8 	.word	0x08014ef8

0800a2bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a2c0:	f7ff ffdc 	bl	800a27c <HAL_RCC_GetHCLKFreq>
 800a2c4:	4601      	mov	r1, r0
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	0b5b      	lsrs	r3, r3, #13
 800a2cc:	f003 0307 	and.w	r3, r3, #7
 800a2d0:	4a03      	ldr	r2, [pc, #12]	; (800a2e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2d2:	5cd3      	ldrb	r3, [r2, r3]
 800a2d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	40023800 	.word	0x40023800
 800a2e0:	08014ef8 	.word	0x08014ef8

0800a2e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	220f      	movs	r2, #15
 800a2f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a2f4:	4b12      	ldr	r3, [pc, #72]	; (800a340 <HAL_RCC_GetClockConfig+0x5c>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0203 	and.w	r2, r3, #3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a300:	4b0f      	ldr	r3, [pc, #60]	; (800a340 <HAL_RCC_GetClockConfig+0x5c>)
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a30c:	4b0c      	ldr	r3, [pc, #48]	; (800a340 <HAL_RCC_GetClockConfig+0x5c>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a318:	4b09      	ldr	r3, [pc, #36]	; (800a340 <HAL_RCC_GetClockConfig+0x5c>)
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	08db      	lsrs	r3, r3, #3
 800a31e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a326:	4b07      	ldr	r3, [pc, #28]	; (800a344 <HAL_RCC_GetClockConfig+0x60>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 020f 	and.w	r2, r3, #15
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	601a      	str	r2, [r3, #0]
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	40023800 	.word	0x40023800
 800a344:	40023c00 	.word	0x40023c00

0800a348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d012      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a370:	4b69      	ldr	r3, [pc, #420]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	4a68      	ldr	r2, [pc, #416]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a37a:	6093      	str	r3, [r2, #8]
 800a37c:	4b66      	ldr	r3, [pc, #408]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	4964      	ldr	r1, [pc, #400]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a386:	4313      	orrs	r3, r2
 800a388:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a392:	2301      	movs	r3, #1
 800a394:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d017      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3a2:	4b5d      	ldr	r3, [pc, #372]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b0:	4959      	ldr	r1, [pc, #356]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3c0:	d101      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d017      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a3de:	4b4e      	ldr	r3, [pc, #312]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	494a      	ldr	r1, [pc, #296]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3fc:	d101      	bne.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a3fe:	2301      	movs	r3, #1
 800a400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a40a:	2301      	movs	r3, #1
 800a40c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a41a:	2301      	movs	r3, #1
 800a41c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 808b 	beq.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a42c:	4b3a      	ldr	r3, [pc, #232]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a430:	4a39      	ldr	r2, [pc, #228]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a436:	6413      	str	r3, [r2, #64]	; 0x40
 800a438:	4b37      	ldr	r3, [pc, #220]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a440:	60bb      	str	r3, [r7, #8]
 800a442:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a444:	4b35      	ldr	r3, [pc, #212]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a34      	ldr	r2, [pc, #208]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a44a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a44e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a450:	f7fc ffa0 	bl	8007394 <HAL_GetTick>
 800a454:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a456:	e008      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a458:	f7fc ff9c 	bl	8007394 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b64      	cmp	r3, #100	; 0x64
 800a464:	d901      	bls.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e38d      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a46a:	4b2c      	ldr	r3, [pc, #176]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f0      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a476:	4b28      	ldr	r3, [pc, #160]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d035      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	429a      	cmp	r2, r3
 800a492:	d02e      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a494:	4b20      	ldr	r3, [pc, #128]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a49c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a49e:	4b1e      	ldr	r3, [pc, #120]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	4a1d      	ldr	r2, [pc, #116]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4aa:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	4a1a      	ldr	r2, [pc, #104]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a4b6:	4a18      	ldr	r2, [pc, #96]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a4bc:	4b16      	ldr	r3, [pc, #88]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d114      	bne.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c8:	f7fc ff64 	bl	8007394 <HAL_GetTick>
 800a4cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ce:	e00a      	b.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4d0:	f7fc ff60 	bl	8007394 <HAL_GetTick>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d901      	bls.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e34f      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0ee      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4fe:	d111      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a500:	4b05      	ldr	r3, [pc, #20]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a50c:	4b04      	ldr	r3, [pc, #16]	; (800a520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a50e:	400b      	ands	r3, r1
 800a510:	4901      	ldr	r1, [pc, #4]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a512:	4313      	orrs	r3, r2
 800a514:	608b      	str	r3, [r1, #8]
 800a516:	e00b      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a518:	40023800 	.word	0x40023800
 800a51c:	40007000 	.word	0x40007000
 800a520:	0ffffcff 	.word	0x0ffffcff
 800a524:	4bb3      	ldr	r3, [pc, #716]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	4ab2      	ldr	r2, [pc, #712]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a52a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a52e:	6093      	str	r3, [r2, #8]
 800a530:	4bb0      	ldr	r3, [pc, #704]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a53c:	49ad      	ldr	r1, [pc, #692]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0310 	and.w	r3, r3, #16
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d010      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a54e:	4ba9      	ldr	r3, [pc, #676]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a554:	4aa7      	ldr	r2, [pc, #668]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a55a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a55e:	4ba5      	ldr	r3, [pc, #660]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	49a2      	ldr	r1, [pc, #648]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a57c:	4b9d      	ldr	r3, [pc, #628]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a58a:	499a      	ldr	r1, [pc, #616]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a59e:	4b95      	ldr	r3, [pc, #596]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ac:	4991      	ldr	r1, [pc, #580]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5c0:	4b8c      	ldr	r3, [pc, #560]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ce:	4989      	ldr	r1, [pc, #548]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5e2:	4b84      	ldr	r3, [pc, #528]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f0:	4980      	ldr	r1, [pc, #512]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a604:	4b7b      	ldr	r3, [pc, #492]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a60a:	f023 0203 	bic.w	r2, r3, #3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a612:	4978      	ldr	r1, [pc, #480]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a614:	4313      	orrs	r3, r2
 800a616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a626:	4b73      	ldr	r3, [pc, #460]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62c:	f023 020c 	bic.w	r2, r3, #12
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a634:	496f      	ldr	r1, [pc, #444]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a636:	4313      	orrs	r3, r2
 800a638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00a      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a648:	4b6a      	ldr	r3, [pc, #424]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a656:	4967      	ldr	r1, [pc, #412]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a658:	4313      	orrs	r3, r2
 800a65a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a66a:	4b62      	ldr	r3, [pc, #392]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a670:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a678:	495e      	ldr	r1, [pc, #376]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a67a:	4313      	orrs	r3, r2
 800a67c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a68c:	4b59      	ldr	r3, [pc, #356]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69a:	4956      	ldr	r1, [pc, #344]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a6ae:	4b51      	ldr	r3, [pc, #324]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6bc:	494d      	ldr	r1, [pc, #308]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00a      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a6d0:	4b48      	ldr	r3, [pc, #288]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6de:	4945      	ldr	r1, [pc, #276]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a6f2:	4b40      	ldr	r3, [pc, #256]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a700:	493c      	ldr	r1, [pc, #240]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a702:	4313      	orrs	r3, r2
 800a704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a714:	4b37      	ldr	r3, [pc, #220]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a722:	4934      	ldr	r1, [pc, #208]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a724:	4313      	orrs	r3, r2
 800a726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d011      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a736:	4b2f      	ldr	r3, [pc, #188]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a73c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a744:	492b      	ldr	r1, [pc, #172]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a746:	4313      	orrs	r3, r2
 800a748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a754:	d101      	bne.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a756:	2301      	movs	r3, #1
 800a758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a766:	2301      	movs	r3, #1
 800a768:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a776:	4b1f      	ldr	r3, [pc, #124]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a77c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a784:	491b      	ldr	r1, [pc, #108]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a786:	4313      	orrs	r3, r2
 800a788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a798:	4b16      	ldr	r3, [pc, #88]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a79e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7a8:	4912      	ldr	r1, [pc, #72]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7cc:	4909      	ldr	r1, [pc, #36]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00f      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f0:	e002      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800a7f2:	bf00      	nop
 800a7f4:	40023800 	.word	0x40023800
 800a7f8:	4985      	ldr	r1, [pc, #532]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a80c:	4b80      	ldr	r3, [pc, #512]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a812:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a81c:	497c      	ldr	r1, [pc, #496]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d005      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a832:	f040 80d6 	bne.w	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a836:	4b76      	ldr	r3, [pc, #472]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a75      	ldr	r2, [pc, #468]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a83c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a842:	f7fc fda7 	bl	8007394 <HAL_GetTick>
 800a846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a848:	e008      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a84a:	f7fc fda3 	bl	8007394 <HAL_GetTick>
 800a84e:	4602      	mov	r2, r0
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	2b64      	cmp	r3, #100	; 0x64
 800a856:	d901      	bls.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a858:	2303      	movs	r3, #3
 800a85a:	e194      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a85c:	4b6c      	ldr	r3, [pc, #432]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1f0      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d021      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d11d      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a87c:	4b64      	ldr	r3, [pc, #400]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a87e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a882:	0c1b      	lsrs	r3, r3, #16
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a88a:	4b61      	ldr	r3, [pc, #388]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a890:	0e1b      	lsrs	r3, r3, #24
 800a892:	f003 030f 	and.w	r3, r3, #15
 800a896:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	019a      	lsls	r2, r3, #6
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	041b      	lsls	r3, r3, #16
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	061b      	lsls	r3, r3, #24
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	071b      	lsls	r3, r3, #28
 800a8b0:	4957      	ldr	r1, [pc, #348]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x586>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8cc:	d00a      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d02e      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8e2:	d129      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a8e4:	4b4a      	ldr	r3, [pc, #296]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ea:	0c1b      	lsrs	r3, r3, #16
 800a8ec:	f003 0303 	and.w	r3, r3, #3
 800a8f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a8f2:	4b47      	ldr	r3, [pc, #284]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f8:	0f1b      	lsrs	r3, r3, #28
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	019a      	lsls	r2, r3, #6
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	041b      	lsls	r3, r3, #16
 800a90a:	431a      	orrs	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	061b      	lsls	r3, r3, #24
 800a912:	431a      	orrs	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	071b      	lsls	r3, r3, #28
 800a918:	493d      	ldr	r1, [pc, #244]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a91a:	4313      	orrs	r3, r2
 800a91c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a920:	4b3b      	ldr	r3, [pc, #236]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a926:	f023 021f 	bic.w	r2, r3, #31
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	3b01      	subs	r3, #1
 800a930:	4937      	ldr	r1, [pc, #220]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a932:	4313      	orrs	r3, r2
 800a934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01d      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a944:	4b32      	ldr	r3, [pc, #200]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a94a:	0e1b      	lsrs	r3, r3, #24
 800a94c:	f003 030f 	and.w	r3, r3, #15
 800a950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a952:	4b2f      	ldr	r3, [pc, #188]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a958:	0f1b      	lsrs	r3, r3, #28
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	019a      	lsls	r2, r3, #6
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	041b      	lsls	r3, r3, #16
 800a96c:	431a      	orrs	r2, r3
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	061b      	lsls	r3, r3, #24
 800a972:	431a      	orrs	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	071b      	lsls	r3, r3, #28
 800a978:	4925      	ldr	r1, [pc, #148]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d011      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	019a      	lsls	r2, r3, #6
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	041b      	lsls	r3, r3, #16
 800a998:	431a      	orrs	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	061b      	lsls	r3, r3, #24
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	071b      	lsls	r3, r3, #28
 800a9a8:	4919      	ldr	r1, [pc, #100]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a9b0:	4b17      	ldr	r3, [pc, #92]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a16      	ldr	r2, [pc, #88]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9bc:	f7fc fcea 	bl	8007394 <HAL_GetTick>
 800a9c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a9c4:	f7fc fce6 	bl	8007394 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b64      	cmp	r3, #100	; 0x64
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e0d7      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a9d6:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0f0      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	f040 80cd 	bne.w	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a9ea:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a08      	ldr	r2, [pc, #32]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f6:	f7fc fccd 	bl	8007394 <HAL_GetTick>
 800a9fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a9fc:	e00a      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a9fe:	f7fc fcc9 	bl	8007394 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b64      	cmp	r3, #100	; 0x64
 800aa0a:	d903      	bls.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e0ba      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800aa10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aa14:	4b5e      	ldr	r3, [pc, #376]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa20:	d0ed      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d02e      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d12a      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aa4a:	4b51      	ldr	r3, [pc, #324]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aa4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa50:	0c1b      	lsrs	r3, r3, #16
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aa58:	4b4d      	ldr	r3, [pc, #308]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aa5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5e:	0f1b      	lsrs	r3, r3, #28
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	019a      	lsls	r2, r3, #6
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	431a      	orrs	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	061b      	lsls	r3, r3, #24
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	071b      	lsls	r3, r3, #28
 800aa7e:	4944      	ldr	r1, [pc, #272]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aa86:	4b42      	ldr	r3, [pc, #264]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa94:	3b01      	subs	r3, #1
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	493d      	ldr	r1, [pc, #244]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d022      	beq.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aab4:	d11d      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aab6:	4b36      	ldr	r3, [pc, #216]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabc:	0e1b      	lsrs	r3, r3, #24
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aac4:	4b32      	ldr	r3, [pc, #200]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	0f1b      	lsrs	r3, r3, #28
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	019a      	lsls	r2, r3, #6
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	041b      	lsls	r3, r3, #16
 800aade:	431a      	orrs	r2, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	061b      	lsls	r3, r3, #24
 800aae4:	431a      	orrs	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	071b      	lsls	r3, r3, #28
 800aaea:	4929      	ldr	r1, [pc, #164]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d028      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aafe:	4b24      	ldr	r3, [pc, #144]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab04:	0e1b      	lsrs	r3, r3, #24
 800ab06:	f003 030f 	and.w	r3, r3, #15
 800ab0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ab0c:	4b20      	ldr	r3, [pc, #128]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab12:	0c1b      	lsrs	r3, r3, #16
 800ab14:	f003 0303 	and.w	r3, r3, #3
 800ab18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	019a      	lsls	r2, r3, #6
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	431a      	orrs	r2, r3
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	061b      	lsls	r3, r3, #24
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	071b      	lsls	r3, r3, #28
 800ab32:	4917      	ldr	r1, [pc, #92]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ab3a:	4b15      	ldr	r3, [pc, #84]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	4911      	ldr	r1, [pc, #68]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a0e      	ldr	r2, [pc, #56]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab5c:	f7fc fc1a 	bl	8007394 <HAL_GetTick>
 800ab60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ab62:	e008      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ab64:	f7fc fc16 	bl	8007394 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b64      	cmp	r3, #100	; 0x64
 800ab70:	d901      	bls.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e007      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ab76:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab82:	d1ef      	bne.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3720      	adds	r7, #32
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	40023800 	.word	0x40023800

0800ab94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e06b      	b.n	800ac7e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	7f5b      	ldrb	r3, [r3, #29]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	d105      	bne.n	800abbc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fb ff02 	bl	80069c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	22ca      	movs	r2, #202	; 0xca
 800abc8:	625a      	str	r2, [r3, #36]	; 0x24
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2253      	movs	r2, #83	; 0x53
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f85a 	bl	800ac8c <RTC_EnterInitMode>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d008      	beq.n	800abf0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	22ff      	movs	r2, #255	; 0xff
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2204      	movs	r2, #4
 800abea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e046      	b.n	800ac7e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	6899      	ldr	r1, [r3, #8]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	4b23      	ldr	r3, [pc, #140]	; (800ac88 <HAL_RTC_Init+0xf4>)
 800abfc:	400b      	ands	r3, r1
 800abfe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6899      	ldr	r1, [r3, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	68d2      	ldr	r2, [r2, #12]
 800ac26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6919      	ldr	r1, [r3, #16]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	041a      	lsls	r2, r3, #16
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68da      	ldr	r2, [r3, #12]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac4a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0208 	bic.w	r2, r2, #8
 800ac5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	22ff      	movs	r2, #255	; 0xff
 800ac74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
  }
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	ff8fffbf 	.word	0xff8fffbf

0800ac8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d119      	bne.n	800acda <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295
 800acae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800acb0:	f7fc fb70 	bl	8007394 <HAL_GetTick>
 800acb4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800acb6:	e009      	b.n	800accc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800acb8:	f7fc fb6c 	bl	8007394 <HAL_GetTick>
 800acbc:	4602      	mov	r2, r0
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acc6:	d901      	bls.n	800accc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e007      	b.n	800acdc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0ee      	beq.n	800acb8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e084      	b.n	800ae00 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d106      	bne.n	800ad16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7fb fe6f 	bl	80069f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad2c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad36:	d902      	bls.n	800ad3e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	e002      	b.n	800ad44 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ad3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ad4c:	d007      	beq.n	800ad5e <HAL_SPI_Init+0x7a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad56:	d002      	beq.n	800ad5e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10b      	bne.n	800ad7e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad6e:	d903      	bls.n	800ad78 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	631a      	str	r2, [r3, #48]	; 0x30
 800ad76:	e002      	b.n	800ad7e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	431a      	orrs	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	431a      	orrs	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	431a      	orrs	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	ea42 0103 	orr.w	r1, r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	f003 0204 	and.w	r2, r3, #4
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	431a      	orrs	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adcc:	431a      	orrs	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	ea42 0103 	orr.w	r1, r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	430a      	orrs	r2, r1
 800adde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	69da      	ldr	r2, [r3, #28]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	4613      	mov	r3, r2
 800ae16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d101      	bne.n	800ae2a <HAL_SPI_Transmit+0x22>
 800ae26:	2302      	movs	r3, #2
 800ae28:	e150      	b.n	800b0cc <HAL_SPI_Transmit+0x2c4>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae32:	f7fc faaf 	bl	8007394 <HAL_GetTick>
 800ae36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ae38:	88fb      	ldrh	r3, [r7, #6]
 800ae3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d002      	beq.n	800ae4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae4c:	e135      	b.n	800b0ba <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <HAL_SPI_Transmit+0x52>
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae5e:	e12c      	b.n	800b0ba <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2203      	movs	r2, #3
 800ae64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	88fa      	ldrh	r2, [r7, #6]
 800ae78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	88fa      	ldrh	r2, [r7, #6]
 800ae7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeaa:	d107      	bne.n	800aebc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aeba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec6:	2b40      	cmp	r3, #64	; 0x40
 800aec8:	d007      	beq.n	800aeda <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aee2:	d94b      	bls.n	800af7c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <HAL_SPI_Transmit+0xea>
 800aeec:	8afb      	ldrh	r3, [r7, #22]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d13e      	bne.n	800af70 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	881a      	ldrh	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	1c9a      	adds	r2, r3, #2
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800af16:	e02b      	b.n	800af70 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d112      	bne.n	800af4c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2a:	881a      	ldrh	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af36:	1c9a      	adds	r2, r3, #2
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af40:	b29b      	uxth	r3, r3
 800af42:	3b01      	subs	r3, #1
 800af44:	b29a      	uxth	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af4a:	e011      	b.n	800af70 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af4c:	f7fc fa22 	bl	8007394 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d803      	bhi.n	800af64 <HAL_SPI_Transmit+0x15c>
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af62:	d102      	bne.n	800af6a <HAL_SPI_Transmit+0x162>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af6e:	e0a4      	b.n	800b0ba <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1ce      	bne.n	800af18 <HAL_SPI_Transmit+0x110>
 800af7a:	e07c      	b.n	800b076 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <HAL_SPI_Transmit+0x182>
 800af84:	8afb      	ldrh	r3, [r7, #22]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d170      	bne.n	800b06c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af8e:	b29b      	uxth	r3, r3
 800af90:	2b01      	cmp	r3, #1
 800af92:	d912      	bls.n	800afba <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af98:	881a      	ldrh	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	1c9a      	adds	r2, r3, #2
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afae:	b29b      	uxth	r3, r3
 800afb0:	3b02      	subs	r3, #2
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800afb8:	e058      	b.n	800b06c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	330c      	adds	r3, #12
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	3b01      	subs	r3, #1
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800afe0:	e044      	b.n	800b06c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	2b02      	cmp	r3, #2
 800afee:	d12b      	bne.n	800b048 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d912      	bls.n	800b020 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affe:	881a      	ldrh	r2, [r3, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00a:	1c9a      	adds	r2, r3, #2
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b014:	b29b      	uxth	r3, r3
 800b016:	3b02      	subs	r3, #2
 800b018:	b29a      	uxth	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b01e:	e025      	b.n	800b06c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	330c      	adds	r3, #12
 800b02a:	7812      	ldrb	r2, [r2, #0]
 800b02c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	3b01      	subs	r3, #1
 800b040:	b29a      	uxth	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b046:	e011      	b.n	800b06c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b048:	f7fc f9a4 	bl	8007394 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d803      	bhi.n	800b060 <HAL_SPI_Transmit+0x258>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05e:	d102      	bne.n	800b066 <HAL_SPI_Transmit+0x25e>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b06a:	e026      	b.n	800b0ba <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1b5      	bne.n	800afe2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fa20 	bl	800b4c0 <SPI_EndRxTxTransaction>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2220      	movs	r2, #32
 800b08a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b094:	2300      	movs	r3, #0
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	613b      	str	r3, [r7, #16]
 800b0a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	e000      	b.n	800b0ba <HAL_SPI_Transmit+0x2b2>
  }

error:
 800b0b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b0ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3720      	adds	r7, #32
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b088      	sub	sp, #32
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	099b      	lsrs	r3, r3, #6
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10f      	bne.n	800b118 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	099b      	lsrs	r3, r3, #6
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d004      	beq.n	800b118 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
    return;
 800b116:	e0d8      	b.n	800b2ca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	085b      	lsrs	r3, r3, #1
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00a      	beq.n	800b13a <HAL_SPI_IRQHandler+0x66>
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	09db      	lsrs	r3, r3, #7
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d004      	beq.n	800b13a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	4798      	blx	r3
    return;
 800b138:	e0c7      	b.n	800b2ca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	095b      	lsrs	r3, r3, #5
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10c      	bne.n	800b160 <HAL_SPI_IRQHandler+0x8c>
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	099b      	lsrs	r3, r3, #6
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <HAL_SPI_IRQHandler+0x8c>
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	0a1b      	lsrs	r3, r3, #8
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 80b5 	beq.w	800b2ca <HAL_SPI_IRQHandler+0x1f6>
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	095b      	lsrs	r3, r3, #5
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 80ae 	beq.w	800b2ca <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	099b      	lsrs	r3, r3, #6
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b00      	cmp	r3, #0
 800b178:	d023      	beq.n	800b1c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b03      	cmp	r3, #3
 800b184:	d011      	beq.n	800b1aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b18a:	f043 0204 	orr.w	r2, r3, #4
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	617b      	str	r3, [r7, #20]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	617b      	str	r3, [r7, #20]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	e00b      	b.n	800b1c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	613b      	str	r3, [r7, #16]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	613b      	str	r3, [r7, #16]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	613b      	str	r3, [r7, #16]
 800b1be:	693b      	ldr	r3, [r7, #16]
        return;
 800b1c0:	e083      	b.n	800b2ca <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	095b      	lsrs	r3, r3, #5
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d014      	beq.n	800b1f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d2:	f043 0201 	orr.w	r2, r3, #1
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	0a1b      	lsrs	r3, r3, #8
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00c      	beq.n	800b21e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b208:	f043 0208 	orr.w	r2, r3, #8
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b210:	2300      	movs	r3, #0
 800b212:	60bb      	str	r3, [r7, #8]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	60bb      	str	r3, [r7, #8]
 800b21c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b222:	2b00      	cmp	r3, #0
 800b224:	d050      	beq.n	800b2c8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b234:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	d104      	bne.n	800b252 <HAL_SPI_IRQHandler+0x17e>
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d034      	beq.n	800b2bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0203 	bic.w	r2, r2, #3
 800b260:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b266:	2b00      	cmp	r3, #0
 800b268:	d011      	beq.n	800b28e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26e:	4a18      	ldr	r2, [pc, #96]	; (800b2d0 <HAL_SPI_IRQHandler+0x1fc>)
 800b270:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd f8c6 	bl	8008408 <HAL_DMA_Abort_IT>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d005      	beq.n	800b28e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b286:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b292:	2b00      	cmp	r3, #0
 800b294:	d016      	beq.n	800b2c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29a:	4a0d      	ldr	r2, [pc, #52]	; (800b2d0 <HAL_SPI_IRQHandler+0x1fc>)
 800b29c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fd f8b0 	bl	8008408 <HAL_DMA_Abort_IT>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00a      	beq.n	800b2c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b2ba:	e003      	b.n	800b2c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f809 	bl	800b2d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b2c2:	e000      	b.n	800b2c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b2c4:	bf00      	nop
    return;
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
  }
}
 800b2ca:	3720      	adds	r7, #32
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0800b2e9 	.word	0x0800b2e9

0800b2d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff ffe5 	bl	800b2d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b30a:	bf00      	nop
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	603b      	str	r3, [r7, #0]
 800b31e:	4613      	mov	r3, r2
 800b320:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b322:	e04c      	b.n	800b3be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32a:	d048      	beq.n	800b3be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b32c:	f7fc f832 	bl	8007394 <HAL_GetTick>
 800b330:	4602      	mov	r2, r0
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d902      	bls.n	800b342 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d13d      	bne.n	800b3be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b35a:	d111      	bne.n	800b380 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b364:	d004      	beq.n	800b370 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b36e:	d107      	bne.n	800b380 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b37e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b388:	d10f      	bne.n	800b3aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e00f      	b.n	800b3de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	bf0c      	ite	eq
 800b3ce:	2301      	moveq	r3, #1
 800b3d0:	2300      	movne	r3, #0
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	79fb      	ldrb	r3, [r7, #7]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d1a3      	bne.n	800b324 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800b3f4:	e057      	b.n	800b4a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b3fc:	d106      	bne.n	800b40c <SPI_WaitFifoStateUntilTimeout+0x26>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d103      	bne.n	800b40c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	330c      	adds	r3, #12
 800b40a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b412:	d048      	beq.n	800b4a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b414:	f7fb ffbe 	bl	8007394 <HAL_GetTick>
 800b418:	4602      	mov	r2, r0
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	429a      	cmp	r2, r3
 800b422:	d902      	bls.n	800b42a <SPI_WaitFifoStateUntilTimeout+0x44>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d13d      	bne.n	800b4a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	685a      	ldr	r2, [r3, #4]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b442:	d111      	bne.n	800b468 <SPI_WaitFifoStateUntilTimeout+0x82>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b44c:	d004      	beq.n	800b458 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b456:	d107      	bne.n	800b468 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b470:	d10f      	bne.n	800b492 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e008      	b.n	800b4b8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d19f      	bne.n	800b3f6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af02      	add	r7, sp, #8
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f7ff ff84 	bl	800b3e6 <SPI_WaitFifoStateUntilTimeout>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d007      	beq.n	800b4f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4e8:	f043 0220 	orr.w	r2, r3, #32
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e027      	b.n	800b544 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2180      	movs	r1, #128	; 0x80
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff ff07 	bl	800b312 <SPI_WaitFlagStateUntilTimeout>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b50e:	f043 0220 	orr.w	r2, r3, #32
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e014      	b.n	800b544 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2200      	movs	r2, #0
 800b522:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff ff5d 	bl	800b3e6 <SPI_WaitFifoStateUntilTimeout>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d007      	beq.n	800b542 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b536:	f043 0220 	orr.w	r2, r3, #32
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e000      	b.n	800b544 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e01d      	b.n	800b59a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7fb fada 	bl	8006b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3304      	adds	r3, #4
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f000 fb82 	bl	800bc94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68da      	ldr	r2, [r3, #12]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f042 0201 	orr.w	r2, r2, #1
 800b5ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689a      	ldr	r2, [r3, #8]
 800b5c2:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <HAL_TIM_Base_Start_IT+0x50>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b06      	cmp	r3, #6
 800b5cc:	d00b      	beq.n	800b5e6 <HAL_TIM_Base_Start_IT+0x42>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5d4:	d007      	beq.n	800b5e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f042 0201 	orr.w	r2, r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr
 800b5f4:	00010007 	.word	0x00010007

0800b5f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e01d      	b.n	800b646 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d106      	bne.n	800b624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f815 	bl	800b64e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3304      	adds	r3, #4
 800b634:	4619      	mov	r1, r3
 800b636:	4610      	mov	r0, r2
 800b638:	f000 fb2c 	bl	800bc94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b02      	cmp	r3, #2
 800b676:	d122      	bne.n	800b6be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	2b02      	cmp	r3, #2
 800b684:	d11b      	bne.n	800b6be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f06f 0202 	mvn.w	r2, #2
 800b68e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f003 0303 	and.w	r3, r3, #3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fad7 	bl	800bc58 <HAL_TIM_IC_CaptureCallback>
 800b6aa:	e005      	b.n	800b6b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fac9 	bl	800bc44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fada 	bl	800bc6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d122      	bne.n	800b712 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f003 0304 	and.w	r3, r3, #4
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d11b      	bne.n	800b712 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f06f 0204 	mvn.w	r2, #4
 800b6e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 faad 	bl	800bc58 <HAL_TIM_IC_CaptureCallback>
 800b6fe:	e005      	b.n	800b70c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa9f 	bl	800bc44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fab0 	bl	800bc6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d122      	bne.n	800b766 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0308 	and.w	r3, r3, #8
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d11b      	bne.n	800b766 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0208 	mvn.w	r2, #8
 800b736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2204      	movs	r2, #4
 800b73c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	f003 0303 	and.w	r3, r3, #3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fa83 	bl	800bc58 <HAL_TIM_IC_CaptureCallback>
 800b752:	e005      	b.n	800b760 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fa75 	bl	800bc44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa86 	bl	800bc6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	f003 0310 	and.w	r3, r3, #16
 800b770:	2b10      	cmp	r3, #16
 800b772:	d122      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f003 0310 	and.w	r3, r3, #16
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d11b      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f06f 0210 	mvn.w	r2, #16
 800b78a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2208      	movs	r2, #8
 800b790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fa59 	bl	800bc58 <HAL_TIM_IC_CaptureCallback>
 800b7a6:	e005      	b.n	800b7b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fa4b 	bl	800bc44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa5c 	bl	800bc6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10e      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d107      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f06f 0201 	mvn.w	r2, #1
 800b7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7f8 fccf 	bl	8004184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f0:	2b80      	cmp	r3, #128	; 0x80
 800b7f2:	d10e      	bne.n	800b812 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7fe:	2b80      	cmp	r3, #128	; 0x80
 800b800:	d107      	bne.n	800b812 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fe71 	bl	800c4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b820:	d10e      	bne.n	800b840 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82c:	2b80      	cmp	r3, #128	; 0x80
 800b82e:	d107      	bne.n	800b840 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fe64 	bl	800c508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b84a:	2b40      	cmp	r3, #64	; 0x40
 800b84c:	d10e      	bne.n	800b86c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b858:	2b40      	cmp	r3, #64	; 0x40
 800b85a:	d107      	bne.n	800b86c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa0a 	bl	800bc80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	f003 0320 	and.w	r3, r3, #32
 800b876:	2b20      	cmp	r3, #32
 800b878:	d10e      	bne.n	800b898 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b20      	cmp	r3, #32
 800b886:	d107      	bne.n	800b898 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0220 	mvn.w	r2, #32
 800b890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fe24 	bl	800c4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d101      	bne.n	800b8ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	e105      	b.n	800bac6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b14      	cmp	r3, #20
 800b8ce:	f200 80f0 	bhi.w	800bab2 <HAL_TIM_PWM_ConfigChannel+0x212>
 800b8d2:	a201      	add	r2, pc, #4	; (adr r2, 800b8d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d8:	0800b92d 	.word	0x0800b92d
 800b8dc:	0800bab3 	.word	0x0800bab3
 800b8e0:	0800bab3 	.word	0x0800bab3
 800b8e4:	0800bab3 	.word	0x0800bab3
 800b8e8:	0800b96d 	.word	0x0800b96d
 800b8ec:	0800bab3 	.word	0x0800bab3
 800b8f0:	0800bab3 	.word	0x0800bab3
 800b8f4:	0800bab3 	.word	0x0800bab3
 800b8f8:	0800b9af 	.word	0x0800b9af
 800b8fc:	0800bab3 	.word	0x0800bab3
 800b900:	0800bab3 	.word	0x0800bab3
 800b904:	0800bab3 	.word	0x0800bab3
 800b908:	0800b9ef 	.word	0x0800b9ef
 800b90c:	0800bab3 	.word	0x0800bab3
 800b910:	0800bab3 	.word	0x0800bab3
 800b914:	0800bab3 	.word	0x0800bab3
 800b918:	0800ba31 	.word	0x0800ba31
 800b91c:	0800bab3 	.word	0x0800bab3
 800b920:	0800bab3 	.word	0x0800bab3
 800b924:	0800bab3 	.word	0x0800bab3
 800b928:	0800ba71 	.word	0x0800ba71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68b9      	ldr	r1, [r7, #8]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 fa4e 	bl	800bdd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0208 	orr.w	r2, r2, #8
 800b946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f022 0204 	bic.w	r2, r2, #4
 800b956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6999      	ldr	r1, [r3, #24]
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	691a      	ldr	r2, [r3, #16]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	619a      	str	r2, [r3, #24]
      break;
 800b96a:	e0a3      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68b9      	ldr	r1, [r7, #8]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 faa0 	bl	800beb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6999      	ldr	r1, [r3, #24]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	021a      	lsls	r2, r3, #8
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	619a      	str	r2, [r3, #24]
      break;
 800b9ac:	e082      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 faf7 	bl	800bfa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	69da      	ldr	r2, [r3, #28]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 0208 	orr.w	r2, r2, #8
 800b9c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	69da      	ldr	r2, [r3, #28]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f022 0204 	bic.w	r2, r2, #4
 800b9d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	69d9      	ldr	r1, [r3, #28]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	691a      	ldr	r2, [r3, #16]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	61da      	str	r2, [r3, #28]
      break;
 800b9ec:	e062      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fb4d 	bl	800c094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69da      	ldr	r2, [r3, #28]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	69d9      	ldr	r1, [r3, #28]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	021a      	lsls	r2, r3, #8
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	61da      	str	r2, [r3, #28]
      break;
 800ba2e:	e041      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68b9      	ldr	r1, [r7, #8]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fb84 	bl	800c144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f042 0208 	orr.w	r2, r2, #8
 800ba4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0204 	bic.w	r2, r2, #4
 800ba5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	691a      	ldr	r2, [r3, #16]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba6e:	e021      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68b9      	ldr	r1, [r7, #8]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fbb6 	bl	800c1e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	021a      	lsls	r2, r3, #8
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bab0:	e000      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800bab2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop

0800bad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d101      	bne.n	800bae8 <HAL_TIM_ConfigClockSource+0x18>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e0a6      	b.n	800bc36 <HAL_TIM_ConfigClockSource+0x166>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4b4f      	ldr	r3, [pc, #316]	; (800bc40 <HAL_TIM_ConfigClockSource+0x170>)
 800bb04:	4013      	ands	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b40      	cmp	r3, #64	; 0x40
 800bb1e:	d067      	beq.n	800bbf0 <HAL_TIM_ConfigClockSource+0x120>
 800bb20:	2b40      	cmp	r3, #64	; 0x40
 800bb22:	d80b      	bhi.n	800bb3c <HAL_TIM_ConfigClockSource+0x6c>
 800bb24:	2b10      	cmp	r3, #16
 800bb26:	d073      	beq.n	800bc10 <HAL_TIM_ConfigClockSource+0x140>
 800bb28:	2b10      	cmp	r3, #16
 800bb2a:	d802      	bhi.n	800bb32 <HAL_TIM_ConfigClockSource+0x62>
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d06f      	beq.n	800bc10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bb30:	e078      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	d06c      	beq.n	800bc10 <HAL_TIM_ConfigClockSource+0x140>
 800bb36:	2b30      	cmp	r3, #48	; 0x30
 800bb38:	d06a      	beq.n	800bc10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bb3a:	e073      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bb3c:	2b70      	cmp	r3, #112	; 0x70
 800bb3e:	d00d      	beq.n	800bb5c <HAL_TIM_ConfigClockSource+0x8c>
 800bb40:	2b70      	cmp	r3, #112	; 0x70
 800bb42:	d804      	bhi.n	800bb4e <HAL_TIM_ConfigClockSource+0x7e>
 800bb44:	2b50      	cmp	r3, #80	; 0x50
 800bb46:	d033      	beq.n	800bbb0 <HAL_TIM_ConfigClockSource+0xe0>
 800bb48:	2b60      	cmp	r3, #96	; 0x60
 800bb4a:	d041      	beq.n	800bbd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bb4c:	e06a      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bb4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb52:	d066      	beq.n	800bc22 <HAL_TIM_ConfigClockSource+0x152>
 800bb54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb58:	d017      	beq.n	800bb8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bb5a:	e063      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6818      	ldr	r0, [r3, #0]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	6899      	ldr	r1, [r3, #8]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	f000 fc0a 	bl	800c384 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	609a      	str	r2, [r3, #8]
      break;
 800bb88:	e04c      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6818      	ldr	r0, [r3, #0]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	6899      	ldr	r1, [r3, #8]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	f000 fbf3 	bl	800c384 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbac:	609a      	str	r2, [r3, #8]
      break;
 800bbae:	e039      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	6859      	ldr	r1, [r3, #4]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	f000 fb67 	bl	800c290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2150      	movs	r1, #80	; 0x50
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 fbc0 	bl	800c34e <TIM_ITRx_SetConfig>
      break;
 800bbce:	e029      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6859      	ldr	r1, [r3, #4]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	f000 fb86 	bl	800c2ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2160      	movs	r1, #96	; 0x60
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 fbb0 	bl	800c34e <TIM_ITRx_SetConfig>
      break;
 800bbee:	e019      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	6859      	ldr	r1, [r3, #4]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	f000 fb47 	bl	800c290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2140      	movs	r1, #64	; 0x40
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 fba0 	bl	800c34e <TIM_ITRx_SetConfig>
      break;
 800bc0e:	e009      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	f000 fb97 	bl	800c34e <TIM_ITRx_SetConfig>
      break;
 800bc20:	e000      	b.n	800bc24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bc22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	fffeff88 	.word	0xfffeff88

0800bc44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a40      	ldr	r2, [pc, #256]	; (800bda8 <TIM_Base_SetConfig+0x114>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d013      	beq.n	800bcd4 <TIM_Base_SetConfig+0x40>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb2:	d00f      	beq.n	800bcd4 <TIM_Base_SetConfig+0x40>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a3d      	ldr	r2, [pc, #244]	; (800bdac <TIM_Base_SetConfig+0x118>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d00b      	beq.n	800bcd4 <TIM_Base_SetConfig+0x40>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a3c      	ldr	r2, [pc, #240]	; (800bdb0 <TIM_Base_SetConfig+0x11c>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d007      	beq.n	800bcd4 <TIM_Base_SetConfig+0x40>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a3b      	ldr	r2, [pc, #236]	; (800bdb4 <TIM_Base_SetConfig+0x120>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d003      	beq.n	800bcd4 <TIM_Base_SetConfig+0x40>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a3a      	ldr	r2, [pc, #232]	; (800bdb8 <TIM_Base_SetConfig+0x124>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d108      	bne.n	800bce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a2f      	ldr	r2, [pc, #188]	; (800bda8 <TIM_Base_SetConfig+0x114>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d02b      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf4:	d027      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a2c      	ldr	r2, [pc, #176]	; (800bdac <TIM_Base_SetConfig+0x118>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d023      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a2b      	ldr	r2, [pc, #172]	; (800bdb0 <TIM_Base_SetConfig+0x11c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d01f      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a2a      	ldr	r2, [pc, #168]	; (800bdb4 <TIM_Base_SetConfig+0x120>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d01b      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a29      	ldr	r2, [pc, #164]	; (800bdb8 <TIM_Base_SetConfig+0x124>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d017      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a28      	ldr	r2, [pc, #160]	; (800bdbc <TIM_Base_SetConfig+0x128>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d013      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a27      	ldr	r2, [pc, #156]	; (800bdc0 <TIM_Base_SetConfig+0x12c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d00f      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a26      	ldr	r2, [pc, #152]	; (800bdc4 <TIM_Base_SetConfig+0x130>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d00b      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a25      	ldr	r2, [pc, #148]	; (800bdc8 <TIM_Base_SetConfig+0x134>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d007      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a24      	ldr	r2, [pc, #144]	; (800bdcc <TIM_Base_SetConfig+0x138>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d003      	beq.n	800bd46 <TIM_Base_SetConfig+0xb2>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a23      	ldr	r2, [pc, #140]	; (800bdd0 <TIM_Base_SetConfig+0x13c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d108      	bne.n	800bd58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	689a      	ldr	r2, [r3, #8]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a0a      	ldr	r2, [pc, #40]	; (800bda8 <TIM_Base_SetConfig+0x114>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d003      	beq.n	800bd8c <TIM_Base_SetConfig+0xf8>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a0c      	ldr	r2, [pc, #48]	; (800bdb8 <TIM_Base_SetConfig+0x124>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d103      	bne.n	800bd94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	691a      	ldr	r2, [r3, #16]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	615a      	str	r2, [r3, #20]
}
 800bd9a:	bf00      	nop
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	40010000 	.word	0x40010000
 800bdac:	40000400 	.word	0x40000400
 800bdb0:	40000800 	.word	0x40000800
 800bdb4:	40000c00 	.word	0x40000c00
 800bdb8:	40010400 	.word	0x40010400
 800bdbc:	40014000 	.word	0x40014000
 800bdc0:	40014400 	.word	0x40014400
 800bdc4:	40014800 	.word	0x40014800
 800bdc8:	40001800 	.word	0x40001800
 800bdcc:	40001c00 	.word	0x40001c00
 800bdd0:	40002000 	.word	0x40002000

0800bdd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	f023 0201 	bic.w	r2, r3, #1
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4b2b      	ldr	r3, [pc, #172]	; (800beac <TIM_OC1_SetConfig+0xd8>)
 800be00:	4013      	ands	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 0303 	bic.w	r3, r3, #3
 800be0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f023 0302 	bic.w	r3, r3, #2
 800be1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4313      	orrs	r3, r2
 800be26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a21      	ldr	r2, [pc, #132]	; (800beb0 <TIM_OC1_SetConfig+0xdc>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d003      	beq.n	800be38 <TIM_OC1_SetConfig+0x64>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a20      	ldr	r2, [pc, #128]	; (800beb4 <TIM_OC1_SetConfig+0xe0>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d10c      	bne.n	800be52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f023 0308 	bic.w	r3, r3, #8
 800be3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	4313      	orrs	r3, r2
 800be48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f023 0304 	bic.w	r3, r3, #4
 800be50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a16      	ldr	r2, [pc, #88]	; (800beb0 <TIM_OC1_SetConfig+0xdc>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d003      	beq.n	800be62 <TIM_OC1_SetConfig+0x8e>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a15      	ldr	r2, [pc, #84]	; (800beb4 <TIM_OC1_SetConfig+0xe0>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d111      	bne.n	800be86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4313      	orrs	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	4313      	orrs	r3, r2
 800be84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	621a      	str	r2, [r3, #32]
}
 800bea0:	bf00      	nop
 800bea2:	371c      	adds	r7, #28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	fffeff8f 	.word	0xfffeff8f
 800beb0:	40010000 	.word	0x40010000
 800beb4:	40010400 	.word	0x40010400

0800beb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	f023 0210 	bic.w	r2, r3, #16
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4b2e      	ldr	r3, [pc, #184]	; (800bf9c <TIM_OC2_SetConfig+0xe4>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	f023 0320 	bic.w	r3, r3, #32
 800bf02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	011b      	lsls	r3, r3, #4
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a23      	ldr	r2, [pc, #140]	; (800bfa0 <TIM_OC2_SetConfig+0xe8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d003      	beq.n	800bf20 <TIM_OC2_SetConfig+0x68>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a22      	ldr	r2, [pc, #136]	; (800bfa4 <TIM_OC2_SetConfig+0xec>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d10d      	bne.n	800bf3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	011b      	lsls	r3, r3, #4
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a18      	ldr	r2, [pc, #96]	; (800bfa0 <TIM_OC2_SetConfig+0xe8>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d003      	beq.n	800bf4c <TIM_OC2_SetConfig+0x94>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a17      	ldr	r2, [pc, #92]	; (800bfa4 <TIM_OC2_SetConfig+0xec>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d113      	bne.n	800bf74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	621a      	str	r2, [r3, #32]
}
 800bf8e:	bf00      	nop
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	feff8fff 	.word	0xfeff8fff
 800bfa0:	40010000 	.word	0x40010000
 800bfa4:	40010400 	.word	0x40010400

0800bfa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	69db      	ldr	r3, [r3, #28]
 800bfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4b2d      	ldr	r3, [pc, #180]	; (800c088 <TIM_OC3_SetConfig+0xe0>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f023 0303 	bic.w	r3, r3, #3
 800bfde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	021b      	lsls	r3, r3, #8
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a22      	ldr	r2, [pc, #136]	; (800c08c <TIM_OC3_SetConfig+0xe4>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d003      	beq.n	800c00e <TIM_OC3_SetConfig+0x66>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a21      	ldr	r2, [pc, #132]	; (800c090 <TIM_OC3_SetConfig+0xe8>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d10d      	bne.n	800c02a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	021b      	lsls	r3, r3, #8
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	4313      	orrs	r3, r2
 800c020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a17      	ldr	r2, [pc, #92]	; (800c08c <TIM_OC3_SetConfig+0xe4>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d003      	beq.n	800c03a <TIM_OC3_SetConfig+0x92>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a16      	ldr	r2, [pc, #88]	; (800c090 <TIM_OC3_SetConfig+0xe8>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d113      	bne.n	800c062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	011b      	lsls	r3, r3, #4
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	4313      	orrs	r3, r2
 800c054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	4313      	orrs	r3, r2
 800c060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	621a      	str	r2, [r3, #32]
}
 800c07c:	bf00      	nop
 800c07e:	371c      	adds	r7, #28
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	fffeff8f 	.word	0xfffeff8f
 800c08c:	40010000 	.word	0x40010000
 800c090:	40010400 	.word	0x40010400

0800c094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	4b1e      	ldr	r3, [pc, #120]	; (800c138 <TIM_OC4_SetConfig+0xa4>)
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	021b      	lsls	r3, r3, #8
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	031b      	lsls	r3, r3, #12
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a13      	ldr	r2, [pc, #76]	; (800c13c <TIM_OC4_SetConfig+0xa8>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d003      	beq.n	800c0fc <TIM_OC4_SetConfig+0x68>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a12      	ldr	r2, [pc, #72]	; (800c140 <TIM_OC4_SetConfig+0xac>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d109      	bne.n	800c110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	019b      	lsls	r3, r3, #6
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	621a      	str	r2, [r3, #32]
}
 800c12a:	bf00      	nop
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	feff8fff 	.word	0xfeff8fff
 800c13c:	40010000 	.word	0x40010000
 800c140:	40010400 	.word	0x40010400

0800c144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4b1b      	ldr	r3, [pc, #108]	; (800c1dc <TIM_OC5_SetConfig+0x98>)
 800c170:	4013      	ands	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	041b      	lsls	r3, r3, #16
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a12      	ldr	r2, [pc, #72]	; (800c1e0 <TIM_OC5_SetConfig+0x9c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d003      	beq.n	800c1a2 <TIM_OC5_SetConfig+0x5e>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a11      	ldr	r2, [pc, #68]	; (800c1e4 <TIM_OC5_SetConfig+0xa0>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d109      	bne.n	800c1b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	021b      	lsls	r3, r3, #8
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	621a      	str	r2, [r3, #32]
}
 800c1d0:	bf00      	nop
 800c1d2:	371c      	adds	r7, #28
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	fffeff8f 	.word	0xfffeff8f
 800c1e0:	40010000 	.word	0x40010000
 800c1e4:	40010400 	.word	0x40010400

0800c1e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4b1c      	ldr	r3, [pc, #112]	; (800c284 <TIM_OC6_SetConfig+0x9c>)
 800c214:	4013      	ands	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	021b      	lsls	r3, r3, #8
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	4313      	orrs	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c22a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	051b      	lsls	r3, r3, #20
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	4313      	orrs	r3, r2
 800c236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a13      	ldr	r2, [pc, #76]	; (800c288 <TIM_OC6_SetConfig+0xa0>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d003      	beq.n	800c248 <TIM_OC6_SetConfig+0x60>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a12      	ldr	r2, [pc, #72]	; (800c28c <TIM_OC6_SetConfig+0xa4>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d109      	bne.n	800c25c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c24e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	029b      	lsls	r3, r3, #10
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	4313      	orrs	r3, r2
 800c25a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	621a      	str	r2, [r3, #32]
}
 800c276:	bf00      	nop
 800c278:	371c      	adds	r7, #28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	feff8fff 	.word	0xfeff8fff
 800c288:	40010000 	.word	0x40010000
 800c28c:	40010400 	.word	0x40010400

0800c290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6a1b      	ldr	r3, [r3, #32]
 800c2a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	f023 0201 	bic.w	r2, r3, #1
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	011b      	lsls	r3, r3, #4
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f023 030a 	bic.w	r3, r3, #10
 800c2cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	621a      	str	r2, [r3, #32]
}
 800c2e2:	bf00      	nop
 800c2e4:	371c      	adds	r7, #28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b087      	sub	sp, #28
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	60f8      	str	r0, [r7, #12]
 800c2f6:	60b9      	str	r1, [r7, #8]
 800c2f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	f023 0210 	bic.w	r2, r3, #16
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	031b      	lsls	r3, r3, #12
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	4313      	orrs	r3, r2
 800c322:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c32a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	011b      	lsls	r3, r3, #4
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	4313      	orrs	r3, r2
 800c334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	621a      	str	r2, [r3, #32]
}
 800c342:	bf00      	nop
 800c344:	371c      	adds	r7, #28
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c34e:	b480      	push	{r7}
 800c350:	b085      	sub	sp, #20
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	f043 0307 	orr.w	r3, r3, #7
 800c370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	609a      	str	r2, [r3, #8]
}
 800c378:	bf00      	nop
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c384:	b480      	push	{r7}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c39e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	021a      	lsls	r2, r3, #8
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	609a      	str	r2, [r3, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e06d      	b.n	800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a30      	ldr	r2, [pc, #192]	; (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d004      	beq.n	800c410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a2f      	ldr	r2, [pc, #188]	; (800c4c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d108      	bne.n	800c422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	4313      	orrs	r3, r2
 800c420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a20      	ldr	r2, [pc, #128]	; (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d022      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44e:	d01d      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a1d      	ldr	r2, [pc, #116]	; (800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d018      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a1c      	ldr	r2, [pc, #112]	; (800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d013      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a1a      	ldr	r2, [pc, #104]	; (800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d00e      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a15      	ldr	r2, [pc, #84]	; (800c4c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d009      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a16      	ldr	r2, [pc, #88]	; (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d004      	beq.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a15      	ldr	r2, [pc, #84]	; (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d10c      	bne.n	800c4a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	40010000 	.word	0x40010000
 800c4c8:	40010400 	.word	0x40010400
 800c4cc:	40000400 	.word	0x40000400
 800c4d0:	40000800 	.word	0x40000800
 800c4d4:	40000c00 	.word	0x40000c00
 800c4d8:	40014000 	.word	0x40014000
 800c4dc:	40001800 	.word	0x40001800

0800c4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	e040      	b.n	800c5b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c532:	2b00      	cmp	r3, #0
 800c534:	d106      	bne.n	800c544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7fa fb86 	bl	8006c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2224      	movs	r2, #36	; 0x24
 800c548:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0201 	bic.w	r2, r2, #1
 800c558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f8be 	bl	800c6dc <UART_SetConfig>
 800c560:	4603      	mov	r3, r0
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e022      	b.n	800c5b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fb5c 	bl	800cc30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f042 0201 	orr.w	r2, r2, #1
 800c5a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fbe3 	bl	800cd74 <UART_CheckIdleState>
 800c5ae:	4603      	mov	r3, r0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08a      	sub	sp, #40	; 0x28
 800c5bc:	af02      	add	r7, sp, #8
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	603b      	str	r3, [r7, #0]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	d17f      	bne.n	800c6d0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <HAL_UART_Transmit+0x24>
 800c5d6:	88fb      	ldrh	r3, [r7, #6]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e078      	b.n	800c6d2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d101      	bne.n	800c5ee <HAL_UART_Transmit+0x36>
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	e071      	b.n	800c6d2 <HAL_UART_Transmit+0x11a>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2221      	movs	r2, #33	; 0x21
 800c600:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c602:	f7fa fec7 	bl	8007394 <HAL_GetTick>
 800c606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	88fa      	ldrh	r2, [r7, #6]
 800c60c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	88fa      	ldrh	r2, [r7, #6]
 800c614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c620:	d108      	bne.n	800c634 <HAL_UART_Transmit+0x7c>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d104      	bne.n	800c634 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	61bb      	str	r3, [r7, #24]
 800c632:	e003      	b.n	800c63c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c638:	2300      	movs	r3, #0
 800c63a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800c644:	e02c      	b.n	800c6a0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2200      	movs	r2, #0
 800c64e:	2180      	movs	r1, #128	; 0x80
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 fbd4 	bl	800cdfe <UART_WaitOnFlagUntilTimeout>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e038      	b.n	800c6d2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10b      	bne.n	800c67e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c674:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	3302      	adds	r3, #2
 800c67a:	61bb      	str	r3, [r7, #24]
 800c67c:	e007      	b.n	800c68e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	781a      	ldrb	r2, [r3, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	3301      	adds	r3, #1
 800c68c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c694:	b29b      	uxth	r3, r3
 800c696:	3b01      	subs	r3, #1
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1cc      	bne.n	800c646 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2140      	movs	r1, #64	; 0x40
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 fba1 	bl	800cdfe <UART_WaitOnFlagUntilTimeout>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e005      	b.n	800c6d2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e000      	b.n	800c6d2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800c6d0:	2302      	movs	r3, #2
  }
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3720      	adds	r7, #32
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
	...

0800c6dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b088      	sub	sp, #32
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	69db      	ldr	r3, [r3, #28]
 800c700:	4313      	orrs	r3, r2
 800c702:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4bb1      	ldr	r3, [pc, #708]	; (800c9d0 <UART_SetConfig+0x2f4>)
 800c70c:	4013      	ands	r3, r2
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	6812      	ldr	r2, [r2, #0]
 800c712:	6939      	ldr	r1, [r7, #16]
 800c714:	430b      	orrs	r3, r1
 800c716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68da      	ldr	r2, [r3, #12]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	430a      	orrs	r2, r1
 800c72c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	430a      	orrs	r2, r1
 800c750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a9f      	ldr	r2, [pc, #636]	; (800c9d4 <UART_SetConfig+0x2f8>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d121      	bne.n	800c7a0 <UART_SetConfig+0xc4>
 800c75c:	4b9e      	ldr	r3, [pc, #632]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c762:	f003 0303 	and.w	r3, r3, #3
 800c766:	2b03      	cmp	r3, #3
 800c768:	d816      	bhi.n	800c798 <UART_SetConfig+0xbc>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <UART_SetConfig+0x94>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c781 	.word	0x0800c781
 800c774:	0800c78d 	.word	0x0800c78d
 800c778:	0800c787 	.word	0x0800c787
 800c77c:	0800c793 	.word	0x0800c793
 800c780:	2301      	movs	r3, #1
 800c782:	77fb      	strb	r3, [r7, #31]
 800c784:	e151      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c786:	2302      	movs	r3, #2
 800c788:	77fb      	strb	r3, [r7, #31]
 800c78a:	e14e      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c78c:	2304      	movs	r3, #4
 800c78e:	77fb      	strb	r3, [r7, #31]
 800c790:	e14b      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c792:	2308      	movs	r3, #8
 800c794:	77fb      	strb	r3, [r7, #31]
 800c796:	e148      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c798:	2310      	movs	r3, #16
 800c79a:	77fb      	strb	r3, [r7, #31]
 800c79c:	bf00      	nop
 800c79e:	e144      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a8d      	ldr	r2, [pc, #564]	; (800c9dc <UART_SetConfig+0x300>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d134      	bne.n	800c814 <UART_SetConfig+0x138>
 800c7aa:	4b8b      	ldr	r3, [pc, #556]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7b0:	f003 030c 	and.w	r3, r3, #12
 800c7b4:	2b0c      	cmp	r3, #12
 800c7b6:	d829      	bhi.n	800c80c <UART_SetConfig+0x130>
 800c7b8:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <UART_SetConfig+0xe4>)
 800c7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7be:	bf00      	nop
 800c7c0:	0800c7f5 	.word	0x0800c7f5
 800c7c4:	0800c80d 	.word	0x0800c80d
 800c7c8:	0800c80d 	.word	0x0800c80d
 800c7cc:	0800c80d 	.word	0x0800c80d
 800c7d0:	0800c801 	.word	0x0800c801
 800c7d4:	0800c80d 	.word	0x0800c80d
 800c7d8:	0800c80d 	.word	0x0800c80d
 800c7dc:	0800c80d 	.word	0x0800c80d
 800c7e0:	0800c7fb 	.word	0x0800c7fb
 800c7e4:	0800c80d 	.word	0x0800c80d
 800c7e8:	0800c80d 	.word	0x0800c80d
 800c7ec:	0800c80d 	.word	0x0800c80d
 800c7f0:	0800c807 	.word	0x0800c807
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	77fb      	strb	r3, [r7, #31]
 800c7f8:	e117      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	77fb      	strb	r3, [r7, #31]
 800c7fe:	e114      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c800:	2304      	movs	r3, #4
 800c802:	77fb      	strb	r3, [r7, #31]
 800c804:	e111      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c806:	2308      	movs	r3, #8
 800c808:	77fb      	strb	r3, [r7, #31]
 800c80a:	e10e      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c80c:	2310      	movs	r3, #16
 800c80e:	77fb      	strb	r3, [r7, #31]
 800c810:	bf00      	nop
 800c812:	e10a      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a71      	ldr	r2, [pc, #452]	; (800c9e0 <UART_SetConfig+0x304>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d120      	bne.n	800c860 <UART_SetConfig+0x184>
 800c81e:	4b6e      	ldr	r3, [pc, #440]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c824:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c828:	2b10      	cmp	r3, #16
 800c82a:	d00f      	beq.n	800c84c <UART_SetConfig+0x170>
 800c82c:	2b10      	cmp	r3, #16
 800c82e:	d802      	bhi.n	800c836 <UART_SetConfig+0x15a>
 800c830:	2b00      	cmp	r3, #0
 800c832:	d005      	beq.n	800c840 <UART_SetConfig+0x164>
 800c834:	e010      	b.n	800c858 <UART_SetConfig+0x17c>
 800c836:	2b20      	cmp	r3, #32
 800c838:	d005      	beq.n	800c846 <UART_SetConfig+0x16a>
 800c83a:	2b30      	cmp	r3, #48	; 0x30
 800c83c:	d009      	beq.n	800c852 <UART_SetConfig+0x176>
 800c83e:	e00b      	b.n	800c858 <UART_SetConfig+0x17c>
 800c840:	2300      	movs	r3, #0
 800c842:	77fb      	strb	r3, [r7, #31]
 800c844:	e0f1      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c846:	2302      	movs	r3, #2
 800c848:	77fb      	strb	r3, [r7, #31]
 800c84a:	e0ee      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c84c:	2304      	movs	r3, #4
 800c84e:	77fb      	strb	r3, [r7, #31]
 800c850:	e0eb      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c852:	2308      	movs	r3, #8
 800c854:	77fb      	strb	r3, [r7, #31]
 800c856:	e0e8      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c858:	2310      	movs	r3, #16
 800c85a:	77fb      	strb	r3, [r7, #31]
 800c85c:	bf00      	nop
 800c85e:	e0e4      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a5f      	ldr	r2, [pc, #380]	; (800c9e4 <UART_SetConfig+0x308>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d120      	bne.n	800c8ac <UART_SetConfig+0x1d0>
 800c86a:	4b5b      	ldr	r3, [pc, #364]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c870:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c874:	2b40      	cmp	r3, #64	; 0x40
 800c876:	d00f      	beq.n	800c898 <UART_SetConfig+0x1bc>
 800c878:	2b40      	cmp	r3, #64	; 0x40
 800c87a:	d802      	bhi.n	800c882 <UART_SetConfig+0x1a6>
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d005      	beq.n	800c88c <UART_SetConfig+0x1b0>
 800c880:	e010      	b.n	800c8a4 <UART_SetConfig+0x1c8>
 800c882:	2b80      	cmp	r3, #128	; 0x80
 800c884:	d005      	beq.n	800c892 <UART_SetConfig+0x1b6>
 800c886:	2bc0      	cmp	r3, #192	; 0xc0
 800c888:	d009      	beq.n	800c89e <UART_SetConfig+0x1c2>
 800c88a:	e00b      	b.n	800c8a4 <UART_SetConfig+0x1c8>
 800c88c:	2300      	movs	r3, #0
 800c88e:	77fb      	strb	r3, [r7, #31]
 800c890:	e0cb      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c892:	2302      	movs	r3, #2
 800c894:	77fb      	strb	r3, [r7, #31]
 800c896:	e0c8      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c898:	2304      	movs	r3, #4
 800c89a:	77fb      	strb	r3, [r7, #31]
 800c89c:	e0c5      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c89e:	2308      	movs	r3, #8
 800c8a0:	77fb      	strb	r3, [r7, #31]
 800c8a2:	e0c2      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	77fb      	strb	r3, [r7, #31]
 800c8a8:	bf00      	nop
 800c8aa:	e0be      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a4d      	ldr	r2, [pc, #308]	; (800c9e8 <UART_SetConfig+0x30c>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d124      	bne.n	800c900 <UART_SetConfig+0x224>
 800c8b6:	4b48      	ldr	r3, [pc, #288]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c4:	d012      	beq.n	800c8ec <UART_SetConfig+0x210>
 800c8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ca:	d802      	bhi.n	800c8d2 <UART_SetConfig+0x1f6>
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d007      	beq.n	800c8e0 <UART_SetConfig+0x204>
 800c8d0:	e012      	b.n	800c8f8 <UART_SetConfig+0x21c>
 800c8d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d6:	d006      	beq.n	800c8e6 <UART_SetConfig+0x20a>
 800c8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8dc:	d009      	beq.n	800c8f2 <UART_SetConfig+0x216>
 800c8de:	e00b      	b.n	800c8f8 <UART_SetConfig+0x21c>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	77fb      	strb	r3, [r7, #31]
 800c8e4:	e0a1      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	77fb      	strb	r3, [r7, #31]
 800c8ea:	e09e      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	77fb      	strb	r3, [r7, #31]
 800c8f0:	e09b      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c8f2:	2308      	movs	r3, #8
 800c8f4:	77fb      	strb	r3, [r7, #31]
 800c8f6:	e098      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	77fb      	strb	r3, [r7, #31]
 800c8fc:	bf00      	nop
 800c8fe:	e094      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a39      	ldr	r2, [pc, #228]	; (800c9ec <UART_SetConfig+0x310>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d124      	bne.n	800c954 <UART_SetConfig+0x278>
 800c90a:	4b33      	ldr	r3, [pc, #204]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c918:	d012      	beq.n	800c940 <UART_SetConfig+0x264>
 800c91a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c91e:	d802      	bhi.n	800c926 <UART_SetConfig+0x24a>
 800c920:	2b00      	cmp	r3, #0
 800c922:	d007      	beq.n	800c934 <UART_SetConfig+0x258>
 800c924:	e012      	b.n	800c94c <UART_SetConfig+0x270>
 800c926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c92a:	d006      	beq.n	800c93a <UART_SetConfig+0x25e>
 800c92c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c930:	d009      	beq.n	800c946 <UART_SetConfig+0x26a>
 800c932:	e00b      	b.n	800c94c <UART_SetConfig+0x270>
 800c934:	2301      	movs	r3, #1
 800c936:	77fb      	strb	r3, [r7, #31]
 800c938:	e077      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c93a:	2302      	movs	r3, #2
 800c93c:	77fb      	strb	r3, [r7, #31]
 800c93e:	e074      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c940:	2304      	movs	r3, #4
 800c942:	77fb      	strb	r3, [r7, #31]
 800c944:	e071      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c946:	2308      	movs	r3, #8
 800c948:	77fb      	strb	r3, [r7, #31]
 800c94a:	e06e      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c94c:	2310      	movs	r3, #16
 800c94e:	77fb      	strb	r3, [r7, #31]
 800c950:	bf00      	nop
 800c952:	e06a      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a25      	ldr	r2, [pc, #148]	; (800c9f0 <UART_SetConfig+0x314>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d124      	bne.n	800c9a8 <UART_SetConfig+0x2cc>
 800c95e:	4b1e      	ldr	r3, [pc, #120]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c964:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c96c:	d012      	beq.n	800c994 <UART_SetConfig+0x2b8>
 800c96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c972:	d802      	bhi.n	800c97a <UART_SetConfig+0x29e>
 800c974:	2b00      	cmp	r3, #0
 800c976:	d007      	beq.n	800c988 <UART_SetConfig+0x2ac>
 800c978:	e012      	b.n	800c9a0 <UART_SetConfig+0x2c4>
 800c97a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c97e:	d006      	beq.n	800c98e <UART_SetConfig+0x2b2>
 800c980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c984:	d009      	beq.n	800c99a <UART_SetConfig+0x2be>
 800c986:	e00b      	b.n	800c9a0 <UART_SetConfig+0x2c4>
 800c988:	2300      	movs	r3, #0
 800c98a:	77fb      	strb	r3, [r7, #31]
 800c98c:	e04d      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c98e:	2302      	movs	r3, #2
 800c990:	77fb      	strb	r3, [r7, #31]
 800c992:	e04a      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c994:	2304      	movs	r3, #4
 800c996:	77fb      	strb	r3, [r7, #31]
 800c998:	e047      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c99a:	2308      	movs	r3, #8
 800c99c:	77fb      	strb	r3, [r7, #31]
 800c99e:	e044      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c9a0:	2310      	movs	r3, #16
 800c9a2:	77fb      	strb	r3, [r7, #31]
 800c9a4:	bf00      	nop
 800c9a6:	e040      	b.n	800ca2a <UART_SetConfig+0x34e>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a11      	ldr	r2, [pc, #68]	; (800c9f4 <UART_SetConfig+0x318>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d139      	bne.n	800ca26 <UART_SetConfig+0x34a>
 800c9b2:	4b09      	ldr	r3, [pc, #36]	; (800c9d8 <UART_SetConfig+0x2fc>)
 800c9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c9bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9c0:	d027      	beq.n	800ca12 <UART_SetConfig+0x336>
 800c9c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9c6:	d817      	bhi.n	800c9f8 <UART_SetConfig+0x31c>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01c      	beq.n	800ca06 <UART_SetConfig+0x32a>
 800c9cc:	e027      	b.n	800ca1e <UART_SetConfig+0x342>
 800c9ce:	bf00      	nop
 800c9d0:	efff69f3 	.word	0xefff69f3
 800c9d4:	40011000 	.word	0x40011000
 800c9d8:	40023800 	.word	0x40023800
 800c9dc:	40004400 	.word	0x40004400
 800c9e0:	40004800 	.word	0x40004800
 800c9e4:	40004c00 	.word	0x40004c00
 800c9e8:	40005000 	.word	0x40005000
 800c9ec:	40011400 	.word	0x40011400
 800c9f0:	40007800 	.word	0x40007800
 800c9f4:	40007c00 	.word	0x40007c00
 800c9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9fc:	d006      	beq.n	800ca0c <UART_SetConfig+0x330>
 800c9fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ca02:	d009      	beq.n	800ca18 <UART_SetConfig+0x33c>
 800ca04:	e00b      	b.n	800ca1e <UART_SetConfig+0x342>
 800ca06:	2300      	movs	r3, #0
 800ca08:	77fb      	strb	r3, [r7, #31]
 800ca0a:	e00e      	b.n	800ca2a <UART_SetConfig+0x34e>
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	77fb      	strb	r3, [r7, #31]
 800ca10:	e00b      	b.n	800ca2a <UART_SetConfig+0x34e>
 800ca12:	2304      	movs	r3, #4
 800ca14:	77fb      	strb	r3, [r7, #31]
 800ca16:	e008      	b.n	800ca2a <UART_SetConfig+0x34e>
 800ca18:	2308      	movs	r3, #8
 800ca1a:	77fb      	strb	r3, [r7, #31]
 800ca1c:	e005      	b.n	800ca2a <UART_SetConfig+0x34e>
 800ca1e:	2310      	movs	r3, #16
 800ca20:	77fb      	strb	r3, [r7, #31]
 800ca22:	bf00      	nop
 800ca24:	e001      	b.n	800ca2a <UART_SetConfig+0x34e>
 800ca26:	2310      	movs	r3, #16
 800ca28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca32:	d17f      	bne.n	800cb34 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ca34:	7ffb      	ldrb	r3, [r7, #31]
 800ca36:	2b08      	cmp	r3, #8
 800ca38:	d85c      	bhi.n	800caf4 <UART_SetConfig+0x418>
 800ca3a:	a201      	add	r2, pc, #4	; (adr r2, 800ca40 <UART_SetConfig+0x364>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca65 	.word	0x0800ca65
 800ca44:	0800ca85 	.word	0x0800ca85
 800ca48:	0800caa5 	.word	0x0800caa5
 800ca4c:	0800caf5 	.word	0x0800caf5
 800ca50:	0800cabd 	.word	0x0800cabd
 800ca54:	0800caf5 	.word	0x0800caf5
 800ca58:	0800caf5 	.word	0x0800caf5
 800ca5c:	0800caf5 	.word	0x0800caf5
 800ca60:	0800cadd 	.word	0x0800cadd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca64:	f7fd fc16 	bl	800a294 <HAL_RCC_GetPCLK1Freq>
 800ca68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	005a      	lsls	r2, r3, #1
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	441a      	add	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	61bb      	str	r3, [r7, #24]
        break;
 800ca82:	e03a      	b.n	800cafa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca84:	f7fd fc1a 	bl	800a2bc <HAL_RCC_GetPCLK2Freq>
 800ca88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	005a      	lsls	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	085b      	lsrs	r3, r3, #1
 800ca94:	441a      	add	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	61bb      	str	r3, [r7, #24]
        break;
 800caa2:	e02a      	b.n	800cafa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	085a      	lsrs	r2, r3, #1
 800caaa:	4b5f      	ldr	r3, [pc, #380]	; (800cc28 <UART_SetConfig+0x54c>)
 800caac:	4413      	add	r3, r2
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6852      	ldr	r2, [r2, #4]
 800cab2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	61bb      	str	r3, [r7, #24]
        break;
 800caba:	e01e      	b.n	800cafa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cabc:	f7fd fb2c 	bl	800a118 <HAL_RCC_GetSysClockFreq>
 800cac0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	005a      	lsls	r2, r3, #1
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	085b      	lsrs	r3, r3, #1
 800cacc:	441a      	add	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	61bb      	str	r3, [r7, #24]
        break;
 800cada:	e00e      	b.n	800cafa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	085b      	lsrs	r3, r3, #1
 800cae2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	fbb2 f3f3 	udiv	r3, r2, r3
 800caee:	b29b      	uxth	r3, r3
 800caf0:	61bb      	str	r3, [r7, #24]
        break;
 800caf2:	e002      	b.n	800cafa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	75fb      	strb	r3, [r7, #23]
        break;
 800caf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	2b0f      	cmp	r3, #15
 800cafe:	d916      	bls.n	800cb2e <UART_SetConfig+0x452>
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb06:	d212      	bcs.n	800cb2e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	f023 030f 	bic.w	r3, r3, #15
 800cb10:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	085b      	lsrs	r3, r3, #1
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	f003 0307 	and.w	r3, r3, #7
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	897b      	ldrh	r3, [r7, #10]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	897a      	ldrh	r2, [r7, #10]
 800cb2a:	60da      	str	r2, [r3, #12]
 800cb2c:	e070      	b.n	800cc10 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	75fb      	strb	r3, [r7, #23]
 800cb32:	e06d      	b.n	800cc10 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800cb34:	7ffb      	ldrb	r3, [r7, #31]
 800cb36:	2b08      	cmp	r3, #8
 800cb38:	d859      	bhi.n	800cbee <UART_SetConfig+0x512>
 800cb3a:	a201      	add	r2, pc, #4	; (adr r2, 800cb40 <UART_SetConfig+0x464>)
 800cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb40:	0800cb65 	.word	0x0800cb65
 800cb44:	0800cb83 	.word	0x0800cb83
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cbef 	.word	0x0800cbef
 800cb50:	0800cbb9 	.word	0x0800cbb9
 800cb54:	0800cbef 	.word	0x0800cbef
 800cb58:	0800cbef 	.word	0x0800cbef
 800cb5c:	0800cbef 	.word	0x0800cbef
 800cb60:	0800cbd7 	.word	0x0800cbd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb64:	f7fd fb96 	bl	800a294 <HAL_RCC_GetPCLK1Freq>
 800cb68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	085a      	lsrs	r2, r3, #1
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	441a      	add	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	61bb      	str	r3, [r7, #24]
        break;
 800cb80:	e038      	b.n	800cbf4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb82:	f7fd fb9b 	bl	800a2bc <HAL_RCC_GetPCLK2Freq>
 800cb86:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	085a      	lsrs	r2, r3, #1
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	441a      	add	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	61bb      	str	r3, [r7, #24]
        break;
 800cb9e:	e029      	b.n	800cbf4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	085a      	lsrs	r2, r3, #1
 800cba6:	4b21      	ldr	r3, [pc, #132]	; (800cc2c <UART_SetConfig+0x550>)
 800cba8:	4413      	add	r3, r2
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	6852      	ldr	r2, [r2, #4]
 800cbae:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	61bb      	str	r3, [r7, #24]
        break;
 800cbb6:	e01d      	b.n	800cbf4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbb8:	f7fd faae 	bl	800a118 <HAL_RCC_GetSysClockFreq>
 800cbbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	085a      	lsrs	r2, r3, #1
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	441a      	add	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	61bb      	str	r3, [r7, #24]
        break;
 800cbd4:	e00e      	b.n	800cbf4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	085b      	lsrs	r3, r3, #1
 800cbdc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	61bb      	str	r3, [r7, #24]
        break;
 800cbec:	e002      	b.n	800cbf4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	75fb      	strb	r3, [r7, #23]
        break;
 800cbf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	2b0f      	cmp	r3, #15
 800cbf8:	d908      	bls.n	800cc0c <UART_SetConfig+0x530>
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc00:	d204      	bcs.n	800cc0c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	60da      	str	r2, [r3, #12]
 800cc0a:	e001      	b.n	800cc10 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3720      	adds	r7, #32
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	01e84800 	.word	0x01e84800
 800cc2c:	00f42400 	.word	0x00f42400

0800cc30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00a      	beq.n	800cc5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	430a      	orrs	r2, r1
 800cc58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5e:	f003 0302 	and.w	r3, r3, #2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00a      	beq.n	800cc7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00a      	beq.n	800cc9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca2:	f003 0308 	and.w	r3, r3, #8
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	f003 0310 	and.w	r3, r3, #16
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00a      	beq.n	800cce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	f003 0320 	and.w	r3, r3, #32
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00a      	beq.n	800cd04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	430a      	orrs	r2, r1
 800cd02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d01a      	beq.n	800cd46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	430a      	orrs	r2, r1
 800cd24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd2e:	d10a      	bne.n	800cd46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00a      	beq.n	800cd68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	430a      	orrs	r2, r1
 800cd66:	605a      	str	r2, [r3, #4]
  }
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af02      	add	r7, sp, #8
 800cd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cd82:	f7fa fb07 	bl	8007394 <HAL_GetTick>
 800cd86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0308 	and.w	r3, r3, #8
 800cd92:	2b08      	cmp	r3, #8
 800cd94:	d10e      	bne.n	800cdb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f82a 	bl	800cdfe <UART_WaitOnFlagUntilTimeout>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e020      	b.n	800cdf6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f003 0304 	and.w	r3, r3, #4
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d10e      	bne.n	800cde0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f814 	bl	800cdfe <UART_WaitOnFlagUntilTimeout>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e00a      	b.n	800cdf6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2220      	movs	r2, #32
 800cde4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2220      	movs	r2, #32
 800cdea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b084      	sub	sp, #16
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	60f8      	str	r0, [r7, #12]
 800ce06:	60b9      	str	r1, [r7, #8]
 800ce08:	603b      	str	r3, [r7, #0]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce0e:	e05d      	b.n	800cecc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d059      	beq.n	800cecc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce18:	f7fa fabc 	bl	8007394 <HAL_GetTick>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	69ba      	ldr	r2, [r7, #24]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d302      	bcc.n	800ce2e <UART_WaitOnFlagUntilTimeout+0x30>
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d11b      	bne.n	800ce66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	689a      	ldr	r2, [r3, #8]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f022 0201 	bic.w	r2, r2, #1
 800ce4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2220      	movs	r2, #32
 800ce52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2220      	movs	r2, #32
 800ce58:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e042      	b.n	800ceec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d02b      	beq.n	800cecc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce82:	d123      	bne.n	800cecc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce8c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689a      	ldr	r2, [r3, #8]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f022 0201 	bic.w	r2, r2, #1
 800ceac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2220      	movs	r2, #32
 800ceb2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2220      	movs	r2, #32
 800cebe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e00f      	b.n	800ceec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	69da      	ldr	r2, [r3, #28]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	4013      	ands	r3, r2
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	bf0c      	ite	eq
 800cedc:	2301      	moveq	r3, #1
 800cede:	2300      	movne	r3, #0
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	461a      	mov	r2, r3
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d092      	beq.n	800ce10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cef4:	b084      	sub	sp, #16
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	f107 001c 	add.w	r0, r7, #28
 800cf02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d120      	bne.n	800cf4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68da      	ldr	r2, [r3, #12]
 800cf1c:	4b20      	ldr	r3, [pc, #128]	; (800cfa0 <USB_CoreInit+0xac>)
 800cf1e:	4013      	ands	r3, r2
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cf30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d105      	bne.n	800cf42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fa52 	bl	800d3ec <USB_CoreReset>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73fb      	strb	r3, [r7, #15]
 800cf4c:	e010      	b.n	800cf70 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fa46 	bl	800d3ec <USB_CoreReset>
 800cf60:	4603      	mov	r3, r0
 800cf62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d10b      	bne.n	800cf8e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	f043 0206 	orr.w	r2, r3, #6
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	f043 0220 	orr.w	r2, r3, #32
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf9a:	b004      	add	sp, #16
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	ffbdffbf 	.word	0xffbdffbf

0800cfa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	f023 0201 	bic.w	r2, r3, #1
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cfde:	78fb      	ldrb	r3, [r7, #3]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d106      	bne.n	800cff2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	60da      	str	r2, [r3, #12]
 800cff0:	e00b      	b.n	800d00a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cff2:	78fb      	ldrb	r3, [r7, #3]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d106      	bne.n	800d006 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]
 800d004:	e001      	b.n	800d00a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e003      	b.n	800d012 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d00a:	2032      	movs	r0, #50	; 0x32
 800d00c:	f7fa f9ce 	bl	80073ac <HAL_Delay>

  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d01c:	b084      	sub	sp, #16
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d036:	2300      	movs	r3, #0
 800d038:	613b      	str	r3, [r7, #16]
 800d03a:	e009      	b.n	800d050 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	3340      	adds	r3, #64	; 0x40
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	2200      	movs	r2, #0
 800d048:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	3301      	adds	r3, #1
 800d04e:	613b      	str	r3, [r7, #16]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2b0e      	cmp	r3, #14
 800d054:	d9f2      	bls.n	800d03c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d11c      	bne.n	800d096 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d06a:	f043 0302 	orr.w	r3, r3, #2
 800d06e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d074:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e005      	b.n	800d0a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0bc:	461a      	mov	r2, r3
 800d0be:	680b      	ldr	r3, [r1, #0]
 800d0c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d10c      	bne.n	800d0e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d104      	bne.n	800d0d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f959 	bl	800d388 <USB_SetDevSpeed>
 800d0d6:	e018      	b.n	800d10a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d0d8:	2101      	movs	r1, #1
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f954 	bl	800d388 <USB_SetDevSpeed>
 800d0e0:	e013      	b.n	800d10a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d10c      	bne.n	800d102 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d104      	bne.n	800d0f8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f949 	bl	800d388 <USB_SetDevSpeed>
 800d0f6:	e008      	b.n	800d10a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f944 	bl	800d388 <USB_SetDevSpeed>
 800d100:	e003      	b.n	800d10a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d102:	2103      	movs	r1, #3
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f93f 	bl	800d388 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d10a:	2110      	movs	r1, #16
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f8f3 	bl	800d2f8 <USB_FlushTxFifo>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f911 	bl	800d344 <USB_FlushRxFifo>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d132:	461a      	mov	r2, r3
 800d134:	2300      	movs	r3, #0
 800d136:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d13e:	461a      	mov	r2, r3
 800d140:	2300      	movs	r3, #0
 800d142:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d14a:	461a      	mov	r2, r3
 800d14c:	2300      	movs	r3, #0
 800d14e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d150:	2300      	movs	r3, #0
 800d152:	613b      	str	r3, [r7, #16]
 800d154:	e043      	b.n	800d1de <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d16c:	d118      	bne.n	800d1a0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10a      	bne.n	800d18a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	015a      	lsls	r2, r3, #5
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4413      	add	r3, r2
 800d17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d180:	461a      	mov	r2, r3
 800d182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	e013      	b.n	800d1b2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d196:	461a      	mov	r2, r3
 800d198:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	e008      	b.n	800d1b2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	613b      	str	r3, [r7, #16]
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d3b7      	bcc.n	800d156 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	613b      	str	r3, [r7, #16]
 800d1ea:	e043      	b.n	800d274 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	015a      	lsls	r2, r3, #5
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d202:	d118      	bne.n	800d236 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10a      	bne.n	800d220 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d216:	461a      	mov	r2, r3
 800d218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	e013      	b.n	800d248 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22c:	461a      	mov	r2, r3
 800d22e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	e008      	b.n	800d248 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	015a      	lsls	r2, r3, #5
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	4413      	add	r3, r2
 800d23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d242:	461a      	mov	r2, r3
 800d244:	2300      	movs	r3, #0
 800d246:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d254:	461a      	mov	r2, r3
 800d256:	2300      	movs	r3, #0
 800d258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d266:	461a      	mov	r2, r3
 800d268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d26c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	3301      	adds	r3, #1
 800d272:	613b      	str	r3, [r7, #16]
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d3b7      	bcc.n	800d1ec <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d28a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d28e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d29c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d105      	bne.n	800d2b0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	f043 0210 	orr.w	r2, r3, #16
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	699a      	ldr	r2, [r3, #24]
 800d2b4:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <USB_DevInit+0x2d4>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d005      	beq.n	800d2ce <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	f043 0208 	orr.w	r2, r3, #8
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d105      	bne.n	800d2e0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	699a      	ldr	r2, [r3, #24]
 800d2d8:	4b06      	ldr	r3, [pc, #24]	; (800d2f4 <USB_DevInit+0x2d8>)
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2ec:	b004      	add	sp, #16
 800d2ee:	4770      	bx	lr
 800d2f0:	803c3800 	.word	0x803c3800
 800d2f4:	40000004 	.word	0x40000004

0800d2f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d302:	2300      	movs	r3, #0
 800d304:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	019b      	lsls	r3, r3, #6
 800d30a:	f043 0220 	orr.w	r2, r3, #32
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3301      	adds	r3, #1
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4a09      	ldr	r2, [pc, #36]	; (800d340 <USB_FlushTxFifo+0x48>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d901      	bls.n	800d324 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d320:	2303      	movs	r3, #3
 800d322:	e006      	b.n	800d332 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	f003 0320 	and.w	r3, r3, #32
 800d32c:	2b20      	cmp	r3, #32
 800d32e:	d0f0      	beq.n	800d312 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	00030d40 	.word	0x00030d40

0800d344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2210      	movs	r2, #16
 800d354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	3301      	adds	r3, #1
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4a09      	ldr	r2, [pc, #36]	; (800d384 <USB_FlushRxFifo+0x40>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d901      	bls.n	800d368 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d364:	2303      	movs	r3, #3
 800d366:	e006      	b.n	800d376 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	f003 0310 	and.w	r3, r3, #16
 800d370:	2b10      	cmp	r3, #16
 800d372:	d0f0      	beq.n	800d356 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	00030d40 	.word	0x00030d40

0800d388 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	460b      	mov	r3, r1
 800d392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	68f9      	ldr	r1, [r7, #12]
 800d3a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr

0800d3ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3d4:	f043 0302 	orr.w	r3, r3, #2
 800d3d8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d3da:	2003      	movs	r0, #3
 800d3dc:	f7f9 ffe6 	bl	80073ac <HAL_Delay>

  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
	...

0800d3ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	4a13      	ldr	r2, [pc, #76]	; (800d450 <USB_CoreReset+0x64>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d901      	bls.n	800d40a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d406:	2303      	movs	r3, #3
 800d408:	e01b      	b.n	800d442 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	daf2      	bge.n	800d3f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d412:	2300      	movs	r3, #0
 800d414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	f043 0201 	orr.w	r2, r3, #1
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3301      	adds	r3, #1
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4a09      	ldr	r2, [pc, #36]	; (800d450 <USB_CoreReset+0x64>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d901      	bls.n	800d434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d430:	2303      	movs	r3, #3
 800d432:	e006      	b.n	800d442 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	f003 0301 	and.w	r3, r3, #1
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d0f0      	beq.n	800d422 <USB_CoreReset+0x36>

  return HAL_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	00030d40 	.word	0x00030d40

0800d454 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d454:	b480      	push	{r7}
 800d456:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d458:	bf00      	nop
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d46a:	f3ef 8305 	mrs	r3, IPSR
 800d46e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d470:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10f      	bne.n	800d496 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d476:	f3ef 8310 	mrs	r3, PRIMASK
 800d47a:	607b      	str	r3, [r7, #4]
  return(result);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d482:	f3ef 8311 	mrs	r3, BASEPRI
 800d486:	603b      	str	r3, [r7, #0]
  return(result);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d007      	beq.n	800d49e <osKernelInitialize+0x3a>
 800d48e:	4b0e      	ldr	r3, [pc, #56]	; (800d4c8 <osKernelInitialize+0x64>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b02      	cmp	r3, #2
 800d494:	d103      	bne.n	800d49e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d496:	f06f 0305 	mvn.w	r3, #5
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	e00c      	b.n	800d4b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d49e:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <osKernelInitialize+0x64>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d105      	bne.n	800d4b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d4a6:	4b08      	ldr	r3, [pc, #32]	; (800d4c8 <osKernelInitialize+0x64>)
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e002      	b.n	800d4b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	200032a8 	.word	0x200032a8

0800d4cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4d2:	f3ef 8305 	mrs	r3, IPSR
 800d4d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10f      	bne.n	800d4fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4de:	f3ef 8310 	mrs	r3, PRIMASK
 800d4e2:	607b      	str	r3, [r7, #4]
  return(result);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d105      	bne.n	800d4f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d4ee:	603b      	str	r3, [r7, #0]
  return(result);
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d007      	beq.n	800d506 <osKernelStart+0x3a>
 800d4f6:	4b0f      	ldr	r3, [pc, #60]	; (800d534 <osKernelStart+0x68>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d103      	bne.n	800d506 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d4fe:	f06f 0305 	mvn.w	r3, #5
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e010      	b.n	800d528 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d506:	4b0b      	ldr	r3, [pc, #44]	; (800d534 <osKernelStart+0x68>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d109      	bne.n	800d522 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d50e:	f7ff ffa1 	bl	800d454 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d512:	4b08      	ldr	r3, [pc, #32]	; (800d534 <osKernelStart+0x68>)
 800d514:	2202      	movs	r2, #2
 800d516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d518:	f001 f89c 	bl	800e654 <vTaskStartScheduler>
      stat = osOK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	e002      	b.n	800d528 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d522:	f04f 33ff 	mov.w	r3, #4294967295
 800d526:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d528:	68fb      	ldr	r3, [r7, #12]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	200032a8 	.word	0x200032a8

0800d538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b090      	sub	sp, #64	; 0x40
 800d53c:	af04      	add	r7, sp, #16
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d544:	2300      	movs	r3, #0
 800d546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d548:	f3ef 8305 	mrs	r3, IPSR
 800d54c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d54e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d550:	2b00      	cmp	r3, #0
 800d552:	f040 808f 	bne.w	800d674 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d556:	f3ef 8310 	mrs	r3, PRIMASK
 800d55a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d105      	bne.n	800d56e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d562:	f3ef 8311 	mrs	r3, BASEPRI
 800d566:	617b      	str	r3, [r7, #20]
  return(result);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <osThreadNew+0x3e>
 800d56e:	4b44      	ldr	r3, [pc, #272]	; (800d680 <osThreadNew+0x148>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d07e      	beq.n	800d674 <osThreadNew+0x13c>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d07b      	beq.n	800d674 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d57c:	2380      	movs	r3, #128	; 0x80
 800d57e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d580:	2318      	movs	r3, #24
 800d582:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d584:	2300      	movs	r3, #0
 800d586:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d588:	f04f 33ff 	mov.w	r3, #4294967295
 800d58c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d045      	beq.n	800d620 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <osThreadNew+0x6a>
        name = attr->name;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d002      	beq.n	800d5b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	699b      	ldr	r3, [r3, #24]
 800d5ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d008      	beq.n	800d5c8 <osThreadNew+0x90>
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	2b38      	cmp	r3, #56	; 0x38
 800d5ba:	d805      	bhi.n	800d5c8 <osThreadNew+0x90>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <osThreadNew+0x94>
        return (NULL);
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	e054      	b.n	800d676 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	089b      	lsrs	r3, r3, #2
 800d5da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00e      	beq.n	800d602 <osThreadNew+0xca>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	2b5b      	cmp	r3, #91	; 0x5b
 800d5ea:	d90a      	bls.n	800d602 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d006      	beq.n	800d602 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <osThreadNew+0xca>
        mem = 1;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	623b      	str	r3, [r7, #32]
 800d600:	e010      	b.n	800d624 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10c      	bne.n	800d624 <osThreadNew+0xec>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d108      	bne.n	800d624 <osThreadNew+0xec>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d104      	bne.n	800d624 <osThreadNew+0xec>
          mem = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	623b      	str	r3, [r7, #32]
 800d61e:	e001      	b.n	800d624 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d110      	bne.n	800d64c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d632:	9202      	str	r2, [sp, #8]
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d63e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 fe2b 	bl	800e29c <xTaskCreateStatic>
 800d646:	4603      	mov	r3, r0
 800d648:	613b      	str	r3, [r7, #16]
 800d64a:	e013      	b.n	800d674 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d110      	bne.n	800d674 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d654:	b29a      	uxth	r2, r3
 800d656:	f107 0310 	add.w	r3, r7, #16
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f000 fe79 	bl	800e35c <xTaskCreate>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d001      	beq.n	800d674 <osThreadNew+0x13c>
          hTask = NULL;
 800d670:	2300      	movs	r3, #0
 800d672:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d674:	693b      	ldr	r3, [r7, #16]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3730      	adds	r7, #48	; 0x30
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	200032a8 	.word	0x200032a8

0800d684 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d68c:	f3ef 8305 	mrs	r3, IPSR
 800d690:	613b      	str	r3, [r7, #16]
  return(result);
 800d692:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10f      	bne.n	800d6b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d698:	f3ef 8310 	mrs	r3, PRIMASK
 800d69c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d105      	bne.n	800d6b0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6a4:	f3ef 8311 	mrs	r3, BASEPRI
 800d6a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d007      	beq.n	800d6c0 <osDelay+0x3c>
 800d6b0:	4b0a      	ldr	r3, [pc, #40]	; (800d6dc <osDelay+0x58>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d103      	bne.n	800d6c0 <osDelay+0x3c>
    stat = osErrorISR;
 800d6b8:	f06f 0305 	mvn.w	r3, #5
 800d6bc:	617b      	str	r3, [r7, #20]
 800d6be:	e007      	b.n	800d6d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 ff8c 	bl	800e5e8 <vTaskDelay>
    }
  }

  return (stat);
 800d6d0:	697b      	ldr	r3, [r7, #20]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3718      	adds	r7, #24
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	200032a8 	.word	0x200032a8

0800d6e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4a07      	ldr	r2, [pc, #28]	; (800d70c <vApplicationGetIdleTaskMemory+0x2c>)
 800d6f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	4a06      	ldr	r2, [pc, #24]	; (800d710 <vApplicationGetIdleTaskMemory+0x30>)
 800d6f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2280      	movs	r2, #128	; 0x80
 800d6fc:	601a      	str	r2, [r3, #0]
}
 800d6fe:	bf00      	nop
 800d700:	3714      	adds	r7, #20
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	200032ac 	.word	0x200032ac
 800d710:	20003308 	.word	0x20003308

0800d714 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4a07      	ldr	r2, [pc, #28]	; (800d740 <vApplicationGetTimerTaskMemory+0x2c>)
 800d724:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	4a06      	ldr	r2, [pc, #24]	; (800d744 <vApplicationGetTimerTaskMemory+0x30>)
 800d72a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d732:	601a      	str	r2, [r3, #0]
}
 800d734:	bf00      	nop
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr
 800d740:	20003508 	.word	0x20003508
 800d744:	20003564 	.word	0x20003564

0800d748 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f103 0208 	add.w	r2, r3, #8
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f04f 32ff 	mov.w	r2, #4294967295
 800d760:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f103 0208 	add.w	r2, r3, #8
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f103 0208 	add.w	r2, r3, #8
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b085      	sub	sp, #20
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	689a      	ldr	r2, [r3, #8]
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	601a      	str	r2, [r3, #0]
}
 800d7de:	bf00      	nop
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b085      	sub	sp, #20
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d800:	d103      	bne.n	800d80a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	e00c      	b.n	800d824 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	3308      	adds	r3, #8
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	e002      	b.n	800d818 <vListInsert+0x2e>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	429a      	cmp	r2, r3
 800d822:	d2f6      	bcs.n	800d812 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	683a      	ldr	r2, [r7, #0]
 800d832:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	1c5a      	adds	r2, r3, #1
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	601a      	str	r2, [r3, #0]
}
 800d850:	bf00      	nop
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	6892      	ldr	r2, [r2, #8]
 800d872:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	6852      	ldr	r2, [r2, #4]
 800d87c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	429a      	cmp	r2, r3
 800d886:	d103      	bne.n	800d890 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	689a      	ldr	r2, [r3, #8]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	1e5a      	subs	r2, r3, #1
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3714      	adds	r7, #20
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10b      	bne.n	800d8dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c8:	b672      	cpsid	i
 800d8ca:	f383 8811 	msr	BASEPRI, r3
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	b662      	cpsie	i
 800d8d8:	60bb      	str	r3, [r7, #8]
 800d8da:	e7fe      	b.n	800d8da <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d8dc:	f002 f95c 	bl	800fb98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e8:	68f9      	ldr	r1, [r7, #12]
 800d8ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d8ec:	fb01 f303 	mul.w	r3, r1, r3
 800d8f0:	441a      	add	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90c:	3b01      	subs	r3, #1
 800d90e:	68f9      	ldr	r1, [r7, #12]
 800d910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d912:	fb01 f303 	mul.w	r3, r1, r3
 800d916:	441a      	add	r2, r3
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	22ff      	movs	r2, #255	; 0xff
 800d920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	22ff      	movs	r2, #255	; 0xff
 800d928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d114      	bne.n	800d95c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d01a      	beq.n	800d970 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3310      	adds	r3, #16
 800d93e:	4618      	mov	r0, r3
 800d940:	f001 f916 	bl	800eb70 <xTaskRemoveFromEventList>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d012      	beq.n	800d970 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d94a:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <xQueueGenericReset+0xd0>)
 800d94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	e009      	b.n	800d970 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3310      	adds	r3, #16
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fef1 	bl	800d748 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3324      	adds	r3, #36	; 0x24
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff feec 	bl	800d748 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d970:	f002 f944 	bl	800fbfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d974:	2301      	movs	r3, #1
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	e000ed04 	.word	0xe000ed04

0800d984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08e      	sub	sp, #56	; 0x38
 800d988:	af02      	add	r7, sp, #8
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10b      	bne.n	800d9b0 <xQueueGenericCreateStatic+0x2c>
 800d998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99c:	b672      	cpsid	i
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	b662      	cpsie	i
 800d9ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9ae:	e7fe      	b.n	800d9ae <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10b      	bne.n	800d9ce <xQueueGenericCreateStatic+0x4a>
 800d9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ba:	b672      	cpsid	i
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	b662      	cpsie	i
 800d9ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d9cc:	e7fe      	b.n	800d9cc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <xQueueGenericCreateStatic+0x56>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <xQueueGenericCreateStatic+0x5a>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e000      	b.n	800d9e0 <xQueueGenericCreateStatic+0x5c>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10b      	bne.n	800d9fc <xQueueGenericCreateStatic+0x78>
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	b672      	cpsid	i
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
 800d9f6:	b662      	cpsie	i
 800d9f8:	623b      	str	r3, [r7, #32]
 800d9fa:	e7fe      	b.n	800d9fa <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d102      	bne.n	800da08 <xQueueGenericCreateStatic+0x84>
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <xQueueGenericCreateStatic+0x88>
 800da08:	2301      	movs	r3, #1
 800da0a:	e000      	b.n	800da0e <xQueueGenericCreateStatic+0x8a>
 800da0c:	2300      	movs	r3, #0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10b      	bne.n	800da2a <xQueueGenericCreateStatic+0xa6>
 800da12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da16:	b672      	cpsid	i
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	b662      	cpsie	i
 800da26:	61fb      	str	r3, [r7, #28]
 800da28:	e7fe      	b.n	800da28 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da2a:	2350      	movs	r3, #80	; 0x50
 800da2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2b50      	cmp	r3, #80	; 0x50
 800da32:	d00b      	beq.n	800da4c <xQueueGenericCreateStatic+0xc8>
 800da34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da38:	b672      	cpsid	i
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	b662      	cpsie	i
 800da48:	61bb      	str	r3, [r7, #24]
 800da4a:	e7fe      	b.n	800da4a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00d      	beq.n	800da74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da60:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	4613      	mov	r3, r2
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	68b9      	ldr	r1, [r7, #8]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f000 f805 	bl	800da7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da76:	4618      	mov	r0, r3
 800da78:	3730      	adds	r7, #48	; 0x30
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	60f8      	str	r0, [r7, #12]
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	607a      	str	r2, [r7, #4]
 800da8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d103      	bne.n	800da9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	69ba      	ldr	r2, [r7, #24]
 800da96:	601a      	str	r2, [r3, #0]
 800da98:	e002      	b.n	800daa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800daac:	2101      	movs	r1, #1
 800daae:	69b8      	ldr	r0, [r7, #24]
 800dab0:	f7ff fefe 	bl	800d8b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	78fa      	ldrb	r2, [r7, #3]
 800dab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08e      	sub	sp, #56	; 0x38
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dad2:	2300      	movs	r3, #0
 800dad4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10b      	bne.n	800daf8 <xQueueGenericSend+0x34>
 800dae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae4:	b672      	cpsid	i
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	b662      	cpsie	i
 800daf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800daf6:	e7fe      	b.n	800daf6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d103      	bne.n	800db06 <xQueueGenericSend+0x42>
 800dafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db02:	2b00      	cmp	r3, #0
 800db04:	d101      	bne.n	800db0a <xQueueGenericSend+0x46>
 800db06:	2301      	movs	r3, #1
 800db08:	e000      	b.n	800db0c <xQueueGenericSend+0x48>
 800db0a:	2300      	movs	r3, #0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10b      	bne.n	800db28 <xQueueGenericSend+0x64>
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	b672      	cpsid	i
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	b662      	cpsie	i
 800db24:	627b      	str	r3, [r7, #36]	; 0x24
 800db26:	e7fe      	b.n	800db26 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d103      	bne.n	800db36 <xQueueGenericSend+0x72>
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db32:	2b01      	cmp	r3, #1
 800db34:	d101      	bne.n	800db3a <xQueueGenericSend+0x76>
 800db36:	2301      	movs	r3, #1
 800db38:	e000      	b.n	800db3c <xQueueGenericSend+0x78>
 800db3a:	2300      	movs	r3, #0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d10b      	bne.n	800db58 <xQueueGenericSend+0x94>
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	b672      	cpsid	i
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	b662      	cpsie	i
 800db54:	623b      	str	r3, [r7, #32]
 800db56:	e7fe      	b.n	800db56 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db58:	f001 f9c8 	bl	800eeec <xTaskGetSchedulerState>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d102      	bne.n	800db68 <xQueueGenericSend+0xa4>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <xQueueGenericSend+0xa8>
 800db68:	2301      	movs	r3, #1
 800db6a:	e000      	b.n	800db6e <xQueueGenericSend+0xaa>
 800db6c:	2300      	movs	r3, #0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10b      	bne.n	800db8a <xQueueGenericSend+0xc6>
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	b672      	cpsid	i
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	b662      	cpsie	i
 800db86:	61fb      	str	r3, [r7, #28]
 800db88:	e7fe      	b.n	800db88 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db8a:	f002 f805 	bl	800fb98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db96:	429a      	cmp	r2, r3
 800db98:	d302      	bcc.n	800dba0 <xQueueGenericSend+0xdc>
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d129      	bne.n	800dbf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	68b9      	ldr	r1, [r7, #8]
 800dba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dba6:	f000 fa0d 	bl	800dfc4 <prvCopyDataToQueue>
 800dbaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d010      	beq.n	800dbd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	3324      	adds	r3, #36	; 0x24
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f000 ffd9 	bl	800eb70 <xTaskRemoveFromEventList>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d013      	beq.n	800dbec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dbc4:	4b3f      	ldr	r3, [pc, #252]	; (800dcc4 <xQueueGenericSend+0x200>)
 800dbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	e00a      	b.n	800dbec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dbdc:	4b39      	ldr	r3, [pc, #228]	; (800dcc4 <xQueueGenericSend+0x200>)
 800dbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dbec:	f002 f806 	bl	800fbfc <vPortExitCritical>
				return pdPASS;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e063      	b.n	800dcbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d103      	bne.n	800dc02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbfa:	f001 ffff 	bl	800fbfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e05c      	b.n	800dcbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d106      	bne.n	800dc16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc08:	f107 0314 	add.w	r3, r7, #20
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f001 f813 	bl	800ec38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc12:	2301      	movs	r3, #1
 800dc14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc16:	f001 fff1 	bl	800fbfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc1a:	f000 fd83 	bl	800e724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc1e:	f001 ffbb 	bl	800fb98 <vPortEnterCritical>
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc28:	b25b      	sxtb	r3, r3
 800dc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2e:	d103      	bne.n	800dc38 <xQueueGenericSend+0x174>
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc3e:	b25b      	sxtb	r3, r3
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc44:	d103      	bne.n	800dc4e <xQueueGenericSend+0x18a>
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc4e:	f001 ffd5 	bl	800fbfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc52:	1d3a      	adds	r2, r7, #4
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	4611      	mov	r1, r2
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f001 f802 	bl	800ec64 <xTaskCheckForTimeOut>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d124      	bne.n	800dcb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc68:	f000 faa4 	bl	800e1b4 <prvIsQueueFull>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d018      	beq.n	800dca4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	3310      	adds	r3, #16
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 ff26 	bl	800eacc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dc80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc82:	f000 fa2f 	bl	800e0e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dc86:	f000 fd5b 	bl	800e740 <xTaskResumeAll>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f47f af7c 	bne.w	800db8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dc92:	4b0c      	ldr	r3, [pc, #48]	; (800dcc4 <xQueueGenericSend+0x200>)
 800dc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	e772      	b.n	800db8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dca6:	f000 fa1d 	bl	800e0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcaa:	f000 fd49 	bl	800e740 <xTaskResumeAll>
 800dcae:	e76c      	b.n	800db8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dcb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcb2:	f000 fa17 	bl	800e0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcb6:	f000 fd43 	bl	800e740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dcba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3738      	adds	r7, #56	; 0x38
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	e000ed04 	.word	0xe000ed04

0800dcc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08e      	sub	sp, #56	; 0x38
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10b      	bne.n	800dcf8 <xQueueGenericSendFromISR+0x30>
 800dce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce4:	b672      	cpsid	i
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	b662      	cpsie	i
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24
 800dcf6:	e7fe      	b.n	800dcf6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d103      	bne.n	800dd06 <xQueueGenericSendFromISR+0x3e>
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <xQueueGenericSendFromISR+0x42>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e000      	b.n	800dd0c <xQueueGenericSendFromISR+0x44>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10b      	bne.n	800dd28 <xQueueGenericSendFromISR+0x60>
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	b672      	cpsid	i
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	b662      	cpsie	i
 800dd24:	623b      	str	r3, [r7, #32]
 800dd26:	e7fe      	b.n	800dd26 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d103      	bne.n	800dd36 <xQueueGenericSendFromISR+0x6e>
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d101      	bne.n	800dd3a <xQueueGenericSendFromISR+0x72>
 800dd36:	2301      	movs	r3, #1
 800dd38:	e000      	b.n	800dd3c <xQueueGenericSendFromISR+0x74>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10b      	bne.n	800dd58 <xQueueGenericSendFromISR+0x90>
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	b672      	cpsid	i
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	b662      	cpsie	i
 800dd54:	61fb      	str	r3, [r7, #28]
 800dd56:	e7fe      	b.n	800dd56 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd58:	f001 fffe 	bl	800fd58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dd5c:	f3ef 8211 	mrs	r2, BASEPRI
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	b672      	cpsid	i
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	b662      	cpsie	i
 800dd74:	61ba      	str	r2, [r7, #24]
 800dd76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dd78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d302      	bcc.n	800dd8e <xQueueGenericSendFromISR+0xc6>
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d12c      	bne.n	800dde8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd9e:	f000 f911 	bl	800dfc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dda2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800dda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddaa:	d112      	bne.n	800ddd2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d016      	beq.n	800dde2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb6:	3324      	adds	r3, #36	; 0x24
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 fed9 	bl	800eb70 <xTaskRemoveFromEventList>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00e      	beq.n	800dde2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00b      	beq.n	800dde2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	601a      	str	r2, [r3, #0]
 800ddd0:	e007      	b.n	800dde2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ddd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	b25a      	sxtb	r2, r3
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dde2:	2301      	movs	r3, #1
 800dde4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dde6:	e001      	b.n	800ddec <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	637b      	str	r3, [r7, #52]	; 0x34
 800ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3738      	adds	r7, #56	; 0x38
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b08c      	sub	sp, #48	; 0x30
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800de0c:	2300      	movs	r3, #0
 800de0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10b      	bne.n	800de32 <xQueueReceive+0x32>
	__asm volatile
 800de1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1e:	b672      	cpsid	i
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	b662      	cpsie	i
 800de2e:	623b      	str	r3, [r7, #32]
 800de30:	e7fe      	b.n	800de30 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d103      	bne.n	800de40 <xQueueReceive+0x40>
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <xQueueReceive+0x44>
 800de40:	2301      	movs	r3, #1
 800de42:	e000      	b.n	800de46 <xQueueReceive+0x46>
 800de44:	2300      	movs	r3, #0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <xQueueReceive+0x62>
 800de4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4e:	b672      	cpsid	i
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	b662      	cpsie	i
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	e7fe      	b.n	800de60 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de62:	f001 f843 	bl	800eeec <xTaskGetSchedulerState>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d102      	bne.n	800de72 <xQueueReceive+0x72>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <xQueueReceive+0x76>
 800de72:	2301      	movs	r3, #1
 800de74:	e000      	b.n	800de78 <xQueueReceive+0x78>
 800de76:	2300      	movs	r3, #0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10b      	bne.n	800de94 <xQueueReceive+0x94>
 800de7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de80:	b672      	cpsid	i
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	b662      	cpsie	i
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	e7fe      	b.n	800de92 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de94:	f001 fe80 	bl	800fb98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d01f      	beq.n	800dee4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea8:	f000 f8f6 	bl	800e098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	1e5a      	subs	r2, r3, #1
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00f      	beq.n	800dedc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	3310      	adds	r3, #16
 800dec0:	4618      	mov	r0, r3
 800dec2:	f000 fe55 	bl	800eb70 <xTaskRemoveFromEventList>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d007      	beq.n	800dedc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800decc:	4b3c      	ldr	r3, [pc, #240]	; (800dfc0 <xQueueReceive+0x1c0>)
 800dece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dedc:	f001 fe8e 	bl	800fbfc <vPortExitCritical>
				return pdPASS;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e069      	b.n	800dfb8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d103      	bne.n	800def2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800deea:	f001 fe87 	bl	800fbfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800deee:	2300      	movs	r3, #0
 800def0:	e062      	b.n	800dfb8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800def2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800def8:	f107 0310 	add.w	r3, r7, #16
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fe9b 	bl	800ec38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df02:	2301      	movs	r3, #1
 800df04:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df06:	f001 fe79 	bl	800fbfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df0a:	f000 fc0b 	bl	800e724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df0e:	f001 fe43 	bl	800fb98 <vPortEnterCritical>
 800df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df18:	b25b      	sxtb	r3, r3
 800df1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1e:	d103      	bne.n	800df28 <xQueueReceive+0x128>
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	2200      	movs	r2, #0
 800df24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df2e:	b25b      	sxtb	r3, r3
 800df30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df34:	d103      	bne.n	800df3e <xQueueReceive+0x13e>
 800df36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df38:	2200      	movs	r2, #0
 800df3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df3e:	f001 fe5d 	bl	800fbfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df42:	1d3a      	adds	r2, r7, #4
 800df44:	f107 0310 	add.w	r3, r7, #16
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f000 fe8a 	bl	800ec64 <xTaskCheckForTimeOut>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d123      	bne.n	800df9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df58:	f000 f916 	bl	800e188 <prvIsQueueEmpty>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d017      	beq.n	800df92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df64:	3324      	adds	r3, #36	; 0x24
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	4611      	mov	r1, r2
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 fdae 	bl	800eacc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df72:	f000 f8b7 	bl	800e0e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df76:	f000 fbe3 	bl	800e740 <xTaskResumeAll>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d189      	bne.n	800de94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800df80:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <xQueueReceive+0x1c0>)
 800df82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	e780      	b.n	800de94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800df92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df94:	f000 f8a6 	bl	800e0e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df98:	f000 fbd2 	bl	800e740 <xTaskResumeAll>
 800df9c:	e77a      	b.n	800de94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfa0:	f000 f8a0 	bl	800e0e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfa4:	f000 fbcc 	bl	800e740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfaa:	f000 f8ed 	bl	800e188 <prvIsQueueEmpty>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f43f af6f 	beq.w	800de94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dfb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3730      	adds	r7, #48	; 0x30
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	e000ed04 	.word	0xe000ed04

0800dfc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10d      	bne.n	800dffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d14d      	bne.n	800e086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f000 ff9a 	bl	800ef28 <xTaskPriorityDisinherit>
 800dff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	609a      	str	r2, [r3, #8]
 800dffc:	e043      	b.n	800e086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d119      	bne.n	800e038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6858      	ldr	r0, [r3, #4]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00c:	461a      	mov	r2, r3
 800e00e:	68b9      	ldr	r1, [r7, #8]
 800e010:	f002 f8ee 	bl	80101f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01c:	441a      	add	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d32b      	bcc.n	800e086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	605a      	str	r2, [r3, #4]
 800e036:	e026      	b.n	800e086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	68d8      	ldr	r0, [r3, #12]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e040:	461a      	mov	r2, r3
 800e042:	68b9      	ldr	r1, [r7, #8]
 800e044:	f002 f8d4 	bl	80101f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	68da      	ldr	r2, [r3, #12]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e050:	425b      	negs	r3, r3
 800e052:	441a      	add	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	68da      	ldr	r2, [r3, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d207      	bcs.n	800e074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	689a      	ldr	r2, [r3, #8]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e06c:	425b      	negs	r3, r3
 800e06e:	441a      	add	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b02      	cmp	r3, #2
 800e078:	d105      	bne.n	800e086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	3b01      	subs	r3, #1
 800e084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e08e:	697b      	ldr	r3, [r7, #20]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d018      	beq.n	800e0dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68da      	ldr	r2, [r3, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b2:	441a      	add	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	68da      	ldr	r2, [r3, #12]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d303      	bcc.n	800e0cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	68d9      	ldr	r1, [r3, #12]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6838      	ldr	r0, [r7, #0]
 800e0d8:	f002 f88a 	bl	80101f0 <memcpy>
	}
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0ec:	f001 fd54 	bl	800fb98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0f8:	e011      	b.n	800e11e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d012      	beq.n	800e128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3324      	adds	r3, #36	; 0x24
 800e106:	4618      	mov	r0, r3
 800e108:	f000 fd32 	bl	800eb70 <xTaskRemoveFromEventList>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e112:	f000 fe0b 	bl	800ed2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e116:	7bfb      	ldrb	r3, [r7, #15]
 800e118:	3b01      	subs	r3, #1
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e122:	2b00      	cmp	r3, #0
 800e124:	dce9      	bgt.n	800e0fa <prvUnlockQueue+0x16>
 800e126:	e000      	b.n	800e12a <prvUnlockQueue+0x46>
					break;
 800e128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	22ff      	movs	r2, #255	; 0xff
 800e12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e132:	f001 fd63 	bl	800fbfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e136:	f001 fd2f 	bl	800fb98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e142:	e011      	b.n	800e168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d012      	beq.n	800e172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3310      	adds	r3, #16
 800e150:	4618      	mov	r0, r3
 800e152:	f000 fd0d 	bl	800eb70 <xTaskRemoveFromEventList>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e15c:	f000 fde6 	bl	800ed2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
 800e162:	3b01      	subs	r3, #1
 800e164:	b2db      	uxtb	r3, r3
 800e166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dce9      	bgt.n	800e144 <prvUnlockQueue+0x60>
 800e170:	e000      	b.n	800e174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	22ff      	movs	r2, #255	; 0xff
 800e178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e17c:	f001 fd3e 	bl	800fbfc <vPortExitCritical>
}
 800e180:	bf00      	nop
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e190:	f001 fd02 	bl	800fb98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d102      	bne.n	800e1a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e19c:	2301      	movs	r3, #1
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	e001      	b.n	800e1a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1a6:	f001 fd29 	bl	800fbfc <vPortExitCritical>

	return xReturn;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1bc:	f001 fcec 	bl	800fb98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d102      	bne.n	800e1d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	60fb      	str	r3, [r7, #12]
 800e1d0:	e001      	b.n	800e1d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1d6:	f001 fd11 	bl	800fbfc <vPortExitCritical>

	return xReturn;
 800e1da:	68fb      	ldr	r3, [r7, #12]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60fb      	str	r3, [r7, #12]
 800e1f2:	e014      	b.n	800e21e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e1f4:	4a0e      	ldr	r2, [pc, #56]	; (800e230 <vQueueAddToRegistry+0x4c>)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d10b      	bne.n	800e218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e200:	490b      	ldr	r1, [pc, #44]	; (800e230 <vQueueAddToRegistry+0x4c>)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e20a:	4a09      	ldr	r2, [pc, #36]	; (800e230 <vQueueAddToRegistry+0x4c>)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	4413      	add	r3, r2
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e216:	e005      	b.n	800e224 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	3301      	adds	r3, #1
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2b07      	cmp	r3, #7
 800e222:	d9e7      	bls.n	800e1f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e224:	bf00      	nop
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	200240e4 	.word	0x200240e4

0800e234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e244:	f001 fca8 	bl	800fb98 <vPortEnterCritical>
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e24e:	b25b      	sxtb	r3, r3
 800e250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e254:	d103      	bne.n	800e25e <vQueueWaitForMessageRestricted+0x2a>
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e264:	b25b      	sxtb	r3, r3
 800e266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26a:	d103      	bne.n	800e274 <vQueueWaitForMessageRestricted+0x40>
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e274:	f001 fcc2 	bl	800fbfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d106      	bne.n	800e28e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	3324      	adds	r3, #36	; 0x24
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	68b9      	ldr	r1, [r7, #8]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 fc45 	bl	800eb18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e28e:	6978      	ldr	r0, [r7, #20]
 800e290:	f7ff ff28 	bl	800e0e4 <prvUnlockQueue>
	}
 800e294:	bf00      	nop
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08e      	sub	sp, #56	; 0x38
 800e2a0:	af04      	add	r7, sp, #16
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10b      	bne.n	800e2c8 <xTaskCreateStatic+0x2c>
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	b672      	cpsid	i
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	b662      	cpsie	i
 800e2c4:	623b      	str	r3, [r7, #32]
 800e2c6:	e7fe      	b.n	800e2c6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10b      	bne.n	800e2e6 <xTaskCreateStatic+0x4a>
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	b672      	cpsid	i
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	b662      	cpsie	i
 800e2e2:	61fb      	str	r3, [r7, #28]
 800e2e4:	e7fe      	b.n	800e2e4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e2e6:	235c      	movs	r3, #92	; 0x5c
 800e2e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ee:	d00b      	beq.n	800e308 <xTaskCreateStatic+0x6c>
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	b672      	cpsid	i
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	b662      	cpsie	i
 800e304:	61bb      	str	r3, [r7, #24]
 800e306:	e7fe      	b.n	800e306 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01e      	beq.n	800e34e <xTaskCreateStatic+0xb2>
 800e310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e312:	2b00      	cmp	r3, #0
 800e314:	d01b      	beq.n	800e34e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e31e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	2202      	movs	r2, #2
 800e324:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e328:	2300      	movs	r3, #0
 800e32a:	9303      	str	r3, [sp, #12]
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	9302      	str	r3, [sp, #8]
 800e330:	f107 0314 	add.w	r3, r7, #20
 800e334:	9301      	str	r3, [sp, #4]
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	68b9      	ldr	r1, [r7, #8]
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f850 	bl	800e3e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e348:	f000 f8de 	bl	800e508 <prvAddNewTaskToReadyList>
 800e34c:	e001      	b.n	800e352 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e352:	697b      	ldr	r3, [r7, #20]
	}
 800e354:	4618      	mov	r0, r3
 800e356:	3728      	adds	r7, #40	; 0x28
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08c      	sub	sp, #48	; 0x30
 800e360:	af04      	add	r7, sp, #16
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	603b      	str	r3, [r7, #0]
 800e368:	4613      	mov	r3, r2
 800e36a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4618      	mov	r0, r3
 800e372:	f001 fd33 	bl	800fddc <pvPortMalloc>
 800e376:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00e      	beq.n	800e39c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e37e:	205c      	movs	r0, #92	; 0x5c
 800e380:	f001 fd2c 	bl	800fddc <pvPortMalloc>
 800e384:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	631a      	str	r2, [r3, #48]	; 0x30
 800e392:	e005      	b.n	800e3a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e394:	6978      	ldr	r0, [r7, #20]
 800e396:	f001 fde9 	bl	800ff6c <vPortFree>
 800e39a:	e001      	b.n	800e3a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d017      	beq.n	800e3d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e3ae:	88fa      	ldrh	r2, [r7, #6]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	9303      	str	r3, [sp, #12]
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	9302      	str	r3, [sp, #8]
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	9301      	str	r3, [sp, #4]
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f000 f80e 	bl	800e3e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3ca:	69f8      	ldr	r0, [r7, #28]
 800e3cc:	f000 f89c 	bl	800e508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	61bb      	str	r3, [r7, #24]
 800e3d4:	e002      	b.n	800e3dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e3dc:	69bb      	ldr	r3, [r7, #24]
	}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3720      	adds	r7, #32
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b088      	sub	sp, #32
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	60f8      	str	r0, [r7, #12]
 800e3ee:	60b9      	str	r1, [r7, #8]
 800e3f0:	607a      	str	r2, [r7, #4]
 800e3f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	21a5      	movs	r1, #165	; 0xa5
 800e400:	f001 ff01 	bl	8010206 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e408:	6879      	ldr	r1, [r7, #4]
 800e40a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e40e:	440b      	add	r3, r1
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	f023 0307 	bic.w	r3, r3, #7
 800e41c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	f003 0307 	and.w	r3, r3, #7
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00b      	beq.n	800e440 <prvInitialiseNewTask+0x5a>
 800e428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42c:	b672      	cpsid	i
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	b662      	cpsie	i
 800e43c:	617b      	str	r3, [r7, #20]
 800e43e:	e7fe      	b.n	800e43e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d01f      	beq.n	800e486 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e446:	2300      	movs	r3, #0
 800e448:	61fb      	str	r3, [r7, #28]
 800e44a:	e012      	b.n	800e472 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	4413      	add	r3, r2
 800e452:	7819      	ldrb	r1, [r3, #0]
 800e454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	4413      	add	r3, r2
 800e45a:	3334      	adds	r3, #52	; 0x34
 800e45c:	460a      	mov	r2, r1
 800e45e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	4413      	add	r3, r2
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d006      	beq.n	800e47a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	3301      	adds	r3, #1
 800e470:	61fb      	str	r3, [r7, #28]
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	2b0f      	cmp	r3, #15
 800e476:	d9e9      	bls.n	800e44c <prvInitialiseNewTask+0x66>
 800e478:	e000      	b.n	800e47c <prvInitialiseNewTask+0x96>
			{
				break;
 800e47a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e484:	e003      	b.n	800e48e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	2b37      	cmp	r3, #55	; 0x37
 800e492:	d901      	bls.n	800e498 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e494:	2337      	movs	r3, #55	; 0x37
 800e496:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e49c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7ff f96a 	bl	800d788 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	3318      	adds	r3, #24
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff f965 	bl	800d788 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	68f9      	ldr	r1, [r7, #12]
 800e4e6:	69b8      	ldr	r0, [r7, #24]
 800e4e8:	f001 fa4a 	bl	800f980 <pxPortInitialiseStack>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4fe:	bf00      	nop
 800e500:	3720      	adds	r7, #32
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
	...

0800e508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e510:	f001 fb42 	bl	800fb98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e514:	4b2d      	ldr	r3, [pc, #180]	; (800e5cc <prvAddNewTaskToReadyList+0xc4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3301      	adds	r3, #1
 800e51a:	4a2c      	ldr	r2, [pc, #176]	; (800e5cc <prvAddNewTaskToReadyList+0xc4>)
 800e51c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e51e:	4b2c      	ldr	r3, [pc, #176]	; (800e5d0 <prvAddNewTaskToReadyList+0xc8>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d109      	bne.n	800e53a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e526:	4a2a      	ldr	r2, [pc, #168]	; (800e5d0 <prvAddNewTaskToReadyList+0xc8>)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e52c:	4b27      	ldr	r3, [pc, #156]	; (800e5cc <prvAddNewTaskToReadyList+0xc4>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d110      	bne.n	800e556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e534:	f000 fc1e 	bl	800ed74 <prvInitialiseTaskLists>
 800e538:	e00d      	b.n	800e556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e53a:	4b26      	ldr	r3, [pc, #152]	; (800e5d4 <prvAddNewTaskToReadyList+0xcc>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d109      	bne.n	800e556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e542:	4b23      	ldr	r3, [pc, #140]	; (800e5d0 <prvAddNewTaskToReadyList+0xc8>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d802      	bhi.n	800e556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e550:	4a1f      	ldr	r2, [pc, #124]	; (800e5d0 <prvAddNewTaskToReadyList+0xc8>)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e556:	4b20      	ldr	r3, [pc, #128]	; (800e5d8 <prvAddNewTaskToReadyList+0xd0>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3301      	adds	r3, #1
 800e55c:	4a1e      	ldr	r2, [pc, #120]	; (800e5d8 <prvAddNewTaskToReadyList+0xd0>)
 800e55e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e560:	4b1d      	ldr	r3, [pc, #116]	; (800e5d8 <prvAddNewTaskToReadyList+0xd0>)
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56c:	4b1b      	ldr	r3, [pc, #108]	; (800e5dc <prvAddNewTaskToReadyList+0xd4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	429a      	cmp	r2, r3
 800e572:	d903      	bls.n	800e57c <prvAddNewTaskToReadyList+0x74>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e578:	4a18      	ldr	r2, [pc, #96]	; (800e5dc <prvAddNewTaskToReadyList+0xd4>)
 800e57a:	6013      	str	r3, [r2, #0]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e580:	4613      	mov	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4a15      	ldr	r2, [pc, #84]	; (800e5e0 <prvAddNewTaskToReadyList+0xd8>)
 800e58a:	441a      	add	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3304      	adds	r3, #4
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7ff f905 	bl	800d7a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e598:	f001 fb30 	bl	800fbfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e59c:	4b0d      	ldr	r3, [pc, #52]	; (800e5d4 <prvAddNewTaskToReadyList+0xcc>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00e      	beq.n	800e5c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e5a4:	4b0a      	ldr	r3, [pc, #40]	; (800e5d0 <prvAddNewTaskToReadyList+0xc8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d207      	bcs.n	800e5c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e5b2:	4b0c      	ldr	r3, [pc, #48]	; (800e5e4 <prvAddNewTaskToReadyList+0xdc>)
 800e5b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5c2:	bf00      	nop
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20003e38 	.word	0x20003e38
 800e5d0:	20003964 	.word	0x20003964
 800e5d4:	20003e44 	.word	0x20003e44
 800e5d8:	20003e54 	.word	0x20003e54
 800e5dc:	20003e40 	.word	0x20003e40
 800e5e0:	20003968 	.word	0x20003968
 800e5e4:	e000ed04 	.word	0xe000ed04

0800e5e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d018      	beq.n	800e62c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e5fa:	4b14      	ldr	r3, [pc, #80]	; (800e64c <vTaskDelay+0x64>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00b      	beq.n	800e61a <vTaskDelay+0x32>
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	b672      	cpsid	i
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	b662      	cpsie	i
 800e616:	60bb      	str	r3, [r7, #8]
 800e618:	e7fe      	b.n	800e618 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e61a:	f000 f883 	bl	800e724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e61e:	2100      	movs	r1, #0
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fe05 	bl	800f230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e626:	f000 f88b 	bl	800e740 <xTaskResumeAll>
 800e62a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d107      	bne.n	800e642 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e632:	4b07      	ldr	r3, [pc, #28]	; (800e650 <vTaskDelay+0x68>)
 800e634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e642:	bf00      	nop
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	20003e60 	.word	0x20003e60
 800e650:	e000ed04 	.word	0xe000ed04

0800e654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b08a      	sub	sp, #40	; 0x28
 800e658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e65a:	2300      	movs	r3, #0
 800e65c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e65e:	2300      	movs	r3, #0
 800e660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e662:	463a      	mov	r2, r7
 800e664:	1d39      	adds	r1, r7, #4
 800e666:	f107 0308 	add.w	r3, r7, #8
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7ff f838 	bl	800d6e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e670:	6839      	ldr	r1, [r7, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	9202      	str	r2, [sp, #8]
 800e678:	9301      	str	r3, [sp, #4]
 800e67a:	2300      	movs	r3, #0
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	2300      	movs	r3, #0
 800e680:	460a      	mov	r2, r1
 800e682:	4922      	ldr	r1, [pc, #136]	; (800e70c <vTaskStartScheduler+0xb8>)
 800e684:	4822      	ldr	r0, [pc, #136]	; (800e710 <vTaskStartScheduler+0xbc>)
 800e686:	f7ff fe09 	bl	800e29c <xTaskCreateStatic>
 800e68a:	4602      	mov	r2, r0
 800e68c:	4b21      	ldr	r3, [pc, #132]	; (800e714 <vTaskStartScheduler+0xc0>)
 800e68e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e690:	4b20      	ldr	r3, [pc, #128]	; (800e714 <vTaskStartScheduler+0xc0>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d002      	beq.n	800e69e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e698:	2301      	movs	r3, #1
 800e69a:	617b      	str	r3, [r7, #20]
 800e69c:	e001      	b.n	800e6a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d102      	bne.n	800e6ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e6a8:	f000 fe16 	bl	800f2d8 <xTimerCreateTimerTask>
 800e6ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d117      	bne.n	800e6e4 <vTaskStartScheduler+0x90>
 800e6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b8:	b672      	cpsid	i
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	b662      	cpsie	i
 800e6c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e6ca:	4b13      	ldr	r3, [pc, #76]	; (800e718 <vTaskStartScheduler+0xc4>)
 800e6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e6d2:	4b12      	ldr	r3, [pc, #72]	; (800e71c <vTaskStartScheduler+0xc8>)
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e6d8:	4b11      	ldr	r3, [pc, #68]	; (800e720 <vTaskStartScheduler+0xcc>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e6de:	f001 f9df 	bl	800faa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e6e2:	e00f      	b.n	800e704 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ea:	d10b      	bne.n	800e704 <vTaskStartScheduler+0xb0>
 800e6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f0:	b672      	cpsid	i
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	b662      	cpsie	i
 800e700:	60fb      	str	r3, [r7, #12]
 800e702:	e7fe      	b.n	800e702 <vTaskStartScheduler+0xae>
}
 800e704:	bf00      	nop
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	0801477c 	.word	0x0801477c
 800e710:	0800ed45 	.word	0x0800ed45
 800e714:	20003e5c 	.word	0x20003e5c
 800e718:	20003e58 	.word	0x20003e58
 800e71c:	20003e44 	.word	0x20003e44
 800e720:	20003e3c 	.word	0x20003e3c

0800e724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e728:	4b04      	ldr	r3, [pc, #16]	; (800e73c <vTaskSuspendAll+0x18>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	3301      	adds	r3, #1
 800e72e:	4a03      	ldr	r2, [pc, #12]	; (800e73c <vTaskSuspendAll+0x18>)
 800e730:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e732:	bf00      	nop
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	20003e60 	.word	0x20003e60

0800e740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e746:	2300      	movs	r3, #0
 800e748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e74e:	4b42      	ldr	r3, [pc, #264]	; (800e858 <xTaskResumeAll+0x118>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10b      	bne.n	800e76e <xTaskResumeAll+0x2e>
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	b672      	cpsid	i
 800e75c:	f383 8811 	msr	BASEPRI, r3
 800e760:	f3bf 8f6f 	isb	sy
 800e764:	f3bf 8f4f 	dsb	sy
 800e768:	b662      	cpsie	i
 800e76a:	603b      	str	r3, [r7, #0]
 800e76c:	e7fe      	b.n	800e76c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e76e:	f001 fa13 	bl	800fb98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e772:	4b39      	ldr	r3, [pc, #228]	; (800e858 <xTaskResumeAll+0x118>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3b01      	subs	r3, #1
 800e778:	4a37      	ldr	r2, [pc, #220]	; (800e858 <xTaskResumeAll+0x118>)
 800e77a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e77c:	4b36      	ldr	r3, [pc, #216]	; (800e858 <xTaskResumeAll+0x118>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d162      	bne.n	800e84a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e784:	4b35      	ldr	r3, [pc, #212]	; (800e85c <xTaskResumeAll+0x11c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d05e      	beq.n	800e84a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e78c:	e02f      	b.n	800e7ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e78e:	4b34      	ldr	r3, [pc, #208]	; (800e860 <xTaskResumeAll+0x120>)
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	3318      	adds	r3, #24
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7ff f85e 	bl	800d85c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7ff f859 	bl	800d85c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ae:	4b2d      	ldr	r3, [pc, #180]	; (800e864 <xTaskResumeAll+0x124>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d903      	bls.n	800e7be <xTaskResumeAll+0x7e>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ba:	4a2a      	ldr	r2, [pc, #168]	; (800e864 <xTaskResumeAll+0x124>)
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	4413      	add	r3, r2
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	4a27      	ldr	r2, [pc, #156]	; (800e868 <xTaskResumeAll+0x128>)
 800e7cc:	441a      	add	r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3304      	adds	r3, #4
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	f7fe ffe4 	bl	800d7a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7de:	4b23      	ldr	r3, [pc, #140]	; (800e86c <xTaskResumeAll+0x12c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d302      	bcc.n	800e7ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e7e8:	4b21      	ldr	r3, [pc, #132]	; (800e870 <xTaskResumeAll+0x130>)
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e7ee:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <xTaskResumeAll+0x120>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1cb      	bne.n	800e78e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d001      	beq.n	800e800 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e7fc:	f000 fb56 	bl	800eeac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e800:	4b1c      	ldr	r3, [pc, #112]	; (800e874 <xTaskResumeAll+0x134>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d010      	beq.n	800e82e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e80c:	f000 f846 	bl	800e89c <xTaskIncrementTick>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e816:	4b16      	ldr	r3, [pc, #88]	; (800e870 <xTaskResumeAll+0x130>)
 800e818:	2201      	movs	r2, #1
 800e81a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	3b01      	subs	r3, #1
 800e820:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1f1      	bne.n	800e80c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e828:	4b12      	ldr	r3, [pc, #72]	; (800e874 <xTaskResumeAll+0x134>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e82e:	4b10      	ldr	r3, [pc, #64]	; (800e870 <xTaskResumeAll+0x130>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d009      	beq.n	800e84a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e836:	2301      	movs	r3, #1
 800e838:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e83a:	4b0f      	ldr	r3, [pc, #60]	; (800e878 <xTaskResumeAll+0x138>)
 800e83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e84a:	f001 f9d7 	bl	800fbfc <vPortExitCritical>

	return xAlreadyYielded;
 800e84e:	68bb      	ldr	r3, [r7, #8]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20003e60 	.word	0x20003e60
 800e85c:	20003e38 	.word	0x20003e38
 800e860:	20003df8 	.word	0x20003df8
 800e864:	20003e40 	.word	0x20003e40
 800e868:	20003968 	.word	0x20003968
 800e86c:	20003964 	.word	0x20003964
 800e870:	20003e4c 	.word	0x20003e4c
 800e874:	20003e48 	.word	0x20003e48
 800e878:	e000ed04 	.word	0xe000ed04

0800e87c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e882:	4b05      	ldr	r3, [pc, #20]	; (800e898 <xTaskGetTickCount+0x1c>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e888:	687b      	ldr	r3, [r7, #4]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	20003e3c 	.word	0x20003e3c

0800e89c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8a6:	4b4f      	ldr	r3, [pc, #316]	; (800e9e4 <xTaskIncrementTick+0x148>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f040 808a 	bne.w	800e9c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e8b0:	4b4d      	ldr	r3, [pc, #308]	; (800e9e8 <xTaskIncrementTick+0x14c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e8b8:	4a4b      	ldr	r2, [pc, #300]	; (800e9e8 <xTaskIncrementTick+0x14c>)
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d121      	bne.n	800e908 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e8c4:	4b49      	ldr	r3, [pc, #292]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00b      	beq.n	800e8e6 <xTaskIncrementTick+0x4a>
 800e8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d2:	b672      	cpsid	i
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	b662      	cpsie	i
 800e8e2:	603b      	str	r3, [r7, #0]
 800e8e4:	e7fe      	b.n	800e8e4 <xTaskIncrementTick+0x48>
 800e8e6:	4b41      	ldr	r3, [pc, #260]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	4b40      	ldr	r3, [pc, #256]	; (800e9f0 <xTaskIncrementTick+0x154>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a3e      	ldr	r2, [pc, #248]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	4a3e      	ldr	r2, [pc, #248]	; (800e9f0 <xTaskIncrementTick+0x154>)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	4b3e      	ldr	r3, [pc, #248]	; (800e9f4 <xTaskIncrementTick+0x158>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3301      	adds	r3, #1
 800e900:	4a3c      	ldr	r2, [pc, #240]	; (800e9f4 <xTaskIncrementTick+0x158>)
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	f000 fad2 	bl	800eeac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e908:	4b3b      	ldr	r3, [pc, #236]	; (800e9f8 <xTaskIncrementTick+0x15c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	693a      	ldr	r2, [r7, #16]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d349      	bcc.n	800e9a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e912:	4b36      	ldr	r3, [pc, #216]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e91c:	4b36      	ldr	r3, [pc, #216]	; (800e9f8 <xTaskIncrementTick+0x15c>)
 800e91e:	f04f 32ff 	mov.w	r2, #4294967295
 800e922:	601a      	str	r2, [r3, #0]
					break;
 800e924:	e03f      	b.n	800e9a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e926:	4b31      	ldr	r3, [pc, #196]	; (800e9ec <xTaskIncrementTick+0x150>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d203      	bcs.n	800e946 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e93e:	4a2e      	ldr	r2, [pc, #184]	; (800e9f8 <xTaskIncrementTick+0x15c>)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e944:	e02f      	b.n	800e9a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	3304      	adds	r3, #4
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe ff86 	bl	800d85c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	3318      	adds	r3, #24
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7fe ff7d 	bl	800d85c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e966:	4b25      	ldr	r3, [pc, #148]	; (800e9fc <xTaskIncrementTick+0x160>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d903      	bls.n	800e976 <xTaskIncrementTick+0xda>
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e972:	4a22      	ldr	r2, [pc, #136]	; (800e9fc <xTaskIncrementTick+0x160>)
 800e974:	6013      	str	r3, [r2, #0]
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e97a:	4613      	mov	r3, r2
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	4413      	add	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4a1f      	ldr	r2, [pc, #124]	; (800ea00 <xTaskIncrementTick+0x164>)
 800e984:	441a      	add	r2, r3
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	3304      	adds	r3, #4
 800e98a:	4619      	mov	r1, r3
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7fe ff08 	bl	800d7a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e996:	4b1b      	ldr	r3, [pc, #108]	; (800ea04 <xTaskIncrementTick+0x168>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d3b8      	bcc.n	800e912 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9a4:	e7b5      	b.n	800e912 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e9a6:	4b17      	ldr	r3, [pc, #92]	; (800ea04 <xTaskIncrementTick+0x168>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ac:	4914      	ldr	r1, [pc, #80]	; (800ea00 <xTaskIncrementTick+0x164>)
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4413      	add	r3, r2
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	440b      	add	r3, r1
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d907      	bls.n	800e9ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	617b      	str	r3, [r7, #20]
 800e9c2:	e004      	b.n	800e9ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e9c4:	4b10      	ldr	r3, [pc, #64]	; (800ea08 <xTaskIncrementTick+0x16c>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	4a0f      	ldr	r2, [pc, #60]	; (800ea08 <xTaskIncrementTick+0x16c>)
 800e9cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ea0c <xTaskIncrementTick+0x170>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e9da:	697b      	ldr	r3, [r7, #20]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20003e60 	.word	0x20003e60
 800e9e8:	20003e3c 	.word	0x20003e3c
 800e9ec:	20003df0 	.word	0x20003df0
 800e9f0:	20003df4 	.word	0x20003df4
 800e9f4:	20003e50 	.word	0x20003e50
 800e9f8:	20003e58 	.word	0x20003e58
 800e9fc:	20003e40 	.word	0x20003e40
 800ea00:	20003968 	.word	0x20003968
 800ea04:	20003964 	.word	0x20003964
 800ea08:	20003e48 	.word	0x20003e48
 800ea0c:	20003e4c 	.word	0x20003e4c

0800ea10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ea16:	4b28      	ldr	r3, [pc, #160]	; (800eab8 <vTaskSwitchContext+0xa8>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ea1e:	4b27      	ldr	r3, [pc, #156]	; (800eabc <vTaskSwitchContext+0xac>)
 800ea20:	2201      	movs	r2, #1
 800ea22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea24:	e042      	b.n	800eaac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ea26:	4b25      	ldr	r3, [pc, #148]	; (800eabc <vTaskSwitchContext+0xac>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2c:	4b24      	ldr	r3, [pc, #144]	; (800eac0 <vTaskSwitchContext+0xb0>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e011      	b.n	800ea58 <vTaskSwitchContext+0x48>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10b      	bne.n	800ea52 <vTaskSwitchContext+0x42>
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	b672      	cpsid	i
 800ea40:	f383 8811 	msr	BASEPRI, r3
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	b662      	cpsie	i
 800ea4e:	607b      	str	r3, [r7, #4]
 800ea50:	e7fe      	b.n	800ea50 <vTaskSwitchContext+0x40>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	60fb      	str	r3, [r7, #12]
 800ea58:	491a      	ldr	r1, [pc, #104]	; (800eac4 <vTaskSwitchContext+0xb4>)
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	440b      	add	r3, r1
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0e3      	beq.n	800ea34 <vTaskSwitchContext+0x24>
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4413      	add	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4a13      	ldr	r2, [pc, #76]	; (800eac4 <vTaskSwitchContext+0xb4>)
 800ea78:	4413      	add	r3, r2
 800ea7a:	60bb      	str	r3, [r7, #8]
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	605a      	str	r2, [r3, #4]
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	685a      	ldr	r2, [r3, #4]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d104      	bne.n	800ea9c <vTaskSwitchContext+0x8c>
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	685a      	ldr	r2, [r3, #4]
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	605a      	str	r2, [r3, #4]
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	4a09      	ldr	r2, [pc, #36]	; (800eac8 <vTaskSwitchContext+0xb8>)
 800eaa4:	6013      	str	r3, [r2, #0]
 800eaa6:	4a06      	ldr	r2, [pc, #24]	; (800eac0 <vTaskSwitchContext+0xb0>)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6013      	str	r3, [r2, #0]
}
 800eaac:	bf00      	nop
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	20003e60 	.word	0x20003e60
 800eabc:	20003e4c 	.word	0x20003e4c
 800eac0:	20003e40 	.word	0x20003e40
 800eac4:	20003968 	.word	0x20003968
 800eac8:	20003964 	.word	0x20003964

0800eacc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10b      	bne.n	800eaf4 <vTaskPlaceOnEventList+0x28>
 800eadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae0:	b672      	cpsid	i
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	b662      	cpsie	i
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e7fe      	b.n	800eaf2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eaf4:	4b07      	ldr	r3, [pc, #28]	; (800eb14 <vTaskPlaceOnEventList+0x48>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3318      	adds	r3, #24
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7fe fe74 	bl	800d7ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb02:	2101      	movs	r1, #1
 800eb04:	6838      	ldr	r0, [r7, #0]
 800eb06:	f000 fb93 	bl	800f230 <prvAddCurrentTaskToDelayedList>
}
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20003964 	.word	0x20003964

0800eb18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10b      	bne.n	800eb42 <vTaskPlaceOnEventListRestricted+0x2a>
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	b672      	cpsid	i
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	b662      	cpsie	i
 800eb3e:	617b      	str	r3, [r7, #20]
 800eb40:	e7fe      	b.n	800eb40 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb42:	4b0a      	ldr	r3, [pc, #40]	; (800eb6c <vTaskPlaceOnEventListRestricted+0x54>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	3318      	adds	r3, #24
 800eb48:	4619      	mov	r1, r3
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f7fe fe29 	bl	800d7a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800eb56:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	68b8      	ldr	r0, [r7, #8]
 800eb60:	f000 fb66 	bl	800f230 <prvAddCurrentTaskToDelayedList>
	}
 800eb64:	bf00      	nop
 800eb66:	3718      	adds	r7, #24
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	20003964 	.word	0x20003964

0800eb70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10b      	bne.n	800eb9e <xTaskRemoveFromEventList+0x2e>
 800eb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8a:	b672      	cpsid	i
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	b662      	cpsie	i
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	e7fe      	b.n	800eb9c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	3318      	adds	r3, #24
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fe fe5a 	bl	800d85c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eba8:	4b1d      	ldr	r3, [pc, #116]	; (800ec20 <xTaskRemoveFromEventList+0xb0>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d11d      	bne.n	800ebec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe fe51 	bl	800d85c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebbe:	4b19      	ldr	r3, [pc, #100]	; (800ec24 <xTaskRemoveFromEventList+0xb4>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d903      	bls.n	800ebce <xTaskRemoveFromEventList+0x5e>
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebca:	4a16      	ldr	r2, [pc, #88]	; (800ec24 <xTaskRemoveFromEventList+0xb4>)
 800ebcc:	6013      	str	r3, [r2, #0]
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4a13      	ldr	r2, [pc, #76]	; (800ec28 <xTaskRemoveFromEventList+0xb8>)
 800ebdc:	441a      	add	r2, r3
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	f7fe fddc 	bl	800d7a2 <vListInsertEnd>
 800ebea:	e005      	b.n	800ebf8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	3318      	adds	r3, #24
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	480e      	ldr	r0, [pc, #56]	; (800ec2c <xTaskRemoveFromEventList+0xbc>)
 800ebf4:	f7fe fdd5 	bl	800d7a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <xTaskRemoveFromEventList+0xc0>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d905      	bls.n	800ec12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec06:	2301      	movs	r3, #1
 800ec08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec0a:	4b0a      	ldr	r3, [pc, #40]	; (800ec34 <xTaskRemoveFromEventList+0xc4>)
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	e001      	b.n	800ec16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ec12:	2300      	movs	r3, #0
 800ec14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec16:	697b      	ldr	r3, [r7, #20]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3718      	adds	r7, #24
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20003e60 	.word	0x20003e60
 800ec24:	20003e40 	.word	0x20003e40
 800ec28:	20003968 	.word	0x20003968
 800ec2c:	20003df8 	.word	0x20003df8
 800ec30:	20003964 	.word	0x20003964
 800ec34:	20003e4c 	.word	0x20003e4c

0800ec38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec40:	4b06      	ldr	r3, [pc, #24]	; (800ec5c <vTaskInternalSetTimeOutState+0x24>)
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec48:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <vTaskInternalSetTimeOutState+0x28>)
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	605a      	str	r2, [r3, #4]
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr
 800ec5c:	20003e50 	.word	0x20003e50
 800ec60:	20003e3c 	.word	0x20003e3c

0800ec64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10b      	bne.n	800ec8c <xTaskCheckForTimeOut+0x28>
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	b672      	cpsid	i
 800ec7a:	f383 8811 	msr	BASEPRI, r3
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	b662      	cpsie	i
 800ec88:	613b      	str	r3, [r7, #16]
 800ec8a:	e7fe      	b.n	800ec8a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10b      	bne.n	800ecaa <xTaskCheckForTimeOut+0x46>
 800ec92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec96:	b672      	cpsid	i
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	b662      	cpsie	i
 800eca6:	60fb      	str	r3, [r7, #12]
 800eca8:	e7fe      	b.n	800eca8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ecaa:	f000 ff75 	bl	800fb98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ecae:	4b1d      	ldr	r3, [pc, #116]	; (800ed24 <xTaskCheckForTimeOut+0xc0>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	69ba      	ldr	r2, [r7, #24]
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc6:	d102      	bne.n	800ecce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	61fb      	str	r3, [r7, #28]
 800eccc:	e023      	b.n	800ed16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <xTaskCheckForTimeOut+0xc4>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d007      	beq.n	800ecea <xTaskCheckForTimeOut+0x86>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	69ba      	ldr	r2, [r7, #24]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d302      	bcc.n	800ecea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ece4:	2301      	movs	r3, #1
 800ece6:	61fb      	str	r3, [r7, #28]
 800ece8:	e015      	b.n	800ed16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d20b      	bcs.n	800ed0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	1ad2      	subs	r2, r2, r3
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff ff99 	bl	800ec38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed06:	2300      	movs	r3, #0
 800ed08:	61fb      	str	r3, [r7, #28]
 800ed0a:	e004      	b.n	800ed16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed12:	2301      	movs	r3, #1
 800ed14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed16:	f000 ff71 	bl	800fbfc <vPortExitCritical>

	return xReturn;
 800ed1a:	69fb      	ldr	r3, [r7, #28]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3720      	adds	r7, #32
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	20003e3c 	.word	0x20003e3c
 800ed28:	20003e50 	.word	0x20003e50

0800ed2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed30:	4b03      	ldr	r3, [pc, #12]	; (800ed40 <vTaskMissedYield+0x14>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	601a      	str	r2, [r3, #0]
}
 800ed36:	bf00      	nop
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	20003e4c 	.word	0x20003e4c

0800ed44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed4c:	f000 f852 	bl	800edf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <prvIdleTask+0x28>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d9f9      	bls.n	800ed4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed58:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <prvIdleTask+0x2c>)
 800ed5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	f3bf 8f4f 	dsb	sy
 800ed64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ed68:	e7f0      	b.n	800ed4c <prvIdleTask+0x8>
 800ed6a:	bf00      	nop
 800ed6c:	20003968 	.word	0x20003968
 800ed70:	e000ed04 	.word	0xe000ed04

0800ed74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	607b      	str	r3, [r7, #4]
 800ed7e:	e00c      	b.n	800ed9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	4613      	mov	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4a12      	ldr	r2, [pc, #72]	; (800edd4 <prvInitialiseTaskLists+0x60>)
 800ed8c:	4413      	add	r3, r2
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe fcda 	bl	800d748 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	3301      	adds	r3, #1
 800ed98:	607b      	str	r3, [r7, #4]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b37      	cmp	r3, #55	; 0x37
 800ed9e:	d9ef      	bls.n	800ed80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eda0:	480d      	ldr	r0, [pc, #52]	; (800edd8 <prvInitialiseTaskLists+0x64>)
 800eda2:	f7fe fcd1 	bl	800d748 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eda6:	480d      	ldr	r0, [pc, #52]	; (800eddc <prvInitialiseTaskLists+0x68>)
 800eda8:	f7fe fcce 	bl	800d748 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800edac:	480c      	ldr	r0, [pc, #48]	; (800ede0 <prvInitialiseTaskLists+0x6c>)
 800edae:	f7fe fccb 	bl	800d748 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800edb2:	480c      	ldr	r0, [pc, #48]	; (800ede4 <prvInitialiseTaskLists+0x70>)
 800edb4:	f7fe fcc8 	bl	800d748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800edb8:	480b      	ldr	r0, [pc, #44]	; (800ede8 <prvInitialiseTaskLists+0x74>)
 800edba:	f7fe fcc5 	bl	800d748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800edbe:	4b0b      	ldr	r3, [pc, #44]	; (800edec <prvInitialiseTaskLists+0x78>)
 800edc0:	4a05      	ldr	r2, [pc, #20]	; (800edd8 <prvInitialiseTaskLists+0x64>)
 800edc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800edc4:	4b0a      	ldr	r3, [pc, #40]	; (800edf0 <prvInitialiseTaskLists+0x7c>)
 800edc6:	4a05      	ldr	r2, [pc, #20]	; (800eddc <prvInitialiseTaskLists+0x68>)
 800edc8:	601a      	str	r2, [r3, #0]
}
 800edca:	bf00      	nop
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20003968 	.word	0x20003968
 800edd8:	20003dc8 	.word	0x20003dc8
 800eddc:	20003ddc 	.word	0x20003ddc
 800ede0:	20003df8 	.word	0x20003df8
 800ede4:	20003e0c 	.word	0x20003e0c
 800ede8:	20003e24 	.word	0x20003e24
 800edec:	20003df0 	.word	0x20003df0
 800edf0:	20003df4 	.word	0x20003df4

0800edf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edfa:	e019      	b.n	800ee30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800edfc:	f000 fecc 	bl	800fb98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee00:	4b0f      	ldr	r3, [pc, #60]	; (800ee40 <prvCheckTasksWaitingTermination+0x4c>)
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fe fd25 	bl	800d85c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee12:	4b0c      	ldr	r3, [pc, #48]	; (800ee44 <prvCheckTasksWaitingTermination+0x50>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	4a0a      	ldr	r2, [pc, #40]	; (800ee44 <prvCheckTasksWaitingTermination+0x50>)
 800ee1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee1c:	4b0a      	ldr	r3, [pc, #40]	; (800ee48 <prvCheckTasksWaitingTermination+0x54>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3b01      	subs	r3, #1
 800ee22:	4a09      	ldr	r2, [pc, #36]	; (800ee48 <prvCheckTasksWaitingTermination+0x54>)
 800ee24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee26:	f000 fee9 	bl	800fbfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f000 f80e 	bl	800ee4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee30:	4b05      	ldr	r3, [pc, #20]	; (800ee48 <prvCheckTasksWaitingTermination+0x54>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d1e1      	bne.n	800edfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee38:	bf00      	nop
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20003e0c 	.word	0x20003e0c
 800ee44:	20003e38 	.word	0x20003e38
 800ee48:	20003e20 	.word	0x20003e20

0800ee4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d108      	bne.n	800ee70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee62:	4618      	mov	r0, r3
 800ee64:	f001 f882 	bl	800ff6c <vPortFree>
				vPortFree( pxTCB );
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f001 f87f 	bl	800ff6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ee6e:	e019      	b.n	800eea4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d103      	bne.n	800ee82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f001 f876 	bl	800ff6c <vPortFree>
	}
 800ee80:	e010      	b.n	800eea4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d00b      	beq.n	800eea4 <prvDeleteTCB+0x58>
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	b672      	cpsid	i
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	b662      	cpsie	i
 800eea0:	60fb      	str	r3, [r7, #12]
 800eea2:	e7fe      	b.n	800eea2 <prvDeleteTCB+0x56>
	}
 800eea4:	bf00      	nop
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeb2:	4b0c      	ldr	r3, [pc, #48]	; (800eee4 <prvResetNextTaskUnblockTime+0x38>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d104      	bne.n	800eec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eebc:	4b0a      	ldr	r3, [pc, #40]	; (800eee8 <prvResetNextTaskUnblockTime+0x3c>)
 800eebe:	f04f 32ff 	mov.w	r2, #4294967295
 800eec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eec4:	e008      	b.n	800eed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eec6:	4b07      	ldr	r3, [pc, #28]	; (800eee4 <prvResetNextTaskUnblockTime+0x38>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	4a04      	ldr	r2, [pc, #16]	; (800eee8 <prvResetNextTaskUnblockTime+0x3c>)
 800eed6:	6013      	str	r3, [r2, #0]
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	20003df0 	.word	0x20003df0
 800eee8:	20003e58 	.word	0x20003e58

0800eeec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eef2:	4b0b      	ldr	r3, [pc, #44]	; (800ef20 <xTaskGetSchedulerState+0x34>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d102      	bne.n	800ef00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eefa:	2301      	movs	r3, #1
 800eefc:	607b      	str	r3, [r7, #4]
 800eefe:	e008      	b.n	800ef12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef00:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <xTaskGetSchedulerState+0x38>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d102      	bne.n	800ef0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ef08:	2302      	movs	r3, #2
 800ef0a:	607b      	str	r3, [r7, #4]
 800ef0c:	e001      	b.n	800ef12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ef12:	687b      	ldr	r3, [r7, #4]
	}
 800ef14:	4618      	mov	r0, r3
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	20003e44 	.word	0x20003e44
 800ef24:	20003e60 	.word	0x20003e60

0800ef28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef34:	2300      	movs	r3, #0
 800ef36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d058      	beq.n	800eff0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef3e:	4b2f      	ldr	r3, [pc, #188]	; (800effc <xTaskPriorityDisinherit+0xd4>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d00b      	beq.n	800ef60 <xTaskPriorityDisinherit+0x38>
 800ef48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4c:	b672      	cpsid	i
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	b662      	cpsie	i
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	e7fe      	b.n	800ef5e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10b      	bne.n	800ef80 <xTaskPriorityDisinherit+0x58>
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	b672      	cpsid	i
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	b662      	cpsie	i
 800ef7c:	60bb      	str	r3, [r7, #8]
 800ef7e:	e7fe      	b.n	800ef7e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef84:	1e5a      	subs	r2, r3, #1
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d02c      	beq.n	800eff0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d128      	bne.n	800eff0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	3304      	adds	r3, #4
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe fc5a 	bl	800d85c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc0:	4b0f      	ldr	r3, [pc, #60]	; (800f000 <xTaskPriorityDisinherit+0xd8>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d903      	bls.n	800efd0 <xTaskPriorityDisinherit+0xa8>
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efcc:	4a0c      	ldr	r2, [pc, #48]	; (800f000 <xTaskPriorityDisinherit+0xd8>)
 800efce:	6013      	str	r3, [r2, #0]
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd4:	4613      	mov	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4413      	add	r3, r2
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4a09      	ldr	r2, [pc, #36]	; (800f004 <xTaskPriorityDisinherit+0xdc>)
 800efde:	441a      	add	r2, r3
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	3304      	adds	r3, #4
 800efe4:	4619      	mov	r1, r3
 800efe6:	4610      	mov	r0, r2
 800efe8:	f7fe fbdb 	bl	800d7a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eff0:	697b      	ldr	r3, [r7, #20]
	}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3718      	adds	r7, #24
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	20003964 	.word	0x20003964
 800f000:	20003e40 	.word	0x20003e40
 800f004:	20003968 	.word	0x20003968

0800f008 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f016:	f000 fdbf 	bl	800fb98 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f01a:	4b26      	ldr	r3, [pc, #152]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b02      	cmp	r3, #2
 800f026:	d01a      	beq.n	800f05e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f028:	4b22      	ldr	r3, [pc, #136]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	43d2      	mvns	r2, r2
 800f032:	400a      	ands	r2, r1
 800f034:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f036:	4b1f      	ldr	r3, [pc, #124]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00b      	beq.n	800f05e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f046:	2101      	movs	r1, #1
 800f048:	6838      	ldr	r0, [r7, #0]
 800f04a:	f000 f8f1 	bl	800f230 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f04e:	4b1a      	ldr	r3, [pc, #104]	; (800f0b8 <xTaskNotifyWait+0xb0>)
 800f050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f05e:	f000 fdcd 	bl	800fbfc <vPortExitCritical>

		taskENTER_CRITICAL();
 800f062:	f000 fd99 	bl	800fb98 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d004      	beq.n	800f076 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f06c:	4b11      	ldr	r3, [pc, #68]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f076:	4b0f      	ldr	r3, [pc, #60]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b02      	cmp	r3, #2
 800f082:	d002      	beq.n	800f08a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f084:	2300      	movs	r3, #0
 800f086:	617b      	str	r3, [r7, #20]
 800f088:	e008      	b.n	800f09c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f08a:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	43d2      	mvns	r2, r2
 800f094:	400a      	ands	r2, r1
 800f096:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f098:	2301      	movs	r3, #1
 800f09a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f09c:	4b05      	ldr	r3, [pc, #20]	; (800f0b4 <xTaskNotifyWait+0xac>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f0a6:	f000 fda9 	bl	800fbfc <vPortExitCritical>

		return xReturn;
 800f0aa:	697b      	ldr	r3, [r7, #20]
	}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	20003964 	.word	0x20003964
 800f0b8:	e000ed04 	.word	0xe000ed04

0800f0bc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08a      	sub	sp, #40	; 0x28
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	603b      	str	r3, [r7, #0]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d10b      	bne.n	800f0ee <xTaskGenericNotify+0x32>
 800f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0da:	b672      	cpsid	i
 800f0dc:	f383 8811 	msr	BASEPRI, r3
 800f0e0:	f3bf 8f6f 	isb	sy
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	b662      	cpsie	i
 800f0ea:	61bb      	str	r3, [r7, #24]
 800f0ec:	e7fe      	b.n	800f0ec <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f0f2:	f000 fd51 	bl	800fb98 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d003      	beq.n	800f104 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f10a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f10c:	6a3b      	ldr	r3, [r7, #32]
 800f10e:	2202      	movs	r2, #2
 800f110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f114:	79fb      	ldrb	r3, [r7, #7]
 800f116:	2b04      	cmp	r3, #4
 800f118:	d827      	bhi.n	800f16a <xTaskGenericNotify+0xae>
 800f11a:	a201      	add	r2, pc, #4	; (adr r2, 800f120 <xTaskGenericNotify+0x64>)
 800f11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f120:	0800f18d 	.word	0x0800f18d
 800f124:	0800f135 	.word	0x0800f135
 800f128:	0800f143 	.word	0x0800f143
 800f12c:	0800f14f 	.word	0x0800f14f
 800f130:	0800f157 	.word	0x0800f157
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	431a      	orrs	r2, r3
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f140:	e027      	b.n	800f192 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f14c:	e021      	b.n	800f192 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f14e:	6a3b      	ldr	r3, [r7, #32]
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f154:	e01d      	b.n	800f192 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f156:	7ffb      	ldrb	r3, [r7, #31]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d003      	beq.n	800f164 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f162:	e016      	b.n	800f192 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800f164:	2300      	movs	r3, #0
 800f166:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f168:	e013      	b.n	800f192 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f16a:	6a3b      	ldr	r3, [r7, #32]
 800f16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f172:	d00d      	beq.n	800f190 <xTaskGenericNotify+0xd4>
 800f174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f178:	b672      	cpsid	i
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	b662      	cpsie	i
 800f188:	617b      	str	r3, [r7, #20]
 800f18a:	e7fe      	b.n	800f18a <xTaskGenericNotify+0xce>
					break;
 800f18c:	bf00      	nop
 800f18e:	e000      	b.n	800f192 <xTaskGenericNotify+0xd6>

					break;
 800f190:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f192:	7ffb      	ldrb	r3, [r7, #31]
 800f194:	2b01      	cmp	r3, #1
 800f196:	d13b      	bne.n	800f210 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	3304      	adds	r3, #4
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fe fb5d 	bl	800d85c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f1a2:	6a3b      	ldr	r3, [r7, #32]
 800f1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1a6:	4b1e      	ldr	r3, [pc, #120]	; (800f220 <xTaskGenericNotify+0x164>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d903      	bls.n	800f1b6 <xTaskGenericNotify+0xfa>
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b2:	4a1b      	ldr	r2, [pc, #108]	; (800f220 <xTaskGenericNotify+0x164>)
 800f1b4:	6013      	str	r3, [r2, #0]
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	4413      	add	r3, r2
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	4a18      	ldr	r2, [pc, #96]	; (800f224 <xTaskGenericNotify+0x168>)
 800f1c4:	441a      	add	r2, r3
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	f7fe fae8 	bl	800d7a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d00b      	beq.n	800f1f2 <xTaskGenericNotify+0x136>
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	b672      	cpsid	i
 800f1e0:	f383 8811 	msr	BASEPRI, r3
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	f3bf 8f4f 	dsb	sy
 800f1ec:	b662      	cpsie	i
 800f1ee:	613b      	str	r3, [r7, #16]
 800f1f0:	e7fe      	b.n	800f1f0 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1f2:	6a3b      	ldr	r3, [r7, #32]
 800f1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1f6:	4b0c      	ldr	r3, [pc, #48]	; (800f228 <xTaskGenericNotify+0x16c>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d907      	bls.n	800f210 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f200:	4b0a      	ldr	r3, [pc, #40]	; (800f22c <xTaskGenericNotify+0x170>)
 800f202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f210:	f000 fcf4 	bl	800fbfc <vPortExitCritical>

		return xReturn;
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f216:	4618      	mov	r0, r3
 800f218:	3728      	adds	r7, #40	; 0x28
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	20003e40 	.word	0x20003e40
 800f224:	20003968 	.word	0x20003968
 800f228:	20003964 	.word	0x20003964
 800f22c:	e000ed04 	.word	0xe000ed04

0800f230 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f23a:	4b21      	ldr	r3, [pc, #132]	; (800f2c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f240:	4b20      	ldr	r3, [pc, #128]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3304      	adds	r3, #4
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe fb08 	bl	800d85c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f252:	d10a      	bne.n	800f26a <prvAddCurrentTaskToDelayedList+0x3a>
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d007      	beq.n	800f26a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f25a:	4b1a      	ldr	r3, [pc, #104]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3304      	adds	r3, #4
 800f260:	4619      	mov	r1, r3
 800f262:	4819      	ldr	r0, [pc, #100]	; (800f2c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f264:	f7fe fa9d 	bl	800d7a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f268:	e026      	b.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4413      	add	r3, r2
 800f270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f272:	4b14      	ldr	r3, [pc, #80]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d209      	bcs.n	800f296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f282:	4b12      	ldr	r3, [pc, #72]	; (800f2cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	4b0f      	ldr	r3, [pc, #60]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3304      	adds	r3, #4
 800f28c:	4619      	mov	r1, r3
 800f28e:	4610      	mov	r0, r2
 800f290:	f7fe faab 	bl	800d7ea <vListInsert>
}
 800f294:	e010      	b.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f296:	4b0e      	ldr	r3, [pc, #56]	; (800f2d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	4b0a      	ldr	r3, [pc, #40]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4610      	mov	r0, r2
 800f2a4:	f7fe faa1 	bl	800d7ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2a8:	4b0a      	ldr	r3, [pc, #40]	; (800f2d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d202      	bcs.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2b2:	4a08      	ldr	r2, [pc, #32]	; (800f2d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	6013      	str	r3, [r2, #0]
}
 800f2b8:	bf00      	nop
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	20003e3c 	.word	0x20003e3c
 800f2c4:	20003964 	.word	0x20003964
 800f2c8:	20003e24 	.word	0x20003e24
 800f2cc:	20003df4 	.word	0x20003df4
 800f2d0:	20003df0 	.word	0x20003df0
 800f2d4:	20003e58 	.word	0x20003e58

0800f2d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	; 0x28
 800f2dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2e2:	f000 fb0d 	bl	800f900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2e6:	4b1d      	ldr	r3, [pc, #116]	; (800f35c <xTimerCreateTimerTask+0x84>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d021      	beq.n	800f332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f2f6:	1d3a      	adds	r2, r7, #4
 800f2f8:	f107 0108 	add.w	r1, r7, #8
 800f2fc:	f107 030c 	add.w	r3, r7, #12
 800f300:	4618      	mov	r0, r3
 800f302:	f7fe fa07 	bl	800d714 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f306:	6879      	ldr	r1, [r7, #4]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	9202      	str	r2, [sp, #8]
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	2302      	movs	r3, #2
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	2300      	movs	r3, #0
 800f316:	460a      	mov	r2, r1
 800f318:	4911      	ldr	r1, [pc, #68]	; (800f360 <xTimerCreateTimerTask+0x88>)
 800f31a:	4812      	ldr	r0, [pc, #72]	; (800f364 <xTimerCreateTimerTask+0x8c>)
 800f31c:	f7fe ffbe 	bl	800e29c <xTaskCreateStatic>
 800f320:	4602      	mov	r2, r0
 800f322:	4b11      	ldr	r3, [pc, #68]	; (800f368 <xTimerCreateTimerTask+0x90>)
 800f324:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f326:	4b10      	ldr	r3, [pc, #64]	; (800f368 <xTimerCreateTimerTask+0x90>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f32e:	2301      	movs	r3, #1
 800f330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10b      	bne.n	800f350 <xTimerCreateTimerTask+0x78>
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	b672      	cpsid	i
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	b662      	cpsie	i
 800f34c:	613b      	str	r3, [r7, #16]
 800f34e:	e7fe      	b.n	800f34e <xTimerCreateTimerTask+0x76>
	return xReturn;
 800f350:	697b      	ldr	r3, [r7, #20]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3718      	adds	r7, #24
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	20003e94 	.word	0x20003e94
 800f360:	08014784 	.word	0x08014784
 800f364:	0800f4a5 	.word	0x0800f4a5
 800f368:	20003e98 	.word	0x20003e98

0800f36c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b08a      	sub	sp, #40	; 0x28
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
 800f378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f37a:	2300      	movs	r3, #0
 800f37c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d10b      	bne.n	800f39c <xTimerGenericCommand+0x30>
 800f384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f388:	b672      	cpsid	i
 800f38a:	f383 8811 	msr	BASEPRI, r3
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	f3bf 8f4f 	dsb	sy
 800f396:	b662      	cpsie	i
 800f398:	623b      	str	r3, [r7, #32]
 800f39a:	e7fe      	b.n	800f39a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f39c:	4b19      	ldr	r3, [pc, #100]	; (800f404 <xTimerGenericCommand+0x98>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d02a      	beq.n	800f3fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2b05      	cmp	r3, #5
 800f3b4:	dc18      	bgt.n	800f3e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f3b6:	f7ff fd99 	bl	800eeec <xTaskGetSchedulerState>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	d109      	bne.n	800f3d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f3c0:	4b10      	ldr	r3, [pc, #64]	; (800f404 <xTimerGenericCommand+0x98>)
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	f107 0110 	add.w	r1, r7, #16
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3cc:	f7fe fb7a 	bl	800dac4 <xQueueGenericSend>
 800f3d0:	6278      	str	r0, [r7, #36]	; 0x24
 800f3d2:	e012      	b.n	800f3fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f3d4:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <xTimerGenericCommand+0x98>)
 800f3d6:	6818      	ldr	r0, [r3, #0]
 800f3d8:	f107 0110 	add.w	r1, r7, #16
 800f3dc:	2300      	movs	r3, #0
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f7fe fb70 	bl	800dac4 <xQueueGenericSend>
 800f3e4:	6278      	str	r0, [r7, #36]	; 0x24
 800f3e6:	e008      	b.n	800f3fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3e8:	4b06      	ldr	r3, [pc, #24]	; (800f404 <xTimerGenericCommand+0x98>)
 800f3ea:	6818      	ldr	r0, [r3, #0]
 800f3ec:	f107 0110 	add.w	r1, r7, #16
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	f7fe fc68 	bl	800dcc8 <xQueueGenericSendFromISR>
 800f3f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3728      	adds	r7, #40	; 0x28
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	20003e94 	.word	0x20003e94

0800f408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af02      	add	r7, sp, #8
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f412:	4b23      	ldr	r3, [pc, #140]	; (800f4a0 <prvProcessExpiredTimer+0x98>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	3304      	adds	r3, #4
 800f420:	4618      	mov	r0, r3
 800f422:	f7fe fa1b 	bl	800d85c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f42c:	f003 0304 	and.w	r3, r3, #4
 800f430:	2b00      	cmp	r3, #0
 800f432:	d023      	beq.n	800f47c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	699a      	ldr	r2, [r3, #24]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	18d1      	adds	r1, r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	6978      	ldr	r0, [r7, #20]
 800f442:	f000 f8d3 	bl	800f5ec <prvInsertTimerInActiveList>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d020      	beq.n	800f48e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f44c:	2300      	movs	r3, #0
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	2300      	movs	r3, #0
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	2100      	movs	r1, #0
 800f456:	6978      	ldr	r0, [r7, #20]
 800f458:	f7ff ff88 	bl	800f36c <xTimerGenericCommand>
 800f45c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d114      	bne.n	800f48e <prvProcessExpiredTimer+0x86>
 800f464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f468:	b672      	cpsid	i
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	b662      	cpsie	i
 800f478:	60fb      	str	r3, [r7, #12]
 800f47a:	e7fe      	b.n	800f47a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f482:	f023 0301 	bic.w	r3, r3, #1
 800f486:	b2da      	uxtb	r2, r3
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	6978      	ldr	r0, [r7, #20]
 800f494:	4798      	blx	r3
}
 800f496:	bf00      	nop
 800f498:	3718      	adds	r7, #24
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	20003e8c 	.word	0x20003e8c

0800f4a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4ac:	f107 0308 	add.w	r3, r7, #8
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f000 f857 	bl	800f564 <prvGetNextExpireTime>
 800f4b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	68f8      	ldr	r0, [r7, #12]
 800f4be:	f000 f803 	bl	800f4c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f4c2:	f000 f8d5 	bl	800f670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4c6:	e7f1      	b.n	800f4ac <prvTimerTask+0x8>

0800f4c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f4d2:	f7ff f927 	bl	800e724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4d6:	f107 0308 	add.w	r3, r7, #8
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 f866 	bl	800f5ac <prvSampleTimeNow>
 800f4e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d130      	bne.n	800f54a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10a      	bne.n	800f504 <prvProcessTimerOrBlockTask+0x3c>
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d806      	bhi.n	800f504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f4f6:	f7ff f923 	bl	800e740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f4fa:	68f9      	ldr	r1, [r7, #12]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7ff ff83 	bl	800f408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f502:	e024      	b.n	800f54e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d008      	beq.n	800f51c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f50a:	4b13      	ldr	r3, [pc, #76]	; (800f558 <prvProcessTimerOrBlockTask+0x90>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <prvProcessTimerOrBlockTask+0x50>
 800f514:	2301      	movs	r3, #1
 800f516:	e000      	b.n	800f51a <prvProcessTimerOrBlockTask+0x52>
 800f518:	2300      	movs	r3, #0
 800f51a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f51c:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <prvProcessTimerOrBlockTask+0x94>)
 800f51e:	6818      	ldr	r0, [r3, #0]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	1ad3      	subs	r3, r2, r3
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	4619      	mov	r1, r3
 800f52a:	f7fe fe83 	bl	800e234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f52e:	f7ff f907 	bl	800e740 <xTaskResumeAll>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10a      	bne.n	800f54e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f538:	4b09      	ldr	r3, [pc, #36]	; (800f560 <prvProcessTimerOrBlockTask+0x98>)
 800f53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f53e:	601a      	str	r2, [r3, #0]
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	f3bf 8f6f 	isb	sy
}
 800f548:	e001      	b.n	800f54e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f54a:	f7ff f8f9 	bl	800e740 <xTaskResumeAll>
}
 800f54e:	bf00      	nop
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	20003e90 	.word	0x20003e90
 800f55c:	20003e94 	.word	0x20003e94
 800f560:	e000ed04 	.word	0xe000ed04

0800f564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f56c:	4b0e      	ldr	r3, [pc, #56]	; (800f5a8 <prvGetNextExpireTime+0x44>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d101      	bne.n	800f57a <prvGetNextExpireTime+0x16>
 800f576:	2201      	movs	r2, #1
 800f578:	e000      	b.n	800f57c <prvGetNextExpireTime+0x18>
 800f57a:	2200      	movs	r2, #0
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d105      	bne.n	800f594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f588:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <prvGetNextExpireTime+0x44>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	60fb      	str	r3, [r7, #12]
 800f592:	e001      	b.n	800f598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f594:	2300      	movs	r3, #0
 800f596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f598:	68fb      	ldr	r3, [r7, #12]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3714      	adds	r7, #20
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	20003e8c 	.word	0x20003e8c

0800f5ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f5b4:	f7ff f962 	bl	800e87c <xTaskGetTickCount>
 800f5b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f5ba:	4b0b      	ldr	r3, [pc, #44]	; (800f5e8 <prvSampleTimeNow+0x3c>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d205      	bcs.n	800f5d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f5c4:	f000 f936 	bl	800f834 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	601a      	str	r2, [r3, #0]
 800f5ce:	e002      	b.n	800f5d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f5d6:	4a04      	ldr	r2, [pc, #16]	; (800f5e8 <prvSampleTimeNow+0x3c>)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20003e9c 	.word	0x20003e9c

0800f5ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b086      	sub	sp, #24
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]
 800f5f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d812      	bhi.n	800f638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	1ad2      	subs	r2, r2, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	699b      	ldr	r3, [r3, #24]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d302      	bcc.n	800f626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f620:	2301      	movs	r3, #1
 800f622:	617b      	str	r3, [r7, #20]
 800f624:	e01b      	b.n	800f65e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f626:	4b10      	ldr	r3, [pc, #64]	; (800f668 <prvInsertTimerInActiveList+0x7c>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3304      	adds	r3, #4
 800f62e:	4619      	mov	r1, r3
 800f630:	4610      	mov	r0, r2
 800f632:	f7fe f8da 	bl	800d7ea <vListInsert>
 800f636:	e012      	b.n	800f65e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d206      	bcs.n	800f64e <prvInsertTimerInActiveList+0x62>
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	429a      	cmp	r2, r3
 800f646:	d302      	bcc.n	800f64e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f648:	2301      	movs	r3, #1
 800f64a:	617b      	str	r3, [r7, #20]
 800f64c:	e007      	b.n	800f65e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f64e:	4b07      	ldr	r3, [pc, #28]	; (800f66c <prvInsertTimerInActiveList+0x80>)
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3304      	adds	r3, #4
 800f656:	4619      	mov	r1, r3
 800f658:	4610      	mov	r0, r2
 800f65a:	f7fe f8c6 	bl	800d7ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f65e:	697b      	ldr	r3, [r7, #20]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3718      	adds	r7, #24
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	20003e90 	.word	0x20003e90
 800f66c:	20003e8c 	.word	0x20003e8c

0800f670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b08e      	sub	sp, #56	; 0x38
 800f674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f676:	e0cc      	b.n	800f812 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	da19      	bge.n	800f6b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f67e:	1d3b      	adds	r3, r7, #4
 800f680:	3304      	adds	r3, #4
 800f682:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f686:	2b00      	cmp	r3, #0
 800f688:	d10b      	bne.n	800f6a2 <prvProcessReceivedCommands+0x32>
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	b672      	cpsid	i
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	b662      	cpsie	i
 800f69e:	61fb      	str	r3, [r7, #28]
 800f6a0:	e7fe      	b.n	800f6a0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a8:	6850      	ldr	r0, [r2, #4]
 800f6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ac:	6892      	ldr	r2, [r2, #8]
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f2c0 80ab 	blt.w	800f810 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c0:	695b      	ldr	r3, [r3, #20]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d004      	beq.n	800f6d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fe f8c6 	bl	800d85c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6d0:	463b      	mov	r3, r7
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff ff6a 	bl	800f5ac <prvSampleTimeNow>
 800f6d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b09      	cmp	r3, #9
 800f6de:	f200 8098 	bhi.w	800f812 <prvProcessReceivedCommands+0x1a2>
 800f6e2:	a201      	add	r2, pc, #4	; (adr r2, 800f6e8 <prvProcessReceivedCommands+0x78>)
 800f6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e8:	0800f711 	.word	0x0800f711
 800f6ec:	0800f711 	.word	0x0800f711
 800f6f0:	0800f711 	.word	0x0800f711
 800f6f4:	0800f787 	.word	0x0800f787
 800f6f8:	0800f79b 	.word	0x0800f79b
 800f6fc:	0800f7e7 	.word	0x0800f7e7
 800f700:	0800f711 	.word	0x0800f711
 800f704:	0800f711 	.word	0x0800f711
 800f708:	0800f787 	.word	0x0800f787
 800f70c:	0800f79b 	.word	0x0800f79b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f716:	f043 0301 	orr.w	r3, r3, #1
 800f71a:	b2da      	uxtb	r2, r3
 800f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	18d1      	adds	r1, r2, r3
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f730:	f7ff ff5c 	bl	800f5ec <prvInsertTimerInActiveList>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d06b      	beq.n	800f812 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	6a1b      	ldr	r3, [r3, #32]
 800f73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f748:	f003 0304 	and.w	r3, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d060      	beq.n	800f812 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f750:	68ba      	ldr	r2, [r7, #8]
 800f752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f754:	699b      	ldr	r3, [r3, #24]
 800f756:	441a      	add	r2, r3
 800f758:	2300      	movs	r3, #0
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	2300      	movs	r3, #0
 800f75e:	2100      	movs	r1, #0
 800f760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f762:	f7ff fe03 	bl	800f36c <xTimerGenericCommand>
 800f766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f768:	6a3b      	ldr	r3, [r7, #32]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d151      	bne.n	800f812 <prvProcessReceivedCommands+0x1a2>
 800f76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f772:	b672      	cpsid	i
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	b662      	cpsie	i
 800f782:	61bb      	str	r3, [r7, #24]
 800f784:	e7fe      	b.n	800f784 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f78c:	f023 0301 	bic.w	r3, r3, #1
 800f790:	b2da      	uxtb	r2, r3
 800f792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f798:	e03b      	b.n	800f812 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7a0:	f043 0301 	orr.w	r3, r3, #1
 800f7a4:	b2da      	uxtb	r2, r3
 800f7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	699b      	ldr	r3, [r3, #24]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10b      	bne.n	800f7d2 <prvProcessReceivedCommands+0x162>
 800f7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7be:	b672      	cpsid	i
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	b662      	cpsie	i
 800f7ce:	617b      	str	r3, [r7, #20]
 800f7d0:	e7fe      	b.n	800f7d0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d4:	699a      	ldr	r2, [r3, #24]
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d8:	18d1      	adds	r1, r2, r3
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7e0:	f7ff ff04 	bl	800f5ec <prvInsertTimerInActiveList>
					break;
 800f7e4:	e015      	b.n	800f812 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7ec:	f003 0302 	and.w	r3, r3, #2
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d103      	bne.n	800f7fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f7f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f6:	f000 fbb9 	bl	800ff6c <vPortFree>
 800f7fa:	e00a      	b.n	800f812 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f802:	f023 0301 	bic.w	r3, r3, #1
 800f806:	b2da      	uxtb	r2, r3
 800f808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f80e:	e000      	b.n	800f812 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f810:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f812:	4b07      	ldr	r3, [pc, #28]	; (800f830 <prvProcessReceivedCommands+0x1c0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	1d39      	adds	r1, r7, #4
 800f818:	2200      	movs	r2, #0
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fe faf0 	bl	800de00 <xQueueReceive>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	f47f af28 	bne.w	800f678 <prvProcessReceivedCommands+0x8>
	}
}
 800f828:	bf00      	nop
 800f82a:	3730      	adds	r7, #48	; 0x30
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	20003e94 	.word	0x20003e94

0800f834 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b088      	sub	sp, #32
 800f838:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f83a:	e049      	b.n	800f8d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f83c:	4b2e      	ldr	r3, [pc, #184]	; (800f8f8 <prvSwitchTimerLists+0xc4>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f846:	4b2c      	ldr	r3, [pc, #176]	; (800f8f8 <prvSwitchTimerLists+0xc4>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	3304      	adds	r3, #4
 800f854:	4618      	mov	r0, r3
 800f856:	f7fe f801 	bl	800d85c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6a1b      	ldr	r3, [r3, #32]
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f868:	f003 0304 	and.w	r3, r3, #4
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d02f      	beq.n	800f8d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	699b      	ldr	r3, [r3, #24]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	4413      	add	r3, r2
 800f878:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d90e      	bls.n	800f8a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f88e:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <prvSwitchTimerLists+0xc4>)
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3304      	adds	r3, #4
 800f896:	4619      	mov	r1, r3
 800f898:	4610      	mov	r0, r2
 800f89a:	f7fd ffa6 	bl	800d7ea <vListInsert>
 800f89e:	e017      	b.n	800f8d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	693a      	ldr	r2, [r7, #16]
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff fd5e 	bl	800f36c <xTimerGenericCommand>
 800f8b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d10b      	bne.n	800f8d0 <prvSwitchTimerLists+0x9c>
 800f8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8bc:	b672      	cpsid	i
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	b662      	cpsie	i
 800f8cc:	603b      	str	r3, [r7, #0]
 800f8ce:	e7fe      	b.n	800f8ce <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8d0:	4b09      	ldr	r3, [pc, #36]	; (800f8f8 <prvSwitchTimerLists+0xc4>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1b0      	bne.n	800f83c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8da:	4b07      	ldr	r3, [pc, #28]	; (800f8f8 <prvSwitchTimerLists+0xc4>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8e0:	4b06      	ldr	r3, [pc, #24]	; (800f8fc <prvSwitchTimerLists+0xc8>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a04      	ldr	r2, [pc, #16]	; (800f8f8 <prvSwitchTimerLists+0xc4>)
 800f8e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8e8:	4a04      	ldr	r2, [pc, #16]	; (800f8fc <prvSwitchTimerLists+0xc8>)
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	6013      	str	r3, [r2, #0]
}
 800f8ee:	bf00      	nop
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	20003e8c 	.word	0x20003e8c
 800f8fc:	20003e90 	.word	0x20003e90

0800f900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f906:	f000 f947 	bl	800fb98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f90a:	4b15      	ldr	r3, [pc, #84]	; (800f960 <prvCheckForValidListAndQueue+0x60>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d120      	bne.n	800f954 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f912:	4814      	ldr	r0, [pc, #80]	; (800f964 <prvCheckForValidListAndQueue+0x64>)
 800f914:	f7fd ff18 	bl	800d748 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f918:	4813      	ldr	r0, [pc, #76]	; (800f968 <prvCheckForValidListAndQueue+0x68>)
 800f91a:	f7fd ff15 	bl	800d748 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f91e:	4b13      	ldr	r3, [pc, #76]	; (800f96c <prvCheckForValidListAndQueue+0x6c>)
 800f920:	4a10      	ldr	r2, [pc, #64]	; (800f964 <prvCheckForValidListAndQueue+0x64>)
 800f922:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f924:	4b12      	ldr	r3, [pc, #72]	; (800f970 <prvCheckForValidListAndQueue+0x70>)
 800f926:	4a10      	ldr	r2, [pc, #64]	; (800f968 <prvCheckForValidListAndQueue+0x68>)
 800f928:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f92a:	2300      	movs	r3, #0
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	4b11      	ldr	r3, [pc, #68]	; (800f974 <prvCheckForValidListAndQueue+0x74>)
 800f930:	4a11      	ldr	r2, [pc, #68]	; (800f978 <prvCheckForValidListAndQueue+0x78>)
 800f932:	2110      	movs	r1, #16
 800f934:	200a      	movs	r0, #10
 800f936:	f7fe f825 	bl	800d984 <xQueueGenericCreateStatic>
 800f93a:	4602      	mov	r2, r0
 800f93c:	4b08      	ldr	r3, [pc, #32]	; (800f960 <prvCheckForValidListAndQueue+0x60>)
 800f93e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f940:	4b07      	ldr	r3, [pc, #28]	; (800f960 <prvCheckForValidListAndQueue+0x60>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d005      	beq.n	800f954 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f948:	4b05      	ldr	r3, [pc, #20]	; (800f960 <prvCheckForValidListAndQueue+0x60>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	490b      	ldr	r1, [pc, #44]	; (800f97c <prvCheckForValidListAndQueue+0x7c>)
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fc48 	bl	800e1e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f954:	f000 f952 	bl	800fbfc <vPortExitCritical>
}
 800f958:	bf00      	nop
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20003e94 	.word	0x20003e94
 800f964:	20003e64 	.word	0x20003e64
 800f968:	20003e78 	.word	0x20003e78
 800f96c:	20003e8c 	.word	0x20003e8c
 800f970:	20003e90 	.word	0x20003e90
 800f974:	20003f40 	.word	0x20003f40
 800f978:	20003ea0 	.word	0x20003ea0
 800f97c:	0801478c 	.word	0x0801478c

0800f980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f980:	b480      	push	{r7}
 800f982:	b085      	sub	sp, #20
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	3b04      	subs	r3, #4
 800f990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3b04      	subs	r3, #4
 800f99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	f023 0201 	bic.w	r2, r3, #1
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3b04      	subs	r3, #4
 800f9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f9b0:	4a0c      	ldr	r2, [pc, #48]	; (800f9e4 <pxPortInitialiseStack+0x64>)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3b14      	subs	r3, #20
 800f9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	3b04      	subs	r3, #4
 800f9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f06f 0202 	mvn.w	r2, #2
 800f9ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3b20      	subs	r3, #32
 800f9d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3714      	adds	r7, #20
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	0800f9e9 	.word	0x0800f9e9

0800f9e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9f2:	4b13      	ldr	r3, [pc, #76]	; (800fa40 <prvTaskExitError+0x58>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fa:	d00b      	beq.n	800fa14 <prvTaskExitError+0x2c>
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	b672      	cpsid	i
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	b662      	cpsie	i
 800fa10:	60fb      	str	r3, [r7, #12]
 800fa12:	e7fe      	b.n	800fa12 <prvTaskExitError+0x2a>
 800fa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa18:	b672      	cpsid	i
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	b662      	cpsie	i
 800fa28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa2a:	bf00      	nop
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d0fc      	beq.n	800fa2c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa32:	bf00      	nop
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	20000164 	.word	0x20000164
	...

0800fa50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa50:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <pxCurrentTCBConst2>)
 800fa52:	6819      	ldr	r1, [r3, #0]
 800fa54:	6808      	ldr	r0, [r1, #0]
 800fa56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5a:	f380 8809 	msr	PSP, r0
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f04f 0000 	mov.w	r0, #0
 800fa66:	f380 8811 	msr	BASEPRI, r0
 800fa6a:	4770      	bx	lr
 800fa6c:	f3af 8000 	nop.w

0800fa70 <pxCurrentTCBConst2>:
 800fa70:	20003964 	.word	0x20003964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop

0800fa78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa78:	4808      	ldr	r0, [pc, #32]	; (800fa9c <prvPortStartFirstTask+0x24>)
 800fa7a:	6800      	ldr	r0, [r0, #0]
 800fa7c:	6800      	ldr	r0, [r0, #0]
 800fa7e:	f380 8808 	msr	MSP, r0
 800fa82:	f04f 0000 	mov.w	r0, #0
 800fa86:	f380 8814 	msr	CONTROL, r0
 800fa8a:	b662      	cpsie	i
 800fa8c:	b661      	cpsie	f
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	df00      	svc	0
 800fa98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa9a:	bf00      	nop
 800fa9c:	e000ed08 	.word	0xe000ed08

0800faa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800faa6:	4b36      	ldr	r3, [pc, #216]	; (800fb80 <xPortStartScheduler+0xe0>)
 800faa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	22ff      	movs	r2, #255	; 0xff
 800fab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fac0:	78fb      	ldrb	r3, [r7, #3]
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fac8:	b2da      	uxtb	r2, r3
 800faca:	4b2e      	ldr	r3, [pc, #184]	; (800fb84 <xPortStartScheduler+0xe4>)
 800facc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800face:	4b2e      	ldr	r3, [pc, #184]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fad0:	2207      	movs	r2, #7
 800fad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fad4:	e009      	b.n	800faea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fad6:	4b2c      	ldr	r3, [pc, #176]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3b01      	subs	r3, #1
 800fadc:	4a2a      	ldr	r2, [pc, #168]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fae0:	78fb      	ldrb	r3, [r7, #3]
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	005b      	lsls	r3, r3, #1
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800faea:	78fb      	ldrb	r3, [r7, #3]
 800faec:	b2db      	uxtb	r3, r3
 800faee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faf2:	2b80      	cmp	r3, #128	; 0x80
 800faf4:	d0ef      	beq.n	800fad6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800faf6:	4b24      	ldr	r3, [pc, #144]	; (800fb88 <xPortStartScheduler+0xe8>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f1c3 0307 	rsb	r3, r3, #7
 800fafe:	2b04      	cmp	r3, #4
 800fb00:	d00b      	beq.n	800fb1a <xPortStartScheduler+0x7a>
 800fb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb06:	b672      	cpsid	i
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	b662      	cpsie	i
 800fb16:	60bb      	str	r3, [r7, #8]
 800fb18:	e7fe      	b.n	800fb18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb1a:	4b1b      	ldr	r3, [pc, #108]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	021b      	lsls	r3, r3, #8
 800fb20:	4a19      	ldr	r2, [pc, #100]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fb22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb24:	4b18      	ldr	r3, [pc, #96]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb2c:	4a16      	ldr	r2, [pc, #88]	; (800fb88 <xPortStartScheduler+0xe8>)
 800fb2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	b2da      	uxtb	r2, r3
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb38:	4b14      	ldr	r3, [pc, #80]	; (800fb8c <xPortStartScheduler+0xec>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a13      	ldr	r2, [pc, #76]	; (800fb8c <xPortStartScheduler+0xec>)
 800fb3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb44:	4b11      	ldr	r3, [pc, #68]	; (800fb8c <xPortStartScheduler+0xec>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a10      	ldr	r2, [pc, #64]	; (800fb8c <xPortStartScheduler+0xec>)
 800fb4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fb4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb50:	f000 f8d4 	bl	800fcfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb54:	4b0e      	ldr	r3, [pc, #56]	; (800fb90 <xPortStartScheduler+0xf0>)
 800fb56:	2200      	movs	r2, #0
 800fb58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb5a:	f000 f8f3 	bl	800fd44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <xPortStartScheduler+0xf4>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a0c      	ldr	r2, [pc, #48]	; (800fb94 <xPortStartScheduler+0xf4>)
 800fb64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb6a:	f7ff ff85 	bl	800fa78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb6e:	f7fe ff4f 	bl	800ea10 <vTaskSwitchContext>
	prvTaskExitError();
 800fb72:	f7ff ff39 	bl	800f9e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3710      	adds	r7, #16
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	e000e400 	.word	0xe000e400
 800fb84:	20003f90 	.word	0x20003f90
 800fb88:	20003f94 	.word	0x20003f94
 800fb8c:	e000ed20 	.word	0xe000ed20
 800fb90:	20000164 	.word	0x20000164
 800fb94:	e000ef34 	.word	0xe000ef34

0800fb98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba2:	b672      	cpsid	i
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	b662      	cpsie	i
 800fbb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbb4:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <vPortEnterCritical+0x5c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	4a0e      	ldr	r2, [pc, #56]	; (800fbf4 <vPortEnterCritical+0x5c>)
 800fbbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbbe:	4b0d      	ldr	r3, [pc, #52]	; (800fbf4 <vPortEnterCritical+0x5c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d110      	bne.n	800fbe8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbc6:	4b0c      	ldr	r3, [pc, #48]	; (800fbf8 <vPortEnterCritical+0x60>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00b      	beq.n	800fbe8 <vPortEnterCritical+0x50>
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	b672      	cpsid	i
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	b662      	cpsie	i
 800fbe4:	603b      	str	r3, [r7, #0]
 800fbe6:	e7fe      	b.n	800fbe6 <vPortEnterCritical+0x4e>
	}
}
 800fbe8:	bf00      	nop
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	20000164 	.word	0x20000164
 800fbf8:	e000ed04 	.word	0xe000ed04

0800fbfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc02:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <vPortExitCritical+0x50>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d10b      	bne.n	800fc22 <vPortExitCritical+0x26>
 800fc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0e:	b672      	cpsid	i
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	b662      	cpsie	i
 800fc1e:	607b      	str	r3, [r7, #4]
 800fc20:	e7fe      	b.n	800fc20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800fc22:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <vPortExitCritical+0x50>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	3b01      	subs	r3, #1
 800fc28:	4a08      	ldr	r2, [pc, #32]	; (800fc4c <vPortExitCritical+0x50>)
 800fc2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc2c:	4b07      	ldr	r3, [pc, #28]	; (800fc4c <vPortExitCritical+0x50>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d104      	bne.n	800fc3e <vPortExitCritical+0x42>
 800fc34:	2300      	movs	r3, #0
 800fc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc3e:	bf00      	nop
 800fc40:	370c      	adds	r7, #12
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	20000164 	.word	0x20000164

0800fc50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc50:	f3ef 8009 	mrs	r0, PSP
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	4b15      	ldr	r3, [pc, #84]	; (800fcb0 <pxCurrentTCBConst>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	f01e 0f10 	tst.w	lr, #16
 800fc60:	bf08      	it	eq
 800fc62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6a:	6010      	str	r0, [r2, #0]
 800fc6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc74:	b672      	cpsid	i
 800fc76:	f380 8811 	msr	BASEPRI, r0
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	f3bf 8f6f 	isb	sy
 800fc82:	b662      	cpsie	i
 800fc84:	f7fe fec4 	bl	800ea10 <vTaskSwitchContext>
 800fc88:	f04f 0000 	mov.w	r0, #0
 800fc8c:	f380 8811 	msr	BASEPRI, r0
 800fc90:	bc09      	pop	{r0, r3}
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	6808      	ldr	r0, [r1, #0]
 800fc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9a:	f01e 0f10 	tst.w	lr, #16
 800fc9e:	bf08      	it	eq
 800fca0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fca4:	f380 8809 	msr	PSP, r0
 800fca8:	f3bf 8f6f 	isb	sy
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop

0800fcb0 <pxCurrentTCBConst>:
 800fcb0:	20003964 	.word	0x20003964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop

0800fcb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc2:	b672      	cpsid	i
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	b662      	cpsie	i
 800fcd2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fcd4:	f7fe fde2 	bl	800e89c <xTaskIncrementTick>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcde:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <SysTick_Handler+0x40>)
 800fce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	2300      	movs	r3, #0
 800fce8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fcf0:	bf00      	nop
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	e000ed04 	.word	0xe000ed04

0800fcfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd00:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <vPortSetupTimerInterrupt+0x34>)
 800fd02:	2200      	movs	r2, #0
 800fd04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd06:	4b0b      	ldr	r3, [pc, #44]	; (800fd34 <vPortSetupTimerInterrupt+0x38>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <vPortSetupTimerInterrupt+0x3c>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a0a      	ldr	r2, [pc, #40]	; (800fd3c <vPortSetupTimerInterrupt+0x40>)
 800fd12:	fba2 2303 	umull	r2, r3, r2, r3
 800fd16:	099b      	lsrs	r3, r3, #6
 800fd18:	4a09      	ldr	r2, [pc, #36]	; (800fd40 <vPortSetupTimerInterrupt+0x44>)
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd1e:	4b04      	ldr	r3, [pc, #16]	; (800fd30 <vPortSetupTimerInterrupt+0x34>)
 800fd20:	2207      	movs	r2, #7
 800fd22:	601a      	str	r2, [r3, #0]
}
 800fd24:	bf00      	nop
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	e000e010 	.word	0xe000e010
 800fd34:	e000e018 	.word	0xe000e018
 800fd38:	20000158 	.word	0x20000158
 800fd3c:	10624dd3 	.word	0x10624dd3
 800fd40:	e000e014 	.word	0xe000e014

0800fd44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd54 <vPortEnableVFP+0x10>
 800fd48:	6801      	ldr	r1, [r0, #0]
 800fd4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd4e:	6001      	str	r1, [r0, #0]
 800fd50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd52:	bf00      	nop
 800fd54:	e000ed88 	.word	0xe000ed88

0800fd58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd5e:	f3ef 8305 	mrs	r3, IPSR
 800fd62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b0f      	cmp	r3, #15
 800fd68:	d915      	bls.n	800fd96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd6a:	4a18      	ldr	r2, [pc, #96]	; (800fdcc <vPortValidateInterruptPriority+0x74>)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	4413      	add	r3, r2
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd74:	4b16      	ldr	r3, [pc, #88]	; (800fdd0 <vPortValidateInterruptPriority+0x78>)
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	7afa      	ldrb	r2, [r7, #11]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d20b      	bcs.n	800fd96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	b672      	cpsid	i
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	b662      	cpsie	i
 800fd92:	607b      	str	r3, [r7, #4]
 800fd94:	e7fe      	b.n	800fd94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd96:	4b0f      	ldr	r3, [pc, #60]	; (800fdd4 <vPortValidateInterruptPriority+0x7c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fd9e:	4b0e      	ldr	r3, [pc, #56]	; (800fdd8 <vPortValidateInterruptPriority+0x80>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d90b      	bls.n	800fdbe <vPortValidateInterruptPriority+0x66>
 800fda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdaa:	b672      	cpsid	i
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	b662      	cpsie	i
 800fdba:	603b      	str	r3, [r7, #0]
 800fdbc:	e7fe      	b.n	800fdbc <vPortValidateInterruptPriority+0x64>
	}
 800fdbe:	bf00      	nop
 800fdc0:	3714      	adds	r7, #20
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	e000e3f0 	.word	0xe000e3f0
 800fdd0:	20003f90 	.word	0x20003f90
 800fdd4:	e000ed0c 	.word	0xe000ed0c
 800fdd8:	20003f94 	.word	0x20003f94

0800fddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08a      	sub	sp, #40	; 0x28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fde4:	2300      	movs	r3, #0
 800fde6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fde8:	f7fe fc9c 	bl	800e724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fdec:	4b5a      	ldr	r3, [pc, #360]	; (800ff58 <pvPortMalloc+0x17c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d101      	bne.n	800fdf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fdf4:	f000 f916 	bl	8010024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fdf8:	4b58      	ldr	r3, [pc, #352]	; (800ff5c <pvPortMalloc+0x180>)
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4013      	ands	r3, r2
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f040 8090 	bne.w	800ff26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d01e      	beq.n	800fe4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fe0c:	2208      	movs	r2, #8
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4413      	add	r3, r2
 800fe12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f003 0307 	and.w	r3, r3, #7
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d015      	beq.n	800fe4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f023 0307 	bic.w	r3, r3, #7
 800fe24:	3308      	adds	r3, #8
 800fe26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f003 0307 	and.w	r3, r3, #7
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00b      	beq.n	800fe4a <pvPortMalloc+0x6e>
 800fe32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe36:	b672      	cpsid	i
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	b662      	cpsie	i
 800fe46:	617b      	str	r3, [r7, #20]
 800fe48:	e7fe      	b.n	800fe48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d06a      	beq.n	800ff26 <pvPortMalloc+0x14a>
 800fe50:	4b43      	ldr	r3, [pc, #268]	; (800ff60 <pvPortMalloc+0x184>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d865      	bhi.n	800ff26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe5a:	4b42      	ldr	r3, [pc, #264]	; (800ff64 <pvPortMalloc+0x188>)
 800fe5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe5e:	4b41      	ldr	r3, [pc, #260]	; (800ff64 <pvPortMalloc+0x188>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe64:	e004      	b.n	800fe70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d903      	bls.n	800fe82 <pvPortMalloc+0xa6>
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1f1      	bne.n	800fe66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe82:	4b35      	ldr	r3, [pc, #212]	; (800ff58 <pvPortMalloc+0x17c>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d04c      	beq.n	800ff26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2208      	movs	r2, #8
 800fe92:	4413      	add	r3, r2
 800fe94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	6a3b      	ldr	r3, [r7, #32]
 800fe9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	685a      	ldr	r2, [r3, #4]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	1ad2      	subs	r2, r2, r3
 800fea6:	2308      	movs	r3, #8
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	429a      	cmp	r2, r3
 800feac:	d920      	bls.n	800fef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800feae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4413      	add	r3, r2
 800feb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	f003 0307 	and.w	r3, r3, #7
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00b      	beq.n	800fed8 <pvPortMalloc+0xfc>
 800fec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec4:	b672      	cpsid	i
 800fec6:	f383 8811 	msr	BASEPRI, r3
 800feca:	f3bf 8f6f 	isb	sy
 800fece:	f3bf 8f4f 	dsb	sy
 800fed2:	b662      	cpsie	i
 800fed4:	613b      	str	r3, [r7, #16]
 800fed6:	e7fe      	b.n	800fed6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	685a      	ldr	r2, [r3, #4]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	1ad2      	subs	r2, r2, r3
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800feea:	69b8      	ldr	r0, [r7, #24]
 800feec:	f000 f8fc 	bl	80100e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fef0:	4b1b      	ldr	r3, [pc, #108]	; (800ff60 <pvPortMalloc+0x184>)
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	4a19      	ldr	r2, [pc, #100]	; (800ff60 <pvPortMalloc+0x184>)
 800fefc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fefe:	4b18      	ldr	r3, [pc, #96]	; (800ff60 <pvPortMalloc+0x184>)
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	4b19      	ldr	r3, [pc, #100]	; (800ff68 <pvPortMalloc+0x18c>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d203      	bcs.n	800ff12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff0a:	4b15      	ldr	r3, [pc, #84]	; (800ff60 <pvPortMalloc+0x184>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4a16      	ldr	r2, [pc, #88]	; (800ff68 <pvPortMalloc+0x18c>)
 800ff10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	685a      	ldr	r2, [r3, #4]
 800ff16:	4b11      	ldr	r3, [pc, #68]	; (800ff5c <pvPortMalloc+0x180>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff22:	2200      	movs	r2, #0
 800ff24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff26:	f7fe fc0b 	bl	800e740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	f003 0307 	and.w	r3, r3, #7
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00b      	beq.n	800ff4c <pvPortMalloc+0x170>
 800ff34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff38:	b672      	cpsid	i
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	b662      	cpsie	i
 800ff48:	60fb      	str	r3, [r7, #12]
 800ff4a:	e7fe      	b.n	800ff4a <pvPortMalloc+0x16e>
	return pvReturn;
 800ff4c:	69fb      	ldr	r3, [r7, #28]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3728      	adds	r7, #40	; 0x28
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	200102f0 	.word	0x200102f0
 800ff5c:	200102fc 	.word	0x200102fc
 800ff60:	200102f4 	.word	0x200102f4
 800ff64:	200102e8 	.word	0x200102e8
 800ff68:	200102f8 	.word	0x200102f8

0800ff6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b086      	sub	sp, #24
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d04a      	beq.n	8010014 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff7e:	2308      	movs	r3, #8
 800ff80:	425b      	negs	r3, r3
 800ff82:	697a      	ldr	r2, [r7, #20]
 800ff84:	4413      	add	r3, r2
 800ff86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	4b22      	ldr	r3, [pc, #136]	; (801001c <vPortFree+0xb0>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4013      	ands	r3, r2
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10b      	bne.n	800ffb2 <vPortFree+0x46>
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	b672      	cpsid	i
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	b662      	cpsie	i
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	e7fe      	b.n	800ffb0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00b      	beq.n	800ffd2 <vPortFree+0x66>
 800ffba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbe:	b672      	cpsid	i
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	b662      	cpsie	i
 800ffce:	60bb      	str	r3, [r7, #8]
 800ffd0:	e7fe      	b.n	800ffd0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	685a      	ldr	r2, [r3, #4]
 800ffd6:	4b11      	ldr	r3, [pc, #68]	; (801001c <vPortFree+0xb0>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4013      	ands	r3, r2
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d019      	beq.n	8010014 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d115      	bne.n	8010014 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	4b0b      	ldr	r3, [pc, #44]	; (801001c <vPortFree+0xb0>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	43db      	mvns	r3, r3
 800fff2:	401a      	ands	r2, r3
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fff8:	f7fe fb94 	bl	800e724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	685a      	ldr	r2, [r3, #4]
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <vPortFree+0xb4>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4413      	add	r3, r2
 8010006:	4a06      	ldr	r2, [pc, #24]	; (8010020 <vPortFree+0xb4>)
 8010008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801000a:	6938      	ldr	r0, [r7, #16]
 801000c:	f000 f86c 	bl	80100e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010010:	f7fe fb96 	bl	800e740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010014:	bf00      	nop
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	200102fc 	.word	0x200102fc
 8010020:	200102f4 	.word	0x200102f4

08010024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801002a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801002e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010030:	4b27      	ldr	r3, [pc, #156]	; (80100d0 <prvHeapInit+0xac>)
 8010032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f003 0307 	and.w	r3, r3, #7
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00c      	beq.n	8010058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3307      	adds	r3, #7
 8010042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f023 0307 	bic.w	r3, r3, #7
 801004a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	4a1f      	ldr	r2, [pc, #124]	; (80100d0 <prvHeapInit+0xac>)
 8010054:	4413      	add	r3, r2
 8010056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801005c:	4a1d      	ldr	r2, [pc, #116]	; (80100d4 <prvHeapInit+0xb0>)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010062:	4b1c      	ldr	r3, [pc, #112]	; (80100d4 <prvHeapInit+0xb0>)
 8010064:	2200      	movs	r2, #0
 8010066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	68ba      	ldr	r2, [r7, #8]
 801006c:	4413      	add	r3, r2
 801006e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010070:	2208      	movs	r2, #8
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	1a9b      	subs	r3, r3, r2
 8010076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f023 0307 	bic.w	r3, r3, #7
 801007e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	4a15      	ldr	r2, [pc, #84]	; (80100d8 <prvHeapInit+0xb4>)
 8010084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010086:	4b14      	ldr	r3, [pc, #80]	; (80100d8 <prvHeapInit+0xb4>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2200      	movs	r2, #0
 801008c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801008e:	4b12      	ldr	r3, [pc, #72]	; (80100d8 <prvHeapInit+0xb4>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	68fa      	ldr	r2, [r7, #12]
 801009e:	1ad2      	subs	r2, r2, r3
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80100a4:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <prvHeapInit+0xb4>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	4a0a      	ldr	r2, [pc, #40]	; (80100dc <prvHeapInit+0xb8>)
 80100b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	4a09      	ldr	r2, [pc, #36]	; (80100e0 <prvHeapInit+0xbc>)
 80100ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80100bc:	4b09      	ldr	r3, [pc, #36]	; (80100e4 <prvHeapInit+0xc0>)
 80100be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80100c2:	601a      	str	r2, [r3, #0]
}
 80100c4:	bf00      	nop
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr
 80100d0:	20003f98 	.word	0x20003f98
 80100d4:	200102e8 	.word	0x200102e8
 80100d8:	200102f0 	.word	0x200102f0
 80100dc:	200102f8 	.word	0x200102f8
 80100e0:	200102f4 	.word	0x200102f4
 80100e4:	200102fc 	.word	0x200102fc

080100e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100f0:	4b28      	ldr	r3, [pc, #160]	; (8010194 <prvInsertBlockIntoFreeList+0xac>)
 80100f2:	60fb      	str	r3, [r7, #12]
 80100f4:	e002      	b.n	80100fc <prvInsertBlockIntoFreeList+0x14>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	60fb      	str	r3, [r7, #12]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	429a      	cmp	r2, r3
 8010104:	d8f7      	bhi.n	80100f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	4413      	add	r3, r2
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	429a      	cmp	r2, r3
 8010116:	d108      	bne.n	801012a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	441a      	add	r2, r3
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	441a      	add	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	429a      	cmp	r2, r3
 801013c:	d118      	bne.n	8010170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	4b15      	ldr	r3, [pc, #84]	; (8010198 <prvInsertBlockIntoFreeList+0xb0>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	429a      	cmp	r2, r3
 8010148:	d00d      	beq.n	8010166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	685a      	ldr	r2, [r3, #4]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	441a      	add	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	681a      	ldr	r2, [r3, #0]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	e008      	b.n	8010178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010166:	4b0c      	ldr	r3, [pc, #48]	; (8010198 <prvInsertBlockIntoFreeList+0xb0>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	e003      	b.n	8010178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	429a      	cmp	r2, r3
 801017e:	d002      	beq.n	8010186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010186:	bf00      	nop
 8010188:	3714      	adds	r7, #20
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	200102e8 	.word	0x200102e8
 8010198:	200102f0 	.word	0x200102f0

0801019c <__errno>:
 801019c:	4b01      	ldr	r3, [pc, #4]	; (80101a4 <__errno+0x8>)
 801019e:	6818      	ldr	r0, [r3, #0]
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	20000168 	.word	0x20000168

080101a8 <__libc_init_array>:
 80101a8:	b570      	push	{r4, r5, r6, lr}
 80101aa:	4e0d      	ldr	r6, [pc, #52]	; (80101e0 <__libc_init_array+0x38>)
 80101ac:	4c0d      	ldr	r4, [pc, #52]	; (80101e4 <__libc_init_array+0x3c>)
 80101ae:	1ba4      	subs	r4, r4, r6
 80101b0:	10a4      	asrs	r4, r4, #2
 80101b2:	2500      	movs	r5, #0
 80101b4:	42a5      	cmp	r5, r4
 80101b6:	d109      	bne.n	80101cc <__libc_init_array+0x24>
 80101b8:	4e0b      	ldr	r6, [pc, #44]	; (80101e8 <__libc_init_array+0x40>)
 80101ba:	4c0c      	ldr	r4, [pc, #48]	; (80101ec <__libc_init_array+0x44>)
 80101bc:	f004 f83e 	bl	801423c <_init>
 80101c0:	1ba4      	subs	r4, r4, r6
 80101c2:	10a4      	asrs	r4, r4, #2
 80101c4:	2500      	movs	r5, #0
 80101c6:	42a5      	cmp	r5, r4
 80101c8:	d105      	bne.n	80101d6 <__libc_init_array+0x2e>
 80101ca:	bd70      	pop	{r4, r5, r6, pc}
 80101cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80101d0:	4798      	blx	r3
 80101d2:	3501      	adds	r5, #1
 80101d4:	e7ee      	b.n	80101b4 <__libc_init_array+0xc>
 80101d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80101da:	4798      	blx	r3
 80101dc:	3501      	adds	r5, #1
 80101de:	e7f2      	b.n	80101c6 <__libc_init_array+0x1e>
 80101e0:	08015230 	.word	0x08015230
 80101e4:	08015230 	.word	0x08015230
 80101e8:	08015230 	.word	0x08015230
 80101ec:	08015234 	.word	0x08015234

080101f0 <memcpy>:
 80101f0:	b510      	push	{r4, lr}
 80101f2:	1e43      	subs	r3, r0, #1
 80101f4:	440a      	add	r2, r1
 80101f6:	4291      	cmp	r1, r2
 80101f8:	d100      	bne.n	80101fc <memcpy+0xc>
 80101fa:	bd10      	pop	{r4, pc}
 80101fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010204:	e7f7      	b.n	80101f6 <memcpy+0x6>

08010206 <memset>:
 8010206:	4402      	add	r2, r0
 8010208:	4603      	mov	r3, r0
 801020a:	4293      	cmp	r3, r2
 801020c:	d100      	bne.n	8010210 <memset+0xa>
 801020e:	4770      	bx	lr
 8010210:	f803 1b01 	strb.w	r1, [r3], #1
 8010214:	e7f9      	b.n	801020a <memset+0x4>

08010216 <__cvt>:
 8010216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010218:	ed2d 8b02 	vpush	{d8}
 801021c:	eeb0 8b40 	vmov.f64	d8, d0
 8010220:	b085      	sub	sp, #20
 8010222:	4617      	mov	r7, r2
 8010224:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010226:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010228:	ee18 2a90 	vmov	r2, s17
 801022c:	f025 0520 	bic.w	r5, r5, #32
 8010230:	2a00      	cmp	r2, #0
 8010232:	bfb6      	itet	lt
 8010234:	222d      	movlt	r2, #45	; 0x2d
 8010236:	2200      	movge	r2, #0
 8010238:	eeb1 8b40 	vneglt.f64	d8, d0
 801023c:	2d46      	cmp	r5, #70	; 0x46
 801023e:	460c      	mov	r4, r1
 8010240:	701a      	strb	r2, [r3, #0]
 8010242:	d004      	beq.n	801024e <__cvt+0x38>
 8010244:	2d45      	cmp	r5, #69	; 0x45
 8010246:	d100      	bne.n	801024a <__cvt+0x34>
 8010248:	3401      	adds	r4, #1
 801024a:	2102      	movs	r1, #2
 801024c:	e000      	b.n	8010250 <__cvt+0x3a>
 801024e:	2103      	movs	r1, #3
 8010250:	ab03      	add	r3, sp, #12
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	ab02      	add	r3, sp, #8
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	4622      	mov	r2, r4
 801025a:	4633      	mov	r3, r6
 801025c:	eeb0 0b48 	vmov.f64	d0, d8
 8010260:	f001 fe42 	bl	8011ee8 <_dtoa_r>
 8010264:	2d47      	cmp	r5, #71	; 0x47
 8010266:	d101      	bne.n	801026c <__cvt+0x56>
 8010268:	07fb      	lsls	r3, r7, #31
 801026a:	d51e      	bpl.n	80102aa <__cvt+0x94>
 801026c:	2d46      	cmp	r5, #70	; 0x46
 801026e:	eb00 0304 	add.w	r3, r0, r4
 8010272:	d10c      	bne.n	801028e <__cvt+0x78>
 8010274:	7802      	ldrb	r2, [r0, #0]
 8010276:	2a30      	cmp	r2, #48	; 0x30
 8010278:	d107      	bne.n	801028a <__cvt+0x74>
 801027a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801027e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010282:	bf1c      	itt	ne
 8010284:	f1c4 0401 	rsbne	r4, r4, #1
 8010288:	6034      	strne	r4, [r6, #0]
 801028a:	6832      	ldr	r2, [r6, #0]
 801028c:	4413      	add	r3, r2
 801028e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	d007      	beq.n	80102a8 <__cvt+0x92>
 8010298:	2130      	movs	r1, #48	; 0x30
 801029a:	9a03      	ldr	r2, [sp, #12]
 801029c:	429a      	cmp	r2, r3
 801029e:	d204      	bcs.n	80102aa <__cvt+0x94>
 80102a0:	1c54      	adds	r4, r2, #1
 80102a2:	9403      	str	r4, [sp, #12]
 80102a4:	7011      	strb	r1, [r2, #0]
 80102a6:	e7f8      	b.n	801029a <__cvt+0x84>
 80102a8:	9303      	str	r3, [sp, #12]
 80102aa:	9b03      	ldr	r3, [sp, #12]
 80102ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102ae:	1a1b      	subs	r3, r3, r0
 80102b0:	6013      	str	r3, [r2, #0]
 80102b2:	b005      	add	sp, #20
 80102b4:	ecbd 8b02 	vpop	{d8}
 80102b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102ba <__exponent>:
 80102ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102bc:	2900      	cmp	r1, #0
 80102be:	4604      	mov	r4, r0
 80102c0:	bfba      	itte	lt
 80102c2:	4249      	neglt	r1, r1
 80102c4:	232d      	movlt	r3, #45	; 0x2d
 80102c6:	232b      	movge	r3, #43	; 0x2b
 80102c8:	2909      	cmp	r1, #9
 80102ca:	f804 2b02 	strb.w	r2, [r4], #2
 80102ce:	7043      	strb	r3, [r0, #1]
 80102d0:	dd20      	ble.n	8010314 <__exponent+0x5a>
 80102d2:	f10d 0307 	add.w	r3, sp, #7
 80102d6:	461f      	mov	r7, r3
 80102d8:	260a      	movs	r6, #10
 80102da:	fb91 f5f6 	sdiv	r5, r1, r6
 80102de:	fb06 1115 	mls	r1, r6, r5, r1
 80102e2:	3130      	adds	r1, #48	; 0x30
 80102e4:	2d09      	cmp	r5, #9
 80102e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80102ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80102ee:	4629      	mov	r1, r5
 80102f0:	dc09      	bgt.n	8010306 <__exponent+0x4c>
 80102f2:	3130      	adds	r1, #48	; 0x30
 80102f4:	3b02      	subs	r3, #2
 80102f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80102fa:	42bb      	cmp	r3, r7
 80102fc:	4622      	mov	r2, r4
 80102fe:	d304      	bcc.n	801030a <__exponent+0x50>
 8010300:	1a10      	subs	r0, r2, r0
 8010302:	b003      	add	sp, #12
 8010304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010306:	4613      	mov	r3, r2
 8010308:	e7e7      	b.n	80102da <__exponent+0x20>
 801030a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801030e:	f804 2b01 	strb.w	r2, [r4], #1
 8010312:	e7f2      	b.n	80102fa <__exponent+0x40>
 8010314:	2330      	movs	r3, #48	; 0x30
 8010316:	4419      	add	r1, r3
 8010318:	7083      	strb	r3, [r0, #2]
 801031a:	1d02      	adds	r2, r0, #4
 801031c:	70c1      	strb	r1, [r0, #3]
 801031e:	e7ef      	b.n	8010300 <__exponent+0x46>

08010320 <_printf_float>:
 8010320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010324:	b08d      	sub	sp, #52	; 0x34
 8010326:	460c      	mov	r4, r1
 8010328:	4616      	mov	r6, r2
 801032a:	461f      	mov	r7, r3
 801032c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010330:	4605      	mov	r5, r0
 8010332:	f002 ffcb 	bl	80132cc <_localeconv_r>
 8010336:	f8d0 b000 	ldr.w	fp, [r0]
 801033a:	4658      	mov	r0, fp
 801033c:	f7ef ff80 	bl	8000240 <strlen>
 8010340:	2300      	movs	r3, #0
 8010342:	930a      	str	r3, [sp, #40]	; 0x28
 8010344:	f8d8 3000 	ldr.w	r3, [r8]
 8010348:	9005      	str	r0, [sp, #20]
 801034a:	3307      	adds	r3, #7
 801034c:	f023 0307 	bic.w	r3, r3, #7
 8010350:	f103 0108 	add.w	r1, r3, #8
 8010354:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010358:	6822      	ldr	r2, [r4, #0]
 801035a:	f8c8 1000 	str.w	r1, [r8]
 801035e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010362:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010366:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80105f0 <_printf_float+0x2d0>
 801036a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801036e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010372:	eeb4 6b47 	vcmp.f64	d6, d7
 8010376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037a:	dd24      	ble.n	80103c6 <_printf_float+0xa6>
 801037c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	d502      	bpl.n	801038c <_printf_float+0x6c>
 8010386:	232d      	movs	r3, #45	; 0x2d
 8010388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801038c:	499a      	ldr	r1, [pc, #616]	; (80105f8 <_printf_float+0x2d8>)
 801038e:	4b9b      	ldr	r3, [pc, #620]	; (80105fc <_printf_float+0x2dc>)
 8010390:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010394:	bf8c      	ite	hi
 8010396:	4688      	movhi	r8, r1
 8010398:	4698      	movls	r8, r3
 801039a:	f022 0204 	bic.w	r2, r2, #4
 801039e:	2303      	movs	r3, #3
 80103a0:	6123      	str	r3, [r4, #16]
 80103a2:	6022      	str	r2, [r4, #0]
 80103a4:	f04f 0a00 	mov.w	sl, #0
 80103a8:	9700      	str	r7, [sp, #0]
 80103aa:	4633      	mov	r3, r6
 80103ac:	aa0b      	add	r2, sp, #44	; 0x2c
 80103ae:	4621      	mov	r1, r4
 80103b0:	4628      	mov	r0, r5
 80103b2:	f000 f9e1 	bl	8010778 <_printf_common>
 80103b6:	3001      	adds	r0, #1
 80103b8:	f040 8089 	bne.w	80104ce <_printf_float+0x1ae>
 80103bc:	f04f 30ff 	mov.w	r0, #4294967295
 80103c0:	b00d      	add	sp, #52	; 0x34
 80103c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80103ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ce:	d702      	bvc.n	80103d6 <_printf_float+0xb6>
 80103d0:	498b      	ldr	r1, [pc, #556]	; (8010600 <_printf_float+0x2e0>)
 80103d2:	4b8c      	ldr	r3, [pc, #560]	; (8010604 <_printf_float+0x2e4>)
 80103d4:	e7dc      	b.n	8010390 <_printf_float+0x70>
 80103d6:	6861      	ldr	r1, [r4, #4]
 80103d8:	1c4b      	adds	r3, r1, #1
 80103da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80103de:	ab0a      	add	r3, sp, #40	; 0x28
 80103e0:	a809      	add	r0, sp, #36	; 0x24
 80103e2:	d13b      	bne.n	801045c <_printf_float+0x13c>
 80103e4:	2106      	movs	r1, #6
 80103e6:	6061      	str	r1, [r4, #4]
 80103e8:	f04f 0c00 	mov.w	ip, #0
 80103ec:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80103f0:	e9cd 0900 	strd	r0, r9, [sp]
 80103f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80103f8:	6022      	str	r2, [r4, #0]
 80103fa:	6861      	ldr	r1, [r4, #4]
 80103fc:	4628      	mov	r0, r5
 80103fe:	f7ff ff0a 	bl	8010216 <__cvt>
 8010402:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010406:	2b47      	cmp	r3, #71	; 0x47
 8010408:	4680      	mov	r8, r0
 801040a:	d109      	bne.n	8010420 <_printf_float+0x100>
 801040c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801040e:	1cd8      	adds	r0, r3, #3
 8010410:	db02      	blt.n	8010418 <_printf_float+0xf8>
 8010412:	6862      	ldr	r2, [r4, #4]
 8010414:	4293      	cmp	r3, r2
 8010416:	dd47      	ble.n	80104a8 <_printf_float+0x188>
 8010418:	f1a9 0902 	sub.w	r9, r9, #2
 801041c:	fa5f f989 	uxtb.w	r9, r9
 8010420:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010426:	d824      	bhi.n	8010472 <_printf_float+0x152>
 8010428:	3901      	subs	r1, #1
 801042a:	464a      	mov	r2, r9
 801042c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010430:	9109      	str	r1, [sp, #36]	; 0x24
 8010432:	f7ff ff42 	bl	80102ba <__exponent>
 8010436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010438:	1813      	adds	r3, r2, r0
 801043a:	2a01      	cmp	r2, #1
 801043c:	4682      	mov	sl, r0
 801043e:	6123      	str	r3, [r4, #16]
 8010440:	dc02      	bgt.n	8010448 <_printf_float+0x128>
 8010442:	6822      	ldr	r2, [r4, #0]
 8010444:	07d1      	lsls	r1, r2, #31
 8010446:	d501      	bpl.n	801044c <_printf_float+0x12c>
 8010448:	3301      	adds	r3, #1
 801044a:	6123      	str	r3, [r4, #16]
 801044c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010450:	2b00      	cmp	r3, #0
 8010452:	d0a9      	beq.n	80103a8 <_printf_float+0x88>
 8010454:	232d      	movs	r3, #45	; 0x2d
 8010456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801045a:	e7a5      	b.n	80103a8 <_printf_float+0x88>
 801045c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010460:	f000 8178 	beq.w	8010754 <_printf_float+0x434>
 8010464:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010468:	d1be      	bne.n	80103e8 <_printf_float+0xc8>
 801046a:	2900      	cmp	r1, #0
 801046c:	d1bc      	bne.n	80103e8 <_printf_float+0xc8>
 801046e:	2101      	movs	r1, #1
 8010470:	e7b9      	b.n	80103e6 <_printf_float+0xc6>
 8010472:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010476:	d119      	bne.n	80104ac <_printf_float+0x18c>
 8010478:	2900      	cmp	r1, #0
 801047a:	6863      	ldr	r3, [r4, #4]
 801047c:	dd0c      	ble.n	8010498 <_printf_float+0x178>
 801047e:	6121      	str	r1, [r4, #16]
 8010480:	b913      	cbnz	r3, 8010488 <_printf_float+0x168>
 8010482:	6822      	ldr	r2, [r4, #0]
 8010484:	07d2      	lsls	r2, r2, #31
 8010486:	d502      	bpl.n	801048e <_printf_float+0x16e>
 8010488:	3301      	adds	r3, #1
 801048a:	440b      	add	r3, r1
 801048c:	6123      	str	r3, [r4, #16]
 801048e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010490:	65a3      	str	r3, [r4, #88]	; 0x58
 8010492:	f04f 0a00 	mov.w	sl, #0
 8010496:	e7d9      	b.n	801044c <_printf_float+0x12c>
 8010498:	b913      	cbnz	r3, 80104a0 <_printf_float+0x180>
 801049a:	6822      	ldr	r2, [r4, #0]
 801049c:	07d0      	lsls	r0, r2, #31
 801049e:	d501      	bpl.n	80104a4 <_printf_float+0x184>
 80104a0:	3302      	adds	r3, #2
 80104a2:	e7f3      	b.n	801048c <_printf_float+0x16c>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e7f1      	b.n	801048c <_printf_float+0x16c>
 80104a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80104ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80104b0:	4293      	cmp	r3, r2
 80104b2:	db05      	blt.n	80104c0 <_printf_float+0x1a0>
 80104b4:	6822      	ldr	r2, [r4, #0]
 80104b6:	6123      	str	r3, [r4, #16]
 80104b8:	07d1      	lsls	r1, r2, #31
 80104ba:	d5e8      	bpl.n	801048e <_printf_float+0x16e>
 80104bc:	3301      	adds	r3, #1
 80104be:	e7e5      	b.n	801048c <_printf_float+0x16c>
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	bfd4      	ite	le
 80104c4:	f1c3 0302 	rsble	r3, r3, #2
 80104c8:	2301      	movgt	r3, #1
 80104ca:	4413      	add	r3, r2
 80104cc:	e7de      	b.n	801048c <_printf_float+0x16c>
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	055a      	lsls	r2, r3, #21
 80104d2:	d407      	bmi.n	80104e4 <_printf_float+0x1c4>
 80104d4:	6923      	ldr	r3, [r4, #16]
 80104d6:	4642      	mov	r2, r8
 80104d8:	4631      	mov	r1, r6
 80104da:	4628      	mov	r0, r5
 80104dc:	47b8      	blx	r7
 80104de:	3001      	adds	r0, #1
 80104e0:	d12a      	bne.n	8010538 <_printf_float+0x218>
 80104e2:	e76b      	b.n	80103bc <_printf_float+0x9c>
 80104e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80104e8:	f240 80de 	bls.w	80106a8 <_printf_float+0x388>
 80104ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80104f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f8:	d133      	bne.n	8010562 <_printf_float+0x242>
 80104fa:	2301      	movs	r3, #1
 80104fc:	4a42      	ldr	r2, [pc, #264]	; (8010608 <_printf_float+0x2e8>)
 80104fe:	4631      	mov	r1, r6
 8010500:	4628      	mov	r0, r5
 8010502:	47b8      	blx	r7
 8010504:	3001      	adds	r0, #1
 8010506:	f43f af59 	beq.w	80103bc <_printf_float+0x9c>
 801050a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801050e:	429a      	cmp	r2, r3
 8010510:	db02      	blt.n	8010518 <_printf_float+0x1f8>
 8010512:	6823      	ldr	r3, [r4, #0]
 8010514:	07d8      	lsls	r0, r3, #31
 8010516:	d50f      	bpl.n	8010538 <_printf_float+0x218>
 8010518:	9b05      	ldr	r3, [sp, #20]
 801051a:	465a      	mov	r2, fp
 801051c:	4631      	mov	r1, r6
 801051e:	4628      	mov	r0, r5
 8010520:	47b8      	blx	r7
 8010522:	3001      	adds	r0, #1
 8010524:	f43f af4a 	beq.w	80103bc <_printf_float+0x9c>
 8010528:	f04f 0800 	mov.w	r8, #0
 801052c:	f104 091a 	add.w	r9, r4, #26
 8010530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010532:	3b01      	subs	r3, #1
 8010534:	4543      	cmp	r3, r8
 8010536:	dc09      	bgt.n	801054c <_printf_float+0x22c>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	079b      	lsls	r3, r3, #30
 801053c:	f100 8105 	bmi.w	801074a <_printf_float+0x42a>
 8010540:	68e0      	ldr	r0, [r4, #12]
 8010542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010544:	4298      	cmp	r0, r3
 8010546:	bfb8      	it	lt
 8010548:	4618      	movlt	r0, r3
 801054a:	e739      	b.n	80103c0 <_printf_float+0xa0>
 801054c:	2301      	movs	r3, #1
 801054e:	464a      	mov	r2, r9
 8010550:	4631      	mov	r1, r6
 8010552:	4628      	mov	r0, r5
 8010554:	47b8      	blx	r7
 8010556:	3001      	adds	r0, #1
 8010558:	f43f af30 	beq.w	80103bc <_printf_float+0x9c>
 801055c:	f108 0801 	add.w	r8, r8, #1
 8010560:	e7e6      	b.n	8010530 <_printf_float+0x210>
 8010562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010564:	2b00      	cmp	r3, #0
 8010566:	dc2b      	bgt.n	80105c0 <_printf_float+0x2a0>
 8010568:	2301      	movs	r3, #1
 801056a:	4a27      	ldr	r2, [pc, #156]	; (8010608 <_printf_float+0x2e8>)
 801056c:	4631      	mov	r1, r6
 801056e:	4628      	mov	r0, r5
 8010570:	47b8      	blx	r7
 8010572:	3001      	adds	r0, #1
 8010574:	f43f af22 	beq.w	80103bc <_printf_float+0x9c>
 8010578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801057a:	b923      	cbnz	r3, 8010586 <_printf_float+0x266>
 801057c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801057e:	b913      	cbnz	r3, 8010586 <_printf_float+0x266>
 8010580:	6823      	ldr	r3, [r4, #0]
 8010582:	07d9      	lsls	r1, r3, #31
 8010584:	d5d8      	bpl.n	8010538 <_printf_float+0x218>
 8010586:	9b05      	ldr	r3, [sp, #20]
 8010588:	465a      	mov	r2, fp
 801058a:	4631      	mov	r1, r6
 801058c:	4628      	mov	r0, r5
 801058e:	47b8      	blx	r7
 8010590:	3001      	adds	r0, #1
 8010592:	f43f af13 	beq.w	80103bc <_printf_float+0x9c>
 8010596:	f04f 0900 	mov.w	r9, #0
 801059a:	f104 0a1a 	add.w	sl, r4, #26
 801059e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a0:	425b      	negs	r3, r3
 80105a2:	454b      	cmp	r3, r9
 80105a4:	dc01      	bgt.n	80105aa <_printf_float+0x28a>
 80105a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a8:	e795      	b.n	80104d6 <_printf_float+0x1b6>
 80105aa:	2301      	movs	r3, #1
 80105ac:	4652      	mov	r2, sl
 80105ae:	4631      	mov	r1, r6
 80105b0:	4628      	mov	r0, r5
 80105b2:	47b8      	blx	r7
 80105b4:	3001      	adds	r0, #1
 80105b6:	f43f af01 	beq.w	80103bc <_printf_float+0x9c>
 80105ba:	f109 0901 	add.w	r9, r9, #1
 80105be:	e7ee      	b.n	801059e <_printf_float+0x27e>
 80105c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105c4:	429a      	cmp	r2, r3
 80105c6:	bfa8      	it	ge
 80105c8:	461a      	movge	r2, r3
 80105ca:	2a00      	cmp	r2, #0
 80105cc:	4691      	mov	r9, r2
 80105ce:	dd07      	ble.n	80105e0 <_printf_float+0x2c0>
 80105d0:	4613      	mov	r3, r2
 80105d2:	4631      	mov	r1, r6
 80105d4:	4642      	mov	r2, r8
 80105d6:	4628      	mov	r0, r5
 80105d8:	47b8      	blx	r7
 80105da:	3001      	adds	r0, #1
 80105dc:	f43f aeee 	beq.w	80103bc <_printf_float+0x9c>
 80105e0:	f104 031a 	add.w	r3, r4, #26
 80105e4:	f04f 0a00 	mov.w	sl, #0
 80105e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105ec:	9307      	str	r3, [sp, #28]
 80105ee:	e017      	b.n	8010620 <_printf_float+0x300>
 80105f0:	ffffffff 	.word	0xffffffff
 80105f4:	7fefffff 	.word	0x7fefffff
 80105f8:	08014f10 	.word	0x08014f10
 80105fc:	08014f0c 	.word	0x08014f0c
 8010600:	08014f18 	.word	0x08014f18
 8010604:	08014f14 	.word	0x08014f14
 8010608:	08014f1c 	.word	0x08014f1c
 801060c:	2301      	movs	r3, #1
 801060e:	9a07      	ldr	r2, [sp, #28]
 8010610:	4631      	mov	r1, r6
 8010612:	4628      	mov	r0, r5
 8010614:	47b8      	blx	r7
 8010616:	3001      	adds	r0, #1
 8010618:	f43f aed0 	beq.w	80103bc <_printf_float+0x9c>
 801061c:	f10a 0a01 	add.w	sl, sl, #1
 8010620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010622:	9306      	str	r3, [sp, #24]
 8010624:	eba3 0309 	sub.w	r3, r3, r9
 8010628:	4553      	cmp	r3, sl
 801062a:	dcef      	bgt.n	801060c <_printf_float+0x2ec>
 801062c:	9b06      	ldr	r3, [sp, #24]
 801062e:	4498      	add	r8, r3
 8010630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010634:	429a      	cmp	r2, r3
 8010636:	db15      	blt.n	8010664 <_printf_float+0x344>
 8010638:	6823      	ldr	r3, [r4, #0]
 801063a:	07da      	lsls	r2, r3, #31
 801063c:	d412      	bmi.n	8010664 <_printf_float+0x344>
 801063e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010640:	9a06      	ldr	r2, [sp, #24]
 8010642:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010644:	1a9a      	subs	r2, r3, r2
 8010646:	eba3 0a01 	sub.w	sl, r3, r1
 801064a:	4592      	cmp	sl, r2
 801064c:	bfa8      	it	ge
 801064e:	4692      	movge	sl, r2
 8010650:	f1ba 0f00 	cmp.w	sl, #0
 8010654:	dc0e      	bgt.n	8010674 <_printf_float+0x354>
 8010656:	f04f 0800 	mov.w	r8, #0
 801065a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801065e:	f104 091a 	add.w	r9, r4, #26
 8010662:	e019      	b.n	8010698 <_printf_float+0x378>
 8010664:	9b05      	ldr	r3, [sp, #20]
 8010666:	465a      	mov	r2, fp
 8010668:	4631      	mov	r1, r6
 801066a:	4628      	mov	r0, r5
 801066c:	47b8      	blx	r7
 801066e:	3001      	adds	r0, #1
 8010670:	d1e5      	bne.n	801063e <_printf_float+0x31e>
 8010672:	e6a3      	b.n	80103bc <_printf_float+0x9c>
 8010674:	4653      	mov	r3, sl
 8010676:	4642      	mov	r2, r8
 8010678:	4631      	mov	r1, r6
 801067a:	4628      	mov	r0, r5
 801067c:	47b8      	blx	r7
 801067e:	3001      	adds	r0, #1
 8010680:	d1e9      	bne.n	8010656 <_printf_float+0x336>
 8010682:	e69b      	b.n	80103bc <_printf_float+0x9c>
 8010684:	2301      	movs	r3, #1
 8010686:	464a      	mov	r2, r9
 8010688:	4631      	mov	r1, r6
 801068a:	4628      	mov	r0, r5
 801068c:	47b8      	blx	r7
 801068e:	3001      	adds	r0, #1
 8010690:	f43f ae94 	beq.w	80103bc <_printf_float+0x9c>
 8010694:	f108 0801 	add.w	r8, r8, #1
 8010698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801069c:	1a9b      	subs	r3, r3, r2
 801069e:	eba3 030a 	sub.w	r3, r3, sl
 80106a2:	4543      	cmp	r3, r8
 80106a4:	dcee      	bgt.n	8010684 <_printf_float+0x364>
 80106a6:	e747      	b.n	8010538 <_printf_float+0x218>
 80106a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106aa:	2a01      	cmp	r2, #1
 80106ac:	dc01      	bgt.n	80106b2 <_printf_float+0x392>
 80106ae:	07db      	lsls	r3, r3, #31
 80106b0:	d539      	bpl.n	8010726 <_printf_float+0x406>
 80106b2:	2301      	movs	r3, #1
 80106b4:	4642      	mov	r2, r8
 80106b6:	4631      	mov	r1, r6
 80106b8:	4628      	mov	r0, r5
 80106ba:	47b8      	blx	r7
 80106bc:	3001      	adds	r0, #1
 80106be:	f43f ae7d 	beq.w	80103bc <_printf_float+0x9c>
 80106c2:	9b05      	ldr	r3, [sp, #20]
 80106c4:	465a      	mov	r2, fp
 80106c6:	4631      	mov	r1, r6
 80106c8:	4628      	mov	r0, r5
 80106ca:	47b8      	blx	r7
 80106cc:	3001      	adds	r0, #1
 80106ce:	f108 0801 	add.w	r8, r8, #1
 80106d2:	f43f ae73 	beq.w	80103bc <_printf_float+0x9c>
 80106d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80106da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80106e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80106e8:	d018      	beq.n	801071c <_printf_float+0x3fc>
 80106ea:	4642      	mov	r2, r8
 80106ec:	4631      	mov	r1, r6
 80106ee:	4628      	mov	r0, r5
 80106f0:	47b8      	blx	r7
 80106f2:	3001      	adds	r0, #1
 80106f4:	d10e      	bne.n	8010714 <_printf_float+0x3f4>
 80106f6:	e661      	b.n	80103bc <_printf_float+0x9c>
 80106f8:	2301      	movs	r3, #1
 80106fa:	464a      	mov	r2, r9
 80106fc:	4631      	mov	r1, r6
 80106fe:	4628      	mov	r0, r5
 8010700:	47b8      	blx	r7
 8010702:	3001      	adds	r0, #1
 8010704:	f43f ae5a 	beq.w	80103bc <_printf_float+0x9c>
 8010708:	f108 0801 	add.w	r8, r8, #1
 801070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801070e:	3b01      	subs	r3, #1
 8010710:	4543      	cmp	r3, r8
 8010712:	dcf1      	bgt.n	80106f8 <_printf_float+0x3d8>
 8010714:	4653      	mov	r3, sl
 8010716:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801071a:	e6dd      	b.n	80104d8 <_printf_float+0x1b8>
 801071c:	f04f 0800 	mov.w	r8, #0
 8010720:	f104 091a 	add.w	r9, r4, #26
 8010724:	e7f2      	b.n	801070c <_printf_float+0x3ec>
 8010726:	2301      	movs	r3, #1
 8010728:	e7df      	b.n	80106ea <_printf_float+0x3ca>
 801072a:	2301      	movs	r3, #1
 801072c:	464a      	mov	r2, r9
 801072e:	4631      	mov	r1, r6
 8010730:	4628      	mov	r0, r5
 8010732:	47b8      	blx	r7
 8010734:	3001      	adds	r0, #1
 8010736:	f43f ae41 	beq.w	80103bc <_printf_float+0x9c>
 801073a:	f108 0801 	add.w	r8, r8, #1
 801073e:	68e3      	ldr	r3, [r4, #12]
 8010740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010742:	1a9b      	subs	r3, r3, r2
 8010744:	4543      	cmp	r3, r8
 8010746:	dcf0      	bgt.n	801072a <_printf_float+0x40a>
 8010748:	e6fa      	b.n	8010540 <_printf_float+0x220>
 801074a:	f04f 0800 	mov.w	r8, #0
 801074e:	f104 0919 	add.w	r9, r4, #25
 8010752:	e7f4      	b.n	801073e <_printf_float+0x41e>
 8010754:	2900      	cmp	r1, #0
 8010756:	f43f ae8a 	beq.w	801046e <_printf_float+0x14e>
 801075a:	f04f 0c00 	mov.w	ip, #0
 801075e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010762:	e9cd 0900 	strd	r0, r9, [sp]
 8010766:	6022      	str	r2, [r4, #0]
 8010768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801076c:	4628      	mov	r0, r5
 801076e:	f7ff fd52 	bl	8010216 <__cvt>
 8010772:	4680      	mov	r8, r0
 8010774:	e64a      	b.n	801040c <_printf_float+0xec>
 8010776:	bf00      	nop

08010778 <_printf_common>:
 8010778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801077c:	4691      	mov	r9, r2
 801077e:	461f      	mov	r7, r3
 8010780:	688a      	ldr	r2, [r1, #8]
 8010782:	690b      	ldr	r3, [r1, #16]
 8010784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010788:	4293      	cmp	r3, r2
 801078a:	bfb8      	it	lt
 801078c:	4613      	movlt	r3, r2
 801078e:	f8c9 3000 	str.w	r3, [r9]
 8010792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010796:	4606      	mov	r6, r0
 8010798:	460c      	mov	r4, r1
 801079a:	b112      	cbz	r2, 80107a2 <_printf_common+0x2a>
 801079c:	3301      	adds	r3, #1
 801079e:	f8c9 3000 	str.w	r3, [r9]
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	0699      	lsls	r1, r3, #26
 80107a6:	bf42      	ittt	mi
 80107a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80107ac:	3302      	addmi	r3, #2
 80107ae:	f8c9 3000 	strmi.w	r3, [r9]
 80107b2:	6825      	ldr	r5, [r4, #0]
 80107b4:	f015 0506 	ands.w	r5, r5, #6
 80107b8:	d107      	bne.n	80107ca <_printf_common+0x52>
 80107ba:	f104 0a19 	add.w	sl, r4, #25
 80107be:	68e3      	ldr	r3, [r4, #12]
 80107c0:	f8d9 2000 	ldr.w	r2, [r9]
 80107c4:	1a9b      	subs	r3, r3, r2
 80107c6:	42ab      	cmp	r3, r5
 80107c8:	dc28      	bgt.n	801081c <_printf_common+0xa4>
 80107ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80107ce:	6822      	ldr	r2, [r4, #0]
 80107d0:	3300      	adds	r3, #0
 80107d2:	bf18      	it	ne
 80107d4:	2301      	movne	r3, #1
 80107d6:	0692      	lsls	r2, r2, #26
 80107d8:	d42d      	bmi.n	8010836 <_printf_common+0xbe>
 80107da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107de:	4639      	mov	r1, r7
 80107e0:	4630      	mov	r0, r6
 80107e2:	47c0      	blx	r8
 80107e4:	3001      	adds	r0, #1
 80107e6:	d020      	beq.n	801082a <_printf_common+0xb2>
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	68e5      	ldr	r5, [r4, #12]
 80107ec:	f8d9 2000 	ldr.w	r2, [r9]
 80107f0:	f003 0306 	and.w	r3, r3, #6
 80107f4:	2b04      	cmp	r3, #4
 80107f6:	bf08      	it	eq
 80107f8:	1aad      	subeq	r5, r5, r2
 80107fa:	68a3      	ldr	r3, [r4, #8]
 80107fc:	6922      	ldr	r2, [r4, #16]
 80107fe:	bf0c      	ite	eq
 8010800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010804:	2500      	movne	r5, #0
 8010806:	4293      	cmp	r3, r2
 8010808:	bfc4      	itt	gt
 801080a:	1a9b      	subgt	r3, r3, r2
 801080c:	18ed      	addgt	r5, r5, r3
 801080e:	f04f 0900 	mov.w	r9, #0
 8010812:	341a      	adds	r4, #26
 8010814:	454d      	cmp	r5, r9
 8010816:	d11a      	bne.n	801084e <_printf_common+0xd6>
 8010818:	2000      	movs	r0, #0
 801081a:	e008      	b.n	801082e <_printf_common+0xb6>
 801081c:	2301      	movs	r3, #1
 801081e:	4652      	mov	r2, sl
 8010820:	4639      	mov	r1, r7
 8010822:	4630      	mov	r0, r6
 8010824:	47c0      	blx	r8
 8010826:	3001      	adds	r0, #1
 8010828:	d103      	bne.n	8010832 <_printf_common+0xba>
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010832:	3501      	adds	r5, #1
 8010834:	e7c3      	b.n	80107be <_printf_common+0x46>
 8010836:	18e1      	adds	r1, r4, r3
 8010838:	1c5a      	adds	r2, r3, #1
 801083a:	2030      	movs	r0, #48	; 0x30
 801083c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010840:	4422      	add	r2, r4
 8010842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801084a:	3302      	adds	r3, #2
 801084c:	e7c5      	b.n	80107da <_printf_common+0x62>
 801084e:	2301      	movs	r3, #1
 8010850:	4622      	mov	r2, r4
 8010852:	4639      	mov	r1, r7
 8010854:	4630      	mov	r0, r6
 8010856:	47c0      	blx	r8
 8010858:	3001      	adds	r0, #1
 801085a:	d0e6      	beq.n	801082a <_printf_common+0xb2>
 801085c:	f109 0901 	add.w	r9, r9, #1
 8010860:	e7d8      	b.n	8010814 <_printf_common+0x9c>
	...

08010864 <_printf_i>:
 8010864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801086c:	460c      	mov	r4, r1
 801086e:	7e09      	ldrb	r1, [r1, #24]
 8010870:	b085      	sub	sp, #20
 8010872:	296e      	cmp	r1, #110	; 0x6e
 8010874:	4617      	mov	r7, r2
 8010876:	4606      	mov	r6, r0
 8010878:	4698      	mov	r8, r3
 801087a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801087c:	f000 80b3 	beq.w	80109e6 <_printf_i+0x182>
 8010880:	d822      	bhi.n	80108c8 <_printf_i+0x64>
 8010882:	2963      	cmp	r1, #99	; 0x63
 8010884:	d036      	beq.n	80108f4 <_printf_i+0x90>
 8010886:	d80a      	bhi.n	801089e <_printf_i+0x3a>
 8010888:	2900      	cmp	r1, #0
 801088a:	f000 80b9 	beq.w	8010a00 <_printf_i+0x19c>
 801088e:	2958      	cmp	r1, #88	; 0x58
 8010890:	f000 8083 	beq.w	801099a <_printf_i+0x136>
 8010894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801089c:	e032      	b.n	8010904 <_printf_i+0xa0>
 801089e:	2964      	cmp	r1, #100	; 0x64
 80108a0:	d001      	beq.n	80108a6 <_printf_i+0x42>
 80108a2:	2969      	cmp	r1, #105	; 0x69
 80108a4:	d1f6      	bne.n	8010894 <_printf_i+0x30>
 80108a6:	6820      	ldr	r0, [r4, #0]
 80108a8:	6813      	ldr	r3, [r2, #0]
 80108aa:	0605      	lsls	r5, r0, #24
 80108ac:	f103 0104 	add.w	r1, r3, #4
 80108b0:	d52a      	bpl.n	8010908 <_printf_i+0xa4>
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6011      	str	r1, [r2, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	da03      	bge.n	80108c2 <_printf_i+0x5e>
 80108ba:	222d      	movs	r2, #45	; 0x2d
 80108bc:	425b      	negs	r3, r3
 80108be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80108c2:	486f      	ldr	r0, [pc, #444]	; (8010a80 <_printf_i+0x21c>)
 80108c4:	220a      	movs	r2, #10
 80108c6:	e039      	b.n	801093c <_printf_i+0xd8>
 80108c8:	2973      	cmp	r1, #115	; 0x73
 80108ca:	f000 809d 	beq.w	8010a08 <_printf_i+0x1a4>
 80108ce:	d808      	bhi.n	80108e2 <_printf_i+0x7e>
 80108d0:	296f      	cmp	r1, #111	; 0x6f
 80108d2:	d020      	beq.n	8010916 <_printf_i+0xb2>
 80108d4:	2970      	cmp	r1, #112	; 0x70
 80108d6:	d1dd      	bne.n	8010894 <_printf_i+0x30>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	f043 0320 	orr.w	r3, r3, #32
 80108de:	6023      	str	r3, [r4, #0]
 80108e0:	e003      	b.n	80108ea <_printf_i+0x86>
 80108e2:	2975      	cmp	r1, #117	; 0x75
 80108e4:	d017      	beq.n	8010916 <_printf_i+0xb2>
 80108e6:	2978      	cmp	r1, #120	; 0x78
 80108e8:	d1d4      	bne.n	8010894 <_printf_i+0x30>
 80108ea:	2378      	movs	r3, #120	; 0x78
 80108ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108f0:	4864      	ldr	r0, [pc, #400]	; (8010a84 <_printf_i+0x220>)
 80108f2:	e055      	b.n	80109a0 <_printf_i+0x13c>
 80108f4:	6813      	ldr	r3, [r2, #0]
 80108f6:	1d19      	adds	r1, r3, #4
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	6011      	str	r1, [r2, #0]
 80108fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010904:	2301      	movs	r3, #1
 8010906:	e08c      	b.n	8010a22 <_printf_i+0x1be>
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6011      	str	r1, [r2, #0]
 801090c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010910:	bf18      	it	ne
 8010912:	b21b      	sxthne	r3, r3
 8010914:	e7cf      	b.n	80108b6 <_printf_i+0x52>
 8010916:	6813      	ldr	r3, [r2, #0]
 8010918:	6825      	ldr	r5, [r4, #0]
 801091a:	1d18      	adds	r0, r3, #4
 801091c:	6010      	str	r0, [r2, #0]
 801091e:	0628      	lsls	r0, r5, #24
 8010920:	d501      	bpl.n	8010926 <_printf_i+0xc2>
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	e002      	b.n	801092c <_printf_i+0xc8>
 8010926:	0668      	lsls	r0, r5, #25
 8010928:	d5fb      	bpl.n	8010922 <_printf_i+0xbe>
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	4854      	ldr	r0, [pc, #336]	; (8010a80 <_printf_i+0x21c>)
 801092e:	296f      	cmp	r1, #111	; 0x6f
 8010930:	bf14      	ite	ne
 8010932:	220a      	movne	r2, #10
 8010934:	2208      	moveq	r2, #8
 8010936:	2100      	movs	r1, #0
 8010938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801093c:	6865      	ldr	r5, [r4, #4]
 801093e:	60a5      	str	r5, [r4, #8]
 8010940:	2d00      	cmp	r5, #0
 8010942:	f2c0 8095 	blt.w	8010a70 <_printf_i+0x20c>
 8010946:	6821      	ldr	r1, [r4, #0]
 8010948:	f021 0104 	bic.w	r1, r1, #4
 801094c:	6021      	str	r1, [r4, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d13d      	bne.n	80109ce <_printf_i+0x16a>
 8010952:	2d00      	cmp	r5, #0
 8010954:	f040 808e 	bne.w	8010a74 <_printf_i+0x210>
 8010958:	4665      	mov	r5, ip
 801095a:	2a08      	cmp	r2, #8
 801095c:	d10b      	bne.n	8010976 <_printf_i+0x112>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	07db      	lsls	r3, r3, #31
 8010962:	d508      	bpl.n	8010976 <_printf_i+0x112>
 8010964:	6923      	ldr	r3, [r4, #16]
 8010966:	6862      	ldr	r2, [r4, #4]
 8010968:	429a      	cmp	r2, r3
 801096a:	bfde      	ittt	le
 801096c:	2330      	movle	r3, #48	; 0x30
 801096e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010972:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010976:	ebac 0305 	sub.w	r3, ip, r5
 801097a:	6123      	str	r3, [r4, #16]
 801097c:	f8cd 8000 	str.w	r8, [sp]
 8010980:	463b      	mov	r3, r7
 8010982:	aa03      	add	r2, sp, #12
 8010984:	4621      	mov	r1, r4
 8010986:	4630      	mov	r0, r6
 8010988:	f7ff fef6 	bl	8010778 <_printf_common>
 801098c:	3001      	adds	r0, #1
 801098e:	d14d      	bne.n	8010a2c <_printf_i+0x1c8>
 8010990:	f04f 30ff 	mov.w	r0, #4294967295
 8010994:	b005      	add	sp, #20
 8010996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801099a:	4839      	ldr	r0, [pc, #228]	; (8010a80 <_printf_i+0x21c>)
 801099c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80109a0:	6813      	ldr	r3, [r2, #0]
 80109a2:	6821      	ldr	r1, [r4, #0]
 80109a4:	1d1d      	adds	r5, r3, #4
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6015      	str	r5, [r2, #0]
 80109aa:	060a      	lsls	r2, r1, #24
 80109ac:	d50b      	bpl.n	80109c6 <_printf_i+0x162>
 80109ae:	07ca      	lsls	r2, r1, #31
 80109b0:	bf44      	itt	mi
 80109b2:	f041 0120 	orrmi.w	r1, r1, #32
 80109b6:	6021      	strmi	r1, [r4, #0]
 80109b8:	b91b      	cbnz	r3, 80109c2 <_printf_i+0x15e>
 80109ba:	6822      	ldr	r2, [r4, #0]
 80109bc:	f022 0220 	bic.w	r2, r2, #32
 80109c0:	6022      	str	r2, [r4, #0]
 80109c2:	2210      	movs	r2, #16
 80109c4:	e7b7      	b.n	8010936 <_printf_i+0xd2>
 80109c6:	064d      	lsls	r5, r1, #25
 80109c8:	bf48      	it	mi
 80109ca:	b29b      	uxthmi	r3, r3
 80109cc:	e7ef      	b.n	80109ae <_printf_i+0x14a>
 80109ce:	4665      	mov	r5, ip
 80109d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80109d4:	fb02 3311 	mls	r3, r2, r1, r3
 80109d8:	5cc3      	ldrb	r3, [r0, r3]
 80109da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80109de:	460b      	mov	r3, r1
 80109e0:	2900      	cmp	r1, #0
 80109e2:	d1f5      	bne.n	80109d0 <_printf_i+0x16c>
 80109e4:	e7b9      	b.n	801095a <_printf_i+0xf6>
 80109e6:	6813      	ldr	r3, [r2, #0]
 80109e8:	6825      	ldr	r5, [r4, #0]
 80109ea:	6961      	ldr	r1, [r4, #20]
 80109ec:	1d18      	adds	r0, r3, #4
 80109ee:	6010      	str	r0, [r2, #0]
 80109f0:	0628      	lsls	r0, r5, #24
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	d501      	bpl.n	80109fa <_printf_i+0x196>
 80109f6:	6019      	str	r1, [r3, #0]
 80109f8:	e002      	b.n	8010a00 <_printf_i+0x19c>
 80109fa:	066a      	lsls	r2, r5, #25
 80109fc:	d5fb      	bpl.n	80109f6 <_printf_i+0x192>
 80109fe:	8019      	strh	r1, [r3, #0]
 8010a00:	2300      	movs	r3, #0
 8010a02:	6123      	str	r3, [r4, #16]
 8010a04:	4665      	mov	r5, ip
 8010a06:	e7b9      	b.n	801097c <_printf_i+0x118>
 8010a08:	6813      	ldr	r3, [r2, #0]
 8010a0a:	1d19      	adds	r1, r3, #4
 8010a0c:	6011      	str	r1, [r2, #0]
 8010a0e:	681d      	ldr	r5, [r3, #0]
 8010a10:	6862      	ldr	r2, [r4, #4]
 8010a12:	2100      	movs	r1, #0
 8010a14:	4628      	mov	r0, r5
 8010a16:	f7ef fc1b 	bl	8000250 <memchr>
 8010a1a:	b108      	cbz	r0, 8010a20 <_printf_i+0x1bc>
 8010a1c:	1b40      	subs	r0, r0, r5
 8010a1e:	6060      	str	r0, [r4, #4]
 8010a20:	6863      	ldr	r3, [r4, #4]
 8010a22:	6123      	str	r3, [r4, #16]
 8010a24:	2300      	movs	r3, #0
 8010a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a2a:	e7a7      	b.n	801097c <_printf_i+0x118>
 8010a2c:	6923      	ldr	r3, [r4, #16]
 8010a2e:	462a      	mov	r2, r5
 8010a30:	4639      	mov	r1, r7
 8010a32:	4630      	mov	r0, r6
 8010a34:	47c0      	blx	r8
 8010a36:	3001      	adds	r0, #1
 8010a38:	d0aa      	beq.n	8010990 <_printf_i+0x12c>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	079b      	lsls	r3, r3, #30
 8010a3e:	d413      	bmi.n	8010a68 <_printf_i+0x204>
 8010a40:	68e0      	ldr	r0, [r4, #12]
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	4298      	cmp	r0, r3
 8010a46:	bfb8      	it	lt
 8010a48:	4618      	movlt	r0, r3
 8010a4a:	e7a3      	b.n	8010994 <_printf_i+0x130>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	464a      	mov	r2, r9
 8010a50:	4639      	mov	r1, r7
 8010a52:	4630      	mov	r0, r6
 8010a54:	47c0      	blx	r8
 8010a56:	3001      	adds	r0, #1
 8010a58:	d09a      	beq.n	8010990 <_printf_i+0x12c>
 8010a5a:	3501      	adds	r5, #1
 8010a5c:	68e3      	ldr	r3, [r4, #12]
 8010a5e:	9a03      	ldr	r2, [sp, #12]
 8010a60:	1a9b      	subs	r3, r3, r2
 8010a62:	42ab      	cmp	r3, r5
 8010a64:	dcf2      	bgt.n	8010a4c <_printf_i+0x1e8>
 8010a66:	e7eb      	b.n	8010a40 <_printf_i+0x1dc>
 8010a68:	2500      	movs	r5, #0
 8010a6a:	f104 0919 	add.w	r9, r4, #25
 8010a6e:	e7f5      	b.n	8010a5c <_printf_i+0x1f8>
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1ac      	bne.n	80109ce <_printf_i+0x16a>
 8010a74:	7803      	ldrb	r3, [r0, #0]
 8010a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a7e:	e76c      	b.n	801095a <_printf_i+0xf6>
 8010a80:	08014f1e 	.word	0x08014f1e
 8010a84:	08014f2f 	.word	0x08014f2f

08010a88 <_scanf_float>:
 8010a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	469a      	mov	sl, r3
 8010a8e:	688b      	ldr	r3, [r1, #8]
 8010a90:	4616      	mov	r6, r2
 8010a92:	1e5a      	subs	r2, r3, #1
 8010a94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010a98:	b087      	sub	sp, #28
 8010a9a:	bf83      	ittte	hi
 8010a9c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010aa0:	189b      	addhi	r3, r3, r2
 8010aa2:	9301      	strhi	r3, [sp, #4]
 8010aa4:	2300      	movls	r3, #0
 8010aa6:	bf86      	itte	hi
 8010aa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010aac:	608b      	strhi	r3, [r1, #8]
 8010aae:	9301      	strls	r3, [sp, #4]
 8010ab0:	680b      	ldr	r3, [r1, #0]
 8010ab2:	4688      	mov	r8, r1
 8010ab4:	f04f 0b00 	mov.w	fp, #0
 8010ab8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010abc:	f848 3b1c 	str.w	r3, [r8], #28
 8010ac0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010ac4:	4607      	mov	r7, r0
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	4645      	mov	r5, r8
 8010aca:	465a      	mov	r2, fp
 8010acc:	46d9      	mov	r9, fp
 8010ace:	f8cd b008 	str.w	fp, [sp, #8]
 8010ad2:	68a1      	ldr	r1, [r4, #8]
 8010ad4:	b181      	cbz	r1, 8010af8 <_scanf_float+0x70>
 8010ad6:	6833      	ldr	r3, [r6, #0]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	2b49      	cmp	r3, #73	; 0x49
 8010adc:	d071      	beq.n	8010bc2 <_scanf_float+0x13a>
 8010ade:	d84d      	bhi.n	8010b7c <_scanf_float+0xf4>
 8010ae0:	2b39      	cmp	r3, #57	; 0x39
 8010ae2:	d840      	bhi.n	8010b66 <_scanf_float+0xde>
 8010ae4:	2b31      	cmp	r3, #49	; 0x31
 8010ae6:	f080 8088 	bcs.w	8010bfa <_scanf_float+0x172>
 8010aea:	2b2d      	cmp	r3, #45	; 0x2d
 8010aec:	f000 8090 	beq.w	8010c10 <_scanf_float+0x188>
 8010af0:	d815      	bhi.n	8010b1e <_scanf_float+0x96>
 8010af2:	2b2b      	cmp	r3, #43	; 0x2b
 8010af4:	f000 808c 	beq.w	8010c10 <_scanf_float+0x188>
 8010af8:	f1b9 0f00 	cmp.w	r9, #0
 8010afc:	d003      	beq.n	8010b06 <_scanf_float+0x7e>
 8010afe:	6823      	ldr	r3, [r4, #0]
 8010b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	3a01      	subs	r2, #1
 8010b08:	2a01      	cmp	r2, #1
 8010b0a:	f200 80ea 	bhi.w	8010ce2 <_scanf_float+0x25a>
 8010b0e:	4545      	cmp	r5, r8
 8010b10:	f200 80dc 	bhi.w	8010ccc <_scanf_float+0x244>
 8010b14:	2601      	movs	r6, #1
 8010b16:	4630      	mov	r0, r6
 8010b18:	b007      	add	sp, #28
 8010b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8010b20:	f000 809f 	beq.w	8010c62 <_scanf_float+0x1da>
 8010b24:	2b30      	cmp	r3, #48	; 0x30
 8010b26:	d1e7      	bne.n	8010af8 <_scanf_float+0x70>
 8010b28:	6820      	ldr	r0, [r4, #0]
 8010b2a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010b2e:	d064      	beq.n	8010bfa <_scanf_float+0x172>
 8010b30:	9b01      	ldr	r3, [sp, #4]
 8010b32:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010b36:	6020      	str	r0, [r4, #0]
 8010b38:	f109 0901 	add.w	r9, r9, #1
 8010b3c:	b11b      	cbz	r3, 8010b46 <_scanf_float+0xbe>
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	3101      	adds	r1, #1
 8010b42:	9301      	str	r3, [sp, #4]
 8010b44:	60a1      	str	r1, [r4, #8]
 8010b46:	68a3      	ldr	r3, [r4, #8]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	60a3      	str	r3, [r4, #8]
 8010b4c:	6923      	ldr	r3, [r4, #16]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	6123      	str	r3, [r4, #16]
 8010b52:	6873      	ldr	r3, [r6, #4]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	6073      	str	r3, [r6, #4]
 8010b5a:	f340 80ac 	ble.w	8010cb6 <_scanf_float+0x22e>
 8010b5e:	6833      	ldr	r3, [r6, #0]
 8010b60:	3301      	adds	r3, #1
 8010b62:	6033      	str	r3, [r6, #0]
 8010b64:	e7b5      	b.n	8010ad2 <_scanf_float+0x4a>
 8010b66:	2b45      	cmp	r3, #69	; 0x45
 8010b68:	f000 8085 	beq.w	8010c76 <_scanf_float+0x1ee>
 8010b6c:	2b46      	cmp	r3, #70	; 0x46
 8010b6e:	d06a      	beq.n	8010c46 <_scanf_float+0x1be>
 8010b70:	2b41      	cmp	r3, #65	; 0x41
 8010b72:	d1c1      	bne.n	8010af8 <_scanf_float+0x70>
 8010b74:	2a01      	cmp	r2, #1
 8010b76:	d1bf      	bne.n	8010af8 <_scanf_float+0x70>
 8010b78:	2202      	movs	r2, #2
 8010b7a:	e046      	b.n	8010c0a <_scanf_float+0x182>
 8010b7c:	2b65      	cmp	r3, #101	; 0x65
 8010b7e:	d07a      	beq.n	8010c76 <_scanf_float+0x1ee>
 8010b80:	d818      	bhi.n	8010bb4 <_scanf_float+0x12c>
 8010b82:	2b54      	cmp	r3, #84	; 0x54
 8010b84:	d066      	beq.n	8010c54 <_scanf_float+0x1cc>
 8010b86:	d811      	bhi.n	8010bac <_scanf_float+0x124>
 8010b88:	2b4e      	cmp	r3, #78	; 0x4e
 8010b8a:	d1b5      	bne.n	8010af8 <_scanf_float+0x70>
 8010b8c:	2a00      	cmp	r2, #0
 8010b8e:	d146      	bne.n	8010c1e <_scanf_float+0x196>
 8010b90:	f1b9 0f00 	cmp.w	r9, #0
 8010b94:	d145      	bne.n	8010c22 <_scanf_float+0x19a>
 8010b96:	6821      	ldr	r1, [r4, #0]
 8010b98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010b9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010ba0:	d13f      	bne.n	8010c22 <_scanf_float+0x19a>
 8010ba2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010ba6:	6021      	str	r1, [r4, #0]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	e02e      	b.n	8010c0a <_scanf_float+0x182>
 8010bac:	2b59      	cmp	r3, #89	; 0x59
 8010bae:	d01e      	beq.n	8010bee <_scanf_float+0x166>
 8010bb0:	2b61      	cmp	r3, #97	; 0x61
 8010bb2:	e7de      	b.n	8010b72 <_scanf_float+0xea>
 8010bb4:	2b6e      	cmp	r3, #110	; 0x6e
 8010bb6:	d0e9      	beq.n	8010b8c <_scanf_float+0x104>
 8010bb8:	d815      	bhi.n	8010be6 <_scanf_float+0x15e>
 8010bba:	2b66      	cmp	r3, #102	; 0x66
 8010bbc:	d043      	beq.n	8010c46 <_scanf_float+0x1be>
 8010bbe:	2b69      	cmp	r3, #105	; 0x69
 8010bc0:	d19a      	bne.n	8010af8 <_scanf_float+0x70>
 8010bc2:	f1bb 0f00 	cmp.w	fp, #0
 8010bc6:	d138      	bne.n	8010c3a <_scanf_float+0x1b2>
 8010bc8:	f1b9 0f00 	cmp.w	r9, #0
 8010bcc:	d197      	bne.n	8010afe <_scanf_float+0x76>
 8010bce:	6821      	ldr	r1, [r4, #0]
 8010bd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010bd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010bd8:	d195      	bne.n	8010b06 <_scanf_float+0x7e>
 8010bda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010bde:	6021      	str	r1, [r4, #0]
 8010be0:	f04f 0b01 	mov.w	fp, #1
 8010be4:	e011      	b.n	8010c0a <_scanf_float+0x182>
 8010be6:	2b74      	cmp	r3, #116	; 0x74
 8010be8:	d034      	beq.n	8010c54 <_scanf_float+0x1cc>
 8010bea:	2b79      	cmp	r3, #121	; 0x79
 8010bec:	d184      	bne.n	8010af8 <_scanf_float+0x70>
 8010bee:	f1bb 0f07 	cmp.w	fp, #7
 8010bf2:	d181      	bne.n	8010af8 <_scanf_float+0x70>
 8010bf4:	f04f 0b08 	mov.w	fp, #8
 8010bf8:	e007      	b.n	8010c0a <_scanf_float+0x182>
 8010bfa:	eb12 0f0b 	cmn.w	r2, fp
 8010bfe:	f47f af7b 	bne.w	8010af8 <_scanf_float+0x70>
 8010c02:	6821      	ldr	r1, [r4, #0]
 8010c04:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010c08:	6021      	str	r1, [r4, #0]
 8010c0a:	702b      	strb	r3, [r5, #0]
 8010c0c:	3501      	adds	r5, #1
 8010c0e:	e79a      	b.n	8010b46 <_scanf_float+0xbe>
 8010c10:	6821      	ldr	r1, [r4, #0]
 8010c12:	0608      	lsls	r0, r1, #24
 8010c14:	f57f af70 	bpl.w	8010af8 <_scanf_float+0x70>
 8010c18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010c1c:	e7f4      	b.n	8010c08 <_scanf_float+0x180>
 8010c1e:	2a02      	cmp	r2, #2
 8010c20:	d047      	beq.n	8010cb2 <_scanf_float+0x22a>
 8010c22:	f1bb 0f01 	cmp.w	fp, #1
 8010c26:	d003      	beq.n	8010c30 <_scanf_float+0x1a8>
 8010c28:	f1bb 0f04 	cmp.w	fp, #4
 8010c2c:	f47f af64 	bne.w	8010af8 <_scanf_float+0x70>
 8010c30:	f10b 0b01 	add.w	fp, fp, #1
 8010c34:	fa5f fb8b 	uxtb.w	fp, fp
 8010c38:	e7e7      	b.n	8010c0a <_scanf_float+0x182>
 8010c3a:	f1bb 0f03 	cmp.w	fp, #3
 8010c3e:	d0f7      	beq.n	8010c30 <_scanf_float+0x1a8>
 8010c40:	f1bb 0f05 	cmp.w	fp, #5
 8010c44:	e7f2      	b.n	8010c2c <_scanf_float+0x1a4>
 8010c46:	f1bb 0f02 	cmp.w	fp, #2
 8010c4a:	f47f af55 	bne.w	8010af8 <_scanf_float+0x70>
 8010c4e:	f04f 0b03 	mov.w	fp, #3
 8010c52:	e7da      	b.n	8010c0a <_scanf_float+0x182>
 8010c54:	f1bb 0f06 	cmp.w	fp, #6
 8010c58:	f47f af4e 	bne.w	8010af8 <_scanf_float+0x70>
 8010c5c:	f04f 0b07 	mov.w	fp, #7
 8010c60:	e7d3      	b.n	8010c0a <_scanf_float+0x182>
 8010c62:	6821      	ldr	r1, [r4, #0]
 8010c64:	0588      	lsls	r0, r1, #22
 8010c66:	f57f af47 	bpl.w	8010af8 <_scanf_float+0x70>
 8010c6a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010c6e:	6021      	str	r1, [r4, #0]
 8010c70:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c74:	e7c9      	b.n	8010c0a <_scanf_float+0x182>
 8010c76:	6821      	ldr	r1, [r4, #0]
 8010c78:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010c7c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010c80:	d006      	beq.n	8010c90 <_scanf_float+0x208>
 8010c82:	0548      	lsls	r0, r1, #21
 8010c84:	f57f af38 	bpl.w	8010af8 <_scanf_float+0x70>
 8010c88:	f1b9 0f00 	cmp.w	r9, #0
 8010c8c:	f43f af3b 	beq.w	8010b06 <_scanf_float+0x7e>
 8010c90:	0588      	lsls	r0, r1, #22
 8010c92:	bf58      	it	pl
 8010c94:	9802      	ldrpl	r0, [sp, #8]
 8010c96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010c9a:	bf58      	it	pl
 8010c9c:	eba9 0000 	subpl.w	r0, r9, r0
 8010ca0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010ca4:	bf58      	it	pl
 8010ca6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010caa:	6021      	str	r1, [r4, #0]
 8010cac:	f04f 0900 	mov.w	r9, #0
 8010cb0:	e7ab      	b.n	8010c0a <_scanf_float+0x182>
 8010cb2:	2203      	movs	r2, #3
 8010cb4:	e7a9      	b.n	8010c0a <_scanf_float+0x182>
 8010cb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010cba:	9205      	str	r2, [sp, #20]
 8010cbc:	4631      	mov	r1, r6
 8010cbe:	4638      	mov	r0, r7
 8010cc0:	4798      	blx	r3
 8010cc2:	9a05      	ldr	r2, [sp, #20]
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	f43f af04 	beq.w	8010ad2 <_scanf_float+0x4a>
 8010cca:	e715      	b.n	8010af8 <_scanf_float+0x70>
 8010ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010cd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010cd4:	4632      	mov	r2, r6
 8010cd6:	4638      	mov	r0, r7
 8010cd8:	4798      	blx	r3
 8010cda:	6923      	ldr	r3, [r4, #16]
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	6123      	str	r3, [r4, #16]
 8010ce0:	e715      	b.n	8010b0e <_scanf_float+0x86>
 8010ce2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010ce6:	2b06      	cmp	r3, #6
 8010ce8:	d80a      	bhi.n	8010d00 <_scanf_float+0x278>
 8010cea:	f1bb 0f02 	cmp.w	fp, #2
 8010cee:	d966      	bls.n	8010dbe <_scanf_float+0x336>
 8010cf0:	f1ab 0b03 	sub.w	fp, fp, #3
 8010cf4:	fa5f fb8b 	uxtb.w	fp, fp
 8010cf8:	eba5 0b0b 	sub.w	fp, r5, fp
 8010cfc:	455d      	cmp	r5, fp
 8010cfe:	d149      	bne.n	8010d94 <_scanf_float+0x30c>
 8010d00:	6823      	ldr	r3, [r4, #0]
 8010d02:	05da      	lsls	r2, r3, #23
 8010d04:	d51f      	bpl.n	8010d46 <_scanf_float+0x2be>
 8010d06:	055b      	lsls	r3, r3, #21
 8010d08:	d466      	bmi.n	8010dd8 <_scanf_float+0x350>
 8010d0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010d0e:	6923      	ldr	r3, [r4, #16]
 8010d10:	2965      	cmp	r1, #101	; 0x65
 8010d12:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d16:	f105 3bff 	add.w	fp, r5, #4294967295
 8010d1a:	6123      	str	r3, [r4, #16]
 8010d1c:	d00d      	beq.n	8010d3a <_scanf_float+0x2b2>
 8010d1e:	2945      	cmp	r1, #69	; 0x45
 8010d20:	d00b      	beq.n	8010d3a <_scanf_float+0x2b2>
 8010d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d26:	4632      	mov	r2, r6
 8010d28:	4638      	mov	r0, r7
 8010d2a:	4798      	blx	r3
 8010d2c:	6923      	ldr	r3, [r4, #16]
 8010d2e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010d32:	3b01      	subs	r3, #1
 8010d34:	f1a5 0b02 	sub.w	fp, r5, #2
 8010d38:	6123      	str	r3, [r4, #16]
 8010d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d3e:	4632      	mov	r2, r6
 8010d40:	4638      	mov	r0, r7
 8010d42:	4798      	blx	r3
 8010d44:	465d      	mov	r5, fp
 8010d46:	6826      	ldr	r6, [r4, #0]
 8010d48:	f016 0610 	ands.w	r6, r6, #16
 8010d4c:	d170      	bne.n	8010e30 <_scanf_float+0x3a8>
 8010d4e:	702e      	strb	r6, [r5, #0]
 8010d50:	6823      	ldr	r3, [r4, #0]
 8010d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d5a:	d140      	bne.n	8010dde <_scanf_float+0x356>
 8010d5c:	9b02      	ldr	r3, [sp, #8]
 8010d5e:	eba9 0303 	sub.w	r3, r9, r3
 8010d62:	425a      	negs	r2, r3
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d147      	bne.n	8010df8 <_scanf_float+0x370>
 8010d68:	2200      	movs	r2, #0
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	4641      	mov	r1, r8
 8010d6e:	f000 fecf 	bl	8011b10 <_strtod_r>
 8010d72:	6820      	ldr	r0, [r4, #0]
 8010d74:	f8da 3000 	ldr.w	r3, [sl]
 8010d78:	f010 0f02 	tst.w	r0, #2
 8010d7c:	f103 0204 	add.w	r2, r3, #4
 8010d80:	f8ca 2000 	str.w	r2, [sl]
 8010d84:	d043      	beq.n	8010e0e <_scanf_float+0x386>
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	ed83 0b00 	vstr	d0, [r3]
 8010d8c:	68e3      	ldr	r3, [r4, #12]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	60e3      	str	r3, [r4, #12]
 8010d92:	e6c0      	b.n	8010b16 <_scanf_float+0x8e>
 8010d94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	4638      	mov	r0, r7
 8010da0:	4798      	blx	r3
 8010da2:	6923      	ldr	r3, [r4, #16]
 8010da4:	3b01      	subs	r3, #1
 8010da6:	6123      	str	r3, [r4, #16]
 8010da8:	e7a8      	b.n	8010cfc <_scanf_float+0x274>
 8010daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010dae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010db2:	4632      	mov	r2, r6
 8010db4:	4638      	mov	r0, r7
 8010db6:	4798      	blx	r3
 8010db8:	6923      	ldr	r3, [r4, #16]
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	6123      	str	r3, [r4, #16]
 8010dbe:	4545      	cmp	r5, r8
 8010dc0:	d8f3      	bhi.n	8010daa <_scanf_float+0x322>
 8010dc2:	e6a7      	b.n	8010b14 <_scanf_float+0x8c>
 8010dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010dcc:	4632      	mov	r2, r6
 8010dce:	4638      	mov	r0, r7
 8010dd0:	4798      	blx	r3
 8010dd2:	6923      	ldr	r3, [r4, #16]
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	6123      	str	r3, [r4, #16]
 8010dd8:	4545      	cmp	r5, r8
 8010dda:	d8f3      	bhi.n	8010dc4 <_scanf_float+0x33c>
 8010ddc:	e69a      	b.n	8010b14 <_scanf_float+0x8c>
 8010dde:	9b03      	ldr	r3, [sp, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d0c1      	beq.n	8010d68 <_scanf_float+0x2e0>
 8010de4:	9904      	ldr	r1, [sp, #16]
 8010de6:	230a      	movs	r3, #10
 8010de8:	4632      	mov	r2, r6
 8010dea:	3101      	adds	r1, #1
 8010dec:	4638      	mov	r0, r7
 8010dee:	f000 ff1b 	bl	8011c28 <_strtol_r>
 8010df2:	9b03      	ldr	r3, [sp, #12]
 8010df4:	9d04      	ldr	r5, [sp, #16]
 8010df6:	1ac2      	subs	r2, r0, r3
 8010df8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010dfc:	429d      	cmp	r5, r3
 8010dfe:	bf28      	it	cs
 8010e00:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010e04:	490b      	ldr	r1, [pc, #44]	; (8010e34 <_scanf_float+0x3ac>)
 8010e06:	4628      	mov	r0, r5
 8010e08:	f000 f880 	bl	8010f0c <siprintf>
 8010e0c:	e7ac      	b.n	8010d68 <_scanf_float+0x2e0>
 8010e0e:	f010 0004 	ands.w	r0, r0, #4
 8010e12:	d1b8      	bne.n	8010d86 <_scanf_float+0x2fe>
 8010e14:	eeb4 0b40 	vcmp.f64	d0, d0
 8010e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e1c:	681d      	ldr	r5, [r3, #0]
 8010e1e:	d704      	bvc.n	8010e2a <_scanf_float+0x3a2>
 8010e20:	f000 f86e 	bl	8010f00 <nanf>
 8010e24:	ed85 0a00 	vstr	s0, [r5]
 8010e28:	e7b0      	b.n	8010d8c <_scanf_float+0x304>
 8010e2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010e2e:	e7f9      	b.n	8010e24 <_scanf_float+0x39c>
 8010e30:	2600      	movs	r6, #0
 8010e32:	e670      	b.n	8010b16 <_scanf_float+0x8e>
 8010e34:	08014f40 	.word	0x08014f40

08010e38 <_puts_r>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	460e      	mov	r6, r1
 8010e3c:	4605      	mov	r5, r0
 8010e3e:	b118      	cbz	r0, 8010e48 <_puts_r+0x10>
 8010e40:	6983      	ldr	r3, [r0, #24]
 8010e42:	b90b      	cbnz	r3, 8010e48 <_puts_r+0x10>
 8010e44:	f001 fe8c 	bl	8012b60 <__sinit>
 8010e48:	69ab      	ldr	r3, [r5, #24]
 8010e4a:	68ac      	ldr	r4, [r5, #8]
 8010e4c:	b913      	cbnz	r3, 8010e54 <_puts_r+0x1c>
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f001 fe86 	bl	8012b60 <__sinit>
 8010e54:	4b23      	ldr	r3, [pc, #140]	; (8010ee4 <_puts_r+0xac>)
 8010e56:	429c      	cmp	r4, r3
 8010e58:	d117      	bne.n	8010e8a <_puts_r+0x52>
 8010e5a:	686c      	ldr	r4, [r5, #4]
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	071b      	lsls	r3, r3, #28
 8010e60:	d51d      	bpl.n	8010e9e <_puts_r+0x66>
 8010e62:	6923      	ldr	r3, [r4, #16]
 8010e64:	b1db      	cbz	r3, 8010e9e <_puts_r+0x66>
 8010e66:	3e01      	subs	r6, #1
 8010e68:	68a3      	ldr	r3, [r4, #8]
 8010e6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	60a3      	str	r3, [r4, #8]
 8010e72:	b9e9      	cbnz	r1, 8010eb0 <_puts_r+0x78>
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	da2e      	bge.n	8010ed6 <_puts_r+0x9e>
 8010e78:	4622      	mov	r2, r4
 8010e7a:	210a      	movs	r1, #10
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f000 fee5 	bl	8011c4c <__swbuf_r>
 8010e82:	3001      	adds	r0, #1
 8010e84:	d011      	beq.n	8010eaa <_puts_r+0x72>
 8010e86:	200a      	movs	r0, #10
 8010e88:	e011      	b.n	8010eae <_puts_r+0x76>
 8010e8a:	4b17      	ldr	r3, [pc, #92]	; (8010ee8 <_puts_r+0xb0>)
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	d101      	bne.n	8010e94 <_puts_r+0x5c>
 8010e90:	68ac      	ldr	r4, [r5, #8]
 8010e92:	e7e3      	b.n	8010e5c <_puts_r+0x24>
 8010e94:	4b15      	ldr	r3, [pc, #84]	; (8010eec <_puts_r+0xb4>)
 8010e96:	429c      	cmp	r4, r3
 8010e98:	bf08      	it	eq
 8010e9a:	68ec      	ldreq	r4, [r5, #12]
 8010e9c:	e7de      	b.n	8010e5c <_puts_r+0x24>
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f000 ff25 	bl	8011cf0 <__swsetup_r>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d0dd      	beq.n	8010e66 <_puts_r+0x2e>
 8010eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8010eae:	bd70      	pop	{r4, r5, r6, pc}
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	da04      	bge.n	8010ebe <_puts_r+0x86>
 8010eb4:	69a2      	ldr	r2, [r4, #24]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	dc06      	bgt.n	8010ec8 <_puts_r+0x90>
 8010eba:	290a      	cmp	r1, #10
 8010ebc:	d004      	beq.n	8010ec8 <_puts_r+0x90>
 8010ebe:	6823      	ldr	r3, [r4, #0]
 8010ec0:	1c5a      	adds	r2, r3, #1
 8010ec2:	6022      	str	r2, [r4, #0]
 8010ec4:	7019      	strb	r1, [r3, #0]
 8010ec6:	e7cf      	b.n	8010e68 <_puts_r+0x30>
 8010ec8:	4622      	mov	r2, r4
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f000 febe 	bl	8011c4c <__swbuf_r>
 8010ed0:	3001      	adds	r0, #1
 8010ed2:	d1c9      	bne.n	8010e68 <_puts_r+0x30>
 8010ed4:	e7e9      	b.n	8010eaa <_puts_r+0x72>
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	200a      	movs	r0, #10
 8010eda:	1c5a      	adds	r2, r3, #1
 8010edc:	6022      	str	r2, [r4, #0]
 8010ede:	7018      	strb	r0, [r3, #0]
 8010ee0:	e7e5      	b.n	8010eae <_puts_r+0x76>
 8010ee2:	bf00      	nop
 8010ee4:	08014fc8 	.word	0x08014fc8
 8010ee8:	08014fe8 	.word	0x08014fe8
 8010eec:	08014fa8 	.word	0x08014fa8

08010ef0 <puts>:
 8010ef0:	4b02      	ldr	r3, [pc, #8]	; (8010efc <puts+0xc>)
 8010ef2:	4601      	mov	r1, r0
 8010ef4:	6818      	ldr	r0, [r3, #0]
 8010ef6:	f7ff bf9f 	b.w	8010e38 <_puts_r>
 8010efa:	bf00      	nop
 8010efc:	20000168 	.word	0x20000168

08010f00 <nanf>:
 8010f00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010f08 <nanf+0x8>
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	7fc00000 	.word	0x7fc00000

08010f0c <siprintf>:
 8010f0c:	b40e      	push	{r1, r2, r3}
 8010f0e:	b500      	push	{lr}
 8010f10:	b09c      	sub	sp, #112	; 0x70
 8010f12:	ab1d      	add	r3, sp, #116	; 0x74
 8010f14:	9002      	str	r0, [sp, #8]
 8010f16:	9006      	str	r0, [sp, #24]
 8010f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f1c:	4809      	ldr	r0, [pc, #36]	; (8010f44 <siprintf+0x38>)
 8010f1e:	9107      	str	r1, [sp, #28]
 8010f20:	9104      	str	r1, [sp, #16]
 8010f22:	4909      	ldr	r1, [pc, #36]	; (8010f48 <siprintf+0x3c>)
 8010f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f28:	9105      	str	r1, [sp, #20]
 8010f2a:	6800      	ldr	r0, [r0, #0]
 8010f2c:	9301      	str	r3, [sp, #4]
 8010f2e:	a902      	add	r1, sp, #8
 8010f30:	f002 ff68 	bl	8013e04 <_svfiprintf_r>
 8010f34:	9b02      	ldr	r3, [sp, #8]
 8010f36:	2200      	movs	r2, #0
 8010f38:	701a      	strb	r2, [r3, #0]
 8010f3a:	b01c      	add	sp, #112	; 0x70
 8010f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f40:	b003      	add	sp, #12
 8010f42:	4770      	bx	lr
 8010f44:	20000168 	.word	0x20000168
 8010f48:	ffff0208 	.word	0xffff0208

08010f4c <sulp>:
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	4604      	mov	r4, r0
 8010f50:	460d      	mov	r5, r1
 8010f52:	4616      	mov	r6, r2
 8010f54:	ec45 4b10 	vmov	d0, r4, r5
 8010f58:	f002 fd10 	bl	801397c <__ulp>
 8010f5c:	b17e      	cbz	r6, 8010f7e <sulp+0x32>
 8010f5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	dd09      	ble.n	8010f7e <sulp+0x32>
 8010f6a:	051b      	lsls	r3, r3, #20
 8010f6c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010f70:	2000      	movs	r0, #0
 8010f72:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010f76:	ec41 0b17 	vmov	d7, r0, r1
 8010f7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f7e:	bd70      	pop	{r4, r5, r6, pc}

08010f80 <_strtod_l>:
 8010f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	ed2d 8b0c 	vpush	{d8-d13}
 8010f88:	4698      	mov	r8, r3
 8010f8a:	b09d      	sub	sp, #116	; 0x74
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4640      	mov	r0, r8
 8010f92:	460e      	mov	r6, r1
 8010f94:	9214      	str	r2, [sp, #80]	; 0x50
 8010f96:	9318      	str	r3, [sp, #96]	; 0x60
 8010f98:	f002 f995 	bl	80132c6 <__localeconv_l>
 8010f9c:	4681      	mov	r9, r0
 8010f9e:	6800      	ldr	r0, [r0, #0]
 8010fa0:	f7ef f94e 	bl	8000240 <strlen>
 8010fa4:	f04f 0a00 	mov.w	sl, #0
 8010fa8:	4607      	mov	r7, r0
 8010faa:	f04f 0b00 	mov.w	fp, #0
 8010fae:	9617      	str	r6, [sp, #92]	; 0x5c
 8010fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010fb2:	781a      	ldrb	r2, [r3, #0]
 8010fb4:	2a0d      	cmp	r2, #13
 8010fb6:	d834      	bhi.n	8011022 <_strtod_l+0xa2>
 8010fb8:	2a09      	cmp	r2, #9
 8010fba:	d238      	bcs.n	801102e <_strtod_l+0xae>
 8010fbc:	2a00      	cmp	r2, #0
 8010fbe:	d040      	beq.n	8011042 <_strtod_l+0xc2>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8010fc4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010fc6:	782b      	ldrb	r3, [r5, #0]
 8010fc8:	2b30      	cmp	r3, #48	; 0x30
 8010fca:	f040 80b3 	bne.w	8011134 <_strtod_l+0x1b4>
 8010fce:	786b      	ldrb	r3, [r5, #1]
 8010fd0:	2b58      	cmp	r3, #88	; 0x58
 8010fd2:	d001      	beq.n	8010fd8 <_strtod_l+0x58>
 8010fd4:	2b78      	cmp	r3, #120	; 0x78
 8010fd6:	d169      	bne.n	80110ac <_strtod_l+0x12c>
 8010fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fda:	9301      	str	r3, [sp, #4]
 8010fdc:	ab18      	add	r3, sp, #96	; 0x60
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	f8cd 8008 	str.w	r8, [sp, #8]
 8010fe4:	ab19      	add	r3, sp, #100	; 0x64
 8010fe6:	4a8f      	ldr	r2, [pc, #572]	; (8011224 <_strtod_l+0x2a4>)
 8010fe8:	a917      	add	r1, sp, #92	; 0x5c
 8010fea:	4620      	mov	r0, r4
 8010fec:	f001 fe91 	bl	8012d12 <__gethex>
 8010ff0:	f010 0607 	ands.w	r6, r0, #7
 8010ff4:	4607      	mov	r7, r0
 8010ff6:	d005      	beq.n	8011004 <_strtod_l+0x84>
 8010ff8:	2e06      	cmp	r6, #6
 8010ffa:	d12c      	bne.n	8011056 <_strtod_l+0xd6>
 8010ffc:	3501      	adds	r5, #1
 8010ffe:	2300      	movs	r3, #0
 8011000:	9517      	str	r5, [sp, #92]	; 0x5c
 8011002:	930d      	str	r3, [sp, #52]	; 0x34
 8011004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011006:	2b00      	cmp	r3, #0
 8011008:	f040 855e 	bne.w	8011ac8 <_strtod_l+0xb48>
 801100c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801100e:	b1eb      	cbz	r3, 801104c <_strtod_l+0xcc>
 8011010:	ec4b ab17 	vmov	d7, sl, fp
 8011014:	eeb1 0b47 	vneg.f64	d0, d7
 8011018:	b01d      	add	sp, #116	; 0x74
 801101a:	ecbd 8b0c 	vpop	{d8-d13}
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011022:	2a2b      	cmp	r2, #43	; 0x2b
 8011024:	d015      	beq.n	8011052 <_strtod_l+0xd2>
 8011026:	2a2d      	cmp	r2, #45	; 0x2d
 8011028:	d004      	beq.n	8011034 <_strtod_l+0xb4>
 801102a:	2a20      	cmp	r2, #32
 801102c:	d1c8      	bne.n	8010fc0 <_strtod_l+0x40>
 801102e:	3301      	adds	r3, #1
 8011030:	9317      	str	r3, [sp, #92]	; 0x5c
 8011032:	e7bd      	b.n	8010fb0 <_strtod_l+0x30>
 8011034:	2201      	movs	r2, #1
 8011036:	920d      	str	r2, [sp, #52]	; 0x34
 8011038:	1c5a      	adds	r2, r3, #1
 801103a:	9217      	str	r2, [sp, #92]	; 0x5c
 801103c:	785b      	ldrb	r3, [r3, #1]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1c0      	bne.n	8010fc4 <_strtod_l+0x44>
 8011042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011044:	9617      	str	r6, [sp, #92]	; 0x5c
 8011046:	2b00      	cmp	r3, #0
 8011048:	f040 853c 	bne.w	8011ac4 <_strtod_l+0xb44>
 801104c:	ec4b ab10 	vmov	d0, sl, fp
 8011050:	e7e2      	b.n	8011018 <_strtod_l+0x98>
 8011052:	2200      	movs	r2, #0
 8011054:	e7ef      	b.n	8011036 <_strtod_l+0xb6>
 8011056:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011058:	b13a      	cbz	r2, 801106a <_strtod_l+0xea>
 801105a:	2135      	movs	r1, #53	; 0x35
 801105c:	a81a      	add	r0, sp, #104	; 0x68
 801105e:	f002 fd86 	bl	8013b6e <__copybits>
 8011062:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011064:	4620      	mov	r0, r4
 8011066:	f002 f9f1 	bl	801344c <_Bfree>
 801106a:	3e01      	subs	r6, #1
 801106c:	2e04      	cmp	r6, #4
 801106e:	d806      	bhi.n	801107e <_strtod_l+0xfe>
 8011070:	e8df f006 	tbb	[pc, r6]
 8011074:	1714030a 	.word	0x1714030a
 8011078:	0a          	.byte	0x0a
 8011079:	00          	.byte	0x00
 801107a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801107e:	073b      	lsls	r3, r7, #28
 8011080:	d5c0      	bpl.n	8011004 <_strtod_l+0x84>
 8011082:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011086:	e7bd      	b.n	8011004 <_strtod_l+0x84>
 8011088:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801108c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801108e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011092:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011096:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801109a:	e7f0      	b.n	801107e <_strtod_l+0xfe>
 801109c:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011228 <_strtod_l+0x2a8>
 80110a0:	e7ed      	b.n	801107e <_strtod_l+0xfe>
 80110a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80110a6:	f04f 3aff 	mov.w	sl, #4294967295
 80110aa:	e7e8      	b.n	801107e <_strtod_l+0xfe>
 80110ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110ae:	1c5a      	adds	r2, r3, #1
 80110b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80110b2:	785b      	ldrb	r3, [r3, #1]
 80110b4:	2b30      	cmp	r3, #48	; 0x30
 80110b6:	d0f9      	beq.n	80110ac <_strtod_l+0x12c>
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d0a3      	beq.n	8011004 <_strtod_l+0x84>
 80110bc:	2301      	movs	r3, #1
 80110be:	930a      	str	r3, [sp, #40]	; 0x28
 80110c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80110c2:	930c      	str	r3, [sp, #48]	; 0x30
 80110c4:	2300      	movs	r3, #0
 80110c6:	9306      	str	r3, [sp, #24]
 80110c8:	9308      	str	r3, [sp, #32]
 80110ca:	461d      	mov	r5, r3
 80110cc:	220a      	movs	r2, #10
 80110ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80110d0:	f890 8000 	ldrb.w	r8, [r0]
 80110d4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80110d8:	b2d9      	uxtb	r1, r3
 80110da:	2909      	cmp	r1, #9
 80110dc:	d92c      	bls.n	8011138 <_strtod_l+0x1b8>
 80110de:	463a      	mov	r2, r7
 80110e0:	f8d9 1000 	ldr.w	r1, [r9]
 80110e4:	f002 ffd9 	bl	801409a <strncmp>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d035      	beq.n	8011158 <_strtod_l+0x1d8>
 80110ec:	2000      	movs	r0, #0
 80110ee:	4642      	mov	r2, r8
 80110f0:	462b      	mov	r3, r5
 80110f2:	4601      	mov	r1, r0
 80110f4:	9004      	str	r0, [sp, #16]
 80110f6:	2a65      	cmp	r2, #101	; 0x65
 80110f8:	d001      	beq.n	80110fe <_strtod_l+0x17e>
 80110fa:	2a45      	cmp	r2, #69	; 0x45
 80110fc:	d117      	bne.n	801112e <_strtod_l+0x1ae>
 80110fe:	b923      	cbnz	r3, 801110a <_strtod_l+0x18a>
 8011100:	b910      	cbnz	r0, 8011108 <_strtod_l+0x188>
 8011102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011104:	2b00      	cmp	r3, #0
 8011106:	d09c      	beq.n	8011042 <_strtod_l+0xc2>
 8011108:	2300      	movs	r3, #0
 801110a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801110c:	1c72      	adds	r2, r6, #1
 801110e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011110:	7872      	ldrb	r2, [r6, #1]
 8011112:	2a2b      	cmp	r2, #43	; 0x2b
 8011114:	f000 8082 	beq.w	801121c <_strtod_l+0x29c>
 8011118:	2a2d      	cmp	r2, #45	; 0x2d
 801111a:	d079      	beq.n	8011210 <_strtod_l+0x290>
 801111c:	f04f 0e00 	mov.w	lr, #0
 8011120:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011124:	f1bc 0f09 	cmp.w	ip, #9
 8011128:	f240 8086 	bls.w	8011238 <_strtod_l+0x2b8>
 801112c:	9617      	str	r6, [sp, #92]	; 0x5c
 801112e:	f04f 0800 	mov.w	r8, #0
 8011132:	e0a8      	b.n	8011286 <_strtod_l+0x306>
 8011134:	2300      	movs	r3, #0
 8011136:	e7c2      	b.n	80110be <_strtod_l+0x13e>
 8011138:	2d08      	cmp	r5, #8
 801113a:	bfd5      	itete	le
 801113c:	9908      	ldrle	r1, [sp, #32]
 801113e:	9906      	ldrgt	r1, [sp, #24]
 8011140:	fb02 3301 	mlale	r3, r2, r1, r3
 8011144:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011148:	f100 0001 	add.w	r0, r0, #1
 801114c:	bfd4      	ite	le
 801114e:	9308      	strle	r3, [sp, #32]
 8011150:	9306      	strgt	r3, [sp, #24]
 8011152:	3501      	adds	r5, #1
 8011154:	9017      	str	r0, [sp, #92]	; 0x5c
 8011156:	e7ba      	b.n	80110ce <_strtod_l+0x14e>
 8011158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801115a:	19da      	adds	r2, r3, r7
 801115c:	9217      	str	r2, [sp, #92]	; 0x5c
 801115e:	5dda      	ldrb	r2, [r3, r7]
 8011160:	2d00      	cmp	r5, #0
 8011162:	d038      	beq.n	80111d6 <_strtod_l+0x256>
 8011164:	4601      	mov	r1, r0
 8011166:	462b      	mov	r3, r5
 8011168:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801116c:	2f09      	cmp	r7, #9
 801116e:	d913      	bls.n	8011198 <_strtod_l+0x218>
 8011170:	2701      	movs	r7, #1
 8011172:	9704      	str	r7, [sp, #16]
 8011174:	e7bf      	b.n	80110f6 <_strtod_l+0x176>
 8011176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011178:	1c5a      	adds	r2, r3, #1
 801117a:	9217      	str	r2, [sp, #92]	; 0x5c
 801117c:	785a      	ldrb	r2, [r3, #1]
 801117e:	3001      	adds	r0, #1
 8011180:	2a30      	cmp	r2, #48	; 0x30
 8011182:	d0f8      	beq.n	8011176 <_strtod_l+0x1f6>
 8011184:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011188:	2b08      	cmp	r3, #8
 801118a:	f200 84a2 	bhi.w	8011ad2 <_strtod_l+0xb52>
 801118e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011190:	930c      	str	r3, [sp, #48]	; 0x30
 8011192:	4601      	mov	r1, r0
 8011194:	2000      	movs	r0, #0
 8011196:	4603      	mov	r3, r0
 8011198:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 801119c:	f100 0701 	add.w	r7, r0, #1
 80111a0:	d013      	beq.n	80111ca <_strtod_l+0x24a>
 80111a2:	4439      	add	r1, r7
 80111a4:	eb00 0e03 	add.w	lr, r0, r3
 80111a8:	461f      	mov	r7, r3
 80111aa:	f04f 0c0a 	mov.w	ip, #10
 80111ae:	45be      	cmp	lr, r7
 80111b0:	d113      	bne.n	80111da <_strtod_l+0x25a>
 80111b2:	181f      	adds	r7, r3, r0
 80111b4:	2f08      	cmp	r7, #8
 80111b6:	f103 0301 	add.w	r3, r3, #1
 80111ba:	4403      	add	r3, r0
 80111bc:	dc1d      	bgt.n	80111fa <_strtod_l+0x27a>
 80111be:	9a08      	ldr	r2, [sp, #32]
 80111c0:	200a      	movs	r0, #10
 80111c2:	fb00 8202 	mla	r2, r0, r2, r8
 80111c6:	9208      	str	r2, [sp, #32]
 80111c8:	2700      	movs	r7, #0
 80111ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80111cc:	1c50      	adds	r0, r2, #1
 80111ce:	9017      	str	r0, [sp, #92]	; 0x5c
 80111d0:	7852      	ldrb	r2, [r2, #1]
 80111d2:	4638      	mov	r0, r7
 80111d4:	e7c8      	b.n	8011168 <_strtod_l+0x1e8>
 80111d6:	4628      	mov	r0, r5
 80111d8:	e7d2      	b.n	8011180 <_strtod_l+0x200>
 80111da:	2f08      	cmp	r7, #8
 80111dc:	f107 0701 	add.w	r7, r7, #1
 80111e0:	dc04      	bgt.n	80111ec <_strtod_l+0x26c>
 80111e2:	9a08      	ldr	r2, [sp, #32]
 80111e4:	fb0c f202 	mul.w	r2, ip, r2
 80111e8:	9208      	str	r2, [sp, #32]
 80111ea:	e7e0      	b.n	80111ae <_strtod_l+0x22e>
 80111ec:	2f10      	cmp	r7, #16
 80111ee:	bfde      	ittt	le
 80111f0:	9a06      	ldrle	r2, [sp, #24]
 80111f2:	fb0c f202 	mulle.w	r2, ip, r2
 80111f6:	9206      	strle	r2, [sp, #24]
 80111f8:	e7d9      	b.n	80111ae <_strtod_l+0x22e>
 80111fa:	2b10      	cmp	r3, #16
 80111fc:	bfdf      	itttt	le
 80111fe:	9a06      	ldrle	r2, [sp, #24]
 8011200:	200a      	movle	r0, #10
 8011202:	fb00 8202 	mlale	r2, r0, r2, r8
 8011206:	9206      	strle	r2, [sp, #24]
 8011208:	e7de      	b.n	80111c8 <_strtod_l+0x248>
 801120a:	2301      	movs	r3, #1
 801120c:	9304      	str	r3, [sp, #16]
 801120e:	e777      	b.n	8011100 <_strtod_l+0x180>
 8011210:	f04f 0e01 	mov.w	lr, #1
 8011214:	1cb2      	adds	r2, r6, #2
 8011216:	9217      	str	r2, [sp, #92]	; 0x5c
 8011218:	78b2      	ldrb	r2, [r6, #2]
 801121a:	e781      	b.n	8011120 <_strtod_l+0x1a0>
 801121c:	f04f 0e00 	mov.w	lr, #0
 8011220:	e7f8      	b.n	8011214 <_strtod_l+0x294>
 8011222:	bf00      	nop
 8011224:	08014f48 	.word	0x08014f48
 8011228:	7ff00000 	.word	0x7ff00000
 801122c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801122e:	f102 0c01 	add.w	ip, r2, #1
 8011232:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011236:	7852      	ldrb	r2, [r2, #1]
 8011238:	2a30      	cmp	r2, #48	; 0x30
 801123a:	d0f7      	beq.n	801122c <_strtod_l+0x2ac>
 801123c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8011240:	f1bc 0f08 	cmp.w	ip, #8
 8011244:	f63f af73 	bhi.w	801112e <_strtod_l+0x1ae>
 8011248:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 801124c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801124e:	920e      	str	r2, [sp, #56]	; 0x38
 8011250:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011252:	f102 0c01 	add.w	ip, r2, #1
 8011256:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801125a:	7852      	ldrb	r2, [r2, #1]
 801125c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011260:	f1b9 0f09 	cmp.w	r9, #9
 8011264:	d939      	bls.n	80112da <_strtod_l+0x35a>
 8011266:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011268:	ebac 0c07 	sub.w	ip, ip, r7
 801126c:	f1bc 0f08 	cmp.w	ip, #8
 8011270:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8011274:	dc37      	bgt.n	80112e6 <_strtod_l+0x366>
 8011276:	45e0      	cmp	r8, ip
 8011278:	bfa8      	it	ge
 801127a:	46e0      	movge	r8, ip
 801127c:	f1be 0f00 	cmp.w	lr, #0
 8011280:	d001      	beq.n	8011286 <_strtod_l+0x306>
 8011282:	f1c8 0800 	rsb	r8, r8, #0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d151      	bne.n	801132e <_strtod_l+0x3ae>
 801128a:	2800      	cmp	r0, #0
 801128c:	f47f aeba 	bne.w	8011004 <_strtod_l+0x84>
 8011290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011292:	2b00      	cmp	r3, #0
 8011294:	f47f aeb6 	bne.w	8011004 <_strtod_l+0x84>
 8011298:	9b04      	ldr	r3, [sp, #16]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f47f aed1 	bne.w	8011042 <_strtod_l+0xc2>
 80112a0:	2a4e      	cmp	r2, #78	; 0x4e
 80112a2:	d027      	beq.n	80112f4 <_strtod_l+0x374>
 80112a4:	dc21      	bgt.n	80112ea <_strtod_l+0x36a>
 80112a6:	2a49      	cmp	r2, #73	; 0x49
 80112a8:	f47f aecb 	bne.w	8011042 <_strtod_l+0xc2>
 80112ac:	499a      	ldr	r1, [pc, #616]	; (8011518 <_strtod_l+0x598>)
 80112ae:	a817      	add	r0, sp, #92	; 0x5c
 80112b0:	f001 ff62 	bl	8013178 <__match>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	f43f aec4 	beq.w	8011042 <_strtod_l+0xc2>
 80112ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112bc:	4997      	ldr	r1, [pc, #604]	; (801151c <_strtod_l+0x59c>)
 80112be:	3b01      	subs	r3, #1
 80112c0:	a817      	add	r0, sp, #92	; 0x5c
 80112c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80112c4:	f001 ff58 	bl	8013178 <__match>
 80112c8:	b910      	cbnz	r0, 80112d0 <_strtod_l+0x350>
 80112ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112cc:	3301      	adds	r3, #1
 80112ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80112d0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011534 <_strtod_l+0x5b4>
 80112d4:	f04f 0a00 	mov.w	sl, #0
 80112d8:	e694      	b.n	8011004 <_strtod_l+0x84>
 80112da:	270a      	movs	r7, #10
 80112dc:	fb07 2808 	mla	r8, r7, r8, r2
 80112e0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80112e4:	e7b4      	b.n	8011250 <_strtod_l+0x2d0>
 80112e6:	46e0      	mov	r8, ip
 80112e8:	e7c8      	b.n	801127c <_strtod_l+0x2fc>
 80112ea:	2a69      	cmp	r2, #105	; 0x69
 80112ec:	d0de      	beq.n	80112ac <_strtod_l+0x32c>
 80112ee:	2a6e      	cmp	r2, #110	; 0x6e
 80112f0:	f47f aea7 	bne.w	8011042 <_strtod_l+0xc2>
 80112f4:	498a      	ldr	r1, [pc, #552]	; (8011520 <_strtod_l+0x5a0>)
 80112f6:	a817      	add	r0, sp, #92	; 0x5c
 80112f8:	f001 ff3e 	bl	8013178 <__match>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	f43f aea0 	beq.w	8011042 <_strtod_l+0xc2>
 8011302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	2b28      	cmp	r3, #40	; 0x28
 8011308:	d10e      	bne.n	8011328 <_strtod_l+0x3a8>
 801130a:	aa1a      	add	r2, sp, #104	; 0x68
 801130c:	4985      	ldr	r1, [pc, #532]	; (8011524 <_strtod_l+0x5a4>)
 801130e:	a817      	add	r0, sp, #92	; 0x5c
 8011310:	f001 ff46 	bl	80131a0 <__hexnan>
 8011314:	2805      	cmp	r0, #5
 8011316:	d107      	bne.n	8011328 <_strtod_l+0x3a8>
 8011318:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801131a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801131e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011322:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011326:	e66d      	b.n	8011004 <_strtod_l+0x84>
 8011328:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011538 <_strtod_l+0x5b8>
 801132c:	e7d2      	b.n	80112d4 <_strtod_l+0x354>
 801132e:	eddd 7a08 	vldr	s15, [sp, #32]
 8011332:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011336:	eba8 0201 	sub.w	r2, r8, r1
 801133a:	2d00      	cmp	r5, #0
 801133c:	bf08      	it	eq
 801133e:	461d      	moveq	r5, r3
 8011340:	2b10      	cmp	r3, #16
 8011342:	9204      	str	r2, [sp, #16]
 8011344:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011348:	461a      	mov	r2, r3
 801134a:	bfa8      	it	ge
 801134c:	2210      	movge	r2, #16
 801134e:	2b09      	cmp	r3, #9
 8011350:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011354:	dc14      	bgt.n	8011380 <_strtod_l+0x400>
 8011356:	9904      	ldr	r1, [sp, #16]
 8011358:	2900      	cmp	r1, #0
 801135a:	f43f ae53 	beq.w	8011004 <_strtod_l+0x84>
 801135e:	9904      	ldr	r1, [sp, #16]
 8011360:	dd72      	ble.n	8011448 <_strtod_l+0x4c8>
 8011362:	2916      	cmp	r1, #22
 8011364:	dc5a      	bgt.n	801141c <_strtod_l+0x49c>
 8011366:	4970      	ldr	r1, [pc, #448]	; (8011528 <_strtod_l+0x5a8>)
 8011368:	9b04      	ldr	r3, [sp, #16]
 801136a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801136e:	ed91 7b00 	vldr	d7, [r1]
 8011372:	ec4b ab16 	vmov	d6, sl, fp
 8011376:	ee27 7b06 	vmul.f64	d7, d7, d6
 801137a:	ec5b ab17 	vmov	sl, fp, d7
 801137e:	e641      	b.n	8011004 <_strtod_l+0x84>
 8011380:	4969      	ldr	r1, [pc, #420]	; (8011528 <_strtod_l+0x5a8>)
 8011382:	eddd 7a06 	vldr	s15, [sp, #24]
 8011386:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801138a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801138e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011392:	2b0f      	cmp	r3, #15
 8011394:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011398:	eea5 7b06 	vfma.f64	d7, d5, d6
 801139c:	ec5b ab17 	vmov	sl, fp, d7
 80113a0:	ddd9      	ble.n	8011356 <_strtod_l+0x3d6>
 80113a2:	9904      	ldr	r1, [sp, #16]
 80113a4:	1a9a      	subs	r2, r3, r2
 80113a6:	440a      	add	r2, r1
 80113a8:	2a00      	cmp	r2, #0
 80113aa:	f340 8096 	ble.w	80114da <_strtod_l+0x55a>
 80113ae:	f012 000f 	ands.w	r0, r2, #15
 80113b2:	d00a      	beq.n	80113ca <_strtod_l+0x44a>
 80113b4:	495c      	ldr	r1, [pc, #368]	; (8011528 <_strtod_l+0x5a8>)
 80113b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80113ba:	ed91 7b00 	vldr	d7, [r1]
 80113be:	ec4b ab16 	vmov	d6, sl, fp
 80113c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113c6:	ec5b ab17 	vmov	sl, fp, d7
 80113ca:	f032 020f 	bics.w	r2, r2, #15
 80113ce:	d072      	beq.n	80114b6 <_strtod_l+0x536>
 80113d0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80113d4:	dd45      	ble.n	8011462 <_strtod_l+0x4e2>
 80113d6:	2500      	movs	r5, #0
 80113d8:	46a8      	mov	r8, r5
 80113da:	9506      	str	r5, [sp, #24]
 80113dc:	46a9      	mov	r9, r5
 80113de:	2322      	movs	r3, #34	; 0x22
 80113e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011534 <_strtod_l+0x5b4>
 80113e4:	6023      	str	r3, [r4, #0]
 80113e6:	f04f 0a00 	mov.w	sl, #0
 80113ea:	9b06      	ldr	r3, [sp, #24]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f43f ae09 	beq.w	8011004 <_strtod_l+0x84>
 80113f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80113f4:	4620      	mov	r0, r4
 80113f6:	f002 f829 	bl	801344c <_Bfree>
 80113fa:	4649      	mov	r1, r9
 80113fc:	4620      	mov	r0, r4
 80113fe:	f002 f825 	bl	801344c <_Bfree>
 8011402:	4641      	mov	r1, r8
 8011404:	4620      	mov	r0, r4
 8011406:	f002 f821 	bl	801344c <_Bfree>
 801140a:	9906      	ldr	r1, [sp, #24]
 801140c:	4620      	mov	r0, r4
 801140e:	f002 f81d 	bl	801344c <_Bfree>
 8011412:	4629      	mov	r1, r5
 8011414:	4620      	mov	r0, r4
 8011416:	f002 f819 	bl	801344c <_Bfree>
 801141a:	e5f3      	b.n	8011004 <_strtod_l+0x84>
 801141c:	9804      	ldr	r0, [sp, #16]
 801141e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011422:	4281      	cmp	r1, r0
 8011424:	dbbd      	blt.n	80113a2 <_strtod_l+0x422>
 8011426:	4a40      	ldr	r2, [pc, #256]	; (8011528 <_strtod_l+0x5a8>)
 8011428:	f1c3 030f 	rsb	r3, r3, #15
 801142c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011430:	ed91 7b00 	vldr	d7, [r1]
 8011434:	ec4b ab16 	vmov	d6, sl, fp
 8011438:	1ac3      	subs	r3, r0, r3
 801143a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801143e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011442:	ed92 6b00 	vldr	d6, [r2]
 8011446:	e796      	b.n	8011376 <_strtod_l+0x3f6>
 8011448:	3116      	adds	r1, #22
 801144a:	dbaa      	blt.n	80113a2 <_strtod_l+0x422>
 801144c:	4936      	ldr	r1, [pc, #216]	; (8011528 <_strtod_l+0x5a8>)
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011454:	ed91 7b00 	vldr	d7, [r1]
 8011458:	ec4b ab16 	vmov	d6, sl, fp
 801145c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011460:	e78b      	b.n	801137a <_strtod_l+0x3fa>
 8011462:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011466:	2000      	movs	r0, #0
 8011468:	4e30      	ldr	r6, [pc, #192]	; (801152c <_strtod_l+0x5ac>)
 801146a:	1112      	asrs	r2, r2, #4
 801146c:	4601      	mov	r1, r0
 801146e:	2a01      	cmp	r2, #1
 8011470:	dc23      	bgt.n	80114ba <_strtod_l+0x53a>
 8011472:	b108      	cbz	r0, 8011478 <_strtod_l+0x4f8>
 8011474:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011478:	4a2c      	ldr	r2, [pc, #176]	; (801152c <_strtod_l+0x5ac>)
 801147a:	482d      	ldr	r0, [pc, #180]	; (8011530 <_strtod_l+0x5b0>)
 801147c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011480:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011484:	ed91 7b00 	vldr	d7, [r1]
 8011488:	ec4b ab16 	vmov	d6, sl, fp
 801148c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011490:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011494:	9907      	ldr	r1, [sp, #28]
 8011496:	4a27      	ldr	r2, [pc, #156]	; (8011534 <_strtod_l+0x5b4>)
 8011498:	400a      	ands	r2, r1
 801149a:	4282      	cmp	r2, r0
 801149c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80114a0:	d899      	bhi.n	80113d6 <_strtod_l+0x456>
 80114a2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80114a6:	4282      	cmp	r2, r0
 80114a8:	bf86      	itte	hi
 80114aa:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801153c <_strtod_l+0x5bc>
 80114ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80114b2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80114b6:	2700      	movs	r7, #0
 80114b8:	e070      	b.n	801159c <_strtod_l+0x61c>
 80114ba:	07d7      	lsls	r7, r2, #31
 80114bc:	d50a      	bpl.n	80114d4 <_strtod_l+0x554>
 80114be:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80114c2:	ed90 7b00 	vldr	d7, [r0]
 80114c6:	ed9d 6b06 	vldr	d6, [sp, #24]
 80114ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80114ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114d2:	2001      	movs	r0, #1
 80114d4:	3101      	adds	r1, #1
 80114d6:	1052      	asrs	r2, r2, #1
 80114d8:	e7c9      	b.n	801146e <_strtod_l+0x4ee>
 80114da:	d0ec      	beq.n	80114b6 <_strtod_l+0x536>
 80114dc:	4252      	negs	r2, r2
 80114de:	f012 000f 	ands.w	r0, r2, #15
 80114e2:	d00a      	beq.n	80114fa <_strtod_l+0x57a>
 80114e4:	4910      	ldr	r1, [pc, #64]	; (8011528 <_strtod_l+0x5a8>)
 80114e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80114ea:	ed91 7b00 	vldr	d7, [r1]
 80114ee:	ec4b ab16 	vmov	d6, sl, fp
 80114f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80114f6:	ec5b ab17 	vmov	sl, fp, d7
 80114fa:	1112      	asrs	r2, r2, #4
 80114fc:	d0db      	beq.n	80114b6 <_strtod_l+0x536>
 80114fe:	2a1f      	cmp	r2, #31
 8011500:	dd1e      	ble.n	8011540 <_strtod_l+0x5c0>
 8011502:	2500      	movs	r5, #0
 8011504:	46a8      	mov	r8, r5
 8011506:	9506      	str	r5, [sp, #24]
 8011508:	46a9      	mov	r9, r5
 801150a:	2322      	movs	r3, #34	; 0x22
 801150c:	f04f 0a00 	mov.w	sl, #0
 8011510:	f04f 0b00 	mov.w	fp, #0
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	e768      	b.n	80113ea <_strtod_l+0x46a>
 8011518:	08014f11 	.word	0x08014f11
 801151c:	08014f9b 	.word	0x08014f9b
 8011520:	08014f19 	.word	0x08014f19
 8011524:	08014f5c 	.word	0x08014f5c
 8011528:	08015040 	.word	0x08015040
 801152c:	08015018 	.word	0x08015018
 8011530:	7ca00000 	.word	0x7ca00000
 8011534:	7ff00000 	.word	0x7ff00000
 8011538:	fff80000 	.word	0xfff80000
 801153c:	7fefffff 	.word	0x7fefffff
 8011540:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011544:	f012 0710 	ands.w	r7, r2, #16
 8011548:	49ab      	ldr	r1, [pc, #684]	; (80117f8 <_strtod_l+0x878>)
 801154a:	bf18      	it	ne
 801154c:	276a      	movne	r7, #106	; 0x6a
 801154e:	2000      	movs	r0, #0
 8011550:	2a00      	cmp	r2, #0
 8011552:	f300 8113 	bgt.w	801177c <_strtod_l+0x7fc>
 8011556:	b108      	cbz	r0, 801155c <_strtod_l+0x5dc>
 8011558:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801155c:	b1bf      	cbz	r7, 801158e <_strtod_l+0x60e>
 801155e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011562:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011566:	2a00      	cmp	r2, #0
 8011568:	4659      	mov	r1, fp
 801156a:	dd10      	ble.n	801158e <_strtod_l+0x60e>
 801156c:	2a1f      	cmp	r2, #31
 801156e:	f340 8113 	ble.w	8011798 <_strtod_l+0x818>
 8011572:	2a34      	cmp	r2, #52	; 0x34
 8011574:	bfde      	ittt	le
 8011576:	3a20      	suble	r2, #32
 8011578:	f04f 30ff 	movle.w	r0, #4294967295
 801157c:	fa00 f202 	lslle.w	r2, r0, r2
 8011580:	f04f 0a00 	mov.w	sl, #0
 8011584:	bfcc      	ite	gt
 8011586:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801158a:	ea02 0b01 	andle.w	fp, r2, r1
 801158e:	ec4b ab17 	vmov	d7, sl, fp
 8011592:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159a:	d0b2      	beq.n	8011502 <_strtod_l+0x582>
 801159c:	9a08      	ldr	r2, [sp, #32]
 801159e:	9200      	str	r2, [sp, #0]
 80115a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115a2:	462a      	mov	r2, r5
 80115a4:	4620      	mov	r0, r4
 80115a6:	f001 ffa3 	bl	80134f0 <__s2b>
 80115aa:	9006      	str	r0, [sp, #24]
 80115ac:	2800      	cmp	r0, #0
 80115ae:	f43f af12 	beq.w	80113d6 <_strtod_l+0x456>
 80115b2:	9a04      	ldr	r2, [sp, #16]
 80115b4:	9b04      	ldr	r3, [sp, #16]
 80115b6:	2a00      	cmp	r2, #0
 80115b8:	f1c3 0300 	rsb	r3, r3, #0
 80115bc:	ed9f 9b88 	vldr	d9, [pc, #544]	; 80117e0 <_strtod_l+0x860>
 80115c0:	bfa8      	it	ge
 80115c2:	2300      	movge	r3, #0
 80115c4:	ed9f ab88 	vldr	d10, [pc, #544]	; 80117e8 <_strtod_l+0x868>
 80115c8:	ed9f bb89 	vldr	d11, [pc, #548]	; 80117f0 <_strtod_l+0x870>
 80115cc:	930e      	str	r3, [sp, #56]	; 0x38
 80115ce:	2500      	movs	r5, #0
 80115d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80115d4:	9310      	str	r3, [sp, #64]	; 0x40
 80115d6:	46a8      	mov	r8, r5
 80115d8:	9b06      	ldr	r3, [sp, #24]
 80115da:	4620      	mov	r0, r4
 80115dc:	6859      	ldr	r1, [r3, #4]
 80115de:	f001 ff01 	bl	80133e4 <_Balloc>
 80115e2:	4681      	mov	r9, r0
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f43f aefa 	beq.w	80113de <_strtod_l+0x45e>
 80115ea:	9b06      	ldr	r3, [sp, #24]
 80115ec:	691a      	ldr	r2, [r3, #16]
 80115ee:	3202      	adds	r2, #2
 80115f0:	f103 010c 	add.w	r1, r3, #12
 80115f4:	0092      	lsls	r2, r2, #2
 80115f6:	300c      	adds	r0, #12
 80115f8:	f7fe fdfa 	bl	80101f0 <memcpy>
 80115fc:	aa1a      	add	r2, sp, #104	; 0x68
 80115fe:	a919      	add	r1, sp, #100	; 0x64
 8011600:	ec4b ab10 	vmov	d0, sl, fp
 8011604:	4620      	mov	r0, r4
 8011606:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801160a:	f002 fa2d 	bl	8013a68 <__d2b>
 801160e:	9018      	str	r0, [sp, #96]	; 0x60
 8011610:	2800      	cmp	r0, #0
 8011612:	f43f aee4 	beq.w	80113de <_strtod_l+0x45e>
 8011616:	2101      	movs	r1, #1
 8011618:	4620      	mov	r0, r4
 801161a:	f001 fff5 	bl	8013608 <__i2b>
 801161e:	4680      	mov	r8, r0
 8011620:	2800      	cmp	r0, #0
 8011622:	f43f aedc 	beq.w	80113de <_strtod_l+0x45e>
 8011626:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011628:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801162a:	2e00      	cmp	r6, #0
 801162c:	bfb1      	iteee	lt
 801162e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011630:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011632:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011634:	18f3      	addge	r3, r6, r3
 8011636:	bfba      	itte	lt
 8011638:	1b98      	sublt	r0, r3, r6
 801163a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801163c:	9308      	strge	r3, [sp, #32]
 801163e:	eba6 0607 	sub.w	r6, r6, r7
 8011642:	bfb8      	it	lt
 8011644:	9308      	strlt	r3, [sp, #32]
 8011646:	4416      	add	r6, r2
 8011648:	4b6c      	ldr	r3, [pc, #432]	; (80117fc <_strtod_l+0x87c>)
 801164a:	3e01      	subs	r6, #1
 801164c:	429e      	cmp	r6, r3
 801164e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011652:	f280 80b4 	bge.w	80117be <_strtod_l+0x83e>
 8011656:	1b9b      	subs	r3, r3, r6
 8011658:	2b1f      	cmp	r3, #31
 801165a:	eba2 0203 	sub.w	r2, r2, r3
 801165e:	f04f 0101 	mov.w	r1, #1
 8011662:	f300 80a0 	bgt.w	80117a6 <_strtod_l+0x826>
 8011666:	fa01 f303 	lsl.w	r3, r1, r3
 801166a:	9311      	str	r3, [sp, #68]	; 0x44
 801166c:	2300      	movs	r3, #0
 801166e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011670:	9b08      	ldr	r3, [sp, #32]
 8011672:	4413      	add	r3, r2
 8011674:	4402      	add	r2, r0
 8011676:	18be      	adds	r6, r7, r2
 8011678:	9a08      	ldr	r2, [sp, #32]
 801167a:	429a      	cmp	r2, r3
 801167c:	bfa8      	it	ge
 801167e:	461a      	movge	r2, r3
 8011680:	42b2      	cmp	r2, r6
 8011682:	bfa8      	it	ge
 8011684:	4632      	movge	r2, r6
 8011686:	2a00      	cmp	r2, #0
 8011688:	dd04      	ble.n	8011694 <_strtod_l+0x714>
 801168a:	9908      	ldr	r1, [sp, #32]
 801168c:	1a9b      	subs	r3, r3, r2
 801168e:	1ab6      	subs	r6, r6, r2
 8011690:	1a8a      	subs	r2, r1, r2
 8011692:	9208      	str	r2, [sp, #32]
 8011694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011696:	b1c2      	cbz	r2, 80116ca <_strtod_l+0x74a>
 8011698:	4641      	mov	r1, r8
 801169a:	4620      	mov	r0, r4
 801169c:	9315      	str	r3, [sp, #84]	; 0x54
 801169e:	f002 f853 	bl	8013748 <__pow5mult>
 80116a2:	4680      	mov	r8, r0
 80116a4:	2800      	cmp	r0, #0
 80116a6:	f43f ae9a 	beq.w	80113de <_strtod_l+0x45e>
 80116aa:	4601      	mov	r1, r0
 80116ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80116ae:	4620      	mov	r0, r4
 80116b0:	f001 ffb3 	bl	801361a <__multiply>
 80116b4:	900c      	str	r0, [sp, #48]	; 0x30
 80116b6:	2800      	cmp	r0, #0
 80116b8:	f43f ae91 	beq.w	80113de <_strtod_l+0x45e>
 80116bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80116be:	4620      	mov	r0, r4
 80116c0:	f001 fec4 	bl	801344c <_Bfree>
 80116c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116c8:	9218      	str	r2, [sp, #96]	; 0x60
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	dc7c      	bgt.n	80117c8 <_strtod_l+0x848>
 80116ce:	9b04      	ldr	r3, [sp, #16]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dd08      	ble.n	80116e6 <_strtod_l+0x766>
 80116d4:	4649      	mov	r1, r9
 80116d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80116d8:	4620      	mov	r0, r4
 80116da:	f002 f835 	bl	8013748 <__pow5mult>
 80116de:	4681      	mov	r9, r0
 80116e0:	2800      	cmp	r0, #0
 80116e2:	f43f ae7c 	beq.w	80113de <_strtod_l+0x45e>
 80116e6:	2e00      	cmp	r6, #0
 80116e8:	dd08      	ble.n	80116fc <_strtod_l+0x77c>
 80116ea:	4649      	mov	r1, r9
 80116ec:	4632      	mov	r2, r6
 80116ee:	4620      	mov	r0, r4
 80116f0:	f002 f878 	bl	80137e4 <__lshift>
 80116f4:	4681      	mov	r9, r0
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f43f ae71 	beq.w	80113de <_strtod_l+0x45e>
 80116fc:	9b08      	ldr	r3, [sp, #32]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	dd08      	ble.n	8011714 <_strtod_l+0x794>
 8011702:	4641      	mov	r1, r8
 8011704:	461a      	mov	r2, r3
 8011706:	4620      	mov	r0, r4
 8011708:	f002 f86c 	bl	80137e4 <__lshift>
 801170c:	4680      	mov	r8, r0
 801170e:	2800      	cmp	r0, #0
 8011710:	f43f ae65 	beq.w	80113de <_strtod_l+0x45e>
 8011714:	464a      	mov	r2, r9
 8011716:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011718:	4620      	mov	r0, r4
 801171a:	f002 f8d1 	bl	80138c0 <__mdiff>
 801171e:	4605      	mov	r5, r0
 8011720:	2800      	cmp	r0, #0
 8011722:	f43f ae5c 	beq.w	80113de <_strtod_l+0x45e>
 8011726:	68c3      	ldr	r3, [r0, #12]
 8011728:	930c      	str	r3, [sp, #48]	; 0x30
 801172a:	2300      	movs	r3, #0
 801172c:	60c3      	str	r3, [r0, #12]
 801172e:	4641      	mov	r1, r8
 8011730:	f002 f8ac 	bl	801388c <__mcmp>
 8011734:	2800      	cmp	r0, #0
 8011736:	da63      	bge.n	8011800 <_strtod_l+0x880>
 8011738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801173a:	b9e3      	cbnz	r3, 8011776 <_strtod_l+0x7f6>
 801173c:	f1ba 0f00 	cmp.w	sl, #0
 8011740:	d119      	bne.n	8011776 <_strtod_l+0x7f6>
 8011742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011746:	b9b3      	cbnz	r3, 8011776 <_strtod_l+0x7f6>
 8011748:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801174c:	0d1b      	lsrs	r3, r3, #20
 801174e:	051b      	lsls	r3, r3, #20
 8011750:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011754:	d90f      	bls.n	8011776 <_strtod_l+0x7f6>
 8011756:	696b      	ldr	r3, [r5, #20]
 8011758:	b913      	cbnz	r3, 8011760 <_strtod_l+0x7e0>
 801175a:	692b      	ldr	r3, [r5, #16]
 801175c:	2b01      	cmp	r3, #1
 801175e:	dd0a      	ble.n	8011776 <_strtod_l+0x7f6>
 8011760:	4629      	mov	r1, r5
 8011762:	2201      	movs	r2, #1
 8011764:	4620      	mov	r0, r4
 8011766:	f002 f83d 	bl	80137e4 <__lshift>
 801176a:	4641      	mov	r1, r8
 801176c:	4605      	mov	r5, r0
 801176e:	f002 f88d 	bl	801388c <__mcmp>
 8011772:	2800      	cmp	r0, #0
 8011774:	dc75      	bgt.n	8011862 <_strtod_l+0x8e2>
 8011776:	2f00      	cmp	r7, #0
 8011778:	d17f      	bne.n	801187a <_strtod_l+0x8fa>
 801177a:	e63a      	b.n	80113f2 <_strtod_l+0x472>
 801177c:	07d6      	lsls	r6, r2, #31
 801177e:	d508      	bpl.n	8011792 <_strtod_l+0x812>
 8011780:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011784:	ed91 7b00 	vldr	d7, [r1]
 8011788:	ee26 7b07 	vmul.f64	d7, d6, d7
 801178c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011790:	2001      	movs	r0, #1
 8011792:	1052      	asrs	r2, r2, #1
 8011794:	3108      	adds	r1, #8
 8011796:	e6db      	b.n	8011550 <_strtod_l+0x5d0>
 8011798:	f04f 31ff 	mov.w	r1, #4294967295
 801179c:	fa01 f202 	lsl.w	r2, r1, r2
 80117a0:	ea02 0a0a 	and.w	sl, r2, sl
 80117a4:	e6f3      	b.n	801158e <_strtod_l+0x60e>
 80117a6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80117aa:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80117ae:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80117b2:	36e2      	adds	r6, #226	; 0xe2
 80117b4:	fa01 f306 	lsl.w	r3, r1, r6
 80117b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117ba:	9111      	str	r1, [sp, #68]	; 0x44
 80117bc:	e758      	b.n	8011670 <_strtod_l+0x6f0>
 80117be:	2300      	movs	r3, #0
 80117c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80117c2:	2301      	movs	r3, #1
 80117c4:	9311      	str	r3, [sp, #68]	; 0x44
 80117c6:	e753      	b.n	8011670 <_strtod_l+0x6f0>
 80117c8:	461a      	mov	r2, r3
 80117ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80117cc:	4620      	mov	r0, r4
 80117ce:	f002 f809 	bl	80137e4 <__lshift>
 80117d2:	9018      	str	r0, [sp, #96]	; 0x60
 80117d4:	2800      	cmp	r0, #0
 80117d6:	f47f af7a 	bne.w	80116ce <_strtod_l+0x74e>
 80117da:	e600      	b.n	80113de <_strtod_l+0x45e>
 80117dc:	f3af 8000 	nop.w
 80117e0:	94a03595 	.word	0x94a03595
 80117e4:	3fdfffff 	.word	0x3fdfffff
 80117e8:	35afe535 	.word	0x35afe535
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	94a03595 	.word	0x94a03595
 80117f4:	3fcfffff 	.word	0x3fcfffff
 80117f8:	08014f70 	.word	0x08014f70
 80117fc:	fffffc02 	.word	0xfffffc02
 8011800:	f8cd b020 	str.w	fp, [sp, #32]
 8011804:	f040 8085 	bne.w	8011912 <_strtod_l+0x992>
 8011808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801180a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801180e:	b322      	cbz	r2, 801185a <_strtod_l+0x8da>
 8011810:	4ab7      	ldr	r2, [pc, #732]	; (8011af0 <_strtod_l+0xb70>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d154      	bne.n	80118c0 <_strtod_l+0x940>
 8011816:	4651      	mov	r1, sl
 8011818:	b1e7      	cbz	r7, 8011854 <_strtod_l+0x8d4>
 801181a:	4bb6      	ldr	r3, [pc, #728]	; (8011af4 <_strtod_l+0xb74>)
 801181c:	465a      	mov	r2, fp
 801181e:	4013      	ands	r3, r2
 8011820:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011824:	f04f 32ff 	mov.w	r2, #4294967295
 8011828:	d803      	bhi.n	8011832 <_strtod_l+0x8b2>
 801182a:	0d1b      	lsrs	r3, r3, #20
 801182c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011830:	409a      	lsls	r2, r3
 8011832:	4291      	cmp	r1, r2
 8011834:	d144      	bne.n	80118c0 <_strtod_l+0x940>
 8011836:	4bb0      	ldr	r3, [pc, #704]	; (8011af8 <_strtod_l+0xb78>)
 8011838:	9a08      	ldr	r2, [sp, #32]
 801183a:	429a      	cmp	r2, r3
 801183c:	d102      	bne.n	8011844 <_strtod_l+0x8c4>
 801183e:	3101      	adds	r1, #1
 8011840:	f43f adcd 	beq.w	80113de <_strtod_l+0x45e>
 8011844:	4bab      	ldr	r3, [pc, #684]	; (8011af4 <_strtod_l+0xb74>)
 8011846:	9a08      	ldr	r2, [sp, #32]
 8011848:	401a      	ands	r2, r3
 801184a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801184e:	f04f 0a00 	mov.w	sl, #0
 8011852:	e790      	b.n	8011776 <_strtod_l+0x7f6>
 8011854:	f04f 32ff 	mov.w	r2, #4294967295
 8011858:	e7eb      	b.n	8011832 <_strtod_l+0x8b2>
 801185a:	bb8b      	cbnz	r3, 80118c0 <_strtod_l+0x940>
 801185c:	f1ba 0f00 	cmp.w	sl, #0
 8011860:	d12e      	bne.n	80118c0 <_strtod_l+0x940>
 8011862:	465b      	mov	r3, fp
 8011864:	4aa3      	ldr	r2, [pc, #652]	; (8011af4 <_strtod_l+0xb74>)
 8011866:	b30f      	cbz	r7, 80118ac <_strtod_l+0x92c>
 8011868:	ea02 010b 	and.w	r1, r2, fp
 801186c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011870:	dc1c      	bgt.n	80118ac <_strtod_l+0x92c>
 8011872:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011876:	f77f ae48 	ble.w	801150a <_strtod_l+0x58a>
 801187a:	4aa0      	ldr	r2, [pc, #640]	; (8011afc <_strtod_l+0xb7c>)
 801187c:	2300      	movs	r3, #0
 801187e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8011882:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8011886:	ec4b ab17 	vmov	d7, sl, fp
 801188a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801188e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011892:	9b05      	ldr	r3, [sp, #20]
 8011894:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	f47f adaa 	bne.w	80113f2 <_strtod_l+0x472>
 801189e:	9b04      	ldr	r3, [sp, #16]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f47f ada6 	bne.w	80113f2 <_strtod_l+0x472>
 80118a6:	2322      	movs	r3, #34	; 0x22
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	e5a2      	b.n	80113f2 <_strtod_l+0x472>
 80118ac:	4013      	ands	r3, r2
 80118ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80118b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80118b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80118ba:	f04f 3aff 	mov.w	sl, #4294967295
 80118be:	e75a      	b.n	8011776 <_strtod_l+0x7f6>
 80118c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118c2:	b18b      	cbz	r3, 80118e8 <_strtod_l+0x968>
 80118c4:	9a08      	ldr	r2, [sp, #32]
 80118c6:	4213      	tst	r3, r2
 80118c8:	f43f af55 	beq.w	8011776 <_strtod_l+0x7f6>
 80118cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118ce:	463a      	mov	r2, r7
 80118d0:	4650      	mov	r0, sl
 80118d2:	4659      	mov	r1, fp
 80118d4:	b163      	cbz	r3, 80118f0 <_strtod_l+0x970>
 80118d6:	f7ff fb39 	bl	8010f4c <sulp>
 80118da:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80118de:	ee37 7b00 	vadd.f64	d7, d7, d0
 80118e2:	ec5b ab17 	vmov	sl, fp, d7
 80118e6:	e746      	b.n	8011776 <_strtod_l+0x7f6>
 80118e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118ea:	ea13 0f0a 	tst.w	r3, sl
 80118ee:	e7eb      	b.n	80118c8 <_strtod_l+0x948>
 80118f0:	f7ff fb2c 	bl	8010f4c <sulp>
 80118f4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80118f8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80118fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011900:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011908:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801190c:	f43f adfd 	beq.w	801150a <_strtod_l+0x58a>
 8011910:	e731      	b.n	8011776 <_strtod_l+0x7f6>
 8011912:	4641      	mov	r1, r8
 8011914:	4628      	mov	r0, r5
 8011916:	f002 f8f6 	bl	8013b06 <__ratio>
 801191a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801191e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011926:	d869      	bhi.n	80119fc <_strtod_l+0xa7c>
 8011928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801192a:	2b00      	cmp	r3, #0
 801192c:	d045      	beq.n	80119ba <_strtod_l+0xa3a>
 801192e:	4b74      	ldr	r3, [pc, #464]	; (8011b00 <_strtod_l+0xb80>)
 8011930:	2200      	movs	r2, #0
 8011932:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011936:	9808      	ldr	r0, [sp, #32]
 8011938:	496e      	ldr	r1, [pc, #440]	; (8011af4 <_strtod_l+0xb74>)
 801193a:	ea00 0601 	and.w	r6, r0, r1
 801193e:	4871      	ldr	r0, [pc, #452]	; (8011b04 <_strtod_l+0xb84>)
 8011940:	4286      	cmp	r6, r0
 8011942:	f040 8089 	bne.w	8011a58 <_strtod_l+0xad8>
 8011946:	910f      	str	r1, [sp, #60]	; 0x3c
 8011948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801194c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011950:	9908      	ldr	r1, [sp, #32]
 8011952:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8011956:	ec4b ab10 	vmov	d0, sl, fp
 801195a:	ec43 2b1c 	vmov	d12, r2, r3
 801195e:	f002 f80d 	bl	801397c <__ulp>
 8011962:	ec4b ab1d 	vmov	d13, sl, fp
 8011966:	eeac db00 	vfma.f64	d13, d12, d0
 801196a:	ed8d db08 	vstr	d13, [sp, #32]
 801196e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011970:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011972:	4a65      	ldr	r2, [pc, #404]	; (8011b08 <_strtod_l+0xb88>)
 8011974:	4019      	ands	r1, r3
 8011976:	4291      	cmp	r1, r2
 8011978:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801197c:	d948      	bls.n	8011a10 <_strtod_l+0xa90>
 801197e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011980:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011984:	4293      	cmp	r3, r2
 8011986:	d103      	bne.n	8011990 <_strtod_l+0xa10>
 8011988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801198a:	3301      	adds	r3, #1
 801198c:	f43f ad27 	beq.w	80113de <_strtod_l+0x45e>
 8011990:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011af8 <_strtod_l+0xb78>
 8011994:	f04f 3aff 	mov.w	sl, #4294967295
 8011998:	9918      	ldr	r1, [sp, #96]	; 0x60
 801199a:	4620      	mov	r0, r4
 801199c:	f001 fd56 	bl	801344c <_Bfree>
 80119a0:	4649      	mov	r1, r9
 80119a2:	4620      	mov	r0, r4
 80119a4:	f001 fd52 	bl	801344c <_Bfree>
 80119a8:	4641      	mov	r1, r8
 80119aa:	4620      	mov	r0, r4
 80119ac:	f001 fd4e 	bl	801344c <_Bfree>
 80119b0:	4629      	mov	r1, r5
 80119b2:	4620      	mov	r0, r4
 80119b4:	f001 fd4a 	bl	801344c <_Bfree>
 80119b8:	e60e      	b.n	80115d8 <_strtod_l+0x658>
 80119ba:	f1ba 0f00 	cmp.w	sl, #0
 80119be:	d113      	bne.n	80119e8 <_strtod_l+0xa68>
 80119c0:	9b08      	ldr	r3, [sp, #32]
 80119c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119c6:	b9b3      	cbnz	r3, 80119f6 <_strtod_l+0xa76>
 80119c8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80119cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80119d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80119d8:	d401      	bmi.n	80119de <_strtod_l+0xa5e>
 80119da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80119de:	eeb1 7b48 	vneg.f64	d7, d8
 80119e2:	ec53 2b17 	vmov	r2, r3, d7
 80119e6:	e7a6      	b.n	8011936 <_strtod_l+0x9b6>
 80119e8:	f1ba 0f01 	cmp.w	sl, #1
 80119ec:	d103      	bne.n	80119f6 <_strtod_l+0xa76>
 80119ee:	9b08      	ldr	r3, [sp, #32]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f43f ad8a 	beq.w	801150a <_strtod_l+0x58a>
 80119f6:	2200      	movs	r2, #0
 80119f8:	4b44      	ldr	r3, [pc, #272]	; (8011b0c <_strtod_l+0xb8c>)
 80119fa:	e79a      	b.n	8011932 <_strtod_l+0x9b2>
 80119fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011a02:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d0e9      	beq.n	80119de <_strtod_l+0xa5e>
 8011a0a:	ec53 2b18 	vmov	r2, r3, d8
 8011a0e:	e792      	b.n	8011936 <_strtod_l+0x9b6>
 8011a10:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011a14:	2f00      	cmp	r7, #0
 8011a16:	d1bf      	bne.n	8011998 <_strtod_l+0xa18>
 8011a18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a1c:	0d1b      	lsrs	r3, r3, #20
 8011a1e:	051b      	lsls	r3, r3, #20
 8011a20:	429e      	cmp	r6, r3
 8011a22:	d1b9      	bne.n	8011998 <_strtod_l+0xa18>
 8011a24:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a2a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011a2e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011a32:	b92b      	cbnz	r3, 8011a40 <_strtod_l+0xac0>
 8011a34:	f1ba 0f00 	cmp.w	sl, #0
 8011a38:	d102      	bne.n	8011a40 <_strtod_l+0xac0>
 8011a3a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011a3e:	b3d2      	cbz	r2, 8011ab6 <_strtod_l+0xb36>
 8011a40:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a48:	f53f acd3 	bmi.w	80113f2 <_strtod_l+0x472>
 8011a4c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a54:	dda0      	ble.n	8011998 <_strtod_l+0xa18>
 8011a56:	e4cc      	b.n	80113f2 <_strtod_l+0x472>
 8011a58:	b1ef      	cbz	r7, 8011a96 <_strtod_l+0xb16>
 8011a5a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011a5e:	d81a      	bhi.n	8011a96 <_strtod_l+0xb16>
 8011a60:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011ae8 <_strtod_l+0xb68>
 8011a64:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6c:	d810      	bhi.n	8011a90 <_strtod_l+0xb10>
 8011a6e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8011a72:	ee17 3a90 	vmov	r3, s15
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	bf08      	it	eq
 8011a7a:	2301      	moveq	r3, #1
 8011a7c:	ee07 3a90 	vmov	s15, r3
 8011a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a82:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8011a86:	b99b      	cbnz	r3, 8011ab0 <_strtod_l+0xb30>
 8011a88:	eeb1 7b48 	vneg.f64	d7, d8
 8011a8c:	ec53 2b17 	vmov	r2, r3, d7
 8011a90:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011a94:	1b8b      	subs	r3, r1, r6
 8011a96:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011a9a:	ec43 2b1c 	vmov	d12, r2, r3
 8011a9e:	f001 ff6d 	bl	801397c <__ulp>
 8011aa2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011aa6:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011aaa:	ec5b ab17 	vmov	sl, fp, d7
 8011aae:	e7b1      	b.n	8011a14 <_strtod_l+0xa94>
 8011ab0:	ec53 2b18 	vmov	r2, r3, d8
 8011ab4:	e7ec      	b.n	8011a90 <_strtod_l+0xb10>
 8011ab6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abe:	f57f af6b 	bpl.w	8011998 <_strtod_l+0xa18>
 8011ac2:	e496      	b.n	80113f2 <_strtod_l+0x472>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8011ac8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011acc:	6013      	str	r3, [r2, #0]
 8011ace:	f7ff ba9d 	b.w	801100c <_strtod_l+0x8c>
 8011ad2:	2a65      	cmp	r2, #101	; 0x65
 8011ad4:	f04f 0100 	mov.w	r1, #0
 8011ad8:	f43f ab97 	beq.w	801120a <_strtod_l+0x28a>
 8011adc:	2701      	movs	r7, #1
 8011ade:	460b      	mov	r3, r1
 8011ae0:	9704      	str	r7, [sp, #16]
 8011ae2:	f7ff bb0a 	b.w	80110fa <_strtod_l+0x17a>
 8011ae6:	bf00      	nop
 8011ae8:	ffc00000 	.word	0xffc00000
 8011aec:	41dfffff 	.word	0x41dfffff
 8011af0:	000fffff 	.word	0x000fffff
 8011af4:	7ff00000 	.word	0x7ff00000
 8011af8:	7fefffff 	.word	0x7fefffff
 8011afc:	39500000 	.word	0x39500000
 8011b00:	3ff00000 	.word	0x3ff00000
 8011b04:	7fe00000 	.word	0x7fe00000
 8011b08:	7c9fffff 	.word	0x7c9fffff
 8011b0c:	bff00000 	.word	0xbff00000

08011b10 <_strtod_r>:
 8011b10:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <_strtod_r+0x18>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	b410      	push	{r4}
 8011b16:	6a1b      	ldr	r3, [r3, #32]
 8011b18:	4c04      	ldr	r4, [pc, #16]	; (8011b2c <_strtod_r+0x1c>)
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	bf08      	it	eq
 8011b1e:	4623      	moveq	r3, r4
 8011b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b24:	f7ff ba2c 	b.w	8010f80 <_strtod_l>
 8011b28:	20000168 	.word	0x20000168
 8011b2c:	200001cc 	.word	0x200001cc

08011b30 <_strtol_l.isra.0>:
 8011b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b34:	4680      	mov	r8, r0
 8011b36:	4689      	mov	r9, r1
 8011b38:	4692      	mov	sl, r2
 8011b3a:	461e      	mov	r6, r3
 8011b3c:	460f      	mov	r7, r1
 8011b3e:	463d      	mov	r5, r7
 8011b40:	9808      	ldr	r0, [sp, #32]
 8011b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b46:	f001 fbbb 	bl	80132c0 <__locale_ctype_ptr_l>
 8011b4a:	4420      	add	r0, r4
 8011b4c:	7843      	ldrb	r3, [r0, #1]
 8011b4e:	f013 0308 	ands.w	r3, r3, #8
 8011b52:	d132      	bne.n	8011bba <_strtol_l.isra.0+0x8a>
 8011b54:	2c2d      	cmp	r4, #45	; 0x2d
 8011b56:	d132      	bne.n	8011bbe <_strtol_l.isra.0+0x8e>
 8011b58:	787c      	ldrb	r4, [r7, #1]
 8011b5a:	1cbd      	adds	r5, r7, #2
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	2e00      	cmp	r6, #0
 8011b60:	d05d      	beq.n	8011c1e <_strtol_l.isra.0+0xee>
 8011b62:	2e10      	cmp	r6, #16
 8011b64:	d109      	bne.n	8011b7a <_strtol_l.isra.0+0x4a>
 8011b66:	2c30      	cmp	r4, #48	; 0x30
 8011b68:	d107      	bne.n	8011b7a <_strtol_l.isra.0+0x4a>
 8011b6a:	782b      	ldrb	r3, [r5, #0]
 8011b6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b70:	2b58      	cmp	r3, #88	; 0x58
 8011b72:	d14f      	bne.n	8011c14 <_strtol_l.isra.0+0xe4>
 8011b74:	786c      	ldrb	r4, [r5, #1]
 8011b76:	2610      	movs	r6, #16
 8011b78:	3502      	adds	r5, #2
 8011b7a:	2a00      	cmp	r2, #0
 8011b7c:	bf14      	ite	ne
 8011b7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011b82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011b86:	2700      	movs	r7, #0
 8011b88:	fbb1 fcf6 	udiv	ip, r1, r6
 8011b8c:	4638      	mov	r0, r7
 8011b8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011b92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011b96:	2b09      	cmp	r3, #9
 8011b98:	d817      	bhi.n	8011bca <_strtol_l.isra.0+0x9a>
 8011b9a:	461c      	mov	r4, r3
 8011b9c:	42a6      	cmp	r6, r4
 8011b9e:	dd23      	ble.n	8011be8 <_strtol_l.isra.0+0xb8>
 8011ba0:	1c7b      	adds	r3, r7, #1
 8011ba2:	d007      	beq.n	8011bb4 <_strtol_l.isra.0+0x84>
 8011ba4:	4584      	cmp	ip, r0
 8011ba6:	d31c      	bcc.n	8011be2 <_strtol_l.isra.0+0xb2>
 8011ba8:	d101      	bne.n	8011bae <_strtol_l.isra.0+0x7e>
 8011baa:	45a6      	cmp	lr, r4
 8011bac:	db19      	blt.n	8011be2 <_strtol_l.isra.0+0xb2>
 8011bae:	fb00 4006 	mla	r0, r0, r6, r4
 8011bb2:	2701      	movs	r7, #1
 8011bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bb8:	e7eb      	b.n	8011b92 <_strtol_l.isra.0+0x62>
 8011bba:	462f      	mov	r7, r5
 8011bbc:	e7bf      	b.n	8011b3e <_strtol_l.isra.0+0xe>
 8011bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8011bc0:	bf04      	itt	eq
 8011bc2:	1cbd      	addeq	r5, r7, #2
 8011bc4:	787c      	ldrbeq	r4, [r7, #1]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	e7c9      	b.n	8011b5e <_strtol_l.isra.0+0x2e>
 8011bca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011bce:	2b19      	cmp	r3, #25
 8011bd0:	d801      	bhi.n	8011bd6 <_strtol_l.isra.0+0xa6>
 8011bd2:	3c37      	subs	r4, #55	; 0x37
 8011bd4:	e7e2      	b.n	8011b9c <_strtol_l.isra.0+0x6c>
 8011bd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011bda:	2b19      	cmp	r3, #25
 8011bdc:	d804      	bhi.n	8011be8 <_strtol_l.isra.0+0xb8>
 8011bde:	3c57      	subs	r4, #87	; 0x57
 8011be0:	e7dc      	b.n	8011b9c <_strtol_l.isra.0+0x6c>
 8011be2:	f04f 37ff 	mov.w	r7, #4294967295
 8011be6:	e7e5      	b.n	8011bb4 <_strtol_l.isra.0+0x84>
 8011be8:	1c7b      	adds	r3, r7, #1
 8011bea:	d108      	bne.n	8011bfe <_strtol_l.isra.0+0xce>
 8011bec:	2322      	movs	r3, #34	; 0x22
 8011bee:	f8c8 3000 	str.w	r3, [r8]
 8011bf2:	4608      	mov	r0, r1
 8011bf4:	f1ba 0f00 	cmp.w	sl, #0
 8011bf8:	d107      	bne.n	8011c0a <_strtol_l.isra.0+0xda>
 8011bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfe:	b102      	cbz	r2, 8011c02 <_strtol_l.isra.0+0xd2>
 8011c00:	4240      	negs	r0, r0
 8011c02:	f1ba 0f00 	cmp.w	sl, #0
 8011c06:	d0f8      	beq.n	8011bfa <_strtol_l.isra.0+0xca>
 8011c08:	b10f      	cbz	r7, 8011c0e <_strtol_l.isra.0+0xde>
 8011c0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8011c0e:	f8ca 9000 	str.w	r9, [sl]
 8011c12:	e7f2      	b.n	8011bfa <_strtol_l.isra.0+0xca>
 8011c14:	2430      	movs	r4, #48	; 0x30
 8011c16:	2e00      	cmp	r6, #0
 8011c18:	d1af      	bne.n	8011b7a <_strtol_l.isra.0+0x4a>
 8011c1a:	2608      	movs	r6, #8
 8011c1c:	e7ad      	b.n	8011b7a <_strtol_l.isra.0+0x4a>
 8011c1e:	2c30      	cmp	r4, #48	; 0x30
 8011c20:	d0a3      	beq.n	8011b6a <_strtol_l.isra.0+0x3a>
 8011c22:	260a      	movs	r6, #10
 8011c24:	e7a9      	b.n	8011b7a <_strtol_l.isra.0+0x4a>
	...

08011c28 <_strtol_r>:
 8011c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c2a:	4c06      	ldr	r4, [pc, #24]	; (8011c44 <_strtol_r+0x1c>)
 8011c2c:	4d06      	ldr	r5, [pc, #24]	; (8011c48 <_strtol_r+0x20>)
 8011c2e:	6824      	ldr	r4, [r4, #0]
 8011c30:	6a24      	ldr	r4, [r4, #32]
 8011c32:	2c00      	cmp	r4, #0
 8011c34:	bf08      	it	eq
 8011c36:	462c      	moveq	r4, r5
 8011c38:	9400      	str	r4, [sp, #0]
 8011c3a:	f7ff ff79 	bl	8011b30 <_strtol_l.isra.0>
 8011c3e:	b003      	add	sp, #12
 8011c40:	bd30      	pop	{r4, r5, pc}
 8011c42:	bf00      	nop
 8011c44:	20000168 	.word	0x20000168
 8011c48:	200001cc 	.word	0x200001cc

08011c4c <__swbuf_r>:
 8011c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4e:	460e      	mov	r6, r1
 8011c50:	4614      	mov	r4, r2
 8011c52:	4605      	mov	r5, r0
 8011c54:	b118      	cbz	r0, 8011c5e <__swbuf_r+0x12>
 8011c56:	6983      	ldr	r3, [r0, #24]
 8011c58:	b90b      	cbnz	r3, 8011c5e <__swbuf_r+0x12>
 8011c5a:	f000 ff81 	bl	8012b60 <__sinit>
 8011c5e:	4b21      	ldr	r3, [pc, #132]	; (8011ce4 <__swbuf_r+0x98>)
 8011c60:	429c      	cmp	r4, r3
 8011c62:	d12a      	bne.n	8011cba <__swbuf_r+0x6e>
 8011c64:	686c      	ldr	r4, [r5, #4]
 8011c66:	69a3      	ldr	r3, [r4, #24]
 8011c68:	60a3      	str	r3, [r4, #8]
 8011c6a:	89a3      	ldrh	r3, [r4, #12]
 8011c6c:	071a      	lsls	r2, r3, #28
 8011c6e:	d52e      	bpl.n	8011cce <__swbuf_r+0x82>
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	b363      	cbz	r3, 8011cce <__swbuf_r+0x82>
 8011c74:	6923      	ldr	r3, [r4, #16]
 8011c76:	6820      	ldr	r0, [r4, #0]
 8011c78:	1ac0      	subs	r0, r0, r3
 8011c7a:	6963      	ldr	r3, [r4, #20]
 8011c7c:	b2f6      	uxtb	r6, r6
 8011c7e:	4283      	cmp	r3, r0
 8011c80:	4637      	mov	r7, r6
 8011c82:	dc04      	bgt.n	8011c8e <__swbuf_r+0x42>
 8011c84:	4621      	mov	r1, r4
 8011c86:	4628      	mov	r0, r5
 8011c88:	f000 ff00 	bl	8012a8c <_fflush_r>
 8011c8c:	bb28      	cbnz	r0, 8011cda <__swbuf_r+0x8e>
 8011c8e:	68a3      	ldr	r3, [r4, #8]
 8011c90:	3b01      	subs	r3, #1
 8011c92:	60a3      	str	r3, [r4, #8]
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	1c5a      	adds	r2, r3, #1
 8011c98:	6022      	str	r2, [r4, #0]
 8011c9a:	701e      	strb	r6, [r3, #0]
 8011c9c:	6963      	ldr	r3, [r4, #20]
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	4283      	cmp	r3, r0
 8011ca2:	d004      	beq.n	8011cae <__swbuf_r+0x62>
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	07db      	lsls	r3, r3, #31
 8011ca8:	d519      	bpl.n	8011cde <__swbuf_r+0x92>
 8011caa:	2e0a      	cmp	r6, #10
 8011cac:	d117      	bne.n	8011cde <__swbuf_r+0x92>
 8011cae:	4621      	mov	r1, r4
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f000 feeb 	bl	8012a8c <_fflush_r>
 8011cb6:	b190      	cbz	r0, 8011cde <__swbuf_r+0x92>
 8011cb8:	e00f      	b.n	8011cda <__swbuf_r+0x8e>
 8011cba:	4b0b      	ldr	r3, [pc, #44]	; (8011ce8 <__swbuf_r+0x9c>)
 8011cbc:	429c      	cmp	r4, r3
 8011cbe:	d101      	bne.n	8011cc4 <__swbuf_r+0x78>
 8011cc0:	68ac      	ldr	r4, [r5, #8]
 8011cc2:	e7d0      	b.n	8011c66 <__swbuf_r+0x1a>
 8011cc4:	4b09      	ldr	r3, [pc, #36]	; (8011cec <__swbuf_r+0xa0>)
 8011cc6:	429c      	cmp	r4, r3
 8011cc8:	bf08      	it	eq
 8011cca:	68ec      	ldreq	r4, [r5, #12]
 8011ccc:	e7cb      	b.n	8011c66 <__swbuf_r+0x1a>
 8011cce:	4621      	mov	r1, r4
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f000 f80d 	bl	8011cf0 <__swsetup_r>
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d0cc      	beq.n	8011c74 <__swbuf_r+0x28>
 8011cda:	f04f 37ff 	mov.w	r7, #4294967295
 8011cde:	4638      	mov	r0, r7
 8011ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	08014fc8 	.word	0x08014fc8
 8011ce8:	08014fe8 	.word	0x08014fe8
 8011cec:	08014fa8 	.word	0x08014fa8

08011cf0 <__swsetup_r>:
 8011cf0:	4b32      	ldr	r3, [pc, #200]	; (8011dbc <__swsetup_r+0xcc>)
 8011cf2:	b570      	push	{r4, r5, r6, lr}
 8011cf4:	681d      	ldr	r5, [r3, #0]
 8011cf6:	4606      	mov	r6, r0
 8011cf8:	460c      	mov	r4, r1
 8011cfa:	b125      	cbz	r5, 8011d06 <__swsetup_r+0x16>
 8011cfc:	69ab      	ldr	r3, [r5, #24]
 8011cfe:	b913      	cbnz	r3, 8011d06 <__swsetup_r+0x16>
 8011d00:	4628      	mov	r0, r5
 8011d02:	f000 ff2d 	bl	8012b60 <__sinit>
 8011d06:	4b2e      	ldr	r3, [pc, #184]	; (8011dc0 <__swsetup_r+0xd0>)
 8011d08:	429c      	cmp	r4, r3
 8011d0a:	d10f      	bne.n	8011d2c <__swsetup_r+0x3c>
 8011d0c:	686c      	ldr	r4, [r5, #4]
 8011d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	0715      	lsls	r5, r2, #28
 8011d16:	d42c      	bmi.n	8011d72 <__swsetup_r+0x82>
 8011d18:	06d0      	lsls	r0, r2, #27
 8011d1a:	d411      	bmi.n	8011d40 <__swsetup_r+0x50>
 8011d1c:	2209      	movs	r2, #9
 8011d1e:	6032      	str	r2, [r6, #0]
 8011d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d24:	81a3      	strh	r3, [r4, #12]
 8011d26:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2a:	e03e      	b.n	8011daa <__swsetup_r+0xba>
 8011d2c:	4b25      	ldr	r3, [pc, #148]	; (8011dc4 <__swsetup_r+0xd4>)
 8011d2e:	429c      	cmp	r4, r3
 8011d30:	d101      	bne.n	8011d36 <__swsetup_r+0x46>
 8011d32:	68ac      	ldr	r4, [r5, #8]
 8011d34:	e7eb      	b.n	8011d0e <__swsetup_r+0x1e>
 8011d36:	4b24      	ldr	r3, [pc, #144]	; (8011dc8 <__swsetup_r+0xd8>)
 8011d38:	429c      	cmp	r4, r3
 8011d3a:	bf08      	it	eq
 8011d3c:	68ec      	ldreq	r4, [r5, #12]
 8011d3e:	e7e6      	b.n	8011d0e <__swsetup_r+0x1e>
 8011d40:	0751      	lsls	r1, r2, #29
 8011d42:	d512      	bpl.n	8011d6a <__swsetup_r+0x7a>
 8011d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d46:	b141      	cbz	r1, 8011d5a <__swsetup_r+0x6a>
 8011d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d4c:	4299      	cmp	r1, r3
 8011d4e:	d002      	beq.n	8011d56 <__swsetup_r+0x66>
 8011d50:	4630      	mov	r0, r6
 8011d52:	f001 ff55 	bl	8013c00 <_free_r>
 8011d56:	2300      	movs	r3, #0
 8011d58:	6363      	str	r3, [r4, #52]	; 0x34
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d60:	81a3      	strh	r3, [r4, #12]
 8011d62:	2300      	movs	r3, #0
 8011d64:	6063      	str	r3, [r4, #4]
 8011d66:	6923      	ldr	r3, [r4, #16]
 8011d68:	6023      	str	r3, [r4, #0]
 8011d6a:	89a3      	ldrh	r3, [r4, #12]
 8011d6c:	f043 0308 	orr.w	r3, r3, #8
 8011d70:	81a3      	strh	r3, [r4, #12]
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	b94b      	cbnz	r3, 8011d8a <__swsetup_r+0x9a>
 8011d76:	89a3      	ldrh	r3, [r4, #12]
 8011d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d80:	d003      	beq.n	8011d8a <__swsetup_r+0x9a>
 8011d82:	4621      	mov	r1, r4
 8011d84:	4630      	mov	r0, r6
 8011d86:	f001 fad3 	bl	8013330 <__smakebuf_r>
 8011d8a:	89a2      	ldrh	r2, [r4, #12]
 8011d8c:	f012 0301 	ands.w	r3, r2, #1
 8011d90:	d00c      	beq.n	8011dac <__swsetup_r+0xbc>
 8011d92:	2300      	movs	r3, #0
 8011d94:	60a3      	str	r3, [r4, #8]
 8011d96:	6963      	ldr	r3, [r4, #20]
 8011d98:	425b      	negs	r3, r3
 8011d9a:	61a3      	str	r3, [r4, #24]
 8011d9c:	6923      	ldr	r3, [r4, #16]
 8011d9e:	b953      	cbnz	r3, 8011db6 <__swsetup_r+0xc6>
 8011da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011da4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011da8:	d1ba      	bne.n	8011d20 <__swsetup_r+0x30>
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	0792      	lsls	r2, r2, #30
 8011dae:	bf58      	it	pl
 8011db0:	6963      	ldrpl	r3, [r4, #20]
 8011db2:	60a3      	str	r3, [r4, #8]
 8011db4:	e7f2      	b.n	8011d9c <__swsetup_r+0xac>
 8011db6:	2000      	movs	r0, #0
 8011db8:	e7f7      	b.n	8011daa <__swsetup_r+0xba>
 8011dba:	bf00      	nop
 8011dbc:	20000168 	.word	0x20000168
 8011dc0:	08014fc8 	.word	0x08014fc8
 8011dc4:	08014fe8 	.word	0x08014fe8
 8011dc8:	08014fa8 	.word	0x08014fa8

08011dcc <quorem>:
 8011dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	6903      	ldr	r3, [r0, #16]
 8011dd2:	690c      	ldr	r4, [r1, #16]
 8011dd4:	42a3      	cmp	r3, r4
 8011dd6:	4680      	mov	r8, r0
 8011dd8:	f2c0 8082 	blt.w	8011ee0 <quorem+0x114>
 8011ddc:	3c01      	subs	r4, #1
 8011dde:	f101 0714 	add.w	r7, r1, #20
 8011de2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011de6:	f100 0614 	add.w	r6, r0, #20
 8011dea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011dee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011df2:	eb06 030c 	add.w	r3, r6, ip
 8011df6:	3501      	adds	r5, #1
 8011df8:	eb07 090c 	add.w	r9, r7, ip
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8011e02:	b395      	cbz	r5, 8011e6a <quorem+0x9e>
 8011e04:	f04f 0a00 	mov.w	sl, #0
 8011e08:	4638      	mov	r0, r7
 8011e0a:	46b6      	mov	lr, r6
 8011e0c:	46d3      	mov	fp, sl
 8011e0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e12:	b293      	uxth	r3, r2
 8011e14:	fb05 a303 	mla	r3, r5, r3, sl
 8011e18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	ebab 0303 	sub.w	r3, fp, r3
 8011e22:	0c12      	lsrs	r2, r2, #16
 8011e24:	f8de b000 	ldr.w	fp, [lr]
 8011e28:	fb05 a202 	mla	r2, r5, r2, sl
 8011e2c:	fa13 f38b 	uxtah	r3, r3, fp
 8011e30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011e34:	fa1f fb82 	uxth.w	fp, r2
 8011e38:	f8de 2000 	ldr.w	r2, [lr]
 8011e3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e4a:	4581      	cmp	r9, r0
 8011e4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011e50:	f84e 3b04 	str.w	r3, [lr], #4
 8011e54:	d2db      	bcs.n	8011e0e <quorem+0x42>
 8011e56:	f856 300c 	ldr.w	r3, [r6, ip]
 8011e5a:	b933      	cbnz	r3, 8011e6a <quorem+0x9e>
 8011e5c:	9b01      	ldr	r3, [sp, #4]
 8011e5e:	3b04      	subs	r3, #4
 8011e60:	429e      	cmp	r6, r3
 8011e62:	461a      	mov	r2, r3
 8011e64:	d330      	bcc.n	8011ec8 <quorem+0xfc>
 8011e66:	f8c8 4010 	str.w	r4, [r8, #16]
 8011e6a:	4640      	mov	r0, r8
 8011e6c:	f001 fd0e 	bl	801388c <__mcmp>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	db25      	blt.n	8011ec0 <quorem+0xf4>
 8011e74:	3501      	adds	r5, #1
 8011e76:	4630      	mov	r0, r6
 8011e78:	f04f 0c00 	mov.w	ip, #0
 8011e7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8011e80:	f8d0 e000 	ldr.w	lr, [r0]
 8011e84:	b293      	uxth	r3, r2
 8011e86:	ebac 0303 	sub.w	r3, ip, r3
 8011e8a:	0c12      	lsrs	r2, r2, #16
 8011e8c:	fa13 f38e 	uxtah	r3, r3, lr
 8011e90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e9e:	45b9      	cmp	r9, r7
 8011ea0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ea4:	f840 3b04 	str.w	r3, [r0], #4
 8011ea8:	d2e8      	bcs.n	8011e7c <quorem+0xb0>
 8011eaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011eae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011eb2:	b92a      	cbnz	r2, 8011ec0 <quorem+0xf4>
 8011eb4:	3b04      	subs	r3, #4
 8011eb6:	429e      	cmp	r6, r3
 8011eb8:	461a      	mov	r2, r3
 8011eba:	d30b      	bcc.n	8011ed4 <quorem+0x108>
 8011ebc:	f8c8 4010 	str.w	r4, [r8, #16]
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	b003      	add	sp, #12
 8011ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec8:	6812      	ldr	r2, [r2, #0]
 8011eca:	3b04      	subs	r3, #4
 8011ecc:	2a00      	cmp	r2, #0
 8011ece:	d1ca      	bne.n	8011e66 <quorem+0x9a>
 8011ed0:	3c01      	subs	r4, #1
 8011ed2:	e7c5      	b.n	8011e60 <quorem+0x94>
 8011ed4:	6812      	ldr	r2, [r2, #0]
 8011ed6:	3b04      	subs	r3, #4
 8011ed8:	2a00      	cmp	r2, #0
 8011eda:	d1ef      	bne.n	8011ebc <quorem+0xf0>
 8011edc:	3c01      	subs	r4, #1
 8011ede:	e7ea      	b.n	8011eb6 <quorem+0xea>
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	e7ee      	b.n	8011ec2 <quorem+0xf6>
 8011ee4:	0000      	movs	r0, r0
	...

08011ee8 <_dtoa_r>:
 8011ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eec:	ec57 6b10 	vmov	r6, r7, d0
 8011ef0:	b095      	sub	sp, #84	; 0x54
 8011ef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ef4:	9108      	str	r1, [sp, #32]
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8011efa:	9311      	str	r3, [sp, #68]	; 0x44
 8011efc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8011f00:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011f04:	b93d      	cbnz	r5, 8011f16 <_dtoa_r+0x2e>
 8011f06:	2010      	movs	r0, #16
 8011f08:	f001 fa52 	bl	80133b0 <malloc>
 8011f0c:	6260      	str	r0, [r4, #36]	; 0x24
 8011f0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f12:	6005      	str	r5, [r0, #0]
 8011f14:	60c5      	str	r5, [r0, #12]
 8011f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f18:	6819      	ldr	r1, [r3, #0]
 8011f1a:	b151      	cbz	r1, 8011f32 <_dtoa_r+0x4a>
 8011f1c:	685a      	ldr	r2, [r3, #4]
 8011f1e:	604a      	str	r2, [r1, #4]
 8011f20:	2301      	movs	r3, #1
 8011f22:	4093      	lsls	r3, r2
 8011f24:	608b      	str	r3, [r1, #8]
 8011f26:	4620      	mov	r0, r4
 8011f28:	f001 fa90 	bl	801344c <_Bfree>
 8011f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f2e:	2200      	movs	r2, #0
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	1e3b      	subs	r3, r7, #0
 8011f34:	bfb9      	ittee	lt
 8011f36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f3a:	9303      	strlt	r3, [sp, #12]
 8011f3c:	2300      	movge	r3, #0
 8011f3e:	f8c8 3000 	strge.w	r3, [r8]
 8011f42:	9d03      	ldr	r5, [sp, #12]
 8011f44:	4bac      	ldr	r3, [pc, #688]	; (80121f8 <_dtoa_r+0x310>)
 8011f46:	bfbc      	itt	lt
 8011f48:	2201      	movlt	r2, #1
 8011f4a:	f8c8 2000 	strlt.w	r2, [r8]
 8011f4e:	43ab      	bics	r3, r5
 8011f50:	d11b      	bne.n	8011f8a <_dtoa_r+0xa2>
 8011f52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f54:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f58:	6013      	str	r3, [r2, #0]
 8011f5a:	9b02      	ldr	r3, [sp, #8]
 8011f5c:	b923      	cbnz	r3, 8011f68 <_dtoa_r+0x80>
 8011f5e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011f62:	2d00      	cmp	r5, #0
 8011f64:	f000 84dd 	beq.w	8012922 <_dtoa_r+0xa3a>
 8011f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f6a:	b953      	cbnz	r3, 8011f82 <_dtoa_r+0x9a>
 8011f6c:	4ba3      	ldr	r3, [pc, #652]	; (80121fc <_dtoa_r+0x314>)
 8011f6e:	e020      	b.n	8011fb2 <_dtoa_r+0xca>
 8011f70:	4ba3      	ldr	r3, [pc, #652]	; (8012200 <_dtoa_r+0x318>)
 8011f72:	9304      	str	r3, [sp, #16]
 8011f74:	3308      	adds	r3, #8
 8011f76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011f78:	6013      	str	r3, [r2, #0]
 8011f7a:	9804      	ldr	r0, [sp, #16]
 8011f7c:	b015      	add	sp, #84	; 0x54
 8011f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f82:	4b9e      	ldr	r3, [pc, #632]	; (80121fc <_dtoa_r+0x314>)
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	3303      	adds	r3, #3
 8011f88:	e7f5      	b.n	8011f76 <_dtoa_r+0x8e>
 8011f8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f96:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f9a:	d10c      	bne.n	8011fb6 <_dtoa_r+0xce>
 8011f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	6013      	str	r3, [r2, #0]
 8011fa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	f000 84b9 	beq.w	801291c <_dtoa_r+0xa34>
 8011faa:	4b96      	ldr	r3, [pc, #600]	; (8012204 <_dtoa_r+0x31c>)
 8011fac:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	3b01      	subs	r3, #1
 8011fb2:	9304      	str	r3, [sp, #16]
 8011fb4:	e7e1      	b.n	8011f7a <_dtoa_r+0x92>
 8011fb6:	a913      	add	r1, sp, #76	; 0x4c
 8011fb8:	aa12      	add	r2, sp, #72	; 0x48
 8011fba:	ed9d 0b04 	vldr	d0, [sp, #16]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f001 fd52 	bl	8013a68 <__d2b>
 8011fc4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8011fc8:	9001      	str	r0, [sp, #4]
 8011fca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011fcc:	2e00      	cmp	r6, #0
 8011fce:	d046      	beq.n	801205e <_dtoa_r+0x176>
 8011fd0:	9805      	ldr	r0, [sp, #20]
 8011fd2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8011fd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fda:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8011fde:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fe2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8011fe6:	2700      	movs	r7, #0
 8011fe8:	ee07 aa90 	vmov	s15, sl
 8011fec:	ec43 2b16 	vmov	d6, r2, r3
 8011ff0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011ff4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80121e0 <_dtoa_r+0x2f8>
 8011ff8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011ffc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012000:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80121e8 <_dtoa_r+0x300>
 8012004:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012008:	eeb0 7b46 	vmov.f64	d7, d6
 801200c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80121f0 <_dtoa_r+0x308>
 8012010:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012014:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012018:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012020:	ee16 ba90 	vmov	fp, s13
 8012024:	d508      	bpl.n	8012038 <_dtoa_r+0x150>
 8012026:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801202a:	eeb4 6b47 	vcmp.f64	d6, d7
 801202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012032:	bf18      	it	ne
 8012034:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012038:	f1bb 0f16 	cmp.w	fp, #22
 801203c:	d834      	bhi.n	80120a8 <_dtoa_r+0x1c0>
 801203e:	4b72      	ldr	r3, [pc, #456]	; (8012208 <_dtoa_r+0x320>)
 8012040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012044:	ed93 7b00 	vldr	d7, [r3]
 8012048:	ed9d 6b02 	vldr	d6, [sp, #8]
 801204c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012054:	dd01      	ble.n	801205a <_dtoa_r+0x172>
 8012056:	f10b 3bff 	add.w	fp, fp, #4294967295
 801205a:	2300      	movs	r3, #0
 801205c:	e025      	b.n	80120aa <_dtoa_r+0x1c2>
 801205e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012060:	eb01 0a03 	add.w	sl, r1, r3
 8012064:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012068:	2b20      	cmp	r3, #32
 801206a:	dd17      	ble.n	801209c <_dtoa_r+0x1b4>
 801206c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012070:	9a02      	ldr	r2, [sp, #8]
 8012072:	409d      	lsls	r5, r3
 8012074:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012078:	fa22 f303 	lsr.w	r3, r2, r3
 801207c:	432b      	orrs	r3, r5
 801207e:	ee07 3a90 	vmov	s15, r3
 8012082:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012086:	f10a 3aff 	add.w	sl, sl, #4294967295
 801208a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801208e:	9805      	ldr	r0, [sp, #20]
 8012090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012094:	2701      	movs	r7, #1
 8012096:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801209a:	e7a5      	b.n	8011fe8 <_dtoa_r+0x100>
 801209c:	9a02      	ldr	r2, [sp, #8]
 801209e:	f1c3 0320 	rsb	r3, r3, #32
 80120a2:	fa02 f303 	lsl.w	r3, r2, r3
 80120a6:	e7ea      	b.n	801207e <_dtoa_r+0x196>
 80120a8:	2301      	movs	r3, #1
 80120aa:	eba1 0a0a 	sub.w	sl, r1, sl
 80120ae:	9310      	str	r3, [sp, #64]	; 0x40
 80120b0:	f1ba 0301 	subs.w	r3, sl, #1
 80120b4:	9307      	str	r3, [sp, #28]
 80120b6:	bf43      	ittte	mi
 80120b8:	2300      	movmi	r3, #0
 80120ba:	f1ca 0a01 	rsbmi	sl, sl, #1
 80120be:	9307      	strmi	r3, [sp, #28]
 80120c0:	f04f 0a00 	movpl.w	sl, #0
 80120c4:	f1bb 0f00 	cmp.w	fp, #0
 80120c8:	db19      	blt.n	80120fe <_dtoa_r+0x216>
 80120ca:	9b07      	ldr	r3, [sp, #28]
 80120cc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80120d0:	445b      	add	r3, fp
 80120d2:	9307      	str	r3, [sp, #28]
 80120d4:	f04f 0800 	mov.w	r8, #0
 80120d8:	9b08      	ldr	r3, [sp, #32]
 80120da:	2b09      	cmp	r3, #9
 80120dc:	d866      	bhi.n	80121ac <_dtoa_r+0x2c4>
 80120de:	2b05      	cmp	r3, #5
 80120e0:	bfc4      	itt	gt
 80120e2:	3b04      	subgt	r3, #4
 80120e4:	9308      	strgt	r3, [sp, #32]
 80120e6:	9b08      	ldr	r3, [sp, #32]
 80120e8:	f1a3 0302 	sub.w	r3, r3, #2
 80120ec:	bfcc      	ite	gt
 80120ee:	2500      	movgt	r5, #0
 80120f0:	2501      	movle	r5, #1
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	d866      	bhi.n	80121c4 <_dtoa_r+0x2dc>
 80120f6:	e8df f003 	tbb	[pc, r3]
 80120fa:	5755      	.short	0x5755
 80120fc:	4909      	.short	0x4909
 80120fe:	2300      	movs	r3, #0
 8012100:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012104:	f1cb 0800 	rsb	r8, fp, #0
 8012108:	930b      	str	r3, [sp, #44]	; 0x2c
 801210a:	e7e5      	b.n	80120d8 <_dtoa_r+0x1f0>
 801210c:	2301      	movs	r3, #1
 801210e:	9309      	str	r3, [sp, #36]	; 0x24
 8012110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012112:	2b00      	cmp	r3, #0
 8012114:	dd59      	ble.n	80121ca <_dtoa_r+0x2e2>
 8012116:	9306      	str	r3, [sp, #24]
 8012118:	4699      	mov	r9, r3
 801211a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801211c:	2200      	movs	r2, #0
 801211e:	6072      	str	r2, [r6, #4]
 8012120:	2204      	movs	r2, #4
 8012122:	f102 0014 	add.w	r0, r2, #20
 8012126:	4298      	cmp	r0, r3
 8012128:	6871      	ldr	r1, [r6, #4]
 801212a:	d953      	bls.n	80121d4 <_dtoa_r+0x2ec>
 801212c:	4620      	mov	r0, r4
 801212e:	f001 f959 	bl	80133e4 <_Balloc>
 8012132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012134:	6030      	str	r0, [r6, #0]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	9304      	str	r3, [sp, #16]
 801213a:	f1b9 0f0e 	cmp.w	r9, #14
 801213e:	f200 80c2 	bhi.w	80122c6 <_dtoa_r+0x3de>
 8012142:	2d00      	cmp	r5, #0
 8012144:	f000 80bf 	beq.w	80122c6 <_dtoa_r+0x3de>
 8012148:	ed9d 7b02 	vldr	d7, [sp, #8]
 801214c:	f1bb 0f00 	cmp.w	fp, #0
 8012150:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012154:	f340 80e6 	ble.w	8012324 <_dtoa_r+0x43c>
 8012158:	4a2b      	ldr	r2, [pc, #172]	; (8012208 <_dtoa_r+0x320>)
 801215a:	f00b 030f 	and.w	r3, fp, #15
 801215e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012162:	ed93 7b00 	vldr	d7, [r3]
 8012166:	ea4f 132b 	mov.w	r3, fp, asr #4
 801216a:	06da      	lsls	r2, r3, #27
 801216c:	f140 80d8 	bpl.w	8012320 <_dtoa_r+0x438>
 8012170:	4a26      	ldr	r2, [pc, #152]	; (801220c <_dtoa_r+0x324>)
 8012172:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8012176:	ed92 6b08 	vldr	d6, [r2, #32]
 801217a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801217e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012182:	f003 030f 	and.w	r3, r3, #15
 8012186:	2203      	movs	r2, #3
 8012188:	4920      	ldr	r1, [pc, #128]	; (801220c <_dtoa_r+0x324>)
 801218a:	e04a      	b.n	8012222 <_dtoa_r+0x33a>
 801218c:	2301      	movs	r3, #1
 801218e:	9309      	str	r3, [sp, #36]	; 0x24
 8012190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012192:	445b      	add	r3, fp
 8012194:	f103 0901 	add.w	r9, r3, #1
 8012198:	9306      	str	r3, [sp, #24]
 801219a:	464b      	mov	r3, r9
 801219c:	2b01      	cmp	r3, #1
 801219e:	bfb8      	it	lt
 80121a0:	2301      	movlt	r3, #1
 80121a2:	e7ba      	b.n	801211a <_dtoa_r+0x232>
 80121a4:	2300      	movs	r3, #0
 80121a6:	e7b2      	b.n	801210e <_dtoa_r+0x226>
 80121a8:	2300      	movs	r3, #0
 80121aa:	e7f0      	b.n	801218e <_dtoa_r+0x2a6>
 80121ac:	2501      	movs	r5, #1
 80121ae:	2300      	movs	r3, #0
 80121b0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80121b4:	f04f 33ff 	mov.w	r3, #4294967295
 80121b8:	9306      	str	r3, [sp, #24]
 80121ba:	4699      	mov	r9, r3
 80121bc:	2200      	movs	r2, #0
 80121be:	2312      	movs	r3, #18
 80121c0:	920a      	str	r2, [sp, #40]	; 0x28
 80121c2:	e7aa      	b.n	801211a <_dtoa_r+0x232>
 80121c4:	2301      	movs	r3, #1
 80121c6:	9309      	str	r3, [sp, #36]	; 0x24
 80121c8:	e7f4      	b.n	80121b4 <_dtoa_r+0x2cc>
 80121ca:	2301      	movs	r3, #1
 80121cc:	9306      	str	r3, [sp, #24]
 80121ce:	4699      	mov	r9, r3
 80121d0:	461a      	mov	r2, r3
 80121d2:	e7f5      	b.n	80121c0 <_dtoa_r+0x2d8>
 80121d4:	3101      	adds	r1, #1
 80121d6:	6071      	str	r1, [r6, #4]
 80121d8:	0052      	lsls	r2, r2, #1
 80121da:	e7a2      	b.n	8012122 <_dtoa_r+0x23a>
 80121dc:	f3af 8000 	nop.w
 80121e0:	636f4361 	.word	0x636f4361
 80121e4:	3fd287a7 	.word	0x3fd287a7
 80121e8:	8b60c8b3 	.word	0x8b60c8b3
 80121ec:	3fc68a28 	.word	0x3fc68a28
 80121f0:	509f79fb 	.word	0x509f79fb
 80121f4:	3fd34413 	.word	0x3fd34413
 80121f8:	7ff00000 	.word	0x7ff00000
 80121fc:	08014fa1 	.word	0x08014fa1
 8012200:	08014f98 	.word	0x08014f98
 8012204:	08014f1d 	.word	0x08014f1d
 8012208:	08015040 	.word	0x08015040
 801220c:	08015018 	.word	0x08015018
 8012210:	07de      	lsls	r6, r3, #31
 8012212:	d504      	bpl.n	801221e <_dtoa_r+0x336>
 8012214:	ed91 6b00 	vldr	d6, [r1]
 8012218:	3201      	adds	r2, #1
 801221a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801221e:	105b      	asrs	r3, r3, #1
 8012220:	3108      	adds	r1, #8
 8012222:	2b00      	cmp	r3, #0
 8012224:	d1f4      	bne.n	8012210 <_dtoa_r+0x328>
 8012226:	ed9d 6b02 	vldr	d6, [sp, #8]
 801222a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801222e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012234:	2b00      	cmp	r3, #0
 8012236:	f000 80a7 	beq.w	8012388 <_dtoa_r+0x4a0>
 801223a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801223e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012242:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224a:	f140 809d 	bpl.w	8012388 <_dtoa_r+0x4a0>
 801224e:	f1b9 0f00 	cmp.w	r9, #0
 8012252:	f000 8099 	beq.w	8012388 <_dtoa_r+0x4a0>
 8012256:	9b06      	ldr	r3, [sp, #24]
 8012258:	2b00      	cmp	r3, #0
 801225a:	dd30      	ble.n	80122be <_dtoa_r+0x3d6>
 801225c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012260:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012264:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012268:	9d06      	ldr	r5, [sp, #24]
 801226a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801226e:	3201      	adds	r2, #1
 8012270:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012274:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012278:	ee07 2a90 	vmov	s15, r2
 801227c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012280:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012284:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012288:	9a03      	ldr	r2, [sp, #12]
 801228a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801228e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8012292:	2d00      	cmp	r5, #0
 8012294:	d17b      	bne.n	801238e <_dtoa_r+0x4a6>
 8012296:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801229a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801229e:	ec41 0b17 	vmov	d7, r0, r1
 80122a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122aa:	f300 8253 	bgt.w	8012754 <_dtoa_r+0x86c>
 80122ae:	eeb1 7b47 	vneg.f64	d7, d7
 80122b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ba:	f100 8249 	bmi.w	8012750 <_dtoa_r+0x868>
 80122be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80122c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f2c0 8119 	blt.w	8012500 <_dtoa_r+0x618>
 80122ce:	f1bb 0f0e 	cmp.w	fp, #14
 80122d2:	f300 8115 	bgt.w	8012500 <_dtoa_r+0x618>
 80122d6:	4bc3      	ldr	r3, [pc, #780]	; (80125e4 <_dtoa_r+0x6fc>)
 80122d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80122dc:	ed93 6b00 	vldr	d6, [r3]
 80122e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f280 80ba 	bge.w	801245c <_dtoa_r+0x574>
 80122e8:	f1b9 0f00 	cmp.w	r9, #0
 80122ec:	f300 80b6 	bgt.w	801245c <_dtoa_r+0x574>
 80122f0:	f040 822d 	bne.w	801274e <_dtoa_r+0x866>
 80122f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80122f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012300:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012308:	464d      	mov	r5, r9
 801230a:	464f      	mov	r7, r9
 801230c:	f280 8204 	bge.w	8012718 <_dtoa_r+0x830>
 8012310:	9b04      	ldr	r3, [sp, #16]
 8012312:	9a04      	ldr	r2, [sp, #16]
 8012314:	1c5e      	adds	r6, r3, #1
 8012316:	2331      	movs	r3, #49	; 0x31
 8012318:	7013      	strb	r3, [r2, #0]
 801231a:	f10b 0b01 	add.w	fp, fp, #1
 801231e:	e1ff      	b.n	8012720 <_dtoa_r+0x838>
 8012320:	2202      	movs	r2, #2
 8012322:	e731      	b.n	8012188 <_dtoa_r+0x2a0>
 8012324:	d02e      	beq.n	8012384 <_dtoa_r+0x49c>
 8012326:	f1cb 0300 	rsb	r3, fp, #0
 801232a:	4aae      	ldr	r2, [pc, #696]	; (80125e4 <_dtoa_r+0x6fc>)
 801232c:	f003 010f 	and.w	r1, r3, #15
 8012330:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012334:	ed92 7b00 	vldr	d7, [r2]
 8012338:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801233c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012340:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012344:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012348:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801234c:	49a6      	ldr	r1, [pc, #664]	; (80125e8 <_dtoa_r+0x700>)
 801234e:	111b      	asrs	r3, r3, #4
 8012350:	2000      	movs	r0, #0
 8012352:	2202      	movs	r2, #2
 8012354:	b93b      	cbnz	r3, 8012366 <_dtoa_r+0x47e>
 8012356:	2800      	cmp	r0, #0
 8012358:	f43f af6b 	beq.w	8012232 <_dtoa_r+0x34a>
 801235c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012364:	e765      	b.n	8012232 <_dtoa_r+0x34a>
 8012366:	07dd      	lsls	r5, r3, #31
 8012368:	d509      	bpl.n	801237e <_dtoa_r+0x496>
 801236a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801236e:	ed91 7b00 	vldr	d7, [r1]
 8012372:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012376:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801237a:	3201      	adds	r2, #1
 801237c:	2001      	movs	r0, #1
 801237e:	105b      	asrs	r3, r3, #1
 8012380:	3108      	adds	r1, #8
 8012382:	e7e7      	b.n	8012354 <_dtoa_r+0x46c>
 8012384:	2202      	movs	r2, #2
 8012386:	e754      	b.n	8012232 <_dtoa_r+0x34a>
 8012388:	465b      	mov	r3, fp
 801238a:	464d      	mov	r5, r9
 801238c:	e770      	b.n	8012270 <_dtoa_r+0x388>
 801238e:	4a95      	ldr	r2, [pc, #596]	; (80125e4 <_dtoa_r+0x6fc>)
 8012390:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012394:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801239a:	ec41 0b17 	vmov	d7, r0, r1
 801239e:	b35a      	cbz	r2, 80123f8 <_dtoa_r+0x510>
 80123a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80123a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80123a8:	9e04      	ldr	r6, [sp, #16]
 80123aa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80123ae:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80123b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80123b6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123ba:	ee14 2a90 	vmov	r2, s9
 80123be:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123c2:	3230      	adds	r2, #48	; 0x30
 80123c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80123c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d0:	f806 2b01 	strb.w	r2, [r6], #1
 80123d4:	d43b      	bmi.n	801244e <_dtoa_r+0x566>
 80123d6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80123da:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80123de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e2:	d472      	bmi.n	80124ca <_dtoa_r+0x5e2>
 80123e4:	9a04      	ldr	r2, [sp, #16]
 80123e6:	1ab2      	subs	r2, r6, r2
 80123e8:	4295      	cmp	r5, r2
 80123ea:	f77f af68 	ble.w	80122be <_dtoa_r+0x3d6>
 80123ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 80123f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80123f6:	e7de      	b.n	80123b6 <_dtoa_r+0x4ce>
 80123f8:	9a04      	ldr	r2, [sp, #16]
 80123fa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80123fe:	1956      	adds	r6, r2, r5
 8012400:	4611      	mov	r1, r2
 8012402:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012406:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801240a:	ee14 2a90 	vmov	r2, s9
 801240e:	3230      	adds	r2, #48	; 0x30
 8012410:	f801 2b01 	strb.w	r2, [r1], #1
 8012414:	42b1      	cmp	r1, r6
 8012416:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801241a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801241e:	d11a      	bne.n	8012456 <_dtoa_r+0x56e>
 8012420:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012424:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012428:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012430:	dc4b      	bgt.n	80124ca <_dtoa_r+0x5e2>
 8012432:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012436:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	f57f af3e 	bpl.w	80122be <_dtoa_r+0x3d6>
 8012442:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012446:	2a30      	cmp	r2, #48	; 0x30
 8012448:	f106 31ff 	add.w	r1, r6, #4294967295
 801244c:	d001      	beq.n	8012452 <_dtoa_r+0x56a>
 801244e:	469b      	mov	fp, r3
 8012450:	e02a      	b.n	80124a8 <_dtoa_r+0x5c0>
 8012452:	460e      	mov	r6, r1
 8012454:	e7f5      	b.n	8012442 <_dtoa_r+0x55a>
 8012456:	ee26 6b03 	vmul.f64	d6, d6, d3
 801245a:	e7d4      	b.n	8012406 <_dtoa_r+0x51e>
 801245c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012460:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012464:	9e04      	ldr	r6, [sp, #16]
 8012466:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801246a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801246e:	ee15 3a10 	vmov	r3, s10
 8012472:	3330      	adds	r3, #48	; 0x30
 8012474:	f806 3b01 	strb.w	r3, [r6], #1
 8012478:	9b04      	ldr	r3, [sp, #16]
 801247a:	1af3      	subs	r3, r6, r3
 801247c:	4599      	cmp	r9, r3
 801247e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012482:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012486:	d133      	bne.n	80124f0 <_dtoa_r+0x608>
 8012488:	ee37 7b07 	vadd.f64	d7, d7, d7
 801248c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	dc18      	bgt.n	80124c8 <_dtoa_r+0x5e0>
 8012496:	eeb4 7b46 	vcmp.f64	d7, d6
 801249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249e:	d103      	bne.n	80124a8 <_dtoa_r+0x5c0>
 80124a0:	ee15 3a10 	vmov	r3, s10
 80124a4:	07db      	lsls	r3, r3, #31
 80124a6:	d40f      	bmi.n	80124c8 <_dtoa_r+0x5e0>
 80124a8:	9901      	ldr	r1, [sp, #4]
 80124aa:	4620      	mov	r0, r4
 80124ac:	f000 ffce 	bl	801344c <_Bfree>
 80124b0:	2300      	movs	r3, #0
 80124b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124b4:	7033      	strb	r3, [r6, #0]
 80124b6:	f10b 0301 	add.w	r3, fp, #1
 80124ba:	6013      	str	r3, [r2, #0]
 80124bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f43f ad5b 	beq.w	8011f7a <_dtoa_r+0x92>
 80124c4:	601e      	str	r6, [r3, #0]
 80124c6:	e558      	b.n	8011f7a <_dtoa_r+0x92>
 80124c8:	465b      	mov	r3, fp
 80124ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80124ce:	2939      	cmp	r1, #57	; 0x39
 80124d0:	f106 32ff 	add.w	r2, r6, #4294967295
 80124d4:	d106      	bne.n	80124e4 <_dtoa_r+0x5fc>
 80124d6:	9904      	ldr	r1, [sp, #16]
 80124d8:	4291      	cmp	r1, r2
 80124da:	d107      	bne.n	80124ec <_dtoa_r+0x604>
 80124dc:	2230      	movs	r2, #48	; 0x30
 80124de:	700a      	strb	r2, [r1, #0]
 80124e0:	3301      	adds	r3, #1
 80124e2:	460a      	mov	r2, r1
 80124e4:	7811      	ldrb	r1, [r2, #0]
 80124e6:	3101      	adds	r1, #1
 80124e8:	7011      	strb	r1, [r2, #0]
 80124ea:	e7b0      	b.n	801244e <_dtoa_r+0x566>
 80124ec:	4616      	mov	r6, r2
 80124ee:	e7ec      	b.n	80124ca <_dtoa_r+0x5e2>
 80124f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80124f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fc:	d1b3      	bne.n	8012466 <_dtoa_r+0x57e>
 80124fe:	e7d3      	b.n	80124a8 <_dtoa_r+0x5c0>
 8012500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012502:	2a00      	cmp	r2, #0
 8012504:	f000 808d 	beq.w	8012622 <_dtoa_r+0x73a>
 8012508:	9a08      	ldr	r2, [sp, #32]
 801250a:	2a01      	cmp	r2, #1
 801250c:	dc72      	bgt.n	80125f4 <_dtoa_r+0x70c>
 801250e:	2f00      	cmp	r7, #0
 8012510:	d06c      	beq.n	80125ec <_dtoa_r+0x704>
 8012512:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012516:	4645      	mov	r5, r8
 8012518:	4656      	mov	r6, sl
 801251a:	9a07      	ldr	r2, [sp, #28]
 801251c:	2101      	movs	r1, #1
 801251e:	441a      	add	r2, r3
 8012520:	4620      	mov	r0, r4
 8012522:	449a      	add	sl, r3
 8012524:	9207      	str	r2, [sp, #28]
 8012526:	f001 f86f 	bl	8013608 <__i2b>
 801252a:	4607      	mov	r7, r0
 801252c:	2e00      	cmp	r6, #0
 801252e:	dd0b      	ble.n	8012548 <_dtoa_r+0x660>
 8012530:	9b07      	ldr	r3, [sp, #28]
 8012532:	2b00      	cmp	r3, #0
 8012534:	dd08      	ble.n	8012548 <_dtoa_r+0x660>
 8012536:	42b3      	cmp	r3, r6
 8012538:	9a07      	ldr	r2, [sp, #28]
 801253a:	bfa8      	it	ge
 801253c:	4633      	movge	r3, r6
 801253e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012542:	1af6      	subs	r6, r6, r3
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	9307      	str	r3, [sp, #28]
 8012548:	f1b8 0f00 	cmp.w	r8, #0
 801254c:	d01d      	beq.n	801258a <_dtoa_r+0x6a2>
 801254e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012550:	2b00      	cmp	r3, #0
 8012552:	d06a      	beq.n	801262a <_dtoa_r+0x742>
 8012554:	b18d      	cbz	r5, 801257a <_dtoa_r+0x692>
 8012556:	4639      	mov	r1, r7
 8012558:	462a      	mov	r2, r5
 801255a:	4620      	mov	r0, r4
 801255c:	f001 f8f4 	bl	8013748 <__pow5mult>
 8012560:	9a01      	ldr	r2, [sp, #4]
 8012562:	4601      	mov	r1, r0
 8012564:	4607      	mov	r7, r0
 8012566:	4620      	mov	r0, r4
 8012568:	f001 f857 	bl	801361a <__multiply>
 801256c:	9901      	ldr	r1, [sp, #4]
 801256e:	900c      	str	r0, [sp, #48]	; 0x30
 8012570:	4620      	mov	r0, r4
 8012572:	f000 ff6b 	bl	801344c <_Bfree>
 8012576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	ebb8 0205 	subs.w	r2, r8, r5
 801257e:	d004      	beq.n	801258a <_dtoa_r+0x6a2>
 8012580:	9901      	ldr	r1, [sp, #4]
 8012582:	4620      	mov	r0, r4
 8012584:	f001 f8e0 	bl	8013748 <__pow5mult>
 8012588:	9001      	str	r0, [sp, #4]
 801258a:	2101      	movs	r1, #1
 801258c:	4620      	mov	r0, r4
 801258e:	f001 f83b 	bl	8013608 <__i2b>
 8012592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012594:	4605      	mov	r5, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	f000 81ca 	beq.w	8012930 <_dtoa_r+0xa48>
 801259c:	461a      	mov	r2, r3
 801259e:	4601      	mov	r1, r0
 80125a0:	4620      	mov	r0, r4
 80125a2:	f001 f8d1 	bl	8013748 <__pow5mult>
 80125a6:	9b08      	ldr	r3, [sp, #32]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	4605      	mov	r5, r0
 80125ac:	dc44      	bgt.n	8012638 <_dtoa_r+0x750>
 80125ae:	9b02      	ldr	r3, [sp, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d13c      	bne.n	801262e <_dtoa_r+0x746>
 80125b4:	9b03      	ldr	r3, [sp, #12]
 80125b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d137      	bne.n	801262e <_dtoa_r+0x746>
 80125be:	9b03      	ldr	r3, [sp, #12]
 80125c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80125c4:	0d1b      	lsrs	r3, r3, #20
 80125c6:	051b      	lsls	r3, r3, #20
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d033      	beq.n	8012634 <_dtoa_r+0x74c>
 80125cc:	9b07      	ldr	r3, [sp, #28]
 80125ce:	3301      	adds	r3, #1
 80125d0:	f10a 0a01 	add.w	sl, sl, #1
 80125d4:	9307      	str	r3, [sp, #28]
 80125d6:	f04f 0801 	mov.w	r8, #1
 80125da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125dc:	bb73      	cbnz	r3, 801263c <_dtoa_r+0x754>
 80125de:	2001      	movs	r0, #1
 80125e0:	e034      	b.n	801264c <_dtoa_r+0x764>
 80125e2:	bf00      	nop
 80125e4:	08015040 	.word	0x08015040
 80125e8:	08015018 	.word	0x08015018
 80125ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80125f2:	e790      	b.n	8012516 <_dtoa_r+0x62e>
 80125f4:	f109 35ff 	add.w	r5, r9, #4294967295
 80125f8:	45a8      	cmp	r8, r5
 80125fa:	bfbf      	itttt	lt
 80125fc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80125fe:	eba5 0808 	sublt.w	r8, r5, r8
 8012602:	4443      	addlt	r3, r8
 8012604:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012606:	bfb6      	itet	lt
 8012608:	46a8      	movlt	r8, r5
 801260a:	eba8 0505 	subge.w	r5, r8, r5
 801260e:	2500      	movlt	r5, #0
 8012610:	f1b9 0f00 	cmp.w	r9, #0
 8012614:	bfb9      	ittee	lt
 8012616:	ebaa 0609 	sublt.w	r6, sl, r9
 801261a:	2300      	movlt	r3, #0
 801261c:	4656      	movge	r6, sl
 801261e:	464b      	movge	r3, r9
 8012620:	e77b      	b.n	801251a <_dtoa_r+0x632>
 8012622:	4645      	mov	r5, r8
 8012624:	4656      	mov	r6, sl
 8012626:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012628:	e780      	b.n	801252c <_dtoa_r+0x644>
 801262a:	4642      	mov	r2, r8
 801262c:	e7a8      	b.n	8012580 <_dtoa_r+0x698>
 801262e:	f04f 0800 	mov.w	r8, #0
 8012632:	e7d2      	b.n	80125da <_dtoa_r+0x6f2>
 8012634:	4698      	mov	r8, r3
 8012636:	e7d0      	b.n	80125da <_dtoa_r+0x6f2>
 8012638:	f04f 0800 	mov.w	r8, #0
 801263c:	692b      	ldr	r3, [r5, #16]
 801263e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012642:	6918      	ldr	r0, [r3, #16]
 8012644:	f000 ff92 	bl	801356c <__hi0bits>
 8012648:	f1c0 0020 	rsb	r0, r0, #32
 801264c:	9b07      	ldr	r3, [sp, #28]
 801264e:	4418      	add	r0, r3
 8012650:	f010 001f 	ands.w	r0, r0, #31
 8012654:	d047      	beq.n	80126e6 <_dtoa_r+0x7fe>
 8012656:	f1c0 0320 	rsb	r3, r0, #32
 801265a:	2b04      	cmp	r3, #4
 801265c:	dd3b      	ble.n	80126d6 <_dtoa_r+0x7ee>
 801265e:	9b07      	ldr	r3, [sp, #28]
 8012660:	f1c0 001c 	rsb	r0, r0, #28
 8012664:	4482      	add	sl, r0
 8012666:	4406      	add	r6, r0
 8012668:	4403      	add	r3, r0
 801266a:	9307      	str	r3, [sp, #28]
 801266c:	f1ba 0f00 	cmp.w	sl, #0
 8012670:	dd05      	ble.n	801267e <_dtoa_r+0x796>
 8012672:	4652      	mov	r2, sl
 8012674:	9901      	ldr	r1, [sp, #4]
 8012676:	4620      	mov	r0, r4
 8012678:	f001 f8b4 	bl	80137e4 <__lshift>
 801267c:	9001      	str	r0, [sp, #4]
 801267e:	9b07      	ldr	r3, [sp, #28]
 8012680:	2b00      	cmp	r3, #0
 8012682:	dd05      	ble.n	8012690 <_dtoa_r+0x7a8>
 8012684:	4629      	mov	r1, r5
 8012686:	461a      	mov	r2, r3
 8012688:	4620      	mov	r0, r4
 801268a:	f001 f8ab 	bl	80137e4 <__lshift>
 801268e:	4605      	mov	r5, r0
 8012690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012692:	b353      	cbz	r3, 80126ea <_dtoa_r+0x802>
 8012694:	4629      	mov	r1, r5
 8012696:	9801      	ldr	r0, [sp, #4]
 8012698:	f001 f8f8 	bl	801388c <__mcmp>
 801269c:	2800      	cmp	r0, #0
 801269e:	da24      	bge.n	80126ea <_dtoa_r+0x802>
 80126a0:	2300      	movs	r3, #0
 80126a2:	220a      	movs	r2, #10
 80126a4:	9901      	ldr	r1, [sp, #4]
 80126a6:	4620      	mov	r0, r4
 80126a8:	f000 fee7 	bl	801347a <__multadd>
 80126ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ae:	9001      	str	r0, [sp, #4]
 80126b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f000 8142 	beq.w	801293e <_dtoa_r+0xa56>
 80126ba:	2300      	movs	r3, #0
 80126bc:	4639      	mov	r1, r7
 80126be:	220a      	movs	r2, #10
 80126c0:	4620      	mov	r0, r4
 80126c2:	f000 feda 	bl	801347a <__multadd>
 80126c6:	9b06      	ldr	r3, [sp, #24]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	4607      	mov	r7, r0
 80126cc:	dc4b      	bgt.n	8012766 <_dtoa_r+0x87e>
 80126ce:	9b08      	ldr	r3, [sp, #32]
 80126d0:	2b02      	cmp	r3, #2
 80126d2:	dd48      	ble.n	8012766 <_dtoa_r+0x87e>
 80126d4:	e011      	b.n	80126fa <_dtoa_r+0x812>
 80126d6:	d0c9      	beq.n	801266c <_dtoa_r+0x784>
 80126d8:	9a07      	ldr	r2, [sp, #28]
 80126da:	331c      	adds	r3, #28
 80126dc:	441a      	add	r2, r3
 80126de:	449a      	add	sl, r3
 80126e0:	441e      	add	r6, r3
 80126e2:	4613      	mov	r3, r2
 80126e4:	e7c1      	b.n	801266a <_dtoa_r+0x782>
 80126e6:	4603      	mov	r3, r0
 80126e8:	e7f6      	b.n	80126d8 <_dtoa_r+0x7f0>
 80126ea:	f1b9 0f00 	cmp.w	r9, #0
 80126ee:	dc34      	bgt.n	801275a <_dtoa_r+0x872>
 80126f0:	9b08      	ldr	r3, [sp, #32]
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	dd31      	ble.n	801275a <_dtoa_r+0x872>
 80126f6:	f8cd 9018 	str.w	r9, [sp, #24]
 80126fa:	9b06      	ldr	r3, [sp, #24]
 80126fc:	b963      	cbnz	r3, 8012718 <_dtoa_r+0x830>
 80126fe:	4629      	mov	r1, r5
 8012700:	2205      	movs	r2, #5
 8012702:	4620      	mov	r0, r4
 8012704:	f000 feb9 	bl	801347a <__multadd>
 8012708:	4601      	mov	r1, r0
 801270a:	4605      	mov	r5, r0
 801270c:	9801      	ldr	r0, [sp, #4]
 801270e:	f001 f8bd 	bl	801388c <__mcmp>
 8012712:	2800      	cmp	r0, #0
 8012714:	f73f adfc 	bgt.w	8012310 <_dtoa_r+0x428>
 8012718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801271a:	9e04      	ldr	r6, [sp, #16]
 801271c:	ea6f 0b03 	mvn.w	fp, r3
 8012720:	f04f 0900 	mov.w	r9, #0
 8012724:	4629      	mov	r1, r5
 8012726:	4620      	mov	r0, r4
 8012728:	f000 fe90 	bl	801344c <_Bfree>
 801272c:	2f00      	cmp	r7, #0
 801272e:	f43f aebb 	beq.w	80124a8 <_dtoa_r+0x5c0>
 8012732:	f1b9 0f00 	cmp.w	r9, #0
 8012736:	d005      	beq.n	8012744 <_dtoa_r+0x85c>
 8012738:	45b9      	cmp	r9, r7
 801273a:	d003      	beq.n	8012744 <_dtoa_r+0x85c>
 801273c:	4649      	mov	r1, r9
 801273e:	4620      	mov	r0, r4
 8012740:	f000 fe84 	bl	801344c <_Bfree>
 8012744:	4639      	mov	r1, r7
 8012746:	4620      	mov	r0, r4
 8012748:	f000 fe80 	bl	801344c <_Bfree>
 801274c:	e6ac      	b.n	80124a8 <_dtoa_r+0x5c0>
 801274e:	2500      	movs	r5, #0
 8012750:	462f      	mov	r7, r5
 8012752:	e7e1      	b.n	8012718 <_dtoa_r+0x830>
 8012754:	469b      	mov	fp, r3
 8012756:	462f      	mov	r7, r5
 8012758:	e5da      	b.n	8012310 <_dtoa_r+0x428>
 801275a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801275c:	f8cd 9018 	str.w	r9, [sp, #24]
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 80f3 	beq.w	801294c <_dtoa_r+0xa64>
 8012766:	2e00      	cmp	r6, #0
 8012768:	dd05      	ble.n	8012776 <_dtoa_r+0x88e>
 801276a:	4639      	mov	r1, r7
 801276c:	4632      	mov	r2, r6
 801276e:	4620      	mov	r0, r4
 8012770:	f001 f838 	bl	80137e4 <__lshift>
 8012774:	4607      	mov	r7, r0
 8012776:	f1b8 0f00 	cmp.w	r8, #0
 801277a:	d04c      	beq.n	8012816 <_dtoa_r+0x92e>
 801277c:	6879      	ldr	r1, [r7, #4]
 801277e:	4620      	mov	r0, r4
 8012780:	f000 fe30 	bl	80133e4 <_Balloc>
 8012784:	693a      	ldr	r2, [r7, #16]
 8012786:	3202      	adds	r2, #2
 8012788:	4606      	mov	r6, r0
 801278a:	0092      	lsls	r2, r2, #2
 801278c:	f107 010c 	add.w	r1, r7, #12
 8012790:	300c      	adds	r0, #12
 8012792:	f7fd fd2d 	bl	80101f0 <memcpy>
 8012796:	2201      	movs	r2, #1
 8012798:	4631      	mov	r1, r6
 801279a:	4620      	mov	r0, r4
 801279c:	f001 f822 	bl	80137e4 <__lshift>
 80127a0:	9b02      	ldr	r3, [sp, #8]
 80127a2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80127a6:	f003 0301 	and.w	r3, r3, #1
 80127aa:	46b9      	mov	r9, r7
 80127ac:	9307      	str	r3, [sp, #28]
 80127ae:	4607      	mov	r7, r0
 80127b0:	4629      	mov	r1, r5
 80127b2:	9801      	ldr	r0, [sp, #4]
 80127b4:	f7ff fb0a 	bl	8011dcc <quorem>
 80127b8:	4649      	mov	r1, r9
 80127ba:	4606      	mov	r6, r0
 80127bc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80127c0:	9801      	ldr	r0, [sp, #4]
 80127c2:	f001 f863 	bl	801388c <__mcmp>
 80127c6:	463a      	mov	r2, r7
 80127c8:	9002      	str	r0, [sp, #8]
 80127ca:	4629      	mov	r1, r5
 80127cc:	4620      	mov	r0, r4
 80127ce:	f001 f877 	bl	80138c0 <__mdiff>
 80127d2:	68c3      	ldr	r3, [r0, #12]
 80127d4:	4602      	mov	r2, r0
 80127d6:	bb03      	cbnz	r3, 801281a <_dtoa_r+0x932>
 80127d8:	4601      	mov	r1, r0
 80127da:	9009      	str	r0, [sp, #36]	; 0x24
 80127dc:	9801      	ldr	r0, [sp, #4]
 80127de:	f001 f855 	bl	801388c <__mcmp>
 80127e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127e4:	4603      	mov	r3, r0
 80127e6:	4611      	mov	r1, r2
 80127e8:	4620      	mov	r0, r4
 80127ea:	9309      	str	r3, [sp, #36]	; 0x24
 80127ec:	f000 fe2e 	bl	801344c <_Bfree>
 80127f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f2:	b9a3      	cbnz	r3, 801281e <_dtoa_r+0x936>
 80127f4:	9a08      	ldr	r2, [sp, #32]
 80127f6:	b992      	cbnz	r2, 801281e <_dtoa_r+0x936>
 80127f8:	9a07      	ldr	r2, [sp, #28]
 80127fa:	b982      	cbnz	r2, 801281e <_dtoa_r+0x936>
 80127fc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012800:	d029      	beq.n	8012856 <_dtoa_r+0x96e>
 8012802:	9b02      	ldr	r3, [sp, #8]
 8012804:	2b00      	cmp	r3, #0
 8012806:	dd01      	ble.n	801280c <_dtoa_r+0x924>
 8012808:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801280c:	f10a 0601 	add.w	r6, sl, #1
 8012810:	f88a 8000 	strb.w	r8, [sl]
 8012814:	e786      	b.n	8012724 <_dtoa_r+0x83c>
 8012816:	4638      	mov	r0, r7
 8012818:	e7c2      	b.n	80127a0 <_dtoa_r+0x8b8>
 801281a:	2301      	movs	r3, #1
 801281c:	e7e3      	b.n	80127e6 <_dtoa_r+0x8fe>
 801281e:	9a02      	ldr	r2, [sp, #8]
 8012820:	2a00      	cmp	r2, #0
 8012822:	db04      	blt.n	801282e <_dtoa_r+0x946>
 8012824:	d124      	bne.n	8012870 <_dtoa_r+0x988>
 8012826:	9a08      	ldr	r2, [sp, #32]
 8012828:	bb12      	cbnz	r2, 8012870 <_dtoa_r+0x988>
 801282a:	9a07      	ldr	r2, [sp, #28]
 801282c:	bb02      	cbnz	r2, 8012870 <_dtoa_r+0x988>
 801282e:	2b00      	cmp	r3, #0
 8012830:	ddec      	ble.n	801280c <_dtoa_r+0x924>
 8012832:	2201      	movs	r2, #1
 8012834:	9901      	ldr	r1, [sp, #4]
 8012836:	4620      	mov	r0, r4
 8012838:	f000 ffd4 	bl	80137e4 <__lshift>
 801283c:	4629      	mov	r1, r5
 801283e:	9001      	str	r0, [sp, #4]
 8012840:	f001 f824 	bl	801388c <__mcmp>
 8012844:	2800      	cmp	r0, #0
 8012846:	dc03      	bgt.n	8012850 <_dtoa_r+0x968>
 8012848:	d1e0      	bne.n	801280c <_dtoa_r+0x924>
 801284a:	f018 0f01 	tst.w	r8, #1
 801284e:	d0dd      	beq.n	801280c <_dtoa_r+0x924>
 8012850:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012854:	d1d8      	bne.n	8012808 <_dtoa_r+0x920>
 8012856:	2339      	movs	r3, #57	; 0x39
 8012858:	f10a 0601 	add.w	r6, sl, #1
 801285c:	f88a 3000 	strb.w	r3, [sl]
 8012860:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012864:	2b39      	cmp	r3, #57	; 0x39
 8012866:	f106 32ff 	add.w	r2, r6, #4294967295
 801286a:	d04c      	beq.n	8012906 <_dtoa_r+0xa1e>
 801286c:	3301      	adds	r3, #1
 801286e:	e051      	b.n	8012914 <_dtoa_r+0xa2c>
 8012870:	2b00      	cmp	r3, #0
 8012872:	f10a 0601 	add.w	r6, sl, #1
 8012876:	dd05      	ble.n	8012884 <_dtoa_r+0x99c>
 8012878:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801287c:	d0eb      	beq.n	8012856 <_dtoa_r+0x96e>
 801287e:	f108 0801 	add.w	r8, r8, #1
 8012882:	e7c5      	b.n	8012810 <_dtoa_r+0x928>
 8012884:	9b04      	ldr	r3, [sp, #16]
 8012886:	9a06      	ldr	r2, [sp, #24]
 8012888:	f806 8c01 	strb.w	r8, [r6, #-1]
 801288c:	1af3      	subs	r3, r6, r3
 801288e:	4293      	cmp	r3, r2
 8012890:	d021      	beq.n	80128d6 <_dtoa_r+0x9ee>
 8012892:	2300      	movs	r3, #0
 8012894:	220a      	movs	r2, #10
 8012896:	9901      	ldr	r1, [sp, #4]
 8012898:	4620      	mov	r0, r4
 801289a:	f000 fdee 	bl	801347a <__multadd>
 801289e:	45b9      	cmp	r9, r7
 80128a0:	9001      	str	r0, [sp, #4]
 80128a2:	f04f 0300 	mov.w	r3, #0
 80128a6:	f04f 020a 	mov.w	r2, #10
 80128aa:	4649      	mov	r1, r9
 80128ac:	4620      	mov	r0, r4
 80128ae:	d105      	bne.n	80128bc <_dtoa_r+0x9d4>
 80128b0:	f000 fde3 	bl	801347a <__multadd>
 80128b4:	4681      	mov	r9, r0
 80128b6:	4607      	mov	r7, r0
 80128b8:	46b2      	mov	sl, r6
 80128ba:	e779      	b.n	80127b0 <_dtoa_r+0x8c8>
 80128bc:	f000 fddd 	bl	801347a <__multadd>
 80128c0:	4639      	mov	r1, r7
 80128c2:	4681      	mov	r9, r0
 80128c4:	2300      	movs	r3, #0
 80128c6:	220a      	movs	r2, #10
 80128c8:	4620      	mov	r0, r4
 80128ca:	f000 fdd6 	bl	801347a <__multadd>
 80128ce:	4607      	mov	r7, r0
 80128d0:	e7f2      	b.n	80128b8 <_dtoa_r+0x9d0>
 80128d2:	f04f 0900 	mov.w	r9, #0
 80128d6:	2201      	movs	r2, #1
 80128d8:	9901      	ldr	r1, [sp, #4]
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 ff82 	bl	80137e4 <__lshift>
 80128e0:	4629      	mov	r1, r5
 80128e2:	9001      	str	r0, [sp, #4]
 80128e4:	f000 ffd2 	bl	801388c <__mcmp>
 80128e8:	2800      	cmp	r0, #0
 80128ea:	dcb9      	bgt.n	8012860 <_dtoa_r+0x978>
 80128ec:	d102      	bne.n	80128f4 <_dtoa_r+0xa0c>
 80128ee:	f018 0f01 	tst.w	r8, #1
 80128f2:	d1b5      	bne.n	8012860 <_dtoa_r+0x978>
 80128f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80128f8:	2b30      	cmp	r3, #48	; 0x30
 80128fa:	f106 32ff 	add.w	r2, r6, #4294967295
 80128fe:	f47f af11 	bne.w	8012724 <_dtoa_r+0x83c>
 8012902:	4616      	mov	r6, r2
 8012904:	e7f6      	b.n	80128f4 <_dtoa_r+0xa0c>
 8012906:	9b04      	ldr	r3, [sp, #16]
 8012908:	4293      	cmp	r3, r2
 801290a:	d105      	bne.n	8012918 <_dtoa_r+0xa30>
 801290c:	9a04      	ldr	r2, [sp, #16]
 801290e:	f10b 0b01 	add.w	fp, fp, #1
 8012912:	2331      	movs	r3, #49	; 0x31
 8012914:	7013      	strb	r3, [r2, #0]
 8012916:	e705      	b.n	8012724 <_dtoa_r+0x83c>
 8012918:	4616      	mov	r6, r2
 801291a:	e7a1      	b.n	8012860 <_dtoa_r+0x978>
 801291c:	4b16      	ldr	r3, [pc, #88]	; (8012978 <_dtoa_r+0xa90>)
 801291e:	f7ff bb48 	b.w	8011fb2 <_dtoa_r+0xca>
 8012922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012924:	2b00      	cmp	r3, #0
 8012926:	f47f ab23 	bne.w	8011f70 <_dtoa_r+0x88>
 801292a:	4b14      	ldr	r3, [pc, #80]	; (801297c <_dtoa_r+0xa94>)
 801292c:	f7ff bb41 	b.w	8011fb2 <_dtoa_r+0xca>
 8012930:	9b08      	ldr	r3, [sp, #32]
 8012932:	2b01      	cmp	r3, #1
 8012934:	f77f ae3b 	ble.w	80125ae <_dtoa_r+0x6c6>
 8012938:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801293c:	e64f      	b.n	80125de <_dtoa_r+0x6f6>
 801293e:	9b06      	ldr	r3, [sp, #24]
 8012940:	2b00      	cmp	r3, #0
 8012942:	dc03      	bgt.n	801294c <_dtoa_r+0xa64>
 8012944:	9b08      	ldr	r3, [sp, #32]
 8012946:	2b02      	cmp	r3, #2
 8012948:	f73f aed7 	bgt.w	80126fa <_dtoa_r+0x812>
 801294c:	9e04      	ldr	r6, [sp, #16]
 801294e:	9801      	ldr	r0, [sp, #4]
 8012950:	4629      	mov	r1, r5
 8012952:	f7ff fa3b 	bl	8011dcc <quorem>
 8012956:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801295a:	f806 8b01 	strb.w	r8, [r6], #1
 801295e:	9b04      	ldr	r3, [sp, #16]
 8012960:	9a06      	ldr	r2, [sp, #24]
 8012962:	1af3      	subs	r3, r6, r3
 8012964:	429a      	cmp	r2, r3
 8012966:	ddb4      	ble.n	80128d2 <_dtoa_r+0x9ea>
 8012968:	2300      	movs	r3, #0
 801296a:	220a      	movs	r2, #10
 801296c:	9901      	ldr	r1, [sp, #4]
 801296e:	4620      	mov	r0, r4
 8012970:	f000 fd83 	bl	801347a <__multadd>
 8012974:	9001      	str	r0, [sp, #4]
 8012976:	e7ea      	b.n	801294e <_dtoa_r+0xa66>
 8012978:	08014f1c 	.word	0x08014f1c
 801297c:	08014f98 	.word	0x08014f98

08012980 <__sflush_r>:
 8012980:	898a      	ldrh	r2, [r1, #12]
 8012982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012986:	4605      	mov	r5, r0
 8012988:	0710      	lsls	r0, r2, #28
 801298a:	460c      	mov	r4, r1
 801298c:	d458      	bmi.n	8012a40 <__sflush_r+0xc0>
 801298e:	684b      	ldr	r3, [r1, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	dc05      	bgt.n	80129a0 <__sflush_r+0x20>
 8012994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012996:	2b00      	cmp	r3, #0
 8012998:	dc02      	bgt.n	80129a0 <__sflush_r+0x20>
 801299a:	2000      	movs	r0, #0
 801299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129a2:	2e00      	cmp	r6, #0
 80129a4:	d0f9      	beq.n	801299a <__sflush_r+0x1a>
 80129a6:	2300      	movs	r3, #0
 80129a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80129ac:	682f      	ldr	r7, [r5, #0]
 80129ae:	6a21      	ldr	r1, [r4, #32]
 80129b0:	602b      	str	r3, [r5, #0]
 80129b2:	d032      	beq.n	8012a1a <__sflush_r+0x9a>
 80129b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80129b6:	89a3      	ldrh	r3, [r4, #12]
 80129b8:	075a      	lsls	r2, r3, #29
 80129ba:	d505      	bpl.n	80129c8 <__sflush_r+0x48>
 80129bc:	6863      	ldr	r3, [r4, #4]
 80129be:	1ac0      	subs	r0, r0, r3
 80129c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129c2:	b10b      	cbz	r3, 80129c8 <__sflush_r+0x48>
 80129c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129c6:	1ac0      	subs	r0, r0, r3
 80129c8:	2300      	movs	r3, #0
 80129ca:	4602      	mov	r2, r0
 80129cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129ce:	6a21      	ldr	r1, [r4, #32]
 80129d0:	4628      	mov	r0, r5
 80129d2:	47b0      	blx	r6
 80129d4:	1c43      	adds	r3, r0, #1
 80129d6:	89a3      	ldrh	r3, [r4, #12]
 80129d8:	d106      	bne.n	80129e8 <__sflush_r+0x68>
 80129da:	6829      	ldr	r1, [r5, #0]
 80129dc:	291d      	cmp	r1, #29
 80129de:	d848      	bhi.n	8012a72 <__sflush_r+0xf2>
 80129e0:	4a29      	ldr	r2, [pc, #164]	; (8012a88 <__sflush_r+0x108>)
 80129e2:	40ca      	lsrs	r2, r1
 80129e4:	07d6      	lsls	r6, r2, #31
 80129e6:	d544      	bpl.n	8012a72 <__sflush_r+0xf2>
 80129e8:	2200      	movs	r2, #0
 80129ea:	6062      	str	r2, [r4, #4]
 80129ec:	04d9      	lsls	r1, r3, #19
 80129ee:	6922      	ldr	r2, [r4, #16]
 80129f0:	6022      	str	r2, [r4, #0]
 80129f2:	d504      	bpl.n	80129fe <__sflush_r+0x7e>
 80129f4:	1c42      	adds	r2, r0, #1
 80129f6:	d101      	bne.n	80129fc <__sflush_r+0x7c>
 80129f8:	682b      	ldr	r3, [r5, #0]
 80129fa:	b903      	cbnz	r3, 80129fe <__sflush_r+0x7e>
 80129fc:	6560      	str	r0, [r4, #84]	; 0x54
 80129fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a00:	602f      	str	r7, [r5, #0]
 8012a02:	2900      	cmp	r1, #0
 8012a04:	d0c9      	beq.n	801299a <__sflush_r+0x1a>
 8012a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a0a:	4299      	cmp	r1, r3
 8012a0c:	d002      	beq.n	8012a14 <__sflush_r+0x94>
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f001 f8f6 	bl	8013c00 <_free_r>
 8012a14:	2000      	movs	r0, #0
 8012a16:	6360      	str	r0, [r4, #52]	; 0x34
 8012a18:	e7c0      	b.n	801299c <__sflush_r+0x1c>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	47b0      	blx	r6
 8012a20:	1c41      	adds	r1, r0, #1
 8012a22:	d1c8      	bne.n	80129b6 <__sflush_r+0x36>
 8012a24:	682b      	ldr	r3, [r5, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d0c5      	beq.n	80129b6 <__sflush_r+0x36>
 8012a2a:	2b1d      	cmp	r3, #29
 8012a2c:	d001      	beq.n	8012a32 <__sflush_r+0xb2>
 8012a2e:	2b16      	cmp	r3, #22
 8012a30:	d101      	bne.n	8012a36 <__sflush_r+0xb6>
 8012a32:	602f      	str	r7, [r5, #0]
 8012a34:	e7b1      	b.n	801299a <__sflush_r+0x1a>
 8012a36:	89a3      	ldrh	r3, [r4, #12]
 8012a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a3c:	81a3      	strh	r3, [r4, #12]
 8012a3e:	e7ad      	b.n	801299c <__sflush_r+0x1c>
 8012a40:	690f      	ldr	r7, [r1, #16]
 8012a42:	2f00      	cmp	r7, #0
 8012a44:	d0a9      	beq.n	801299a <__sflush_r+0x1a>
 8012a46:	0793      	lsls	r3, r2, #30
 8012a48:	680e      	ldr	r6, [r1, #0]
 8012a4a:	bf08      	it	eq
 8012a4c:	694b      	ldreq	r3, [r1, #20]
 8012a4e:	600f      	str	r7, [r1, #0]
 8012a50:	bf18      	it	ne
 8012a52:	2300      	movne	r3, #0
 8012a54:	eba6 0807 	sub.w	r8, r6, r7
 8012a58:	608b      	str	r3, [r1, #8]
 8012a5a:	f1b8 0f00 	cmp.w	r8, #0
 8012a5e:	dd9c      	ble.n	801299a <__sflush_r+0x1a>
 8012a60:	4643      	mov	r3, r8
 8012a62:	463a      	mov	r2, r7
 8012a64:	6a21      	ldr	r1, [r4, #32]
 8012a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a68:	4628      	mov	r0, r5
 8012a6a:	47b0      	blx	r6
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	dc06      	bgt.n	8012a7e <__sflush_r+0xfe>
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a76:	81a3      	strh	r3, [r4, #12]
 8012a78:	f04f 30ff 	mov.w	r0, #4294967295
 8012a7c:	e78e      	b.n	801299c <__sflush_r+0x1c>
 8012a7e:	4407      	add	r7, r0
 8012a80:	eba8 0800 	sub.w	r8, r8, r0
 8012a84:	e7e9      	b.n	8012a5a <__sflush_r+0xda>
 8012a86:	bf00      	nop
 8012a88:	20400001 	.word	0x20400001

08012a8c <_fflush_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	690b      	ldr	r3, [r1, #16]
 8012a90:	4605      	mov	r5, r0
 8012a92:	460c      	mov	r4, r1
 8012a94:	b1db      	cbz	r3, 8012ace <_fflush_r+0x42>
 8012a96:	b118      	cbz	r0, 8012aa0 <_fflush_r+0x14>
 8012a98:	6983      	ldr	r3, [r0, #24]
 8012a9a:	b90b      	cbnz	r3, 8012aa0 <_fflush_r+0x14>
 8012a9c:	f000 f860 	bl	8012b60 <__sinit>
 8012aa0:	4b0c      	ldr	r3, [pc, #48]	; (8012ad4 <_fflush_r+0x48>)
 8012aa2:	429c      	cmp	r4, r3
 8012aa4:	d109      	bne.n	8012aba <_fflush_r+0x2e>
 8012aa6:	686c      	ldr	r4, [r5, #4]
 8012aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aac:	b17b      	cbz	r3, 8012ace <_fflush_r+0x42>
 8012aae:	4621      	mov	r1, r4
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ab6:	f7ff bf63 	b.w	8012980 <__sflush_r>
 8012aba:	4b07      	ldr	r3, [pc, #28]	; (8012ad8 <_fflush_r+0x4c>)
 8012abc:	429c      	cmp	r4, r3
 8012abe:	d101      	bne.n	8012ac4 <_fflush_r+0x38>
 8012ac0:	68ac      	ldr	r4, [r5, #8]
 8012ac2:	e7f1      	b.n	8012aa8 <_fflush_r+0x1c>
 8012ac4:	4b05      	ldr	r3, [pc, #20]	; (8012adc <_fflush_r+0x50>)
 8012ac6:	429c      	cmp	r4, r3
 8012ac8:	bf08      	it	eq
 8012aca:	68ec      	ldreq	r4, [r5, #12]
 8012acc:	e7ec      	b.n	8012aa8 <_fflush_r+0x1c>
 8012ace:	2000      	movs	r0, #0
 8012ad0:	bd38      	pop	{r3, r4, r5, pc}
 8012ad2:	bf00      	nop
 8012ad4:	08014fc8 	.word	0x08014fc8
 8012ad8:	08014fe8 	.word	0x08014fe8
 8012adc:	08014fa8 	.word	0x08014fa8

08012ae0 <std>:
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	b510      	push	{r4, lr}
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8012aea:	6083      	str	r3, [r0, #8]
 8012aec:	8181      	strh	r1, [r0, #12]
 8012aee:	6643      	str	r3, [r0, #100]	; 0x64
 8012af0:	81c2      	strh	r2, [r0, #14]
 8012af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012af6:	6183      	str	r3, [r0, #24]
 8012af8:	4619      	mov	r1, r3
 8012afa:	2208      	movs	r2, #8
 8012afc:	305c      	adds	r0, #92	; 0x5c
 8012afe:	f7fd fb82 	bl	8010206 <memset>
 8012b02:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <std+0x38>)
 8012b04:	6263      	str	r3, [r4, #36]	; 0x24
 8012b06:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <std+0x3c>)
 8012b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b0a:	4b05      	ldr	r3, [pc, #20]	; (8012b20 <std+0x40>)
 8012b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b0e:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <std+0x44>)
 8012b10:	6224      	str	r4, [r4, #32]
 8012b12:	6323      	str	r3, [r4, #48]	; 0x30
 8012b14:	bd10      	pop	{r4, pc}
 8012b16:	bf00      	nop
 8012b18:	08014015 	.word	0x08014015
 8012b1c:	08014037 	.word	0x08014037
 8012b20:	0801406f 	.word	0x0801406f
 8012b24:	08014093 	.word	0x08014093

08012b28 <_cleanup_r>:
 8012b28:	4901      	ldr	r1, [pc, #4]	; (8012b30 <_cleanup_r+0x8>)
 8012b2a:	f000 b885 	b.w	8012c38 <_fwalk_reent>
 8012b2e:	bf00      	nop
 8012b30:	08012a8d 	.word	0x08012a8d

08012b34 <__sfmoreglue>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	1e4a      	subs	r2, r1, #1
 8012b38:	2568      	movs	r5, #104	; 0x68
 8012b3a:	4355      	muls	r5, r2
 8012b3c:	460e      	mov	r6, r1
 8012b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b42:	f001 f8ab 	bl	8013c9c <_malloc_r>
 8012b46:	4604      	mov	r4, r0
 8012b48:	b140      	cbz	r0, 8012b5c <__sfmoreglue+0x28>
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8012b50:	300c      	adds	r0, #12
 8012b52:	60a0      	str	r0, [r4, #8]
 8012b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b58:	f7fd fb55 	bl	8010206 <memset>
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	bd70      	pop	{r4, r5, r6, pc}

08012b60 <__sinit>:
 8012b60:	6983      	ldr	r3, [r0, #24]
 8012b62:	b510      	push	{r4, lr}
 8012b64:	4604      	mov	r4, r0
 8012b66:	bb33      	cbnz	r3, 8012bb6 <__sinit+0x56>
 8012b68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012b6c:	6503      	str	r3, [r0, #80]	; 0x50
 8012b6e:	4b12      	ldr	r3, [pc, #72]	; (8012bb8 <__sinit+0x58>)
 8012b70:	4a12      	ldr	r2, [pc, #72]	; (8012bbc <__sinit+0x5c>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	6282      	str	r2, [r0, #40]	; 0x28
 8012b76:	4298      	cmp	r0, r3
 8012b78:	bf04      	itt	eq
 8012b7a:	2301      	moveq	r3, #1
 8012b7c:	6183      	streq	r3, [r0, #24]
 8012b7e:	f000 f81f 	bl	8012bc0 <__sfp>
 8012b82:	6060      	str	r0, [r4, #4]
 8012b84:	4620      	mov	r0, r4
 8012b86:	f000 f81b 	bl	8012bc0 <__sfp>
 8012b8a:	60a0      	str	r0, [r4, #8]
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f000 f817 	bl	8012bc0 <__sfp>
 8012b92:	2200      	movs	r2, #0
 8012b94:	60e0      	str	r0, [r4, #12]
 8012b96:	2104      	movs	r1, #4
 8012b98:	6860      	ldr	r0, [r4, #4]
 8012b9a:	f7ff ffa1 	bl	8012ae0 <std>
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	2109      	movs	r1, #9
 8012ba2:	68a0      	ldr	r0, [r4, #8]
 8012ba4:	f7ff ff9c 	bl	8012ae0 <std>
 8012ba8:	2202      	movs	r2, #2
 8012baa:	2112      	movs	r1, #18
 8012bac:	68e0      	ldr	r0, [r4, #12]
 8012bae:	f7ff ff97 	bl	8012ae0 <std>
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	61a3      	str	r3, [r4, #24]
 8012bb6:	bd10      	pop	{r4, pc}
 8012bb8:	08014f08 	.word	0x08014f08
 8012bbc:	08012b29 	.word	0x08012b29

08012bc0 <__sfp>:
 8012bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bc2:	4b1b      	ldr	r3, [pc, #108]	; (8012c30 <__sfp+0x70>)
 8012bc4:	681e      	ldr	r6, [r3, #0]
 8012bc6:	69b3      	ldr	r3, [r6, #24]
 8012bc8:	4607      	mov	r7, r0
 8012bca:	b913      	cbnz	r3, 8012bd2 <__sfp+0x12>
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7ff ffc7 	bl	8012b60 <__sinit>
 8012bd2:	3648      	adds	r6, #72	; 0x48
 8012bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	d503      	bpl.n	8012be4 <__sfp+0x24>
 8012bdc:	6833      	ldr	r3, [r6, #0]
 8012bde:	b133      	cbz	r3, 8012bee <__sfp+0x2e>
 8012be0:	6836      	ldr	r6, [r6, #0]
 8012be2:	e7f7      	b.n	8012bd4 <__sfp+0x14>
 8012be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012be8:	b16d      	cbz	r5, 8012c06 <__sfp+0x46>
 8012bea:	3468      	adds	r4, #104	; 0x68
 8012bec:	e7f4      	b.n	8012bd8 <__sfp+0x18>
 8012bee:	2104      	movs	r1, #4
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	f7ff ff9f 	bl	8012b34 <__sfmoreglue>
 8012bf6:	6030      	str	r0, [r6, #0]
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d1f1      	bne.n	8012be0 <__sfp+0x20>
 8012bfc:	230c      	movs	r3, #12
 8012bfe:	603b      	str	r3, [r7, #0]
 8012c00:	4604      	mov	r4, r0
 8012c02:	4620      	mov	r0, r4
 8012c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c06:	4b0b      	ldr	r3, [pc, #44]	; (8012c34 <__sfp+0x74>)
 8012c08:	6665      	str	r5, [r4, #100]	; 0x64
 8012c0a:	e9c4 5500 	strd	r5, r5, [r4]
 8012c0e:	60a5      	str	r5, [r4, #8]
 8012c10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012c14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012c18:	2208      	movs	r2, #8
 8012c1a:	4629      	mov	r1, r5
 8012c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c20:	f7fd faf1 	bl	8010206 <memset>
 8012c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c2c:	e7e9      	b.n	8012c02 <__sfp+0x42>
 8012c2e:	bf00      	nop
 8012c30:	08014f08 	.word	0x08014f08
 8012c34:	ffff0001 	.word	0xffff0001

08012c38 <_fwalk_reent>:
 8012c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c3c:	4680      	mov	r8, r0
 8012c3e:	4689      	mov	r9, r1
 8012c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c44:	2600      	movs	r6, #0
 8012c46:	b914      	cbnz	r4, 8012c4e <_fwalk_reent+0x16>
 8012c48:	4630      	mov	r0, r6
 8012c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012c52:	3f01      	subs	r7, #1
 8012c54:	d501      	bpl.n	8012c5a <_fwalk_reent+0x22>
 8012c56:	6824      	ldr	r4, [r4, #0]
 8012c58:	e7f5      	b.n	8012c46 <_fwalk_reent+0xe>
 8012c5a:	89ab      	ldrh	r3, [r5, #12]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d907      	bls.n	8012c70 <_fwalk_reent+0x38>
 8012c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c64:	3301      	adds	r3, #1
 8012c66:	d003      	beq.n	8012c70 <_fwalk_reent+0x38>
 8012c68:	4629      	mov	r1, r5
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	47c8      	blx	r9
 8012c6e:	4306      	orrs	r6, r0
 8012c70:	3568      	adds	r5, #104	; 0x68
 8012c72:	e7ee      	b.n	8012c52 <_fwalk_reent+0x1a>

08012c74 <rshift>:
 8012c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c76:	6906      	ldr	r6, [r0, #16]
 8012c78:	114b      	asrs	r3, r1, #5
 8012c7a:	429e      	cmp	r6, r3
 8012c7c:	f100 0414 	add.w	r4, r0, #20
 8012c80:	dd30      	ble.n	8012ce4 <rshift+0x70>
 8012c82:	f011 011f 	ands.w	r1, r1, #31
 8012c86:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012c8a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012c8e:	d108      	bne.n	8012ca2 <rshift+0x2e>
 8012c90:	4621      	mov	r1, r4
 8012c92:	42b2      	cmp	r2, r6
 8012c94:	460b      	mov	r3, r1
 8012c96:	d211      	bcs.n	8012cbc <rshift+0x48>
 8012c98:	f852 3b04 	ldr.w	r3, [r2], #4
 8012c9c:	f841 3b04 	str.w	r3, [r1], #4
 8012ca0:	e7f7      	b.n	8012c92 <rshift+0x1e>
 8012ca2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012ca6:	f1c1 0c20 	rsb	ip, r1, #32
 8012caa:	40cd      	lsrs	r5, r1
 8012cac:	3204      	adds	r2, #4
 8012cae:	4623      	mov	r3, r4
 8012cb0:	42b2      	cmp	r2, r6
 8012cb2:	4617      	mov	r7, r2
 8012cb4:	d30c      	bcc.n	8012cd0 <rshift+0x5c>
 8012cb6:	601d      	str	r5, [r3, #0]
 8012cb8:	b105      	cbz	r5, 8012cbc <rshift+0x48>
 8012cba:	3304      	adds	r3, #4
 8012cbc:	1b1a      	subs	r2, r3, r4
 8012cbe:	42a3      	cmp	r3, r4
 8012cc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012cc4:	bf08      	it	eq
 8012cc6:	2300      	moveq	r3, #0
 8012cc8:	6102      	str	r2, [r0, #16]
 8012cca:	bf08      	it	eq
 8012ccc:	6143      	streq	r3, [r0, #20]
 8012cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cd0:	683f      	ldr	r7, [r7, #0]
 8012cd2:	fa07 f70c 	lsl.w	r7, r7, ip
 8012cd6:	433d      	orrs	r5, r7
 8012cd8:	f843 5b04 	str.w	r5, [r3], #4
 8012cdc:	f852 5b04 	ldr.w	r5, [r2], #4
 8012ce0:	40cd      	lsrs	r5, r1
 8012ce2:	e7e5      	b.n	8012cb0 <rshift+0x3c>
 8012ce4:	4623      	mov	r3, r4
 8012ce6:	e7e9      	b.n	8012cbc <rshift+0x48>

08012ce8 <__hexdig_fun>:
 8012ce8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012cec:	2b09      	cmp	r3, #9
 8012cee:	d802      	bhi.n	8012cf6 <__hexdig_fun+0xe>
 8012cf0:	3820      	subs	r0, #32
 8012cf2:	b2c0      	uxtb	r0, r0
 8012cf4:	4770      	bx	lr
 8012cf6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012cfa:	2b05      	cmp	r3, #5
 8012cfc:	d801      	bhi.n	8012d02 <__hexdig_fun+0x1a>
 8012cfe:	3847      	subs	r0, #71	; 0x47
 8012d00:	e7f7      	b.n	8012cf2 <__hexdig_fun+0xa>
 8012d02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012d06:	2b05      	cmp	r3, #5
 8012d08:	d801      	bhi.n	8012d0e <__hexdig_fun+0x26>
 8012d0a:	3827      	subs	r0, #39	; 0x27
 8012d0c:	e7f1      	b.n	8012cf2 <__hexdig_fun+0xa>
 8012d0e:	2000      	movs	r0, #0
 8012d10:	4770      	bx	lr

08012d12 <__gethex>:
 8012d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d16:	b08b      	sub	sp, #44	; 0x2c
 8012d18:	468a      	mov	sl, r1
 8012d1a:	9002      	str	r0, [sp, #8]
 8012d1c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012d1e:	9306      	str	r3, [sp, #24]
 8012d20:	4690      	mov	r8, r2
 8012d22:	f000 fad0 	bl	80132c6 <__localeconv_l>
 8012d26:	6803      	ldr	r3, [r0, #0]
 8012d28:	9303      	str	r3, [sp, #12]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ed fa88 	bl	8000240 <strlen>
 8012d30:	9b03      	ldr	r3, [sp, #12]
 8012d32:	9001      	str	r0, [sp, #4]
 8012d34:	4403      	add	r3, r0
 8012d36:	f04f 0b00 	mov.w	fp, #0
 8012d3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012d3e:	9307      	str	r3, [sp, #28]
 8012d40:	f8da 3000 	ldr.w	r3, [sl]
 8012d44:	3302      	adds	r3, #2
 8012d46:	461f      	mov	r7, r3
 8012d48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012d4c:	2830      	cmp	r0, #48	; 0x30
 8012d4e:	d06c      	beq.n	8012e2a <__gethex+0x118>
 8012d50:	f7ff ffca 	bl	8012ce8 <__hexdig_fun>
 8012d54:	4604      	mov	r4, r0
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d16a      	bne.n	8012e30 <__gethex+0x11e>
 8012d5a:	9a01      	ldr	r2, [sp, #4]
 8012d5c:	9903      	ldr	r1, [sp, #12]
 8012d5e:	4638      	mov	r0, r7
 8012d60:	f001 f99b 	bl	801409a <strncmp>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d166      	bne.n	8012e36 <__gethex+0x124>
 8012d68:	9b01      	ldr	r3, [sp, #4]
 8012d6a:	5cf8      	ldrb	r0, [r7, r3]
 8012d6c:	18fe      	adds	r6, r7, r3
 8012d6e:	f7ff ffbb 	bl	8012ce8 <__hexdig_fun>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	d062      	beq.n	8012e3c <__gethex+0x12a>
 8012d76:	4633      	mov	r3, r6
 8012d78:	7818      	ldrb	r0, [r3, #0]
 8012d7a:	2830      	cmp	r0, #48	; 0x30
 8012d7c:	461f      	mov	r7, r3
 8012d7e:	f103 0301 	add.w	r3, r3, #1
 8012d82:	d0f9      	beq.n	8012d78 <__gethex+0x66>
 8012d84:	f7ff ffb0 	bl	8012ce8 <__hexdig_fun>
 8012d88:	fab0 f580 	clz	r5, r0
 8012d8c:	096d      	lsrs	r5, r5, #5
 8012d8e:	4634      	mov	r4, r6
 8012d90:	f04f 0b01 	mov.w	fp, #1
 8012d94:	463a      	mov	r2, r7
 8012d96:	4616      	mov	r6, r2
 8012d98:	3201      	adds	r2, #1
 8012d9a:	7830      	ldrb	r0, [r6, #0]
 8012d9c:	f7ff ffa4 	bl	8012ce8 <__hexdig_fun>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d1f8      	bne.n	8012d96 <__gethex+0x84>
 8012da4:	9a01      	ldr	r2, [sp, #4]
 8012da6:	9903      	ldr	r1, [sp, #12]
 8012da8:	4630      	mov	r0, r6
 8012daa:	f001 f976 	bl	801409a <strncmp>
 8012dae:	b950      	cbnz	r0, 8012dc6 <__gethex+0xb4>
 8012db0:	b954      	cbnz	r4, 8012dc8 <__gethex+0xb6>
 8012db2:	9b01      	ldr	r3, [sp, #4]
 8012db4:	18f4      	adds	r4, r6, r3
 8012db6:	4622      	mov	r2, r4
 8012db8:	4616      	mov	r6, r2
 8012dba:	3201      	adds	r2, #1
 8012dbc:	7830      	ldrb	r0, [r6, #0]
 8012dbe:	f7ff ff93 	bl	8012ce8 <__hexdig_fun>
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	d1f8      	bne.n	8012db8 <__gethex+0xa6>
 8012dc6:	b10c      	cbz	r4, 8012dcc <__gethex+0xba>
 8012dc8:	1ba4      	subs	r4, r4, r6
 8012dca:	00a4      	lsls	r4, r4, #2
 8012dcc:	7833      	ldrb	r3, [r6, #0]
 8012dce:	2b50      	cmp	r3, #80	; 0x50
 8012dd0:	d001      	beq.n	8012dd6 <__gethex+0xc4>
 8012dd2:	2b70      	cmp	r3, #112	; 0x70
 8012dd4:	d140      	bne.n	8012e58 <__gethex+0x146>
 8012dd6:	7873      	ldrb	r3, [r6, #1]
 8012dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8012dda:	d031      	beq.n	8012e40 <__gethex+0x12e>
 8012ddc:	2b2d      	cmp	r3, #45	; 0x2d
 8012dde:	d033      	beq.n	8012e48 <__gethex+0x136>
 8012de0:	1c71      	adds	r1, r6, #1
 8012de2:	f04f 0900 	mov.w	r9, #0
 8012de6:	7808      	ldrb	r0, [r1, #0]
 8012de8:	f7ff ff7e 	bl	8012ce8 <__hexdig_fun>
 8012dec:	1e43      	subs	r3, r0, #1
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	2b18      	cmp	r3, #24
 8012df2:	d831      	bhi.n	8012e58 <__gethex+0x146>
 8012df4:	f1a0 0210 	sub.w	r2, r0, #16
 8012df8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012dfc:	f7ff ff74 	bl	8012ce8 <__hexdig_fun>
 8012e00:	1e43      	subs	r3, r0, #1
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	2b18      	cmp	r3, #24
 8012e06:	d922      	bls.n	8012e4e <__gethex+0x13c>
 8012e08:	f1b9 0f00 	cmp.w	r9, #0
 8012e0c:	d000      	beq.n	8012e10 <__gethex+0xfe>
 8012e0e:	4252      	negs	r2, r2
 8012e10:	4414      	add	r4, r2
 8012e12:	f8ca 1000 	str.w	r1, [sl]
 8012e16:	b30d      	cbz	r5, 8012e5c <__gethex+0x14a>
 8012e18:	f1bb 0f00 	cmp.w	fp, #0
 8012e1c:	bf0c      	ite	eq
 8012e1e:	2706      	moveq	r7, #6
 8012e20:	2700      	movne	r7, #0
 8012e22:	4638      	mov	r0, r7
 8012e24:	b00b      	add	sp, #44	; 0x2c
 8012e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e2a:	f10b 0b01 	add.w	fp, fp, #1
 8012e2e:	e78a      	b.n	8012d46 <__gethex+0x34>
 8012e30:	2500      	movs	r5, #0
 8012e32:	462c      	mov	r4, r5
 8012e34:	e7ae      	b.n	8012d94 <__gethex+0x82>
 8012e36:	463e      	mov	r6, r7
 8012e38:	2501      	movs	r5, #1
 8012e3a:	e7c7      	b.n	8012dcc <__gethex+0xba>
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	e7fb      	b.n	8012e38 <__gethex+0x126>
 8012e40:	f04f 0900 	mov.w	r9, #0
 8012e44:	1cb1      	adds	r1, r6, #2
 8012e46:	e7ce      	b.n	8012de6 <__gethex+0xd4>
 8012e48:	f04f 0901 	mov.w	r9, #1
 8012e4c:	e7fa      	b.n	8012e44 <__gethex+0x132>
 8012e4e:	230a      	movs	r3, #10
 8012e50:	fb03 0202 	mla	r2, r3, r2, r0
 8012e54:	3a10      	subs	r2, #16
 8012e56:	e7cf      	b.n	8012df8 <__gethex+0xe6>
 8012e58:	4631      	mov	r1, r6
 8012e5a:	e7da      	b.n	8012e12 <__gethex+0x100>
 8012e5c:	1bf3      	subs	r3, r6, r7
 8012e5e:	3b01      	subs	r3, #1
 8012e60:	4629      	mov	r1, r5
 8012e62:	2b07      	cmp	r3, #7
 8012e64:	dc49      	bgt.n	8012efa <__gethex+0x1e8>
 8012e66:	9802      	ldr	r0, [sp, #8]
 8012e68:	f000 fabc 	bl	80133e4 <_Balloc>
 8012e6c:	9b01      	ldr	r3, [sp, #4]
 8012e6e:	f100 0914 	add.w	r9, r0, #20
 8012e72:	f04f 0b00 	mov.w	fp, #0
 8012e76:	f1c3 0301 	rsb	r3, r3, #1
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	f8cd 9010 	str.w	r9, [sp, #16]
 8012e80:	46da      	mov	sl, fp
 8012e82:	9308      	str	r3, [sp, #32]
 8012e84:	42b7      	cmp	r7, r6
 8012e86:	d33b      	bcc.n	8012f00 <__gethex+0x1ee>
 8012e88:	9804      	ldr	r0, [sp, #16]
 8012e8a:	f840 ab04 	str.w	sl, [r0], #4
 8012e8e:	eba0 0009 	sub.w	r0, r0, r9
 8012e92:	1080      	asrs	r0, r0, #2
 8012e94:	6128      	str	r0, [r5, #16]
 8012e96:	0147      	lsls	r7, r0, #5
 8012e98:	4650      	mov	r0, sl
 8012e9a:	f000 fb67 	bl	801356c <__hi0bits>
 8012e9e:	f8d8 6000 	ldr.w	r6, [r8]
 8012ea2:	1a3f      	subs	r7, r7, r0
 8012ea4:	42b7      	cmp	r7, r6
 8012ea6:	dd64      	ble.n	8012f72 <__gethex+0x260>
 8012ea8:	1bbf      	subs	r7, r7, r6
 8012eaa:	4639      	mov	r1, r7
 8012eac:	4628      	mov	r0, r5
 8012eae:	f000 fe78 	bl	8013ba2 <__any_on>
 8012eb2:	4682      	mov	sl, r0
 8012eb4:	b178      	cbz	r0, 8012ed6 <__gethex+0x1c4>
 8012eb6:	1e7b      	subs	r3, r7, #1
 8012eb8:	1159      	asrs	r1, r3, #5
 8012eba:	f003 021f 	and.w	r2, r3, #31
 8012ebe:	f04f 0a01 	mov.w	sl, #1
 8012ec2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012ec6:	fa0a f202 	lsl.w	r2, sl, r2
 8012eca:	420a      	tst	r2, r1
 8012ecc:	d003      	beq.n	8012ed6 <__gethex+0x1c4>
 8012ece:	4553      	cmp	r3, sl
 8012ed0:	dc46      	bgt.n	8012f60 <__gethex+0x24e>
 8012ed2:	f04f 0a02 	mov.w	sl, #2
 8012ed6:	4639      	mov	r1, r7
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f7ff fecb 	bl	8012c74 <rshift>
 8012ede:	443c      	add	r4, r7
 8012ee0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ee4:	42a3      	cmp	r3, r4
 8012ee6:	da52      	bge.n	8012f8e <__gethex+0x27c>
 8012ee8:	4629      	mov	r1, r5
 8012eea:	9802      	ldr	r0, [sp, #8]
 8012eec:	f000 faae 	bl	801344c <_Bfree>
 8012ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	6013      	str	r3, [r2, #0]
 8012ef6:	27a3      	movs	r7, #163	; 0xa3
 8012ef8:	e793      	b.n	8012e22 <__gethex+0x110>
 8012efa:	3101      	adds	r1, #1
 8012efc:	105b      	asrs	r3, r3, #1
 8012efe:	e7b0      	b.n	8012e62 <__gethex+0x150>
 8012f00:	1e73      	subs	r3, r6, #1
 8012f02:	9305      	str	r3, [sp, #20]
 8012f04:	9a07      	ldr	r2, [sp, #28]
 8012f06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d018      	beq.n	8012f40 <__gethex+0x22e>
 8012f0e:	f1bb 0f20 	cmp.w	fp, #32
 8012f12:	d107      	bne.n	8012f24 <__gethex+0x212>
 8012f14:	9b04      	ldr	r3, [sp, #16]
 8012f16:	f8c3 a000 	str.w	sl, [r3]
 8012f1a:	3304      	adds	r3, #4
 8012f1c:	f04f 0a00 	mov.w	sl, #0
 8012f20:	9304      	str	r3, [sp, #16]
 8012f22:	46d3      	mov	fp, sl
 8012f24:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012f28:	f7ff fede 	bl	8012ce8 <__hexdig_fun>
 8012f2c:	f000 000f 	and.w	r0, r0, #15
 8012f30:	fa00 f00b 	lsl.w	r0, r0, fp
 8012f34:	ea4a 0a00 	orr.w	sl, sl, r0
 8012f38:	f10b 0b04 	add.w	fp, fp, #4
 8012f3c:	9b05      	ldr	r3, [sp, #20]
 8012f3e:	e00d      	b.n	8012f5c <__gethex+0x24a>
 8012f40:	9b05      	ldr	r3, [sp, #20]
 8012f42:	9a08      	ldr	r2, [sp, #32]
 8012f44:	4413      	add	r3, r2
 8012f46:	42bb      	cmp	r3, r7
 8012f48:	d3e1      	bcc.n	8012f0e <__gethex+0x1fc>
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	9a01      	ldr	r2, [sp, #4]
 8012f4e:	9903      	ldr	r1, [sp, #12]
 8012f50:	9309      	str	r3, [sp, #36]	; 0x24
 8012f52:	f001 f8a2 	bl	801409a <strncmp>
 8012f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	d1d8      	bne.n	8012f0e <__gethex+0x1fc>
 8012f5c:	461e      	mov	r6, r3
 8012f5e:	e791      	b.n	8012e84 <__gethex+0x172>
 8012f60:	1eb9      	subs	r1, r7, #2
 8012f62:	4628      	mov	r0, r5
 8012f64:	f000 fe1d 	bl	8013ba2 <__any_on>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d0b2      	beq.n	8012ed2 <__gethex+0x1c0>
 8012f6c:	f04f 0a03 	mov.w	sl, #3
 8012f70:	e7b1      	b.n	8012ed6 <__gethex+0x1c4>
 8012f72:	da09      	bge.n	8012f88 <__gethex+0x276>
 8012f74:	1bf7      	subs	r7, r6, r7
 8012f76:	4629      	mov	r1, r5
 8012f78:	463a      	mov	r2, r7
 8012f7a:	9802      	ldr	r0, [sp, #8]
 8012f7c:	f000 fc32 	bl	80137e4 <__lshift>
 8012f80:	1be4      	subs	r4, r4, r7
 8012f82:	4605      	mov	r5, r0
 8012f84:	f100 0914 	add.w	r9, r0, #20
 8012f88:	f04f 0a00 	mov.w	sl, #0
 8012f8c:	e7a8      	b.n	8012ee0 <__gethex+0x1ce>
 8012f8e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012f92:	42a0      	cmp	r0, r4
 8012f94:	dd6a      	ble.n	801306c <__gethex+0x35a>
 8012f96:	1b04      	subs	r4, r0, r4
 8012f98:	42a6      	cmp	r6, r4
 8012f9a:	dc2e      	bgt.n	8012ffa <__gethex+0x2e8>
 8012f9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	d022      	beq.n	8012fea <__gethex+0x2d8>
 8012fa4:	2b03      	cmp	r3, #3
 8012fa6:	d024      	beq.n	8012ff2 <__gethex+0x2e0>
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d115      	bne.n	8012fd8 <__gethex+0x2c6>
 8012fac:	42a6      	cmp	r6, r4
 8012fae:	d113      	bne.n	8012fd8 <__gethex+0x2c6>
 8012fb0:	2e01      	cmp	r6, #1
 8012fb2:	dc0b      	bgt.n	8012fcc <__gethex+0x2ba>
 8012fb4:	9a06      	ldr	r2, [sp, #24]
 8012fb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012fba:	6013      	str	r3, [r2, #0]
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	612b      	str	r3, [r5, #16]
 8012fc0:	f8c9 3000 	str.w	r3, [r9]
 8012fc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fc6:	2762      	movs	r7, #98	; 0x62
 8012fc8:	601d      	str	r5, [r3, #0]
 8012fca:	e72a      	b.n	8012e22 <__gethex+0x110>
 8012fcc:	1e71      	subs	r1, r6, #1
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f000 fde7 	bl	8013ba2 <__any_on>
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d1ed      	bne.n	8012fb4 <__gethex+0x2a2>
 8012fd8:	4629      	mov	r1, r5
 8012fda:	9802      	ldr	r0, [sp, #8]
 8012fdc:	f000 fa36 	bl	801344c <_Bfree>
 8012fe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	6013      	str	r3, [r2, #0]
 8012fe6:	2750      	movs	r7, #80	; 0x50
 8012fe8:	e71b      	b.n	8012e22 <__gethex+0x110>
 8012fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d0e1      	beq.n	8012fb4 <__gethex+0x2a2>
 8012ff0:	e7f2      	b.n	8012fd8 <__gethex+0x2c6>
 8012ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d1dd      	bne.n	8012fb4 <__gethex+0x2a2>
 8012ff8:	e7ee      	b.n	8012fd8 <__gethex+0x2c6>
 8012ffa:	1e67      	subs	r7, r4, #1
 8012ffc:	f1ba 0f00 	cmp.w	sl, #0
 8013000:	d131      	bne.n	8013066 <__gethex+0x354>
 8013002:	b127      	cbz	r7, 801300e <__gethex+0x2fc>
 8013004:	4639      	mov	r1, r7
 8013006:	4628      	mov	r0, r5
 8013008:	f000 fdcb 	bl	8013ba2 <__any_on>
 801300c:	4682      	mov	sl, r0
 801300e:	117a      	asrs	r2, r7, #5
 8013010:	2301      	movs	r3, #1
 8013012:	f007 071f 	and.w	r7, r7, #31
 8013016:	fa03 f707 	lsl.w	r7, r3, r7
 801301a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801301e:	4621      	mov	r1, r4
 8013020:	421f      	tst	r7, r3
 8013022:	4628      	mov	r0, r5
 8013024:	bf18      	it	ne
 8013026:	f04a 0a02 	orrne.w	sl, sl, #2
 801302a:	1b36      	subs	r6, r6, r4
 801302c:	f7ff fe22 	bl	8012c74 <rshift>
 8013030:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013034:	2702      	movs	r7, #2
 8013036:	f1ba 0f00 	cmp.w	sl, #0
 801303a:	d048      	beq.n	80130ce <__gethex+0x3bc>
 801303c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013040:	2b02      	cmp	r3, #2
 8013042:	d015      	beq.n	8013070 <__gethex+0x35e>
 8013044:	2b03      	cmp	r3, #3
 8013046:	d017      	beq.n	8013078 <__gethex+0x366>
 8013048:	2b01      	cmp	r3, #1
 801304a:	d109      	bne.n	8013060 <__gethex+0x34e>
 801304c:	f01a 0f02 	tst.w	sl, #2
 8013050:	d006      	beq.n	8013060 <__gethex+0x34e>
 8013052:	f8d9 3000 	ldr.w	r3, [r9]
 8013056:	ea4a 0a03 	orr.w	sl, sl, r3
 801305a:	f01a 0f01 	tst.w	sl, #1
 801305e:	d10e      	bne.n	801307e <__gethex+0x36c>
 8013060:	f047 0710 	orr.w	r7, r7, #16
 8013064:	e033      	b.n	80130ce <__gethex+0x3bc>
 8013066:	f04f 0a01 	mov.w	sl, #1
 801306a:	e7d0      	b.n	801300e <__gethex+0x2fc>
 801306c:	2701      	movs	r7, #1
 801306e:	e7e2      	b.n	8013036 <__gethex+0x324>
 8013070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013072:	f1c3 0301 	rsb	r3, r3, #1
 8013076:	9315      	str	r3, [sp, #84]	; 0x54
 8013078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801307a:	2b00      	cmp	r3, #0
 801307c:	d0f0      	beq.n	8013060 <__gethex+0x34e>
 801307e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013082:	f105 0314 	add.w	r3, r5, #20
 8013086:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801308a:	eb03 010a 	add.w	r1, r3, sl
 801308e:	f04f 0c00 	mov.w	ip, #0
 8013092:	4618      	mov	r0, r3
 8013094:	f853 2b04 	ldr.w	r2, [r3], #4
 8013098:	f1b2 3fff 	cmp.w	r2, #4294967295
 801309c:	d01c      	beq.n	80130d8 <__gethex+0x3c6>
 801309e:	3201      	adds	r2, #1
 80130a0:	6002      	str	r2, [r0, #0]
 80130a2:	2f02      	cmp	r7, #2
 80130a4:	f105 0314 	add.w	r3, r5, #20
 80130a8:	d138      	bne.n	801311c <__gethex+0x40a>
 80130aa:	f8d8 2000 	ldr.w	r2, [r8]
 80130ae:	3a01      	subs	r2, #1
 80130b0:	42b2      	cmp	r2, r6
 80130b2:	d10a      	bne.n	80130ca <__gethex+0x3b8>
 80130b4:	1171      	asrs	r1, r6, #5
 80130b6:	2201      	movs	r2, #1
 80130b8:	f006 061f 	and.w	r6, r6, #31
 80130bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130c0:	fa02 f606 	lsl.w	r6, r2, r6
 80130c4:	421e      	tst	r6, r3
 80130c6:	bf18      	it	ne
 80130c8:	4617      	movne	r7, r2
 80130ca:	f047 0720 	orr.w	r7, r7, #32
 80130ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130d0:	601d      	str	r5, [r3, #0]
 80130d2:	9b06      	ldr	r3, [sp, #24]
 80130d4:	601c      	str	r4, [r3, #0]
 80130d6:	e6a4      	b.n	8012e22 <__gethex+0x110>
 80130d8:	4299      	cmp	r1, r3
 80130da:	f843 cc04 	str.w	ip, [r3, #-4]
 80130de:	d8d8      	bhi.n	8013092 <__gethex+0x380>
 80130e0:	68ab      	ldr	r3, [r5, #8]
 80130e2:	4599      	cmp	r9, r3
 80130e4:	db12      	blt.n	801310c <__gethex+0x3fa>
 80130e6:	6869      	ldr	r1, [r5, #4]
 80130e8:	9802      	ldr	r0, [sp, #8]
 80130ea:	3101      	adds	r1, #1
 80130ec:	f000 f97a 	bl	80133e4 <_Balloc>
 80130f0:	692a      	ldr	r2, [r5, #16]
 80130f2:	3202      	adds	r2, #2
 80130f4:	f105 010c 	add.w	r1, r5, #12
 80130f8:	4683      	mov	fp, r0
 80130fa:	0092      	lsls	r2, r2, #2
 80130fc:	300c      	adds	r0, #12
 80130fe:	f7fd f877 	bl	80101f0 <memcpy>
 8013102:	4629      	mov	r1, r5
 8013104:	9802      	ldr	r0, [sp, #8]
 8013106:	f000 f9a1 	bl	801344c <_Bfree>
 801310a:	465d      	mov	r5, fp
 801310c:	692b      	ldr	r3, [r5, #16]
 801310e:	1c5a      	adds	r2, r3, #1
 8013110:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013114:	612a      	str	r2, [r5, #16]
 8013116:	2201      	movs	r2, #1
 8013118:	615a      	str	r2, [r3, #20]
 801311a:	e7c2      	b.n	80130a2 <__gethex+0x390>
 801311c:	692a      	ldr	r2, [r5, #16]
 801311e:	454a      	cmp	r2, r9
 8013120:	dd0b      	ble.n	801313a <__gethex+0x428>
 8013122:	2101      	movs	r1, #1
 8013124:	4628      	mov	r0, r5
 8013126:	f7ff fda5 	bl	8012c74 <rshift>
 801312a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801312e:	3401      	adds	r4, #1
 8013130:	42a3      	cmp	r3, r4
 8013132:	f6ff aed9 	blt.w	8012ee8 <__gethex+0x1d6>
 8013136:	2701      	movs	r7, #1
 8013138:	e7c7      	b.n	80130ca <__gethex+0x3b8>
 801313a:	f016 061f 	ands.w	r6, r6, #31
 801313e:	d0fa      	beq.n	8013136 <__gethex+0x424>
 8013140:	449a      	add	sl, r3
 8013142:	f1c6 0620 	rsb	r6, r6, #32
 8013146:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801314a:	f000 fa0f 	bl	801356c <__hi0bits>
 801314e:	42b0      	cmp	r0, r6
 8013150:	dbe7      	blt.n	8013122 <__gethex+0x410>
 8013152:	e7f0      	b.n	8013136 <__gethex+0x424>

08013154 <L_shift>:
 8013154:	f1c2 0208 	rsb	r2, r2, #8
 8013158:	0092      	lsls	r2, r2, #2
 801315a:	b570      	push	{r4, r5, r6, lr}
 801315c:	f1c2 0620 	rsb	r6, r2, #32
 8013160:	6843      	ldr	r3, [r0, #4]
 8013162:	6804      	ldr	r4, [r0, #0]
 8013164:	fa03 f506 	lsl.w	r5, r3, r6
 8013168:	432c      	orrs	r4, r5
 801316a:	40d3      	lsrs	r3, r2
 801316c:	6004      	str	r4, [r0, #0]
 801316e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013172:	4288      	cmp	r0, r1
 8013174:	d3f4      	bcc.n	8013160 <L_shift+0xc>
 8013176:	bd70      	pop	{r4, r5, r6, pc}

08013178 <__match>:
 8013178:	b530      	push	{r4, r5, lr}
 801317a:	6803      	ldr	r3, [r0, #0]
 801317c:	3301      	adds	r3, #1
 801317e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013182:	b914      	cbnz	r4, 801318a <__match+0x12>
 8013184:	6003      	str	r3, [r0, #0]
 8013186:	2001      	movs	r0, #1
 8013188:	bd30      	pop	{r4, r5, pc}
 801318a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801318e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013192:	2d19      	cmp	r5, #25
 8013194:	bf98      	it	ls
 8013196:	3220      	addls	r2, #32
 8013198:	42a2      	cmp	r2, r4
 801319a:	d0f0      	beq.n	801317e <__match+0x6>
 801319c:	2000      	movs	r0, #0
 801319e:	e7f3      	b.n	8013188 <__match+0x10>

080131a0 <__hexnan>:
 80131a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a4:	680b      	ldr	r3, [r1, #0]
 80131a6:	6801      	ldr	r1, [r0, #0]
 80131a8:	115f      	asrs	r7, r3, #5
 80131aa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80131ae:	f013 031f 	ands.w	r3, r3, #31
 80131b2:	b087      	sub	sp, #28
 80131b4:	bf18      	it	ne
 80131b6:	3704      	addne	r7, #4
 80131b8:	2500      	movs	r5, #0
 80131ba:	1f3e      	subs	r6, r7, #4
 80131bc:	4682      	mov	sl, r0
 80131be:	4690      	mov	r8, r2
 80131c0:	9301      	str	r3, [sp, #4]
 80131c2:	f847 5c04 	str.w	r5, [r7, #-4]
 80131c6:	46b1      	mov	r9, r6
 80131c8:	4634      	mov	r4, r6
 80131ca:	9502      	str	r5, [sp, #8]
 80131cc:	46ab      	mov	fp, r5
 80131ce:	784a      	ldrb	r2, [r1, #1]
 80131d0:	1c4b      	adds	r3, r1, #1
 80131d2:	9303      	str	r3, [sp, #12]
 80131d4:	b342      	cbz	r2, 8013228 <__hexnan+0x88>
 80131d6:	4610      	mov	r0, r2
 80131d8:	9105      	str	r1, [sp, #20]
 80131da:	9204      	str	r2, [sp, #16]
 80131dc:	f7ff fd84 	bl	8012ce8 <__hexdig_fun>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d143      	bne.n	801326c <__hexnan+0xcc>
 80131e4:	9a04      	ldr	r2, [sp, #16]
 80131e6:	9905      	ldr	r1, [sp, #20]
 80131e8:	2a20      	cmp	r2, #32
 80131ea:	d818      	bhi.n	801321e <__hexnan+0x7e>
 80131ec:	9b02      	ldr	r3, [sp, #8]
 80131ee:	459b      	cmp	fp, r3
 80131f0:	dd13      	ble.n	801321a <__hexnan+0x7a>
 80131f2:	454c      	cmp	r4, r9
 80131f4:	d206      	bcs.n	8013204 <__hexnan+0x64>
 80131f6:	2d07      	cmp	r5, #7
 80131f8:	dc04      	bgt.n	8013204 <__hexnan+0x64>
 80131fa:	462a      	mov	r2, r5
 80131fc:	4649      	mov	r1, r9
 80131fe:	4620      	mov	r0, r4
 8013200:	f7ff ffa8 	bl	8013154 <L_shift>
 8013204:	4544      	cmp	r4, r8
 8013206:	d944      	bls.n	8013292 <__hexnan+0xf2>
 8013208:	2300      	movs	r3, #0
 801320a:	f1a4 0904 	sub.w	r9, r4, #4
 801320e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013212:	f8cd b008 	str.w	fp, [sp, #8]
 8013216:	464c      	mov	r4, r9
 8013218:	461d      	mov	r5, r3
 801321a:	9903      	ldr	r1, [sp, #12]
 801321c:	e7d7      	b.n	80131ce <__hexnan+0x2e>
 801321e:	2a29      	cmp	r2, #41	; 0x29
 8013220:	d14a      	bne.n	80132b8 <__hexnan+0x118>
 8013222:	3102      	adds	r1, #2
 8013224:	f8ca 1000 	str.w	r1, [sl]
 8013228:	f1bb 0f00 	cmp.w	fp, #0
 801322c:	d044      	beq.n	80132b8 <__hexnan+0x118>
 801322e:	454c      	cmp	r4, r9
 8013230:	d206      	bcs.n	8013240 <__hexnan+0xa0>
 8013232:	2d07      	cmp	r5, #7
 8013234:	dc04      	bgt.n	8013240 <__hexnan+0xa0>
 8013236:	462a      	mov	r2, r5
 8013238:	4649      	mov	r1, r9
 801323a:	4620      	mov	r0, r4
 801323c:	f7ff ff8a 	bl	8013154 <L_shift>
 8013240:	4544      	cmp	r4, r8
 8013242:	d928      	bls.n	8013296 <__hexnan+0xf6>
 8013244:	4643      	mov	r3, r8
 8013246:	f854 2b04 	ldr.w	r2, [r4], #4
 801324a:	f843 2b04 	str.w	r2, [r3], #4
 801324e:	42a6      	cmp	r6, r4
 8013250:	d2f9      	bcs.n	8013246 <__hexnan+0xa6>
 8013252:	2200      	movs	r2, #0
 8013254:	f843 2b04 	str.w	r2, [r3], #4
 8013258:	429e      	cmp	r6, r3
 801325a:	d2fb      	bcs.n	8013254 <__hexnan+0xb4>
 801325c:	6833      	ldr	r3, [r6, #0]
 801325e:	b91b      	cbnz	r3, 8013268 <__hexnan+0xc8>
 8013260:	4546      	cmp	r6, r8
 8013262:	d127      	bne.n	80132b4 <__hexnan+0x114>
 8013264:	2301      	movs	r3, #1
 8013266:	6033      	str	r3, [r6, #0]
 8013268:	2005      	movs	r0, #5
 801326a:	e026      	b.n	80132ba <__hexnan+0x11a>
 801326c:	3501      	adds	r5, #1
 801326e:	2d08      	cmp	r5, #8
 8013270:	f10b 0b01 	add.w	fp, fp, #1
 8013274:	dd06      	ble.n	8013284 <__hexnan+0xe4>
 8013276:	4544      	cmp	r4, r8
 8013278:	d9cf      	bls.n	801321a <__hexnan+0x7a>
 801327a:	2300      	movs	r3, #0
 801327c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013280:	2501      	movs	r5, #1
 8013282:	3c04      	subs	r4, #4
 8013284:	6822      	ldr	r2, [r4, #0]
 8013286:	f000 000f 	and.w	r0, r0, #15
 801328a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801328e:	6020      	str	r0, [r4, #0]
 8013290:	e7c3      	b.n	801321a <__hexnan+0x7a>
 8013292:	2508      	movs	r5, #8
 8013294:	e7c1      	b.n	801321a <__hexnan+0x7a>
 8013296:	9b01      	ldr	r3, [sp, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d0df      	beq.n	801325c <__hexnan+0xbc>
 801329c:	f04f 32ff 	mov.w	r2, #4294967295
 80132a0:	f1c3 0320 	rsb	r3, r3, #32
 80132a4:	fa22 f303 	lsr.w	r3, r2, r3
 80132a8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80132ac:	401a      	ands	r2, r3
 80132ae:	f847 2c04 	str.w	r2, [r7, #-4]
 80132b2:	e7d3      	b.n	801325c <__hexnan+0xbc>
 80132b4:	3e04      	subs	r6, #4
 80132b6:	e7d1      	b.n	801325c <__hexnan+0xbc>
 80132b8:	2004      	movs	r0, #4
 80132ba:	b007      	add	sp, #28
 80132bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132c0 <__locale_ctype_ptr_l>:
 80132c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80132c4:	4770      	bx	lr

080132c6 <__localeconv_l>:
 80132c6:	30f0      	adds	r0, #240	; 0xf0
 80132c8:	4770      	bx	lr
	...

080132cc <_localeconv_r>:
 80132cc:	4b04      	ldr	r3, [pc, #16]	; (80132e0 <_localeconv_r+0x14>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	6a18      	ldr	r0, [r3, #32]
 80132d2:	4b04      	ldr	r3, [pc, #16]	; (80132e4 <_localeconv_r+0x18>)
 80132d4:	2800      	cmp	r0, #0
 80132d6:	bf08      	it	eq
 80132d8:	4618      	moveq	r0, r3
 80132da:	30f0      	adds	r0, #240	; 0xf0
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	20000168 	.word	0x20000168
 80132e4:	200001cc 	.word	0x200001cc

080132e8 <__swhatbuf_r>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	460e      	mov	r6, r1
 80132ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132f0:	2900      	cmp	r1, #0
 80132f2:	b096      	sub	sp, #88	; 0x58
 80132f4:	4614      	mov	r4, r2
 80132f6:	461d      	mov	r5, r3
 80132f8:	da07      	bge.n	801330a <__swhatbuf_r+0x22>
 80132fa:	2300      	movs	r3, #0
 80132fc:	602b      	str	r3, [r5, #0]
 80132fe:	89b3      	ldrh	r3, [r6, #12]
 8013300:	061a      	lsls	r2, r3, #24
 8013302:	d410      	bmi.n	8013326 <__swhatbuf_r+0x3e>
 8013304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013308:	e00e      	b.n	8013328 <__swhatbuf_r+0x40>
 801330a:	466a      	mov	r2, sp
 801330c:	f000 ff06 	bl	801411c <_fstat_r>
 8013310:	2800      	cmp	r0, #0
 8013312:	dbf2      	blt.n	80132fa <__swhatbuf_r+0x12>
 8013314:	9a01      	ldr	r2, [sp, #4]
 8013316:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801331a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801331e:	425a      	negs	r2, r3
 8013320:	415a      	adcs	r2, r3
 8013322:	602a      	str	r2, [r5, #0]
 8013324:	e7ee      	b.n	8013304 <__swhatbuf_r+0x1c>
 8013326:	2340      	movs	r3, #64	; 0x40
 8013328:	2000      	movs	r0, #0
 801332a:	6023      	str	r3, [r4, #0]
 801332c:	b016      	add	sp, #88	; 0x58
 801332e:	bd70      	pop	{r4, r5, r6, pc}

08013330 <__smakebuf_r>:
 8013330:	898b      	ldrh	r3, [r1, #12]
 8013332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013334:	079d      	lsls	r5, r3, #30
 8013336:	4606      	mov	r6, r0
 8013338:	460c      	mov	r4, r1
 801333a:	d507      	bpl.n	801334c <__smakebuf_r+0x1c>
 801333c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013340:	6023      	str	r3, [r4, #0]
 8013342:	6123      	str	r3, [r4, #16]
 8013344:	2301      	movs	r3, #1
 8013346:	6163      	str	r3, [r4, #20]
 8013348:	b002      	add	sp, #8
 801334a:	bd70      	pop	{r4, r5, r6, pc}
 801334c:	ab01      	add	r3, sp, #4
 801334e:	466a      	mov	r2, sp
 8013350:	f7ff ffca 	bl	80132e8 <__swhatbuf_r>
 8013354:	9900      	ldr	r1, [sp, #0]
 8013356:	4605      	mov	r5, r0
 8013358:	4630      	mov	r0, r6
 801335a:	f000 fc9f 	bl	8013c9c <_malloc_r>
 801335e:	b948      	cbnz	r0, 8013374 <__smakebuf_r+0x44>
 8013360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013364:	059a      	lsls	r2, r3, #22
 8013366:	d4ef      	bmi.n	8013348 <__smakebuf_r+0x18>
 8013368:	f023 0303 	bic.w	r3, r3, #3
 801336c:	f043 0302 	orr.w	r3, r3, #2
 8013370:	81a3      	strh	r3, [r4, #12]
 8013372:	e7e3      	b.n	801333c <__smakebuf_r+0xc>
 8013374:	4b0d      	ldr	r3, [pc, #52]	; (80133ac <__smakebuf_r+0x7c>)
 8013376:	62b3      	str	r3, [r6, #40]	; 0x28
 8013378:	89a3      	ldrh	r3, [r4, #12]
 801337a:	6020      	str	r0, [r4, #0]
 801337c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013380:	81a3      	strh	r3, [r4, #12]
 8013382:	9b00      	ldr	r3, [sp, #0]
 8013384:	6163      	str	r3, [r4, #20]
 8013386:	9b01      	ldr	r3, [sp, #4]
 8013388:	6120      	str	r0, [r4, #16]
 801338a:	b15b      	cbz	r3, 80133a4 <__smakebuf_r+0x74>
 801338c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013390:	4630      	mov	r0, r6
 8013392:	f000 fed5 	bl	8014140 <_isatty_r>
 8013396:	b128      	cbz	r0, 80133a4 <__smakebuf_r+0x74>
 8013398:	89a3      	ldrh	r3, [r4, #12]
 801339a:	f023 0303 	bic.w	r3, r3, #3
 801339e:	f043 0301 	orr.w	r3, r3, #1
 80133a2:	81a3      	strh	r3, [r4, #12]
 80133a4:	89a3      	ldrh	r3, [r4, #12]
 80133a6:	431d      	orrs	r5, r3
 80133a8:	81a5      	strh	r5, [r4, #12]
 80133aa:	e7cd      	b.n	8013348 <__smakebuf_r+0x18>
 80133ac:	08012b29 	.word	0x08012b29

080133b0 <malloc>:
 80133b0:	4b02      	ldr	r3, [pc, #8]	; (80133bc <malloc+0xc>)
 80133b2:	4601      	mov	r1, r0
 80133b4:	6818      	ldr	r0, [r3, #0]
 80133b6:	f000 bc71 	b.w	8013c9c <_malloc_r>
 80133ba:	bf00      	nop
 80133bc:	20000168 	.word	0x20000168

080133c0 <__ascii_mbtowc>:
 80133c0:	b082      	sub	sp, #8
 80133c2:	b901      	cbnz	r1, 80133c6 <__ascii_mbtowc+0x6>
 80133c4:	a901      	add	r1, sp, #4
 80133c6:	b142      	cbz	r2, 80133da <__ascii_mbtowc+0x1a>
 80133c8:	b14b      	cbz	r3, 80133de <__ascii_mbtowc+0x1e>
 80133ca:	7813      	ldrb	r3, [r2, #0]
 80133cc:	600b      	str	r3, [r1, #0]
 80133ce:	7812      	ldrb	r2, [r2, #0]
 80133d0:	1c10      	adds	r0, r2, #0
 80133d2:	bf18      	it	ne
 80133d4:	2001      	movne	r0, #1
 80133d6:	b002      	add	sp, #8
 80133d8:	4770      	bx	lr
 80133da:	4610      	mov	r0, r2
 80133dc:	e7fb      	b.n	80133d6 <__ascii_mbtowc+0x16>
 80133de:	f06f 0001 	mvn.w	r0, #1
 80133e2:	e7f8      	b.n	80133d6 <__ascii_mbtowc+0x16>

080133e4 <_Balloc>:
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80133e8:	4604      	mov	r4, r0
 80133ea:	460e      	mov	r6, r1
 80133ec:	b93d      	cbnz	r5, 80133fe <_Balloc+0x1a>
 80133ee:	2010      	movs	r0, #16
 80133f0:	f7ff ffde 	bl	80133b0 <malloc>
 80133f4:	6260      	str	r0, [r4, #36]	; 0x24
 80133f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80133fa:	6005      	str	r5, [r0, #0]
 80133fc:	60c5      	str	r5, [r0, #12]
 80133fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013400:	68eb      	ldr	r3, [r5, #12]
 8013402:	b183      	cbz	r3, 8013426 <_Balloc+0x42>
 8013404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801340c:	b9b8      	cbnz	r0, 801343e <_Balloc+0x5a>
 801340e:	2101      	movs	r1, #1
 8013410:	fa01 f506 	lsl.w	r5, r1, r6
 8013414:	1d6a      	adds	r2, r5, #5
 8013416:	0092      	lsls	r2, r2, #2
 8013418:	4620      	mov	r0, r4
 801341a:	f000 fbe3 	bl	8013be4 <_calloc_r>
 801341e:	b160      	cbz	r0, 801343a <_Balloc+0x56>
 8013420:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013424:	e00e      	b.n	8013444 <_Balloc+0x60>
 8013426:	2221      	movs	r2, #33	; 0x21
 8013428:	2104      	movs	r1, #4
 801342a:	4620      	mov	r0, r4
 801342c:	f000 fbda 	bl	8013be4 <_calloc_r>
 8013430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013432:	60e8      	str	r0, [r5, #12]
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1e4      	bne.n	8013404 <_Balloc+0x20>
 801343a:	2000      	movs	r0, #0
 801343c:	bd70      	pop	{r4, r5, r6, pc}
 801343e:	6802      	ldr	r2, [r0, #0]
 8013440:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013444:	2300      	movs	r3, #0
 8013446:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801344a:	e7f7      	b.n	801343c <_Balloc+0x58>

0801344c <_Bfree>:
 801344c:	b570      	push	{r4, r5, r6, lr}
 801344e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013450:	4606      	mov	r6, r0
 8013452:	460d      	mov	r5, r1
 8013454:	b93c      	cbnz	r4, 8013466 <_Bfree+0x1a>
 8013456:	2010      	movs	r0, #16
 8013458:	f7ff ffaa 	bl	80133b0 <malloc>
 801345c:	6270      	str	r0, [r6, #36]	; 0x24
 801345e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013462:	6004      	str	r4, [r0, #0]
 8013464:	60c4      	str	r4, [r0, #12]
 8013466:	b13d      	cbz	r5, 8013478 <_Bfree+0x2c>
 8013468:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801346a:	686a      	ldr	r2, [r5, #4]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013472:	6029      	str	r1, [r5, #0]
 8013474:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013478:	bd70      	pop	{r4, r5, r6, pc}

0801347a <__multadd>:
 801347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801347e:	690d      	ldr	r5, [r1, #16]
 8013480:	461f      	mov	r7, r3
 8013482:	4606      	mov	r6, r0
 8013484:	460c      	mov	r4, r1
 8013486:	f101 0c14 	add.w	ip, r1, #20
 801348a:	2300      	movs	r3, #0
 801348c:	f8dc 0000 	ldr.w	r0, [ip]
 8013490:	b281      	uxth	r1, r0
 8013492:	fb02 7101 	mla	r1, r2, r1, r7
 8013496:	0c0f      	lsrs	r7, r1, #16
 8013498:	0c00      	lsrs	r0, r0, #16
 801349a:	fb02 7000 	mla	r0, r2, r0, r7
 801349e:	b289      	uxth	r1, r1
 80134a0:	3301      	adds	r3, #1
 80134a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80134a6:	429d      	cmp	r5, r3
 80134a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80134ac:	f84c 1b04 	str.w	r1, [ip], #4
 80134b0:	dcec      	bgt.n	801348c <__multadd+0x12>
 80134b2:	b1d7      	cbz	r7, 80134ea <__multadd+0x70>
 80134b4:	68a3      	ldr	r3, [r4, #8]
 80134b6:	42ab      	cmp	r3, r5
 80134b8:	dc12      	bgt.n	80134e0 <__multadd+0x66>
 80134ba:	6861      	ldr	r1, [r4, #4]
 80134bc:	4630      	mov	r0, r6
 80134be:	3101      	adds	r1, #1
 80134c0:	f7ff ff90 	bl	80133e4 <_Balloc>
 80134c4:	6922      	ldr	r2, [r4, #16]
 80134c6:	3202      	adds	r2, #2
 80134c8:	f104 010c 	add.w	r1, r4, #12
 80134cc:	4680      	mov	r8, r0
 80134ce:	0092      	lsls	r2, r2, #2
 80134d0:	300c      	adds	r0, #12
 80134d2:	f7fc fe8d 	bl	80101f0 <memcpy>
 80134d6:	4621      	mov	r1, r4
 80134d8:	4630      	mov	r0, r6
 80134da:	f7ff ffb7 	bl	801344c <_Bfree>
 80134de:	4644      	mov	r4, r8
 80134e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80134e4:	3501      	adds	r5, #1
 80134e6:	615f      	str	r7, [r3, #20]
 80134e8:	6125      	str	r5, [r4, #16]
 80134ea:	4620      	mov	r0, r4
 80134ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134f0 <__s2b>:
 80134f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134f4:	460c      	mov	r4, r1
 80134f6:	4615      	mov	r5, r2
 80134f8:	461f      	mov	r7, r3
 80134fa:	2209      	movs	r2, #9
 80134fc:	3308      	adds	r3, #8
 80134fe:	4606      	mov	r6, r0
 8013500:	fb93 f3f2 	sdiv	r3, r3, r2
 8013504:	2100      	movs	r1, #0
 8013506:	2201      	movs	r2, #1
 8013508:	429a      	cmp	r2, r3
 801350a:	db20      	blt.n	801354e <__s2b+0x5e>
 801350c:	4630      	mov	r0, r6
 801350e:	f7ff ff69 	bl	80133e4 <_Balloc>
 8013512:	9b08      	ldr	r3, [sp, #32]
 8013514:	6143      	str	r3, [r0, #20]
 8013516:	2d09      	cmp	r5, #9
 8013518:	f04f 0301 	mov.w	r3, #1
 801351c:	6103      	str	r3, [r0, #16]
 801351e:	dd19      	ble.n	8013554 <__s2b+0x64>
 8013520:	f104 0809 	add.w	r8, r4, #9
 8013524:	46c1      	mov	r9, r8
 8013526:	442c      	add	r4, r5
 8013528:	f819 3b01 	ldrb.w	r3, [r9], #1
 801352c:	4601      	mov	r1, r0
 801352e:	3b30      	subs	r3, #48	; 0x30
 8013530:	220a      	movs	r2, #10
 8013532:	4630      	mov	r0, r6
 8013534:	f7ff ffa1 	bl	801347a <__multadd>
 8013538:	45a1      	cmp	r9, r4
 801353a:	d1f5      	bne.n	8013528 <__s2b+0x38>
 801353c:	eb08 0405 	add.w	r4, r8, r5
 8013540:	3c08      	subs	r4, #8
 8013542:	1b2d      	subs	r5, r5, r4
 8013544:	1963      	adds	r3, r4, r5
 8013546:	42bb      	cmp	r3, r7
 8013548:	db07      	blt.n	801355a <__s2b+0x6a>
 801354a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801354e:	0052      	lsls	r2, r2, #1
 8013550:	3101      	adds	r1, #1
 8013552:	e7d9      	b.n	8013508 <__s2b+0x18>
 8013554:	340a      	adds	r4, #10
 8013556:	2509      	movs	r5, #9
 8013558:	e7f3      	b.n	8013542 <__s2b+0x52>
 801355a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801355e:	4601      	mov	r1, r0
 8013560:	3b30      	subs	r3, #48	; 0x30
 8013562:	220a      	movs	r2, #10
 8013564:	4630      	mov	r0, r6
 8013566:	f7ff ff88 	bl	801347a <__multadd>
 801356a:	e7eb      	b.n	8013544 <__s2b+0x54>

0801356c <__hi0bits>:
 801356c:	0c02      	lsrs	r2, r0, #16
 801356e:	0412      	lsls	r2, r2, #16
 8013570:	4603      	mov	r3, r0
 8013572:	b9b2      	cbnz	r2, 80135a2 <__hi0bits+0x36>
 8013574:	0403      	lsls	r3, r0, #16
 8013576:	2010      	movs	r0, #16
 8013578:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801357c:	bf04      	itt	eq
 801357e:	021b      	lsleq	r3, r3, #8
 8013580:	3008      	addeq	r0, #8
 8013582:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013586:	bf04      	itt	eq
 8013588:	011b      	lsleq	r3, r3, #4
 801358a:	3004      	addeq	r0, #4
 801358c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013590:	bf04      	itt	eq
 8013592:	009b      	lsleq	r3, r3, #2
 8013594:	3002      	addeq	r0, #2
 8013596:	2b00      	cmp	r3, #0
 8013598:	db06      	blt.n	80135a8 <__hi0bits+0x3c>
 801359a:	005b      	lsls	r3, r3, #1
 801359c:	d503      	bpl.n	80135a6 <__hi0bits+0x3a>
 801359e:	3001      	adds	r0, #1
 80135a0:	4770      	bx	lr
 80135a2:	2000      	movs	r0, #0
 80135a4:	e7e8      	b.n	8013578 <__hi0bits+0xc>
 80135a6:	2020      	movs	r0, #32
 80135a8:	4770      	bx	lr

080135aa <__lo0bits>:
 80135aa:	6803      	ldr	r3, [r0, #0]
 80135ac:	f013 0207 	ands.w	r2, r3, #7
 80135b0:	4601      	mov	r1, r0
 80135b2:	d00b      	beq.n	80135cc <__lo0bits+0x22>
 80135b4:	07da      	lsls	r2, r3, #31
 80135b6:	d423      	bmi.n	8013600 <__lo0bits+0x56>
 80135b8:	0798      	lsls	r0, r3, #30
 80135ba:	bf49      	itett	mi
 80135bc:	085b      	lsrmi	r3, r3, #1
 80135be:	089b      	lsrpl	r3, r3, #2
 80135c0:	2001      	movmi	r0, #1
 80135c2:	600b      	strmi	r3, [r1, #0]
 80135c4:	bf5c      	itt	pl
 80135c6:	600b      	strpl	r3, [r1, #0]
 80135c8:	2002      	movpl	r0, #2
 80135ca:	4770      	bx	lr
 80135cc:	b298      	uxth	r0, r3
 80135ce:	b9a8      	cbnz	r0, 80135fc <__lo0bits+0x52>
 80135d0:	0c1b      	lsrs	r3, r3, #16
 80135d2:	2010      	movs	r0, #16
 80135d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80135d8:	bf04      	itt	eq
 80135da:	0a1b      	lsreq	r3, r3, #8
 80135dc:	3008      	addeq	r0, #8
 80135de:	071a      	lsls	r2, r3, #28
 80135e0:	bf04      	itt	eq
 80135e2:	091b      	lsreq	r3, r3, #4
 80135e4:	3004      	addeq	r0, #4
 80135e6:	079a      	lsls	r2, r3, #30
 80135e8:	bf04      	itt	eq
 80135ea:	089b      	lsreq	r3, r3, #2
 80135ec:	3002      	addeq	r0, #2
 80135ee:	07da      	lsls	r2, r3, #31
 80135f0:	d402      	bmi.n	80135f8 <__lo0bits+0x4e>
 80135f2:	085b      	lsrs	r3, r3, #1
 80135f4:	d006      	beq.n	8013604 <__lo0bits+0x5a>
 80135f6:	3001      	adds	r0, #1
 80135f8:	600b      	str	r3, [r1, #0]
 80135fa:	4770      	bx	lr
 80135fc:	4610      	mov	r0, r2
 80135fe:	e7e9      	b.n	80135d4 <__lo0bits+0x2a>
 8013600:	2000      	movs	r0, #0
 8013602:	4770      	bx	lr
 8013604:	2020      	movs	r0, #32
 8013606:	4770      	bx	lr

08013608 <__i2b>:
 8013608:	b510      	push	{r4, lr}
 801360a:	460c      	mov	r4, r1
 801360c:	2101      	movs	r1, #1
 801360e:	f7ff fee9 	bl	80133e4 <_Balloc>
 8013612:	2201      	movs	r2, #1
 8013614:	6144      	str	r4, [r0, #20]
 8013616:	6102      	str	r2, [r0, #16]
 8013618:	bd10      	pop	{r4, pc}

0801361a <__multiply>:
 801361a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801361e:	4614      	mov	r4, r2
 8013620:	690a      	ldr	r2, [r1, #16]
 8013622:	6923      	ldr	r3, [r4, #16]
 8013624:	429a      	cmp	r2, r3
 8013626:	bfb8      	it	lt
 8013628:	460b      	movlt	r3, r1
 801362a:	4688      	mov	r8, r1
 801362c:	bfbc      	itt	lt
 801362e:	46a0      	movlt	r8, r4
 8013630:	461c      	movlt	r4, r3
 8013632:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013636:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801363a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801363e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013642:	eb07 0609 	add.w	r6, r7, r9
 8013646:	42b3      	cmp	r3, r6
 8013648:	bfb8      	it	lt
 801364a:	3101      	addlt	r1, #1
 801364c:	f7ff feca 	bl	80133e4 <_Balloc>
 8013650:	f100 0514 	add.w	r5, r0, #20
 8013654:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013658:	462b      	mov	r3, r5
 801365a:	2200      	movs	r2, #0
 801365c:	4573      	cmp	r3, lr
 801365e:	d316      	bcc.n	801368e <__multiply+0x74>
 8013660:	f104 0214 	add.w	r2, r4, #20
 8013664:	f108 0114 	add.w	r1, r8, #20
 8013668:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801366c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	9b00      	ldr	r3, [sp, #0]
 8013674:	9201      	str	r2, [sp, #4]
 8013676:	4293      	cmp	r3, r2
 8013678:	d80c      	bhi.n	8013694 <__multiply+0x7a>
 801367a:	2e00      	cmp	r6, #0
 801367c:	dd03      	ble.n	8013686 <__multiply+0x6c>
 801367e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013682:	2b00      	cmp	r3, #0
 8013684:	d05d      	beq.n	8013742 <__multiply+0x128>
 8013686:	6106      	str	r6, [r0, #16]
 8013688:	b003      	add	sp, #12
 801368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368e:	f843 2b04 	str.w	r2, [r3], #4
 8013692:	e7e3      	b.n	801365c <__multiply+0x42>
 8013694:	f8b2 b000 	ldrh.w	fp, [r2]
 8013698:	f1bb 0f00 	cmp.w	fp, #0
 801369c:	d023      	beq.n	80136e6 <__multiply+0xcc>
 801369e:	4689      	mov	r9, r1
 80136a0:	46ac      	mov	ip, r5
 80136a2:	f04f 0800 	mov.w	r8, #0
 80136a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80136aa:	f8dc a000 	ldr.w	sl, [ip]
 80136ae:	b2a3      	uxth	r3, r4
 80136b0:	fa1f fa8a 	uxth.w	sl, sl
 80136b4:	fb0b a303 	mla	r3, fp, r3, sl
 80136b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80136bc:	f8dc 4000 	ldr.w	r4, [ip]
 80136c0:	4443      	add	r3, r8
 80136c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80136c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80136ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80136ce:	46e2      	mov	sl, ip
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80136d6:	454f      	cmp	r7, r9
 80136d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80136dc:	f84a 3b04 	str.w	r3, [sl], #4
 80136e0:	d82b      	bhi.n	801373a <__multiply+0x120>
 80136e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80136e6:	9b01      	ldr	r3, [sp, #4]
 80136e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80136ec:	3204      	adds	r2, #4
 80136ee:	f1ba 0f00 	cmp.w	sl, #0
 80136f2:	d020      	beq.n	8013736 <__multiply+0x11c>
 80136f4:	682b      	ldr	r3, [r5, #0]
 80136f6:	4689      	mov	r9, r1
 80136f8:	46a8      	mov	r8, r5
 80136fa:	f04f 0b00 	mov.w	fp, #0
 80136fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8013702:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013706:	fb0a 440c 	mla	r4, sl, ip, r4
 801370a:	445c      	add	r4, fp
 801370c:	46c4      	mov	ip, r8
 801370e:	b29b      	uxth	r3, r3
 8013710:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013714:	f84c 3b04 	str.w	r3, [ip], #4
 8013718:	f859 3b04 	ldr.w	r3, [r9], #4
 801371c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013720:	0c1b      	lsrs	r3, r3, #16
 8013722:	fb0a b303 	mla	r3, sl, r3, fp
 8013726:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801372a:	454f      	cmp	r7, r9
 801372c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013730:	d805      	bhi.n	801373e <__multiply+0x124>
 8013732:	f8c8 3004 	str.w	r3, [r8, #4]
 8013736:	3504      	adds	r5, #4
 8013738:	e79b      	b.n	8013672 <__multiply+0x58>
 801373a:	46d4      	mov	ip, sl
 801373c:	e7b3      	b.n	80136a6 <__multiply+0x8c>
 801373e:	46e0      	mov	r8, ip
 8013740:	e7dd      	b.n	80136fe <__multiply+0xe4>
 8013742:	3e01      	subs	r6, #1
 8013744:	e799      	b.n	801367a <__multiply+0x60>
	...

08013748 <__pow5mult>:
 8013748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801374c:	4615      	mov	r5, r2
 801374e:	f012 0203 	ands.w	r2, r2, #3
 8013752:	4606      	mov	r6, r0
 8013754:	460f      	mov	r7, r1
 8013756:	d007      	beq.n	8013768 <__pow5mult+0x20>
 8013758:	3a01      	subs	r2, #1
 801375a:	4c21      	ldr	r4, [pc, #132]	; (80137e0 <__pow5mult+0x98>)
 801375c:	2300      	movs	r3, #0
 801375e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013762:	f7ff fe8a 	bl	801347a <__multadd>
 8013766:	4607      	mov	r7, r0
 8013768:	10ad      	asrs	r5, r5, #2
 801376a:	d035      	beq.n	80137d8 <__pow5mult+0x90>
 801376c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801376e:	b93c      	cbnz	r4, 8013780 <__pow5mult+0x38>
 8013770:	2010      	movs	r0, #16
 8013772:	f7ff fe1d 	bl	80133b0 <malloc>
 8013776:	6270      	str	r0, [r6, #36]	; 0x24
 8013778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801377c:	6004      	str	r4, [r0, #0]
 801377e:	60c4      	str	r4, [r0, #12]
 8013780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013788:	b94c      	cbnz	r4, 801379e <__pow5mult+0x56>
 801378a:	f240 2171 	movw	r1, #625	; 0x271
 801378e:	4630      	mov	r0, r6
 8013790:	f7ff ff3a 	bl	8013608 <__i2b>
 8013794:	2300      	movs	r3, #0
 8013796:	f8c8 0008 	str.w	r0, [r8, #8]
 801379a:	4604      	mov	r4, r0
 801379c:	6003      	str	r3, [r0, #0]
 801379e:	f04f 0800 	mov.w	r8, #0
 80137a2:	07eb      	lsls	r3, r5, #31
 80137a4:	d50a      	bpl.n	80137bc <__pow5mult+0x74>
 80137a6:	4639      	mov	r1, r7
 80137a8:	4622      	mov	r2, r4
 80137aa:	4630      	mov	r0, r6
 80137ac:	f7ff ff35 	bl	801361a <__multiply>
 80137b0:	4639      	mov	r1, r7
 80137b2:	4681      	mov	r9, r0
 80137b4:	4630      	mov	r0, r6
 80137b6:	f7ff fe49 	bl	801344c <_Bfree>
 80137ba:	464f      	mov	r7, r9
 80137bc:	106d      	asrs	r5, r5, #1
 80137be:	d00b      	beq.n	80137d8 <__pow5mult+0x90>
 80137c0:	6820      	ldr	r0, [r4, #0]
 80137c2:	b938      	cbnz	r0, 80137d4 <__pow5mult+0x8c>
 80137c4:	4622      	mov	r2, r4
 80137c6:	4621      	mov	r1, r4
 80137c8:	4630      	mov	r0, r6
 80137ca:	f7ff ff26 	bl	801361a <__multiply>
 80137ce:	6020      	str	r0, [r4, #0]
 80137d0:	f8c0 8000 	str.w	r8, [r0]
 80137d4:	4604      	mov	r4, r0
 80137d6:	e7e4      	b.n	80137a2 <__pow5mult+0x5a>
 80137d8:	4638      	mov	r0, r7
 80137da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137de:	bf00      	nop
 80137e0:	08015108 	.word	0x08015108

080137e4 <__lshift>:
 80137e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e8:	460c      	mov	r4, r1
 80137ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80137ee:	6923      	ldr	r3, [r4, #16]
 80137f0:	6849      	ldr	r1, [r1, #4]
 80137f2:	eb0a 0903 	add.w	r9, sl, r3
 80137f6:	68a3      	ldr	r3, [r4, #8]
 80137f8:	4607      	mov	r7, r0
 80137fa:	4616      	mov	r6, r2
 80137fc:	f109 0501 	add.w	r5, r9, #1
 8013800:	42ab      	cmp	r3, r5
 8013802:	db32      	blt.n	801386a <__lshift+0x86>
 8013804:	4638      	mov	r0, r7
 8013806:	f7ff fded 	bl	80133e4 <_Balloc>
 801380a:	2300      	movs	r3, #0
 801380c:	4680      	mov	r8, r0
 801380e:	f100 0114 	add.w	r1, r0, #20
 8013812:	461a      	mov	r2, r3
 8013814:	4553      	cmp	r3, sl
 8013816:	db2b      	blt.n	8013870 <__lshift+0x8c>
 8013818:	6920      	ldr	r0, [r4, #16]
 801381a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801381e:	f104 0314 	add.w	r3, r4, #20
 8013822:	f016 021f 	ands.w	r2, r6, #31
 8013826:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801382a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801382e:	d025      	beq.n	801387c <__lshift+0x98>
 8013830:	f1c2 0e20 	rsb	lr, r2, #32
 8013834:	2000      	movs	r0, #0
 8013836:	681e      	ldr	r6, [r3, #0]
 8013838:	468a      	mov	sl, r1
 801383a:	4096      	lsls	r6, r2
 801383c:	4330      	orrs	r0, r6
 801383e:	f84a 0b04 	str.w	r0, [sl], #4
 8013842:	f853 0b04 	ldr.w	r0, [r3], #4
 8013846:	459c      	cmp	ip, r3
 8013848:	fa20 f00e 	lsr.w	r0, r0, lr
 801384c:	d814      	bhi.n	8013878 <__lshift+0x94>
 801384e:	6048      	str	r0, [r1, #4]
 8013850:	b108      	cbz	r0, 8013856 <__lshift+0x72>
 8013852:	f109 0502 	add.w	r5, r9, #2
 8013856:	3d01      	subs	r5, #1
 8013858:	4638      	mov	r0, r7
 801385a:	f8c8 5010 	str.w	r5, [r8, #16]
 801385e:	4621      	mov	r1, r4
 8013860:	f7ff fdf4 	bl	801344c <_Bfree>
 8013864:	4640      	mov	r0, r8
 8013866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386a:	3101      	adds	r1, #1
 801386c:	005b      	lsls	r3, r3, #1
 801386e:	e7c7      	b.n	8013800 <__lshift+0x1c>
 8013870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013874:	3301      	adds	r3, #1
 8013876:	e7cd      	b.n	8013814 <__lshift+0x30>
 8013878:	4651      	mov	r1, sl
 801387a:	e7dc      	b.n	8013836 <__lshift+0x52>
 801387c:	3904      	subs	r1, #4
 801387e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013882:	f841 2f04 	str.w	r2, [r1, #4]!
 8013886:	459c      	cmp	ip, r3
 8013888:	d8f9      	bhi.n	801387e <__lshift+0x9a>
 801388a:	e7e4      	b.n	8013856 <__lshift+0x72>

0801388c <__mcmp>:
 801388c:	6903      	ldr	r3, [r0, #16]
 801388e:	690a      	ldr	r2, [r1, #16]
 8013890:	1a9b      	subs	r3, r3, r2
 8013892:	b530      	push	{r4, r5, lr}
 8013894:	d10c      	bne.n	80138b0 <__mcmp+0x24>
 8013896:	0092      	lsls	r2, r2, #2
 8013898:	3014      	adds	r0, #20
 801389a:	3114      	adds	r1, #20
 801389c:	1884      	adds	r4, r0, r2
 801389e:	4411      	add	r1, r2
 80138a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80138a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80138a8:	4295      	cmp	r5, r2
 80138aa:	d003      	beq.n	80138b4 <__mcmp+0x28>
 80138ac:	d305      	bcc.n	80138ba <__mcmp+0x2e>
 80138ae:	2301      	movs	r3, #1
 80138b0:	4618      	mov	r0, r3
 80138b2:	bd30      	pop	{r4, r5, pc}
 80138b4:	42a0      	cmp	r0, r4
 80138b6:	d3f3      	bcc.n	80138a0 <__mcmp+0x14>
 80138b8:	e7fa      	b.n	80138b0 <__mcmp+0x24>
 80138ba:	f04f 33ff 	mov.w	r3, #4294967295
 80138be:	e7f7      	b.n	80138b0 <__mcmp+0x24>

080138c0 <__mdiff>:
 80138c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138c4:	460d      	mov	r5, r1
 80138c6:	4607      	mov	r7, r0
 80138c8:	4611      	mov	r1, r2
 80138ca:	4628      	mov	r0, r5
 80138cc:	4614      	mov	r4, r2
 80138ce:	f7ff ffdd 	bl	801388c <__mcmp>
 80138d2:	1e06      	subs	r6, r0, #0
 80138d4:	d108      	bne.n	80138e8 <__mdiff+0x28>
 80138d6:	4631      	mov	r1, r6
 80138d8:	4638      	mov	r0, r7
 80138da:	f7ff fd83 	bl	80133e4 <_Balloc>
 80138de:	2301      	movs	r3, #1
 80138e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80138e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e8:	bfa4      	itt	ge
 80138ea:	4623      	movge	r3, r4
 80138ec:	462c      	movge	r4, r5
 80138ee:	4638      	mov	r0, r7
 80138f0:	6861      	ldr	r1, [r4, #4]
 80138f2:	bfa6      	itte	ge
 80138f4:	461d      	movge	r5, r3
 80138f6:	2600      	movge	r6, #0
 80138f8:	2601      	movlt	r6, #1
 80138fa:	f7ff fd73 	bl	80133e4 <_Balloc>
 80138fe:	692b      	ldr	r3, [r5, #16]
 8013900:	60c6      	str	r6, [r0, #12]
 8013902:	6926      	ldr	r6, [r4, #16]
 8013904:	f105 0914 	add.w	r9, r5, #20
 8013908:	f104 0214 	add.w	r2, r4, #20
 801390c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013910:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013914:	f100 0514 	add.w	r5, r0, #20
 8013918:	f04f 0e00 	mov.w	lr, #0
 801391c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013920:	f859 4b04 	ldr.w	r4, [r9], #4
 8013924:	fa1e f18a 	uxtah	r1, lr, sl
 8013928:	b2a3      	uxth	r3, r4
 801392a:	1ac9      	subs	r1, r1, r3
 801392c:	0c23      	lsrs	r3, r4, #16
 801392e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013932:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013936:	b289      	uxth	r1, r1
 8013938:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801393c:	45c8      	cmp	r8, r9
 801393e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013942:	4694      	mov	ip, r2
 8013944:	f845 3b04 	str.w	r3, [r5], #4
 8013948:	d8e8      	bhi.n	801391c <__mdiff+0x5c>
 801394a:	45bc      	cmp	ip, r7
 801394c:	d304      	bcc.n	8013958 <__mdiff+0x98>
 801394e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013952:	b183      	cbz	r3, 8013976 <__mdiff+0xb6>
 8013954:	6106      	str	r6, [r0, #16]
 8013956:	e7c5      	b.n	80138e4 <__mdiff+0x24>
 8013958:	f85c 1b04 	ldr.w	r1, [ip], #4
 801395c:	fa1e f381 	uxtah	r3, lr, r1
 8013960:	141a      	asrs	r2, r3, #16
 8013962:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013966:	b29b      	uxth	r3, r3
 8013968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801396c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013970:	f845 3b04 	str.w	r3, [r5], #4
 8013974:	e7e9      	b.n	801394a <__mdiff+0x8a>
 8013976:	3e01      	subs	r6, #1
 8013978:	e7e9      	b.n	801394e <__mdiff+0x8e>
	...

0801397c <__ulp>:
 801397c:	4b12      	ldr	r3, [pc, #72]	; (80139c8 <__ulp+0x4c>)
 801397e:	ee10 2a90 	vmov	r2, s1
 8013982:	401a      	ands	r2, r3
 8013984:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013988:	2b00      	cmp	r3, #0
 801398a:	dd04      	ble.n	8013996 <__ulp+0x1a>
 801398c:	2000      	movs	r0, #0
 801398e:	4619      	mov	r1, r3
 8013990:	ec41 0b10 	vmov	d0, r0, r1
 8013994:	4770      	bx	lr
 8013996:	425b      	negs	r3, r3
 8013998:	151b      	asrs	r3, r3, #20
 801399a:	2b13      	cmp	r3, #19
 801399c:	f04f 0000 	mov.w	r0, #0
 80139a0:	f04f 0100 	mov.w	r1, #0
 80139a4:	dc04      	bgt.n	80139b0 <__ulp+0x34>
 80139a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80139aa:	fa42 f103 	asr.w	r1, r2, r3
 80139ae:	e7ef      	b.n	8013990 <__ulp+0x14>
 80139b0:	3b14      	subs	r3, #20
 80139b2:	2b1e      	cmp	r3, #30
 80139b4:	f04f 0201 	mov.w	r2, #1
 80139b8:	bfda      	itte	le
 80139ba:	f1c3 031f 	rsble	r3, r3, #31
 80139be:	fa02 f303 	lslle.w	r3, r2, r3
 80139c2:	4613      	movgt	r3, r2
 80139c4:	4618      	mov	r0, r3
 80139c6:	e7e3      	b.n	8013990 <__ulp+0x14>
 80139c8:	7ff00000 	.word	0x7ff00000

080139cc <__b2d>:
 80139cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ce:	6905      	ldr	r5, [r0, #16]
 80139d0:	f100 0714 	add.w	r7, r0, #20
 80139d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80139d8:	1f2e      	subs	r6, r5, #4
 80139da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80139de:	4620      	mov	r0, r4
 80139e0:	f7ff fdc4 	bl	801356c <__hi0bits>
 80139e4:	f1c0 0320 	rsb	r3, r0, #32
 80139e8:	280a      	cmp	r0, #10
 80139ea:	600b      	str	r3, [r1, #0]
 80139ec:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013a64 <__b2d+0x98>
 80139f0:	dc14      	bgt.n	8013a1c <__b2d+0x50>
 80139f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80139f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80139fa:	42b7      	cmp	r7, r6
 80139fc:	ea41 030c 	orr.w	r3, r1, ip
 8013a00:	bf34      	ite	cc
 8013a02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a06:	2100      	movcs	r1, #0
 8013a08:	3015      	adds	r0, #21
 8013a0a:	fa04 f000 	lsl.w	r0, r4, r0
 8013a0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013a12:	ea40 0201 	orr.w	r2, r0, r1
 8013a16:	ec43 2b10 	vmov	d0, r2, r3
 8013a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a1c:	42b7      	cmp	r7, r6
 8013a1e:	bf3a      	itte	cc
 8013a20:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a28:	2100      	movcs	r1, #0
 8013a2a:	380b      	subs	r0, #11
 8013a2c:	d015      	beq.n	8013a5a <__b2d+0x8e>
 8013a2e:	4084      	lsls	r4, r0
 8013a30:	f1c0 0520 	rsb	r5, r0, #32
 8013a34:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013a38:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013a3c:	42be      	cmp	r6, r7
 8013a3e:	fa21 fc05 	lsr.w	ip, r1, r5
 8013a42:	ea44 030c 	orr.w	r3, r4, ip
 8013a46:	bf8c      	ite	hi
 8013a48:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a4c:	2400      	movls	r4, #0
 8013a4e:	fa01 f000 	lsl.w	r0, r1, r0
 8013a52:	40ec      	lsrs	r4, r5
 8013a54:	ea40 0204 	orr.w	r2, r0, r4
 8013a58:	e7dd      	b.n	8013a16 <__b2d+0x4a>
 8013a5a:	ea44 030c 	orr.w	r3, r4, ip
 8013a5e:	460a      	mov	r2, r1
 8013a60:	e7d9      	b.n	8013a16 <__b2d+0x4a>
 8013a62:	bf00      	nop
 8013a64:	3ff00000 	.word	0x3ff00000

08013a68 <__d2b>:
 8013a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a6c:	460e      	mov	r6, r1
 8013a6e:	2101      	movs	r1, #1
 8013a70:	ec59 8b10 	vmov	r8, r9, d0
 8013a74:	4615      	mov	r5, r2
 8013a76:	f7ff fcb5 	bl	80133e4 <_Balloc>
 8013a7a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013a7e:	4607      	mov	r7, r0
 8013a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a84:	bb34      	cbnz	r4, 8013ad4 <__d2b+0x6c>
 8013a86:	9301      	str	r3, [sp, #4]
 8013a88:	f1b8 0300 	subs.w	r3, r8, #0
 8013a8c:	d027      	beq.n	8013ade <__d2b+0x76>
 8013a8e:	a802      	add	r0, sp, #8
 8013a90:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013a94:	f7ff fd89 	bl	80135aa <__lo0bits>
 8013a98:	9900      	ldr	r1, [sp, #0]
 8013a9a:	b1f0      	cbz	r0, 8013ada <__d2b+0x72>
 8013a9c:	9a01      	ldr	r2, [sp, #4]
 8013a9e:	f1c0 0320 	rsb	r3, r0, #32
 8013aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8013aa6:	430b      	orrs	r3, r1
 8013aa8:	40c2      	lsrs	r2, r0
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	9201      	str	r2, [sp, #4]
 8013aae:	9b01      	ldr	r3, [sp, #4]
 8013ab0:	61bb      	str	r3, [r7, #24]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	bf14      	ite	ne
 8013ab6:	2102      	movne	r1, #2
 8013ab8:	2101      	moveq	r1, #1
 8013aba:	6139      	str	r1, [r7, #16]
 8013abc:	b1c4      	cbz	r4, 8013af0 <__d2b+0x88>
 8013abe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013ac2:	4404      	add	r4, r0
 8013ac4:	6034      	str	r4, [r6, #0]
 8013ac6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013aca:	6028      	str	r0, [r5, #0]
 8013acc:	4638      	mov	r0, r7
 8013ace:	b003      	add	sp, #12
 8013ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ad8:	e7d5      	b.n	8013a86 <__d2b+0x1e>
 8013ada:	6179      	str	r1, [r7, #20]
 8013adc:	e7e7      	b.n	8013aae <__d2b+0x46>
 8013ade:	a801      	add	r0, sp, #4
 8013ae0:	f7ff fd63 	bl	80135aa <__lo0bits>
 8013ae4:	9b01      	ldr	r3, [sp, #4]
 8013ae6:	617b      	str	r3, [r7, #20]
 8013ae8:	2101      	movs	r1, #1
 8013aea:	6139      	str	r1, [r7, #16]
 8013aec:	3020      	adds	r0, #32
 8013aee:	e7e5      	b.n	8013abc <__d2b+0x54>
 8013af0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013af8:	6030      	str	r0, [r6, #0]
 8013afa:	6918      	ldr	r0, [r3, #16]
 8013afc:	f7ff fd36 	bl	801356c <__hi0bits>
 8013b00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013b04:	e7e1      	b.n	8013aca <__d2b+0x62>

08013b06 <__ratio>:
 8013b06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b0a:	4688      	mov	r8, r1
 8013b0c:	4669      	mov	r1, sp
 8013b0e:	4681      	mov	r9, r0
 8013b10:	f7ff ff5c 	bl	80139cc <__b2d>
 8013b14:	a901      	add	r1, sp, #4
 8013b16:	4640      	mov	r0, r8
 8013b18:	ec57 6b10 	vmov	r6, r7, d0
 8013b1c:	ee10 4a10 	vmov	r4, s0
 8013b20:	f7ff ff54 	bl	80139cc <__b2d>
 8013b24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b2c:	eba3 0c02 	sub.w	ip, r3, r2
 8013b30:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b34:	1a9b      	subs	r3, r3, r2
 8013b36:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b3a:	ec51 0b10 	vmov	r0, r1, d0
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	ee10 aa10 	vmov	sl, s0
 8013b44:	bfce      	itee	gt
 8013b46:	463a      	movgt	r2, r7
 8013b48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b4c:	460a      	movle	r2, r1
 8013b4e:	463d      	mov	r5, r7
 8013b50:	468b      	mov	fp, r1
 8013b52:	bfcc      	ite	gt
 8013b54:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013b58:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b5c:	ec45 4b17 	vmov	d7, r4, r5
 8013b60:	ec4b ab16 	vmov	d6, sl, fp
 8013b64:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013b68:	b003      	add	sp, #12
 8013b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b6e <__copybits>:
 8013b6e:	3901      	subs	r1, #1
 8013b70:	b510      	push	{r4, lr}
 8013b72:	1149      	asrs	r1, r1, #5
 8013b74:	6914      	ldr	r4, [r2, #16]
 8013b76:	3101      	adds	r1, #1
 8013b78:	f102 0314 	add.w	r3, r2, #20
 8013b7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b84:	42a3      	cmp	r3, r4
 8013b86:	4602      	mov	r2, r0
 8013b88:	d303      	bcc.n	8013b92 <__copybits+0x24>
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	428a      	cmp	r2, r1
 8013b8e:	d305      	bcc.n	8013b9c <__copybits+0x2e>
 8013b90:	bd10      	pop	{r4, pc}
 8013b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b96:	f840 2b04 	str.w	r2, [r0], #4
 8013b9a:	e7f3      	b.n	8013b84 <__copybits+0x16>
 8013b9c:	f842 3b04 	str.w	r3, [r2], #4
 8013ba0:	e7f4      	b.n	8013b8c <__copybits+0x1e>

08013ba2 <__any_on>:
 8013ba2:	f100 0214 	add.w	r2, r0, #20
 8013ba6:	6900      	ldr	r0, [r0, #16]
 8013ba8:	114b      	asrs	r3, r1, #5
 8013baa:	4298      	cmp	r0, r3
 8013bac:	b510      	push	{r4, lr}
 8013bae:	db11      	blt.n	8013bd4 <__any_on+0x32>
 8013bb0:	dd0a      	ble.n	8013bc8 <__any_on+0x26>
 8013bb2:	f011 011f 	ands.w	r1, r1, #31
 8013bb6:	d007      	beq.n	8013bc8 <__any_on+0x26>
 8013bb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013bbc:	fa24 f001 	lsr.w	r0, r4, r1
 8013bc0:	fa00 f101 	lsl.w	r1, r0, r1
 8013bc4:	428c      	cmp	r4, r1
 8013bc6:	d10b      	bne.n	8013be0 <__any_on+0x3e>
 8013bc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d803      	bhi.n	8013bd8 <__any_on+0x36>
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	bd10      	pop	{r4, pc}
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	e7f7      	b.n	8013bc8 <__any_on+0x26>
 8013bd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013bdc:	2900      	cmp	r1, #0
 8013bde:	d0f5      	beq.n	8013bcc <__any_on+0x2a>
 8013be0:	2001      	movs	r0, #1
 8013be2:	e7f6      	b.n	8013bd2 <__any_on+0x30>

08013be4 <_calloc_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	fb02 f401 	mul.w	r4, r2, r1
 8013bea:	4621      	mov	r1, r4
 8013bec:	f000 f856 	bl	8013c9c <_malloc_r>
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	b118      	cbz	r0, 8013bfc <_calloc_r+0x18>
 8013bf4:	4622      	mov	r2, r4
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	f7fc fb05 	bl	8010206 <memset>
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}

08013c00 <_free_r>:
 8013c00:	b538      	push	{r3, r4, r5, lr}
 8013c02:	4605      	mov	r5, r0
 8013c04:	2900      	cmp	r1, #0
 8013c06:	d045      	beq.n	8013c94 <_free_r+0x94>
 8013c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c0c:	1f0c      	subs	r4, r1, #4
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	bfb8      	it	lt
 8013c12:	18e4      	addlt	r4, r4, r3
 8013c14:	f000 facf 	bl	80141b6 <__malloc_lock>
 8013c18:	4a1f      	ldr	r2, [pc, #124]	; (8013c98 <_free_r+0x98>)
 8013c1a:	6813      	ldr	r3, [r2, #0]
 8013c1c:	4610      	mov	r0, r2
 8013c1e:	b933      	cbnz	r3, 8013c2e <_free_r+0x2e>
 8013c20:	6063      	str	r3, [r4, #4]
 8013c22:	6014      	str	r4, [r2, #0]
 8013c24:	4628      	mov	r0, r5
 8013c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c2a:	f000 bac5 	b.w	80141b8 <__malloc_unlock>
 8013c2e:	42a3      	cmp	r3, r4
 8013c30:	d90c      	bls.n	8013c4c <_free_r+0x4c>
 8013c32:	6821      	ldr	r1, [r4, #0]
 8013c34:	1862      	adds	r2, r4, r1
 8013c36:	4293      	cmp	r3, r2
 8013c38:	bf04      	itt	eq
 8013c3a:	681a      	ldreq	r2, [r3, #0]
 8013c3c:	685b      	ldreq	r3, [r3, #4]
 8013c3e:	6063      	str	r3, [r4, #4]
 8013c40:	bf04      	itt	eq
 8013c42:	1852      	addeq	r2, r2, r1
 8013c44:	6022      	streq	r2, [r4, #0]
 8013c46:	6004      	str	r4, [r0, #0]
 8013c48:	e7ec      	b.n	8013c24 <_free_r+0x24>
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	685a      	ldr	r2, [r3, #4]
 8013c4e:	b10a      	cbz	r2, 8013c54 <_free_r+0x54>
 8013c50:	42a2      	cmp	r2, r4
 8013c52:	d9fa      	bls.n	8013c4a <_free_r+0x4a>
 8013c54:	6819      	ldr	r1, [r3, #0]
 8013c56:	1858      	adds	r0, r3, r1
 8013c58:	42a0      	cmp	r0, r4
 8013c5a:	d10b      	bne.n	8013c74 <_free_r+0x74>
 8013c5c:	6820      	ldr	r0, [r4, #0]
 8013c5e:	4401      	add	r1, r0
 8013c60:	1858      	adds	r0, r3, r1
 8013c62:	4282      	cmp	r2, r0
 8013c64:	6019      	str	r1, [r3, #0]
 8013c66:	d1dd      	bne.n	8013c24 <_free_r+0x24>
 8013c68:	6810      	ldr	r0, [r2, #0]
 8013c6a:	6852      	ldr	r2, [r2, #4]
 8013c6c:	605a      	str	r2, [r3, #4]
 8013c6e:	4401      	add	r1, r0
 8013c70:	6019      	str	r1, [r3, #0]
 8013c72:	e7d7      	b.n	8013c24 <_free_r+0x24>
 8013c74:	d902      	bls.n	8013c7c <_free_r+0x7c>
 8013c76:	230c      	movs	r3, #12
 8013c78:	602b      	str	r3, [r5, #0]
 8013c7a:	e7d3      	b.n	8013c24 <_free_r+0x24>
 8013c7c:	6820      	ldr	r0, [r4, #0]
 8013c7e:	1821      	adds	r1, r4, r0
 8013c80:	428a      	cmp	r2, r1
 8013c82:	bf04      	itt	eq
 8013c84:	6811      	ldreq	r1, [r2, #0]
 8013c86:	6852      	ldreq	r2, [r2, #4]
 8013c88:	6062      	str	r2, [r4, #4]
 8013c8a:	bf04      	itt	eq
 8013c8c:	1809      	addeq	r1, r1, r0
 8013c8e:	6021      	streq	r1, [r4, #0]
 8013c90:	605c      	str	r4, [r3, #4]
 8013c92:	e7c7      	b.n	8013c24 <_free_r+0x24>
 8013c94:	bd38      	pop	{r3, r4, r5, pc}
 8013c96:	bf00      	nop
 8013c98:	20010300 	.word	0x20010300

08013c9c <_malloc_r>:
 8013c9c:	b570      	push	{r4, r5, r6, lr}
 8013c9e:	1ccd      	adds	r5, r1, #3
 8013ca0:	f025 0503 	bic.w	r5, r5, #3
 8013ca4:	3508      	adds	r5, #8
 8013ca6:	2d0c      	cmp	r5, #12
 8013ca8:	bf38      	it	cc
 8013caa:	250c      	movcc	r5, #12
 8013cac:	2d00      	cmp	r5, #0
 8013cae:	4606      	mov	r6, r0
 8013cb0:	db01      	blt.n	8013cb6 <_malloc_r+0x1a>
 8013cb2:	42a9      	cmp	r1, r5
 8013cb4:	d903      	bls.n	8013cbe <_malloc_r+0x22>
 8013cb6:	230c      	movs	r3, #12
 8013cb8:	6033      	str	r3, [r6, #0]
 8013cba:	2000      	movs	r0, #0
 8013cbc:	bd70      	pop	{r4, r5, r6, pc}
 8013cbe:	f000 fa7a 	bl	80141b6 <__malloc_lock>
 8013cc2:	4a21      	ldr	r2, [pc, #132]	; (8013d48 <_malloc_r+0xac>)
 8013cc4:	6814      	ldr	r4, [r2, #0]
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	b991      	cbnz	r1, 8013cf0 <_malloc_r+0x54>
 8013cca:	4c20      	ldr	r4, [pc, #128]	; (8013d4c <_malloc_r+0xb0>)
 8013ccc:	6823      	ldr	r3, [r4, #0]
 8013cce:	b91b      	cbnz	r3, 8013cd8 <_malloc_r+0x3c>
 8013cd0:	4630      	mov	r0, r6
 8013cd2:	f000 f98f 	bl	8013ff4 <_sbrk_r>
 8013cd6:	6020      	str	r0, [r4, #0]
 8013cd8:	4629      	mov	r1, r5
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f000 f98a 	bl	8013ff4 <_sbrk_r>
 8013ce0:	1c43      	adds	r3, r0, #1
 8013ce2:	d124      	bne.n	8013d2e <_malloc_r+0x92>
 8013ce4:	230c      	movs	r3, #12
 8013ce6:	6033      	str	r3, [r6, #0]
 8013ce8:	4630      	mov	r0, r6
 8013cea:	f000 fa65 	bl	80141b8 <__malloc_unlock>
 8013cee:	e7e4      	b.n	8013cba <_malloc_r+0x1e>
 8013cf0:	680b      	ldr	r3, [r1, #0]
 8013cf2:	1b5b      	subs	r3, r3, r5
 8013cf4:	d418      	bmi.n	8013d28 <_malloc_r+0x8c>
 8013cf6:	2b0b      	cmp	r3, #11
 8013cf8:	d90f      	bls.n	8013d1a <_malloc_r+0x7e>
 8013cfa:	600b      	str	r3, [r1, #0]
 8013cfc:	50cd      	str	r5, [r1, r3]
 8013cfe:	18cc      	adds	r4, r1, r3
 8013d00:	4630      	mov	r0, r6
 8013d02:	f000 fa59 	bl	80141b8 <__malloc_unlock>
 8013d06:	f104 000b 	add.w	r0, r4, #11
 8013d0a:	1d23      	adds	r3, r4, #4
 8013d0c:	f020 0007 	bic.w	r0, r0, #7
 8013d10:	1ac3      	subs	r3, r0, r3
 8013d12:	d0d3      	beq.n	8013cbc <_malloc_r+0x20>
 8013d14:	425a      	negs	r2, r3
 8013d16:	50e2      	str	r2, [r4, r3]
 8013d18:	e7d0      	b.n	8013cbc <_malloc_r+0x20>
 8013d1a:	428c      	cmp	r4, r1
 8013d1c:	684b      	ldr	r3, [r1, #4]
 8013d1e:	bf16      	itet	ne
 8013d20:	6063      	strne	r3, [r4, #4]
 8013d22:	6013      	streq	r3, [r2, #0]
 8013d24:	460c      	movne	r4, r1
 8013d26:	e7eb      	b.n	8013d00 <_malloc_r+0x64>
 8013d28:	460c      	mov	r4, r1
 8013d2a:	6849      	ldr	r1, [r1, #4]
 8013d2c:	e7cc      	b.n	8013cc8 <_malloc_r+0x2c>
 8013d2e:	1cc4      	adds	r4, r0, #3
 8013d30:	f024 0403 	bic.w	r4, r4, #3
 8013d34:	42a0      	cmp	r0, r4
 8013d36:	d005      	beq.n	8013d44 <_malloc_r+0xa8>
 8013d38:	1a21      	subs	r1, r4, r0
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	f000 f95a 	bl	8013ff4 <_sbrk_r>
 8013d40:	3001      	adds	r0, #1
 8013d42:	d0cf      	beq.n	8013ce4 <_malloc_r+0x48>
 8013d44:	6025      	str	r5, [r4, #0]
 8013d46:	e7db      	b.n	8013d00 <_malloc_r+0x64>
 8013d48:	20010300 	.word	0x20010300
 8013d4c:	20010304 	.word	0x20010304

08013d50 <__ssputs_r>:
 8013d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d54:	688e      	ldr	r6, [r1, #8]
 8013d56:	429e      	cmp	r6, r3
 8013d58:	4682      	mov	sl, r0
 8013d5a:	460c      	mov	r4, r1
 8013d5c:	4690      	mov	r8, r2
 8013d5e:	4699      	mov	r9, r3
 8013d60:	d837      	bhi.n	8013dd2 <__ssputs_r+0x82>
 8013d62:	898a      	ldrh	r2, [r1, #12]
 8013d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013d68:	d031      	beq.n	8013dce <__ssputs_r+0x7e>
 8013d6a:	6825      	ldr	r5, [r4, #0]
 8013d6c:	6909      	ldr	r1, [r1, #16]
 8013d6e:	1a6f      	subs	r7, r5, r1
 8013d70:	6965      	ldr	r5, [r4, #20]
 8013d72:	2302      	movs	r3, #2
 8013d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d78:	fb95 f5f3 	sdiv	r5, r5, r3
 8013d7c:	f109 0301 	add.w	r3, r9, #1
 8013d80:	443b      	add	r3, r7
 8013d82:	429d      	cmp	r5, r3
 8013d84:	bf38      	it	cc
 8013d86:	461d      	movcc	r5, r3
 8013d88:	0553      	lsls	r3, r2, #21
 8013d8a:	d530      	bpl.n	8013dee <__ssputs_r+0x9e>
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	f7ff ff85 	bl	8013c9c <_malloc_r>
 8013d92:	4606      	mov	r6, r0
 8013d94:	b950      	cbnz	r0, 8013dac <__ssputs_r+0x5c>
 8013d96:	230c      	movs	r3, #12
 8013d98:	f8ca 3000 	str.w	r3, [sl]
 8013d9c:	89a3      	ldrh	r3, [r4, #12]
 8013d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da2:	81a3      	strh	r3, [r4, #12]
 8013da4:	f04f 30ff 	mov.w	r0, #4294967295
 8013da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dac:	463a      	mov	r2, r7
 8013dae:	6921      	ldr	r1, [r4, #16]
 8013db0:	f7fc fa1e 	bl	80101f0 <memcpy>
 8013db4:	89a3      	ldrh	r3, [r4, #12]
 8013db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dbe:	81a3      	strh	r3, [r4, #12]
 8013dc0:	6126      	str	r6, [r4, #16]
 8013dc2:	6165      	str	r5, [r4, #20]
 8013dc4:	443e      	add	r6, r7
 8013dc6:	1bed      	subs	r5, r5, r7
 8013dc8:	6026      	str	r6, [r4, #0]
 8013dca:	60a5      	str	r5, [r4, #8]
 8013dcc:	464e      	mov	r6, r9
 8013dce:	454e      	cmp	r6, r9
 8013dd0:	d900      	bls.n	8013dd4 <__ssputs_r+0x84>
 8013dd2:	464e      	mov	r6, r9
 8013dd4:	4632      	mov	r2, r6
 8013dd6:	4641      	mov	r1, r8
 8013dd8:	6820      	ldr	r0, [r4, #0]
 8013dda:	f000 f9d3 	bl	8014184 <memmove>
 8013dde:	68a3      	ldr	r3, [r4, #8]
 8013de0:	1b9b      	subs	r3, r3, r6
 8013de2:	60a3      	str	r3, [r4, #8]
 8013de4:	6823      	ldr	r3, [r4, #0]
 8013de6:	441e      	add	r6, r3
 8013de8:	6026      	str	r6, [r4, #0]
 8013dea:	2000      	movs	r0, #0
 8013dec:	e7dc      	b.n	8013da8 <__ssputs_r+0x58>
 8013dee:	462a      	mov	r2, r5
 8013df0:	f000 f9e3 	bl	80141ba <_realloc_r>
 8013df4:	4606      	mov	r6, r0
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d1e2      	bne.n	8013dc0 <__ssputs_r+0x70>
 8013dfa:	6921      	ldr	r1, [r4, #16]
 8013dfc:	4650      	mov	r0, sl
 8013dfe:	f7ff feff 	bl	8013c00 <_free_r>
 8013e02:	e7c8      	b.n	8013d96 <__ssputs_r+0x46>

08013e04 <_svfiprintf_r>:
 8013e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e08:	461d      	mov	r5, r3
 8013e0a:	898b      	ldrh	r3, [r1, #12]
 8013e0c:	061f      	lsls	r7, r3, #24
 8013e0e:	b09d      	sub	sp, #116	; 0x74
 8013e10:	4680      	mov	r8, r0
 8013e12:	460c      	mov	r4, r1
 8013e14:	4616      	mov	r6, r2
 8013e16:	d50f      	bpl.n	8013e38 <_svfiprintf_r+0x34>
 8013e18:	690b      	ldr	r3, [r1, #16]
 8013e1a:	b96b      	cbnz	r3, 8013e38 <_svfiprintf_r+0x34>
 8013e1c:	2140      	movs	r1, #64	; 0x40
 8013e1e:	f7ff ff3d 	bl	8013c9c <_malloc_r>
 8013e22:	6020      	str	r0, [r4, #0]
 8013e24:	6120      	str	r0, [r4, #16]
 8013e26:	b928      	cbnz	r0, 8013e34 <_svfiprintf_r+0x30>
 8013e28:	230c      	movs	r3, #12
 8013e2a:	f8c8 3000 	str.w	r3, [r8]
 8013e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e32:	e0c8      	b.n	8013fc6 <_svfiprintf_r+0x1c2>
 8013e34:	2340      	movs	r3, #64	; 0x40
 8013e36:	6163      	str	r3, [r4, #20]
 8013e38:	2300      	movs	r3, #0
 8013e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e3c:	2320      	movs	r3, #32
 8013e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e42:	2330      	movs	r3, #48	; 0x30
 8013e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e48:	9503      	str	r5, [sp, #12]
 8013e4a:	f04f 0b01 	mov.w	fp, #1
 8013e4e:	4637      	mov	r7, r6
 8013e50:	463d      	mov	r5, r7
 8013e52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013e56:	b10b      	cbz	r3, 8013e5c <_svfiprintf_r+0x58>
 8013e58:	2b25      	cmp	r3, #37	; 0x25
 8013e5a:	d13e      	bne.n	8013eda <_svfiprintf_r+0xd6>
 8013e5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8013e60:	d00b      	beq.n	8013e7a <_svfiprintf_r+0x76>
 8013e62:	4653      	mov	r3, sl
 8013e64:	4632      	mov	r2, r6
 8013e66:	4621      	mov	r1, r4
 8013e68:	4640      	mov	r0, r8
 8013e6a:	f7ff ff71 	bl	8013d50 <__ssputs_r>
 8013e6e:	3001      	adds	r0, #1
 8013e70:	f000 80a4 	beq.w	8013fbc <_svfiprintf_r+0x1b8>
 8013e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e76:	4453      	add	r3, sl
 8013e78:	9309      	str	r3, [sp, #36]	; 0x24
 8013e7a:	783b      	ldrb	r3, [r7, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	f000 809d 	beq.w	8013fbc <_svfiprintf_r+0x1b8>
 8013e82:	2300      	movs	r3, #0
 8013e84:	f04f 32ff 	mov.w	r2, #4294967295
 8013e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e8c:	9304      	str	r3, [sp, #16]
 8013e8e:	9307      	str	r3, [sp, #28]
 8013e90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e94:	931a      	str	r3, [sp, #104]	; 0x68
 8013e96:	462f      	mov	r7, r5
 8013e98:	2205      	movs	r2, #5
 8013e9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013e9e:	4850      	ldr	r0, [pc, #320]	; (8013fe0 <_svfiprintf_r+0x1dc>)
 8013ea0:	f7ec f9d6 	bl	8000250 <memchr>
 8013ea4:	9b04      	ldr	r3, [sp, #16]
 8013ea6:	b9d0      	cbnz	r0, 8013ede <_svfiprintf_r+0xda>
 8013ea8:	06d9      	lsls	r1, r3, #27
 8013eaa:	bf44      	itt	mi
 8013eac:	2220      	movmi	r2, #32
 8013eae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013eb2:	071a      	lsls	r2, r3, #28
 8013eb4:	bf44      	itt	mi
 8013eb6:	222b      	movmi	r2, #43	; 0x2b
 8013eb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013ebc:	782a      	ldrb	r2, [r5, #0]
 8013ebe:	2a2a      	cmp	r2, #42	; 0x2a
 8013ec0:	d015      	beq.n	8013eee <_svfiprintf_r+0xea>
 8013ec2:	9a07      	ldr	r2, [sp, #28]
 8013ec4:	462f      	mov	r7, r5
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	250a      	movs	r5, #10
 8013eca:	4639      	mov	r1, r7
 8013ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ed0:	3b30      	subs	r3, #48	; 0x30
 8013ed2:	2b09      	cmp	r3, #9
 8013ed4:	d94d      	bls.n	8013f72 <_svfiprintf_r+0x16e>
 8013ed6:	b1b8      	cbz	r0, 8013f08 <_svfiprintf_r+0x104>
 8013ed8:	e00f      	b.n	8013efa <_svfiprintf_r+0xf6>
 8013eda:	462f      	mov	r7, r5
 8013edc:	e7b8      	b.n	8013e50 <_svfiprintf_r+0x4c>
 8013ede:	4a40      	ldr	r2, [pc, #256]	; (8013fe0 <_svfiprintf_r+0x1dc>)
 8013ee0:	1a80      	subs	r0, r0, r2
 8013ee2:	fa0b f000 	lsl.w	r0, fp, r0
 8013ee6:	4318      	orrs	r0, r3
 8013ee8:	9004      	str	r0, [sp, #16]
 8013eea:	463d      	mov	r5, r7
 8013eec:	e7d3      	b.n	8013e96 <_svfiprintf_r+0x92>
 8013eee:	9a03      	ldr	r2, [sp, #12]
 8013ef0:	1d11      	adds	r1, r2, #4
 8013ef2:	6812      	ldr	r2, [r2, #0]
 8013ef4:	9103      	str	r1, [sp, #12]
 8013ef6:	2a00      	cmp	r2, #0
 8013ef8:	db01      	blt.n	8013efe <_svfiprintf_r+0xfa>
 8013efa:	9207      	str	r2, [sp, #28]
 8013efc:	e004      	b.n	8013f08 <_svfiprintf_r+0x104>
 8013efe:	4252      	negs	r2, r2
 8013f00:	f043 0302 	orr.w	r3, r3, #2
 8013f04:	9207      	str	r2, [sp, #28]
 8013f06:	9304      	str	r3, [sp, #16]
 8013f08:	783b      	ldrb	r3, [r7, #0]
 8013f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8013f0c:	d10c      	bne.n	8013f28 <_svfiprintf_r+0x124>
 8013f0e:	787b      	ldrb	r3, [r7, #1]
 8013f10:	2b2a      	cmp	r3, #42	; 0x2a
 8013f12:	d133      	bne.n	8013f7c <_svfiprintf_r+0x178>
 8013f14:	9b03      	ldr	r3, [sp, #12]
 8013f16:	1d1a      	adds	r2, r3, #4
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	9203      	str	r2, [sp, #12]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	bfb8      	it	lt
 8013f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f24:	3702      	adds	r7, #2
 8013f26:	9305      	str	r3, [sp, #20]
 8013f28:	4d2e      	ldr	r5, [pc, #184]	; (8013fe4 <_svfiprintf_r+0x1e0>)
 8013f2a:	7839      	ldrb	r1, [r7, #0]
 8013f2c:	2203      	movs	r2, #3
 8013f2e:	4628      	mov	r0, r5
 8013f30:	f7ec f98e 	bl	8000250 <memchr>
 8013f34:	b138      	cbz	r0, 8013f46 <_svfiprintf_r+0x142>
 8013f36:	2340      	movs	r3, #64	; 0x40
 8013f38:	1b40      	subs	r0, r0, r5
 8013f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8013f3e:	9b04      	ldr	r3, [sp, #16]
 8013f40:	4303      	orrs	r3, r0
 8013f42:	3701      	adds	r7, #1
 8013f44:	9304      	str	r3, [sp, #16]
 8013f46:	7839      	ldrb	r1, [r7, #0]
 8013f48:	4827      	ldr	r0, [pc, #156]	; (8013fe8 <_svfiprintf_r+0x1e4>)
 8013f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f4e:	2206      	movs	r2, #6
 8013f50:	1c7e      	adds	r6, r7, #1
 8013f52:	f7ec f97d 	bl	8000250 <memchr>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d038      	beq.n	8013fcc <_svfiprintf_r+0x1c8>
 8013f5a:	4b24      	ldr	r3, [pc, #144]	; (8013fec <_svfiprintf_r+0x1e8>)
 8013f5c:	bb13      	cbnz	r3, 8013fa4 <_svfiprintf_r+0x1a0>
 8013f5e:	9b03      	ldr	r3, [sp, #12]
 8013f60:	3307      	adds	r3, #7
 8013f62:	f023 0307 	bic.w	r3, r3, #7
 8013f66:	3308      	adds	r3, #8
 8013f68:	9303      	str	r3, [sp, #12]
 8013f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f6c:	444b      	add	r3, r9
 8013f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013f70:	e76d      	b.n	8013e4e <_svfiprintf_r+0x4a>
 8013f72:	fb05 3202 	mla	r2, r5, r2, r3
 8013f76:	2001      	movs	r0, #1
 8013f78:	460f      	mov	r7, r1
 8013f7a:	e7a6      	b.n	8013eca <_svfiprintf_r+0xc6>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	3701      	adds	r7, #1
 8013f80:	9305      	str	r3, [sp, #20]
 8013f82:	4619      	mov	r1, r3
 8013f84:	250a      	movs	r5, #10
 8013f86:	4638      	mov	r0, r7
 8013f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f8c:	3a30      	subs	r2, #48	; 0x30
 8013f8e:	2a09      	cmp	r2, #9
 8013f90:	d903      	bls.n	8013f9a <_svfiprintf_r+0x196>
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d0c8      	beq.n	8013f28 <_svfiprintf_r+0x124>
 8013f96:	9105      	str	r1, [sp, #20]
 8013f98:	e7c6      	b.n	8013f28 <_svfiprintf_r+0x124>
 8013f9a:	fb05 2101 	mla	r1, r5, r1, r2
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	4607      	mov	r7, r0
 8013fa2:	e7f0      	b.n	8013f86 <_svfiprintf_r+0x182>
 8013fa4:	ab03      	add	r3, sp, #12
 8013fa6:	9300      	str	r3, [sp, #0]
 8013fa8:	4622      	mov	r2, r4
 8013faa:	4b11      	ldr	r3, [pc, #68]	; (8013ff0 <_svfiprintf_r+0x1ec>)
 8013fac:	a904      	add	r1, sp, #16
 8013fae:	4640      	mov	r0, r8
 8013fb0:	f7fc f9b6 	bl	8010320 <_printf_float>
 8013fb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013fb8:	4681      	mov	r9, r0
 8013fba:	d1d6      	bne.n	8013f6a <_svfiprintf_r+0x166>
 8013fbc:	89a3      	ldrh	r3, [r4, #12]
 8013fbe:	065b      	lsls	r3, r3, #25
 8013fc0:	f53f af35 	bmi.w	8013e2e <_svfiprintf_r+0x2a>
 8013fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fc6:	b01d      	add	sp, #116	; 0x74
 8013fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fcc:	ab03      	add	r3, sp, #12
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	4622      	mov	r2, r4
 8013fd2:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <_svfiprintf_r+0x1ec>)
 8013fd4:	a904      	add	r1, sp, #16
 8013fd6:	4640      	mov	r0, r8
 8013fd8:	f7fc fc44 	bl	8010864 <_printf_i>
 8013fdc:	e7ea      	b.n	8013fb4 <_svfiprintf_r+0x1b0>
 8013fde:	bf00      	nop
 8013fe0:	08015114 	.word	0x08015114
 8013fe4:	0801511a 	.word	0x0801511a
 8013fe8:	0801511e 	.word	0x0801511e
 8013fec:	08010321 	.word	0x08010321
 8013ff0:	08013d51 	.word	0x08013d51

08013ff4 <_sbrk_r>:
 8013ff4:	b538      	push	{r3, r4, r5, lr}
 8013ff6:	4c06      	ldr	r4, [pc, #24]	; (8014010 <_sbrk_r+0x1c>)
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	4608      	mov	r0, r1
 8013ffe:	6023      	str	r3, [r4, #0]
 8014000:	f7f3 f932 	bl	8007268 <_sbrk>
 8014004:	1c43      	adds	r3, r0, #1
 8014006:	d102      	bne.n	801400e <_sbrk_r+0x1a>
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	b103      	cbz	r3, 801400e <_sbrk_r+0x1a>
 801400c:	602b      	str	r3, [r5, #0]
 801400e:	bd38      	pop	{r3, r4, r5, pc}
 8014010:	20024124 	.word	0x20024124

08014014 <__sread>:
 8014014:	b510      	push	{r4, lr}
 8014016:	460c      	mov	r4, r1
 8014018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801401c:	f000 f8f4 	bl	8014208 <_read_r>
 8014020:	2800      	cmp	r0, #0
 8014022:	bfab      	itete	ge
 8014024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014026:	89a3      	ldrhlt	r3, [r4, #12]
 8014028:	181b      	addge	r3, r3, r0
 801402a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801402e:	bfac      	ite	ge
 8014030:	6563      	strge	r3, [r4, #84]	; 0x54
 8014032:	81a3      	strhlt	r3, [r4, #12]
 8014034:	bd10      	pop	{r4, pc}

08014036 <__swrite>:
 8014036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403a:	461f      	mov	r7, r3
 801403c:	898b      	ldrh	r3, [r1, #12]
 801403e:	05db      	lsls	r3, r3, #23
 8014040:	4605      	mov	r5, r0
 8014042:	460c      	mov	r4, r1
 8014044:	4616      	mov	r6, r2
 8014046:	d505      	bpl.n	8014054 <__swrite+0x1e>
 8014048:	2302      	movs	r3, #2
 801404a:	2200      	movs	r2, #0
 801404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014050:	f000 f886 	bl	8014160 <_lseek_r>
 8014054:	89a3      	ldrh	r3, [r4, #12]
 8014056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801405a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801405e:	81a3      	strh	r3, [r4, #12]
 8014060:	4632      	mov	r2, r6
 8014062:	463b      	mov	r3, r7
 8014064:	4628      	mov	r0, r5
 8014066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801406a:	f000 b835 	b.w	80140d8 <_write_r>

0801406e <__sseek>:
 801406e:	b510      	push	{r4, lr}
 8014070:	460c      	mov	r4, r1
 8014072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014076:	f000 f873 	bl	8014160 <_lseek_r>
 801407a:	1c43      	adds	r3, r0, #1
 801407c:	89a3      	ldrh	r3, [r4, #12]
 801407e:	bf15      	itete	ne
 8014080:	6560      	strne	r0, [r4, #84]	; 0x54
 8014082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801408a:	81a3      	strheq	r3, [r4, #12]
 801408c:	bf18      	it	ne
 801408e:	81a3      	strhne	r3, [r4, #12]
 8014090:	bd10      	pop	{r4, pc}

08014092 <__sclose>:
 8014092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014096:	f000 b831 	b.w	80140fc <_close_r>

0801409a <strncmp>:
 801409a:	b510      	push	{r4, lr}
 801409c:	b16a      	cbz	r2, 80140ba <strncmp+0x20>
 801409e:	3901      	subs	r1, #1
 80140a0:	1884      	adds	r4, r0, r2
 80140a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80140a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d103      	bne.n	80140b6 <strncmp+0x1c>
 80140ae:	42a0      	cmp	r0, r4
 80140b0:	d001      	beq.n	80140b6 <strncmp+0x1c>
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1f5      	bne.n	80140a2 <strncmp+0x8>
 80140b6:	1a98      	subs	r0, r3, r2
 80140b8:	bd10      	pop	{r4, pc}
 80140ba:	4610      	mov	r0, r2
 80140bc:	e7fc      	b.n	80140b8 <strncmp+0x1e>

080140be <__ascii_wctomb>:
 80140be:	b149      	cbz	r1, 80140d4 <__ascii_wctomb+0x16>
 80140c0:	2aff      	cmp	r2, #255	; 0xff
 80140c2:	bf85      	ittet	hi
 80140c4:	238a      	movhi	r3, #138	; 0x8a
 80140c6:	6003      	strhi	r3, [r0, #0]
 80140c8:	700a      	strbls	r2, [r1, #0]
 80140ca:	f04f 30ff 	movhi.w	r0, #4294967295
 80140ce:	bf98      	it	ls
 80140d0:	2001      	movls	r0, #1
 80140d2:	4770      	bx	lr
 80140d4:	4608      	mov	r0, r1
 80140d6:	4770      	bx	lr

080140d8 <_write_r>:
 80140d8:	b538      	push	{r3, r4, r5, lr}
 80140da:	4c07      	ldr	r4, [pc, #28]	; (80140f8 <_write_r+0x20>)
 80140dc:	4605      	mov	r5, r0
 80140de:	4608      	mov	r0, r1
 80140e0:	4611      	mov	r1, r2
 80140e2:	2200      	movs	r2, #0
 80140e4:	6022      	str	r2, [r4, #0]
 80140e6:	461a      	mov	r2, r3
 80140e8:	f7f3 f86d 	bl	80071c6 <_write>
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d102      	bne.n	80140f6 <_write_r+0x1e>
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	b103      	cbz	r3, 80140f6 <_write_r+0x1e>
 80140f4:	602b      	str	r3, [r5, #0]
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	20024124 	.word	0x20024124

080140fc <_close_r>:
 80140fc:	b538      	push	{r3, r4, r5, lr}
 80140fe:	4c06      	ldr	r4, [pc, #24]	; (8014118 <_close_r+0x1c>)
 8014100:	2300      	movs	r3, #0
 8014102:	4605      	mov	r5, r0
 8014104:	4608      	mov	r0, r1
 8014106:	6023      	str	r3, [r4, #0]
 8014108:	f7f3 f879 	bl	80071fe <_close>
 801410c:	1c43      	adds	r3, r0, #1
 801410e:	d102      	bne.n	8014116 <_close_r+0x1a>
 8014110:	6823      	ldr	r3, [r4, #0]
 8014112:	b103      	cbz	r3, 8014116 <_close_r+0x1a>
 8014114:	602b      	str	r3, [r5, #0]
 8014116:	bd38      	pop	{r3, r4, r5, pc}
 8014118:	20024124 	.word	0x20024124

0801411c <_fstat_r>:
 801411c:	b538      	push	{r3, r4, r5, lr}
 801411e:	4c07      	ldr	r4, [pc, #28]	; (801413c <_fstat_r+0x20>)
 8014120:	2300      	movs	r3, #0
 8014122:	4605      	mov	r5, r0
 8014124:	4608      	mov	r0, r1
 8014126:	4611      	mov	r1, r2
 8014128:	6023      	str	r3, [r4, #0]
 801412a:	f7f3 f874 	bl	8007216 <_fstat>
 801412e:	1c43      	adds	r3, r0, #1
 8014130:	d102      	bne.n	8014138 <_fstat_r+0x1c>
 8014132:	6823      	ldr	r3, [r4, #0]
 8014134:	b103      	cbz	r3, 8014138 <_fstat_r+0x1c>
 8014136:	602b      	str	r3, [r5, #0]
 8014138:	bd38      	pop	{r3, r4, r5, pc}
 801413a:	bf00      	nop
 801413c:	20024124 	.word	0x20024124

08014140 <_isatty_r>:
 8014140:	b538      	push	{r3, r4, r5, lr}
 8014142:	4c06      	ldr	r4, [pc, #24]	; (801415c <_isatty_r+0x1c>)
 8014144:	2300      	movs	r3, #0
 8014146:	4605      	mov	r5, r0
 8014148:	4608      	mov	r0, r1
 801414a:	6023      	str	r3, [r4, #0]
 801414c:	f7f3 f873 	bl	8007236 <_isatty>
 8014150:	1c43      	adds	r3, r0, #1
 8014152:	d102      	bne.n	801415a <_isatty_r+0x1a>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	b103      	cbz	r3, 801415a <_isatty_r+0x1a>
 8014158:	602b      	str	r3, [r5, #0]
 801415a:	bd38      	pop	{r3, r4, r5, pc}
 801415c:	20024124 	.word	0x20024124

08014160 <_lseek_r>:
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4c07      	ldr	r4, [pc, #28]	; (8014180 <_lseek_r+0x20>)
 8014164:	4605      	mov	r5, r0
 8014166:	4608      	mov	r0, r1
 8014168:	4611      	mov	r1, r2
 801416a:	2200      	movs	r2, #0
 801416c:	6022      	str	r2, [r4, #0]
 801416e:	461a      	mov	r2, r3
 8014170:	f7f3 f86c 	bl	800724c <_lseek>
 8014174:	1c43      	adds	r3, r0, #1
 8014176:	d102      	bne.n	801417e <_lseek_r+0x1e>
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	b103      	cbz	r3, 801417e <_lseek_r+0x1e>
 801417c:	602b      	str	r3, [r5, #0]
 801417e:	bd38      	pop	{r3, r4, r5, pc}
 8014180:	20024124 	.word	0x20024124

08014184 <memmove>:
 8014184:	4288      	cmp	r0, r1
 8014186:	b510      	push	{r4, lr}
 8014188:	eb01 0302 	add.w	r3, r1, r2
 801418c:	d807      	bhi.n	801419e <memmove+0x1a>
 801418e:	1e42      	subs	r2, r0, #1
 8014190:	4299      	cmp	r1, r3
 8014192:	d00a      	beq.n	80141aa <memmove+0x26>
 8014194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014198:	f802 4f01 	strb.w	r4, [r2, #1]!
 801419c:	e7f8      	b.n	8014190 <memmove+0xc>
 801419e:	4283      	cmp	r3, r0
 80141a0:	d9f5      	bls.n	801418e <memmove+0xa>
 80141a2:	1881      	adds	r1, r0, r2
 80141a4:	1ad2      	subs	r2, r2, r3
 80141a6:	42d3      	cmn	r3, r2
 80141a8:	d100      	bne.n	80141ac <memmove+0x28>
 80141aa:	bd10      	pop	{r4, pc}
 80141ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80141b4:	e7f7      	b.n	80141a6 <memmove+0x22>

080141b6 <__malloc_lock>:
 80141b6:	4770      	bx	lr

080141b8 <__malloc_unlock>:
 80141b8:	4770      	bx	lr

080141ba <_realloc_r>:
 80141ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141bc:	4607      	mov	r7, r0
 80141be:	4614      	mov	r4, r2
 80141c0:	460e      	mov	r6, r1
 80141c2:	b921      	cbnz	r1, 80141ce <_realloc_r+0x14>
 80141c4:	4611      	mov	r1, r2
 80141c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141ca:	f7ff bd67 	b.w	8013c9c <_malloc_r>
 80141ce:	b922      	cbnz	r2, 80141da <_realloc_r+0x20>
 80141d0:	f7ff fd16 	bl	8013c00 <_free_r>
 80141d4:	4625      	mov	r5, r4
 80141d6:	4628      	mov	r0, r5
 80141d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141da:	f000 f827 	bl	801422c <_malloc_usable_size_r>
 80141de:	42a0      	cmp	r0, r4
 80141e0:	d20f      	bcs.n	8014202 <_realloc_r+0x48>
 80141e2:	4621      	mov	r1, r4
 80141e4:	4638      	mov	r0, r7
 80141e6:	f7ff fd59 	bl	8013c9c <_malloc_r>
 80141ea:	4605      	mov	r5, r0
 80141ec:	2800      	cmp	r0, #0
 80141ee:	d0f2      	beq.n	80141d6 <_realloc_r+0x1c>
 80141f0:	4631      	mov	r1, r6
 80141f2:	4622      	mov	r2, r4
 80141f4:	f7fb fffc 	bl	80101f0 <memcpy>
 80141f8:	4631      	mov	r1, r6
 80141fa:	4638      	mov	r0, r7
 80141fc:	f7ff fd00 	bl	8013c00 <_free_r>
 8014200:	e7e9      	b.n	80141d6 <_realloc_r+0x1c>
 8014202:	4635      	mov	r5, r6
 8014204:	e7e7      	b.n	80141d6 <_realloc_r+0x1c>
	...

08014208 <_read_r>:
 8014208:	b538      	push	{r3, r4, r5, lr}
 801420a:	4c07      	ldr	r4, [pc, #28]	; (8014228 <_read_r+0x20>)
 801420c:	4605      	mov	r5, r0
 801420e:	4608      	mov	r0, r1
 8014210:	4611      	mov	r1, r2
 8014212:	2200      	movs	r2, #0
 8014214:	6022      	str	r2, [r4, #0]
 8014216:	461a      	mov	r2, r3
 8014218:	f7f2 ffb8 	bl	800718c <_read>
 801421c:	1c43      	adds	r3, r0, #1
 801421e:	d102      	bne.n	8014226 <_read_r+0x1e>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	b103      	cbz	r3, 8014226 <_read_r+0x1e>
 8014224:	602b      	str	r3, [r5, #0]
 8014226:	bd38      	pop	{r3, r4, r5, pc}
 8014228:	20024124 	.word	0x20024124

0801422c <_malloc_usable_size_r>:
 801422c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014230:	1f18      	subs	r0, r3, #4
 8014232:	2b00      	cmp	r3, #0
 8014234:	bfbc      	itt	lt
 8014236:	580b      	ldrlt	r3, [r1, r0]
 8014238:	18c0      	addlt	r0, r0, r3
 801423a:	4770      	bx	lr

0801423c <_init>:
 801423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423e:	bf00      	nop
 8014240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014242:	bc08      	pop	{r3}
 8014244:	469e      	mov	lr, r3
 8014246:	4770      	bx	lr

08014248 <_fini>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	bf00      	nop
 801424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801424e:	bc08      	pop	{r3}
 8014250:	469e      	mov	lr, r3
 8014252:	4770      	bx	lr
