
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  080143b8  080143b8  000243b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153a0  080153a0  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  080153a0  080153a0  000253a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153a8  080153a8  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153a8  080153a8  000253a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080153ac  080153ac  000253ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  080153b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023df0  20000368  08015718  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20024158  08015718  00034158  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d6e1  00000000  00000000  00030396  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f81  00000000  00000000  0005da77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002240  00000000  00000000  000629f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002008  00000000  00000000  00064c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007063  00000000  00000000  00066c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c2f0  00000000  00000000  0006dca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011ae80  00000000  00000000  00089f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4e13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a188  00000000  00000000  001a4e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000368 	.word	0x20000368
 800021c:	00000000 	.word	0x00000000
 8000220:	0801439c 	.word	0x0801439c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000036c 	.word	0x2000036c
 800023c:	0801439c 	.word	0x0801439c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f008 fbcf 	bl	8008dc4 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f008 fbca 	bl	8008dc4 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f008 fbc5 	bl	8008dc4 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f008 fbbf 	bl	8008dc4 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f00f fe6a 	bl	8010350 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20010338 	.word	0x20010338
 8000694:	20010340 	.word	0x20010340

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f008 fb8e 	bl	8008dc4 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00a fc58 	bl	800af6c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f008 fb7f 	bl	8008dc4 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20010340 	.word	0x20010340

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00f fe03 	bl	8010366 <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f008 faf9 	bl	8008dc4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00a fbc7 	bl	800af6c <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f008 faee 	bl	8008dc4 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00a fbb0 	bl	800af6c <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00a fba5 	bl	800af6c <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00a fb9c 	bl	800af6c <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00a fb8a 	bl	800af6c <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00a fb7f 	bl	800af6c <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00a fb76 	bl	800af6c <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f008 fa75 	bl	8008dc4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00a fb43 	bl	800af6c <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f008 fa6a 	bl	8008dc4 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	20000384 	.word	0x20000384
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20010340 	.word	0x20010340
 8000918:	20003263 	.word	0x20003263

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2001033a 	.word	0x2001033a
 8000964:	2001033c 	.word	0x2001033c
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f00f fcf4 	bl	8010366 <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000384 	.word	0x20000384

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20010338 	.word	0x20010338
 8000a3c:	20000384 	.word	0x20000384
 8000a40:	08014914 	.word	0x08014914
 8000a44:	0801490c 	.word	0x0801490c

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000384 	.word	0x20000384
 8000aec:	20010338 	.word	0x20010338
 8000af0:	08014914 	.word	0x08014914
 8000af4:	0801490c 	.word	0x0801490c

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000384 	.word	0x20000384
 8000cc4:	0801491c 	.word	0x0801491c
 8000cc8:	08014924 	.word	0x08014924
 8000ccc:	20010338 	.word	0x20010338

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	0801492c 	.word	0x0801492c
 8001154:	08014934 	.word	0x08014934
 8001158:	20000384 	.word	0x20000384
 800115c:	20010338 	.word	0x20010338

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2001033a 	.word	0x2001033a

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f005 fbb8 	bl	8007476 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f8f3 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 ff29 	bl	8002b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 fee5 	bl	8002adc <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 f995 	bl	8002040 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fa71 	bl	80021fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 faeb 	bl	80022f4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fb81 	bl	8002424 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fbbf 	bl	80024a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fbfd 	bl	8002524 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fc3d 	bl	80025a8 <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fc7b 	bl	8002628 <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fc9f 	bl	8002674 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fcdb 	bl	80026f0 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fd17 	bl	800276c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fd8d 	bl	800285c <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fe0d 	bl	8002960 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 fe3b 	bl	80029c0 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 fe69 	bl	8002a20 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 fe97 	bl	8002a80 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f8b5 	bl	8002ec0 <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	494e      	ldr	r1, [pc, #312]	; (8001e94 <main+0x198>)
 8001d5c:	484e      	ldr	r0, [pc, #312]	; (8001e98 <main+0x19c>)
 8001d5e:	f005 fd5f 	bl	8007820 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	494d      	ldr	r1, [pc, #308]	; (8001e9c <main+0x1a0>)
 8001d68:	484d      	ldr	r0, [pc, #308]	; (8001ea0 <main+0x1a4>)
 8001d6a:	f005 fd59 	bl	8007820 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	494c      	ldr	r1, [pc, #304]	; (8001ea4 <main+0x1a8>)
 8001d74:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <main+0x1ac>)
 8001d76:	f005 fd53 	bl	8007820 <HAL_ADC_Start_DMA>
   int x=1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d7e:	f001 fa09 	bl	8003194 <configureLEDDriver>
    setErrorLED(4,OFF);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2004      	movs	r0, #4
 8001d86:	f001 fa91 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d8e:	f005 fb9f 	bl	80074d0 <HAL_Delay>
    setErrorLED(7,OFF);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2007      	movs	r0, #7
 8001d96:	f001 fa89 	bl	80032ac <setErrorLED>
    setErrorLED(8,ON);
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	f001 fa85 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f005 fb93 	bl	80074d0 <HAL_Delay>
    setErrorLED(8,OFF);
 8001daa:	2100      	movs	r1, #0
 8001dac:	2008      	movs	r0, #8
 8001dae:	f001 fa7d 	bl	80032ac <setErrorLED>
    setErrorLED(9,ON);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2009      	movs	r0, #9
 8001db6:	f001 fa79 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dbe:	f005 fb87 	bl	80074d0 <HAL_Delay>
    setErrorLED(8,ON);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	2008      	movs	r0, #8
 8001dc6:	f001 fa71 	bl	80032ac <setErrorLED>
    setErrorLED(9,ON);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2009      	movs	r0, #9
 8001dce:	f001 fa6d 	bl	80032ac <setErrorLED>
    HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd6:	f005 fb7b 	bl	80074d0 <HAL_Delay>
    setErrorLED(9,OFF);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2009      	movs	r0, #9
 8001dde:	f001 fa65 	bl	80032ac <setErrorLED>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001de2:	f00b fbf1 	bl	800d5c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <main+0x1b0>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <main+0x1b4>)
 8001dec:	f00b fc56 	bl	800d69c <osThreadNew>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <main+0x1b8>)
 8001df4:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <main+0x1bc>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4830      	ldr	r0, [pc, #192]	; (8001ebc <main+0x1c0>)
 8001dfc:	f00b fc4e 	bl	800d69c <osThreadNew>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <main+0x1c4>)
 8001e04:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <main+0x1c8>)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	482f      	ldr	r0, [pc, #188]	; (8001ec8 <main+0x1cc>)
 8001e0c:	f00b fc46 	bl	800d69c <osThreadNew>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <main+0x1d0>)
 8001e14:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <main+0x1d4>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	482e      	ldr	r0, [pc, #184]	; (8001ed4 <main+0x1d8>)
 8001e1c:	f00b fc3e 	bl	800d69c <osThreadNew>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <main+0x1dc>)
 8001e24:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <main+0x1e0>)
 8001e28:	2100      	movs	r1, #0
 8001e2a:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <main+0x1e4>)
 8001e2c:	f00b fc36 	bl	800d69c <osThreadNew>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <main+0x1e8>)
 8001e34:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e36:	f00b fbfb 	bl	800d630 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e3e:	f005 fb47 	bl	80074d0 <HAL_Delay>
	  if (!x) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <main+0x172>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <main+0x1ec>)
 8001e50:	f006 ffb8 	bl	8008dc4 <HAL_GPIO_WritePin>
		  x=1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <main+0x1f0>)
 8001e5e:	f006 ffb1 	bl	8008dc4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2110      	movs	r1, #16
 8001e66:	4821      	ldr	r0, [pc, #132]	; (8001eec <main+0x1f0>)
 8001e68:	f006 ffac 	bl	8008dc4 <HAL_GPIO_WritePin>
 8001e6c:	e7e5      	b.n	8001e3a <main+0x13e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <main+0x1ec>)
 8001e76:	f006 ffa5 	bl	8008dc4 <HAL_GPIO_WritePin>
		  x=0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2110      	movs	r1, #16
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <main+0x1f0>)
 8001e84:	f006 ff9e 	bl	8008dc4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	4817      	ldr	r0, [pc, #92]	; (8001eec <main+0x1f0>)
 8001e8e:	f006 ff99 	bl	8008dc4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001e92:	e7d2      	b.n	8001e3a <main+0x13e>
 8001e94:	20010af4 	.word	0x20010af4
 8001e98:	20013284 	.word	0x20013284
 8001e9c:	200218a4 	.word	0x200218a4
 8001ea0:	2001056c 	.word	0x2001056c
 8001ea4:	200133ac 	.word	0x200133ac
 8001ea8:	200132d0 	.word	0x200132d0
 8001eac:	0801493c 	.word	0x0801493c
 8001eb0:	08003e01 	.word	0x08003e01
 8001eb4:	200218a0 	.word	0x200218a0
 8001eb8:	08014960 	.word	0x08014960
 8001ebc:	08003e21 	.word	0x08003e21
 8001ec0:	20024078 	.word	0x20024078
 8001ec4:	08014984 	.word	0x08014984
 8001ec8:	08003ea1 	.word	0x08003ea1
 8001ecc:	20024074 	.word	0x20024074
 8001ed0:	080149a8 	.word	0x080149a8
 8001ed4:	08003fa9 	.word	0x08003fa9
 8001ed8:	200132cc 	.word	0x200132cc
 8001edc:	080149cc 	.word	0x080149cc
 8001ee0:	080040d5 	.word	0x080040d5
 8001ee4:	200133a8 	.word	0x200133a8
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b8      	sub	sp, #224	; 0xe0
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001efa:	2234      	movs	r2, #52	; 0x34
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f00e fa31 	bl	8010366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	2290      	movs	r2, #144	; 0x90
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00e fa22 	bl	8010366 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f22:	f007 fe01 	bl	8009b28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <SystemClock_Config+0x144>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <SystemClock_Config+0x144>)
 8001f2c:	f023 0318 	bic.w	r3, r3, #24
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <SystemClock_Config+0x144>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <SystemClock_Config+0x144>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <SystemClock_Config+0x144>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <SystemClock_Config+0x148>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f52:	4a39      	ldr	r2, [pc, #228]	; (8002038 <SystemClock_Config+0x148>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <SystemClock_Config+0x148>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001f8e:	2390      	movs	r3, #144	; 0x90
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f007 fdcf 	bl	8009b48 <HAL_RCC_OscConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fb0:	f002 f954 	bl	800425c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 f861 	bl	800a0a4 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001fe8:	f002 f938 	bl	800425c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <SystemClock_Config+0x14c>)
 8001fee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002006:	2300      	movs	r3, #0
 8002008:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800200e:	2300      	movs	r3, #0
 8002010:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4618      	mov	r0, r3
 800201e:	f008 fa45 	bl	800a4ac <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002028:	f002 f918 	bl	800425c <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	37e0      	adds	r7, #224	; 0xe0
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
 800203c:	0023d620 	.word	0x0023d620

08002040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002046:	463b      	mov	r3, r7
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002054:	4a67      	ldr	r2, [pc, #412]	; (80021f4 <MX_ADC1_Init+0x1b4>)
 8002056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800205a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800205e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002060:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002066:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002068:	2201      	movs	r2, #1
 800206a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800206c:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800206e:	2201      	movs	r2, #1
 8002070:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800207c:	2200      	movs	r2, #0
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002082:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <MX_ADC1_Init+0x1b8>)
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800208e:	220b      	movs	r2, #11
 8002090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002092:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209a:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800209c:	2201      	movs	r2, #1
 800209e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a0:	4853      	ldr	r0, [pc, #332]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020a2:	f005 fa37 	bl	8007514 <HAL_ADC_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020ac:	f002 f8d6 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020b0:	2303      	movs	r3, #3
 80020b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020b8:	2307      	movs	r3, #7
 80020ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	484b      	ldr	r0, [pc, #300]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020c2:	f005 fd03 	bl	8007acc <HAL_ADC_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020cc:	f002 f8c6 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4844      	ldr	r0, [pc, #272]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020de:	f005 fcf5 	bl	8007acc <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020e8:	f002 f8b8 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020ec:	2305      	movs	r3, #5
 80020ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020f0:	2303      	movs	r3, #3
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	483d      	ldr	r0, [pc, #244]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80020fa:	f005 fce7 	bl	8007acc <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002104:	f002 f8aa 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002108:	2306      	movs	r3, #6
 800210a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800210c:	2304      	movs	r3, #4
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4836      	ldr	r0, [pc, #216]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002116:	f005 fcd9 	bl	8007acc <HAL_ADC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002120:	f002 f89c 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002124:	2307      	movs	r3, #7
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002128:	2305      	movs	r3, #5
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	482f      	ldr	r0, [pc, #188]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002132:	f005 fccb 	bl	8007acc <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800213c:	f002 f88e 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002140:	2308      	movs	r3, #8
 8002142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002144:	2306      	movs	r3, #6
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800214e:	f005 fcbd 	bl	8007acc <HAL_ADC_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002158:	f002 f880 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800215c:	2309      	movs	r3, #9
 800215e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002160:	2307      	movs	r3, #7
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4821      	ldr	r0, [pc, #132]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 800216a:	f005 fcaf 	bl	8007acc <HAL_ADC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002174:	f002 f872 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002178:	230a      	movs	r3, #10
 800217a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800217c:	2308      	movs	r3, #8
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 8002186:	f005 fca1 	bl	8007acc <HAL_ADC_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002190:	f002 f864 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002194:	230b      	movs	r3, #11
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002198:	2309      	movs	r3, #9
 800219a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021a2:	f005 fc93 	bl	8007acc <HAL_ADC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80021ac:	f002 f856 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80021b0:	230c      	movs	r3, #12
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80021b4:	230a      	movs	r3, #10
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021be:	f005 fc85 	bl	8007acc <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80021c8:	f002 f848 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021cc:	230d      	movs	r3, #13
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80021d0:	230b      	movs	r3, #11
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_ADC1_Init+0x1b0>)
 80021da:	f005 fc77 	bl	8007acc <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80021e4:	f002 f83a 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20013284 	.word	0x20013284
 80021f4:	40012000 	.word	0x40012000
 80021f8:	0f000001 	.word	0x0f000001

080021fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002202:	463b      	mov	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002210:	4a36      	ldr	r2, [pc, #216]	; (80022ec <MX_ADC2_Init+0xf0>)
 8002212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <MX_ADC2_Init+0xec>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002224:	2201      	movs	r2, #1
 8002226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <MX_ADC2_Init+0xec>)
 800222a:	2201      	movs	r2, #1
 800222c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002238:	2200      	movs	r2, #0
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <MX_ADC2_Init+0xec>)
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <MX_ADC2_Init+0xf4>)
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <MX_ADC2_Init+0xec>)
 800224a:	2204      	movs	r2, #4
 800224c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MX_ADC2_Init+0xec>)
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800225c:	4822      	ldr	r0, [pc, #136]	; (80022e8 <MX_ADC2_Init+0xec>)
 800225e:	f005 f959 	bl	8007514 <HAL_ADC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002268:	f001 fff8 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002270:	2301      	movs	r3, #1
 8002272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002274:	2307      	movs	r3, #7
 8002276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	481a      	ldr	r0, [pc, #104]	; (80022e8 <MX_ADC2_Init+0xec>)
 800227e:	f005 fc25 	bl	8007acc <HAL_ADC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002288:	f001 ffe8 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800228c:	2301      	movs	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002290:	2302      	movs	r3, #2
 8002292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	4619      	mov	r1, r3
 8002298:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_ADC2_Init+0xec>)
 800229a:	f005 fc17 	bl	8007acc <HAL_ADC_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80022a4:	f001 ffda 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80022a8:	230e      	movs	r3, #14
 80022aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022ac:	2303      	movs	r3, #3
 80022ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	4619      	mov	r1, r3
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022b6:	f005 fc09 	bl	8007acc <HAL_ADC_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80022c0:	f001 ffcc 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80022c4:	230f      	movs	r3, #15
 80022c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022c8:	2304      	movs	r3, #4
 80022ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_ADC2_Init+0xec>)
 80022d2:	f005 fbfb 	bl	8007acc <HAL_ADC_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80022dc:	f001 ffbe 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2001056c 	.word	0x2001056c
 80022ec:	40012100 	.word	0x40012100
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <MX_ADC3_Init+0x124>)
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <MX_ADC3_Init+0x128>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800230c:	4b42      	ldr	r3, [pc, #264]	; (8002418 <MX_ADC3_Init+0x124>)
 800230e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002312:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <MX_ADC3_Init+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <MX_ADC3_Init+0x124>)
 800231c:	2201      	movs	r2, #1
 800231e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002320:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <MX_ADC3_Init+0x124>)
 8002322:	2201      	movs	r2, #1
 8002324:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002326:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <MX_ADC3_Init+0x124>)
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <MX_ADC3_Init+0x124>)
 8002330:	2200      	movs	r2, #0
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <MX_ADC3_Init+0x124>)
 8002336:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <MX_ADC3_Init+0x12c>)
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <MX_ADC3_Init+0x124>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <MX_ADC3_Init+0x124>)
 8002342:	2206      	movs	r2, #6
 8002344:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <MX_ADC3_Init+0x124>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <MX_ADC3_Init+0x124>)
 8002350:	2201      	movs	r2, #1
 8002352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002354:	4830      	ldr	r0, [pc, #192]	; (8002418 <MX_ADC3_Init+0x124>)
 8002356:	f005 f8dd 	bl	8007514 <HAL_ADC_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002360:	f001 ff7c 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002364:	2302      	movs	r3, #2
 8002366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002368:	2301      	movs	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800236c:	2307      	movs	r3, #7
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4828      	ldr	r0, [pc, #160]	; (8002418 <MX_ADC3_Init+0x124>)
 8002376:	f005 fba9 	bl	8007acc <HAL_ADC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002380:	f001 ff6c 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002384:	2304      	movs	r3, #4
 8002386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002388:	2302      	movs	r3, #2
 800238a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800238c:	463b      	mov	r3, r7
 800238e:	4619      	mov	r1, r3
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <MX_ADC3_Init+0x124>)
 8002392:	f005 fb9b 	bl	8007acc <HAL_ADC_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800239c:	f001 ff5e 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023a0:	2305      	movs	r3, #5
 80023a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	481a      	ldr	r0, [pc, #104]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ae:	f005 fb8d 	bl	8007acc <HAL_ADC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80023b8:	f001 ff50 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80023bc:	2306      	movs	r3, #6
 80023be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80023c0:	2304      	movs	r3, #4
 80023c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4619      	mov	r1, r3
 80023c8:	4813      	ldr	r0, [pc, #76]	; (8002418 <MX_ADC3_Init+0x124>)
 80023ca:	f005 fb7f 	bl	8007acc <HAL_ADC_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80023d4:	f001 ff42 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023d8:	2307      	movs	r3, #7
 80023da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80023dc:	2305      	movs	r3, #5
 80023de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <MX_ADC3_Init+0x124>)
 80023e6:	f005 fb71 	bl	8007acc <HAL_ADC_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80023f0:	f001 ff34 	bl	800425c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80023f4:	2308      	movs	r3, #8
 80023f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80023f8:	2306      	movs	r3, #6
 80023fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023fc:	463b      	mov	r3, r7
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_ADC3_Init+0x124>)
 8002402:	f005 fb63 	bl	8007acc <HAL_ADC_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 800240c:	f001 ff26 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200132d0 	.word	0x200132d0
 800241c:	40012200 	.word	0x40012200
 8002420:	0f000001 	.word	0x0f000001

08002424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_I2C1_Init+0x74>)
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <MX_I2C1_Init+0x78>)
 800242c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_I2C1_Init+0x74>)
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <MX_I2C1_Init+0x7c>)
 8002432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_I2C1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_I2C1_Init+0x74>)
 800243c:	2201      	movs	r2, #1
 800243e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <MX_I2C1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <MX_I2C1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <MX_I2C1_Init+0x74>)
 8002460:	f006 fd08 	bl	8008e74 <HAL_I2C_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800246a:	f001 fef7 	bl	800425c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <MX_I2C1_Init+0x74>)
 8002472:	f007 f959 	bl	8009728 <HAL_I2CEx_ConfigAnalogFilter>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800247c:	f001 feee 	bl	800425c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002480:	2100      	movs	r1, #0
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_I2C1_Init+0x74>)
 8002484:	f007 f99b 	bl	80097be <HAL_I2CEx_ConfigDigitalFilter>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800248e:	f001 fee5 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200105b4 	.word	0x200105b4
 800249c:	40005400 	.word	0x40005400
 80024a0:	007074af 	.word	0x007074af

080024a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_I2C2_Init+0x74>)
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <MX_I2C2_Init+0x78>)
 80024ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <MX_I2C2_Init+0x7c>)
 80024b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MX_I2C2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_I2C2_Init+0x74>)
 80024bc:	2201      	movs	r2, #1
 80024be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_I2C2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_I2C2_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_I2C2_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_I2C2_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <MX_I2C2_Init+0x74>)
 80024e0:	f006 fcc8 	bl	8008e74 <HAL_I2C_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024ea:	f001 feb7 	bl	800425c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <MX_I2C2_Init+0x74>)
 80024f2:	f007 f919 	bl	8009728 <HAL_I2CEx_ConfigAnalogFilter>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024fc:	f001 feae 	bl	800425c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002500:	2100      	movs	r1, #0
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_I2C2_Init+0x74>)
 8002504:	f007 f95b 	bl	80097be <HAL_I2CEx_ConfigDigitalFilter>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800250e:	f001 fea5 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20010a04 	.word	0x20010a04
 800251c:	40005800 	.word	0x40005800
 8002520:	007074af 	.word	0x007074af

08002524 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <MX_I2C3_Init+0x78>)
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <MX_I2C3_Init+0x7c>)
 800252c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_I2C3_Init+0x78>)
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <MX_I2C3_Init+0x80>)
 8002532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_I2C3_Init+0x78>)
 8002536:	2298      	movs	r2, #152	; 0x98
 8002538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_I2C3_Init+0x78>)
 800253c:	2201      	movs	r2, #1
 800253e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_I2C3_Init+0x78>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_I2C3_Init+0x78>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <MX_I2C3_Init+0x78>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_I2C3_Init+0x78>)
 8002554:	2200      	movs	r2, #0
 8002556:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <MX_I2C3_Init+0x78>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800255e:	480f      	ldr	r0, [pc, #60]	; (800259c <MX_I2C3_Init+0x78>)
 8002560:	f006 fc88 	bl	8008e74 <HAL_I2C_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800256a:	f001 fe77 	bl	800425c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	480a      	ldr	r0, [pc, #40]	; (800259c <MX_I2C3_Init+0x78>)
 8002572:	f007 f8d9 	bl	8009728 <HAL_I2CEx_ConfigAnalogFilter>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800257c:	f001 fe6e 	bl	800425c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_I2C3_Init+0x78>)
 8002584:	f007 f91b 	bl	80097be <HAL_I2CEx_ConfigDigitalFilter>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800258e:	f001 fe65 	bl	800425c <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002592:	2004      	movs	r0, #4
 8002594:	f007 f960 	bl	8009858 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200103a4 	.word	0x200103a4
 80025a0:	40005c00 	.word	0x40005c00
 80025a4:	100029fe 	.word	0x100029fe

080025a8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <MX_I2C4_Init+0x74>)
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <MX_I2C4_Init+0x78>)
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_I2C4_Init+0x74>)
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <MX_I2C4_Init+0x7c>)
 80025b6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <MX_I2C4_Init+0x74>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_I2C4_Init+0x74>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <MX_I2C4_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_I2C4_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_I2C4_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_I2C4_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_I2C4_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80025e2:	480e      	ldr	r0, [pc, #56]	; (800261c <MX_I2C4_Init+0x74>)
 80025e4:	f006 fc46 	bl	8008e74 <HAL_I2C_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80025ee:	f001 fe35 	bl	800425c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025f2:	2100      	movs	r1, #0
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <MX_I2C4_Init+0x74>)
 80025f6:	f007 f897 	bl	8009728 <HAL_I2CEx_ConfigAnalogFilter>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002600:	f001 fe2c 	bl	800425c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002604:	2100      	movs	r1, #0
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_I2C4_Init+0x74>)
 8002608:	f007 f8d9 	bl	80097be <HAL_I2CEx_ConfigDigitalFilter>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002612:	f001 fe23 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200103f0 	.word	0x200103f0
 8002620:	40006000 	.word	0x40006000
 8002624:	007074af 	.word	0x007074af

08002628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <MX_RTC_Init+0x44>)
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <MX_RTC_Init+0x48>)
 8002630:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_RTC_Init+0x44>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_RTC_Init+0x44>)
 800263a:	227f      	movs	r2, #127	; 0x7f
 800263c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_RTC_Init+0x44>)
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_RTC_Init+0x44>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_RTC_Init+0x44>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_RTC_Init+0x44>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_RTC_Init+0x44>)
 8002658:	f008 fb4e 	bl	800acf8 <HAL_RTC_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002662:	f001 fdfb 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20013388 	.word	0x20013388
 8002670:	40002800 	.word	0x40002800

08002674 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <MX_SPI4_Init+0x74>)
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <MX_SPI4_Init+0x78>)
 800267c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002684:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MX_SPI4_Init+0x74>)
 800268e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002692:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_SPI4_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_SPI4_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026aa:	2210      	movs	r2, #16
 80026ac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026c2:	2207      	movs	r2, #7
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_SPI4_Init+0x74>)
 80026d4:	f008 fbb8 	bl	800ae48 <HAL_SPI_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80026de:	f001 fdbd 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20010340 	.word	0x20010340
 80026ec:	40013400 	.word	0x40013400

080026f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <MX_SPI5_Init+0x74>)
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <MX_SPI5_Init+0x78>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_SPI5_Init+0x74>)
 80026fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_SPI5_Init+0x74>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <MX_SPI5_Init+0x74>)
 800270a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800270e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_SPI5_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_SPI5_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_SPI5_Init+0x74>)
 800271e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002722:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_SPI5_Init+0x74>)
 8002726:	2218      	movs	r2, #24
 8002728:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_SPI5_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_SPI5_Init+0x74>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <MX_SPI5_Init+0x74>)
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_SPI5_Init+0x74>)
 800273e:	2207      	movs	r2, #7
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_SPI5_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_SPI5_Init+0x74>)
 800274a:	2200      	movs	r2, #0
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_SPI5_Init+0x74>)
 8002750:	f008 fb7a 	bl	800ae48 <HAL_SPI_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800275a:	f001 fd7f 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200104bc 	.word	0x200104bc
 8002768:	40015000 	.word	0x40015000

0800276c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278c:	463b      	mov	r3, r7
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	615a      	str	r2, [r3, #20]
 800279c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <MX_TIM4_Init+0xec>)
 80027a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027c4:	4823      	ldr	r0, [pc, #140]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027c6:	f008 ff73 	bl	800b6b0 <HAL_TIM_Base_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80027d0:	f001 fd44 	bl	800425c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027de:	4619      	mov	r1, r3
 80027e0:	481c      	ldr	r0, [pc, #112]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027e2:	f009 fa27 	bl	800bc34 <HAL_TIM_ConfigClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80027ec:	f001 fd36 	bl	800425c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027f0:	4818      	ldr	r0, [pc, #96]	; (8002854 <MX_TIM4_Init+0xe8>)
 80027f2:	f008 ffb3 	bl	800b75c <HAL_TIM_PWM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80027fc:	f001 fd2e 	bl	800425c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	4811      	ldr	r0, [pc, #68]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002810:	f009 fe8a 	bl	800c528 <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800281a:	f001 fd1f 	bl	800425c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	2360      	movs	r3, #96	; 0x60
 8002820:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282e:	463b      	mov	r3, r7
 8002830:	2200      	movs	r2, #0
 8002832:	4619      	mov	r1, r3
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002836:	f009 f8e5 	bl	800ba04 <HAL_TIM_PWM_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002840:	f001 fd0c 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <MX_TIM4_Init+0xe8>)
 8002846:	f004 fa37 	bl	8006cb8 <HAL_TIM_MspPostInit>

}
 800284a:	bf00      	nop
 800284c:	3738      	adds	r7, #56	; 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20010520 	.word	0x20010520
 8002858:	40000800 	.word	0x40000800

0800285c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	; 0x38
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800287c:	463b      	mov	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	615a      	str	r2, [r3, #20]
 800288c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002890:	4a32      	ldr	r2, [pc, #200]	; (800295c <MX_TIM5_Init+0x100>)
 8002892:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002896:	2200      	movs	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <MX_TIM5_Init+0xfc>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028b4:	4828      	ldr	r0, [pc, #160]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028b6:	f008 fefb 	bl	800b6b0 <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80028c0:	f001 fccc 	bl	800425c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ce:	4619      	mov	r1, r3
 80028d0:	4821      	ldr	r0, [pc, #132]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028d2:	f009 f9af 	bl	800bc34 <HAL_TIM_ConfigClockSource>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80028dc:	f001 fcbe 	bl	800425c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028e0:	481d      	ldr	r0, [pc, #116]	; (8002958 <MX_TIM5_Init+0xfc>)
 80028e2:	f008 ff3b 	bl	800b75c <HAL_TIM_PWM_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80028ec:	f001 fcb6 	bl	800425c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4816      	ldr	r0, [pc, #88]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002900:	f009 fe12 	bl	800c528 <HAL_TIMEx_MasterConfigSynchronization>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800290a:	f001 fca7 	bl	800425c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290e:	2360      	movs	r3, #96	; 0x60
 8002910:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291e:	463b      	mov	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <MX_TIM5_Init+0xfc>)
 8002926:	f009 f86d 	bl	800ba04 <HAL_TIM_PWM_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002930:	f001 fc94 	bl	800425c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	2204      	movs	r2, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <MX_TIM5_Init+0xfc>)
 800293c:	f009 f862 	bl	800ba04 <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002946:	f001 fc89 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800294a:	4803      	ldr	r0, [pc, #12]	; (8002958 <MX_TIM5_Init+0xfc>)
 800294c:	f004 f9b4 	bl	8006cb8 <HAL_TIM_MspPostInit>

}
 8002950:	bf00      	nop
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20010ab4 	.word	0x20010ab4
 800295c:	40000c00 	.word	0x40000c00

08002960 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_UART4_Init+0x58>)
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <MX_UART4_Init+0x5c>)
 8002968:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_UART4_Init+0x58>)
 800296c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002970:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_UART4_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_UART4_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_UART4_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_UART4_Init+0x58>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_UART4_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_UART4_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_UART4_Init+0x58>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_UART4_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_UART4_Init+0x58>)
 80029a4:	f009 fe6c 	bl	800c680 <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80029ae:	f001 fc55 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20015abc 	.word	0x20015abc
 80029bc:	40004c00 	.word	0x40004c00

080029c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_UART5_Init+0x58>)
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <MX_UART5_Init+0x5c>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <MX_UART5_Init+0x58>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_UART5_Init+0x58>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_UART5_Init+0x58>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <MX_UART5_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <MX_UART5_Init+0x58>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <MX_UART5_Init+0x58>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <MX_UART5_Init+0x58>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <MX_UART5_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <MX_UART5_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a02:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_UART5_Init+0x58>)
 8002a04:	f009 fe3c 	bl	800c680 <HAL_UART_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002a0e:	f001 fc25 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20013204 	.word	0x20013204
 8002a1c:	40005000 	.word	0x40005000

08002a20 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <MX_UART7_Init+0x5c>)
 8002a28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a46:	220c      	movs	r2, #12
 8002a48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a50:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <MX_UART7_Init+0x58>)
 8002a66:	f009 fe0b 	bl	800c680 <HAL_UART_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002a70:	f001 fbf4 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2001043c 	.word	0x2001043c
 8002a7c:	40007800 	.word	0x40007800

08002a80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a8e:	2206      	movs	r2, #6
 8002a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a94:	2202      	movs	r2, #2
 8002a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ac4:	f006 fee8 	bl	8009898 <HAL_PCD_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002ace:	f001 fbc5 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20010600 	.word	0x20010600

08002adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_DMA_Init+0x80>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <MX_DMA_Init+0x80>)
 8002ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_DMA_Init+0x80>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_DMA_Init+0x80>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <MX_DMA_Init+0x80>)
 8002b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_DMA_Init+0x80>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2105      	movs	r1, #5
 8002b16:	200b      	movs	r0, #11
 8002b18:	f005 fb60 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b1c:	200b      	movs	r0, #11
 8002b1e:	f005 fb79 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2105      	movs	r1, #5
 8002b26:	2038      	movs	r0, #56	; 0x38
 8002b28:	f005 fb58 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b2c:	2038      	movs	r0, #56	; 0x38
 8002b2e:	f005 fb71 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2105      	movs	r1, #5
 8002b36:	2039      	movs	r0, #57	; 0x39
 8002b38:	f005 fb50 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002b3c:	2039      	movs	r0, #57	; 0x39
 8002b3e:	f005 fb69 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2105      	movs	r1, #5
 8002b46:	203a      	movs	r0, #58	; 0x3a
 8002b48:	f005 fb48 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b4c:	203a      	movs	r0, #58	; 0x3a
 8002b4e:	f005 fb61 	bl	8008214 <HAL_NVIC_EnableIRQ>

}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	; 0x40
 8002b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b76:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4aaf      	ldr	r2, [pc, #700]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4bad      	ldr	r3, [pc, #692]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b8e:	4baa      	ldr	r3, [pc, #680]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4aa9      	ldr	r2, [pc, #676]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4ba7      	ldr	r3, [pc, #668]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4ba4      	ldr	r3, [pc, #656]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4aa3      	ldr	r2, [pc, #652]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4ba1      	ldr	r3, [pc, #644]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bbe:	4b9e      	ldr	r3, [pc, #632]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a9d      	ldr	r2, [pc, #628]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b9b      	ldr	r3, [pc, #620]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b98      	ldr	r3, [pc, #608]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a97      	ldr	r2, [pc, #604]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b95      	ldr	r3, [pc, #596]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a91      	ldr	r2, [pc, #580]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1e:	4b86      	ldr	r3, [pc, #536]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a85      	ldr	r2, [pc, #532]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c24:	f043 0320 	orr.w	r3, r3, #32
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c36:	4b80      	ldr	r3, [pc, #512]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a7f      	ldr	r2, [pc, #508]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a79      	ldr	r2, [pc, #484]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a73      	ldr	r2, [pc, #460]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <MX_GPIO_Init+0x2d8>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2110      	movs	r1, #16
 8002c82:	486e      	ldr	r0, [pc, #440]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002c84:	f006 f89e 	bl	8008dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f244 012f 	movw	r1, #16431	; 0x402f
 8002c8e:	486c      	ldr	r0, [pc, #432]	; (8002e40 <MX_GPIO_Init+0x2e0>)
 8002c90:	f006 f898 	bl	8008dc4 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f241 1150 	movw	r1, #4432	; 0x1150
 8002c9a:	486a      	ldr	r0, [pc, #424]	; (8002e44 <MX_GPIO_Init+0x2e4>)
 8002c9c:	f006 f892 	bl	8008dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	4868      	ldr	r0, [pc, #416]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002ca6:	f006 f88d 	bl	8008dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002caa:	2200      	movs	r2, #0
 8002cac:	f243 013c 	movw	r1, #12348	; 0x303c
 8002cb0:	4866      	ldr	r0, [pc, #408]	; (8002e4c <MX_GPIO_Init+0x2ec>)
 8002cb2:	f006 f887 	bl	8008dc4 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f241 0104 	movw	r1, #4100	; 0x1004
 8002cbc:	4864      	ldr	r0, [pc, #400]	; (8002e50 <MX_GPIO_Init+0x2f0>)
 8002cbe:	f006 f881 	bl	8008dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cc8:	4862      	ldr	r0, [pc, #392]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002cca:	f006 f87b 	bl	8008dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	211b      	movs	r1, #27
 8002cd2:	4861      	ldr	r0, [pc, #388]	; (8002e58 <MX_GPIO_Init+0x2f8>)
 8002cd4:	f006 f876 	bl	8008dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cec:	4619      	mov	r1, r3
 8002cee:	4853      	ldr	r0, [pc, #332]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002cf0:	f005 fea6 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d04:	4619      	mov	r1, r3
 8002d06:	484d      	ldr	r0, [pc, #308]	; (8002e3c <MX_GPIO_Init+0x2dc>)
 8002d08:	f005 fe9a 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002d0c:	f244 032f 	movw	r3, #16431	; 0x402f
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d22:	4619      	mov	r1, r3
 8002d24:	4846      	ldr	r0, [pc, #280]	; (8002e40 <MX_GPIO_Init+0x2e0>)
 8002d26:	f005 fe8b 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4845      	ldr	r0, [pc, #276]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002d3e:	f005 fe7f 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002d42:	f241 1350 	movw	r3, #4432	; 0x1150
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	483a      	ldr	r0, [pc, #232]	; (8002e44 <MX_GPIO_Init+0x2e4>)
 8002d5c:	f005 fe70 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002d60:	23f0      	movs	r3, #240	; 0xf0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d64:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <MX_GPIO_Init+0x2fc>)
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4835      	ldr	r0, [pc, #212]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002d74:	f005 fe64 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4834      	ldr	r0, [pc, #208]	; (8002e60 <MX_GPIO_Init+0x300>)
 8002d8e:	f005 fe57 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002d92:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da4:	4619      	mov	r1, r3
 8002da6:	482f      	ldr	r0, [pc, #188]	; (8002e64 <MX_GPIO_Init+0x304>)
 8002da8:	f005 fe4a 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002dac:	2303      	movs	r3, #3
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4821      	ldr	r0, [pc, #132]	; (8002e48 <MX_GPIO_Init+0x2e8>)
 8002dc4:	f005 fe3c 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002dc8:	f243 033c 	movw	r3, #12348	; 0x303c
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dde:	4619      	mov	r1, r3
 8002de0:	481a      	ldr	r0, [pc, #104]	; (8002e4c <MX_GPIO_Init+0x2ec>)
 8002de2:	f005 fe2d 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002de6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4814      	ldr	r0, [pc, #80]	; (8002e50 <MX_GPIO_Init+0x2f0>)
 8002e00:	f005 fe1e 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002e04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <MX_GPIO_Init+0x2f4>)
 8002e1e:	f005 fe0f 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002e22:	231b      	movs	r3, #27
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e36:	e017      	b.n	8002e68 <MX_GPIO_Init+0x308>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40022800 	.word	0x40022800
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021c00 	.word	0x40021c00
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40022400 	.word	0x40022400
 8002e5c:	10210000 	.word	0x10210000
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480b      	ldr	r0, [pc, #44]	; (8002e98 <MX_GPIO_Init+0x338>)
 8002e6c:	f005 fde8 	bl	8008a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2105      	movs	r1, #5
 8002e74:	200a      	movs	r0, #10
 8002e76:	f005 f9b1 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f005 f9ca 	bl	8008214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2105      	movs	r1, #5
 8002e84:	2017      	movs	r0, #23
 8002e86:	f005 f9a9 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e8a:	2017      	movs	r0, #23
 8002e8c:	f005 f9c2 	bl	8008214 <HAL_NVIC_EnableIRQ>

}
 8002e90:	bf00      	nop
 8002e92:	3740      	adds	r7, #64	; 0x40
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022400 	.word	0x40022400

08002e9c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002ea4:	1d39      	adds	r1, r7, #4
 8002ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <__io_putchar+0x20>)
 8002eae:	f009 fc35 	bl	800c71c <HAL_UART_Transmit>

	return ch;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	2001043c 	.word	0x2001043c

08002ec0 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8002ec4:	220e      	movs	r2, #14
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <outputGPIOBufInitialization+0x14>)
 8002eca:	f00d fa4c 	bl	8010366 <memset>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20013378 	.word	0x20013378

08002ed8 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b098      	sub	sp, #96	; 0x60
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4909      	ldr	r1, [pc, #36]	; (8002f10 <uartTransmitInt+0x38>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f00e f8be 	bl	801106c <siprintf>
 8002ef0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d107      	bne.n	8002f08 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f107 010c 	add.w	r1, r7, #12
 8002f00:	2364      	movs	r3, #100	; 0x64
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <uartTransmitInt+0x3c>)
 8002f04:	f009 fc0a 	bl	800c71c <HAL_UART_Transmit>
	}

}
 8002f08:	bf00      	nop
 8002f0a:	3760      	adds	r7, #96	; 0x60
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	080143fc 	.word	0x080143fc
 8002f14:	2001043c 	.word	0x2001043c

08002f18 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60ba      	str	r2, [r7, #8]
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	4603      	mov	r3, r0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	460b      	mov	r3, r1
 8002f28:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8002f2a:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <readI2CRegister+0x150>)
 8002f2c:	7bbb      	ldrb	r3, [r7, #14]
 8002f2e:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	b299      	uxth	r1, r3
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	4a49      	ldr	r2, [pc, #292]	; (8003068 <readI2CRegister+0x150>)
 8002f44:	4849      	ldr	r0, [pc, #292]	; (800306c <readI2CRegister+0x154>)
 8002f46:	f006 f825 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	75fb      	strb	r3, [r7, #23]
 8002f4e:	e02e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d10c      	bne.n	8002f70 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2301      	movs	r3, #1
 8002f62:	4a41      	ldr	r2, [pc, #260]	; (8003068 <readI2CRegister+0x150>)
 8002f64:	4842      	ldr	r0, [pc, #264]	; (8003070 <readI2CRegister+0x158>)
 8002f66:	f006 f815 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e01e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d10c      	bne.n	8002f90 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	4a39      	ldr	r2, [pc, #228]	; (8003068 <readI2CRegister+0x150>)
 8002f84:	483b      	ldr	r0, [pc, #236]	; (8003074 <readI2CRegister+0x15c>)
 8002f86:	f006 f805 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]
 8002f8e:	e00e      	b.n	8002fae <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d10b      	bne.n	8002fae <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4a31      	ldr	r2, [pc, #196]	; (8003068 <readI2CRegister+0x150>)
 8002fa4:	4834      	ldr	r0, [pc, #208]	; (8003078 <readI2CRegister+0x160>)
 8002fa6:	f005 fff5 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002faa:	4603      	mov	r3, r0
 8002fac:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <readI2CRegister+0xa0>
	          return 0xfe;
 8002fb4:	23fe      	movs	r3, #254	; 0xfe
 8002fb6:	e052      	b.n	800305e <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10e      	bne.n	8002fdc <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	b299      	uxth	r1, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	4a26      	ldr	r2, [pc, #152]	; (8003068 <readI2CRegister+0x150>)
 8002fd0:	4826      	ldr	r0, [pc, #152]	; (800306c <readI2CRegister+0x154>)
 8002fd2:	f006 f8d3 	bl	800917c <HAL_I2C_Master_Receive>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]
 8002fda:	e034      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d10e      	bne.n	8003000 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <readI2CRegister+0x150>)
 8002ff4:	481e      	ldr	r0, [pc, #120]	; (8003070 <readI2CRegister+0x158>)
 8002ff6:	f006 f8c1 	bl	800917c <HAL_I2C_Master_Receive>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]
 8002ffe:	e022      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d10e      	bne.n	8003024 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	b299      	uxth	r1, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	b29a      	uxth	r2, r3
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <readI2CRegister+0x150>)
 8003018:	4816      	ldr	r0, [pc, #88]	; (8003074 <readI2CRegister+0x15c>)
 800301a:	f006 f8af 	bl	800917c <HAL_I2C_Master_Receive>
 800301e:	4603      	mov	r3, r0
 8003020:	75fb      	strb	r3, [r7, #23]
 8003022:	e010      	b.n	8003046 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d10d      	bne.n	8003046 <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	b299      	uxth	r1, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	b29a      	uxth	r2, r3
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <readI2CRegister+0x150>)
 800303c:	480e      	ldr	r0, [pc, #56]	; (8003078 <readI2CRegister+0x160>)
 800303e:	f006 f89d 	bl	800917c <HAL_I2C_Master_Receive>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <readI2CRegister+0x138>
		          return 0xfe;
 800304c:	23fe      	movs	r3, #254	; 0xfe
 800304e:	e006      	b.n	800305e <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <readI2CRegister+0x150>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2107      	movs	r1, #7
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff3e 	bl	8002ed8 <uartTransmitInt>
			  return buf;
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <readI2CRegister+0x150>)
		  }
}
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20003264 	.word	0x20003264
 800306c:	200105b4 	.word	0x200105b4
 8003070:	20010a04 	.word	0x20010a04
 8003074:	200103a4 	.word	0x200103a4
 8003078:	200103f0 	.word	0x200103f0

0800307c <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af02      	add	r7, sp, #8
 8003082:	60ba      	str	r2, [r7, #8]
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	460b      	mov	r3, r1
 800308c:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
 800309a:	e00d      	b.n	80030b8 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	441a      	add	r2, r3
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	3301      	adds	r3, #1
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030ac:	440b      	add	r3, r1
 80030ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	3301      	adds	r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d9ee      	bls.n	800309c <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d112      	bne.n	80030ea <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	b299      	uxth	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	b298      	uxth	r0, r3
 80030d0:	f107 0214 	add.w	r2, r7, #20
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4603      	mov	r3, r0
 80030dc:	4829      	ldr	r0, [pc, #164]	; (8003184 <writeI2CRegister+0x108>)
 80030de:	f005 ff59 	bl	8008f94 <HAL_I2C_Master_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80030e8:	e040      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d112      	bne.n	8003116 <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	b299      	uxth	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	b298      	uxth	r0, r3
 80030fc:	f107 0214 	add.w	r2, r7, #20
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4603      	mov	r3, r0
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <writeI2CRegister+0x10c>)
 800310a:	f005 ff43 	bl	8008f94 <HAL_I2C_Master_Transmit>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003114:	e02a      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b03      	cmp	r3, #3
 800311a:	d112      	bne.n	8003142 <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	b299      	uxth	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	b298      	uxth	r0, r3
 8003128:	f107 0214 	add.w	r2, r7, #20
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	4603      	mov	r3, r0
 8003134:	4815      	ldr	r0, [pc, #84]	; (800318c <writeI2CRegister+0x110>)
 8003136:	f005 ff2d 	bl	8008f94 <HAL_I2C_Master_Transmit>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003140:	e014      	b.n	800316c <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b04      	cmp	r3, #4
 8003146:	d111      	bne.n	800316c <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	b299      	uxth	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b29b      	uxth	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	b298      	uxth	r0, r3
 8003154:	f107 0214 	add.w	r2, r7, #20
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	480b      	ldr	r0, [pc, #44]	; (8003190 <writeI2CRegister+0x114>)
 8003162:	f005 ff17 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 800316c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <writeI2CRegister+0xfc>
	  	          return 0;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003178:	2301      	movs	r3, #1
	  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3730      	adds	r7, #48	; 0x30
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200105b4 	.word	0x200105b4
 8003188:	20010a04 	.word	0x20010a04
 800318c:	200103a4 	.word	0x200103a4
 8003190:	200103f0 	.word	0x200103f0

08003194 <configureLEDDriver>:
void configureLEDDriver(){
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 800319a:	2301      	movs	r3, #1
 800319c:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <configureLEDDriver+0x110>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <configureLEDDriver+0x114>)
 80031a6:	7818      	ldrb	r0, [r3, #0]
 80031a8:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <configureLEDDriver+0x114>)
 80031aa:	7999      	ldrb	r1, [r3, #6]
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <configureLEDDriver+0x114>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2301      	movs	r3, #1
 80031b8:	f7ff ff60 	bl	800307c <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <configureLEDDriver+0x114>)
 80031be:	7818      	ldrb	r0, [r3, #0]
 80031c0:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <configureLEDDriver+0x114>)
 80031c2:	7999      	ldrb	r1, [r3, #6]
 80031c4:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <configureLEDDriver+0x114>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f7ff fea5 	bl	8002f18 <readI2CRegister>
 80031ce:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2107      	movs	r1, #7
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe7e 	bl	8002ed8 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <configureLEDDriver+0x114>)
 80031de:	7818      	ldrb	r0, [r3, #0]
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <configureLEDDriver+0x114>)
 80031e2:	7859      	ldrb	r1, [r3, #1]
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <configureLEDDriver+0x114>)
 80031e6:	79db      	ldrb	r3, [r3, #7]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <configureLEDDriver+0x114>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	f7ff ff43 	bl	800307c <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <configureLEDDriver+0x114>)
 80031f8:	7818      	ldrb	r0, [r3, #0]
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <configureLEDDriver+0x114>)
 80031fc:	7899      	ldrb	r1, [r3, #2]
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <configureLEDDriver+0x114>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2301      	movs	r3, #1
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <configureLEDDriver+0x110>)
 8003208:	f7ff ff38 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <configureLEDDriver+0x114>)
 800320e:	7818      	ldrb	r0, [r3, #0]
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <configureLEDDriver+0x114>)
 8003212:	78d9      	ldrb	r1, [r3, #3]
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <configureLEDDriver+0x114>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2301      	movs	r3, #1
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <configureLEDDriver+0x110>)
 800321e:	f7ff ff2d 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <configureLEDDriver+0x114>)
 8003224:	7818      	ldrb	r0, [r3, #0]
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <configureLEDDriver+0x114>)
 8003228:	7919      	ldrb	r1, [r3, #4]
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <configureLEDDriver+0x114>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2301      	movs	r3, #1
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <configureLEDDriver+0x110>)
 8003234:	f7ff ff22 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <configureLEDDriver+0x114>)
 800323a:	7818      	ldrb	r0, [r3, #0]
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <configureLEDDriver+0x114>)
 800323e:	7959      	ldrb	r1, [r3, #5]
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <configureLEDDriver+0x114>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2301      	movs	r3, #1
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <configureLEDDriver+0x110>)
 800324a:	f7ff ff17 	bl	800307c <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <configureLEDDriver+0x114>)
 8003250:	7818      	ldrb	r0, [r3, #0]
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <configureLEDDriver+0x114>)
 8003254:	7a19      	ldrb	r1, [r3, #8]
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <configureLEDDriver+0x114>)
 8003258:	7adb      	ldrb	r3, [r3, #11]
 800325a:	461a      	mov	r2, r3
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <configureLEDDriver+0x114>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2301      	movs	r3, #1
 8003264:	f7ff ff0a 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <configureLEDDriver+0x114>)
 800326a:	7818      	ldrb	r0, [r3, #0]
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <configureLEDDriver+0x114>)
 800326e:	7a59      	ldrb	r1, [r3, #9]
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <configureLEDDriver+0x114>)
 8003272:	7adb      	ldrb	r3, [r3, #11]
 8003274:	461a      	mov	r2, r3
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <configureLEDDriver+0x114>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2301      	movs	r3, #1
 800327e:	f7ff fefd 	bl	800307c <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <configureLEDDriver+0x114>)
 8003284:	7818      	ldrb	r0, [r3, #0]
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <configureLEDDriver+0x114>)
 8003288:	7a99      	ldrb	r1, [r3, #10]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <configureLEDDriver+0x114>)
 800328c:	7adb      	ldrb	r3, [r3, #11]
 800328e:	461a      	mov	r2, r3
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <configureLEDDriver+0x114>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	f7ff fef0 	bl	800307c <writeI2CRegister>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20003278 	.word	0x20003278
 80032a8:	20000004 	.word	0x20000004

080032ac <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80032b8:	2301      	movs	r3, #1
 80032ba:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80032bc:	2304      	movs	r3, #4
 80032be:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80032c0:	2310      	movs	r3, #16
 80032c2:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80032c4:	2340      	movs	r3, #64	; 0x40
 80032c6:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80032cc:	2308      	movs	r3, #8
 80032ce:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80032d0:	2320      	movs	r3, #32
 80032d2:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	dc05      	bgt.n	80032ea <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80032de:	4b80      	ldr	r3, [pc, #512]	; (80034e0 <setErrorLED+0x234>)
 80032e0:	789b      	ldrb	r3, [r3, #2]
 80032e2:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	e019      	b.n	800331e <setErrorLED+0x72>
	}
	else if(led <8){
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	dc06      	bgt.n	80032fe <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80032f0:	4b7b      	ldr	r3, [pc, #492]	; (80034e0 <setErrorLED+0x234>)
 80032f2:	78db      	ldrb	r3, [r3, #3]
 80032f4:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3b04      	subs	r3, #4
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e00f      	b.n	800331e <setErrorLED+0x72>
	}
	else if(led <12){
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0b      	cmp	r3, #11
 8003302:	dc06      	bgt.n	8003312 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003304:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <setErrorLED+0x234>)
 8003306:	791b      	ldrb	r3, [r3, #4]
 8003308:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3b08      	subs	r3, #8
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	e005      	b.n	800331e <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <setErrorLED+0x234>)
 8003314:	795b      	ldrb	r3, [r3, #5]
 8003316:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b0c      	subs	r3, #12
 800331c:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <setErrorLED+0x234>)
 8003320:	7818      	ldrb	r0, [r3, #0]
 8003322:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <setErrorLED+0x234>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	7ef9      	ldrb	r1, [r7, #27]
 8003328:	2201      	movs	r2, #1
 800332a:	f7ff fdf5 	bl	8002f18 <readI2CRegister>
 800332e:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b03      	cmp	r3, #3
 8003334:	f200 80bd 	bhi.w	80034b2 <setErrorLED+0x206>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <setErrorLED+0x94>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003351 	.word	0x08003351
 8003344:	080033b7 	.word	0x080033b7
 8003348:	0800341d 	.word	0x0800341d
 800334c:	0800344d 	.word	0x0800344d

	case 0:
		if(change){
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <setErrorLED+0xd0>
			if(led == 8){
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d107      	bne.n	800336c <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	7dbb      	ldrb	r3, [r7, #22]
 8003362:	4313      	orrs	r3, r2
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 800336a:	e0a2      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	7ebb      	ldrb	r3, [r7, #26]
 8003372:	4313      	orrs	r3, r2
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]
		break;
 800337a:	e09a      	b.n	80034b2 <setErrorLED+0x206>
			if(led == 8){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d10c      	bne.n	800339c <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25a      	sxtb	r2, r3
 8003388:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800338c:	43db      	mvns	r3, r3
 800338e:	b25b      	sxtb	r3, r3
 8003390:	4013      	ands	r3, r2
 8003392:	b25b      	sxtb	r3, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	701a      	strb	r2, [r3, #0]
		break;
 800339a:	e08a      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b25a      	sxtb	r2, r3
 80033a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	4013      	ands	r3, r2
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	701a      	strb	r2, [r3, #0]
		break;
 80033b4:	e07d      	b.n	80034b2 <setErrorLED+0x206>

	case 1:
		if(change){
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <setErrorLED+0x136>
			if(led == 9){
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d107      	bne.n	80033d2 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	7d7b      	ldrb	r3, [r7, #21]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80033d0:	e06f      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	7e7b      	ldrb	r3, [r7, #25]
 80033d8:	4313      	orrs	r3, r2
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	701a      	strb	r2, [r3, #0]
		break;
 80033e0:	e067      	b.n	80034b2 <setErrorLED+0x206>
			if(led == 9){
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d10c      	bne.n	8003402 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25a      	sxtb	r2, r3
 80033ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	4013      	ands	r3, r2
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	701a      	strb	r2, [r3, #0]
		break;
 8003400:	e057      	b.n	80034b2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b25a      	sxtb	r2, r3
 8003408:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800340c:	43db      	mvns	r3, r3
 800340e:	b25b      	sxtb	r3, r3
 8003410:	4013      	ands	r3, r2
 8003412:	b25b      	sxtb	r3, r3
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	701a      	strb	r2, [r3, #0]
		break;
 800341a:	e04a      	b.n	80034b2 <setErrorLED+0x206>

	case 2:
		if(change){
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	7e3b      	ldrb	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003430:	e03f      	b.n	80034b2 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b25a      	sxtb	r2, r3
 8003438:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800343c:	43db      	mvns	r3, r3
 800343e:	b25b      	sxtb	r3, r3
 8003440:	4013      	ands	r3, r2
 8003442:	b25b      	sxtb	r3, r3
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	701a      	strb	r2, [r3, #0]
		break;
 800344a:	e032      	b.n	80034b2 <setErrorLED+0x206>

	case 3:
		if(change){
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <setErrorLED+0x1cc>
			if(led == 7){
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b07      	cmp	r3, #7
 8003456:	d107      	bne.n	8003468 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	4313      	orrs	r3, r2
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003466:	e023      	b.n	80034b0 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	4313      	orrs	r3, r2
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	701a      	strb	r2, [r3, #0]
		break;
 8003476:	e01b      	b.n	80034b0 <setErrorLED+0x204>
			if(led == 7){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b07      	cmp	r3, #7
 800347c:	d10c      	bne.n	8003498 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b25a      	sxtb	r2, r3
 8003484:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003488:	43db      	mvns	r3, r3
 800348a:	b25b      	sxtb	r3, r3
 800348c:	4013      	ands	r3, r2
 800348e:	b25b      	sxtb	r3, r3
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	701a      	strb	r2, [r3, #0]
		break;
 8003496:	e00b      	b.n	80034b0 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	b25a      	sxtb	r2, r3
 800349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	4013      	ands	r3, r2
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
		break;
 80034b0:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <setErrorLED+0x234>)
 80034b4:	7818      	ldrb	r0, [r3, #0]
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <setErrorLED+0x234>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	7ef9      	ldrb	r1, [r7, #27]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f7ff fddb 	bl	800307c <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <setErrorLED+0x234>)
 80034c8:	7818      	ldrb	r0, [r3, #0]
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <setErrorLED+0x234>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	7ef9      	ldrb	r1, [r7, #27]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f7ff fd21 	bl	8002f18 <readI2CRegister>
 80034d6:	60f8      	str	r0, [r7, #12]
}
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000004 	.word	0x20000004

080034e4 <getADCValues>:


float* getADCValues(){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b09e      	sub	sp, #120	; 0x78
 80034e8:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80034ea:	463b      	mov	r3, r7
 80034ec:	2254      	movs	r2, #84	; 0x54
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00c ff38 	bl	8010366 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80034f6:	2316      	movs	r3, #22
 80034f8:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 80034fa:	2308      	movs	r3, #8
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 80034fe:	230c      	movs	r3, #12
 8003500:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003502:	2300      	movs	r3, #0
 8003504:	677b      	str	r3, [r7, #116]	; 0x74
 8003506:	e171      	b.n	80037ec <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003508:	4b97      	ldr	r3, [pc, #604]	; (8003768 <getADCValues+0x284>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800350e:	429a      	cmp	r2, r3
 8003510:	d009      	beq.n	8003526 <getADCValues+0x42>
 8003512:	4b95      	ldr	r3, [pc, #596]	; (8003768 <getADCValues+0x284>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003518:	429a      	cmp	r2, r3
 800351a:	d004      	beq.n	8003526 <getADCValues+0x42>
 800351c:	4b92      	ldr	r3, [pc, #584]	; (8003768 <getADCValues+0x284>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003522:	429a      	cmp	r2, r3
 8003524:	d102      	bne.n	800352c <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003526:	2300      	movs	r3, #0
 8003528:	66fb      	str	r3, [r7, #108]	; 0x6c
 800352a:	e071      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 800352c:	4b8e      	ldr	r3, [pc, #568]	; (8003768 <getADCValues+0x284>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003532:	429a      	cmp	r2, r3
 8003534:	d009      	beq.n	800354a <getADCValues+0x66>
 8003536:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <getADCValues+0x284>)
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800353c:	429a      	cmp	r2, r3
 800353e:	d004      	beq.n	800354a <getADCValues+0x66>
 8003540:	4b89      	ldr	r3, [pc, #548]	; (8003768 <getADCValues+0x284>)
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003546:	429a      	cmp	r2, r3
 8003548:	d102      	bne.n	8003550 <getADCValues+0x6c>
			adcIndex=2;
 800354a:	2302      	movs	r3, #2
 800354c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800354e:	e05f      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003550:	4b85      	ldr	r3, [pc, #532]	; (8003768 <getADCValues+0x284>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003556:	429a      	cmp	r2, r3
 8003558:	d009      	beq.n	800356e <getADCValues+0x8a>
 800355a:	4b83      	ldr	r3, [pc, #524]	; (8003768 <getADCValues+0x284>)
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003560:	429a      	cmp	r2, r3
 8003562:	d004      	beq.n	800356e <getADCValues+0x8a>
 8003564:	4b80      	ldr	r3, [pc, #512]	; (8003768 <getADCValues+0x284>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800356a:	429a      	cmp	r2, r3
 800356c:	d102      	bne.n	8003574 <getADCValues+0x90>
			adcIndex=4;
 800356e:	2304      	movs	r3, #4
 8003570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003572:	e04d      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003574:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <getADCValues+0x284>)
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800357a:	429a      	cmp	r2, r3
 800357c:	d009      	beq.n	8003592 <getADCValues+0xae>
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <getADCValues+0x284>)
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003584:	429a      	cmp	r2, r3
 8003586:	d004      	beq.n	8003592 <getADCValues+0xae>
 8003588:	4b77      	ldr	r3, [pc, #476]	; (8003768 <getADCValues+0x284>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800358e:	429a      	cmp	r2, r3
 8003590:	d102      	bne.n	8003598 <getADCValues+0xb4>
			adcIndex=6;
 8003592:	2306      	movs	r3, #6
 8003594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003596:	e03b      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <getADCValues+0x284>)
 800359a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800359e:	429a      	cmp	r2, r3
 80035a0:	d004      	beq.n	80035ac <getADCValues+0xc8>
 80035a2:	4b71      	ldr	r3, [pc, #452]	; (8003768 <getADCValues+0x284>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d102      	bne.n	80035b2 <getADCValues+0xce>
			adcIndex=8;
 80035ac:	2308      	movs	r3, #8
 80035ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035b0:	e02e      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <getADCValues+0x284>)
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d004      	beq.n	80035c6 <getADCValues+0xe2>
 80035bc:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <getADCValues+0x284>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d102      	bne.n	80035cc <getADCValues+0xe8>
			adcIndex=10;
 80035c6:	230a      	movs	r3, #10
 80035c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ca:	e021      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <getADCValues+0x284>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d102      	bne.n	80035dc <getADCValues+0xf8>
			adcIndex=12;
 80035d6:	230c      	movs	r3, #12
 80035d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035da:	e019      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 80035dc:	4b62      	ldr	r3, [pc, #392]	; (8003768 <getADCValues+0x284>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d102      	bne.n	80035ec <getADCValues+0x108>
			adcIndex=14;
 80035e6:	230e      	movs	r3, #14
 80035e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ea:	e011      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 80035ec:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <getADCValues+0x284>)
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d102      	bne.n	80035fc <getADCValues+0x118>
			adcIndex=16;
 80035f6:	2310      	movs	r3, #16
 80035f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035fa:	e009      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <getADCValues+0x284>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003602:	429a      	cmp	r2, r3
 8003604:	d102      	bne.n	800360c <getADCValues+0x128>
			adcIndex=18;
 8003606:	2312      	movs	r3, #18
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800360a:	e001      	b.n	8003610 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 800360c:	2314      	movs	r3, #20
 800360e:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <getADCValues+0x284>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003616:	429a      	cmp	r2, r3
 8003618:	d00e      	beq.n	8003638 <getADCValues+0x154>
 800361a:	4b53      	ldr	r3, [pc, #332]	; (8003768 <getADCValues+0x284>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003620:	429a      	cmp	r2, r3
 8003622:	d009      	beq.n	8003638 <getADCValues+0x154>
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <getADCValues+0x284>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800362a:	429a      	cmp	r2, r3
 800362c:	d004      	beq.n	8003638 <getADCValues+0x154>
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <getADCValues+0x284>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003634:	429a      	cmp	r2, r3
 8003636:	d13a      	bne.n	80036ae <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003638:	2300      	movs	r3, #0
 800363a:	673b      	str	r3, [r7, #112]	; 0x70
 800363c:	e033      	b.n	80036a6 <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800363e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003640:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003648:	4413      	add	r3, r2
 800364a:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003654:	4413      	add	r3, r2
 8003656:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800365a:	4944      	ldr	r1, [pc, #272]	; (800376c <getADCValues+0x288>)
 800365c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800365e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003662:	441a      	add	r2, r3
 8003664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800366c:	440b      	add	r3, r1
 800366e:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	2b13      	cmp	r3, #19
 8003676:	d113      	bne.n	80036a0 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003680:	4413      	add	r3, r2
 8003682:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <getADCValues+0x28c>)
 8003688:	fb82 1203 	smull	r1, r2, r2, r3
 800368c:	10d2      	asrs	r2, r2, #3
 800368e:	17db      	asrs	r3, r3, #31
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800369a:	440b      	add	r3, r1
 800369c:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a2:	3301      	adds	r3, #1
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	2b13      	cmp	r3, #19
 80036aa:	ddc8      	ble.n	800363e <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80036ac:	e09b      	b.n	80037e6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <getADCValues+0x284>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d018      	beq.n	80036ea <getADCValues+0x206>
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <getADCValues+0x284>)
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036be:	429a      	cmp	r2, r3
 80036c0:	d013      	beq.n	80036ea <getADCValues+0x206>
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <getADCValues+0x284>)
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d00e      	beq.n	80036ea <getADCValues+0x206>
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <getADCValues+0x284>)
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d009      	beq.n	80036ea <getADCValues+0x206>
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <getADCValues+0x284>)
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036dc:	429a      	cmp	r2, r3
 80036de:	d004      	beq.n	80036ea <getADCValues+0x206>
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <getADCValues+0x284>)
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d13a      	bne.n	8003760 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80036ea:	2300      	movs	r3, #0
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
 80036ee:	e033      	b.n	8003758 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 80036f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fa:	4413      	add	r3, r2
 80036fc:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003706:	4413      	add	r3, r2
 8003708:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800370c:	4919      	ldr	r1, [pc, #100]	; (8003774 <getADCValues+0x290>)
 800370e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003710:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003714:	441a      	add	r2, r3
 8003716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800371e:	440b      	add	r3, r1
 8003720:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003726:	2b13      	cmp	r3, #19
 8003728:	d113      	bne.n	8003752 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003732:	4413      	add	r3, r2
 8003734:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003738:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <getADCValues+0x28c>)
 800373a:	fb82 1203 	smull	r1, r2, r2, r3
 800373e:	10d2      	asrs	r2, r2, #3
 8003740:	17db      	asrs	r3, r3, #31
 8003742:	1ad2      	subs	r2, r2, r3
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800374c:	440b      	add	r3, r1
 800374e:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003754:	3301      	adds	r3, #1
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	2b13      	cmp	r3, #19
 800375c:	ddc8      	ble.n	80036f0 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800375e:	e042      	b.n	80037e6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003760:	2300      	movs	r3, #0
 8003762:	673b      	str	r3, [r7, #112]	; 0x70
 8003764:	e03c      	b.n	80037e0 <getADCValues+0x2fc>
 8003766:	bf00      	nop
 8003768:	2000005c 	.word	0x2000005c
 800376c:	200218a4 	.word	0x200218a4
 8003770:	66666667 	.word	0x66666667
 8003774:	200133ac 	.word	0x200133ac
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003782:	4413      	add	r3, r2
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800378e:	4413      	add	r3, r2
 8003790:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003794:	49c9      	ldr	r1, [pc, #804]	; (8003abc <getADCValues+0x5d8>)
 8003796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003798:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800379c:	441a      	add	r2, r3
 800379e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037a6:	440b      	add	r3, r1
 80037a8:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80037ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ae:	2b13      	cmp	r3, #19
 80037b0:	d113      	bne.n	80037da <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80037b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037ba:	4413      	add	r3, r2
 80037bc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80037c0:	4abf      	ldr	r2, [pc, #764]	; (8003ac0 <getADCValues+0x5dc>)
 80037c2:	fb82 1203 	smull	r1, r2, r2, r3
 80037c6:	10d2      	asrs	r2, r2, #3
 80037c8:	17db      	asrs	r3, r3, #31
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037d4:	440b      	add	r3, r1
 80037d6:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80037da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037dc:	3301      	adds	r3, #1
 80037de:	673b      	str	r3, [r7, #112]	; 0x70
 80037e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e2:	2b13      	cmp	r3, #19
 80037e4:	ddc8      	ble.n	8003778 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80037e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e8:	3301      	adds	r3, #1
 80037ea:	677b      	str	r3, [r7, #116]	; 0x74
 80037ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ee:	2b14      	cmp	r3, #20
 80037f0:	f77f ae8a 	ble.w	8003508 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80037f4:	4bb3      	ldr	r3, [pc, #716]	; (8003ac4 <getADCValues+0x5e0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80037fe:	4413      	add	r3, r2
 8003800:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	4bad      	ldr	r3, [pc, #692]	; (8003ac4 <getADCValues+0x5e0>)
 800380e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003816:	4bab      	ldr	r3, [pc, #684]	; (8003ac4 <getADCValues+0x5e0>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003822:	4ba8      	ldr	r3, [pc, #672]	; (8003ac4 <getADCValues+0x5e0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	4aa7      	ldr	r2, [pc, #668]	; (8003ac8 <getADCValues+0x5e4>)
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003834:	4ba3      	ldr	r3, [pc, #652]	; (8003ac4 <getADCValues+0x5e0>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800383e:	4413      	add	r3, r2
 8003840:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384c:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <getADCValues+0x5e0>)
 800384e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003856:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <getADCValues+0x5e0>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003862:	4b98      	ldr	r3, [pc, #608]	; (8003ac4 <getADCValues+0x5e0>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	4a97      	ldr	r2, [pc, #604]	; (8003ac8 <getADCValues+0x5e4>)
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <getADCValues+0x5e0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800387e:	4413      	add	r3, r2
 8003880:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388c:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <getADCValues+0x5e0>)
 800388e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003896:	4b8b      	ldr	r3, [pc, #556]	; (8003ac4 <getADCValues+0x5e0>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <getADCValues+0x5e0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <getADCValues+0x5e4>)
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038b4:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <getADCValues+0x5e0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038be:	4413      	add	r3, r2
 80038c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038cc:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <getADCValues+0x5e0>)
 80038ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80038d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <getADCValues+0x5e0>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e2:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <getADCValues+0x5e0>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <getADCValues+0x5e4>)
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80038f4:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <getADCValues+0x5e0>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80038fe:	4413      	add	r3, r2
 8003900:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800390c:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <getADCValues+0x5e0>)
 800390e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <getADCValues+0x5e0>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003922:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <getADCValues+0x5e0>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <getADCValues+0x5e4>)
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003934:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <getADCValues+0x5e0>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800393e:	4413      	add	r3, r2
 8003940:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800394c:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <getADCValues+0x5e0>)
 800394e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <getADCValues+0x5e0>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <getADCValues+0x5e0>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396a:	4a57      	ldr	r2, [pc, #348]	; (8003ac8 <getADCValues+0x5e4>)
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <getADCValues+0x5e0>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800397e:	4413      	add	r3, r2
 8003980:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800398c:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <getADCValues+0x5e0>)
 800398e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <getADCValues+0x5e0>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a2:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <getADCValues+0x5e0>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <getADCValues+0x5e4>)
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <getADCValues+0x5e0>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039be:	4413      	add	r3, r2
 80039c0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039cc:	4b3d      	ldr	r3, [pc, #244]	; (8003ac4 <getADCValues+0x5e0>)
 80039ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80039d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <getADCValues+0x5e0>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <getADCValues+0x5e0>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	4a37      	ldr	r2, [pc, #220]	; (8003ac8 <getADCValues+0x5e4>)
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <getADCValues+0x5e0>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039fe:	4413      	add	r3, r2
 8003a00:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <getADCValues+0x5e0>)
 8003a0e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <getADCValues+0x5e0>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <getADCValues+0x5e0>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <getADCValues+0x5e4>)
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <getADCValues+0x5e0>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a3e:	4413      	add	r3, r2
 8003a40:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <getADCValues+0x5e0>)
 8003a4e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <getADCValues+0x5e0>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <getADCValues+0x5e0>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <getADCValues+0x5e4>)
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <getADCValues+0x5e0>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a7e:	4413      	add	r3, r2
 8003a80:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <getADCValues+0x5e0>)
 8003a8e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <getADCValues+0x5e0>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <getADCValues+0x5e0>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <getADCValues+0x5e4>)
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <getADCValues+0x5e0>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	e007      	b.n	8003acc <getADCValues+0x5e8>
 8003abc:	20010af4 	.word	0x20010af4
 8003ac0:	66666667 	.word	0x66666667
 8003ac4:	2000005c 	.word	0x2000005c
 8003ac8:	2000327c 	.word	0x2000327c
 8003acc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ade:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <getADCValues+0x86c>)
 8003ae0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae8:	4b99      	ldr	r3, [pc, #612]	; (8003d50 <getADCValues+0x86c>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af4:	4b96      	ldr	r3, [pc, #600]	; (8003d50 <getADCValues+0x86c>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	4a95      	ldr	r2, [pc, #596]	; (8003d54 <getADCValues+0x870>)
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b06:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <getADCValues+0x86c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b10:	4413      	add	r3, r2
 8003b12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1e:	4b8c      	ldr	r3, [pc, #560]	; (8003d50 <getADCValues+0x86c>)
 8003b20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b28:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <getADCValues+0x86c>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b34:	4b86      	ldr	r3, [pc, #536]	; (8003d50 <getADCValues+0x86c>)
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	4a85      	ldr	r2, [pc, #532]	; (8003d54 <getADCValues+0x870>)
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b46:	4b82      	ldr	r3, [pc, #520]	; (8003d50 <getADCValues+0x86c>)
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b50:	4413      	add	r3, r2
 8003b52:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <getADCValues+0x86c>)
 8003b60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b68:	4b79      	ldr	r3, [pc, #484]	; (8003d50 <getADCValues+0x86c>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b74:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <getADCValues+0x86c>)
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7c:	4a75      	ldr	r2, [pc, #468]	; (8003d54 <getADCValues+0x870>)
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003b86:	4b72      	ldr	r3, [pc, #456]	; (8003d50 <getADCValues+0x86c>)
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b90:	4413      	add	r3, r2
 8003b92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <getADCValues+0x86c>)
 8003ba0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba8:	4b69      	ldr	r3, [pc, #420]	; (8003d50 <getADCValues+0x86c>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <getADCValues+0x86c>)
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbc:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <getADCValues+0x870>)
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bc6:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <getADCValues+0x86c>)
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <getADCValues+0x86c>)
 8003be0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <getADCValues+0x86c>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <getADCValues+0x86c>)
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfc:	4a55      	ldr	r2, [pc, #340]	; (8003d54 <getADCValues+0x870>)
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c06:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <getADCValues+0x86c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c10:	4413      	add	r3, r2
 8003c12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <getADCValues+0x86c>)
 8003c20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c28:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <getADCValues+0x86c>)
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <getADCValues+0x86c>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	4a45      	ldr	r2, [pc, #276]	; (8003d54 <getADCValues+0x870>)
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <getADCValues+0x86c>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c50:	4413      	add	r3, r2
 8003c52:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <getADCValues+0x86c>)
 8003c60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <getADCValues+0x86c>)
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <getADCValues+0x86c>)
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	4a35      	ldr	r2, [pc, #212]	; (8003d54 <getADCValues+0x870>)
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <getADCValues+0x86c>)
 8003c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c90:	4413      	add	r3, r2
 8003c92:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <getADCValues+0x86c>)
 8003ca0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <getADCValues+0x86c>)
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	ee07 3a90 	vmov	s15, r3
 8003cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <getADCValues+0x86c>)
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbc:	4a25      	ldr	r2, [pc, #148]	; (8003d54 <getADCValues+0x870>)
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <getADCValues+0x86c>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <getADCValues+0x86c>)
 8003ce0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <getADCValues+0x86c>)
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <getADCValues+0x86c>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <getADCValues+0x870>)
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <getADCValues+0x86c>)
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d10:	4413      	add	r3, r2
 8003d12:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <getADCValues+0x86c>)
 8003d20:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <getADCValues+0x86c>)
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <getADCValues+0x86c>)
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <getADCValues+0x870>)
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8003d46:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <getADCValues+0x870>)
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3778      	adds	r7, #120	; 0x78
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000005c 	.word	0x2000005c
 8003d54:	2000327c 	.word	0x2000327c

08003d58 <setVoltageMux>:

void setVoltageMux(int comChannel, int voltageChannel, int clear){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	uint8_t dataWriteCOMA[1];
	uint8_t dataWriteCOMB[1];
	int x;
	if((comChannel) & (!clear)){
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <setVoltageMux+0x30>
		dataWriteCOMA[0] = socI2cVoltageMux.clearSwitches;
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <setVoltageMux+0x90>)
 8003d7c:	7cdb      	ldrb	r3, [r3, #19]
 8003d7e:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= voltageChannel;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	753b      	strb	r3, [r7, #20]
 8003d86:	e011      	b.n	8003dac <setVoltageMux+0x54>
	}
	else if((!comChannel) & (!clear)){
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <setVoltageMux+0x48>
		dataWriteCOMA[0] = voltageChannel;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= socI2cVoltageMux.clearSwitches;
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <setVoltageMux+0x90>)
 8003d9a:	7cdb      	ldrb	r3, [r3, #19]
 8003d9c:	753b      	strb	r3, [r7, #20]
 8003d9e:	e005      	b.n	8003dac <setVoltageMux+0x54>
	}
	else{
		dataWriteCOMA[0] = socI2cVoltageMux.clearSwitches;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <setVoltageMux+0x90>)
 8003da2:	7cdb      	ldrb	r3, [r3, #19]
 8003da4:	763b      	strb	r3, [r7, #24]
		dataWriteCOMB[0]= socI2cVoltageMux.clearSwitches;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <setVoltageMux+0x90>)
 8003da8:	7cdb      	ldrb	r3, [r3, #19]
 8003daa:	753b      	strb	r3, [r7, #20]
	}
	x = writeI2CRegister(socI2cVoltageMux.address, socI2cVoltageMux.CMD_A_reg, dataWriteCOMA,sizeof(dataWriteCOMA), socI2cVoltageMux.i2cBank);
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <setVoltageMux+0x90>)
 8003dae:	7818      	ldrb	r0, [r3, #0]
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <setVoltageMux+0x90>)
 8003db2:	7859      	ldrb	r1, [r3, #1]
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <setVoltageMux+0x90>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f107 0218 	add.w	r2, r7, #24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f7ff f95c 	bl	800307c <writeI2CRegister>
 8003dc4:	61f8      	str	r0, [r7, #28]
	x = writeI2CRegister(socI2cVoltageMux.address, socI2cVoltageMux.CMD_B_reg, dataWriteCOMB,sizeof(dataWriteCOMB), socI2cVoltageMux.i2cBank);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <setVoltageMux+0x90>)
 8003dc8:	7818      	ldrb	r0, [r3, #0]
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <setVoltageMux+0x90>)
 8003dcc:	7899      	ldrb	r1, [r3, #2]
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <setVoltageMux+0x90>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f107 0214 	add.w	r2, r7, #20
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f7ff f94f 	bl	800307c <writeI2CRegister>
 8003dde:	61f8      	str	r0, [r7, #28]
}
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000014 	.word	0x20000014

08003dec <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <startHeartbeat+0x1c>)
 8003e0e:	f004 fff2 	bl	8008df6 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8003e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e16:	f009 fce7 	bl	800d7e8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8003e1a:	e7f5      	b.n	8003e08 <startHeartbeat+0x8>
 8003e1c:	40022000 	.word	0x40022000

08003e20 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 8003e28:	2203      	movs	r2, #3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4815      	ldr	r0, [pc, #84]	; (8003e84 <startADCRead+0x64>)
 8003e2e:	f00c fa9a 	bl	8010366 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8003e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e36:	2100      	movs	r1, #0
 8003e38:	4813      	ldr	r0, [pc, #76]	; (8003e88 <startADCRead+0x68>)
 8003e3a:	f00c fa94 	bl	8010366 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 8003e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e42:	2100      	movs	r1, #0
 8003e44:	4811      	ldr	r0, [pc, #68]	; (8003e8c <startADCRead+0x6c>)
 8003e46:	f00c fa8e 	bl	8010366 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 8003e4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4e:	2100      	movs	r1, #0
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <startADCRead+0x70>)
 8003e52:	f00c fa88 	bl	8010366 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	490b      	ldr	r1, [pc, #44]	; (8003e88 <startADCRead+0x68>)
 8003e5c:	480d      	ldr	r0, [pc, #52]	; (8003e94 <startADCRead+0x74>)
 8003e5e:	f003 fcdf 	bl	8007820 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <startADCRead+0x6c>)
 8003e68:	480b      	ldr	r0, [pc, #44]	; (8003e98 <startADCRead+0x78>)
 8003e6a:	f003 fcd9 	bl	8007820 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4907      	ldr	r1, [pc, #28]	; (8003e90 <startADCRead+0x70>)
 8003e74:	4809      	ldr	r0, [pc, #36]	; (8003e9c <startADCRead+0x7c>)
 8003e76:	f003 fcd3 	bl	8007820 <HAL_ADC_Start_DMA>
    osDelay(600);
 8003e7a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003e7e:	f009 fcb3 	bl	800d7e8 <osDelay>
  {
 8003e82:	e7d1      	b.n	8003e28 <startADCRead+0x8>
 8003e84:	20010ab0 	.word	0x20010ab0
 8003e88:	20010af4 	.word	0x20010af4
 8003e8c:	200218a4 	.word	0x200218a4
 8003e90:	200133ac 	.word	0x200133ac
 8003e94:	20013284 	.word	0x20013284
 8003e98:	2001056c 	.word	0x2001056c
 8003e9c:	200132d0 	.word	0x200132d0

08003ea0 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	f5ad 6d0e 	sub.w	sp, sp, #2272	; 0x8e0
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 int x = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
	 float *adcValues;
	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8003eb2:	f000 f9e3 	bl	800427c <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
	 uint8_t menu_val = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
	 uint8_t running_menu = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
	 uint8_t readI2c[2250];
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8003ece:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	21ff      	movs	r1, #255	; 0xff
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f00b f947 	bl	800f16c <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8003ede:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	f887 38db 	strb.w	r3, [r7, #2267]	; 0x8db
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8003eec:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	f887 38da 	strb.w	r3, [r7, #2266]	; 0x8da
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8003efc:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	f887 38d9 	strb.w	r3, [r7, #2265]	; 0x8d9
	 	  setVoltageMux(COMA,socI2cVoltageMux.enableSW2,0);
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <GetDaScreenBlink+0xf4>)
 8003f0e:	791b      	ldrb	r3, [r3, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	4619      	mov	r1, r3
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7ff ff1f 	bl	8003d58 <setVoltageMux>
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8003f1a:	f897 38d9 	ldrb.w	r3, [r7, #2265]	; 0x8d9
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d833      	bhi.n	8003f8c <GetDaScreenBlink+0xec>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <GetDaScreenBlink+0x8c>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f57 	.word	0x08003f57
 8003f30:	08003f3d 	.word	0x08003f3d
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	08003f7b 	.word	0x08003f7b
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 8003f3c:	4816      	ldr	r0, [pc, #88]	; (8003f98 <GetDaScreenBlink+0xf8>)
 8003f3e:	f00d f887 	bl	8011050 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 8003f42:	f897 38da 	ldrb.w	r3, [r7, #2266]	; 0x8da
 8003f46:	f897 28d9 	ldrb.w	r2, [r7, #2265]	; 0x8d9
 8003f4a:	f897 18db 	ldrb.w	r1, [r7, #2267]	; 0x8db
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f002 f8fc 	bl	800614c <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8003f54:	e01a      	b.n	8003f8c <GetDaScreenBlink+0xec>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 8003f56:	4811      	ldr	r0, [pc, #68]	; (8003f9c <GetDaScreenBlink+0xfc>)
 8003f58:	f00d f87a 	bl	8011050 <puts>
			  drawMainMenu(menu_val);
 8003f5c:	f897 38da 	ldrb.w	r3, [r7, #2266]	; 0x8da
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f9b5 	bl	80042d0 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8003f66:	e011      	b.n	8003f8c <GetDaScreenBlink+0xec>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 8003f68:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <GetDaScreenBlink+0x100>)
 8003f6a:	f00d f871 	bl	8011050 <puts>
			  drawStatusMenu(menu_val);
 8003f6e:	f897 38da 	ldrb.w	r3, [r7, #2266]	; 0x8da
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fc58 	bl	8004828 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8003f78:	e008      	b.n	8003f8c <GetDaScreenBlink+0xec>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 8003f7a:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <GetDaScreenBlink+0x104>)
 8003f7c:	f00d f868 	bl	8011050 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8003f80:	f897 38da 	ldrb.w	r3, [r7, #2266]	; 0x8da
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fdbb 	bl	8005b00 <drawSystemInfoMenu>
			  break;
 8003f8a:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8003f8c:	2064      	movs	r0, #100	; 0x64
 8003f8e:	f009 fc2b 	bl	800d7e8 <osDelay>
	 	  ulNotifiedValue = 0;
 8003f92:	e799      	b.n	8003ec8 <GetDaScreenBlink+0x28>
 8003f94:	20000014 	.word	0x20000014
 8003f98:	0801440c 	.word	0x0801440c
 8003f9c:	08014418 	.word	0x08014418
 8003fa0:	08014424 	.word	0x08014424
 8003fa4:	08014434 	.word	0x08014434

08003fa8 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8003fb0:	4b42      	ldr	r3, [pc, #264]	; (80040bc <startGpioInputRead+0x114>)
 8003fb2:	681c      	ldr	r4, [r3, #0]
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	4842      	ldr	r0, [pc, #264]	; (80040c0 <startGpioInputRead+0x118>)
 8003fb8:	f004 feec 	bl	8008d94 <HAL_GPIO_ReadPin>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <startGpioInputRead+0x11c>)
 8003fc2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8003fc4:	4b3d      	ldr	r3, [pc, #244]	; (80040bc <startGpioInputRead+0x114>)
 8003fc6:	685c      	ldr	r4, [r3, #4]
 8003fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fcc:	483e      	ldr	r0, [pc, #248]	; (80040c8 <startGpioInputRead+0x120>)
 8003fce:	f004 fee1 	bl	8008d94 <HAL_GPIO_ReadPin>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <startGpioInputRead+0x11c>)
 8003fd8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8003fda:	4b38      	ldr	r3, [pc, #224]	; (80040bc <startGpioInputRead+0x114>)
 8003fdc:	689c      	ldr	r4, [r3, #8]
 8003fde:	2110      	movs	r1, #16
 8003fe0:	483a      	ldr	r0, [pc, #232]	; (80040cc <startGpioInputRead+0x124>)
 8003fe2:	f004 fed7 	bl	8008d94 <HAL_GPIO_ReadPin>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <startGpioInputRead+0x11c>)
 8003fec:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8003fee:	4b33      	ldr	r3, [pc, #204]	; (80040bc <startGpioInputRead+0x114>)
 8003ff0:	68dc      	ldr	r4, [r3, #12]
 8003ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ff6:	4835      	ldr	r0, [pc, #212]	; (80040cc <startGpioInputRead+0x124>)
 8003ff8:	f004 fecc 	bl	8008d94 <HAL_GPIO_ReadPin>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <startGpioInputRead+0x11c>)
 8004002:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004004:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <startGpioInputRead+0x114>)
 8004006:	691c      	ldr	r4, [r3, #16]
 8004008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800400c:	482f      	ldr	r0, [pc, #188]	; (80040cc <startGpioInputRead+0x124>)
 800400e:	f004 fec1 	bl	8008d94 <HAL_GPIO_ReadPin>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <startGpioInputRead+0x11c>)
 8004018:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800401a:	4b28      	ldr	r3, [pc, #160]	; (80040bc <startGpioInputRead+0x114>)
 800401c:	695c      	ldr	r4, [r3, #20]
 800401e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004022:	482a      	ldr	r0, [pc, #168]	; (80040cc <startGpioInputRead+0x124>)
 8004024:	f004 feb6 	bl	8008d94 <HAL_GPIO_ReadPin>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <startGpioInputRead+0x11c>)
 800402e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004030:	4b22      	ldr	r3, [pc, #136]	; (80040bc <startGpioInputRead+0x114>)
 8004032:	699c      	ldr	r4, [r3, #24]
 8004034:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004038:	4824      	ldr	r0, [pc, #144]	; (80040cc <startGpioInputRead+0x124>)
 800403a:	f004 feab 	bl	8008d94 <HAL_GPIO_ReadPin>
 800403e:	4603      	mov	r3, r0
 8004040:	461a      	mov	r2, r3
 8004042:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <startGpioInputRead+0x11c>)
 8004044:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <startGpioInputRead+0x114>)
 8004048:	69dc      	ldr	r4, [r3, #28]
 800404a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800404e:	481f      	ldr	r0, [pc, #124]	; (80040cc <startGpioInputRead+0x124>)
 8004050:	f004 fea0 	bl	8008d94 <HAL_GPIO_ReadPin>
 8004054:	4603      	mov	r3, r0
 8004056:	461a      	mov	r2, r3
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <startGpioInputRead+0x11c>)
 800405a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <startGpioInputRead+0x114>)
 800405e:	6a1c      	ldr	r4, [r3, #32]
 8004060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004064:	4819      	ldr	r0, [pc, #100]	; (80040cc <startGpioInputRead+0x124>)
 8004066:	f004 fe95 	bl	8008d94 <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <startGpioInputRead+0x11c>)
 8004070:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <startGpioInputRead+0x114>)
 8004074:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800407a:	4814      	ldr	r0, [pc, #80]	; (80040cc <startGpioInputRead+0x124>)
 800407c:	f004 fe8a 	bl	8008d94 <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <startGpioInputRead+0x11c>)
 8004086:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <startGpioInputRead+0x114>)
 800408a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800408c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004090:	480e      	ldr	r0, [pc, #56]	; (80040cc <startGpioInputRead+0x124>)
 8004092:	f004 fe7f 	bl	8008d94 <HAL_GPIO_ReadPin>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <startGpioInputRead+0x11c>)
 800409c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <startGpioInputRead+0x114>)
 80040a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80040a2:	2108      	movs	r1, #8
 80040a4:	480a      	ldr	r0, [pc, #40]	; (80040d0 <startGpioInputRead+0x128>)
 80040a6:	f004 fe75 	bl	8008d94 <HAL_GPIO_ReadPin>
 80040aa:	4603      	mov	r3, r0
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <startGpioInputRead+0x11c>)
 80040b0:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 80040b2:	f240 30b6 	movw	r0, #950	; 0x3b6
 80040b6:	f009 fb97 	bl	800d7e8 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 80040ba:	e779      	b.n	8003fb0 <startGpioInputRead+0x8>
 80040bc:	2000002c 	.word	0x2000002c
 80040c0:	40020400 	.word	0x40020400
 80040c4:	20010560 	.word	0x20010560
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020c00 	.word	0x40020c00
 80040d0:	40021000 	.word	0x40021000

080040d4 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 80040e0:	2301      	movs	r3, #1
 80040e2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 80040e4:	7bbb      	ldrb	r3, [r7, #14]
 80040e6:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 80040e8:	2303      	movs	r3, #3
 80040ea:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <startNavigationTask+0x15c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d863      	bhi.n	80041c2 <startNavigationTask+0xee>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <startNavigationTask+0x2c>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004111 	.word	0x08004111
 8004104:	0800413b 	.word	0x0800413b
 8004108:	08004167 	.word	0x08004167
 800410c:	0800418d 	.word	0x0800418d
	{
	case UP:
	{
		if (menu_highlight == MENU_TOP)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d064      	beq.n	80041e0 <startNavigationTask+0x10c>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3b01      	subs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800411c:	4b45      	ldr	r3, [pc, #276]	; (8004234 <startNavigationTask+0x160>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	4313      	orrs	r3, r2
 800412e:	4619      	mov	r1, r3
 8004130:	2300      	movs	r3, #0
 8004132:	2204      	movs	r2, #4
 8004134:	f00b f874 	bl	800f220 <xTaskGenericNotify>
		}
		break;
 8004138:	e052      	b.n	80041e0 <startNavigationTask+0x10c>
	}
	case DWN:
	{
		if (menu_highlight >= menu_Max_Items)
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	7b3b      	ldrb	r3, [r7, #12]
 800413e:	429a      	cmp	r2, r3
 8004140:	d250      	bcs.n	80041e4 <startNavigationTask+0x110>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3301      	adds	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004148:	4b3a      	ldr	r3, [pc, #232]	; (8004234 <startNavigationTask+0x160>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	f043 0202 	orr.w	r2, r3, #2
 8004154:	7bbb      	ldrb	r3, [r7, #14]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	4619      	mov	r1, r3
 800415c:	2300      	movs	r3, #0
 800415e:	2204      	movs	r2, #4
 8004160:	f00b f85e 	bl	800f220 <xTaskGenericNotify>
		}
		break;
 8004164:	e03e      	b.n	80041e4 <startNavigationTask+0x110>
	}
	case BACK:
	{
		menu_run = prev_menu;
 8004166:	7b7b      	ldrb	r3, [r7, #13]
 8004168:	73bb      	strb	r3, [r7, #14]
		menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <startNavigationTask+0x160>)
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	f043 0203 	orr.w	r2, r3, #3
 800417a:	7bbb      	ldrb	r3, [r7, #14]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	4313      	orrs	r3, r2
 8004180:	4619      	mov	r1, r3
 8004182:	2300      	movs	r3, #0
 8004184:	2204      	movs	r2, #4
 8004186:	f00b f84b 	bl	800f220 <xTaskGenericNotify>
		break;
 800418a:	e02c      	b.n	80041e6 <startNavigationTask+0x112>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 800418c:	7bbb      	ldrb	r3, [r7, #14]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <startNavigationTask+0xd0>
			prev_menu = menu_run;		// save currently running menu for BACK button
 8004192:	7bbb      	ldrb	r3, [r7, #14]
 8004194:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	3301      	adds	r3, #1
 800419a:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80041a4:	4b23      	ldr	r3, [pc, #140]	; (8004234 <startNavigationTask+0x160>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	7bbb      	ldrb	r3, [r7, #14]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	4313      	orrs	r3, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	2300      	movs	r3, #0
 80041ba:	2204      	movs	r2, #4
 80041bc:	f00b f830 	bl	800f220 <xTaskGenericNotify>
		break;
 80041c0:	e011      	b.n	80041e6 <startNavigationTask+0x112>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <startNavigationTask+0x160>)
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	f043 0205 	orr.w	r2, r3, #5
 80041ce:	7bbb      	ldrb	r3, [r7, #14]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	4313      	orrs	r3, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	2300      	movs	r3, #0
 80041d8:	2204      	movs	r2, #4
 80041da:	f00b f821 	bl	800f220 <xTaskGenericNotify>
		break;
 80041de:	e002      	b.n	80041e6 <startNavigationTask+0x112>
		break;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <startNavigationTask+0x112>
		break;
 80041e4:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 80041e6:	7bbb      	ldrb	r3, [r7, #14]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d816      	bhi.n	800421c <startNavigationTask+0x148>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <startNavigationTask+0x120>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	0800420b 	.word	0x0800420b
 80041f8:	08004205 	.word	0x08004205
 80041fc:	08004211 	.word	0x08004211
 8004200:	08004217 	.word	0x08004217

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004204:	2305      	movs	r3, #5
 8004206:	733b      	strb	r3, [r7, #12]
		break;
 8004208:	e00b      	b.n	8004222 <startNavigationTask+0x14e>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800420a:	2303      	movs	r3, #3
 800420c:	733b      	strb	r3, [r7, #12]
		break;
 800420e:	e008      	b.n	8004222 <startNavigationTask+0x14e>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004210:	2303      	movs	r3, #3
 8004212:	733b      	strb	r3, [r7, #12]
		break;
 8004214:	e005      	b.n	8004222 <startNavigationTask+0x14e>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004216:	2302      	movs	r3, #2
 8004218:	733b      	strb	r3, [r7, #12]
		break;
 800421a:	e002      	b.n	8004222 <startNavigationTask+0x14e>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 800421c:	2305      	movs	r3, #5
 800421e:	733b      	strb	r3, [r7, #12]
		break;
 8004220:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 8004222:	4b03      	ldr	r3, [pc, #12]	; (8004230 <startNavigationTask+0x15c>)
 8004224:	2205      	movs	r2, #5
 8004226:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004228:	20c8      	movs	r0, #200	; 0xc8
 800422a:	f009 fadd 	bl	800d7e8 <osDelay>
	switch(inputButtonSet)
 800422e:	e75f      	b.n	80040f0 <startNavigationTask+0x1c>
 8004230:	200000bc 	.word	0x200000bc
 8004234:	20024074 	.word	0x20024074

08004238 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800424a:	f003 f921 	bl	8007490 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40001000 	.word	0x40001000

0800425c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004260:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004262:	e7fe      	b.n	8004262 <Error_Handler+0x6>

08004264 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8004268:	2201      	movs	r2, #1
 800426a:	2102      	movs	r1, #2
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <SMLCD_Enable+0x14>)
 800426e:	f004 fda9 	bl	8008dc4 <HAL_GPIO_WritePin>
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40022400 	.word	0x40022400

0800427c <initializeDisplay>:
#include "menu.h"

int previousMenu = 0;
float displayAdcValues[21];

void initializeDisplay(){
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b099      	sub	sp, #100	; 0x64
 8004280:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 8004282:	f7fc f9c9 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 8004286:	4c10      	ldr	r4, [pc, #64]	; (80042c8 <initializeDisplay+0x4c>)
 8004288:	4668      	mov	r0, sp
 800428a:	f104 0310 	add.w	r3, r4, #16
 800428e:	2254      	movs	r2, #84	; 0x54
 8004290:	4619      	mov	r1, r3
 8004292:	f00c f85d 	bl	8010350 <memcpy>
 8004296:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800429a:	f7fc f9dd 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 800429e:	f7ff ffe1 	bl	8004264 <SMLCD_Enable>
	SMLCD_Clear();
 80042a2:	f7fc f9f9 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 80042a6:	2301      	movs	r3, #1
 80042a8:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc fb35 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 80042b2:	f7fc fb5b 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 80042b6:	2254      	movs	r2, #84	; 0x54
 80042b8:	2100      	movs	r1, #0
 80042ba:	4804      	ldr	r0, [pc, #16]	; (80042cc <initializeDisplay+0x50>)
 80042bc:	f00c f853 	bl	8010366 <memset>
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd90      	pop	{r4, r7, pc}
 80042c8:	20010340 	.word	0x20010340
 80042cc:	2002407c 	.word	0x2002407c

080042d0 <drawMainMenu>:

void drawMainMenu(int indicator){
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 80042d8:	4b9a      	ldr	r3, [pc, #616]	; (8004544 <drawMainMenu+0x274>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 80042de:	f7fc fb45 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 80042e2:	4b99      	ldr	r3, [pc, #612]	; (8004548 <drawMainMenu+0x278>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80042e8:	4b98      	ldr	r3, [pc, #608]	; (800454c <drawMainMenu+0x27c>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	4b97      	ldr	r3, [pc, #604]	; (8004550 <drawMainMenu+0x280>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2100      	movs	r1, #0
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fc fd88 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004300:	4b92      	ldr	r3, [pc, #584]	; (800454c <drawMainMenu+0x27c>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	3b03      	subs	r3, #3
 8004306:	b29a      	uxth	r2, r3
 8004308:	4b91      	ldr	r3, [pc, #580]	; (8004550 <drawMainMenu+0x280>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	3b03      	subs	r3, #3
 800430e:	b29b      	uxth	r3, r3
 8004310:	2102      	movs	r1, #2
 8004312:	2002      	movs	r0, #2
 8004314:	f7fc fd7c 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004318:	230a      	movs	r3, #10
 800431a:	60bb      	str	r3, [r7, #8]
	j  = 10;
 800431c:	230a      	movs	r3, #10
 800431e:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	b298      	uxth	r0, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	b299      	uxth	r1, r3
 8004328:	4b8a      	ldr	r3, [pc, #552]	; (8004554 <drawMainMenu+0x284>)
 800432a:	4a8b      	ldr	r2, [pc, #556]	; (8004558 <drawMainMenu+0x288>)
 800432c:	f7fd f8fe 	bl	800152c <LCD_PutStr>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4413      	add	r3, r2
 8004338:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	b298      	uxth	r0, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	b299      	uxth	r1, r3
 8004342:	4b84      	ldr	r3, [pc, #528]	; (8004554 <drawMainMenu+0x284>)
 8004344:	4a85      	ldr	r2, [pc, #532]	; (800455c <drawMainMenu+0x28c>)
 8004346:	f7fd f8f1 	bl	800152c <LCD_PutStr>
 800434a:	4603      	mov	r3, r0
 800434c:	461a      	mov	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
	i+=20;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3314      	adds	r3, #20
 8004358:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	b298      	uxth	r0, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b299      	uxth	r1, r3
 8004362:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <drawMainMenu+0x284>)
 8004364:	4a7e      	ldr	r2, [pc, #504]	; (8004560 <drawMainMenu+0x290>)
 8004366:	f7fd f8e1 	bl	800152c <LCD_PutStr>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	b298      	uxth	r0, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	b299      	uxth	r1, r3
 800437c:	4b75      	ldr	r3, [pc, #468]	; (8004554 <drawMainMenu+0x284>)
 800437e:	4a79      	ldr	r2, [pc, #484]	; (8004564 <drawMainMenu+0x294>)
 8004380:	f7fd f8d4 	bl	800152c <LCD_PutStr>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4413      	add	r3, r2
 800438c:	60bb      	str	r3, [r7, #8]
	i  = 135;
 800438e:	2387      	movs	r3, #135	; 0x87
 8004390:	60bb      	str	r3, [r7, #8]
	j += 14;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	330e      	adds	r3, #14
 8004396:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	b299      	uxth	r1, r3
 800439c:	4b6b      	ldr	r3, [pc, #428]	; (800454c <drawMainMenu+0x27c>)
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	3b5e      	subs	r3, #94	; 0x5e
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3303      	adds	r3, #3
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2002      	movs	r0, #2
 80043ae:	f7fc fd71 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3305      	adds	r3, #5
 80043b8:	b298      	uxth	r0, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3308      	adds	r3, #8
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2102      	movs	r1, #2
 80043c8:	f7fc fd64 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80043cc:	4b5f      	ldr	r3, [pc, #380]	; (800454c <drawMainMenu+0x27c>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	3b61      	subs	r3, #97	; 0x61
 80043d2:	b298      	uxth	r0, r3
 80043d4:	4b5d      	ldr	r3, [pc, #372]	; (800454c <drawMainMenu+0x27c>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	3b5e      	subs	r3, #94	; 0x5e
 80043da:	b29a      	uxth	r2, r3
 80043dc:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <drawMainMenu+0x280>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2102      	movs	r1, #2
 80043e6:	f7fc fd55 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-80;
 80043ea:	4b58      	ldr	r3, [pc, #352]	; (800454c <drawMainMenu+0x27c>)
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	3b50      	subs	r3, #80	; 0x50
 80043f0:	60bb      	str	r3, [r7, #8]
	j  = 3;
 80043f2:	2303      	movs	r3, #3
 80043f4:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	b298      	uxth	r0, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b02      	subs	r3, #2
 8004400:	b299      	uxth	r1, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	b29b      	uxth	r3, r3
 8004406:	330c      	adds	r3, #12
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	b29b      	uxth	r3, r3
 800440e:	3308      	adds	r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	f7fc fd3f 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3314      	adds	r3, #20
 800441a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT1 LED", fnt7x10);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	b298      	uxth	r0, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	b299      	uxth	r1, r3
 8004424:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <drawMainMenu+0x284>)
 8004426:	4a50      	ldr	r2, [pc, #320]	; (8004568 <drawMainMenu+0x298>)
 8004428:	f7fd f880 	bl	800152c <LCD_PutStr>
	j+=22;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3316      	adds	r3, #22
 8004430:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004432:	4b46      	ldr	r3, [pc, #280]	; (800454c <drawMainMenu+0x27c>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	3b50      	subs	r3, #80	; 0x50
 8004438:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	b298      	uxth	r0, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b02      	subs	r3, #2
 8004444:	b299      	uxth	r1, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	b29b      	uxth	r3, r3
 800444a:	330c      	adds	r3, #12
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	b29b      	uxth	r3, r3
 8004452:	3308      	adds	r3, #8
 8004454:	b29b      	uxth	r3, r3
 8004456:	f7fc fd1d 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	3314      	adds	r3, #20
 800445e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT2 LED", fnt7x10);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	b298      	uxth	r0, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	b299      	uxth	r1, r3
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <drawMainMenu+0x284>)
 800446a:	4a40      	ldr	r2, [pc, #256]	; (800456c <drawMainMenu+0x29c>)
 800446c:	f7fd f85e 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <drawMainMenu+0x27c>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	3b50      	subs	r3, #80	; 0x50
 8004476:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3316      	adds	r3, #22
 800447c:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	b298      	uxth	r0, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b02      	subs	r3, #2
 8004488:	b299      	uxth	r1, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	b29b      	uxth	r3, r3
 800448e:	330c      	adds	r3, #12
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	b29b      	uxth	r3, r3
 8004496:	3308      	adds	r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	f7fc fcfb 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3314      	adds	r3, #20
 80044a2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3 LED", fnt7x10);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	b298      	uxth	r0, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	b299      	uxth	r1, r3
 80044ac:	4b29      	ldr	r3, [pc, #164]	; (8004554 <drawMainMenu+0x284>)
 80044ae:	4a30      	ldr	r2, [pc, #192]	; (8004570 <drawMainMenu+0x2a0>)
 80044b0:	f7fd f83c 	bl	800152c <LCD_PutStr>
	j+=22;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3316      	adds	r3, #22
 80044b8:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <drawMainMenu+0x27c>)
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	3b50      	subs	r3, #80	; 0x50
 80044c0:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	b298      	uxth	r0, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b02      	subs	r3, #2
 80044cc:	b299      	uxth	r1, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	330c      	adds	r3, #12
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3308      	adds	r3, #8
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f7fc fcd9 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3314      	adds	r3, #20
 80044e6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4 LED", fnt7x10);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	b298      	uxth	r0, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	b299      	uxth	r1, r3
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <drawMainMenu+0x284>)
 80044f2:	4a20      	ldr	r2, [pc, #128]	; (8004574 <drawMainMenu+0x2a4>)
 80044f4:	f7fd f81a 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <drawMainMenu+0x27c>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	3b50      	subs	r3, #80	; 0x50
 80044fe:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3316      	adds	r3, #22
 8004504:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	b298      	uxth	r0, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b02      	subs	r3, #2
 8004510:	b299      	uxth	r1, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	b29b      	uxth	r3, r3
 8004516:	330c      	adds	r3, #12
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b29b      	uxth	r3, r3
 800451e:	3308      	adds	r3, #8
 8004520:	b29b      	uxth	r3, r3
 8004522:	f7fc fcb7 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3314      	adds	r3, #20
 800452a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5 LED", fnt7x10);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	b298      	uxth	r0, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	b299      	uxth	r1, r3
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <drawMainMenu+0x284>)
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <drawMainMenu+0x2a8>)
 8004538:	f7fc fff8 	bl	800152c <LCD_PutStr>
	j+=22;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3316      	adds	r3, #22
 8004540:	e01c      	b.n	800457c <drawMainMenu+0x2ac>
 8004542:	bf00      	nop
 8004544:	200032d0 	.word	0x200032d0
 8004548:	20010338 	.word	0x20010338
 800454c:	2001033a 	.word	0x2001033a
 8004550:	2001033c 	.word	0x2001033c
 8004554:	080149f0 	.word	0x080149f0
 8004558:	08014448 	.word	0x08014448
 800455c:	08014450 	.word	0x08014450
 8004560:	0801445c 	.word	0x0801445c
 8004564:	08014464 	.word	0x08014464
 8004568:	08014468 	.word	0x08014468
 800456c:	08014474 	.word	0x08014474
 8004570:	08014480 	.word	0x08014480
 8004574:	0801448c 	.word	0x0801448c
 8004578:	08014498 	.word	0x08014498
 800457c:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 800457e:	4b93      	ldr	r3, [pc, #588]	; (80047cc <drawMainMenu+0x4fc>)
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	3b50      	subs	r3, #80	; 0x50
 8004584:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	b298      	uxth	r0, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b02      	subs	r3, #2
 8004590:	b299      	uxth	r1, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	b29b      	uxth	r3, r3
 8004596:	330c      	adds	r3, #12
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	b29b      	uxth	r3, r3
 800459e:	3308      	adds	r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f7fc fc77 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3314      	adds	r3, #20
 80045aa:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6 LED", fnt7x10);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	b298      	uxth	r0, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	b299      	uxth	r1, r3
 80045b4:	4b86      	ldr	r3, [pc, #536]	; (80047d0 <drawMainMenu+0x500>)
 80045b6:	4a87      	ldr	r2, [pc, #540]	; (80047d4 <drawMainMenu+0x504>)
 80045b8:	f7fc ffb8 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 80045bc:	4b83      	ldr	r3, [pc, #524]	; (80047cc <drawMainMenu+0x4fc>)
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	3b50      	subs	r3, #80	; 0x50
 80045c2:	60bb      	str	r3, [r7, #8]
	j  +=22;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3316      	adds	r3, #22
 80045c8:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	b298      	uxth	r0, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b02      	subs	r3, #2
 80045d4:	b299      	uxth	r1, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	330c      	adds	r3, #12
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3308      	adds	r3, #8
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f7fc fc55 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3314      	adds	r3, #20
 80045ee:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7 LED", fnt7x10);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	b298      	uxth	r0, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	b299      	uxth	r1, r3
 80045f8:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <drawMainMenu+0x500>)
 80045fa:	4a77      	ldr	r2, [pc, #476]	; (80047d8 <drawMainMenu+0x508>)
 80045fc:	f7fc ff96 	bl	800152c <LCD_PutStr>
	j+=22;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3316      	adds	r3, #22
 8004604:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004606:	4b71      	ldr	r3, [pc, #452]	; (80047cc <drawMainMenu+0x4fc>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	3b50      	subs	r3, #80	; 0x50
 800460c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	b298      	uxth	r0, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b02      	subs	r3, #2
 8004618:	b299      	uxth	r1, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	b29b      	uxth	r3, r3
 800461e:	330c      	adds	r3, #12
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	b29b      	uxth	r3, r3
 8004626:	3308      	adds	r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	f7fc fc33 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3314      	adds	r3, #20
 8004632:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8 LED", fnt7x10);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	b298      	uxth	r0, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	b299      	uxth	r1, r3
 800463c:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <drawMainMenu+0x500>)
 800463e:	4a67      	ldr	r2, [pc, #412]	; (80047dc <drawMainMenu+0x50c>)
 8004640:	f7fc ff74 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <drawMainMenu+0x4fc>)
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	3b50      	subs	r3, #80	; 0x50
 800464a:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3316      	adds	r3, #22
 8004650:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	b298      	uxth	r0, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b02      	subs	r3, #2
 800465c:	b299      	uxth	r1, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	b29b      	uxth	r3, r3
 8004662:	330c      	adds	r3, #12
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	b29b      	uxth	r3, r3
 800466a:	3308      	adds	r3, #8
 800466c:	b29b      	uxth	r3, r3
 800466e:	f7fc fc11 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3314      	adds	r3, #20
 8004676:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9 LED", fnt7x10);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	b298      	uxth	r0, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	b299      	uxth	r1, r3
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <drawMainMenu+0x500>)
 8004682:	4a57      	ldr	r2, [pc, #348]	; (80047e0 <drawMainMenu+0x510>)
 8004684:	f7fc ff52 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 8004688:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <drawMainMenu+0x514>)
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	3b14      	subs	r3, #20
 800468e:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004690:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <drawMainMenu+0x4fc>)
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	3b50      	subs	r3, #80	; 0x50
 8004696:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	b298      	uxth	r0, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b02      	subs	r3, #2
 80046a2:	b299      	uxth	r1, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	330c      	adds	r3, #12
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3308      	adds	r3, #8
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f7fc fbee 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3314      	adds	r3, #20
 80046bc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	b298      	uxth	r0, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	b299      	uxth	r1, r3
 80046c6:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <drawMainMenu+0x500>)
 80046c8:	4a47      	ldr	r2, [pc, #284]	; (80047e8 <drawMainMenu+0x518>)
 80046ca:	f7fc ff2f 	bl	800152c <LCD_PutStr>

	i=100;
 80046ce:	2364      	movs	r3, #100	; 0x64
 80046d0:	60bb      	str	r3, [r7, #8]
	j=75;
 80046d2:	234b      	movs	r3, #75	; 0x4b
 80046d4:	60fb      	str	r3, [r7, #12]
	i+=20;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	3314      	adds	r3, #20
 80046da:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	b298      	uxth	r0, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	b299      	uxth	r1, r3
 80046e4:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <drawMainMenu+0x500>)
 80046e6:	4a41      	ldr	r2, [pc, #260]	; (80047ec <drawMainMenu+0x51c>)
 80046e8:	f7fc ff20 	bl	800152c <LCD_PutStr>
	j+=15;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	330f      	adds	r3, #15
 80046f0:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b03      	subs	r3, #3
 80046f8:	b298      	uxth	r0, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b02      	subs	r3, #2
 8004700:	b299      	uxth	r1, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	b29b      	uxth	r3, r3
 8004706:	3347      	adds	r3, #71	; 0x47
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	b29b      	uxth	r3, r3
 800470e:	3302      	adds	r3, #2
 8004710:	b29b      	uxth	r3, r3
 8004712:	f7fc fbbf 	bl	8000e94 <LCD_FillRect>

	i=100;
 8004716:	2364      	movs	r3, #100	; 0x64
 8004718:	60bb      	str	r3, [r7, #8]
	j=110;
 800471a:	236e      	movs	r3, #110	; 0x6e
 800471c:	60fb      	str	r3, [r7, #12]
	i+=20;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3314      	adds	r3, #20
 8004722:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	b298      	uxth	r0, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	b299      	uxth	r1, r3
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <drawMainMenu+0x500>)
 800472e:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <drawMainMenu+0x520>)
 8004730:	f7fc fefc 	bl	800152c <LCD_PutStr>
	j+=15;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	330f      	adds	r3, #15
 8004738:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b03      	subs	r3, #3
 8004740:	b298      	uxth	r0, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b02      	subs	r3, #2
 8004748:	b299      	uxth	r1, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	b29b      	uxth	r3, r3
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	b29b      	uxth	r3, r3
 8004756:	3302      	adds	r3, #2
 8004758:	b29b      	uxth	r3, r3
 800475a:	f7fc fb9b 	bl	8000e94 <LCD_FillRect>

	i=100;
 800475e:	2364      	movs	r3, #100	; 0x64
 8004760:	60bb      	str	r3, [r7, #8]
	j=145;
 8004762:	2391      	movs	r3, #145	; 0x91
 8004764:	60fb      	str	r3, [r7, #12]
	i+=20;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3314      	adds	r3, #20
 800476a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	b298      	uxth	r0, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	b299      	uxth	r1, r3
 8004774:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <drawMainMenu+0x500>)
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <drawMainMenu+0x524>)
 8004778:	f7fc fed8 	bl	800152c <LCD_PutStr>
	j+=15;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	330f      	adds	r3, #15
 8004780:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b03      	subs	r3, #3
 8004788:	b298      	uxth	r0, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b02      	subs	r3, #2
 8004790:	b299      	uxth	r1, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	b29b      	uxth	r3, r3
 8004796:	3355      	adds	r3, #85	; 0x55
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	b29b      	uxth	r3, r3
 800479e:	3302      	adds	r3, #2
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f7fc fb77 	bl	8000e94 <LCD_FillRect>
	i=100;
 80047a6:	2364      	movs	r3, #100	; 0x64
 80047a8:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d006      	beq.n	80047be <drawMainMenu+0x4ee>
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d007      	beq.n	80047c4 <drawMainMenu+0x4f4>
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d11f      	bne.n	80047f8 <drawMainMenu+0x528>
	case FIRST:
	{
		j=75;
 80047b8:	234b      	movs	r3, #75	; 0x4b
 80047ba:	60fb      	str	r3, [r7, #12]
		break;
 80047bc:	e01f      	b.n	80047fe <drawMainMenu+0x52e>
	}
	case SECOND:
	{
		j=110;
 80047be:	236e      	movs	r3, #110	; 0x6e
 80047c0:	60fb      	str	r3, [r7, #12]
		break;
 80047c2:	e01c      	b.n	80047fe <drawMainMenu+0x52e>
	}
	case THIRD:
	{
		j=145;
 80047c4:	2391      	movs	r3, #145	; 0x91
 80047c6:	60fb      	str	r3, [r7, #12]
		break;
 80047c8:	e019      	b.n	80047fe <drawMainMenu+0x52e>
 80047ca:	bf00      	nop
 80047cc:	2001033a 	.word	0x2001033a
 80047d0:	080149f0 	.word	0x080149f0
 80047d4:	080144a4 	.word	0x080144a4
 80047d8:	080144b0 	.word	0x080144b0
 80047dc:	080144bc 	.word	0x080144bc
 80047e0:	080144c8 	.word	0x080144c8
 80047e4:	2001033c 	.word	0x2001033c
 80047e8:	080144d4 	.word	0x080144d4
 80047ec:	080144dc 	.word	0x080144dc
 80047f0:	080144e8 	.word	0x080144e8
 80047f4:	080144f0 	.word	0x080144f0
	}
	default:
	{
		j=75;
 80047f8:	234b      	movs	r3, #75	; 0x4b
 80047fa:	60fb      	str	r3, [r7, #12]
		break;
 80047fc:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	b298      	uxth	r0, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	b299      	uxth	r1, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	b29b      	uxth	r3, r3
 800480a:	330c      	adds	r3, #12
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	b29b      	uxth	r3, r3
 8004812:	330a      	adds	r3, #10
 8004814:	b29b      	uxth	r3, r3
 8004816:	f7fc fb3d 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 800481a:	f7fb ff5d 	bl	80006d8 <SMLCD_Flush>
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8004828:	b580      	push	{r7, lr}
 800482a:	b090      	sub	sp, #64	; 0x40
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8004830:	2314      	movs	r3, #20
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
	int inputGpioAlignment=245;
 8004834:	23f5      	movs	r3, #245	; 0xf5
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
	int daughterCardAlignment=240;
 8004838:	23f0      	movs	r3, #240	; 0xf0
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
	int i2cCheck;
	int arrowUp = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
	int arrowDown=1;
 8004840:	2301      	movs	r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
	int arrowSize=3;
 8004844:	2303      	movs	r3, #3
 8004846:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <drawStatusMenu+0x50>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800484e:	f7fc f88d 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <drawStatusMenu+0x54>)
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <drawStatusMenu+0x54>)
 8004858:	785b      	ldrb	r3, [r3, #1]
 800485a:	4013      	ands	r3, r2
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <drawStatusMenu+0x54>)
 8004860:	789b      	ldrb	r3, [r3, #2]
 8004862:	4013      	ands	r3, r2
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01a      	beq.n	80048a0 <drawStatusMenu+0x78>
 		  adcValuePointer = getADCValues();
 800486a:	f7fe fe3b 	bl	80034e4 <getADCValues>
 800486e:	4603      	mov	r3, r0
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
 8004876:	e010      	b.n	800489a <drawStatusMenu+0x72>
 8004878:	200032d0 	.word	0x200032d0
 800487c:	20010ab0 	.word	0x20010ab0
	  		  displayAdcValues[i]=*adcValuePointer;
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	499d      	ldr	r1, [pc, #628]	; (8004afc <drawStatusMenu+0x2d4>)
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	3304      	adds	r3, #4
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
 		  for(i=0;i<20;i++){
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	3301      	adds	r3, #1
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2b13      	cmp	r3, #19
 800489e:	ddef      	ble.n	8004880 <drawStatusMenu+0x58>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 80048a0:	4b97      	ldr	r3, [pc, #604]	; (8004b00 <drawStatusMenu+0x2d8>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80048a6:	4b97      	ldr	r3, [pc, #604]	; (8004b04 <drawStatusMenu+0x2dc>)
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	4b96      	ldr	r3, [pc, #600]	; (8004b08 <drawStatusMenu+0x2e0>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2100      	movs	r1, #0
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7fc faa9 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80048be:	4b91      	ldr	r3, [pc, #580]	; (8004b04 <drawStatusMenu+0x2dc>)
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	3b03      	subs	r3, #3
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	4b90      	ldr	r3, [pc, #576]	; (8004b08 <drawStatusMenu+0x2e0>)
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	3b03      	subs	r3, #3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2102      	movs	r1, #2
 80048d0:	2002      	movs	r0, #2
 80048d2:	f7fc fa9d 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 80048d6:	230a      	movs	r3, #10
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
	j  = 10;
 80048da:	230a      	movs	r3, #10
 80048dc:	617b      	str	r3, [r7, #20]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	b298      	uxth	r0, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	b299      	uxth	r1, r3
 80048e6:	4b89      	ldr	r3, [pc, #548]	; (8004b0c <drawStatusMenu+0x2e4>)
 80048e8:	4a89      	ldr	r2, [pc, #548]	; (8004b10 <drawStatusMenu+0x2e8>)
 80048ea:	f7fc fe1f 	bl	800152c <LCD_PutStr>
 80048ee:	4603      	mov	r3, r0
 80048f0:	461a      	mov	r2, r3
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	4413      	add	r3, r2
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	b298      	uxth	r0, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	b299      	uxth	r1, r3
 8004900:	4b82      	ldr	r3, [pc, #520]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004902:	4a84      	ldr	r2, [pc, #528]	; (8004b14 <drawStatusMenu+0x2ec>)
 8004904:	f7fc fe12 	bl	800152c <LCD_PutStr>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490e:	4413      	add	r3, r2
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
	i+=170;
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	33aa      	adds	r3, #170	; 0xaa
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	b298      	uxth	r0, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	b299      	uxth	r1, r3
 8004920:	4b7a      	ldr	r3, [pc, #488]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004922:	4a7d      	ldr	r2, [pc, #500]	; (8004b18 <drawStatusMenu+0x2f0>)
 8004924:	f7fc fe02 	bl	800152c <LCD_PutStr>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	4413      	add	r3, r2
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	b298      	uxth	r0, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	b299      	uxth	r1, r3
 800493a:	4b74      	ldr	r3, [pc, #464]	; (8004b0c <drawStatusMenu+0x2e4>)
 800493c:	4a77      	ldr	r2, [pc, #476]	; (8004b1c <drawStatusMenu+0x2f4>)
 800493e:	f7fc fdf5 	bl	800152c <LCD_PutStr>
 8004942:	4603      	mov	r3, r0
 8004944:	461a      	mov	r2, r3
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	4413      	add	r3, r2
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
	i  = 135;
 800494c:	2387      	movs	r3, #135	; 0x87
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
	j += 12;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	330c      	adds	r3, #12
 8004954:	617b      	str	r3, [r7, #20]

	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	b299      	uxth	r1, r3
 800495a:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <drawStatusMenu+0x2dc>)
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	3b02      	subs	r3, #2
 8004960:	b29a      	uxth	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	b29b      	uxth	r3, r3
 8004966:	3303      	adds	r3, #3
 8004968:	b29b      	uxth	r3, r3
 800496a:	2002      	movs	r0, #2
 800496c:	f7fc fa92 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b02      	cmp	r3, #2
 8004974:	f000 81e6 	beq.w	8004d44 <drawStatusMenu+0x51c>
 8004978:	2b03      	cmp	r3, #3
 800497a:	f000 8783 	beq.w	8005884 <drawStatusMenu+0x105c>
 800497e:	2b01      	cmp	r3, #1
 8004980:	f041 8096 	bne.w	8005ab0 <drawStatusMenu+0x1288>
	case 1:{
		i=35;
 8004984:	2323      	movs	r3, #35	; 0x23
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004988:	235a      	movs	r3, #90	; 0x5a
 800498a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b02      	subs	r3, #2
 8004992:	b299      	uxth	r1, r3
 8004994:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <drawStatusMenu+0x2dc>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	3b02      	subs	r3, #2
 800499a:	b29a      	uxth	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3302      	adds	r3, #2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2002      	movs	r0, #2
 80049a6:	f7fc fa75 	bl	8000e94 <LCD_FillRect>
		j=75;
 80049aa:	234b      	movs	r3, #75	; 0x4b
 80049ac:	617b      	str	r3, [r7, #20]
		i=62;
 80049ae:	233e      	movs	r3, #62	; 0x3e
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	b298      	uxth	r0, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	b299      	uxth	r1, r3
 80049ba:	4b54      	ldr	r3, [pc, #336]	; (8004b0c <drawStatusMenu+0x2e4>)
 80049bc:	4a54      	ldr	r2, [pc, #336]	; (8004b10 <drawStatusMenu+0x2e8>)
 80049be:	f7fc fdb5 	bl	800152c <LCD_PutStr>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	4413      	add	r3, r2
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
		i+=145;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	3391      	adds	r3, #145	; 0x91
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	b298      	uxth	r0, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	b299      	uxth	r1, r3
 80049da:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <drawStatusMenu+0x2e4>)
 80049dc:	4a50      	ldr	r2, [pc, #320]	; (8004b20 <drawStatusMenu+0x2f8>)
 80049de:	f7fc fda5 	bl	800152c <LCD_PutStr>

		i=10;
 80049e2:	230a      	movs	r3, #10
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 80049e6:	235f      	movs	r3, #95	; 0x5f
 80049e8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault0: ", fnt7x10);
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	b298      	uxth	r0, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	b299      	uxth	r1, r3
 80049f2:	4b46      	ldr	r3, [pc, #280]	; (8004b0c <drawStatusMenu+0x2e4>)
 80049f4:	4a4b      	ldr	r2, [pc, #300]	; (8004b24 <drawStatusMenu+0x2fc>)
 80049f6:	f7fc fd99 	bl	800152c <LCD_PutStr>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	4413      	add	r3, r2
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	b298      	uxth	r0, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	b299      	uxth	r1, r3
 8004a0c:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a0e:	4a46      	ldr	r2, [pc, #280]	; (8004b28 <drawStatusMenu+0x300>)
 8004a10:	f7fc fd8c 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	b298      	uxth	r0, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	b299      	uxth	r1, r3
 8004a20:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a22:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <drawStatusMenu+0x304>)
 8004a24:	f7fc fd82 	bl	800152c <LCD_PutStr>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	4413      	add	r3, r2
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	b298      	uxth	r0, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	b299      	uxth	r1, r3
 8004a3a:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a3c:	4a3a      	ldr	r2, [pc, #232]	; (8004b28 <drawStatusMenu+0x300>)
 8004a3e:	f7fc fd75 	bl	800152c <LCD_PutStr>

		i=10;
 8004a42:	230a      	movs	r3, #10
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	330f      	adds	r3, #15
 8004a4a:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault1: ", fnt7x10);
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	b298      	uxth	r0, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	b299      	uxth	r1, r3
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a56:	4a36      	ldr	r2, [pc, #216]	; (8004b30 <drawStatusMenu+0x308>)
 8004a58:	f7fc fd68 	bl	800152c <LCD_PutStr>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	4413      	add	r3, r2
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	b298      	uxth	r0, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	b299      	uxth	r1, r3
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a70:	4a2d      	ldr	r2, [pc, #180]	; (8004b28 <drawStatusMenu+0x300>)
 8004a72:	f7fc fd5b 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	b298      	uxth	r0, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	b299      	uxth	r1, r3
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a84:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <drawStatusMenu+0x30c>)
 8004a86:	f7fc fd51 	bl	800152c <LCD_PutStr>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	4413      	add	r3, r2
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	b298      	uxth	r0, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	b299      	uxth	r1, r3
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004a9e:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <drawStatusMenu+0x300>)
 8004aa0:	f7fc fd44 	bl	800152c <LCD_PutStr>

		i=10;
 8004aa4:	230a      	movs	r3, #10
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	330f      	adds	r3, #15
 8004aac:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault2: ", fnt7x10);
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	b298      	uxth	r0, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	b299      	uxth	r1, r3
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <drawStatusMenu+0x310>)
 8004aba:	f7fc fd37 	bl	800152c <LCD_PutStr>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	4413      	add	r3, r2
 8004ac6:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aca:	b298      	uxth	r0, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	b299      	uxth	r1, r3
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <drawStatusMenu+0x300>)
 8004ad4:	f7fc fd2a 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	b298      	uxth	r0, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <drawStatusMenu+0x2e4>)
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <drawStatusMenu+0x314>)
 8004ae8:	f7fc fd20 	bl	800152c <LCD_PutStr>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	4413      	add	r3, r2
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i,j,"placeholder", fnt7x10);
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	b298      	uxth	r0, r3
 8004afa:	e021      	b.n	8004b40 <drawStatusMenu+0x318>
 8004afc:	2002407c 	.word	0x2002407c
 8004b00:	20010338 	.word	0x20010338
 8004b04:	2001033a 	.word	0x2001033a
 8004b08:	2001033c 	.word	0x2001033c
 8004b0c:	080149f0 	.word	0x080149f0
 8004b10:	08014448 	.word	0x08014448
 8004b14:	08014450 	.word	0x08014450
 8004b18:	0801445c 	.word	0x0801445c
 8004b1c:	08014464 	.word	0x08014464
 8004b20:	080144fc 	.word	0x080144fc
 8004b24:	0801450c 	.word	0x0801450c
 8004b28:	08014518 	.word	0x08014518
 8004b2c:	08014524 	.word	0x08014524
 8004b30:	0801452c 	.word	0x0801452c
 8004b34:	08014538 	.word	0x08014538
 8004b38:	08014540 	.word	0x08014540
 8004b3c:	0801454c 	.word	0x0801454c
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	b299      	uxth	r1, r3
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004b46:	4a76      	ldr	r2, [pc, #472]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004b48:	f7fc fcf0 	bl	800152c <LCD_PutStr>

		i=10;
 8004b4c:	230a      	movs	r3, #10
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	330f      	adds	r3, #15
 8004b54:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	b299      	uxth	r1, r3
 8004b5e:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004b60:	4a70      	ldr	r2, [pc, #448]	; (8004d24 <drawStatusMenu+0x4fc>)
 8004b62:	f7fc fce3 	bl	800152c <LCD_PutStr>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	4413      	add	r3, r2
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b72:	b298      	uxth	r0, r3
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	b299      	uxth	r1, r3
 8004b78:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004b7a:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004b7c:	f7fc fcd6 	bl	800152c <LCD_PutStr>

		i=10;
 8004b80:	230a      	movs	r3, #10
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	330f      	adds	r3, #15
 8004b88:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	b298      	uxth	r0, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	b299      	uxth	r1, r3
 8004b92:	4b62      	ldr	r3, [pc, #392]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004b94:	4a64      	ldr	r2, [pc, #400]	; (8004d28 <drawStatusMenu+0x500>)
 8004b96:	f7fc fcc9 	bl	800152c <LCD_PutStr>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba0:	4413      	add	r3, r2
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	b298      	uxth	r0, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	b299      	uxth	r1, r3
 8004bac:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004bae:	4a5c      	ldr	r2, [pc, #368]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004bb0:	f7fc fcbc 	bl	800152c <LCD_PutStr>

		i=10;
 8004bb4:	230a      	movs	r3, #10
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	330f      	adds	r3, #15
 8004bbc:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	b298      	uxth	r0, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	b299      	uxth	r1, r3
 8004bc6:	4b55      	ldr	r3, [pc, #340]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004bc8:	4a58      	ldr	r2, [pc, #352]	; (8004d2c <drawStatusMenu+0x504>)
 8004bca:	f7fc fcaf 	bl	800152c <LCD_PutStr>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd4:	4413      	add	r3, r2
 8004bd6:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bda:	b298      	uxth	r0, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	b299      	uxth	r1, r3
 8004be0:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004be2:	4a4f      	ldr	r2, [pc, #316]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004be4:	f7fc fca2 	bl	800152c <LCD_PutStr>

		i=10;
 8004be8:	230a      	movs	r3, #10
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	330f      	adds	r3, #15
 8004bf0:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	b298      	uxth	r0, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	b299      	uxth	r1, r3
 8004bfa:	4b48      	ldr	r3, [pc, #288]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004bfc:	4a4c      	ldr	r2, [pc, #304]	; (8004d30 <drawStatusMenu+0x508>)
 8004bfe:	f7fc fc95 	bl	800152c <LCD_PutStr>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461a      	mov	r2, r3
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	4413      	add	r3, r2
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0e:	b298      	uxth	r0, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	b299      	uxth	r1, r3
 8004c14:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004c16:	4a42      	ldr	r2, [pc, #264]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004c18:	f7fc fc88 	bl	800152c <LCD_PutStr>

		i=10;
 8004c1c:	230a      	movs	r3, #10
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	330f      	adds	r3, #15
 8004c24:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	b298      	uxth	r0, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	b299      	uxth	r1, r3
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004c30:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <drawStatusMenu+0x50c>)
 8004c32:	f7fc fc7b 	bl	800152c <LCD_PutStr>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	4413      	add	r3, r2
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	b298      	uxth	r0, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	b299      	uxth	r1, r3
 8004c48:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004c4a:	4a35      	ldr	r2, [pc, #212]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004c4c:	f7fc fc6e 	bl	800152c <LCD_PutStr>

		i=10;
 8004c50:	230a      	movs	r3, #10
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	330f      	adds	r3, #15
 8004c58:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	b298      	uxth	r0, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	b299      	uxth	r1, r3
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004c64:	4a34      	ldr	r2, [pc, #208]	; (8004d38 <drawStatusMenu+0x510>)
 8004c66:	f7fc fc61 	bl	800152c <LCD_PutStr>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	4413      	add	r3, r2
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	b298      	uxth	r0, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	b299      	uxth	r1, r3
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <drawStatusMenu+0x4f4>)
 8004c7e:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <drawStatusMenu+0x4f8>)
 8004c80:	f7fc fc54 	bl	800152c <LCD_PutStr>


		//horizontal divider
		j=65;
 8004c84:	2341      	movs	r3, #65	; 0x41
 8004c86:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b299      	uxth	r1, r3
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <drawStatusMenu+0x514>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	3b02      	subs	r3, #2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2002      	movs	r0, #2
 8004ca2:	f7fc f8f7 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 8004ca6:	23e6      	movs	r3, #230	; 0xe6
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b03      	subs	r3, #3
 8004cb0:	b298      	uxth	r0, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	b299      	uxth	r1, r3
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3303      	adds	r3, #3
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <drawStatusMenu+0x518>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	3b02      	subs	r3, #2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f7fc f8e5 	bl	8000e94 <LCD_FillRect>

		i=200;
 8004cca:	23c8      	movs	r3, #200	; 0xc8
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 8004cce:	23dc      	movs	r3, #220	; 0xdc
 8004cd0:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	b298      	uxth	r0, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	b299      	uxth	r1, r3
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f7fc fd73 	bl	80017cc <drawUpDownArrow>
		i=180;
 8004ce6:	23b4      	movs	r3, #180	; 0xb4
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	b298      	uxth	r0, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	b299      	uxth	r1, r3
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f7fc fd67 	bl	80017cc <drawUpDownArrow>
		i=220;
 8004cfe:	23dc      	movs	r3, #220	; 0xdc
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	b298      	uxth	r0, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f7fc fd5b 	bl	80017cc <drawUpDownArrow>
		break;
 8004d16:	f000 becb 	b.w	8005ab0 <drawStatusMenu+0x1288>
 8004d1a:	bf00      	nop
 8004d1c:	080149f0 	.word	0x080149f0
 8004d20:	08014518 	.word	0x08014518
 8004d24:	08014558 	.word	0x08014558
 8004d28:	08014564 	.word	0x08014564
 8004d2c:	08014570 	.word	0x08014570
 8004d30:	0801457c 	.word	0x0801457c
 8004d34:	08014588 	.word	0x08014588
 8004d38:	08014594 	.word	0x08014594
 8004d3c:	2001033a 	.word	0x2001033a
 8004d40:	2001033c 	.word	0x2001033c
	}
	case 2:{
		i=35;
 8004d44:	2323      	movs	r3, #35	; 0x23
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
		j=90;
 8004d48:	235a      	movs	r3, #90	; 0x5a
 8004d4a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b02      	subs	r3, #2
 8004d52:	b299      	uxth	r1, r3
 8004d54:	4ba4      	ldr	r3, [pc, #656]	; (8004fe8 <drawStatusMenu+0x7c0>)
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	3b02      	subs	r3, #2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3302      	adds	r3, #2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2002      	movs	r0, #2
 8004d66:	f7fc f895 	bl	8000e94 <LCD_FillRect>
		j=75;
 8004d6a:	234b      	movs	r3, #75	; 0x4b
 8004d6c:	617b      	str	r3, [r7, #20]
		i=42;
 8004d6e:	232a      	movs	r3, #42	; 0x2a
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	b298      	uxth	r0, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	b299      	uxth	r1, r3
 8004d7a:	4b9c      	ldr	r3, [pc, #624]	; (8004fec <drawStatusMenu+0x7c4>)
 8004d7c:	4a9c      	ldr	r2, [pc, #624]	; (8004ff0 <drawStatusMenu+0x7c8>)
 8004d7e:	f7fc fbd5 	bl	800152c <LCD_PutStr>
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	4413      	add	r3, r2
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=125;
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	337d      	adds	r3, #125	; 0x7d
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	b298      	uxth	r0, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	b299      	uxth	r1, r3
 8004d9a:	4b94      	ldr	r3, [pc, #592]	; (8004fec <drawStatusMenu+0x7c4>)
 8004d9c:	4a95      	ldr	r2, [pc, #596]	; (8004ff4 <drawStatusMenu+0x7cc>)
 8004d9e:	f7fc fbc5 	bl	800152c <LCD_PutStr>

		i=10;
 8004da2:	230a      	movs	r3, #10
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
		j=95;
 8004da6:	235f      	movs	r3, #95	; 0x5f
 8004da8:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dac:	b298      	uxth	r0, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	b299      	uxth	r1, r3
 8004db2:	4b8e      	ldr	r3, [pc, #568]	; (8004fec <drawStatusMenu+0x7c4>)
 8004db4:	4a90      	ldr	r2, [pc, #576]	; (8004ff8 <drawStatusMenu+0x7d0>)
 8004db6:	f7fc fbb9 	bl	800152c <LCD_PutStr>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc0:	4413      	add	r3, r2
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8004dc4:	4b8d      	ldr	r3, [pc, #564]	; (8004ffc <drawStatusMenu+0x7d4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a8d      	ldr	r2, [pc, #564]	; (8005000 <drawStatusMenu+0x7d8>)
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	edd3 7a00 	vldr	s15, [r3]
 8004dd2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005004 <drawStatusMenu+0x7dc>
 8004dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dde:	ee17 3a90 	vmov	r3, s15
 8004de2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	b298      	uxth	r0, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	b299      	uxth	r1, r3
 8004dec:	4b7f      	ldr	r3, [pc, #508]	; (8004fec <drawStatusMenu+0x7c4>)
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2303      	movs	r3, #3
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	f7fc fc38 	bl	8001668 <LCD_PutIntF>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	4413      	add	r3, r2
 8004e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e02:	4413      	add	r3, r2
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	b298      	uxth	r0, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	b299      	uxth	r1, r3
 8004e0e:	4b77      	ldr	r3, [pc, #476]	; (8004fec <drawStatusMenu+0x7c4>)
 8004e10:	4a7d      	ldr	r2, [pc, #500]	; (8005008 <drawStatusMenu+0x7e0>)
 8004e12:	f7fc fb8b 	bl	800152c <LCD_PutStr>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	4413      	add	r3, r2
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8004e20:	4b76      	ldr	r3, [pc, #472]	; (8004ffc <drawStatusMenu+0x7d4>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4a76      	ldr	r2, [pc, #472]	; (8005000 <drawStatusMenu+0x7d8>)
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	edd3 7a00 	vldr	s15, [r3]
 8004e2e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005004 <drawStatusMenu+0x7dc>
 8004e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e3a:	ee17 3a90 	vmov	r3, s15
 8004e3e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	b298      	uxth	r0, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	b299      	uxth	r1, r3
 8004e48:	4b68      	ldr	r3, [pc, #416]	; (8004fec <drawStatusMenu+0x7c4>)
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	f7fc fc0a 	bl	8001668 <LCD_PutIntF>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	4413      	add	r3, r2
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	b298      	uxth	r0, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	b299      	uxth	r1, r3
 8004e6a:	4b60      	ldr	r3, [pc, #384]	; (8004fec <drawStatusMenu+0x7c4>)
 8004e6c:	4a67      	ldr	r2, [pc, #412]	; (800500c <drawStatusMenu+0x7e4>)
 8004e6e:	f7fc fb5d 	bl	800152c <LCD_PutStr>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	4413      	add	r3, r2
 8004e7a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	b298      	uxth	r0, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	b299      	uxth	r1, r3
 8004e84:	4b62      	ldr	r3, [pc, #392]	; (8005010 <drawStatusMenu+0x7e8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a62      	ldr	r2, [pc, #392]	; (8005014 <drawStatusMenu+0x7ec>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b57      	ldr	r3, [pc, #348]	; (8004fec <drawStatusMenu+0x7c4>)
 8004e90:	f7fc fb84 	bl	800159c <LCD_PutInt>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	4413      	add	r3, r2
 8004e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e9e:	4413      	add	r3, r2
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea4:	b298      	uxth	r0, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	b299      	uxth	r1, r3
 8004eaa:	4b50      	ldr	r3, [pc, #320]	; (8004fec <drawStatusMenu+0x7c4>)
 8004eac:	4a5a      	ldr	r2, [pc, #360]	; (8005018 <drawStatusMenu+0x7f0>)
 8004eae:	f7fc fb3d 	bl	800152c <LCD_PutStr>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	4413      	add	r3, r2
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	b298      	uxth	r0, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	b299      	uxth	r1, r3
 8004ec4:	4b52      	ldr	r3, [pc, #328]	; (8005010 <drawStatusMenu+0x7e8>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <drawStatusMenu+0x7ec>)
 8004eca:	5cd3      	ldrb	r3, [r2, r3]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <drawStatusMenu+0x7c4>)
 8004ed0:	f7fc fb64 	bl	800159c <LCD_PutInt>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	4413      	add	r3, r2
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34


		i=10;
 8004ede:	230a      	movs	r3, #10
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	330f      	adds	r3, #15
 8004ee6:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	b298      	uxth	r0, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	b299      	uxth	r1, r3
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <drawStatusMenu+0x7c4>)
 8004ef2:	4a4a      	ldr	r2, [pc, #296]	; (800501c <drawStatusMenu+0x7f4>)
 8004ef4:	f7fc fb1a 	bl	800152c <LCD_PutStr>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	4413      	add	r3, r2
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8004f02:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <drawStatusMenu+0x7d4>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4a3e      	ldr	r2, [pc, #248]	; (8005000 <drawStatusMenu+0x7d8>)
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	edd3 7a00 	vldr	s15, [r3]
 8004f10:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005004 <drawStatusMenu+0x7dc>
 8004f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f1c:	ee17 3a90 	vmov	r3, s15
 8004f20:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	b298      	uxth	r0, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	b299      	uxth	r1, r3
 8004f2a:	4b30      	ldr	r3, [pc, #192]	; (8004fec <drawStatusMenu+0x7c4>)
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2303      	movs	r3, #3
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	f7fc fb99 	bl	8001668 <LCD_PutIntF>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	4413      	add	r3, r2
 8004f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f40:	4413      	add	r3, r2
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	b298      	uxth	r0, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	b299      	uxth	r1, r3
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <drawStatusMenu+0x7c4>)
 8004f4e:	4a34      	ldr	r2, [pc, #208]	; (8005020 <drawStatusMenu+0x7f8>)
 8004f50:	f7fc faec 	bl	800152c <LCD_PutStr>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	4413      	add	r3, r2
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <drawStatusMenu+0x7d4>)
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	4a27      	ldr	r2, [pc, #156]	; (8005000 <drawStatusMenu+0x7d8>)
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	edd3 7a00 	vldr	s15, [r3]
 8004f6c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005004 <drawStatusMenu+0x7dc>
 8004f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f78:	ee17 3a90 	vmov	r3, s15
 8004f7c:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	b298      	uxth	r0, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	b299      	uxth	r1, r3
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <drawStatusMenu+0x7c4>)
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	f7fc fb6b 	bl	8001668 <LCD_PutIntF>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	4413      	add	r3, r2
 8004f9a:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa2:	b298      	uxth	r0, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	b299      	uxth	r1, r3
 8004fa8:	4b10      	ldr	r3, [pc, #64]	; (8004fec <drawStatusMenu+0x7c4>)
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <drawStatusMenu+0x7fc>)
 8004fac:	f7fc fabe 	bl	800152c <LCD_PutStr>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	4413      	add	r3, r2
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbc:	b298      	uxth	r0, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	b299      	uxth	r1, r3
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <drawStatusMenu+0x7e8>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4a13      	ldr	r2, [pc, #76]	; (8005014 <drawStatusMenu+0x7ec>)
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <drawStatusMenu+0x7c4>)
 8004fce:	f7fc fae5 	bl	800159c <LCD_PutInt>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	4413      	add	r3, r2
 8004fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fdc:	4413      	add	r3, r2
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	b298      	uxth	r0, r3
 8004fe4:	e020      	b.n	8005028 <drawStatusMenu+0x800>
 8004fe6:	bf00      	nop
 8004fe8:	2001033a 	.word	0x2001033a
 8004fec:	080149f0 	.word	0x080149f0
 8004ff0:	080145a0 	.word	0x080145a0
 8004ff4:	080145b0 	.word	0x080145b0
 8004ff8:	080145c0 	.word	0x080145c0
 8004ffc:	20000118 	.word	0x20000118
 8005000:	2002407c 	.word	0x2002407c
 8005004:	447a0000 	.word	0x447a0000
 8005008:	080145c8 	.word	0x080145c8
 800500c:	080145d0 	.word	0x080145d0
 8005010:	200000e8 	.word	0x200000e8
 8005014:	20010560 	.word	0x20010560
 8005018:	080145d8 	.word	0x080145d8
 800501c:	080145e0 	.word	0x080145e0
 8005020:	080145e8 	.word	0x080145e8
 8005024:	080145f0 	.word	0x080145f0
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	b299      	uxth	r1, r3
 800502c:	4ba3      	ldr	r3, [pc, #652]	; (80052bc <drawStatusMenu+0xa94>)
 800502e:	4aa4      	ldr	r2, [pc, #656]	; (80052c0 <drawStatusMenu+0xa98>)
 8005030:	f7fc fa7c 	bl	800152c <LCD_PutStr>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	4413      	add	r3, r2
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	b298      	uxth	r0, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	b299      	uxth	r1, r3
 8005046:	4b9f      	ldr	r3, [pc, #636]	; (80052c4 <drawStatusMenu+0xa9c>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	4a9f      	ldr	r2, [pc, #636]	; (80052c8 <drawStatusMenu+0xaa0>)
 800504c:	5cd3      	ldrb	r3, [r2, r3]
 800504e:	461a      	mov	r2, r3
 8005050:	4b9a      	ldr	r3, [pc, #616]	; (80052bc <drawStatusMenu+0xa94>)
 8005052:	f7fc faa3 	bl	800159c <LCD_PutInt>
 8005056:	4603      	mov	r3, r0
 8005058:	461a      	mov	r2, r3
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	4413      	add	r3, r2
 800505e:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 8005060:	230a      	movs	r3, #10
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	330f      	adds	r3, #15
 8005068:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	b298      	uxth	r0, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	b299      	uxth	r1, r3
 8005072:	4b92      	ldr	r3, [pc, #584]	; (80052bc <drawStatusMenu+0xa94>)
 8005074:	4a95      	ldr	r2, [pc, #596]	; (80052cc <drawStatusMenu+0xaa4>)
 8005076:	f7fc fa59 	bl	800152c <LCD_PutStr>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	4413      	add	r3, r2
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8005084:	4b92      	ldr	r3, [pc, #584]	; (80052d0 <drawStatusMenu+0xaa8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a92      	ldr	r2, [pc, #584]	; (80052d4 <drawStatusMenu+0xaac>)
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80052d8 <drawStatusMenu+0xab0>
 8005096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800509a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800509e:	ee17 3a90 	vmov	r3, s15
 80050a2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	b298      	uxth	r0, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	b299      	uxth	r1, r3
 80050ac:	4b83      	ldr	r3, [pc, #524]	; (80052bc <drawStatusMenu+0xa94>)
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2303      	movs	r3, #3
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	f7fc fad8 	bl	8001668 <LCD_PutIntF>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	4413      	add	r3, r2
 80050c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c2:	4413      	add	r3, r2
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	b298      	uxth	r0, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	b299      	uxth	r1, r3
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <drawStatusMenu+0xa94>)
 80050d0:	4a82      	ldr	r2, [pc, #520]	; (80052dc <drawStatusMenu+0xab4>)
 80050d2:	f7fc fa2b 	bl	800152c <LCD_PutStr>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461a      	mov	r2, r3
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	4413      	add	r3, r2
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 80050e0:	4b7b      	ldr	r3, [pc, #492]	; (80052d0 <drawStatusMenu+0xaa8>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4a7b      	ldr	r2, [pc, #492]	; (80052d4 <drawStatusMenu+0xaac>)
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	edd3 7a00 	vldr	s15, [r3]
 80050ee:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80052d8 <drawStatusMenu+0xab0>
 80050f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050fa:	ee17 3a90 	vmov	r3, s15
 80050fe:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	b298      	uxth	r0, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	b299      	uxth	r1, r3
 8005108:	4b6c      	ldr	r3, [pc, #432]	; (80052bc <drawStatusMenu+0xa94>)
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	2303      	movs	r3, #3
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f7fc faaa 	bl	8001668 <LCD_PutIntF>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	4413      	add	r3, r2
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	b298      	uxth	r0, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	b299      	uxth	r1, r3
 800512a:	4b64      	ldr	r3, [pc, #400]	; (80052bc <drawStatusMenu+0xa94>)
 800512c:	4a6c      	ldr	r2, [pc, #432]	; (80052e0 <drawStatusMenu+0xab8>)
 800512e:	f7fc f9fd 	bl	800152c <LCD_PutStr>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	4413      	add	r3, r2
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	b298      	uxth	r0, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	b299      	uxth	r1, r3
 8005144:	4b5f      	ldr	r3, [pc, #380]	; (80052c4 <drawStatusMenu+0xa9c>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a5f      	ldr	r2, [pc, #380]	; (80052c8 <drawStatusMenu+0xaa0>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	461a      	mov	r2, r3
 800514e:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <drawStatusMenu+0xa94>)
 8005150:	f7fc fa24 	bl	800159c <LCD_PutInt>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	4413      	add	r3, r2
 800515c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515e:	4413      	add	r3, r2
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	b298      	uxth	r0, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	b299      	uxth	r1, r3
 800516a:	4b54      	ldr	r3, [pc, #336]	; (80052bc <drawStatusMenu+0xa94>)
 800516c:	4a5d      	ldr	r2, [pc, #372]	; (80052e4 <drawStatusMenu+0xabc>)
 800516e:	f7fc f9dd 	bl	800152c <LCD_PutStr>
 8005172:	4603      	mov	r3, r0
 8005174:	461a      	mov	r2, r3
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	4413      	add	r3, r2
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	b298      	uxth	r0, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	b299      	uxth	r1, r3
 8005184:	4b4f      	ldr	r3, [pc, #316]	; (80052c4 <drawStatusMenu+0xa9c>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4a4f      	ldr	r2, [pc, #316]	; (80052c8 <drawStatusMenu+0xaa0>)
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	461a      	mov	r2, r3
 800518e:	4b4b      	ldr	r3, [pc, #300]	; (80052bc <drawStatusMenu+0xa94>)
 8005190:	f7fc fa04 	bl	800159c <LCD_PutInt>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	4413      	add	r3, r2
 800519c:	637b      	str	r3, [r7, #52]	; 0x34

		i=10;
 800519e:	230a      	movs	r3, #10
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	330f      	adds	r3, #15
 80051a6:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	b298      	uxth	r0, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	b299      	uxth	r1, r3
 80051b0:	4b42      	ldr	r3, [pc, #264]	; (80052bc <drawStatusMenu+0xa94>)
 80051b2:	4a4d      	ldr	r2, [pc, #308]	; (80052e8 <drawStatusMenu+0xac0>)
 80051b4:	f7fc f9ba 	bl	800152c <LCD_PutStr>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	4413      	add	r3, r2
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 80051c2:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <drawStatusMenu+0xaa8>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	4a43      	ldr	r2, [pc, #268]	; (80052d4 <drawStatusMenu+0xaac>)
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80052d8 <drawStatusMenu+0xab0>
 80051d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051dc:	ee17 3a90 	vmov	r3, s15
 80051e0:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	b298      	uxth	r0, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	b299      	uxth	r1, r3
 80051ea:	4b34      	ldr	r3, [pc, #208]	; (80052bc <drawStatusMenu+0xa94>)
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	2303      	movs	r3, #3
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	f7fc fa39 	bl	8001668 <LCD_PutIntF>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	4413      	add	r3, r2
 80051fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005200:	4413      	add	r3, r2
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8005204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005206:	b298      	uxth	r0, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	b299      	uxth	r1, r3
 800520c:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <drawStatusMenu+0xa94>)
 800520e:	4a37      	ldr	r2, [pc, #220]	; (80052ec <drawStatusMenu+0xac4>)
 8005210:	f7fc f98c 	bl	800152c <LCD_PutStr>
 8005214:	4603      	mov	r3, r0
 8005216:	461a      	mov	r2, r3
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	4413      	add	r3, r2
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 800521e:	4b2c      	ldr	r3, [pc, #176]	; (80052d0 <drawStatusMenu+0xaa8>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <drawStatusMenu+0xaac>)
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	edd3 7a00 	vldr	s15, [r3]
 800522c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80052d8 <drawStatusMenu+0xab0>
 8005230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005238:	ee17 3a90 	vmov	r3, s15
 800523c:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800523e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005240:	b298      	uxth	r0, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	b299      	uxth	r1, r3
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <drawStatusMenu+0xa94>)
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2303      	movs	r3, #3
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	f7fc fa0b 	bl	8001668 <LCD_PutIntF>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	4413      	add	r3, r2
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	b298      	uxth	r0, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	b299      	uxth	r1, r3
 8005268:	4b14      	ldr	r3, [pc, #80]	; (80052bc <drawStatusMenu+0xa94>)
 800526a:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <drawStatusMenu+0xac8>)
 800526c:	f7fc f95e 	bl	800152c <LCD_PutStr>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	4413      	add	r3, r2
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	b298      	uxth	r0, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	b299      	uxth	r1, r3
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <drawStatusMenu+0xa9c>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4a10      	ldr	r2, [pc, #64]	; (80052c8 <drawStatusMenu+0xaa0>)
 8005288:	5cd3      	ldrb	r3, [r2, r3]
 800528a:	461a      	mov	r2, r3
 800528c:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <drawStatusMenu+0xa94>)
 800528e:	f7fc f985 	bl	800159c <LCD_PutInt>


		i=10;
 8005292:	230a      	movs	r3, #10
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	330f      	adds	r3, #15
 800529a:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	b298      	uxth	r0, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	b299      	uxth	r1, r3
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <drawStatusMenu+0xa94>)
 80052a6:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <drawStatusMenu+0xacc>)
 80052a8:	f7fc f940 	bl	800152c <LCD_PutStr>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	4413      	add	r3, r2
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <drawStatusMenu+0xaa8>)
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	e01d      	b.n	80052f8 <drawStatusMenu+0xad0>
 80052bc:	080149f0 	.word	0x080149f0
 80052c0:	080145f8 	.word	0x080145f8
 80052c4:	200000e8 	.word	0x200000e8
 80052c8:	20010560 	.word	0x20010560
 80052cc:	08014600 	.word	0x08014600
 80052d0:	20000118 	.word	0x20000118
 80052d4:	2002407c 	.word	0x2002407c
 80052d8:	447a0000 	.word	0x447a0000
 80052dc:	08014608 	.word	0x08014608
 80052e0:	08014610 	.word	0x08014610
 80052e4:	08014618 	.word	0x08014618
 80052e8:	08014620 	.word	0x08014620
 80052ec:	08014628 	.word	0x08014628
 80052f0:	08014630 	.word	0x08014630
 80052f4:	08014638 	.word	0x08014638
 80052f8:	4aa7      	ldr	r2, [pc, #668]	; (8005598 <drawStatusMenu+0xd70>)
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	edd3 7a00 	vldr	s15, [r3]
 8005302:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800559c <drawStatusMenu+0xd74>
 8005306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800530e:	ee17 3a90 	vmov	r3, s15
 8005312:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	b298      	uxth	r0, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	b299      	uxth	r1, r3
 800531c:	4ba0      	ldr	r3, [pc, #640]	; (80055a0 <drawStatusMenu+0xd78>)
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	2303      	movs	r3, #3
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	f7fc f9a0 	bl	8001668 <LCD_PutIntF>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	4413      	add	r3, r2
 8005330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005332:	4413      	add	r3, r2
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	b298      	uxth	r0, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	b299      	uxth	r1, r3
 800533e:	4b98      	ldr	r3, [pc, #608]	; (80055a0 <drawStatusMenu+0xd78>)
 8005340:	4a98      	ldr	r2, [pc, #608]	; (80055a4 <drawStatusMenu+0xd7c>)
 8005342:	f7fc f8f3 	bl	800152c <LCD_PutStr>
 8005346:	4603      	mov	r3, r0
 8005348:	461a      	mov	r2, r3
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	4413      	add	r3, r2
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 8005350:	4b95      	ldr	r3, [pc, #596]	; (80055a8 <drawStatusMenu+0xd80>)
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	4a90      	ldr	r2, [pc, #576]	; (8005598 <drawStatusMenu+0xd70>)
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800559c <drawStatusMenu+0xd74>
 8005362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800536a:	ee17 3a90 	vmov	r3, s15
 800536e:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	b298      	uxth	r0, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	b299      	uxth	r1, r3
 8005378:	4b89      	ldr	r3, [pc, #548]	; (80055a0 <drawStatusMenu+0xd78>)
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2303      	movs	r3, #3
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	f7fc f972 	bl	8001668 <LCD_PutIntF>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538a:	4413      	add	r3, r2
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	b298      	uxth	r0, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	b299      	uxth	r1, r3
 800539a:	4b81      	ldr	r3, [pc, #516]	; (80055a0 <drawStatusMenu+0xd78>)
 800539c:	4a83      	ldr	r2, [pc, #524]	; (80055ac <drawStatusMenu+0xd84>)
 800539e:	f7fc f8c5 	bl	800152c <LCD_PutStr>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	4413      	add	r3, r2
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	b298      	uxth	r0, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	b299      	uxth	r1, r3
 80053b4:	4b7e      	ldr	r3, [pc, #504]	; (80055b0 <drawStatusMenu+0xd88>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	4a7e      	ldr	r2, [pc, #504]	; (80055b4 <drawStatusMenu+0xd8c>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	461a      	mov	r2, r3
 80053be:	4b78      	ldr	r3, [pc, #480]	; (80055a0 <drawStatusMenu+0xd78>)
 80053c0:	f7fc f8ec 	bl	800159c <LCD_PutInt>

		i=10;
 80053c4:	230a      	movs	r3, #10
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	330f      	adds	r3, #15
 80053cc:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	b298      	uxth	r0, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	b299      	uxth	r1, r3
 80053d6:	4b72      	ldr	r3, [pc, #456]	; (80055a0 <drawStatusMenu+0xd78>)
 80053d8:	4a77      	ldr	r2, [pc, #476]	; (80055b8 <drawStatusMenu+0xd90>)
 80053da:	f7fc f8a7 	bl	800152c <LCD_PutStr>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	4413      	add	r3, r2
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 80053e8:	4b6f      	ldr	r3, [pc, #444]	; (80055a8 <drawStatusMenu+0xd80>)
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	4a6a      	ldr	r2, [pc, #424]	; (8005598 <drawStatusMenu+0xd70>)
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	edd3 7a00 	vldr	s15, [r3]
 80053f6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800559c <drawStatusMenu+0xd74>
 80053fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005402:	ee17 3a90 	vmov	r3, s15
 8005406:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	b298      	uxth	r0, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	b299      	uxth	r1, r3
 8005410:	4b63      	ldr	r3, [pc, #396]	; (80055a0 <drawStatusMenu+0xd78>)
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2303      	movs	r3, #3
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	f7fc f926 	bl	8001668 <LCD_PutIntF>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	4413      	add	r3, r2
 8005424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005426:	4413      	add	r3, r2
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	b298      	uxth	r0, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	b299      	uxth	r1, r3
 8005432:	4b5b      	ldr	r3, [pc, #364]	; (80055a0 <drawStatusMenu+0xd78>)
 8005434:	4a61      	ldr	r2, [pc, #388]	; (80055bc <drawStatusMenu+0xd94>)
 8005436:	f7fc f879 	bl	800152c <LCD_PutStr>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	4413      	add	r3, r2
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8005444:	4b58      	ldr	r3, [pc, #352]	; (80055a8 <drawStatusMenu+0xd80>)
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4a53      	ldr	r2, [pc, #332]	; (8005598 <drawStatusMenu+0xd70>)
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	edd3 7a00 	vldr	s15, [r3]
 8005452:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800559c <drawStatusMenu+0xd74>
 8005456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800545a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800545e:	ee17 3a90 	vmov	r3, s15
 8005462:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	b298      	uxth	r0, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	b299      	uxth	r1, r3
 800546c:	4b4c      	ldr	r3, [pc, #304]	; (80055a0 <drawStatusMenu+0xd78>)
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2303      	movs	r3, #3
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	f7fc f8f8 	bl	8001668 <LCD_PutIntF>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	4413      	add	r3, r2
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	b298      	uxth	r0, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	b299      	uxth	r1, r3
 800548e:	4b44      	ldr	r3, [pc, #272]	; (80055a0 <drawStatusMenu+0xd78>)
 8005490:	4a4b      	ldr	r2, [pc, #300]	; (80055c0 <drawStatusMenu+0xd98>)
 8005492:	f7fc f84b 	bl	800152c <LCD_PutStr>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	4413      	add	r3, r2
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 80054a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a2:	b298      	uxth	r0, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	b299      	uxth	r1, r3
 80054a8:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <drawStatusMenu+0xd88>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	4a41      	ldr	r2, [pc, #260]	; (80055b4 <drawStatusMenu+0xd8c>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <drawStatusMenu+0xd78>)
 80054b4:	f7fc f872 	bl	800159c <LCD_PutInt>

		i=10;
 80054b8:	230a      	movs	r3, #10
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	330f      	adds	r3, #15
 80054c0:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	b298      	uxth	r0, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	b299      	uxth	r1, r3
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <drawStatusMenu+0xd78>)
 80054cc:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <drawStatusMenu+0xd9c>)
 80054ce:	f7fc f82d 	bl	800152c <LCD_PutStr>
 80054d2:	4603      	mov	r3, r0
 80054d4:	461a      	mov	r2, r3
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d8:	4413      	add	r3, r2
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <drawStatusMenu+0xd80>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <drawStatusMenu+0xd70>)
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	edd3 7a00 	vldr	s15, [r3]
 80054ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800559c <drawStatusMenu+0xd74>
 80054ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f6:	ee17 3a90 	vmov	r3, s15
 80054fa:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	b298      	uxth	r0, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	b299      	uxth	r1, r3
 8005504:	4b26      	ldr	r3, [pc, #152]	; (80055a0 <drawStatusMenu+0xd78>)
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2303      	movs	r3, #3
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	f7fc f8ac 	bl	8001668 <LCD_PutIntF>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	4413      	add	r3, r2
 8005518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551a:	4413      	add	r3, r2
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	b298      	uxth	r0, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	b299      	uxth	r1, r3
 8005526:	4b1e      	ldr	r3, [pc, #120]	; (80055a0 <drawStatusMenu+0xd78>)
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <drawStatusMenu+0xda0>)
 800552a:	f7fb ffff 	bl	800152c <LCD_PutStr>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	4413      	add	r3, r2
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8005538:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <drawStatusMenu+0xd80>)
 800553a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553c:	4a16      	ldr	r2, [pc, #88]	; (8005598 <drawStatusMenu+0xd70>)
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	edd3 7a00 	vldr	s15, [r3]
 8005546:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800559c <drawStatusMenu+0xd74>
 800554a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800554e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005552:	ee17 3a90 	vmov	r3, s15
 8005556:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555a:	b298      	uxth	r0, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	b299      	uxth	r1, r3
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <drawStatusMenu+0xd78>)
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2303      	movs	r3, #3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	f7fc f87e 	bl	8001668 <LCD_PutIntF>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005572:	4413      	add	r3, r2
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	b298      	uxth	r0, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	b299      	uxth	r1, r3
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <drawStatusMenu+0xd78>)
 8005584:	4a11      	ldr	r2, [pc, #68]	; (80055cc <drawStatusMenu+0xda4>)
 8005586:	f7fb ffd1 	bl	800152c <LCD_PutStr>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	4413      	add	r3, r2
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
 8005594:	e01c      	b.n	80055d0 <drawStatusMenu+0xda8>
 8005596:	bf00      	nop
 8005598:	2002407c 	.word	0x2002407c
 800559c:	447a0000 	.word	0x447a0000
 80055a0:	080149f0 	.word	0x080149f0
 80055a4:	08014640 	.word	0x08014640
 80055a8:	20000118 	.word	0x20000118
 80055ac:	08014648 	.word	0x08014648
 80055b0:	200000e8 	.word	0x200000e8
 80055b4:	20010560 	.word	0x20010560
 80055b8:	08014650 	.word	0x08014650
 80055bc:	08014658 	.word	0x08014658
 80055c0:	08014660 	.word	0x08014660
 80055c4:	08014668 	.word	0x08014668
 80055c8:	08014670 	.word	0x08014670
 80055cc:	08014678 	.word	0x08014678
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	b298      	uxth	r0, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	b299      	uxth	r1, r3
 80055d8:	4b9b      	ldr	r3, [pc, #620]	; (8005848 <drawStatusMenu+0x1020>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	4a9b      	ldr	r2, [pc, #620]	; (800584c <drawStatusMenu+0x1024>)
 80055de:	5cd3      	ldrb	r3, [r2, r3]
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b9b      	ldr	r3, [pc, #620]	; (8005850 <drawStatusMenu+0x1028>)
 80055e4:	f7fb ffda 	bl	800159c <LCD_PutInt>

		i=10;
 80055e8:	230a      	movs	r3, #10
 80055ea:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	330f      	adds	r3, #15
 80055f0:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	b298      	uxth	r0, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	b299      	uxth	r1, r3
 80055fa:	4b95      	ldr	r3, [pc, #596]	; (8005850 <drawStatusMenu+0x1028>)
 80055fc:	4a95      	ldr	r2, [pc, #596]	; (8005854 <drawStatusMenu+0x102c>)
 80055fe:	f7fb ff95 	bl	800152c <LCD_PutStr>
 8005602:	4603      	mov	r3, r0
 8005604:	461a      	mov	r2, r3
 8005606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005608:	4413      	add	r3, r2
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 800560c:	4b92      	ldr	r3, [pc, #584]	; (8005858 <drawStatusMenu+0x1030>)
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	4a92      	ldr	r2, [pc, #584]	; (800585c <drawStatusMenu+0x1034>)
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	edd3 7a00 	vldr	s15, [r3]
 800561a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005860 <drawStatusMenu+0x1038>
 800561e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005626:	ee17 3a90 	vmov	r3, s15
 800562a:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	b298      	uxth	r0, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	b299      	uxth	r1, r3
 8005634:	4b86      	ldr	r3, [pc, #536]	; (8005850 <drawStatusMenu+0x1028>)
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	2303      	movs	r3, #3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	f7fc f814 	bl	8001668 <LCD_PutIntF>
 8005640:	4603      	mov	r3, r0
 8005642:	461a      	mov	r2, r3
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	4413      	add	r3, r2
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	b298      	uxth	r0, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	b299      	uxth	r1, r3
 8005656:	4b7e      	ldr	r3, [pc, #504]	; (8005850 <drawStatusMenu+0x1028>)
 8005658:	4a82      	ldr	r2, [pc, #520]	; (8005864 <drawStatusMenu+0x103c>)
 800565a:	f7fb ff67 	bl	800152c <LCD_PutStr>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	4413      	add	r3, r2
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	b298      	uxth	r0, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	b299      	uxth	r1, r3
 8005670:	4b75      	ldr	r3, [pc, #468]	; (8005848 <drawStatusMenu+0x1020>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4a75      	ldr	r2, [pc, #468]	; (800584c <drawStatusMenu+0x1024>)
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	461a      	mov	r2, r3
 800567a:	4b75      	ldr	r3, [pc, #468]	; (8005850 <drawStatusMenu+0x1028>)
 800567c:	f7fb ff8e 	bl	800159c <LCD_PutInt>

		i=10;
 8005680:	230a      	movs	r3, #10
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
		j+=15;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	330f      	adds	r3, #15
 8005688:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	b298      	uxth	r0, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	b299      	uxth	r1, r3
 8005692:	4b6f      	ldr	r3, [pc, #444]	; (8005850 <drawStatusMenu+0x1028>)
 8005694:	4a74      	ldr	r2, [pc, #464]	; (8005868 <drawStatusMenu+0x1040>)
 8005696:	f7fb ff49 	bl	800152c <LCD_PutStr>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	4413      	add	r3, r2
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 80056a4:	4b6c      	ldr	r3, [pc, #432]	; (8005858 <drawStatusMenu+0x1030>)
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	4a6c      	ldr	r2, [pc, #432]	; (800585c <drawStatusMenu+0x1034>)
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	edd3 7a00 	vldr	s15, [r3]
 80056b2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8005860 <drawStatusMenu+0x1038>
 80056b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056be:	ee17 3a90 	vmov	r3, s15
 80056c2:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	b298      	uxth	r0, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	b299      	uxth	r1, r3
 80056cc:	4b60      	ldr	r3, [pc, #384]	; (8005850 <drawStatusMenu+0x1028>)
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2303      	movs	r3, #3
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	f7fb ffc8 	bl	8001668 <LCD_PutIntF>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	4413      	add	r3, r2
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
		i=inputGpioAlignment;
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	b298      	uxth	r0, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	b299      	uxth	r1, r3
 80056ee:	4b58      	ldr	r3, [pc, #352]	; (8005850 <drawStatusMenu+0x1028>)
 80056f0:	4a5e      	ldr	r2, [pc, #376]	; (800586c <drawStatusMenu+0x1044>)
 80056f2:	f7fb ff1b 	bl	800152c <LCD_PutStr>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	4413      	add	r3, r2
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	b298      	uxth	r0, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	b299      	uxth	r1, r3
 8005708:	4b4f      	ldr	r3, [pc, #316]	; (8005848 <drawStatusMenu+0x1020>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	4a4f      	ldr	r2, [pc, #316]	; (800584c <drawStatusMenu+0x1024>)
 800570e:	5cd3      	ldrb	r3, [r2, r3]
 8005710:	461a      	mov	r2, r3
 8005712:	4b4f      	ldr	r3, [pc, #316]	; (8005850 <drawStatusMenu+0x1028>)
 8005714:	f7fb ff42 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8005718:	2341      	movs	r3, #65	; 0x41
 800571a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b299      	uxth	r1, r3
 8005724:	4b52      	ldr	r3, [pc, #328]	; (8005870 <drawStatusMenu+0x1048>)
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	3b02      	subs	r3, #2
 800572a:	b29a      	uxth	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	b29b      	uxth	r3, r3
 8005730:	3301      	adds	r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	2002      	movs	r0, #2
 8005736:	f7fb fbad 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 800573a:	23e6      	movs	r3, #230	; 0xe6
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b03      	subs	r3, #3
 8005744:	b298      	uxth	r0, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	b299      	uxth	r1, r3
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	b29b      	uxth	r3, r3
 800574e:	3303      	adds	r3, #3
 8005750:	b29a      	uxth	r2, r3
 8005752:	4b48      	ldr	r3, [pc, #288]	; (8005874 <drawStatusMenu+0x104c>)
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	3b02      	subs	r3, #2
 8005758:	b29b      	uxth	r3, r3
 800575a:	f7fb fb9b 	bl	8000e94 <LCD_FillRect>

		i=155;
 800575e:	239b      	movs	r3, #155	; 0x9b
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
		j=35;
 8005762:	2323      	movs	r3, #35	; 0x23
 8005764:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	b298      	uxth	r0, r3
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	b299      	uxth	r1, r3
 800576e:	4b38      	ldr	r3, [pc, #224]	; (8005850 <drawStatusMenu+0x1028>)
 8005770:	4a41      	ldr	r2, [pc, #260]	; (8005878 <drawStatusMenu+0x1050>)
 8005772:	f7fb fedb 	bl	800152c <LCD_PutStr>
		i=155;
 8005776:	239b      	movs	r3, #155	; 0x9b
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
		j=50;
 800577a:	2332      	movs	r3, #50	; 0x32
 800577c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	b298      	uxth	r0, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	b299      	uxth	r1, r3
 8005786:	4b32      	ldr	r3, [pc, #200]	; (8005850 <drawStatusMenu+0x1028>)
 8005788:	4a3c      	ldr	r2, [pc, #240]	; (800587c <drawStatusMenu+0x1054>)
 800578a:	f7fb fecf 	bl	800152c <LCD_PutStr>
 800578e:	4603      	mov	r3, r0
 8005790:	3308      	adds	r3, #8
 8005792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005794:	4413      	add	r3, r2
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
		j=28;
 8005798:	231c      	movs	r3, #28
 800579a:	617b      	str	r3, [r7, #20]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	b298      	uxth	r0, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	b299      	uxth	r1, r3
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <drawStatusMenu+0x1058>)
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2302      	movs	r3, #2
 80057aa:	f640 729f 	movw	r2, #3999	; 0xf9f
 80057ae:	f7fb ff5b 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 80057b2:	23c8      	movs	r3, #200	; 0xc8
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
		j=220;
 80057b6:	23dc      	movs	r3, #220	; 0xdc
 80057b8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	b298      	uxth	r0, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	b299      	uxth	r1, r3
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f7fb ffff 	bl	80017cc <drawUpDownArrow>
		j=15;
 80057ce:	230f      	movs	r3, #15
 80057d0:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	b298      	uxth	r0, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	b299      	uxth	r1, r3
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f7fb fff3 	bl	80017cc <drawUpDownArrow>
		i=180;
 80057e6:	23b4      	movs	r3, #180	; 0xb4
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	b298      	uxth	r0, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	b299      	uxth	r1, r3
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f7fb ffe7 	bl	80017cc <drawUpDownArrow>
		j=220;
 80057fe:	23dc      	movs	r3, #220	; 0xdc
 8005800:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	b298      	uxth	r0, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	b299      	uxth	r1, r3
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	b29a      	uxth	r2, r3
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f7fb ffdb 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005816:	23dc      	movs	r3, #220	; 0xdc
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	b298      	uxth	r0, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	b299      	uxth	r1, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	b29a      	uxth	r2, r3
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f7fb ffcf 	bl	80017cc <drawUpDownArrow>
		j=15;
 800582e:	230f      	movs	r3, #15
 8005830:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	b298      	uxth	r0, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	b299      	uxth	r1, r3
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	b29a      	uxth	r2, r3
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	b29b      	uxth	r3, r3
 8005842:	f7fb ffc3 	bl	80017cc <drawUpDownArrow>
		break;
 8005846:	e133      	b.n	8005ab0 <drawStatusMenu+0x1288>
 8005848:	200000e8 	.word	0x200000e8
 800584c:	20010560 	.word	0x20010560
 8005850:	080149f0 	.word	0x080149f0
 8005854:	08014680 	.word	0x08014680
 8005858:	20000118 	.word	0x20000118
 800585c:	2002407c 	.word	0x2002407c
 8005860:	447a0000 	.word	0x447a0000
 8005864:	08014688 	.word	0x08014688
 8005868:	08014690 	.word	0x08014690
 800586c:	08014698 	.word	0x08014698
 8005870:	2001033a 	.word	0x2001033a
 8005874:	2001033c 	.word	0x2001033c
 8005878:	080146a0 	.word	0x080146a0
 800587c:	080146b0 	.word	0x080146b0
 8005880:	08014db0 	.word	0x08014db0
	}
	case 3:{
		i=35;
 8005884:	2323      	movs	r3, #35	; 0x23
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
		j=75;
 8005888:	234b      	movs	r3, #75	; 0x4b
 800588a:	617b      	str	r3, [r7, #20]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b02      	subs	r3, #2
 8005892:	b299      	uxth	r1, r3
 8005894:	4b89      	ldr	r3, [pc, #548]	; (8005abc <drawStatusMenu+0x1294>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	3b02      	subs	r3, #2
 800589a:	b29a      	uxth	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3302      	adds	r3, #2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2002      	movs	r0, #2
 80058a6:	f7fb faf5 	bl	8000e94 <LCD_FillRect>
		j=55;
 80058aa:	2337      	movs	r3, #55	; 0x37
 80058ac:	617b      	str	r3, [r7, #20]
		i=150;
 80058ae:	2396      	movs	r3, #150	; 0x96
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	b298      	uxth	r0, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	b299      	uxth	r1, r3
 80058ba:	4b81      	ldr	r3, [pc, #516]	; (8005ac0 <drawStatusMenu+0x1298>)
 80058bc:	4a81      	ldr	r2, [pc, #516]	; (8005ac4 <drawStatusMenu+0x129c>)
 80058be:	f7fb fe35 	bl	800152c <LCD_PutStr>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	4413      	add	r3, r2
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34

		i=40;
 80058cc:	2328      	movs	r3, #40	; 0x28
 80058ce:	637b      	str	r3, [r7, #52]	; 0x34
		j=85;
 80058d0:	2355      	movs	r3, #85	; 0x55
 80058d2:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	b298      	uxth	r0, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	b299      	uxth	r1, r3
 80058dc:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <drawStatusMenu+0x1298>)
 80058de:	4a7a      	ldr	r2, [pc, #488]	; (8005ac8 <drawStatusMenu+0x12a0>)
 80058e0:	f7fb fe24 	bl	800152c <LCD_PutStr>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	4413      	add	r3, r2
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	b298      	uxth	r0, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	b299      	uxth	r1, r3
 80058f6:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <drawStatusMenu+0x1298>)
 80058f8:	4a74      	ldr	r2, [pc, #464]	; (8005acc <drawStatusMenu+0x12a4>)
 80058fa:	f7fb fe17 	bl	800152c <LCD_PutStr>

		i=40;
 80058fe:	2328      	movs	r3, #40	; 0x28
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	3319      	adds	r3, #25
 8005906:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	b298      	uxth	r0, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	b299      	uxth	r1, r3
 8005910:	4b6b      	ldr	r3, [pc, #428]	; (8005ac0 <drawStatusMenu+0x1298>)
 8005912:	4a6f      	ldr	r2, [pc, #444]	; (8005ad0 <drawStatusMenu+0x12a8>)
 8005914:	f7fb fe0a 	bl	800152c <LCD_PutStr>
 8005918:	4603      	mov	r3, r0
 800591a:	461a      	mov	r2, r3
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	4413      	add	r3, r2
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
		//ping the LED Driver
		i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8005922:	4b6c      	ldr	r3, [pc, #432]	; (8005ad4 <drawStatusMenu+0x12ac>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <drawStatusMenu+0x12ac>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	2301      	movs	r3, #1
 8005930:	2200      	movs	r2, #0
 8005932:	21f0      	movs	r1, #240	; 0xf0
 8005934:	f7fd fba2 	bl	800307c <writeI2CRegister>
 8005938:	6138      	str	r0, [r7, #16]

		if(i2cCheck){
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <drawStatusMenu+0x112a>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	b298      	uxth	r0, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	b299      	uxth	r1, r3
 8005948:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <drawStatusMenu+0x1298>)
 800594a:	4a63      	ldr	r2, [pc, #396]	; (8005ad8 <drawStatusMenu+0x12b0>)
 800594c:	f7fb fdee 	bl	800152c <LCD_PutStr>
 8005950:	e007      	b.n	8005962 <drawStatusMenu+0x113a>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	b298      	uxth	r0, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	b299      	uxth	r1, r3
 800595a:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <drawStatusMenu+0x1298>)
 800595c:	4a5f      	ldr	r2, [pc, #380]	; (8005adc <drawStatusMenu+0x12b4>)
 800595e:	f7fb fde5 	bl	800152c <LCD_PutStr>
		}

		i=40;
 8005962:	2328      	movs	r3, #40	; 0x28
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3319      	adds	r3, #25
 800596a:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	b298      	uxth	r0, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	b299      	uxth	r1, r3
 8005974:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <drawStatusMenu+0x1298>)
 8005976:	4a5a      	ldr	r2, [pc, #360]	; (8005ae0 <drawStatusMenu+0x12b8>)
 8005978:	f7fb fdd8 	bl	800152c <LCD_PutStr>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	4413      	add	r3, r2
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	b298      	uxth	r0, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	b299      	uxth	r1, r3
 800598e:	4b4c      	ldr	r3, [pc, #304]	; (8005ac0 <drawStatusMenu+0x1298>)
 8005990:	4a54      	ldr	r2, [pc, #336]	; (8005ae4 <drawStatusMenu+0x12bc>)
 8005992:	f7fb fdcb 	bl	800152c <LCD_PutStr>

		i=40;
 8005996:	2328      	movs	r3, #40	; 0x28
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3319      	adds	r3, #25
 800599e:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	b298      	uxth	r0, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	b299      	uxth	r1, r3
 80059a8:	4b45      	ldr	r3, [pc, #276]	; (8005ac0 <drawStatusMenu+0x1298>)
 80059aa:	4a4f      	ldr	r2, [pc, #316]	; (8005ae8 <drawStatusMenu+0x12c0>)
 80059ac:	f7fb fdbe 	bl	800152c <LCD_PutStr>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	4413      	add	r3, r2
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0xf0, 0x00,1,socI2cVoltageMux.i2cBank);
 80059ba:	4b4c      	ldr	r3, [pc, #304]	; (8005aec <drawStatusMenu+0x12c4>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <drawStatusMenu+0x12c4>)
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2301      	movs	r3, #1
 80059c8:	2200      	movs	r2, #0
 80059ca:	21f0      	movs	r1, #240	; 0xf0
 80059cc:	f7fd fb56 	bl	800307c <writeI2CRegister>
 80059d0:	6138      	str	r0, [r7, #16]
		if(i2cCheck){
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <drawStatusMenu+0x11c2>
			LCD_PutStr(i, j, "Present", fnt7x10);
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	b298      	uxth	r0, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	b299      	uxth	r1, r3
 80059e0:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <drawStatusMenu+0x1298>)
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <drawStatusMenu+0x12b0>)
 80059e4:	f7fb fda2 	bl	800152c <LCD_PutStr>
 80059e8:	e007      	b.n	80059fa <drawStatusMenu+0x11d2>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 80059ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ec:	b298      	uxth	r0, r3
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	b299      	uxth	r1, r3
 80059f2:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <drawStatusMenu+0x1298>)
 80059f4:	4a3e      	ldr	r2, [pc, #248]	; (8005af0 <drawStatusMenu+0x12c8>)
 80059f6:	f7fb fd99 	bl	800152c <LCD_PutStr>
		}


		i=40;
 80059fa:	2328      	movs	r3, #40	; 0x28
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
		j+=25;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3319      	adds	r3, #25
 8005a02:	617b      	str	r3, [r7, #20]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	b298      	uxth	r0, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	b299      	uxth	r1, r3
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <drawStatusMenu+0x1298>)
 8005a0e:	4a39      	ldr	r2, [pc, #228]	; (8005af4 <drawStatusMenu+0x12cc>)
 8005a10:	f7fb fd8c 	bl	800152c <LCD_PutStr>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	4413      	add	r3, r2
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8005a1e:	f001 fd4b 	bl	80074b8 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <drawStatusMenu+0x12d0>)
 8005a26:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	b298      	uxth	r0, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	b299      	uxth	r1, r3
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <drawStatusMenu+0x1298>)
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f7fb fdaf 	bl	800159c <LCD_PutInt>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	4413      	add	r3, r2
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4a:	b298      	uxth	r0, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	b299      	uxth	r1, r3
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <drawStatusMenu+0x1298>)
 8005a52:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <drawStatusMenu+0x12d4>)
 8005a54:	f7fb fd6a 	bl	800152c <LCD_PutStr>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5e:	4413      	add	r3, r2
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34

		i=200;
 8005a62:	23c8      	movs	r3, #200	; 0xc8
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
		j=15;
 8005a66:	230f      	movs	r3, #15
 8005a68:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	b298      	uxth	r0, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	b299      	uxth	r1, r3
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f7fb fea7 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005a7e:	23b4      	movs	r3, #180	; 0xb4
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	b298      	uxth	r0, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	b299      	uxth	r1, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f7fb fe9b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005a96:	23dc      	movs	r3, #220	; 0xdc
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	b298      	uxth	r0, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	b299      	uxth	r1, r3
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f7fb fe8f 	bl	80017cc <drawUpDownArrow>

		break;
 8005aae:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005ab0:	f7fa fe12 	bl	80006d8 <SMLCD_Flush>



}
 8005ab4:	bf00      	nop
 8005ab6:	3738      	adds	r7, #56	; 0x38
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	2001033a 	.word	0x2001033a
 8005ac0:	080149f0 	.word	0x080149f0
 8005ac4:	080146c0 	.word	0x080146c0
 8005ac8:	080146d0 	.word	0x080146d0
 8005acc:	080146d8 	.word	0x080146d8
 8005ad0:	080146f8 	.word	0x080146f8
 8005ad4:	200000c0 	.word	0x200000c0
 8005ad8:	08014708 	.word	0x08014708
 8005adc:	08014710 	.word	0x08014710
 8005ae0:	08014720 	.word	0x08014720
 8005ae4:	0801472c 	.word	0x0801472c
 8005ae8:	08014744 	.word	0x08014744
 8005aec:	200000d0 	.word	0x200000d0
 8005af0:	08014750 	.word	0x08014750
 8005af4:	0801475c 	.word	0x0801475c
 8005af8:	10624dd3 	.word	0x10624dd3
 8005afc:	08014770 	.word	0x08014770

08005b00 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
	int i,j;
	float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005b08:	2314      	movs	r3, #20
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
	int indentAlignment=50;
 8005b0c:	2332      	movs	r3, #50	; 0x32
 8005b0e:	623b      	str	r3, [r7, #32]
	int arrowUp = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61fb      	str	r3, [r7, #28]
	int arrowDown=1;
 8005b14:	2301      	movs	r3, #1
 8005b16:	61bb      	str	r3, [r7, #24]
	int arrowSize=3;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	617b      	str	r3, [r7, #20]
	int otherBoardAlignment = 220;
 8005b1c:	23dc      	movs	r3, #220	; 0xdc
 8005b1e:	613b      	str	r3, [r7, #16]
	previousMenu=0;
 8005b20:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <drawSystemInfoMenu+0x150>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005b26:	f7fa ff21 	bl	800096c <LCD_Clear>
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	; (8005c54 <drawSystemInfoMenu+0x154>)
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	4b49      	ldr	r3, [pc, #292]	; (8005c54 <drawSystemInfoMenu+0x154>)
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	4013      	ands	r3, r2
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <drawSystemInfoMenu+0x154>)
 8005b38:	789b      	ldrb	r3, [r3, #2]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <drawSystemInfoMenu+0x70>
 		  adcValuePointer = getADCValues();
 8005b42:	f7fd fccf 	bl	80034e4 <getADCValues>
 8005b46:	4603      	mov	r3, r0
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	e00c      	b.n	8005b6a <drawSystemInfoMenu+0x6a>
	  		  displayAdcValues[i]=*adcValuePointer;
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4940      	ldr	r1, [pc, #256]	; (8005c58 <drawSystemInfoMenu+0x158>)
 8005b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	3304      	adds	r3, #4
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
 		  for(i=0;i<20;i++){
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	3301      	adds	r3, #1
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b13      	cmp	r3, #19
 8005b6e:	ddef      	ble.n	8005b50 <drawSystemInfoMenu+0x50>
 		  }
	 }
	LCD_PixelMode = LCD_PSET;
 8005b70:	4b3a      	ldr	r3, [pc, #232]	; (8005c5c <drawSystemInfoMenu+0x15c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005b76:	4b3a      	ldr	r3, [pc, #232]	; (8005c60 <drawSystemInfoMenu+0x160>)
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <drawSystemInfoMenu+0x164>)
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2100      	movs	r1, #0
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f7fb f941 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8005b8e:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <drawSystemInfoMenu+0x160>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	3b03      	subs	r3, #3
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	4b33      	ldr	r3, [pc, #204]	; (8005c64 <drawSystemInfoMenu+0x164>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	3b03      	subs	r3, #3
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	2002      	movs	r0, #2
 8005ba2:	f7fb f935 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	j  = 10;
 8005baa:	230a      	movs	r3, #10
 8005bac:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	b298      	uxth	r0, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	b299      	uxth	r1, r3
 8005bb6:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <drawSystemInfoMenu+0x168>)
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <drawSystemInfoMenu+0x16c>)
 8005bba:	f7fb fcb7 	bl	800152c <LCD_PutStr>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	4413      	add	r3, r2
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	b298      	uxth	r0, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	4b25      	ldr	r3, [pc, #148]	; (8005c68 <drawSystemInfoMenu+0x168>)
 8005bd2:	4a27      	ldr	r2, [pc, #156]	; (8005c70 <drawSystemInfoMenu+0x170>)
 8005bd4:	f7fb fcaa 	bl	800152c <LCD_PutStr>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	4413      	add	r3, r2
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	i+=170;
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	33aa      	adds	r3, #170	; 0xaa
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	b298      	uxth	r0, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	b299      	uxth	r1, r3
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <drawSystemInfoMenu+0x168>)
 8005bf2:	4a20      	ldr	r2, [pc, #128]	; (8005c74 <drawSystemInfoMenu+0x174>)
 8005bf4:	f7fb fc9a 	bl	800152c <LCD_PutStr>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	4413      	add	r3, r2
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	i += LCD_PutStr(i, j, "QED", fnt7x10);
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	b298      	uxth	r0, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	b299      	uxth	r1, r3
 8005c0a:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <drawSystemInfoMenu+0x168>)
 8005c0c:	4a1a      	ldr	r2, [pc, #104]	; (8005c78 <drawSystemInfoMenu+0x178>)
 8005c0e:	f7fb fc8d 	bl	800152c <LCD_PutStr>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	4413      	add	r3, r2
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	i  = 135;
 8005c1c:	2387      	movs	r3, #135	; 0x87
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	j += 12;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	330c      	adds	r3, #12
 8005c24:	60fb      	str	r3, [r7, #12]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	b299      	uxth	r1, r3
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <drawSystemInfoMenu+0x160>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	3b02      	subs	r3, #2
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3303      	adds	r3, #3
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2002      	movs	r0, #2
 8005c3c:	f7fb f92a 	bl	8000e94 <LCD_FillRect>
	switch(indicator){
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d01a      	beq.n	8005c7c <drawSystemInfoMenu+0x17c>
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	f000 812e 	beq.w	8005ea8 <drawSystemInfoMenu+0x3a8>
 8005c4c:	e261      	b.n	8006112 <drawSystemInfoMenu+0x612>
 8005c4e:	bf00      	nop
 8005c50:	200032d0 	.word	0x200032d0
 8005c54:	20010ab0 	.word	0x20010ab0
 8005c58:	2002407c 	.word	0x2002407c
 8005c5c:	20010338 	.word	0x20010338
 8005c60:	2001033a 	.word	0x2001033a
 8005c64:	2001033c 	.word	0x2001033c
 8005c68:	080149f0 	.word	0x080149f0
 8005c6c:	08014448 	.word	0x08014448
 8005c70:	08014450 	.word	0x08014450
 8005c74:	0801445c 	.word	0x0801445c
 8005c78:	08014464 	.word	0x08014464
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005c7c:	232d      	movs	r3, #45	; 0x2d
 8005c7e:	60fb      	str	r3, [r7, #12]
		i=42;
 8005c80:	232a      	movs	r3, #42	; 0x2a
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	b298      	uxth	r0, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	b299      	uxth	r1, r3
 8005c8c:	4b77      	ldr	r3, [pc, #476]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005c8e:	4a78      	ldr	r2, [pc, #480]	; (8005e70 <drawSystemInfoMenu+0x370>)
 8005c90:	f7fb fc4c 	bl	800152c <LCD_PutStr>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	4413      	add	r3, r2
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	b298      	uxth	r0, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	b299      	uxth	r1, r3
 8005ca6:	4b71      	ldr	r3, [pc, #452]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005ca8:	4a72      	ldr	r2, [pc, #456]	; (8005e74 <drawSystemInfoMenu+0x374>)
 8005caa:	f7fb fc3f 	bl	800152c <LCD_PutStr>

		j+=15;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	330f      	adds	r3, #15
 8005cb2:	60fb      	str	r3, [r7, #12]
		i=42;
 8005cb4:	232a      	movs	r3, #42	; 0x2a
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	b298      	uxth	r0, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005cc2:	4a6d      	ldr	r2, [pc, #436]	; (8005e78 <drawSystemInfoMenu+0x378>)
 8005cc4:	f7fb fc32 	bl	800152c <LCD_PutStr>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	4413      	add	r3, r2
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	b298      	uxth	r0, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	b299      	uxth	r1, r3
 8005cda:	4b64      	ldr	r3, [pc, #400]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005cdc:	4a67      	ldr	r2, [pc, #412]	; (8005e7c <drawSystemInfoMenu+0x37c>)
 8005cde:	f7fb fc25 	bl	800152c <LCD_PutStr>

		j+=30;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	331e      	adds	r3, #30
 8005ce6:	60fb      	str	r3, [r7, #12]
		i=10;
 8005ce8:	230a      	movs	r3, #10
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	b298      	uxth	r0, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005cf6:	4a62      	ldr	r2, [pc, #392]	; (8005e80 <drawSystemInfoMenu+0x380>)
 8005cf8:	f7fb fc18 	bl	800152c <LCD_PutStr>

		j+=15;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	330f      	adds	r3, #15
 8005d00:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	b298      	uxth	r0, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	b299      	uxth	r1, r3
 8005d0e:	4b57      	ldr	r3, [pc, #348]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005d10:	4a58      	ldr	r2, [pc, #352]	; (8005e74 <drawSystemInfoMenu+0x374>)
 8005d12:	f7fb fc0b 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	330f      	adds	r3, #15
 8005d1a:	60fb      	str	r3, [r7, #12]
		i=10;
 8005d1c:	230a      	movs	r3, #10
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	b298      	uxth	r0, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	b299      	uxth	r1, r3
 8005d28:	4b50      	ldr	r3, [pc, #320]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005d2a:	4a56      	ldr	r2, [pc, #344]	; (8005e84 <drawSystemInfoMenu+0x384>)
 8005d2c:	f7fb fbfe 	bl	800152c <LCD_PutStr>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	4413      	add	r3, r2
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
		i=otherBoardAlignment;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	b298      	uxth	r0, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	b299      	uxth	r1, r3
 8005d46:	4b49      	ldr	r3, [pc, #292]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005d48:	4a4f      	ldr	r2, [pc, #316]	; (8005e88 <drawSystemInfoMenu+0x388>)
 8005d4a:	f7fb fbef 	bl	800152c <LCD_PutStr>

		j+=15;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	330f      	adds	r3, #15
 8005d52:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	b298      	uxth	r0, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	b299      	uxth	r1, r3
 8005d60:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005d62:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <drawSystemInfoMenu+0x38c>)
 8005d64:	f7fb fbe2 	bl	800152c <LCD_PutStr>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	4413      	add	r3, r2
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Trident Fab A", fnt7x10);
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	b298      	uxth	r0, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	b299      	uxth	r1, r3
 8005d7a:	4b3c      	ldr	r3, [pc, #240]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005d7c:	4a44      	ldr	r2, [pc, #272]	; (8005e90 <drawSystemInfoMenu+0x390>)
 8005d7e:	f7fb fbd5 	bl	800152c <LCD_PutStr>
		i=otherBoardAlignment+indentAlignment;
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	4413      	add	r3, r2
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	b298      	uxth	r0, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	b299      	uxth	r1, r3
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005d94:	4a3f      	ldr	r2, [pc, #252]	; (8005e94 <drawSystemInfoMenu+0x394>)
 8005d96:	f7fb fbc9 	bl	800152c <LCD_PutStr>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	4413      	add	r3, r2
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Not Here", fnt7x10);
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	b298      	uxth	r0, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	b299      	uxth	r1, r3
 8005dac:	4b2f      	ldr	r3, [pc, #188]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005dae:	4a3a      	ldr	r2, [pc, #232]	; (8005e98 <drawSystemInfoMenu+0x398>)
 8005db0:	f7fb fbbc 	bl	800152c <LCD_PutStr>

		j+=15;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	330f      	adds	r3, #15
 8005db8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	b298      	uxth	r0, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	b299      	uxth	r1, r3
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005dc8:	4a34      	ldr	r2, [pc, #208]	; (8005e9c <drawSystemInfoMenu+0x39c>)
 8005dca:	f7fb fbaf 	bl	800152c <LCD_PutStr>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	4413      	add	r3, r2
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	b298      	uxth	r0, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	b299      	uxth	r1, r3
 8005de0:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005de2:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <drawSystemInfoMenu+0x3a0>)
 8005de4:	f7fb fba2 	bl	800152c <LCD_PutStr>

		j+=15;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	330f      	adds	r3, #15
 8005dec:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	b298      	uxth	r0, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	b299      	uxth	r1, r3
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005dfc:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <drawSystemInfoMenu+0x3a4>)
 8005dfe:	f7fb fb95 	bl	800152c <LCD_PutStr>
 8005e02:	4603      	mov	r3, r0
 8005e04:	461a      	mov	r2, r3
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	4413      	add	r3, r2
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "Let's say it was Atlas", fnt7x10);
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	b298      	uxth	r0, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	b299      	uxth	r1, r3
 8005e14:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <drawSystemInfoMenu+0x36c>)
 8005e16:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <drawSystemInfoMenu+0x3a0>)
 8005e18:	f7fb fb88 	bl	800152c <LCD_PutStr>

		i=200;
 8005e1c:	23c8      	movs	r3, #200	; 0xc8
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=220;
 8005e20:	23dc      	movs	r3, #220	; 0xdc
 8005e22:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	b298      	uxth	r0, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	b299      	uxth	r1, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f7fb fcca 	bl	80017cc <drawUpDownArrow>
		i=180;
 8005e38:	23b4      	movs	r3, #180	; 0xb4
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	b298      	uxth	r0, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	b299      	uxth	r1, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f7fb fcbe 	bl	80017cc <drawUpDownArrow>
		i=220;
 8005e50:	23dc      	movs	r3, #220	; 0xdc
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	b298      	uxth	r0, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	b299      	uxth	r1, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f7fb fcb2 	bl	80017cc <drawUpDownArrow>
		break;
 8005e68:	e153      	b.n	8006112 <drawSystemInfoMenu+0x612>
 8005e6a:	bf00      	nop
 8005e6c:	080149f0 	.word	0x080149f0
 8005e70:	0801477c 	.word	0x0801477c
 8005e74:	0801478c 	.word	0x0801478c
 8005e78:	08014794 	.word	0x08014794
 8005e7c:	080147ac 	.word	0x080147ac
 8005e80:	080147b4 	.word	0x080147b4
 8005e84:	080147c0 	.word	0x080147c0
 8005e88:	080147d4 	.word	0x080147d4
 8005e8c:	08014524 	.word	0x08014524
 8005e90:	080147e4 	.word	0x080147e4
 8005e94:	080147f4 	.word	0x080147f4
 8005e98:	080147fc 	.word	0x080147fc
 8005e9c:	08014538 	.word	0x08014538
 8005ea0:	08014808 	.word	0x08014808
 8005ea4:	08014820 	.word	0x08014820
	}
	case 2:{
		j=45;
 8005ea8:	232d      	movs	r3, #45	; 0x2d
 8005eaa:	60fb      	str	r3, [r7, #12]
		i=10;
 8005eac:	230a      	movs	r3, #10
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	b298      	uxth	r0, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	b299      	uxth	r1, r3
 8005eb8:	4b99      	ldr	r3, [pc, #612]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005eba:	4a9a      	ldr	r2, [pc, #616]	; (8006124 <drawSystemInfoMenu+0x624>)
 8005ebc:	f7fb fb36 	bl	800152c <LCD_PutStr>

		j+=25;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3319      	adds	r3, #25
 8005ec4:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	b298      	uxth	r0, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	b299      	uxth	r1, r3
 8005ed2:	4b93      	ldr	r3, [pc, #588]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005ed4:	4a94      	ldr	r2, [pc, #592]	; (8006128 <drawSystemInfoMenu+0x628>)
 8005ed6:	f7fb fb29 	bl	800152c <LCD_PutStr>
 8005eda:	4603      	mov	r3, r0
 8005edc:	461a      	mov	r2, r3
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	4413      	add	r3, r2
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8005ee4:	4b91      	ldr	r3, [pc, #580]	; (800612c <drawSystemInfoMenu+0x62c>)
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee8:	4a91      	ldr	r2, [pc, #580]	; (8006130 <drawSystemInfoMenu+0x630>)
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	edd3 7a00 	vldr	s15, [r3]
 8005ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ef6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005efe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f02:	ee17 3a90 	vmov	r3, s15
 8005f06:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	b298      	uxth	r0, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	b299      	uxth	r1, r3
 8005f10:	4b83      	ldr	r3, [pc, #524]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2301      	movs	r3, #1
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	f7fb fba6 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3319      	adds	r3, #25
 8005f20:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	b298      	uxth	r0, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	4b7c      	ldr	r3, [pc, #496]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005f30:	4a80      	ldr	r2, [pc, #512]	; (8006134 <drawSystemInfoMenu+0x634>)
 8005f32:	f7fb fafb 	bl	800152c <LCD_PutStr>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	4413      	add	r3, r2
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8005f40:	4b7a      	ldr	r3, [pc, #488]	; (800612c <drawSystemInfoMenu+0x62c>)
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	4a7a      	ldr	r2, [pc, #488]	; (8006130 <drawSystemInfoMenu+0x630>)
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	edd3 7a00 	vldr	s15, [r3]
 8005f4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f5a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f5e:	ee17 3a90 	vmov	r3, s15
 8005f62:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	b298      	uxth	r0, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2301      	movs	r3, #1
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f7fb fb78 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3319      	adds	r3, #25
 8005f7c:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	b298      	uxth	r0, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	b299      	uxth	r1, r3
 8005f8a:	4b65      	ldr	r3, [pc, #404]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005f8c:	4a6a      	ldr	r2, [pc, #424]	; (8006138 <drawSystemInfoMenu+0x638>)
 8005f8e:	f7fb facd 	bl	800152c <LCD_PutStr>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	4413      	add	r3, r2
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8005f9c:	4b63      	ldr	r3, [pc, #396]	; (800612c <drawSystemInfoMenu+0x62c>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	4a63      	ldr	r2, [pc, #396]	; (8006130 <drawSystemInfoMenu+0x630>)
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	edd3 7a00 	vldr	s15, [r3]
 8005faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005fb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005fb6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005fba:	ee17 3a90 	vmov	r3, s15
 8005fbe:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	b298      	uxth	r0, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	b299      	uxth	r1, r3
 8005fc8:	4b55      	ldr	r3, [pc, #340]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2301      	movs	r3, #1
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	f7fb fb4a 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3319      	adds	r3, #25
 8005fd8:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	b298      	uxth	r0, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	b299      	uxth	r1, r3
 8005fe6:	4b4e      	ldr	r3, [pc, #312]	; (8006120 <drawSystemInfoMenu+0x620>)
 8005fe8:	4a54      	ldr	r2, [pc, #336]	; (800613c <drawSystemInfoMenu+0x63c>)
 8005fea:	f7fb fa9f 	bl	800152c <LCD_PutStr>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	4413      	add	r3, r2
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8005ff8:	4b4c      	ldr	r3, [pc, #304]	; (800612c <drawSystemInfoMenu+0x62c>)
 8005ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffc:	4a4c      	ldr	r2, [pc, #304]	; (8006130 <drawSystemInfoMenu+0x630>)
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	edd3 7a00 	vldr	s15, [r3]
 8006006:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800600a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800600e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006012:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006016:	ee17 3a90 	vmov	r3, s15
 800601a:	60bb      	str	r3, [r7, #8]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	b298      	uxth	r0, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	b299      	uxth	r1, r3
 8006024:	4b3e      	ldr	r3, [pc, #248]	; (8006120 <drawSystemInfoMenu+0x620>)
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2301      	movs	r3, #1
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	f7fb fb1c 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3319      	adds	r3, #25
 8006034:	60fb      	str	r3, [r7, #12]
		i=indentAlignment;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	b298      	uxth	r0, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	b299      	uxth	r1, r3
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <drawSystemInfoMenu+0x620>)
 8006044:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <drawSystemInfoMenu+0x640>)
 8006046:	f7fb fa71 	bl	800152c <LCD_PutStr>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	4413      	add	r3, r2
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 8006054:	4b35      	ldr	r3, [pc, #212]	; (800612c <drawSystemInfoMenu+0x62c>)
 8006056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006058:	4a35      	ldr	r2, [pc, #212]	; (8006130 <drawSystemInfoMenu+0x630>)
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	edd3 7a00 	vldr	s15, [r3]
 8006062:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006066:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800606a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800606e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006072:	ee17 3a90 	vmov	r3, s15
 8006076:	60bb      	str	r3, [r7, #8]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	b298      	uxth	r0, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	b299      	uxth	r1, r3
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <drawSystemInfoMenu+0x620>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	2301      	movs	r3, #1
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	f7fb faee 	bl	8001668 <LCD_PutIntF>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	4413      	add	r3, r2
 8006094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006096:	4413      	add	r3, r2
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	b298      	uxth	r0, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	b299      	uxth	r1, r3
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <drawSystemInfoMenu+0x620>)
 80060a4:	4a27      	ldr	r2, [pc, #156]	; (8006144 <drawSystemInfoMenu+0x644>)
 80060a6:	f7fb fa41 	bl	800152c <LCD_PutStr>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	4413      	add	r3, r2
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	b298      	uxth	r0, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	b299      	uxth	r1, r3
 80060bc:	4b18      	ldr	r3, [pc, #96]	; (8006120 <drawSystemInfoMenu+0x620>)
 80060be:	4a22      	ldr	r2, [pc, #136]	; (8006148 <drawSystemInfoMenu+0x648>)
 80060c0:	f7fb fa34 	bl	800152c <LCD_PutStr>



		i=200;
 80060c4:	23c8      	movs	r3, #200	; 0xc8
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		j=15;
 80060c8:	230f      	movs	r3, #15
 80060ca:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	b298      	uxth	r0, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	b299      	uxth	r1, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f7fb fb76 	bl	80017cc <drawUpDownArrow>
		i=180;
 80060e0:	23b4      	movs	r3, #180	; 0xb4
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	b298      	uxth	r0, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	b299      	uxth	r1, r3
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f7fb fb6a 	bl	80017cc <drawUpDownArrow>
		i=220;
 80060f8:	23dc      	movs	r3, #220	; 0xdc
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	b298      	uxth	r0, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	b299      	uxth	r1, r3
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	b29a      	uxth	r2, r3
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f7fb fb5e 	bl	80017cc <drawUpDownArrow>

		break;
 8006110:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8006112:	f7fa fae1 	bl	80006d8 <SMLCD_Flush>
}
 8006116:	bf00      	nop
 8006118:	3730      	adds	r7, #48	; 0x30
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	080149f0 	.word	0x080149f0
 8006124:	0801482c 	.word	0x0801482c
 8006128:	08014844 	.word	0x08014844
 800612c:	20000118 	.word	0x20000118
 8006130:	2002407c 	.word	0x2002407c
 8006134:	08014854 	.word	0x08014854
 8006138:	08014860 	.word	0x08014860
 800613c:	0801486c 	.word	0x0801486c
 8006140:	080147f4 	.word	0x080147f4
 8006144:	08014878 	.word	0x08014878
 8006148:	08014888 	.word	0x08014888

0800614c <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	460b      	mov	r3, r1
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 800615a:	2314      	movs	r3, #20
 800615c:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 800615e:	2332      	movs	r3, #50	; 0x32
 8006160:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 8006162:	f7fa fc03 	bl	800096c <LCD_Clear>
		LCD_PixelMode = LCD_PSET;
 8006166:	4b94      	ldr	r3, [pc, #592]	; (80063b8 <drawBootMenu+0x26c>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]

		LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 800616c:	4b93      	ldr	r3, [pc, #588]	; (80063bc <drawBootMenu+0x270>)
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	4b92      	ldr	r3, [pc, #584]	; (80063c0 <drawBootMenu+0x274>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	3b01      	subs	r3, #1
 800617a:	b29b      	uxth	r3, r3
 800617c:	2100      	movs	r1, #0
 800617e:	2000      	movs	r0, #0
 8006180:	f7fa fe46 	bl	8000e10 <LCD_Rect>
		LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8006184:	4b8d      	ldr	r3, [pc, #564]	; (80063bc <drawBootMenu+0x270>)
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	3b03      	subs	r3, #3
 800618a:	b29a      	uxth	r2, r3
 800618c:	4b8c      	ldr	r3, [pc, #560]	; (80063c0 <drawBootMenu+0x274>)
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	3b03      	subs	r3, #3
 8006192:	b29b      	uxth	r3, r3
 8006194:	2102      	movs	r1, #2
 8006196:	2002      	movs	r0, #2
 8006198:	f7fa fe3a 	bl	8000e10 <LCD_Rect>

		// RTC :)
		i  = 10;
 800619c:	230a      	movs	r3, #10
 800619e:	613b      	str	r3, [r7, #16]
		j  = 10;
 80061a0:	230a      	movs	r3, #10
 80061a2:	61fb      	str	r3, [r7, #28]
		i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	b298      	uxth	r0, r3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	b299      	uxth	r1, r3
 80061ac:	4b85      	ldr	r3, [pc, #532]	; (80063c4 <drawBootMenu+0x278>)
 80061ae:	4a86      	ldr	r2, [pc, #536]	; (80063c8 <drawBootMenu+0x27c>)
 80061b0:	f7fb f9bc 	bl	800152c <LCD_PutStr>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4413      	add	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "So many!", fnt7x10);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	b298      	uxth	r0, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	b299      	uxth	r1, r3
 80061c6:	4b7f      	ldr	r3, [pc, #508]	; (80063c4 <drawBootMenu+0x278>)
 80061c8:	4a80      	ldr	r2, [pc, #512]	; (80063cc <drawBootMenu+0x280>)
 80061ca:	f7fb f9af 	bl	800152c <LCD_PutStr>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4413      	add	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
		i+=170;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	33aa      	adds	r3, #170	; 0xaa
 80061dc:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	b298      	uxth	r0, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	b299      	uxth	r1, r3
 80061e6:	4b77      	ldr	r3, [pc, #476]	; (80063c4 <drawBootMenu+0x278>)
 80061e8:	4a79      	ldr	r2, [pc, #484]	; (80063d0 <drawBootMenu+0x284>)
 80061ea:	f7fb f99f 	bl	800152c <LCD_PutStr>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4413      	add	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
		i += LCD_PutStr(i, j, "QED", fnt7x10);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	b298      	uxth	r0, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	b299      	uxth	r1, r3
 8006200:	4b70      	ldr	r3, [pc, #448]	; (80063c4 <drawBootMenu+0x278>)
 8006202:	4a74      	ldr	r2, [pc, #464]	; (80063d4 <drawBootMenu+0x288>)
 8006204:	f7fb f992 	bl	800152c <LCD_PutStr>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
		i  = 135;
 8006212:	2387      	movs	r3, #135	; 0x87
 8006214:	613b      	str	r3, [r7, #16]
		j += 12;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	330c      	adds	r3, #12
 800621a:	61fb      	str	r3, [r7, #28]

		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	b299      	uxth	r1, r3
 8006220:	4b66      	ldr	r3, [pc, #408]	; (80063bc <drawBootMenu+0x270>)
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	3b02      	subs	r3, #2
 8006226:	b29a      	uxth	r2, r3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	b29b      	uxth	r3, r3
 800622c:	3303      	adds	r3, #3
 800622e:	b29b      	uxth	r3, r3
 8006230:	2002      	movs	r0, #2
 8006232:	f7fa fe2f 	bl	8000e94 <LCD_FillRect>

		j=45;
 8006236:	232d      	movs	r3, #45	; 0x2d
 8006238:	61fb      	str	r3, [r7, #28]
		i=42;
 800623a:	232a      	movs	r3, #42	; 0x2a
 800623c:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	b298      	uxth	r0, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	b299      	uxth	r1, r3
 8006246:	4b5f      	ldr	r3, [pc, #380]	; (80063c4 <drawBootMenu+0x278>)
 8006248:	4a63      	ldr	r2, [pc, #396]	; (80063d8 <drawBootMenu+0x28c>)
 800624a:	f7fb f96f 	bl	800152c <LCD_PutStr>
		j+=20;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3314      	adds	r3, #20
 8006252:	61fb      	str	r3, [r7, #28]
		i=indentAlignment;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b298      	uxth	r0, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	b299      	uxth	r1, r3
 8006260:	4b58      	ldr	r3, [pc, #352]	; (80063c4 <drawBootMenu+0x278>)
 8006262:	4a5e      	ldr	r2, [pc, #376]	; (80063dc <drawBootMenu+0x290>)
 8006264:	f7fb f962 	bl	800152c <LCD_PutStr>
		j+=20;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	3314      	adds	r3, #20
 800626c:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	b298      	uxth	r0, r3
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	b299      	uxth	r1, r3
 8006276:	4b53      	ldr	r3, [pc, #332]	; (80063c4 <drawBootMenu+0x278>)
 8006278:	4a59      	ldr	r2, [pc, #356]	; (80063e0 <drawBootMenu+0x294>)
 800627a:	f7fb f957 	bl	800152c <LCD_PutStr>
		j+=20;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3314      	adds	r3, #20
 8006282:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	b298      	uxth	r0, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	b299      	uxth	r1, r3
 800628c:	4b4d      	ldr	r3, [pc, #308]	; (80063c4 <drawBootMenu+0x278>)
 800628e:	4a55      	ldr	r2, [pc, #340]	; (80063e4 <drawBootMenu+0x298>)
 8006290:	f7fb f94c 	bl	800152c <LCD_PutStr>
		j+=20;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3314      	adds	r3, #20
 8006298:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	b298      	uxth	r0, r3
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	b299      	uxth	r1, r3
 80062a2:	4b48      	ldr	r3, [pc, #288]	; (80063c4 <drawBootMenu+0x278>)
 80062a4:	4a50      	ldr	r2, [pc, #320]	; (80063e8 <drawBootMenu+0x29c>)
 80062a6:	f7fb f941 	bl	800152c <LCD_PutStr>
		j+=20;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	3314      	adds	r3, #20
 80062ae:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "UEFI", fnt7x10);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	b298      	uxth	r0, r3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	b299      	uxth	r1, r3
 80062b8:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <drawBootMenu+0x278>)
 80062ba:	4a4c      	ldr	r2, [pc, #304]	; (80063ec <drawBootMenu+0x2a0>)
 80062bc:	f7fb f936 	bl	800152c <LCD_PutStr>
		i-= 17;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3b11      	subs	r3, #17
 80062c4:	613b      	str	r3, [r7, #16]
		switch(indicator){
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	f200 80d4 	bhi.w	8006478 <drawBootMenu+0x32c>
 80062d0:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <drawBootMenu+0x18c>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080062ed 	.word	0x080062ed
 80062dc:	08006331 	.word	0x08006331
 80062e0:	08006375 	.word	0x08006375
 80062e4:	080063f5 	.word	0x080063f5
 80062e8:	08006437 	.word	0x08006437
		case FIRST:
		{
			j=65;
 80062ec:	2341      	movs	r3, #65	; 0x41
 80062ee:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	bf0c      	ite	eq
 80062f6:	2301      	moveq	r3, #1
 80062f8:	2300      	movne	r3, #0
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	4b3c      	ldr	r3, [pc, #240]	; (80063f0 <drawBootMenu+0x2a4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4299      	cmp	r1, r3
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	4013      	ands	r3, r2
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80b4 	beq.w	800647e <drawBootMenu+0x332>
				i=140;
 8006316:	238c      	movs	r3, #140	; 0x8c
 8006318:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	b298      	uxth	r0, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	b29b      	uxth	r3, r3
 8006322:	3305      	adds	r3, #5
 8006324:	b299      	uxth	r1, r3
 8006326:	2303      	movs	r3, #3
 8006328:	2203      	movs	r2, #3
 800632a:	f7fb fa4f 	bl	80017cc <drawUpDownArrow>
			}
			break;
 800632e:	e0a6      	b.n	800647e <drawBootMenu+0x332>
		}
		case SECOND:
		{
			j=85;
 8006330:	2355      	movs	r3, #85	; 0x55
 8006332:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	2b04      	cmp	r3, #4
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2da      	uxtb	r2, r3
 8006340:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <drawBootMenu+0x2a4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4299      	cmp	r1, r3
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	4013      	ands	r3, r2
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8094 	beq.w	8006482 <drawBootMenu+0x336>
				i=220;
 800635a:	23dc      	movs	r3, #220	; 0xdc
 800635c:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	b298      	uxth	r0, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	b29b      	uxth	r3, r3
 8006366:	3305      	adds	r3, #5
 8006368:	b299      	uxth	r1, r3
 800636a:	2303      	movs	r3, #3
 800636c:	2203      	movs	r2, #3
 800636e:	f7fb fa2d 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006372:	e086      	b.n	8006482 <drawBootMenu+0x336>
		}
		case THIRD:
		{
			j=105;
 8006374:	2369      	movs	r3, #105	; 0x69
 8006376:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	2b04      	cmp	r3, #4
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2da      	uxtb	r2, r3
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <drawBootMenu+0x2a4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4299      	cmp	r1, r3
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	4013      	ands	r3, r2
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d074      	beq.n	8006486 <drawBootMenu+0x33a>
				i=130;
 800639c:	2382      	movs	r3, #130	; 0x82
 800639e:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	b298      	uxth	r0, r3
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3305      	adds	r3, #5
 80063aa:	b299      	uxth	r1, r3
 80063ac:	2303      	movs	r3, #3
 80063ae:	2203      	movs	r2, #3
 80063b0:	f7fb fa0c 	bl	80017cc <drawUpDownArrow>
			}
			break;
 80063b4:	e067      	b.n	8006486 <drawBootMenu+0x33a>
 80063b6:	bf00      	nop
 80063b8:	20010338 	.word	0x20010338
 80063bc:	2001033a 	.word	0x2001033a
 80063c0:	2001033c 	.word	0x2001033c
 80063c4:	080149f0 	.word	0x080149f0
 80063c8:	08014448 	.word	0x08014448
 80063cc:	08014450 	.word	0x08014450
 80063d0:	0801445c 	.word	0x0801445c
 80063d4:	08014464 	.word	0x08014464
 80063d8:	08014894 	.word	0x08014894
 80063dc:	080148b0 	.word	0x080148b0
 80063e0:	080148bc 	.word	0x080148bc
 80063e4:	080148d0 	.word	0x080148d0
 80063e8:	080148dc 	.word	0x080148dc
 80063ec:	080148ec 	.word	0x080148ec
 80063f0:	200032d0 	.word	0x200032d0
		}
		case FOURTH:
		{
			j=125;
 80063f4:	237d      	movs	r3, #125	; 0x7d
 80063f6:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf0c      	ite	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	2300      	movne	r3, #0
 8006402:	b2da      	uxtb	r2, r3
 8006404:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <drawBootMenu+0x378>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4299      	cmp	r1, r3
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4013      	ands	r3, r2
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d036      	beq.n	800648a <drawBootMenu+0x33e>
				i=160;
 800641c:	23a0      	movs	r3, #160	; 0xa0
 800641e:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	b298      	uxth	r0, r3
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	b29b      	uxth	r3, r3
 8006428:	3305      	adds	r3, #5
 800642a:	b299      	uxth	r1, r3
 800642c:	2303      	movs	r3, #3
 800642e:	2203      	movs	r2, #3
 8006430:	f7fb f9cc 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006434:	e029      	b.n	800648a <drawBootMenu+0x33e>
		}
		case FIFTH:
		{
			j=145;
 8006436:	2391      	movs	r3, #145	; 0x91
 8006438:	61fb      	str	r3, [r7, #28]
			if((button == SEL) & (previousMenu == menu)){
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	2b04      	cmp	r3, #4
 800643e:	bf0c      	ite	eq
 8006440:	2301      	moveq	r3, #1
 8006442:	2300      	movne	r3, #0
 8006444:	b2da      	uxtb	r2, r3
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <drawBootMenu+0x378>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4299      	cmp	r1, r3
 800644e:	bf0c      	ite	eq
 8006450:	2301      	moveq	r3, #1
 8006452:	2300      	movne	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	4013      	ands	r3, r2
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d017      	beq.n	800648e <drawBootMenu+0x342>
				i=100;
 800645e:	2364      	movs	r3, #100	; 0x64
 8006460:	613b      	str	r3, [r7, #16]
				drawUpDownArrow(i, j+5, 3, 3);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	b298      	uxth	r0, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	b29b      	uxth	r3, r3
 800646a:	3305      	adds	r3, #5
 800646c:	b299      	uxth	r1, r3
 800646e:	2303      	movs	r3, #3
 8006470:	2203      	movs	r2, #3
 8006472:	f7fb f9ab 	bl	80017cc <drawUpDownArrow>
			}
			break;
 8006476:	e00a      	b.n	800648e <drawBootMenu+0x342>
		}
		default:
		{
			j=75;
 8006478:	234b      	movs	r3, #75	; 0x4b
 800647a:	61fb      	str	r3, [r7, #28]
			break;
 800647c:	e008      	b.n	8006490 <drawBootMenu+0x344>
			break;
 800647e:	bf00      	nop
 8006480:	e006      	b.n	8006490 <drawBootMenu+0x344>
			break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <drawBootMenu+0x344>
			break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <drawBootMenu+0x344>
			break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <drawBootMenu+0x344>
			break;
 800648e:	bf00      	nop
		}
		}
		previousMenu=menu;
 8006490:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <drawBootMenu+0x378>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6013      	str	r3, [r2, #0]
		i=25;
 8006496:	2319      	movs	r3, #25
 8006498:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	b298      	uxth	r0, r3
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	b299      	uxth	r1, r3
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	330c      	adds	r3, #12
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	330a      	adds	r3, #10
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f7fa fcef 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 80064b6:	f7fa f90f 	bl	80006d8 <SMLCD_Flush>
}
 80064ba:	bf00      	nop
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200032d0 	.word	0x200032d0

080064c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <HAL_MspInit+0x4c>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <HAL_MspInit+0x4c>)
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d8:	6413      	str	r3, [r2, #64]	; 0x40
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <HAL_MspInit+0x4c>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <HAL_MspInit+0x4c>)
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <HAL_MspInit+0x4c>)
 80064ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064f0:	6453      	str	r3, [r2, #68]	; 0x44
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <HAL_MspInit+0x4c>)
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80064fe:	2200      	movs	r2, #0
 8006500:	210f      	movs	r1, #15
 8006502:	f06f 0001 	mvn.w	r0, #1
 8006506:	f001 fe69 	bl	80081dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800

08006518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b094      	sub	sp, #80	; 0x50
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006520:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a91      	ldr	r2, [pc, #580]	; (800677c <HAL_ADC_MspInit+0x264>)
 8006536:	4293      	cmp	r3, r2
 8006538:	f040 808c 	bne.w	8006654 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800653c:	4b90      	ldr	r3, [pc, #576]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	4a8f      	ldr	r2, [pc, #572]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006546:	6453      	str	r3, [r2, #68]	; 0x44
 8006548:	4b8d      	ldr	r3, [pc, #564]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800654a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	63bb      	str	r3, [r7, #56]	; 0x38
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006554:	4b8a      	ldr	r3, [pc, #552]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4a89      	ldr	r2, [pc, #548]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6313      	str	r3, [r2, #48]	; 0x30
 8006560:	4b87      	ldr	r3, [pc, #540]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800656c:	4b84      	ldr	r3, [pc, #528]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	4a83      	ldr	r2, [pc, #524]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6313      	str	r3, [r2, #48]	; 0x30
 8006578:	4b81      	ldr	r3, [pc, #516]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006584:	4b7e      	ldr	r3, [pc, #504]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	4a7d      	ldr	r2, [pc, #500]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	6313      	str	r3, [r2, #48]	; 0x30
 8006590:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 800659c:	230f      	movs	r3, #15
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065a0:	2303      	movs	r3, #3
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065ac:	4619      	mov	r1, r3
 80065ae:	4875      	ldr	r0, [pc, #468]	; (8006784 <HAL_ADC_MspInit+0x26c>)
 80065b0:	f002 fa46 	bl	8008a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 80065b4:	23f8      	movs	r3, #248	; 0xf8
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065b8:	2303      	movs	r3, #3
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065c4:	4619      	mov	r1, r3
 80065c6:	4870      	ldr	r0, [pc, #448]	; (8006788 <HAL_ADC_MspInit+0x270>)
 80065c8:	f002 fa3a 	bl	8008a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80065cc:	2303      	movs	r3, #3
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065d0:	2303      	movs	r3, #3
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065dc:	4619      	mov	r1, r3
 80065de:	486b      	ldr	r0, [pc, #428]	; (800678c <HAL_ADC_MspInit+0x274>)
 80065e0:	f002 fa2e 	bl	8008a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80065e4:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_ADC_MspInit+0x278>)
 80065e6:	4a6b      	ldr	r2, [pc, #428]	; (8006794 <HAL_ADC_MspInit+0x27c>)
 80065e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80065ea:	4b69      	ldr	r3, [pc, #420]	; (8006790 <HAL_ADC_MspInit+0x278>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065f0:	4b67      	ldr	r3, [pc, #412]	; (8006790 <HAL_ADC_MspInit+0x278>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065f6:	4b66      	ldr	r3, [pc, #408]	; (8006790 <HAL_ADC_MspInit+0x278>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80065fc:	4b64      	ldr	r3, [pc, #400]	; (8006790 <HAL_ADC_MspInit+0x278>)
 80065fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006602:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006604:	4b62      	ldr	r3, [pc, #392]	; (8006790 <HAL_ADC_MspInit+0x278>)
 8006606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800660a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800660c:	4b60      	ldr	r3, [pc, #384]	; (8006790 <HAL_ADC_MspInit+0x278>)
 800660e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006612:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006614:	4b5e      	ldr	r3, [pc, #376]	; (8006790 <HAL_ADC_MspInit+0x278>)
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800661a:	4b5d      	ldr	r3, [pc, #372]	; (8006790 <HAL_ADC_MspInit+0x278>)
 800661c:	2200      	movs	r2, #0
 800661e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006620:	4b5b      	ldr	r3, [pc, #364]	; (8006790 <HAL_ADC_MspInit+0x278>)
 8006622:	2200      	movs	r2, #0
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006626:	485a      	ldr	r0, [pc, #360]	; (8006790 <HAL_ADC_MspInit+0x278>)
 8006628:	f001 fe02 	bl	8008230 <HAL_DMA_Init>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8006632:	f7fd fe13 	bl	800425c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a55      	ldr	r2, [pc, #340]	; (8006790 <HAL_ADC_MspInit+0x278>)
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
 800663c:	4a54      	ldr	r2, [pc, #336]	; (8006790 <HAL_ADC_MspInit+0x278>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006642:	2200      	movs	r2, #0
 8006644:	2105      	movs	r1, #5
 8006646:	2012      	movs	r0, #18
 8006648:	f001 fdc8 	bl	80081dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800664c:	2012      	movs	r0, #18
 800664e:	f001 fde1 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006652:	e13a      	b.n	80068ca <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a4f      	ldr	r2, [pc, #316]	; (8006798 <HAL_ADC_MspInit+0x280>)
 800665a:	4293      	cmp	r3, r2
 800665c:	f040 80a2 	bne.w	80067a4 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006660:	4b47      	ldr	r3, [pc, #284]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	4a46      	ldr	r2, [pc, #280]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800666a:	6453      	str	r3, [r2, #68]	; 0x44
 800666c:	4b44      	ldr	r3, [pc, #272]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006678:	4b41      	ldr	r3, [pc, #260]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a40      	ldr	r2, [pc, #256]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
 8006684:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006690:	4b3b      	ldr	r3, [pc, #236]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	4a3a      	ldr	r2, [pc, #232]	; (8006780 <HAL_ADC_MspInit+0x268>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6313      	str	r3, [r2, #48]	; 0x30
 800669c:	4b38      	ldr	r3, [pc, #224]	; (8006780 <HAL_ADC_MspInit+0x268>)
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	623b      	str	r3, [r7, #32]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066a8:	4b35      	ldr	r3, [pc, #212]	; (8006780 <HAL_ADC_MspInit+0x268>)
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	4a34      	ldr	r2, [pc, #208]	; (8006780 <HAL_ADC_MspInit+0x268>)
 80066ae:	f043 0302 	orr.w	r3, r3, #2
 80066b2:	6313      	str	r3, [r2, #48]	; 0x30
 80066b4:	4b32      	ldr	r3, [pc, #200]	; (8006780 <HAL_ADC_MspInit+0x268>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 80066c0:	233f      	movs	r3, #63	; 0x3f
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066c4:	2303      	movs	r3, #3
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066d0:	4619      	mov	r1, r3
 80066d2:	482c      	ldr	r0, [pc, #176]	; (8006784 <HAL_ADC_MspInit+0x26c>)
 80066d4:	f002 f9b4 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 80066d8:	237b      	movs	r3, #123	; 0x7b
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066dc:	2303      	movs	r3, #3
 80066de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066e8:	4619      	mov	r1, r3
 80066ea:	4827      	ldr	r0, [pc, #156]	; (8006788 <HAL_ADC_MspInit+0x270>)
 80066ec:	f002 f9a8 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 80066f0:	2302      	movs	r3, #2
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066f4:	2303      	movs	r3, #3
 80066f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 80066fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006700:	4619      	mov	r1, r3
 8006702:	4822      	ldr	r0, [pc, #136]	; (800678c <HAL_ADC_MspInit+0x274>)
 8006704:	f002 f99c 	bl	8008a40 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006708:	4b24      	ldr	r3, [pc, #144]	; (800679c <HAL_ADC_MspInit+0x284>)
 800670a:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <HAL_ADC_MspInit+0x288>)
 800670c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800670e:	4b23      	ldr	r3, [pc, #140]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006714:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006716:	4b21      	ldr	r3, [pc, #132]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006718:	2200      	movs	r2, #0
 800671a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800671c:	4b1f      	ldr	r3, [pc, #124]	; (800679c <HAL_ADC_MspInit+0x284>)
 800671e:	2200      	movs	r2, #0
 8006720:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006722:	4b1e      	ldr	r3, [pc, #120]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006728:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800672a:	4b1c      	ldr	r3, [pc, #112]	; (800679c <HAL_ADC_MspInit+0x284>)
 800672c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006730:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006732:	4b1a      	ldr	r3, [pc, #104]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006738:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800673a:	4b18      	ldr	r3, [pc, #96]	; (800679c <HAL_ADC_MspInit+0x284>)
 800673c:	2200      	movs	r2, #0
 800673e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006740:	4b16      	ldr	r3, [pc, #88]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006742:	2200      	movs	r2, #0
 8006744:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006748:	2200      	movs	r2, #0
 800674a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800674c:	4813      	ldr	r0, [pc, #76]	; (800679c <HAL_ADC_MspInit+0x284>)
 800674e:	f001 fd6f 	bl	8008230 <HAL_DMA_Init>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8006758:	f7fd fd80 	bl	800425c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a0f      	ldr	r2, [pc, #60]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
 8006762:	4a0e      	ldr	r2, [pc, #56]	; (800679c <HAL_ADC_MspInit+0x284>)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006768:	2200      	movs	r2, #0
 800676a:	2105      	movs	r1, #5
 800676c:	2012      	movs	r0, #18
 800676e:	f001 fd35 	bl	80081dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006772:	2012      	movs	r0, #18
 8006774:	f001 fd4e 	bl	8008214 <HAL_NVIC_EnableIRQ>
}
 8006778:	e0a7      	b.n	80068ca <HAL_ADC_MspInit+0x3b2>
 800677a:	bf00      	nop
 800677c:	40012000 	.word	0x40012000
 8006780:	40023800 	.word	0x40023800
 8006784:	40020800 	.word	0x40020800
 8006788:	40020000 	.word	0x40020000
 800678c:	40020400 	.word	0x40020400
 8006790:	20013318 	.word	0x20013318
 8006794:	40026410 	.word	0x40026410
 8006798:	40012100 	.word	0x40012100
 800679c:	20023fb4 	.word	0x20023fb4
 80067a0:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <HAL_ADC_MspInit+0x3bc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f040 808d 	bne.w	80068ca <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80067b0:	4b49      	ldr	r3, [pc, #292]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	4a48      	ldr	r2, [pc, #288]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067ba:	6453      	str	r3, [r2, #68]	; 0x44
 80067bc:	4b46      	ldr	r3, [pc, #280]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80067c8:	4b43      	ldr	r3, [pc, #268]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	4a42      	ldr	r2, [pc, #264]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067ce:	f043 0320 	orr.w	r3, r3, #32
 80067d2:	6313      	str	r3, [r2, #48]	; 0x30
 80067d4:	4b40      	ldr	r3, [pc, #256]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067e0:	4b3d      	ldr	r3, [pc, #244]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	4a3c      	ldr	r2, [pc, #240]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067e6:	f043 0304 	orr.w	r3, r3, #4
 80067ea:	6313      	str	r3, [r2, #48]	; 0x30
 80067ec:	4b3a      	ldr	r3, [pc, #232]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f8:	4b37      	ldr	r3, [pc, #220]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	4a36      	ldr	r2, [pc, #216]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6313      	str	r3, [r2, #48]	; 0x30
 8006804:	4b34      	ldr	r3, [pc, #208]	; (80068d8 <HAL_ADC_MspInit+0x3c0>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8006810:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006816:	2303      	movs	r3, #3
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681a:	2300      	movs	r3, #0
 800681c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800681e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006822:	4619      	mov	r1, r3
 8006824:	482d      	ldr	r0, [pc, #180]	; (80068dc <HAL_ADC_MspInit+0x3c4>)
 8006826:	f002 f90b 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 800682a:	230f      	movs	r3, #15
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800682e:	2303      	movs	r3, #3
 8006830:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	2300      	movs	r3, #0
 8006834:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800683a:	4619      	mov	r1, r3
 800683c:	4828      	ldr	r0, [pc, #160]	; (80068e0 <HAL_ADC_MspInit+0x3c8>)
 800683e:	f002 f8ff 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8006842:	230c      	movs	r3, #12
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006846:	2303      	movs	r3, #3
 8006848:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684a:	2300      	movs	r3, #0
 800684c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800684e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006852:	4619      	mov	r1, r3
 8006854:	4823      	ldr	r0, [pc, #140]	; (80068e4 <HAL_ADC_MspInit+0x3cc>)
 8006856:	f002 f8f3 	bl	8008a40 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800685a:	4b23      	ldr	r3, [pc, #140]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 800685c:	4a23      	ldr	r2, [pc, #140]	; (80068ec <HAL_ADC_MspInit+0x3d4>)
 800685e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8006860:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 8006862:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006866:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 800686a:	2200      	movs	r2, #0
 800686c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800686e:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 8006870:	2200      	movs	r2, #0
 8006872:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006874:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 8006876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800687a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800687c:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 800687e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006882:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006884:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 8006886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800688a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800688c:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 800688e:	2200      	movs	r2, #0
 8006890:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8006892:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 8006894:	2200      	movs	r2, #0
 8006896:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 800689a:	2200      	movs	r2, #0
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800689e:	4812      	ldr	r0, [pc, #72]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 80068a0:	f001 fcc6 	bl	8008230 <HAL_DMA_Init>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_ADC_MspInit+0x396>
      Error_Handler();
 80068aa:	f7fd fcd7 	bl	800425c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a0d      	ldr	r2, [pc, #52]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
 80068b4:	4a0c      	ldr	r2, [pc, #48]	; (80068e8 <HAL_ADC_MspInit+0x3d0>)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80068ba:	2200      	movs	r2, #0
 80068bc:	2105      	movs	r1, #5
 80068be:	2012      	movs	r0, #18
 80068c0:	f001 fc8c 	bl	80081dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80068c4:	2012      	movs	r0, #18
 80068c6:	f001 fca5 	bl	8008214 <HAL_NVIC_EnableIRQ>
}
 80068ca:	bf00      	nop
 80068cc:	3750      	adds	r7, #80	; 0x50
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40012200 	.word	0x40012200
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40021400 	.word	0x40021400
 80068e0:	40020800 	.word	0x40020800
 80068e4:	40020000 	.word	0x40020000
 80068e8:	20010a50 	.word	0x20010a50
 80068ec:	40026428 	.word	0x40026428

080068f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b090      	sub	sp, #64	; 0x40
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	60da      	str	r2, [r3, #12]
 8006906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a6c      	ldr	r2, [pc, #432]	; (8006ac0 <HAL_I2C_MspInit+0x1d0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d129      	bne.n	8006966 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006912:	4b6c      	ldr	r3, [pc, #432]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	4a6b      	ldr	r2, [pc, #428]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	6313      	str	r3, [r2, #48]	; 0x30
 800691e:	4b69      	ldr	r3, [pc, #420]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 800692a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006930:	2312      	movs	r3, #18
 8006932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006934:	2301      	movs	r3, #1
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006938:	2303      	movs	r3, #3
 800693a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800693c:	2304      	movs	r3, #4
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006944:	4619      	mov	r1, r3
 8006946:	4860      	ldr	r0, [pc, #384]	; (8006ac8 <HAL_I2C_MspInit+0x1d8>)
 8006948:	f002 f87a 	bl	8008a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800694c:	4b5d      	ldr	r3, [pc, #372]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	4a5c      	ldr	r2, [pc, #368]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006956:	6413      	str	r3, [r2, #64]	; 0x40
 8006958:	4b5a      	ldr	r3, [pc, #360]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006964:	e0a7      	b.n	8006ab6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a58      	ldr	r2, [pc, #352]	; (8006acc <HAL_I2C_MspInit+0x1dc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d128      	bne.n	80069c2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006970:	4b54      	ldr	r3, [pc, #336]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	4a53      	ldr	r2, [pc, #332]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006976:	f043 0320 	orr.w	r3, r3, #32
 800697a:	6313      	str	r3, [r2, #48]	; 0x30
 800697c:	4b51      	ldr	r3, [pc, #324]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8006988:	2303      	movs	r3, #3
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800698c:	2312      	movs	r3, #18
 800698e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006990:	2301      	movs	r3, #1
 8006992:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006994:	2303      	movs	r3, #3
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006998:	2304      	movs	r3, #4
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800699c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069a0:	4619      	mov	r1, r3
 80069a2:	484b      	ldr	r0, [pc, #300]	; (8006ad0 <HAL_I2C_MspInit+0x1e0>)
 80069a4:	f002 f84c 	bl	8008a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80069a8:	4b46      	ldr	r3, [pc, #280]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	4a45      	ldr	r2, [pc, #276]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069b2:	6413      	str	r3, [r2, #64]	; 0x40
 80069b4:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	69fb      	ldr	r3, [r7, #28]
}
 80069c0:	e079      	b.n	8006ab6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a43      	ldr	r2, [pc, #268]	; (8006ad4 <HAL_I2C_MspInit+0x1e4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d146      	bne.n	8006a5a <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069cc:	4b3d      	ldr	r3, [pc, #244]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	4a3c      	ldr	r2, [pc, #240]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069d2:	f043 0304 	orr.w	r3, r3, #4
 80069d6:	6313      	str	r3, [r2, #48]	; 0x30
 80069d8:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069e4:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	4a36      	ldr	r2, [pc, #216]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6313      	str	r3, [r2, #48]	; 0x30
 80069f0:	4b34      	ldr	r3, [pc, #208]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 80069fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a02:	2312      	movs	r3, #18
 8006a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a06:	2301      	movs	r3, #1
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006a0e:	2304      	movs	r3, #4
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8006a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a16:	4619      	mov	r1, r3
 8006a18:	482f      	ldr	r0, [pc, #188]	; (8006ad8 <HAL_I2C_MspInit+0x1e8>)
 8006a1a:	f002 f811 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8006a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a24:	2312      	movs	r3, #18
 8006a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006a30:	2304      	movs	r3, #4
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8006a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4828      	ldr	r0, [pc, #160]	; (8006adc <HAL_I2C_MspInit+0x1ec>)
 8006a3c:	f002 f800 	bl	8008a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006a40:	4b20      	ldr	r3, [pc, #128]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006a46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	693b      	ldr	r3, [r7, #16]
}
 8006a58:	e02d      	b.n	8006ab6 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <HAL_I2C_MspInit+0x1f0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d128      	bne.n	8006ab6 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a64:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006a6a:	f043 0320 	orr.w	r3, r3, #32
 8006a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8006a7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a82:	2312      	movs	r3, #18
 8006a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a86:	2301      	movs	r3, #1
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006a8e:	2304      	movs	r3, #4
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a96:	4619      	mov	r1, r3
 8006a98:	480d      	ldr	r0, [pc, #52]	; (8006ad0 <HAL_I2C_MspInit+0x1e0>)
 8006a9a:	f001 ffd1 	bl	8008a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_I2C_MspInit+0x1d4>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab2:	60bb      	str	r3, [r7, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
}
 8006ab6:	bf00      	nop
 8006ab8:	3740      	adds	r7, #64	; 0x40
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40005400 	.word	0x40005400
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	40020400 	.word	0x40020400
 8006acc:	40005800 	.word	0x40005800
 8006ad0:	40021400 	.word	0x40021400
 8006ad4:	40005c00 	.word	0x40005c00
 8006ad8:	40020800 	.word	0x40020800
 8006adc:	40020000 	.word	0x40020000
 8006ae0:	40006000 	.word	0x40006000

08006ae4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <HAL_RTC_MspInit+0x2c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d105      	bne.n	8006b02 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006af6:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <HAL_RTC_MspInit+0x30>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a06      	ldr	r2, [pc, #24]	; (8006b14 <HAL_RTC_MspInit+0x30>)
 8006afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40002800 	.word	0x40002800
 8006b14:	40023800 	.word	0x40023800

08006b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08c      	sub	sp, #48	; 0x30
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b20:	f107 031c 	add.w	r3, r7, #28
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	60da      	str	r2, [r3, #12]
 8006b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a40      	ldr	r2, [pc, #256]	; (8006c38 <HAL_SPI_MspInit+0x120>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d130      	bne.n	8006b9c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006b3a:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3e:	4a3f      	ldr	r2, [pc, #252]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006b40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b44:	6453      	str	r3, [r2, #68]	; 0x44
 8006b46:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b52:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	4a39      	ldr	r2, [pc, #228]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006b58:	f043 0310 	orr.w	r3, r3, #16
 8006b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5e:	4b37      	ldr	r3, [pc, #220]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006b6a:	2364      	movs	r3, #100	; 0x64
 8006b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b76:	2303      	movs	r3, #3
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006b7a:	2305      	movs	r3, #5
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b7e:	f107 031c 	add.w	r3, r7, #28
 8006b82:	4619      	mov	r1, r3
 8006b84:	482e      	ldr	r0, [pc, #184]	; (8006c40 <HAL_SPI_MspInit+0x128>)
 8006b86:	f001 ff5b 	bl	8008a40 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2105      	movs	r1, #5
 8006b8e:	2054      	movs	r0, #84	; 0x54
 8006b90:	f001 fb24 	bl	80081dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006b94:	2054      	movs	r0, #84	; 0x54
 8006b96:	f001 fb3d 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006b9a:	e049      	b.n	8006c30 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a28      	ldr	r2, [pc, #160]	; (8006c44 <HAL_SPI_MspInit+0x12c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d144      	bne.n	8006c30 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006ba6:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	4a24      	ldr	r2, [pc, #144]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006bb2:	4b22      	ldr	r3, [pc, #136]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bbe:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bca:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006bdc:	f043 0320 	orr.w	r3, r3, #32
 8006be0:	6313      	str	r3, [r2, #48]	; 0x30
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <HAL_SPI_MspInit+0x124>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8006bee:	23e0      	movs	r3, #224	; 0xe0
 8006bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006bfe:	2305      	movs	r3, #5
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006c02:	f107 031c 	add.w	r3, r7, #28
 8006c06:	4619      	mov	r1, r3
 8006c08:	480f      	ldr	r0, [pc, #60]	; (8006c48 <HAL_SPI_MspInit+0x130>)
 8006c0a:	f001 ff19 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8006c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c14:	2302      	movs	r3, #2
 8006c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006c20:	2305      	movs	r3, #5
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8006c24:	f107 031c 	add.w	r3, r7, #28
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4808      	ldr	r0, [pc, #32]	; (8006c4c <HAL_SPI_MspInit+0x134>)
 8006c2c:	f001 ff08 	bl	8008a40 <HAL_GPIO_Init>
}
 8006c30:	bf00      	nop
 8006c32:	3730      	adds	r7, #48	; 0x30
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40015000 	.word	0x40015000
 8006c48:	40021c00 	.word	0x40021c00
 8006c4c:	40021400 	.word	0x40021400

08006c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <HAL_TIM_Base_MspInit+0x5c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d10c      	bne.n	8006c7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <HAL_TIM_Base_MspInit+0x60>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4a12      	ldr	r2, [pc, #72]	; (8006cb0 <HAL_TIM_Base_MspInit+0x60>)
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6e:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <HAL_TIM_Base_MspInit+0x60>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006c7a:	e010      	b.n	8006c9e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <HAL_TIM_Base_MspInit+0x64>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d10b      	bne.n	8006c9e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <HAL_TIM_Base_MspInit+0x60>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <HAL_TIM_Base_MspInit+0x60>)
 8006c8c:	f043 0308 	orr.w	r3, r3, #8
 8006c90:	6413      	str	r3, [r2, #64]	; 0x40
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <HAL_TIM_Base_MspInit+0x60>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40000c00 	.word	0x40000c00

08006cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <HAL_TIM_MspPostInit+0xa8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d11c      	bne.n	8006d14 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cda:	4b22      	ldr	r3, [pc, #136]	; (8006d64 <HAL_TIM_MspPostInit+0xac>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	4a21      	ldr	r2, [pc, #132]	; (8006d64 <HAL_TIM_MspPostInit+0xac>)
 8006ce0:	f043 0302 	orr.w	r3, r3, #2
 8006ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce6:	4b1f      	ldr	r3, [pc, #124]	; (8006d64 <HAL_TIM_MspPostInit+0xac>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006d02:	2302      	movs	r3, #2
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8006d06:	f107 0314 	add.w	r3, r7, #20
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4816      	ldr	r0, [pc, #88]	; (8006d68 <HAL_TIM_MspPostInit+0xb0>)
 8006d0e:	f001 fe97 	bl	8008a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006d12:	e021      	b.n	8006d58 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <HAL_TIM_MspPostInit+0xb4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d11c      	bne.n	8006d58 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <HAL_TIM_MspPostInit+0xac>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <HAL_TIM_MspPostInit+0xac>)
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <HAL_TIM_MspPostInit+0xac>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8006d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d44:	2300      	movs	r3, #0
 8006d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4619      	mov	r1, r3
 8006d52:	4807      	ldr	r0, [pc, #28]	; (8006d70 <HAL_TIM_MspPostInit+0xb8>)
 8006d54:	f001 fe74 	bl	8008a40 <HAL_GPIO_Init>
}
 8006d58:	bf00      	nop
 8006d5a:	3728      	adds	r7, #40	; 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40020400 	.word	0x40020400
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40021c00 	.word	0x40021c00

08006d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	; 0x38
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6c      	ldr	r2, [pc, #432]	; (8006f44 <HAL_UART_MspInit+0x1d0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d129      	bne.n	8006dea <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006d96:	4b6c      	ldr	r3, [pc, #432]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	4a6b      	ldr	r2, [pc, #428]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da0:	6413      	str	r3, [r2, #64]	; 0x40
 8006da2:	4b69      	ldr	r3, [pc, #420]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006daa:	623b      	str	r3, [r7, #32]
 8006dac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dae:	4b66      	ldr	r3, [pc, #408]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	4a65      	ldr	r2, [pc, #404]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006db4:	f043 0304 	orr.w	r3, r3, #4
 8006db8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dba:	4b63      	ldr	r3, [pc, #396]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8006dc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006dd8:	2308      	movs	r3, #8
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de0:	4619      	mov	r1, r3
 8006de2:	485a      	ldr	r0, [pc, #360]	; (8006f4c <HAL_UART_MspInit+0x1d8>)
 8006de4:	f001 fe2c 	bl	8008a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8006de8:	e0a7      	b.n	8006f3a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a58      	ldr	r2, [pc, #352]	; (8006f50 <HAL_UART_MspInit+0x1dc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d174      	bne.n	8006ede <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006df4:	4b54      	ldr	r3, [pc, #336]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	4a53      	ldr	r2, [pc, #332]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8006e00:	4b51      	ldr	r3, [pc, #324]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e0c:	4b4e      	ldr	r3, [pc, #312]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	4a4d      	ldr	r2, [pc, #308]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e12:	f043 0304 	orr.w	r3, r3, #4
 8006e16:	6313      	str	r3, [r2, #48]	; 0x30
 8006e18:	4b4b      	ldr	r3, [pc, #300]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e24:	4b48      	ldr	r3, [pc, #288]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e28:	4a47      	ldr	r2, [pc, #284]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e2a:	f043 0308 	orr.w	r3, r3, #8
 8006e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e30:	4b45      	ldr	r3, [pc, #276]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8006e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e42:	2302      	movs	r3, #2
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e56:	4619      	mov	r1, r3
 8006e58:	483c      	ldr	r0, [pc, #240]	; (8006f4c <HAL_UART_MspInit+0x1d8>)
 8006e5a:	f001 fdf1 	bl	8008a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8006e5e:	2304      	movs	r3, #4
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e62:	2302      	movs	r3, #2
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e6e:	2308      	movs	r3, #8
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e76:	4619      	mov	r1, r3
 8006e78:	4836      	ldr	r0, [pc, #216]	; (8006f54 <HAL_UART_MspInit+0x1e0>)
 8006e7a:	f001 fde1 	bl	8008a40 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006e80:	4a36      	ldr	r2, [pc, #216]	; (8006f5c <HAL_UART_MspInit+0x1e8>)
 8006e82:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006e84:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e8a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e8c:	4b32      	ldr	r3, [pc, #200]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e92:	4b31      	ldr	r3, [pc, #196]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e98:	4b2f      	ldr	r3, [pc, #188]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e9e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ea0:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ea6:	4b2c      	ldr	r3, [pc, #176]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006eac:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eb2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006eba:	4b27      	ldr	r3, [pc, #156]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006ec0:	4825      	ldr	r0, [pc, #148]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006ec2:	f001 f9b5 	bl	8008230 <HAL_DMA_Init>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8006ecc:	f7fd f9c6 	bl	800425c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006ed4:	66da      	str	r2, [r3, #108]	; 0x6c
 8006ed6:	4a20      	ldr	r2, [pc, #128]	; (8006f58 <HAL_UART_MspInit+0x1e4>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006edc:	e02d      	b.n	8006f3a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <HAL_UART_MspInit+0x1ec>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d128      	bne.n	8006f3a <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006ee8:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	4a16      	ldr	r2, [pc, #88]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef4:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f00:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	4a10      	ldr	r2, [pc, #64]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006f06:	f043 0310 	orr.w	r3, r3, #16
 8006f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0c:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <HAL_UART_MspInit+0x1d4>)
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	f003 0310 	and.w	r3, r3, #16
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8006f18:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f26:	2303      	movs	r3, #3
 8006f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f32:	4619      	mov	r1, r3
 8006f34:	480b      	ldr	r0, [pc, #44]	; (8006f64 <HAL_UART_MspInit+0x1f0>)
 8006f36:	f001 fd83 	bl	8008a40 <HAL_GPIO_Init>
}
 8006f3a:	bf00      	nop
 8006f3c:	3738      	adds	r7, #56	; 0x38
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40004c00 	.word	0x40004c00
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	40020800 	.word	0x40020800
 8006f50:	40005000 	.word	0x40005000
 8006f54:	40020c00 	.word	0x40020c00
 8006f58:	20024014 	.word	0x20024014
 8006f5c:	40026010 	.word	0x40026010
 8006f60:	40007800 	.word	0x40007800
 8006f64:	40021000 	.word	0x40021000

08006f68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f70:	f107 0314 	add.w	r3, r7, #20
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	605a      	str	r2, [r3, #4]
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f88:	d134      	bne.n	8006ff4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	4a1b      	ldr	r2, [pc, #108]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	6313      	str	r3, [r2, #48]	; 0x30
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8006fa2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fb4:	230a      	movs	r3, #10
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb8:	f107 0314 	add.w	r3, r7, #20
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4810      	ldr	r0, [pc, #64]	; (8007000 <HAL_PCD_MspInit+0x98>)
 8006fc0:	f001 fd3e 	bl	8008a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fce:	6353      	str	r3, [r2, #52]	; 0x34
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	4a06      	ldr	r2, [pc, #24]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <HAL_PCD_MspInit+0x94>)
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006ff4:	bf00      	nop
 8006ff6:	3728      	adds	r7, #40	; 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40023800 	.word	0x40023800
 8007000:	40020000 	.word	0x40020000

08007004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08c      	sub	sp, #48	; 0x30
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8007014:	2200      	movs	r2, #0
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	2036      	movs	r0, #54	; 0x36
 800701a:	f001 f8df 	bl	80081dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800701e:	2036      	movs	r0, #54	; 0x36
 8007020:	f001 f8f8 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007024:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <HAL_InitTick+0xa0>)
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <HAL_InitTick+0xa0>)
 800702a:	f043 0310 	orr.w	r3, r3, #16
 800702e:	6413      	str	r3, [r2, #64]	; 0x40
 8007030:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <HAL_InitTick+0xa0>)
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800703c:	f107 0210 	add.w	r2, r7, #16
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	4611      	mov	r1, r2
 8007046:	4618      	mov	r0, r3
 8007048:	f003 f9fe 	bl	800a448 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800704c:	f003 f9d4 	bl	800a3f8 <HAL_RCC_GetPCLK1Freq>
 8007050:	4603      	mov	r3, r0
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <HAL_InitTick+0xa4>)
 800705a:	fba2 2303 	umull	r2, r3, r2, r3
 800705e:	0c9b      	lsrs	r3, r3, #18
 8007060:	3b01      	subs	r3, #1
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007064:	4b11      	ldr	r3, [pc, #68]	; (80070ac <HAL_InitTick+0xa8>)
 8007066:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <HAL_InitTick+0xac>)
 8007068:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800706a:	4b10      	ldr	r3, [pc, #64]	; (80070ac <HAL_InitTick+0xa8>)
 800706c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007070:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007072:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <HAL_InitTick+0xa8>)
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <HAL_InitTick+0xa8>)
 800707a:	2200      	movs	r2, #0
 800707c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_InitTick+0xa8>)
 8007080:	2200      	movs	r2, #0
 8007082:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007084:	4809      	ldr	r0, [pc, #36]	; (80070ac <HAL_InitTick+0xa8>)
 8007086:	f004 fb13 	bl	800b6b0 <HAL_TIM_Base_Init>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007090:	4806      	ldr	r0, [pc, #24]	; (80070ac <HAL_InitTick+0xa8>)
 8007092:	f004 fb39 	bl	800b708 <HAL_TIM_Base_Start_IT>
 8007096:	4603      	mov	r3, r0
 8007098:	e000      	b.n	800709c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
}
 800709c:	4618      	mov	r0, r3
 800709e:	3730      	adds	r7, #48	; 0x30
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	40023800 	.word	0x40023800
 80070a8:	431bde83 	.word	0x431bde83
 80070ac:	200240d0 	.word	0x200240d0
 80070b0:	40001000 	.word	0x40001000

080070b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070b8:	e7fe      	b.n	80070b8 <NMI_Handler+0x4>

080070ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070ba:	b480      	push	{r7}
 80070bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070be:	e7fe      	b.n	80070be <HardFault_Handler+0x4>

080070c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070c4:	e7fe      	b.n	80070c4 <MemManage_Handler+0x4>

080070c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070c6:	b480      	push	{r7}
 80070c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070ca:	e7fe      	b.n	80070ca <BusFault_Handler+0x4>

080070cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070d0:	e7fe      	b.n	80070d0 <UsageFault_Handler+0x4>

080070d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070d2:	b480      	push	{r7}
 80070d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070d6:	bf00      	nop
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80070e4:	2010      	movs	r0, #16
 80070e6:	f001 fea1 	bl	8008e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(inputButtonSet>buttonPriority.back){
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <EXTI4_IRQHandler+0x28>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	4b06      	ldr	r3, [pc, #24]	; (800710c <EXTI4_IRQHandler+0x2c>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	dd04      	ble.n	8007102 <EXTI4_IRQHandler+0x22>
	  inputButtonSet = buttonPriority.back;
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <EXTI4_IRQHandler+0x2c>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4b02      	ldr	r3, [pc, #8]	; (8007108 <EXTI4_IRQHandler+0x28>)
 8007100:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	200000bc 	.word	0x200000bc
 800710c:	20000178 	.word	0x20000178

08007110 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007114:	4802      	ldr	r0, [pc, #8]	; (8007120 <DMA1_Stream0_IRQHandler+0x10>)
 8007116:	f001 fa2b 	bl	8008570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800711a:	bf00      	nop
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20024014 	.word	0x20024014

08007124 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007128:	4805      	ldr	r0, [pc, #20]	; (8007140 <ADC_IRQHandler+0x1c>)
 800712a:	f000 fa37 	bl	800759c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800712e:	4805      	ldr	r0, [pc, #20]	; (8007144 <ADC_IRQHandler+0x20>)
 8007130:	f000 fa34 	bl	800759c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8007134:	4804      	ldr	r0, [pc, #16]	; (8007148 <ADC_IRQHandler+0x24>)
 8007136:	f000 fa31 	bl	800759c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20013284 	.word	0x20013284
 8007144:	2001056c 	.word	0x2001056c
 8007148:	200132d0 	.word	0x200132d0

0800714c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8007152:	2120      	movs	r1, #32
 8007154:	482a      	ldr	r0, [pc, #168]	; (8007200 <EXTI9_5_IRQHandler+0xb4>)
 8007156:	f001 fe1d 	bl	8008d94 <HAL_GPIO_ReadPin>
 800715a:	4603      	mov	r3, r0
 800715c:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 800715e:	2140      	movs	r1, #64	; 0x40
 8007160:	4827      	ldr	r0, [pc, #156]	; (8007200 <EXTI9_5_IRQHandler+0xb4>)
 8007162:	f001 fe17 	bl	8008d94 <HAL_GPIO_ReadPin>
 8007166:	4603      	mov	r3, r0
 8007168:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 800716a:	2180      	movs	r1, #128	; 0x80
 800716c:	4824      	ldr	r0, [pc, #144]	; (8007200 <EXTI9_5_IRQHandler+0xb4>)
 800716e:	f001 fe11 	bl	8008d94 <HAL_GPIO_ReadPin>
 8007172:	4603      	mov	r3, r0
 8007174:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){ //up button
 8007176:	4b23      	ldr	r3, [pc, #140]	; (8007204 <EXTI9_5_IRQHandler+0xb8>)
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <EXTI9_5_IRQHandler+0x50>
		if(inputButtonSet > buttonPriority.up){
 8007182:	4b21      	ldr	r3, [pc, #132]	; (8007208 <EXTI9_5_IRQHandler+0xbc>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	4b20      	ldr	r3, [pc, #128]	; (800720c <EXTI9_5_IRQHandler+0xc0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	dd2a      	ble.n	80071e6 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <EXTI9_5_IRQHandler+0xc0>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <EXTI9_5_IRQHandler+0xbc>)
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	e024      	b.n	80071e6 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){ //sel button
 800719c:	4b19      	ldr	r3, [pc, #100]	; (8007204 <EXTI9_5_IRQHandler+0xb8>)
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <EXTI9_5_IRQHandler+0x76>
		if(inputButtonSet > buttonPriority.sel){
 80071a8:	4b17      	ldr	r3, [pc, #92]	; (8007208 <EXTI9_5_IRQHandler+0xbc>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <EXTI9_5_IRQHandler+0xc0>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	dd17      	ble.n	80071e6 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 80071b6:	4b15      	ldr	r3, [pc, #84]	; (800720c <EXTI9_5_IRQHandler+0xc0>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	4b12      	ldr	r3, [pc, #72]	; (8007208 <EXTI9_5_IRQHandler+0xbc>)
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	e011      	b.n	80071e6 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){ //down button
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <EXTI9_5_IRQHandler+0xb8>)
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 80071ce:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <EXTI9_5_IRQHandler+0xbc>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <EXTI9_5_IRQHandler+0xc0>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	dd04      	ble.n	80071e6 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <EXTI9_5_IRQHandler+0xc0>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <EXTI9_5_IRQHandler+0xbc>)
 80071e4:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80071e6:	2020      	movs	r0, #32
 80071e8:	f001 fe20 	bl	8008e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80071ec:	2040      	movs	r0, #64	; 0x40
 80071ee:	f001 fe1d 	bl	8008e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80071f2:	2080      	movs	r0, #128	; 0x80
 80071f4:	f001 fe1a 	bl	8008e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40022800 	.word	0x40022800
 8007204:	40013c00 	.word	0x40013c00
 8007208:	200000bc 	.word	0x200000bc
 800720c:	20000178 	.word	0x20000178

08007210 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007214:	4802      	ldr	r0, [pc, #8]	; (8007220 <TIM6_DAC_IRQHandler+0x10>)
 8007216:	f004 fad6 	bl	800b7c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	200240d0 	.word	0x200240d0

08007224 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007228:	4805      	ldr	r0, [pc, #20]	; (8007240 <DMA2_Stream0_IRQHandler+0x1c>)
 800722a:	f001 f9a1 	bl	8008570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800722e:	4805      	ldr	r0, [pc, #20]	; (8007244 <DMA2_Stream0_IRQHandler+0x20>)
 8007230:	f000 fbe4 	bl	80079fc <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <DMA2_Stream0_IRQHandler+0x24>)
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20013318 	.word	0x20013318
 8007244:	20013284 	.word	0x20013284
 8007248:	20010ab0 	.word	0x20010ab0

0800724c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007250:	4805      	ldr	r0, [pc, #20]	; (8007268 <DMA2_Stream1_IRQHandler+0x1c>)
 8007252:	f001 f98d 	bl	8008570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8007256:	4805      	ldr	r0, [pc, #20]	; (800726c <DMA2_Stream1_IRQHandler+0x20>)
 8007258:	f000 fbd0 	bl	80079fc <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <DMA2_Stream1_IRQHandler+0x24>)
 800725e:	2201      	movs	r2, #1
 8007260:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20010a50 	.word	0x20010a50
 800726c:	200132d0 	.word	0x200132d0
 8007270:	20010ab0 	.word	0x20010ab0

08007274 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007278:	4805      	ldr	r0, [pc, #20]	; (8007290 <DMA2_Stream2_IRQHandler+0x1c>)
 800727a:	f001 f979 	bl	8008570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <DMA2_Stream2_IRQHandler+0x20>)
 8007280:	f000 fbbc 	bl	80079fc <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8007284:	4b04      	ldr	r3, [pc, #16]	; (8007298 <DMA2_Stream2_IRQHandler+0x24>)
 8007286:	2201      	movs	r2, #1
 8007288:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800728a:	bf00      	nop
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20023fb4 	.word	0x20023fb4
 8007294:	2001056c 	.word	0x2001056c
 8007298:	20010ab0 	.word	0x20010ab0

0800729c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80072a0:	4802      	ldr	r0, [pc, #8]	; (80072ac <SPI4_IRQHandler+0x10>)
 80072a2:	f003 ffc9 	bl	800b238 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80072a6:	bf00      	nop
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20010340 	.word	0x20010340

080072b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e00a      	b.n	80072d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80072c2:	f3af 8000 	nop.w
 80072c6:	4601      	mov	r1, r0
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	60ba      	str	r2, [r7, #8]
 80072ce:	b2ca      	uxtb	r2, r1
 80072d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	3301      	adds	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	dbf0      	blt.n	80072c2 <_read+0x12>
	}

return len;
 80072e0:	687b      	ldr	r3, [r7, #4]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e009      	b.n	8007310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	60ba      	str	r2, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f7fb fdc9 	bl	8002e9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	3301      	adds	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	dbf1      	blt.n	80072fc <_write+0x12>
	}
	return len;
 8007318:	687b      	ldr	r3, [r7, #4]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <_close>:

int _close(int file)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
	return -1;
 800732a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800734a:	605a      	str	r2, [r3, #4]
	return 0;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <_isatty>:

int _isatty(int file)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
	return 1;
 8007362:	2301      	movs	r3, #1
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	return 0;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007394:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <_sbrk+0x5c>)
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <_sbrk+0x60>)
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <_sbrk+0x64>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073a8:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <_sbrk+0x64>)
 80073aa:	4a12      	ldr	r2, [pc, #72]	; (80073f4 <_sbrk+0x68>)
 80073ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <_sbrk+0x64>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d207      	bcs.n	80073cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80073bc:	f008 ff9e 	bl	80102fc <__errno>
 80073c0:	4602      	mov	r2, r0
 80073c2:	230c      	movs	r3, #12
 80073c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	e009      	b.n	80073e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073cc:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <_sbrk+0x64>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <_sbrk+0x64>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4413      	add	r3, r2
 80073da:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <_sbrk+0x64>)
 80073dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20080000 	.word	0x20080000
 80073ec:	00000400 	.word	0x00000400
 80073f0:	200032d4 	.word	0x200032d4
 80073f4:	20024158 	.word	0x20024158

080073f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073fc:	4b08      	ldr	r3, [pc, #32]	; (8007420 <SystemInit+0x28>)
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007402:	4a07      	ldr	r2, [pc, #28]	; (8007420 <SystemInit+0x28>)
 8007404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <SystemInit+0x28>)
 800740e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007412:	609a      	str	r2, [r3, #8]
#endif
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000ed00 	.word	0xe000ed00

08007424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800745c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800742a:	e003      	b.n	8007434 <LoopCopyDataInit>

0800742c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800742c:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800742e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007432:	3104      	adds	r1, #4

08007434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007434:	480b      	ldr	r0, [pc, #44]	; (8007464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800743a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800743c:	d3f6      	bcc.n	800742c <CopyDataInit>
  ldr  r2, =_sbss
 800743e:	4a0b      	ldr	r2, [pc, #44]	; (800746c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007440:	e002      	b.n	8007448 <LoopFillZerobss>

08007442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007444:	f842 3b04 	str.w	r3, [r2], #4

08007448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007448:	4b09      	ldr	r3, [pc, #36]	; (8007470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800744a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800744c:	d3f9      	bcc.n	8007442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800744e:	f7ff ffd3 	bl	80073f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007452:	f008 ff59 	bl	8010308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007456:	f7fa fc51 	bl	8001cfc <main>
  bx  lr    
 800745a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800745c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007460:	080153b0 	.word	0x080153b0
  ldr  r0, =_sdata
 8007464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007468:	20000368 	.word	0x20000368
  ldr  r2, =_sbss
 800746c:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8007470:	20024158 	.word	0x20024158

08007474 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007474:	e7fe      	b.n	8007474 <CAN1_RX0_IRQHandler>

08007476 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800747a:	2003      	movs	r0, #3
 800747c:	f000 fea3 	bl	80081c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007480:	2000      	movs	r0, #0
 8007482:	f7ff fdbf 	bl	8007004 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007486:	f7ff f81f 	bl	80064c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <HAL_IncTick+0x20>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <HAL_IncTick+0x24>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4413      	add	r3, r2
 80074a0:	4a04      	ldr	r2, [pc, #16]	; (80074b4 <HAL_IncTick+0x24>)
 80074a2:	6013      	str	r3, [r2, #0]
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20000190 	.word	0x20000190
 80074b4:	20024110 	.word	0x20024110

080074b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return uwTick;
 80074bc:	4b03      	ldr	r3, [pc, #12]	; (80074cc <HAL_GetTick+0x14>)
 80074be:	681b      	ldr	r3, [r3, #0]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20024110 	.word	0x20024110

080074d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074d8:	f7ff ffee 	bl	80074b8 <HAL_GetTick>
 80074dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d005      	beq.n	80074f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_Delay+0x40>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074f6:	bf00      	nop
 80074f8:	f7ff ffde 	bl	80074b8 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	429a      	cmp	r2, r3
 8007506:	d8f7      	bhi.n	80074f8 <HAL_Delay+0x28>
  {
  }
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000190 	.word	0x20000190

08007514 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e031      	b.n	800758e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fe fff0 	bl	8006518 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b00      	cmp	r3, #0
 8007550:	d116      	bne.n	8007580 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007556:	4b10      	ldr	r3, [pc, #64]	; (8007598 <HAL_ADC_Init+0x84>)
 8007558:	4013      	ands	r3, r2
 800755a:	f043 0202 	orr.w	r2, r3, #2
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fbfc 	bl	8007d60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	f023 0303 	bic.w	r3, r3, #3
 8007576:	f043 0201 	orr.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	641a      	str	r2, [r3, #64]	; 0x40
 800757e:	e001      	b.n	8007584 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	ffffeefd 	.word	0xffffeefd

0800759c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	2300      	movs	r3, #0
 80075aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	bf0c      	ite	eq
 80075ba:	2301      	moveq	r3, #1
 80075bc:	2300      	movne	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d049      	beq.n	8007672 <HAL_ADC_IRQHandler+0xd6>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d046      	beq.n	8007672 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12b      	bne.n	8007662 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800760e:	2b00      	cmp	r3, #0
 8007610:	d127      	bne.n	8007662 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800762a:	2b00      	cmp	r3, #0
 800762c:	d119      	bne.n	8007662 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0220 	bic.w	r2, r2, #32
 800763c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f043 0201 	orr.w	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fc fbc2 	bl	8003dec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0212 	mvn.w	r2, #18
 8007670:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b04      	cmp	r3, #4
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d057      	beq.n	8007754 <HAL_ADC_IRQHandler+0x1b8>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d054      	beq.n	8007754 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d139      	bne.n	8007744 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d12b      	bne.n	8007744 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d124      	bne.n	8007744 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11d      	bne.n	8007744 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800770c:	2b00      	cmp	r3, #0
 800770e:	d119      	bne.n	8007744 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800771e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	f043 0201 	orr.w	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc87 	bl	8008058 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f06f 020c 	mvn.w	r2, #12
 8007752:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b01      	cmp	r3, #1
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	bf0c      	ite	eq
 8007778:	2301      	moveq	r3, #1
 800777a:	2300      	movne	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d017      	beq.n	80077b6 <HAL_ADC_IRQHandler+0x21a>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d014      	beq.n	80077b6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10d      	bne.n	80077b6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f97c 	bl	8007aa4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0201 	mvn.w	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077da:	bf0c      	ite	eq
 80077dc:	2301      	moveq	r3, #1
 80077de:	2300      	movne	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d015      	beq.n	8007816 <HAL_ADC_IRQHandler+0x27a>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d012      	beq.n	8007816 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f4:	f043 0202 	orr.w	r2, r3, #2
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0220 	mvn.w	r2, #32
 8007804:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f956 	bl	8007ab8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0220 	mvn.w	r2, #32
 8007814:	601a      	str	r2, [r3, #0]
  }
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_ADC_Start_DMA+0x1e>
 800783a:	2302      	movs	r3, #2
 800783c:	e0c7      	b.n	80079ce <HAL_ADC_Start_DMA+0x1ae>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b01      	cmp	r3, #1
 8007852:	d018      	beq.n	8007886 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007864:	4b5c      	ldr	r3, [pc, #368]	; (80079d8 <HAL_ADC_Start_DMA+0x1b8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a5c      	ldr	r2, [pc, #368]	; (80079dc <HAL_ADC_Start_DMA+0x1bc>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	0c9a      	lsrs	r2, r3, #18
 8007870:	4613      	mov	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007878:	e002      	b.n	8007880 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	3b01      	subs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f9      	bne.n	800787a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b01      	cmp	r3, #1
 8007892:	f040 809b 	bne.w	80079cc <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800789a:	4b51      	ldr	r3, [pc, #324]	; (80079e0 <HAL_ADC_Start_DMA+0x1c0>)
 800789c:	4013      	ands	r3, r2
 800789e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	d106      	bne.n	80078e0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d6:	f023 0206 	bic.w	r2, r3, #6
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	645a      	str	r2, [r3, #68]	; 0x44
 80078de:	e002      	b.n	80078e6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	4a3c      	ldr	r2, [pc, #240]	; (80079e4 <HAL_ADC_Start_DMA+0x1c4>)
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	4a3b      	ldr	r2, [pc, #236]	; (80079e8 <HAL_ADC_Start_DMA+0x1c8>)
 80078fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	4a3a      	ldr	r2, [pc, #232]	; (80079ec <HAL_ADC_Start_DMA+0x1cc>)
 8007904:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800790e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800791e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800792e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	334c      	adds	r3, #76	; 0x4c
 800793a:	4619      	mov	r1, r3
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f000 fd24 	bl	800838c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007944:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <HAL_ADC_Start_DMA+0x1d0>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10f      	bne.n	8007970 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d136      	bne.n	80079cc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800796c:	609a      	str	r2, [r3, #8]
 800796e:	e02d      	b.n	80079cc <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1f      	ldr	r2, [pc, #124]	; (80079f4 <HAL_ADC_Start_DMA+0x1d4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d10e      	bne.n	8007998 <HAL_ADC_Start_DMA+0x178>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d107      	bne.n	8007998 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007996:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <HAL_ADC_Start_DMA+0x1d0>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d113      	bne.n	80079cc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a13      	ldr	r2, [pc, #76]	; (80079f8 <HAL_ADC_Start_DMA+0x1d8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10e      	bne.n	80079cc <HAL_ADC_Start_DMA+0x1ac>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80079ca:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000188 	.word	0x20000188
 80079dc:	431bde83 	.word	0x431bde83
 80079e0:	fffff8fe 	.word	0xfffff8fe
 80079e4:	08007f55 	.word	0x08007f55
 80079e8:	0800800f 	.word	0x0800800f
 80079ec:	0800802b 	.word	0x0800802b
 80079f0:	40012300 	.word	0x40012300
 80079f4:	40012000 	.word	0x40012000
 80079f8:	40012200 	.word	0x40012200

080079fc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_ADC_Stop_DMA+0x1a>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e036      	b.n	8007a84 <HAL_ADC_Stop_DMA+0x88>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0201 	bic.w	r2, r2, #1
 8007a2c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11e      	bne.n	8007a7a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a4a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fcfb 	bl	800844c <HAL_DMA_Abort>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007a68:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <HAL_ADC_Stop_DMA+0x90>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	f043 0201 	orr.w	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	ffffeefe 	.word	0xffffeefe

08007a90 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_ADC_ConfigChannel+0x1c>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e12a      	b.n	8007d3e <HAL_ADC_ConfigChannel+0x272>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	d93a      	bls.n	8007b6e <HAL_ADC_ConfigChannel+0xa2>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b00:	d035      	beq.n	8007b6e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68d9      	ldr	r1, [r3, #12]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	3b1e      	subs	r3, #30
 8007b18:	2207      	movs	r2, #7
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	43da      	mvns	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	400a      	ands	r2, r1
 8007b26:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a87      	ldr	r2, [pc, #540]	; (8007d4c <HAL_ADC_ConfigChannel+0x280>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d10a      	bne.n	8007b48 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68d9      	ldr	r1, [r3, #12]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	061a      	lsls	r2, r3, #24
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b46:	e035      	b.n	8007bb4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68d9      	ldr	r1, [r3, #12]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	4618      	mov	r0, r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	4403      	add	r3, r0
 8007b60:	3b1e      	subs	r3, #30
 8007b62:	409a      	lsls	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b6c:	e022      	b.n	8007bb4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6919      	ldr	r1, [r3, #16]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	4413      	add	r3, r2
 8007b82:	2207      	movs	r2, #7
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	43da      	mvns	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	400a      	ands	r2, r1
 8007b90:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6919      	ldr	r1, [r3, #16]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	4403      	add	r3, r0
 8007baa:	409a      	lsls	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b06      	cmp	r3, #6
 8007bba:	d824      	bhi.n	8007c06 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	3b05      	subs	r3, #5
 8007bce:	221f      	movs	r2, #31
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	43da      	mvns	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	400a      	ands	r2, r1
 8007bdc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	4618      	mov	r0, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3b05      	subs	r3, #5
 8007bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	635a      	str	r2, [r3, #52]	; 0x34
 8007c04:	e04c      	b.n	8007ca0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b0c      	cmp	r3, #12
 8007c0c:	d824      	bhi.n	8007c58 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3b23      	subs	r3, #35	; 0x23
 8007c20:	221f      	movs	r2, #31
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	43da      	mvns	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	400a      	ands	r2, r1
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	3b23      	subs	r3, #35	; 0x23
 8007c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
 8007c56:	e023      	b.n	8007ca0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	3b41      	subs	r3, #65	; 0x41
 8007c6a:	221f      	movs	r2, #31
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	43da      	mvns	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	400a      	ands	r2, r1
 8007c78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4618      	mov	r0, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	3b41      	subs	r3, #65	; 0x41
 8007c94:	fa00 f203 	lsl.w	r2, r0, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a2a      	ldr	r2, [pc, #168]	; (8007d50 <HAL_ADC_ConfigChannel+0x284>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10a      	bne.n	8007cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb2:	d105      	bne.n	8007cc0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007cb4:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <HAL_ADC_ConfigChannel+0x288>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a26      	ldr	r2, [pc, #152]	; (8007d54 <HAL_ADC_ConfigChannel+0x288>)
 8007cba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007cbe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <HAL_ADC_ConfigChannel+0x284>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d109      	bne.n	8007cde <HAL_ADC_ConfigChannel+0x212>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b12      	cmp	r3, #18
 8007cd0:	d105      	bne.n	8007cde <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007cd2:	4b20      	ldr	r3, [pc, #128]	; (8007d54 <HAL_ADC_ConfigChannel+0x288>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4a1f      	ldr	r2, [pc, #124]	; (8007d54 <HAL_ADC_ConfigChannel+0x288>)
 8007cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cdc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <HAL_ADC_ConfigChannel+0x284>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d125      	bne.n	8007d34 <HAL_ADC_ConfigChannel+0x268>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a17      	ldr	r2, [pc, #92]	; (8007d4c <HAL_ADC_ConfigChannel+0x280>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <HAL_ADC_ConfigChannel+0x22e>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b11      	cmp	r3, #17
 8007cf8:	d11c      	bne.n	8007d34 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007cfa:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <HAL_ADC_ConfigChannel+0x288>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <HAL_ADC_ConfigChannel+0x288>)
 8007d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d04:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <HAL_ADC_ConfigChannel+0x280>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d111      	bne.n	8007d34 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <HAL_ADC_ConfigChannel+0x28c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <HAL_ADC_ConfigChannel+0x290>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	0c9a      	lsrs	r2, r3, #18
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d26:	e002      	b.n	8007d2e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f9      	bne.n	8007d28 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	10000012 	.word	0x10000012
 8007d50:	40012000 	.word	0x40012000
 8007d54:	40012300 	.word	0x40012300
 8007d58:	20000188 	.word	0x20000188
 8007d5c:	431bde83 	.word	0x431bde83

08007d60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007d68:	4b78      	ldr	r3, [pc, #480]	; (8007f4c <ADC_Init+0x1ec>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a77      	ldr	r2, [pc, #476]	; (8007f4c <ADC_Init+0x1ec>)
 8007d6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007d74:	4b75      	ldr	r3, [pc, #468]	; (8007f4c <ADC_Init+0x1ec>)
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	4973      	ldr	r1, [pc, #460]	; (8007f4c <ADC_Init+0x1ec>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6859      	ldr	r1, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	021a      	lsls	r2, r3, #8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6859      	ldr	r1, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6899      	ldr	r1, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	4a58      	ldr	r2, [pc, #352]	; (8007f50 <ADC_Init+0x1f0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d022      	beq.n	8007e3a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6899      	ldr	r1, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
 8007e38:	e00f      	b.n	8007e5a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0202 	bic.w	r2, r2, #2
 8007e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6899      	ldr	r1, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	005a      	lsls	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01b      	beq.n	8007ec0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007ea6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6859      	ldr	r1, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	035a      	lsls	r2, r3, #13
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	e007      	b.n	8007ed0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ece:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	051a      	lsls	r2, r3, #20
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6899      	ldr	r1, [r3, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f12:	025a      	lsls	r2, r3, #9
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6899      	ldr	r1, [r3, #8]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	029a      	lsls	r2, r3, #10
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	40012300 	.word	0x40012300
 8007f50:	0f000001 	.word	0x0f000001

08007f54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d13c      	bne.n	8007fe8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d12b      	bne.n	8007fe0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d127      	bne.n	8007fe0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d119      	bne.n	8007fe0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0220 	bic.w	r2, r2, #32
 8007fba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	f043 0201 	orr.w	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7fb ff03 	bl	8003dec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007fe6:	e00e      	b.n	8008006 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f7ff fd5f 	bl	8007ab8 <HAL_ADC_ErrorCallback>
}
 8007ffa:	e004      	b.n	8008006 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff fd37 	bl	8007a90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008022:	bf00      	nop
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2240      	movs	r2, #64	; 0x40
 800803c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008042:	f043 0204 	orr.w	r2, r3, #4
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff fd34 	bl	8007ab8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <__NVIC_SetPriorityGrouping+0x40>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008088:	4013      	ands	r3, r2
 800808a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <__NVIC_SetPriorityGrouping+0x44>)
 8008096:	4313      	orrs	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800809a:	4a04      	ldr	r2, [pc, #16]	; (80080ac <__NVIC_SetPriorityGrouping+0x40>)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	60d3      	str	r3, [r2, #12]
}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	e000ed00 	.word	0xe000ed00
 80080b0:	05fa0000 	.word	0x05fa0000

080080b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <__NVIC_GetPriorityGrouping+0x18>)
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	f003 0307 	and.w	r3, r3, #7
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	e000ed00 	.word	0xe000ed00

080080d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db0b      	blt.n	80080fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	f003 021f 	and.w	r2, r3, #31
 80080e8:	4907      	ldr	r1, [pc, #28]	; (8008108 <__NVIC_EnableIRQ+0x38>)
 80080ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	2001      	movs	r0, #1
 80080f2:	fa00 f202 	lsl.w	r2, r0, r2
 80080f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	e000e100 	.word	0xe000e100

0800810c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800811c:	2b00      	cmp	r3, #0
 800811e:	db0a      	blt.n	8008136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	b2da      	uxtb	r2, r3
 8008124:	490c      	ldr	r1, [pc, #48]	; (8008158 <__NVIC_SetPriority+0x4c>)
 8008126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812a:	0112      	lsls	r2, r2, #4
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	440b      	add	r3, r1
 8008130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008134:	e00a      	b.n	800814c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4908      	ldr	r1, [pc, #32]	; (800815c <__NVIC_SetPriority+0x50>)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	3b04      	subs	r3, #4
 8008144:	0112      	lsls	r2, r2, #4
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	440b      	add	r3, r1
 800814a:	761a      	strb	r2, [r3, #24]
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	e000e100 	.word	0xe000e100
 800815c:	e000ed00 	.word	0xe000ed00

08008160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f1c3 0307 	rsb	r3, r3, #7
 800817a:	2b04      	cmp	r3, #4
 800817c:	bf28      	it	cs
 800817e:	2304      	movcs	r3, #4
 8008180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3304      	adds	r3, #4
 8008186:	2b06      	cmp	r3, #6
 8008188:	d902      	bls.n	8008190 <NVIC_EncodePriority+0x30>
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3b03      	subs	r3, #3
 800818e:	e000      	b.n	8008192 <NVIC_EncodePriority+0x32>
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	43da      	mvns	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	401a      	ands	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081a8:	f04f 31ff 	mov.w	r1, #4294967295
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	43d9      	mvns	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081b8:	4313      	orrs	r3, r2
         );
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3724      	adds	r7, #36	; 0x24
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff ff4c 	bl	800806c <__NVIC_SetPriorityGrouping>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80081ee:	f7ff ff61 	bl	80080b4 <__NVIC_GetPriorityGrouping>
 80081f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	6978      	ldr	r0, [r7, #20]
 80081fa:	f7ff ffb1 	bl	8008160 <NVIC_EncodePriority>
 80081fe:	4602      	mov	r2, r0
 8008200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff ff80 	bl	800810c <__NVIC_SetPriority>
}
 800820c:	bf00      	nop
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800821e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff ff54 	bl	80080d0 <__NVIC_EnableIRQ>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800823c:	f7ff f93c 	bl	80074b8 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e099      	b.n	8008380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800826c:	e00f      	b.n	800828e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800826e:	f7ff f923 	bl	80074b8 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b05      	cmp	r3, #5
 800827a:	d908      	bls.n	800828e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2203      	movs	r2, #3
 8008286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e078      	b.n	8008380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e8      	bne.n	800826e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4b38      	ldr	r3, [pc, #224]	; (8008388 <HAL_DMA_Init+0x158>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d107      	bne.n	80082f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	4313      	orrs	r3, r2
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0307 	bic.w	r3, r3, #7
 800830e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b04      	cmp	r3, #4
 8008320:	d117      	bne.n	8008352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00e      	beq.n	8008352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb09 	bl	800894c <DMA_CheckFifoParam>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2240      	movs	r2, #64	; 0x40
 8008344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800834e:	2301      	movs	r3, #1
 8008350:	e016      	b.n	8008380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fac0 	bl	80088e0 <DMA_CalcBaseAndBitshift>
 8008360:	4603      	mov	r3, r0
 8008362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008368:	223f      	movs	r2, #63	; 0x3f
 800836a:	409a      	lsls	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	e010803f 	.word	0xe010803f

0800838c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d101      	bne.n	80083b2 <HAL_DMA_Start_IT+0x26>
 80083ae:	2302      	movs	r3, #2
 80083b0:	e048      	b.n	8008444 <HAL_DMA_Start_IT+0xb8>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d137      	bne.n	8008436 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2202      	movs	r2, #2
 80083ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fa52 	bl	8008884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e4:	223f      	movs	r2, #63	; 0x3f
 80083e6:	409a      	lsls	r2, r3
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0216 	orr.w	r2, r2, #22
 80083fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695a      	ldr	r2, [r3, #20]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800840a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f042 0208 	orr.w	r2, r2, #8
 8008422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	e005      	b.n	8008442 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800843e:	2302      	movs	r3, #2
 8008440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800845a:	f7ff f82d 	bl	80074b8 <HAL_GetTick>
 800845e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d008      	beq.n	800847e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2280      	movs	r2, #128	; 0x80
 8008470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e052      	b.n	8008524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0216 	bic.w	r2, r2, #22
 800848c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695a      	ldr	r2, [r3, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800849c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <HAL_DMA_Abort+0x62>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0208 	bic.w	r2, r2, #8
 80084bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084ce:	e013      	b.n	80084f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084d0:	f7fe fff2 	bl	80074b8 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b05      	cmp	r3, #5
 80084dc:	d90c      	bls.n	80084f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2203      	movs	r2, #3
 80084f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e015      	b.n	8008524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e4      	bne.n	80084d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850a:	223f      	movs	r2, #63	; 0x3f
 800850c:	409a      	lsls	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	d004      	beq.n	800854a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2280      	movs	r2, #128	; 0x80
 8008544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e00c      	b.n	8008564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2205      	movs	r2, #5
 800854e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800857c:	4b92      	ldr	r3, [pc, #584]	; (80087c8 <HAL_DMA_IRQHandler+0x258>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a92      	ldr	r2, [pc, #584]	; (80087cc <HAL_DMA_IRQHandler+0x25c>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	0a9b      	lsrs	r3, r3, #10
 8008588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859a:	2208      	movs	r2, #8
 800859c:	409a      	lsls	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01a      	beq.n	80085dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d013      	beq.n	80085dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0204 	bic.w	r2, r2, #4
 80085c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c8:	2208      	movs	r2, #8
 80085ca:	409a      	lsls	r2, r3
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d4:	f043 0201 	orr.w	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e0:	2201      	movs	r2, #1
 80085e2:	409a      	lsls	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d012      	beq.n	8008612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fe:	2201      	movs	r2, #1
 8008600:	409a      	lsls	r2, r3
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f043 0202 	orr.w	r2, r3, #2
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008616:	2204      	movs	r2, #4
 8008618:	409a      	lsls	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4013      	ands	r3, r2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d012      	beq.n	8008648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008634:	2204      	movs	r2, #4
 8008636:	409a      	lsls	r2, r3
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008640:	f043 0204 	orr.w	r2, r3, #4
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864c:	2210      	movs	r2, #16
 800864e:	409a      	lsls	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4013      	ands	r3, r2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d043      	beq.n	80086e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d03c      	beq.n	80086e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866a:	2210      	movs	r2, #16
 800866c:	409a      	lsls	r2, r3
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d018      	beq.n	80086b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d108      	bne.n	80086a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d024      	beq.n	80086e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
 800869e:	e01f      	b.n	80086e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01b      	beq.n	80086e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	4798      	blx	r3
 80086b0:	e016      	b.n	80086e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0208 	bic.w	r2, r2, #8
 80086ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e4:	2220      	movs	r2, #32
 80086e6:	409a      	lsls	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 808e 	beq.w	800880e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0310 	and.w	r3, r3, #16
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8086 	beq.w	800880e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008706:	2220      	movs	r2, #32
 8008708:	409a      	lsls	r2, r3
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b05      	cmp	r3, #5
 8008718:	d136      	bne.n	8008788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0216 	bic.w	r2, r2, #22
 8008728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695a      	ldr	r2, [r3, #20]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <HAL_DMA_IRQHandler+0x1da>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0208 	bic.w	r2, r2, #8
 8008758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875e:	223f      	movs	r2, #63	; 0x3f
 8008760:	409a      	lsls	r2, r3
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877a:	2b00      	cmp	r3, #0
 800877c:	d07d      	beq.n	800887a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
        }
        return;
 8008786:	e078      	b.n	800887a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01c      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d108      	bne.n	80087b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d030      	beq.n	800880e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
 80087b4:	e02b      	b.n	800880e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d027      	beq.n	800880e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
 80087c6:	e022      	b.n	800880e <HAL_DMA_IRQHandler+0x29e>
 80087c8:	20000188 	.word	0x20000188
 80087cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10f      	bne.n	80087fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0210 	bic.w	r2, r2, #16
 80087ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008812:	2b00      	cmp	r3, #0
 8008814:	d032      	beq.n	800887c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d022      	beq.n	8008868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2205      	movs	r2, #5
 8008826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	3301      	adds	r3, #1
 800883e:	60bb      	str	r3, [r7, #8]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	429a      	cmp	r2, r3
 8008844:	d307      	bcc.n	8008856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f2      	bne.n	800883a <HAL_DMA_IRQHandler+0x2ca>
 8008854:	e000      	b.n	8008858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	4798      	blx	r3
 8008878:	e000      	b.n	800887c <HAL_DMA_IRQHandler+0x30c>
        return;
 800887a:	bf00      	nop
    }
  }
}
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop

08008884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b40      	cmp	r3, #64	; 0x40
 80088b0:	d108      	bne.n	80088c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80088c2:	e007      	b.n	80088d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]
}
 80088d4:	bf00      	nop
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	3b10      	subs	r3, #16
 80088f0:	4a13      	ldr	r2, [pc, #76]	; (8008940 <DMA_CalcBaseAndBitshift+0x60>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088fa:	4a12      	ldr	r2, [pc, #72]	; (8008944 <DMA_CalcBaseAndBitshift+0x64>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d908      	bls.n	8008920 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <DMA_CalcBaseAndBitshift+0x68>)
 8008916:	4013      	ands	r3, r2
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	659a      	str	r2, [r3, #88]	; 0x58
 800891e:	e006      	b.n	800892e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	4b08      	ldr	r3, [pc, #32]	; (8008948 <DMA_CalcBaseAndBitshift+0x68>)
 8008928:	4013      	ands	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	aaaaaaab 	.word	0xaaaaaaab
 8008944:	08015078 	.word	0x08015078
 8008948:	fffffc00 	.word	0xfffffc00

0800894c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d11f      	bne.n	80089a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b03      	cmp	r3, #3
 800896a:	d855      	bhi.n	8008a18 <DMA_CheckFifoParam+0xcc>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <DMA_CheckFifoParam+0x28>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	08008985 	.word	0x08008985
 8008978:	08008997 	.word	0x08008997
 800897c:	08008985 	.word	0x08008985
 8008980:	08008a19 	.word	0x08008a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d045      	beq.n	8008a1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008994:	e042      	b.n	8008a1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800899e:	d13f      	bne.n	8008a20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089a4:	e03c      	b.n	8008a20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ae:	d121      	bne.n	80089f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d836      	bhi.n	8008a24 <DMA_CheckFifoParam+0xd8>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <DMA_CheckFifoParam+0x70>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	080089d3 	.word	0x080089d3
 80089c4:	080089cd 	.word	0x080089cd
 80089c8:	080089e5 	.word	0x080089e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
      break;
 80089d0:	e02f      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d024      	beq.n	8008a28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089e2:	e021      	b.n	8008a28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089ec:	d11e      	bne.n	8008a2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089f2:	e01b      	b.n	8008a2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d902      	bls.n	8008a00 <DMA_CheckFifoParam+0xb4>
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d003      	beq.n	8008a06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089fe:	e018      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
      break;
 8008a04:	e015      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00e      	beq.n	8008a30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
      break;
 8008a16:	e00b      	b.n	8008a30 <DMA_CheckFifoParam+0xe4>
      break;
 8008a18:	bf00      	nop
 8008a1a:	e00a      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a1c:	bf00      	nop
 8008a1e:	e008      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a20:	bf00      	nop
 8008a22:	e006      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a24:	bf00      	nop
 8008a26:	e004      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a28:	bf00      	nop
 8008a2a:	e002      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;   
 8008a2c:	bf00      	nop
 8008a2e:	e000      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a30:	bf00      	nop
    }
  } 
  
  return status; 
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b089      	sub	sp, #36	; 0x24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	e175      	b.n	8008d4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008a60:	2201      	movs	r2, #1
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	fa02 f303 	lsl.w	r3, r2, r3
 8008a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4013      	ands	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	f040 8164 	bne.w	8008d46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d00b      	beq.n	8008a9e <HAL_GPIO_Init+0x5e>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d007      	beq.n	8008a9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a92:	2b11      	cmp	r3, #17
 8008a94:	d003      	beq.n	8008a9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b12      	cmp	r3, #18
 8008a9c:	d130      	bne.n	8008b00 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8008adc:	43db      	mvns	r3, r3
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	091b      	lsrs	r3, r3, #4
 8008aea:	f003 0201 	and.w	r2, r3, #1
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	fa02 f303 	lsl.w	r3, r2, r3
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b10:	43db      	mvns	r3, r3
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	4013      	ands	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d003      	beq.n	8008b40 <HAL_GPIO_Init+0x100>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b12      	cmp	r3, #18
 8008b3e:	d123      	bne.n	8008b88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	08da      	lsrs	r2, r3, #3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3208      	adds	r2, #8
 8008b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	220f      	movs	r2, #15
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	43db      	mvns	r3, r3
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	4013      	ands	r3, r2
 8008b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	08da      	lsrs	r2, r3, #3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3208      	adds	r2, #8
 8008b82:	69b9      	ldr	r1, [r7, #24]
 8008b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	2203      	movs	r2, #3
 8008b94:	fa02 f303 	lsl.w	r3, r2, r3
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f003 0203 	and.w	r2, r3, #3
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80be 	beq.w	8008d46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bca:	4b65      	ldr	r3, [pc, #404]	; (8008d60 <HAL_GPIO_Init+0x320>)
 8008bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bce:	4a64      	ldr	r2, [pc, #400]	; (8008d60 <HAL_GPIO_Init+0x320>)
 8008bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008bd6:	4b62      	ldr	r3, [pc, #392]	; (8008d60 <HAL_GPIO_Init+0x320>)
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008be2:	4a60      	ldr	r2, [pc, #384]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	089b      	lsrs	r3, r3, #2
 8008be8:	3302      	adds	r3, #2
 8008bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	220f      	movs	r2, #15
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	4013      	ands	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a57      	ldr	r2, [pc, #348]	; (8008d68 <HAL_GPIO_Init+0x328>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d037      	beq.n	8008c7e <HAL_GPIO_Init+0x23e>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a56      	ldr	r2, [pc, #344]	; (8008d6c <HAL_GPIO_Init+0x32c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d031      	beq.n	8008c7a <HAL_GPIO_Init+0x23a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a55      	ldr	r2, [pc, #340]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d02b      	beq.n	8008c76 <HAL_GPIO_Init+0x236>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a54      	ldr	r2, [pc, #336]	; (8008d74 <HAL_GPIO_Init+0x334>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d025      	beq.n	8008c72 <HAL_GPIO_Init+0x232>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a53      	ldr	r2, [pc, #332]	; (8008d78 <HAL_GPIO_Init+0x338>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01f      	beq.n	8008c6e <HAL_GPIO_Init+0x22e>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a52      	ldr	r2, [pc, #328]	; (8008d7c <HAL_GPIO_Init+0x33c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d019      	beq.n	8008c6a <HAL_GPIO_Init+0x22a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a51      	ldr	r2, [pc, #324]	; (8008d80 <HAL_GPIO_Init+0x340>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d013      	beq.n	8008c66 <HAL_GPIO_Init+0x226>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a50      	ldr	r2, [pc, #320]	; (8008d84 <HAL_GPIO_Init+0x344>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00d      	beq.n	8008c62 <HAL_GPIO_Init+0x222>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a4f      	ldr	r2, [pc, #316]	; (8008d88 <HAL_GPIO_Init+0x348>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d007      	beq.n	8008c5e <HAL_GPIO_Init+0x21e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a4e      	ldr	r2, [pc, #312]	; (8008d8c <HAL_GPIO_Init+0x34c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d101      	bne.n	8008c5a <HAL_GPIO_Init+0x21a>
 8008c56:	2309      	movs	r3, #9
 8008c58:	e012      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	e010      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c5e:	2308      	movs	r3, #8
 8008c60:	e00e      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c62:	2307      	movs	r3, #7
 8008c64:	e00c      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c66:	2306      	movs	r3, #6
 8008c68:	e00a      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c6a:	2305      	movs	r3, #5
 8008c6c:	e008      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c6e:	2304      	movs	r3, #4
 8008c70:	e006      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c72:	2303      	movs	r3, #3
 8008c74:	e004      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e002      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <HAL_GPIO_Init+0x240>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	f002 0203 	and.w	r2, r2, #3
 8008c86:	0092      	lsls	r2, r2, #2
 8008c88:	4093      	lsls	r3, r2
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008c90:	4934      	ldr	r1, [pc, #208]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	089b      	lsrs	r3, r3, #2
 8008c96:	3302      	adds	r3, #2
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c9e:	4b3c      	ldr	r3, [pc, #240]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4013      	ands	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cc2:	4a33      	ldr	r2, [pc, #204]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008cc8:	4b31      	ldr	r3, [pc, #196]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cec:	4a28      	ldr	r2, [pc, #160]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cf2:	4b27      	ldr	r3, [pc, #156]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d1c:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	43db      	mvns	r3, r3
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d40:	4a13      	ldr	r2, [pc, #76]	; (8008d90 <HAL_GPIO_Init+0x350>)
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	61fb      	str	r3, [r7, #28]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b0f      	cmp	r3, #15
 8008d50:	f67f ae86 	bls.w	8008a60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008d54:	bf00      	nop
 8008d56:	3724      	adds	r7, #36	; 0x24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	40023800 	.word	0x40023800
 8008d64:	40013800 	.word	0x40013800
 8008d68:	40020000 	.word	0x40020000
 8008d6c:	40020400 	.word	0x40020400
 8008d70:	40020800 	.word	0x40020800
 8008d74:	40020c00 	.word	0x40020c00
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	40021400 	.word	0x40021400
 8008d80:	40021800 	.word	0x40021800
 8008d84:	40021c00 	.word	0x40021c00
 8008d88:	40022000 	.word	0x40022000
 8008d8c:	40022400 	.word	0x40022400
 8008d90:	40013c00 	.word	0x40013c00

08008d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	887b      	ldrh	r3, [r7, #2]
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008dac:	2301      	movs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	e001      	b.n	8008db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	807b      	strh	r3, [r7, #2]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008dd4:	787b      	ldrb	r3, [r7, #1]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008de0:	e003      	b.n	8008dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008de2:	887b      	ldrh	r3, [r7, #2]
 8008de4:	041a      	lsls	r2, r3, #16
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	619a      	str	r2, [r3, #24]
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	887b      	ldrh	r3, [r7, #2]
 8008e08:	4013      	ands	r3, r2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e0e:	887b      	ldrh	r3, [r7, #2]
 8008e10:	041a      	lsls	r2, r3, #16
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008e16:	e002      	b.n	8008e1e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e18:	887a      	ldrh	r2, [r7, #2]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	619a      	str	r2, [r3, #24]
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e36:	4b08      	ldr	r3, [pc, #32]	; (8008e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e38:	695a      	ldr	r2, [r3, #20]
 8008e3a:	88fb      	ldrh	r3, [r7, #6]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d006      	beq.n	8008e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e42:	4a05      	ldr	r2, [pc, #20]	; (8008e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e44:	88fb      	ldrh	r3, [r7, #6]
 8008e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 f806 	bl	8008e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40013c00 	.word	0x40013c00

08008e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e07f      	b.n	8008f86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7fd fd28 	bl	80068f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2224      	movs	r2, #36	; 0x24
 8008ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d107      	bne.n	8008eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	e006      	b.n	8008efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d104      	bne.n	8008f0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6859      	ldr	r1, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <HAL_I2C_Init+0x11c>)
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	ea42 0103 	orr.w	r1, r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	021a      	lsls	r2, r3, #8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69d9      	ldr	r1, [r3, #28]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	02008000 	.word	0x02008000

08008f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	607a      	str	r2, [r7, #4]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	817b      	strh	r3, [r7, #10]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	f040 80da 	bne.w	800916a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_I2C_Master_Transmit+0x30>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e0d3      	b.n	800916c <HAL_I2C_Master_Transmit+0x1d8>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008fcc:	f7fe fa74 	bl	80074b8 <HAL_GetTick>
 8008fd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2319      	movs	r3, #25
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f9e6 	bl	80093b0 <I2C_WaitOnFlagUntilTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e0be      	b.n	800916c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2221      	movs	r2, #33	; 0x21
 8008ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2210      	movs	r2, #16
 8008ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	893a      	ldrh	r2, [r7, #8]
 800900e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901a:	b29b      	uxth	r3, r3
 800901c:	2bff      	cmp	r3, #255	; 0xff
 800901e:	d90e      	bls.n	800903e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	22ff      	movs	r2, #255	; 0xff
 8009024:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902a:	b2da      	uxtb	r2, r3
 800902c:	8979      	ldrh	r1, [r7, #10]
 800902e:	4b51      	ldr	r3, [pc, #324]	; (8009174 <HAL_I2C_Master_Transmit+0x1e0>)
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fb48 	bl	80096cc <I2C_TransferConfig>
 800903c:	e06c      	b.n	8009118 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904c:	b2da      	uxtb	r2, r3
 800904e:	8979      	ldrh	r1, [r7, #10]
 8009050:	4b48      	ldr	r3, [pc, #288]	; (8009174 <HAL_I2C_Master_Transmit+0x1e0>)
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fb37 	bl	80096cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800905e:	e05b      	b.n	8009118 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	6a39      	ldr	r1, [r7, #32]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f9e3 	bl	8009430 <I2C_WaitOnTXISFlagUntilTimeout>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e07b      	b.n	800916c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	781a      	ldrb	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d034      	beq.n	8009118 <HAL_I2C_Master_Transmit+0x184>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d130      	bne.n	8009118 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	2200      	movs	r2, #0
 80090be:	2180      	movs	r1, #128	; 0x80
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f975 	bl	80093b0 <I2C_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e04d      	b.n	800916c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	2bff      	cmp	r3, #255	; 0xff
 80090d8:	d90e      	bls.n	80090f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	22ff      	movs	r2, #255	; 0xff
 80090de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	8979      	ldrh	r1, [r7, #10]
 80090e8:	2300      	movs	r3, #0
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 faeb 	bl	80096cc <I2C_TransferConfig>
 80090f6:	e00f      	b.n	8009118 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009106:	b2da      	uxtb	r2, r3
 8009108:	8979      	ldrh	r1, [r7, #10]
 800910a:	2300      	movs	r3, #0
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 fada 	bl	80096cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d19e      	bne.n	8009060 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	6a39      	ldr	r1, [r7, #32]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f9c2 	bl	80094b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e01a      	b.n	800916c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2220      	movs	r2, #32
 800913c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6859      	ldr	r1, [r3, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <HAL_I2C_Master_Transmit+0x1e4>)
 800914a:	400b      	ands	r3, r1
 800914c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	e000      	b.n	800916c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800916a:	2302      	movs	r3, #2
  }
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	80002000 	.word	0x80002000
 8009178:	fe00e800 	.word	0xfe00e800

0800917c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	461a      	mov	r2, r3
 8009188:	460b      	mov	r3, r1
 800918a:	817b      	strh	r3, [r7, #10]
 800918c:	4613      	mov	r3, r2
 800918e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b20      	cmp	r3, #32
 800919a:	f040 80db 	bne.w	8009354 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_I2C_Master_Receive+0x30>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e0d4      	b.n	8009356 <HAL_I2C_Master_Receive+0x1da>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091b4:	f7fe f980 	bl	80074b8 <HAL_GetTick>
 80091b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2319      	movs	r3, #25
 80091c0:	2201      	movs	r2, #1
 80091c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f8f2 	bl	80093b0 <I2C_WaitOnFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e0bf      	b.n	8009356 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2222      	movs	r2, #34	; 0x22
 80091da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2210      	movs	r2, #16
 80091e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	893a      	ldrh	r2, [r7, #8]
 80091f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009202:	b29b      	uxth	r3, r3
 8009204:	2bff      	cmp	r3, #255	; 0xff
 8009206:	d90e      	bls.n	8009226 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	22ff      	movs	r2, #255	; 0xff
 800920c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009212:	b2da      	uxtb	r2, r3
 8009214:	8979      	ldrh	r1, [r7, #10]
 8009216:	4b52      	ldr	r3, [pc, #328]	; (8009360 <HAL_I2C_Master_Receive+0x1e4>)
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fa54 	bl	80096cc <I2C_TransferConfig>
 8009224:	e06d      	b.n	8009302 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009234:	b2da      	uxtb	r2, r3
 8009236:	8979      	ldrh	r1, [r7, #10]
 8009238:	4b49      	ldr	r3, [pc, #292]	; (8009360 <HAL_I2C_Master_Receive+0x1e4>)
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 fa43 	bl	80096cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009246:	e05c      	b.n	8009302 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	6a39      	ldr	r1, [r7, #32]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f96b 	bl	8009528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e07c      	b.n	8009356 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009292:	b29b      	uxth	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d034      	beq.n	8009302 <HAL_I2C_Master_Receive+0x186>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d130      	bne.n	8009302 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2200      	movs	r2, #0
 80092a8:	2180      	movs	r1, #128	; 0x80
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 f880 	bl	80093b0 <I2C_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e04d      	b.n	8009356 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2bff      	cmp	r3, #255	; 0xff
 80092c2:	d90e      	bls.n	80092e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	22ff      	movs	r2, #255	; 0xff
 80092c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	8979      	ldrh	r1, [r7, #10]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f9f6 	bl	80096cc <I2C_TransferConfig>
 80092e0:	e00f      	b.n	8009302 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	8979      	ldrh	r1, [r7, #10]
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f9e5 	bl	80096cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009306:	b29b      	uxth	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d19d      	bne.n	8009248 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	6a39      	ldr	r1, [r7, #32]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 f8cd 	bl	80094b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e01a      	b.n	8009356 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2220      	movs	r2, #32
 8009326:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6859      	ldr	r1, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <HAL_I2C_Master_Receive+0x1e8>)
 8009334:	400b      	ands	r3, r1
 8009336:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	e000      	b.n	8009356 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009354:	2302      	movs	r3, #2
  }
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	80002400 	.word	0x80002400
 8009364:	fe00e800 	.word	0xfe00e800

08009368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b02      	cmp	r3, #2
 800937c:	d103      	bne.n	8009386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b01      	cmp	r3, #1
 8009392:	d007      	beq.n	80093a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0201 	orr.w	r2, r2, #1
 80093a2:	619a      	str	r2, [r3, #24]
  }
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	603b      	str	r3, [r7, #0]
 80093bc:	4613      	mov	r3, r2
 80093be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093c0:	e022      	b.n	8009408 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c8:	d01e      	beq.n	8009408 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ca:	f7fe f875 	bl	80074b8 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d302      	bcc.n	80093e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d113      	bne.n	8009408 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e4:	f043 0220 	orr.w	r2, r3, #32
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e00f      	b.n	8009428 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699a      	ldr	r2, [r3, #24]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	4013      	ands	r3, r2
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	429a      	cmp	r2, r3
 8009416:	bf0c      	ite	eq
 8009418:	2301      	moveq	r3, #1
 800941a:	2300      	movne	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	429a      	cmp	r2, r3
 8009424:	d0cd      	beq.n	80093c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800943c:	e02c      	b.n	8009498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 f8dc 	bl	8009600 <I2C_IsAcknowledgeFailed>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e02a      	b.n	80094a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d01e      	beq.n	8009498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945a:	f7fe f82d 	bl	80074b8 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	429a      	cmp	r2, r3
 8009468:	d302      	bcc.n	8009470 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d113      	bne.n	8009498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009474:	f043 0220 	orr.w	r2, r3, #32
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e007      	b.n	80094a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d1cb      	bne.n	800943e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094bc:	e028      	b.n	8009510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	68b9      	ldr	r1, [r7, #8]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 f89c 	bl	8009600 <I2C_IsAcknowledgeFailed>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e026      	b.n	8009520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094d2:	f7fd fff1 	bl	80074b8 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d302      	bcc.n	80094e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d113      	bne.n	8009510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ec:	f043 0220 	orr.w	r2, r3, #32
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e007      	b.n	8009520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b20      	cmp	r3, #32
 800951c:	d1cf      	bne.n	80094be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009534:	e055      	b.n	80095e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 f860 	bl	8009600 <I2C_IsAcknowledgeFailed>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e053      	b.n	80095f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b20      	cmp	r3, #32
 8009556:	d129      	bne.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b04      	cmp	r3, #4
 8009564:	d105      	bne.n	8009572 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	e03f      	b.n	80095f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2220      	movs	r2, #32
 8009578:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6859      	ldr	r1, [r3, #4]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8009586:	400b      	ands	r3, r1
 8009588:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2220      	movs	r2, #32
 8009594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e022      	b.n	80095f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ac:	f7fd ff84 	bl	80074b8 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d302      	bcc.n	80095c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10f      	bne.n	80095e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c6:	f043 0220 	orr.w	r2, r3, #32
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e007      	b.n	80095f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d1a2      	bne.n	8009536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	fe00e800 	.word	0xfe00e800

08009600 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f003 0310 	and.w	r3, r3, #16
 8009616:	2b10      	cmp	r3, #16
 8009618:	d151      	bne.n	80096be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800961a:	e022      	b.n	8009662 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d01e      	beq.n	8009662 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009624:	f7fd ff48 	bl	80074b8 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	429a      	cmp	r2, r3
 8009632:	d302      	bcc.n	800963a <I2C_IsAcknowledgeFailed+0x3a>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d113      	bne.n	8009662 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963e:	f043 0220 	orr.w	r2, r3, #32
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e02e      	b.n	80096c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b20      	cmp	r3, #32
 800966e:	d1d5      	bne.n	800961c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2210      	movs	r2, #16
 8009676:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2220      	movs	r2, #32
 800967e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7ff fe71 	bl	8009368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8009692:	400b      	ands	r3, r1
 8009694:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969a:	f043 0204 	orr.w	r2, r3, #4
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	fe00e800 	.word	0xfe00e800

080096cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	607b      	str	r3, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	817b      	strh	r3, [r7, #10]
 80096da:	4613      	mov	r3, r2
 80096dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	0d5b      	lsrs	r3, r3, #21
 80096e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <I2C_TransferConfig+0x58>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	43db      	mvns	r3, r3
 80096f2:	ea02 0103 	and.w	r1, r2, r3
 80096f6:	897b      	ldrh	r3, [r7, #10]
 80096f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80096fc:	7a7b      	ldrb	r3, [r7, #9]
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009704:	431a      	orrs	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	431a      	orrs	r2, r3
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	431a      	orrs	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	03ff63ff 	.word	0x03ff63ff

08009728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b20      	cmp	r3, #32
 800973c:	d138      	bne.n	80097b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009748:	2302      	movs	r3, #2
 800974a:	e032      	b.n	80097b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2224      	movs	r2, #36	; 0x24
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800977a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6819      	ldr	r1, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0201 	orr.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e000      	b.n	80097b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097b0:	2302      	movs	r3, #2
  }
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	d139      	bne.n	8009848 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097de:	2302      	movs	r3, #2
 80097e0:	e033      	b.n	800984a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2224      	movs	r2, #36	; 0x24
 80097ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0201 	bic.w	r2, r2, #1
 8009800:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009810:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4313      	orrs	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	e000      	b.n	800984a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009848:	2302      	movs	r3, #2
  }
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
	...

08009858 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009860:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009864:	4a0a      	ldr	r2, [pc, #40]	; (8009890 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800986a:	6453      	str	r3, [r2, #68]	; 0x44
 800986c:	4b08      	ldr	r3, [pc, #32]	; (8009890 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800986e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	4905      	ldr	r1, [pc, #20]	; (8009894 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4313      	orrs	r3, r2
 8009882:	604b      	str	r3, [r1, #4]
}
 8009884:	bf00      	nop
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	40023800 	.word	0x40023800
 8009894:	40013800 	.word	0x40013800

08009898 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989a:	b08f      	sub	sp, #60	; 0x3c
 800989c:	af0a      	add	r7, sp, #40	; 0x28
 800989e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e116      	b.n	8009ad8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7fd fb4f 	bl	8006f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2203      	movs	r2, #3
 80098ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f003 fc0d 	bl	800d108 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	687e      	ldr	r6, [r7, #4]
 80098f6:	466d      	mov	r5, sp
 80098f8:	f106 0410 	add.w	r4, r6, #16
 80098fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009904:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009908:	e885 0003 	stmia.w	r5, {r0, r1}
 800990c:	1d33      	adds	r3, r6, #4
 800990e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009910:	6838      	ldr	r0, [r7, #0]
 8009912:	f003 fba1 	bl	800d058 <USB_CoreInit>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e0d7      	b.n	8009ad8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f003 fbfb 	bl	800d12a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	e04a      	b.n	80099d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800993a:	7bfa      	ldrb	r2, [r7, #15]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	333d      	adds	r3, #61	; 0x3d
 800994a:	2201      	movs	r2, #1
 800994c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800994e:	7bfa      	ldrb	r2, [r7, #15]
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	440b      	add	r3, r1
 800995c:	333c      	adds	r3, #60	; 0x3c
 800995e:	7bfa      	ldrb	r2, [r7, #15]
 8009960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009962:	7bfa      	ldrb	r2, [r7, #15]
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	b298      	uxth	r0, r3
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	3342      	adds	r3, #66	; 0x42
 8009976:	4602      	mov	r2, r0
 8009978:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800997a:	7bfa      	ldrb	r2, [r7, #15]
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	333f      	adds	r3, #63	; 0x3f
 800998a:	2200      	movs	r2, #0
 800998c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800998e:	7bfa      	ldrb	r2, [r7, #15]
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3344      	adds	r3, #68	; 0x44
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80099a2:	7bfa      	ldrb	r2, [r7, #15]
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	3348      	adds	r3, #72	; 0x48
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80099b6:	7bfa      	ldrb	r2, [r7, #15]
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	440b      	add	r3, r1
 80099c4:	3350      	adds	r3, #80	; 0x50
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	3301      	adds	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
 80099d0:	7bfa      	ldrb	r2, [r7, #15]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d3af      	bcc.n	800993a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]
 80099de:	e044      	b.n	8009a6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80099e0:	7bfa      	ldrb	r2, [r7, #15]
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	4613      	mov	r3, r2
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	440b      	add	r3, r1
 80099ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80099f6:	7bfa      	ldrb	r2, [r7, #15]
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	440b      	add	r3, r1
 8009a04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009a08:	7bfa      	ldrb	r2, [r7, #15]
 8009a0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a0c:	7bfa      	ldrb	r2, [r7, #15]
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	4613      	mov	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	1a9b      	subs	r3, r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a1e:	2200      	movs	r2, #0
 8009a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009a22:	7bfa      	ldrb	r2, [r7, #15]
 8009a24:	6879      	ldr	r1, [r7, #4]
 8009a26:	4613      	mov	r3, r2
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	440b      	add	r3, r1
 8009a30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a38:	7bfa      	ldrb	r2, [r7, #15]
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	1a9b      	subs	r3, r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a4e:	7bfa      	ldrb	r2, [r7, #15]
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	00db      	lsls	r3, r3, #3
 8009a56:	1a9b      	subs	r3, r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	3301      	adds	r3, #1
 8009a68:	73fb      	strb	r3, [r7, #15]
 8009a6a:	7bfa      	ldrb	r2, [r7, #15]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d3b5      	bcc.n	80099e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	603b      	str	r3, [r7, #0]
 8009a7a:	687e      	ldr	r6, [r7, #4]
 8009a7c:	466d      	mov	r5, sp
 8009a7e:	f106 0410 	add.w	r4, r6, #16
 8009a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a92:	1d33      	adds	r3, r6, #4
 8009a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a96:	6838      	ldr	r0, [r7, #0]
 8009a98:	f003 fb72 	bl	800d180 <USB_DevInit>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e014      	b.n	8009ad8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d102      	bne.n	8009acc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f80a 	bl	8009ae0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f003 fd24 	bl	800d51e <USB_DevDisconnect>

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ae0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b0e:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <HAL_PCDEx_ActivateLPM+0x44>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	10000003 	.word	0x10000003

08009b28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b36:	6013      	str	r3, [r2, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	40007000 	.word	0x40007000

08009b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e29b      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 8087 	beq.w	8009c7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b6c:	4b96      	ldr	r3, [pc, #600]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f003 030c 	and.w	r3, r3, #12
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d00c      	beq.n	8009b92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b78:	4b93      	ldr	r3, [pc, #588]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f003 030c 	and.w	r3, r3, #12
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d112      	bne.n	8009baa <HAL_RCC_OscConfig+0x62>
 8009b84:	4b90      	ldr	r3, [pc, #576]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b90:	d10b      	bne.n	8009baa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b92:	4b8d      	ldr	r3, [pc, #564]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d06c      	beq.n	8009c78 <HAL_RCC_OscConfig+0x130>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d168      	bne.n	8009c78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e275      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb2:	d106      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x7a>
 8009bb4:	4b84      	ldr	r3, [pc, #528]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a83      	ldr	r2, [pc, #524]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	e02e      	b.n	8009c20 <HAL_RCC_OscConfig+0xd8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10c      	bne.n	8009be4 <HAL_RCC_OscConfig+0x9c>
 8009bca:	4b7f      	ldr	r3, [pc, #508]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a7e      	ldr	r2, [pc, #504]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	4b7c      	ldr	r3, [pc, #496]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a7b      	ldr	r2, [pc, #492]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e01d      	b.n	8009c20 <HAL_RCC_OscConfig+0xd8>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bec:	d10c      	bne.n	8009c08 <HAL_RCC_OscConfig+0xc0>
 8009bee:	4b76      	ldr	r3, [pc, #472]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a75      	ldr	r2, [pc, #468]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	4b73      	ldr	r3, [pc, #460]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a72      	ldr	r2, [pc, #456]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	e00b      	b.n	8009c20 <HAL_RCC_OscConfig+0xd8>
 8009c08:	4b6f      	ldr	r3, [pc, #444]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a6e      	ldr	r2, [pc, #440]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	4b6c      	ldr	r3, [pc, #432]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a6b      	ldr	r2, [pc, #428]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d013      	beq.n	8009c50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7fd fc46 	bl	80074b8 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c30:	f7fd fc42 	bl	80074b8 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b64      	cmp	r3, #100	; 0x64
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e229      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c42:	4b61      	ldr	r3, [pc, #388]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f0      	beq.n	8009c30 <HAL_RCC_OscConfig+0xe8>
 8009c4e:	e014      	b.n	8009c7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c50:	f7fd fc32 	bl	80074b8 <HAL_GetTick>
 8009c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c58:	f7fd fc2e 	bl	80074b8 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b64      	cmp	r3, #100	; 0x64
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e215      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c6a:	4b57      	ldr	r3, [pc, #348]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f0      	bne.n	8009c58 <HAL_RCC_OscConfig+0x110>
 8009c76:	e000      	b.n	8009c7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d069      	beq.n	8009d5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c86:	4b50      	ldr	r3, [pc, #320]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 030c 	and.w	r3, r3, #12
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c92:	4b4d      	ldr	r3, [pc, #308]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 030c 	and.w	r3, r3, #12
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d11c      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x190>
 8009c9e:	4b4a      	ldr	r3, [pc, #296]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d116      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009caa:	4b47      	ldr	r3, [pc, #284]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x17a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d001      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e1e9      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cc2:	4b41      	ldr	r3, [pc, #260]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	493d      	ldr	r1, [pc, #244]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cd6:	e040      	b.n	8009d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d023      	beq.n	8009d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ce0:	4b39      	ldr	r3, [pc, #228]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a38      	ldr	r2, [pc, #224]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cec:	f7fd fbe4 	bl	80074b8 <HAL_GetTick>
 8009cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cf2:	e008      	b.n	8009d06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cf4:	f7fd fbe0 	bl	80074b8 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d901      	bls.n	8009d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e1c7      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d06:	4b30      	ldr	r3, [pc, #192]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0f0      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d12:	4b2d      	ldr	r3, [pc, #180]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	4929      	ldr	r1, [pc, #164]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	600b      	str	r3, [r1, #0]
 8009d26:	e018      	b.n	8009d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d28:	4b27      	ldr	r3, [pc, #156]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a26      	ldr	r2, [pc, #152]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d34:	f7fd fbc0 	bl	80074b8 <HAL_GetTick>
 8009d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d3a:	e008      	b.n	8009d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d3c:	f7fd fbbc 	bl	80074b8 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e1a3      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d4e:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f0      	bne.n	8009d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0308 	and.w	r3, r3, #8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d038      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d019      	beq.n	8009da2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d6e:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d72:	4a15      	ldr	r2, [pc, #84]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d74:	f043 0301 	orr.w	r3, r3, #1
 8009d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d7a:	f7fd fb9d 	bl	80074b8 <HAL_GetTick>
 8009d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d80:	e008      	b.n	8009d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d82:	f7fd fb99 	bl	80074b8 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e180      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d94:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0f0      	beq.n	8009d82 <HAL_RCC_OscConfig+0x23a>
 8009da0:	e01a      	b.n	8009dd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009da2:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da6:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <HAL_RCC_OscConfig+0x280>)
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dae:	f7fd fb83 	bl	80074b8 <HAL_GetTick>
 8009db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009db4:	e00a      	b.n	8009dcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009db6:	f7fd fb7f 	bl	80074b8 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d903      	bls.n	8009dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e166      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
 8009dc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009dcc:	4b92      	ldr	r3, [pc, #584]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1ee      	bne.n	8009db6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80a4 	beq.w	8009f2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009de6:	4b8c      	ldr	r3, [pc, #560]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10d      	bne.n	8009e0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009df2:	4b89      	ldr	r3, [pc, #548]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	4a88      	ldr	r2, [pc, #544]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8009dfe:	4b86      	ldr	r3, [pc, #536]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e06:	60bb      	str	r3, [r7, #8]
 8009e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e0e:	4b83      	ldr	r3, [pc, #524]	; (800a01c <HAL_RCC_OscConfig+0x4d4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d118      	bne.n	8009e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009e1a:	4b80      	ldr	r3, [pc, #512]	; (800a01c <HAL_RCC_OscConfig+0x4d4>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a7f      	ldr	r2, [pc, #508]	; (800a01c <HAL_RCC_OscConfig+0x4d4>)
 8009e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e26:	f7fd fb47 	bl	80074b8 <HAL_GetTick>
 8009e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e2c:	e008      	b.n	8009e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e2e:	f7fd fb43 	bl	80074b8 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	2b64      	cmp	r3, #100	; 0x64
 8009e3a:	d901      	bls.n	8009e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e12a      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e40:	4b76      	ldr	r3, [pc, #472]	; (800a01c <HAL_RCC_OscConfig+0x4d4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d0f0      	beq.n	8009e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d106      	bne.n	8009e62 <HAL_RCC_OscConfig+0x31a>
 8009e54:	4b70      	ldr	r3, [pc, #448]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e58:	4a6f      	ldr	r2, [pc, #444]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e60:	e02d      	b.n	8009ebe <HAL_RCC_OscConfig+0x376>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10c      	bne.n	8009e84 <HAL_RCC_OscConfig+0x33c>
 8009e6a:	4b6b      	ldr	r3, [pc, #428]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6e:	4a6a      	ldr	r2, [pc, #424]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e70:	f023 0301 	bic.w	r3, r3, #1
 8009e74:	6713      	str	r3, [r2, #112]	; 0x70
 8009e76:	4b68      	ldr	r3, [pc, #416]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7a:	4a67      	ldr	r2, [pc, #412]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e7c:	f023 0304 	bic.w	r3, r3, #4
 8009e80:	6713      	str	r3, [r2, #112]	; 0x70
 8009e82:	e01c      	b.n	8009ebe <HAL_RCC_OscConfig+0x376>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	2b05      	cmp	r3, #5
 8009e8a:	d10c      	bne.n	8009ea6 <HAL_RCC_OscConfig+0x35e>
 8009e8c:	4b62      	ldr	r3, [pc, #392]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e90:	4a61      	ldr	r2, [pc, #388]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e92:	f043 0304 	orr.w	r3, r3, #4
 8009e96:	6713      	str	r3, [r2, #112]	; 0x70
 8009e98:	4b5f      	ldr	r3, [pc, #380]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9c:	4a5e      	ldr	r2, [pc, #376]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ea4:	e00b      	b.n	8009ebe <HAL_RCC_OscConfig+0x376>
 8009ea6:	4b5c      	ldr	r3, [pc, #368]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eaa:	4a5b      	ldr	r2, [pc, #364]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8009eb2:	4b59      	ldr	r3, [pc, #356]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb6:	4a58      	ldr	r2, [pc, #352]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009eb8:	f023 0304 	bic.w	r3, r3, #4
 8009ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d015      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec6:	f7fd faf7 	bl	80074b8 <HAL_GetTick>
 8009eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ecc:	e00a      	b.n	8009ee4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ece:	f7fd faf3 	bl	80074b8 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d901      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e0d8      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ee4:	4b4c      	ldr	r3, [pc, #304]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0ee      	beq.n	8009ece <HAL_RCC_OscConfig+0x386>
 8009ef0:	e014      	b.n	8009f1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef2:	f7fd fae1 	bl	80074b8 <HAL_GetTick>
 8009ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ef8:	e00a      	b.n	8009f10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009efa:	f7fd fadd 	bl	80074b8 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d901      	bls.n	8009f10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e0c2      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f10:	4b41      	ldr	r3, [pc, #260]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ee      	bne.n	8009efa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d105      	bne.n	8009f2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f22:	4b3d      	ldr	r3, [pc, #244]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	4a3c      	ldr	r2, [pc, #240]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80ae 	beq.w	800a094 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f38:	4b37      	ldr	r3, [pc, #220]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 030c 	and.w	r3, r3, #12
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d06d      	beq.n	800a020 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d14b      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f4c:	4b32      	ldr	r3, [pc, #200]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a31      	ldr	r2, [pc, #196]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f58:	f7fd faae 	bl	80074b8 <HAL_GetTick>
 8009f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f5e:	e008      	b.n	8009f72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f60:	f7fd faaa 	bl	80074b8 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e091      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f72:	4b29      	ldr	r3, [pc, #164]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1f0      	bne.n	8009f60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69da      	ldr	r2, [r3, #28]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	431a      	orrs	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	019b      	lsls	r3, r3, #6
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f94:	085b      	lsrs	r3, r3, #1
 8009f96:	3b01      	subs	r3, #1
 8009f98:	041b      	lsls	r3, r3, #16
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	061b      	lsls	r3, r3, #24
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa8:	071b      	lsls	r3, r3, #28
 8009faa:	491b      	ldr	r1, [pc, #108]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fb0:	4b19      	ldr	r3, [pc, #100]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a18      	ldr	r2, [pc, #96]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fbc:	f7fd fa7c 	bl	80074b8 <HAL_GetTick>
 8009fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fc2:	e008      	b.n	8009fd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fc4:	f7fd fa78 	bl	80074b8 <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d901      	bls.n	8009fd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e05f      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fd6:	4b10      	ldr	r3, [pc, #64]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0f0      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x47c>
 8009fe2:	e057      	b.n	800a094 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fe4:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 8009fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff0:	f7fd fa62 	bl	80074b8 <HAL_GetTick>
 8009ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ff6:	e008      	b.n	800a00a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ff8:	f7fd fa5e 	bl	80074b8 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	2b02      	cmp	r3, #2
 800a004:	d901      	bls.n	800a00a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e045      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a00a:	4b03      	ldr	r3, [pc, #12]	; (800a018 <HAL_RCC_OscConfig+0x4d0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f0      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x4b0>
 800a016:	e03d      	b.n	800a094 <HAL_RCC_OscConfig+0x54c>
 800a018:	40023800 	.word	0x40023800
 800a01c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a020:	4b1f      	ldr	r3, [pc, #124]	; (800a0a0 <HAL_RCC_OscConfig+0x558>)
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d030      	beq.n	800a090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a038:	429a      	cmp	r2, r3
 800a03a:	d129      	bne.n	800a090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a046:	429a      	cmp	r2, r3
 800a048:	d122      	bne.n	800a090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a050:	4013      	ands	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a056:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a058:	4293      	cmp	r3, r2
 800a05a:	d119      	bne.n	800a090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	085b      	lsrs	r3, r3, #1
 800a068:	3b01      	subs	r3, #1
 800a06a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d10f      	bne.n	800a090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d107      	bne.n	800a090 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d001      	beq.n	800a094 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40023800 	.word	0x40023800

0800a0a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0d0      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0bc:	4b6a      	ldr	r3, [pc, #424]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d910      	bls.n	800a0ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ca:	4b67      	ldr	r3, [pc, #412]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f023 020f 	bic.w	r2, r3, #15
 800a0d2:	4965      	ldr	r1, [pc, #404]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0da:	4b63      	ldr	r3, [pc, #396]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d001      	beq.n	800a0ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0b8      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d020      	beq.n	800a13a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a104:	4b59      	ldr	r3, [pc, #356]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	4a58      	ldr	r2, [pc, #352]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a10a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a10e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a11c:	4b53      	ldr	r3, [pc, #332]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	4a52      	ldr	r2, [pc, #328]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a128:	4b50      	ldr	r3, [pc, #320]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	494d      	ldr	r1, [pc, #308]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a136:	4313      	orrs	r3, r2
 800a138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d040      	beq.n	800a1c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d107      	bne.n	800a15e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a14e:	4b47      	ldr	r3, [pc, #284]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d115      	bne.n	800a186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e07f      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b02      	cmp	r3, #2
 800a164:	d107      	bne.n	800a176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a166:	4b41      	ldr	r3, [pc, #260]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d109      	bne.n	800a186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e073      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a176:	4b3d      	ldr	r3, [pc, #244]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e06b      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a186:	4b39      	ldr	r3, [pc, #228]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	f023 0203 	bic.w	r2, r3, #3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	4936      	ldr	r1, [pc, #216]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a194:	4313      	orrs	r3, r2
 800a196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a198:	f7fd f98e 	bl	80074b8 <HAL_GetTick>
 800a19c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a19e:	e00a      	b.n	800a1b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1a0:	f7fd f98a 	bl	80074b8 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d901      	bls.n	800a1b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e053      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1b6:	4b2d      	ldr	r3, [pc, #180]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 020c 	and.w	r2, r3, #12
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d1eb      	bne.n	800a1a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1c8:	4b27      	ldr	r3, [pc, #156]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 030f 	and.w	r3, r3, #15
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d210      	bcs.n	800a1f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1d6:	4b24      	ldr	r3, [pc, #144]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f023 020f 	bic.w	r2, r3, #15
 800a1de:	4922      	ldr	r1, [pc, #136]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1e6:	4b20      	ldr	r3, [pc, #128]	; (800a268 <HAL_RCC_ClockConfig+0x1c4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 030f 	and.w	r3, r3, #15
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d001      	beq.n	800a1f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e032      	b.n	800a25e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d008      	beq.n	800a216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a204:	4b19      	ldr	r3, [pc, #100]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4916      	ldr	r1, [pc, #88]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a212:	4313      	orrs	r3, r2
 800a214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0308 	and.w	r3, r3, #8
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a222:	4b12      	ldr	r3, [pc, #72]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	490e      	ldr	r1, [pc, #56]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a232:	4313      	orrs	r3, r2
 800a234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a236:	f000 f821 	bl	800a27c <HAL_RCC_GetSysClockFreq>
 800a23a:	4601      	mov	r1, r0
 800a23c:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <HAL_RCC_ClockConfig+0x1c8>)
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	091b      	lsrs	r3, r3, #4
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	4a0a      	ldr	r2, [pc, #40]	; (800a270 <HAL_RCC_ClockConfig+0x1cc>)
 800a248:	5cd3      	ldrb	r3, [r2, r3]
 800a24a:	fa21 f303 	lsr.w	r3, r1, r3
 800a24e:	4a09      	ldr	r2, [pc, #36]	; (800a274 <HAL_RCC_ClockConfig+0x1d0>)
 800a250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <HAL_RCC_ClockConfig+0x1d4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f7fc fed4 	bl	8007004 <HAL_InitTick>

  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	40023c00 	.word	0x40023c00
 800a26c:	40023800 	.word	0x40023800
 800a270:	08015060 	.word	0x08015060
 800a274:	20000188 	.word	0x20000188
 800a278:	2000018c 	.word	0x2000018c

0800a27c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	607b      	str	r3, [r7, #4]
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	2300      	movs	r3, #0
 800a28c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a292:	4b50      	ldr	r3, [pc, #320]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x158>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 030c 	and.w	r3, r3, #12
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d007      	beq.n	800a2ae <HAL_RCC_GetSysClockFreq+0x32>
 800a29e:	2b08      	cmp	r3, #8
 800a2a0:	d008      	beq.n	800a2b4 <HAL_RCC_GetSysClockFreq+0x38>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f040 808d 	bne.w	800a3c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2a8:	4b4b      	ldr	r3, [pc, #300]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a2aa:	60bb      	str	r3, [r7, #8]
      break;
 800a2ac:	e08c      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a2ae:	4b4b      	ldr	r3, [pc, #300]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x160>)
 800a2b0:	60bb      	str	r3, [r7, #8]
      break;
 800a2b2:	e089      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a2b4:	4b47      	ldr	r3, [pc, #284]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x158>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a2be:	4b45      	ldr	r3, [pc, #276]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x158>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d023      	beq.n	800a312 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2ca:	4b42      	ldr	r3, [pc, #264]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x158>)
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	099b      	lsrs	r3, r3, #6
 800a2d0:	f04f 0400 	mov.w	r4, #0
 800a2d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a2d8:	f04f 0200 	mov.w	r2, #0
 800a2dc:	ea03 0501 	and.w	r5, r3, r1
 800a2e0:	ea04 0602 	and.w	r6, r4, r2
 800a2e4:	4a3d      	ldr	r2, [pc, #244]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x160>)
 800a2e6:	fb02 f106 	mul.w	r1, r2, r6
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	fb02 f205 	mul.w	r2, r2, r5
 800a2f0:	440a      	add	r2, r1
 800a2f2:	493a      	ldr	r1, [pc, #232]	; (800a3dc <HAL_RCC_GetSysClockFreq+0x160>)
 800a2f4:	fba5 0101 	umull	r0, r1, r5, r1
 800a2f8:	1853      	adds	r3, r2, r1
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f04f 0400 	mov.w	r4, #0
 800a302:	461a      	mov	r2, r3
 800a304:	4623      	mov	r3, r4
 800a306:	f7f5 fff3 	bl	80002f0 <__aeabi_uldivmod>
 800a30a:	4603      	mov	r3, r0
 800a30c:	460c      	mov	r4, r1
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e049      	b.n	800a3a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a312:	4b30      	ldr	r3, [pc, #192]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x158>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	099b      	lsrs	r3, r3, #6
 800a318:	f04f 0400 	mov.w	r4, #0
 800a31c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a320:	f04f 0200 	mov.w	r2, #0
 800a324:	ea03 0501 	and.w	r5, r3, r1
 800a328:	ea04 0602 	and.w	r6, r4, r2
 800a32c:	4629      	mov	r1, r5
 800a32e:	4632      	mov	r2, r6
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	f04f 0400 	mov.w	r4, #0
 800a338:	0154      	lsls	r4, r2, #5
 800a33a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a33e:	014b      	lsls	r3, r1, #5
 800a340:	4619      	mov	r1, r3
 800a342:	4622      	mov	r2, r4
 800a344:	1b49      	subs	r1, r1, r5
 800a346:	eb62 0206 	sbc.w	r2, r2, r6
 800a34a:	f04f 0300 	mov.w	r3, #0
 800a34e:	f04f 0400 	mov.w	r4, #0
 800a352:	0194      	lsls	r4, r2, #6
 800a354:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a358:	018b      	lsls	r3, r1, #6
 800a35a:	1a5b      	subs	r3, r3, r1
 800a35c:	eb64 0402 	sbc.w	r4, r4, r2
 800a360:	f04f 0100 	mov.w	r1, #0
 800a364:	f04f 0200 	mov.w	r2, #0
 800a368:	00e2      	lsls	r2, r4, #3
 800a36a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a36e:	00d9      	lsls	r1, r3, #3
 800a370:	460b      	mov	r3, r1
 800a372:	4614      	mov	r4, r2
 800a374:	195b      	adds	r3, r3, r5
 800a376:	eb44 0406 	adc.w	r4, r4, r6
 800a37a:	f04f 0100 	mov.w	r1, #0
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	02a2      	lsls	r2, r4, #10
 800a384:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a388:	0299      	lsls	r1, r3, #10
 800a38a:	460b      	mov	r3, r1
 800a38c:	4614      	mov	r4, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	4621      	mov	r1, r4
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f04f 0400 	mov.w	r4, #0
 800a398:	461a      	mov	r2, r3
 800a39a:	4623      	mov	r3, r4
 800a39c:	f7f5 ffa8 	bl	80002f0 <__aeabi_uldivmod>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x158>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	0c1b      	lsrs	r3, r3, #16
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3be:	60bb      	str	r3, [r7, #8]
      break;
 800a3c0:	e002      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a3c2:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a3c4:	60bb      	str	r3, [r7, #8]
      break;
 800a3c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	40023800 	.word	0x40023800
 800a3d8:	00f42400 	.word	0x00f42400
 800a3dc:	017d7840 	.word	0x017d7840

0800a3e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3e4:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000188 	.word	0x20000188

0800a3f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a3fc:	f7ff fff0 	bl	800a3e0 <HAL_RCC_GetHCLKFreq>
 800a400:	4601      	mov	r1, r0
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	0a9b      	lsrs	r3, r3, #10
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	4a03      	ldr	r2, [pc, #12]	; (800a41c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a40e:	5cd3      	ldrb	r3, [r2, r3]
 800a410:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40023800 	.word	0x40023800
 800a41c:	08015070 	.word	0x08015070

0800a420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a424:	f7ff ffdc 	bl	800a3e0 <HAL_RCC_GetHCLKFreq>
 800a428:	4601      	mov	r1, r0
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	0b5b      	lsrs	r3, r3, #13
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	4a03      	ldr	r2, [pc, #12]	; (800a444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a436:	5cd3      	ldrb	r3, [r2, r3]
 800a438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	40023800 	.word	0x40023800
 800a444:	08015070 	.word	0x08015070

0800a448 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	220f      	movs	r2, #15
 800a456:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a458:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <HAL_RCC_GetClockConfig+0x5c>)
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f003 0203 	and.w	r2, r3, #3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a464:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <HAL_RCC_GetClockConfig+0x5c>)
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a470:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <HAL_RCC_GetClockConfig+0x5c>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a47c:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <HAL_RCC_GetClockConfig+0x5c>)
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	08db      	lsrs	r3, r3, #3
 800a482:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a48a:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <HAL_RCC_GetClockConfig+0x60>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 020f 	and.w	r2, r3, #15
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	601a      	str	r2, [r3, #0]
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	40023800 	.word	0x40023800
 800a4a8:	40023c00 	.word	0x40023c00

0800a4ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d012      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a4d4:	4b69      	ldr	r3, [pc, #420]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	4a68      	ldr	r2, [pc, #416]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a4de:	6093      	str	r3, [r2, #8]
 800a4e0:	4b66      	ldr	r3, [pc, #408]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e8:	4964      	ldr	r1, [pc, #400]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d017      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a506:	4b5d      	ldr	r3, [pc, #372]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a514:	4959      	ldr	r1, [pc, #356]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a516:	4313      	orrs	r3, r2
 800a518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a524:	d101      	bne.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a526:	2301      	movs	r3, #1
 800a528:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a532:	2301      	movs	r3, #1
 800a534:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d017      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a542:	4b4e      	ldr	r3, [pc, #312]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a548:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	494a      	ldr	r1, [pc, #296]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a552:	4313      	orrs	r3, r2
 800a554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a560:	d101      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a562:	2301      	movs	r3, #1
 800a564:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a56e:	2301      	movs	r3, #1
 800a570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a57e:	2301      	movs	r3, #1
 800a580:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 808b 	beq.w	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a590:	4b3a      	ldr	r3, [pc, #232]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a594:	4a39      	ldr	r2, [pc, #228]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a59a:	6413      	str	r3, [r2, #64]	; 0x40
 800a59c:	4b37      	ldr	r3, [pc, #220]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5a4:	60bb      	str	r3, [r7, #8]
 800a5a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5a8:	4b35      	ldr	r3, [pc, #212]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a34      	ldr	r2, [pc, #208]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b4:	f7fc ff80 	bl	80074b8 <HAL_GetTick>
 800a5b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5ba:	e008      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5bc:	f7fc ff7c 	bl	80074b8 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b64      	cmp	r3, #100	; 0x64
 800a5c8:	d901      	bls.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e38d      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5ce:	4b2c      	ldr	r3, [pc, #176]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f0      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a5da:	4b28      	ldr	r3, [pc, #160]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d035      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d02e      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5f8:	4b20      	ldr	r3, [pc, #128]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a600:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a602:	4b1e      	ldr	r3, [pc, #120]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a606:	4a1d      	ldr	r2, [pc, #116]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a60c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a60e:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a612:	4a1a      	ldr	r2, [pc, #104]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a618:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a61a:	4a18      	ldr	r2, [pc, #96]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a620:	4b16      	ldr	r3, [pc, #88]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d114      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a62c:	f7fc ff44 	bl	80074b8 <HAL_GetTick>
 800a630:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a632:	e00a      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a634:	f7fc ff40 	bl	80074b8 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a642:	4293      	cmp	r3, r2
 800a644:	d901      	bls.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e34f      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a64a:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0ee      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a65e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a662:	d111      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a672:	400b      	ands	r3, r1
 800a674:	4901      	ldr	r1, [pc, #4]	; (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a676:	4313      	orrs	r3, r2
 800a678:	608b      	str	r3, [r1, #8]
 800a67a:	e00b      	b.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a67c:	40023800 	.word	0x40023800
 800a680:	40007000 	.word	0x40007000
 800a684:	0ffffcff 	.word	0x0ffffcff
 800a688:	4bb3      	ldr	r3, [pc, #716]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	4ab2      	ldr	r2, [pc, #712]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a68e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a692:	6093      	str	r3, [r2, #8]
 800a694:	4bb0      	ldr	r3, [pc, #704]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6a0:	49ad      	ldr	r1, [pc, #692]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0310 	and.w	r3, r3, #16
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d010      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6b2:	4ba9      	ldr	r3, [pc, #676]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6b8:	4aa7      	ldr	r2, [pc, #668]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a6c2:	4ba5      	ldr	r3, [pc, #660]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	49a2      	ldr	r1, [pc, #648]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00a      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6e0:	4b9d      	ldr	r3, [pc, #628]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ee:	499a      	ldr	r1, [pc, #616]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a702:	4b95      	ldr	r3, [pc, #596]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a708:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a710:	4991      	ldr	r1, [pc, #580]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a712:	4313      	orrs	r3, r2
 800a714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00a      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a724:	4b8c      	ldr	r3, [pc, #560]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a72a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a732:	4989      	ldr	r1, [pc, #548]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a734:	4313      	orrs	r3, r2
 800a736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00a      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a746:	4b84      	ldr	r3, [pc, #528]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a754:	4980      	ldr	r1, [pc, #512]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a756:	4313      	orrs	r3, r2
 800a758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00a      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a768:	4b7b      	ldr	r3, [pc, #492]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76e:	f023 0203 	bic.w	r2, r3, #3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a776:	4978      	ldr	r1, [pc, #480]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a778:	4313      	orrs	r3, r2
 800a77a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a78a:	4b73      	ldr	r3, [pc, #460]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a78c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a790:	f023 020c 	bic.w	r2, r3, #12
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a798:	496f      	ldr	r1, [pc, #444]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00a      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a7ac:	4b6a      	ldr	r3, [pc, #424]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ba:	4967      	ldr	r1, [pc, #412]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a7ce:	4b62      	ldr	r3, [pc, #392]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7dc:	495e      	ldr	r1, [pc, #376]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a7f0:	4b59      	ldr	r3, [pc, #356]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fe:	4956      	ldr	r1, [pc, #344]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a800:	4313      	orrs	r3, r2
 800a802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a812:	4b51      	ldr	r3, [pc, #324]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a818:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a820:	494d      	ldr	r1, [pc, #308]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a822:	4313      	orrs	r3, r2
 800a824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00a      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a834:	4b48      	ldr	r3, [pc, #288]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a83a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a842:	4945      	ldr	r1, [pc, #276]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a844:	4313      	orrs	r3, r2
 800a846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a856:	4b40      	ldr	r3, [pc, #256]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a85c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a864:	493c      	ldr	r1, [pc, #240]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a866:	4313      	orrs	r3, r2
 800a868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00a      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a878:	4b37      	ldr	r3, [pc, #220]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a87e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a886:	4934      	ldr	r1, [pc, #208]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d011      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a89a:	4b2f      	ldr	r3, [pc, #188]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a8:	492b      	ldr	r1, [pc, #172]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8b8:	d101      	bne.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8da:	4b1f      	ldr	r3, [pc, #124]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e8:	491b      	ldr	r1, [pc, #108]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00b      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a8fc:	4b16      	ldr	r3, [pc, #88]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a902:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a90c:	4912      	ldr	r1, [pc, #72]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a920:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a926:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a930:	4909      	ldr	r1, [pc, #36]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a932:	4313      	orrs	r3, r2
 800a934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00f      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a944:	4b04      	ldr	r3, [pc, #16]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a94a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a954:	e002      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800a956:	bf00      	nop
 800a958:	40023800 	.word	0x40023800
 800a95c:	4985      	ldr	r1, [pc, #532]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a970:	4b80      	ldr	r3, [pc, #512]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a976:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a980:	497c      	ldr	r1, [pc, #496]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a982:	4313      	orrs	r3, r2
 800a984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d005      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a996:	f040 80d6 	bne.w	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a99a:	4b76      	ldr	r3, [pc, #472]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a75      	ldr	r2, [pc, #468]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9a6:	f7fc fd87 	bl	80074b8 <HAL_GetTick>
 800a9aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a9ac:	e008      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a9ae:	f7fc fd83 	bl	80074b8 <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	2b64      	cmp	r3, #100	; 0x64
 800a9ba:	d901      	bls.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e194      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a9c0:	4b6c      	ldr	r3, [pc, #432]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f0      	bne.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d021      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x570>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d11d      	bne.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a9e0:	4b64      	ldr	r3, [pc, #400]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e6:	0c1b      	lsrs	r3, r3, #16
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a9ee:	4b61      	ldr	r3, [pc, #388]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a9f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9f4:	0e1b      	lsrs	r3, r3, #24
 800a9f6:	f003 030f 	and.w	r3, r3, #15
 800a9fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	019a      	lsls	r2, r3, #6
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	041b      	lsls	r3, r3, #16
 800aa06:	431a      	orrs	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	061b      	lsls	r3, r3, #24
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	071b      	lsls	r3, r3, #28
 800aa14:	4957      	ldr	r1, [pc, #348]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa30:	d00a      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d02e      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa46:	d129      	bne.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa48:	4b4a      	ldr	r3, [pc, #296]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa4e:	0c1b      	lsrs	r3, r3, #16
 800aa50:	f003 0303 	and.w	r3, r3, #3
 800aa54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa56:	4b47      	ldr	r3, [pc, #284]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa5c:	0f1b      	lsrs	r3, r3, #28
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	019a      	lsls	r2, r3, #6
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	041b      	lsls	r3, r3, #16
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	061b      	lsls	r3, r3, #24
 800aa76:	431a      	orrs	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	071b      	lsls	r3, r3, #28
 800aa7c:	493d      	ldr	r1, [pc, #244]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aa84:	4b3b      	ldr	r3, [pc, #236]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8a:	f023 021f 	bic.w	r2, r3, #31
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	3b01      	subs	r3, #1
 800aa94:	4937      	ldr	r1, [pc, #220]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01d      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aaa8:	4b32      	ldr	r3, [pc, #200]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aaaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaae:	0e1b      	lsrs	r3, r3, #24
 800aab0:	f003 030f 	and.w	r3, r3, #15
 800aab4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aab6:	4b2f      	ldr	r3, [pc, #188]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aabc:	0f1b      	lsrs	r3, r3, #28
 800aabe:	f003 0307 	and.w	r3, r3, #7
 800aac2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	019a      	lsls	r2, r3, #6
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	041b      	lsls	r3, r3, #16
 800aad0:	431a      	orrs	r2, r3
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	061b      	lsls	r3, r3, #24
 800aad6:	431a      	orrs	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	071b      	lsls	r3, r3, #28
 800aadc:	4925      	ldr	r1, [pc, #148]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d011      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	019a      	lsls	r2, r3, #6
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	041b      	lsls	r3, r3, #16
 800aafc:	431a      	orrs	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	061b      	lsls	r3, r3, #24
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	071b      	lsls	r3, r3, #28
 800ab0c:	4919      	ldr	r1, [pc, #100]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ab14:	4b17      	ldr	r3, [pc, #92]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a16      	ldr	r2, [pc, #88]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab20:	f7fc fcca 	bl	80074b8 <HAL_GetTick>
 800ab24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab26:	e008      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ab28:	f7fc fcc6 	bl	80074b8 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b64      	cmp	r3, #100	; 0x64
 800ab34:	d901      	bls.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e0d7      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0f0      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	f040 80cd 	bne.w	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ab4e:	4b09      	ldr	r3, [pc, #36]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a08      	ldr	r2, [pc, #32]	; (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ab54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab5a:	f7fc fcad 	bl	80074b8 <HAL_GetTick>
 800ab5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab60:	e00a      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ab62:	f7fc fca9 	bl	80074b8 <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	2b64      	cmp	r3, #100	; 0x64
 800ab6e:	d903      	bls.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e0ba      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800ab74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab78:	4b5e      	ldr	r3, [pc, #376]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab84:	d0ed      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d02e      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d12a      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800abae:	4b51      	ldr	r3, [pc, #324]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb4:	0c1b      	lsrs	r3, r3, #16
 800abb6:	f003 0303 	and.w	r3, r3, #3
 800abba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800abbc:	4b4d      	ldr	r3, [pc, #308]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc2:	0f1b      	lsrs	r3, r3, #28
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	019a      	lsls	r2, r3, #6
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	041b      	lsls	r3, r3, #16
 800abd4:	431a      	orrs	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	061b      	lsls	r3, r3, #24
 800abdc:	431a      	orrs	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	071b      	lsls	r3, r3, #28
 800abe2:	4944      	ldr	r1, [pc, #272]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abe4:	4313      	orrs	r3, r2
 800abe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800abea:	4b42      	ldr	r3, [pc, #264]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf8:	3b01      	subs	r3, #1
 800abfa:	021b      	lsls	r3, r3, #8
 800abfc:	493d      	ldr	r1, [pc, #244]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d022      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac18:	d11d      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac1a:	4b36      	ldr	r3, [pc, #216]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac20:	0e1b      	lsrs	r3, r3, #24
 800ac22:	f003 030f 	and.w	r3, r3, #15
 800ac26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ac28:	4b32      	ldr	r3, [pc, #200]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2e:	0f1b      	lsrs	r3, r3, #28
 800ac30:	f003 0307 	and.w	r3, r3, #7
 800ac34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	019a      	lsls	r2, r3, #6
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a1b      	ldr	r3, [r3, #32]
 800ac40:	041b      	lsls	r3, r3, #16
 800ac42:	431a      	orrs	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	061b      	lsls	r3, r3, #24
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	071b      	lsls	r3, r3, #28
 800ac4e:	4929      	ldr	r1, [pc, #164]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac50:	4313      	orrs	r3, r2
 800ac52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0308 	and.w	r3, r3, #8
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d028      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac62:	4b24      	ldr	r3, [pc, #144]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac68:	0e1b      	lsrs	r3, r3, #24
 800ac6a:	f003 030f 	and.w	r3, r3, #15
 800ac6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ac70:	4b20      	ldr	r3, [pc, #128]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac76:	0c1b      	lsrs	r3, r3, #16
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	019a      	lsls	r2, r3, #6
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	041b      	lsls	r3, r3, #16
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	061b      	lsls	r3, r3, #24
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	071b      	lsls	r3, r3, #28
 800ac96:	4917      	ldr	r1, [pc, #92]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ac9e:	4b15      	ldr	r3, [pc, #84]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800aca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	4911      	ldr	r1, [pc, #68]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800acb4:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a0e      	ldr	r2, [pc, #56]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800acba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acc0:	f7fc fbfa 	bl	80074b8 <HAL_GetTick>
 800acc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800acc6:	e008      	b.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800acc8:	f7fc fbf6 	bl	80074b8 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b64      	cmp	r3, #100	; 0x64
 800acd4:	d901      	bls.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e007      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800acda:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace6:	d1ef      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3720      	adds	r7, #32
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	40023800 	.word	0x40023800

0800acf8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e06b      	b.n	800ade2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	7f5b      	ldrb	r3, [r3, #29]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d105      	bne.n	800ad20 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fb fee2 	bl	8006ae4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	22ca      	movs	r2, #202	; 0xca
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2253      	movs	r2, #83	; 0x53
 800ad34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f85a 	bl	800adf0 <RTC_EnterInitMode>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d008      	beq.n	800ad54 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	22ff      	movs	r2, #255	; 0xff
 800ad48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2204      	movs	r2, #4
 800ad4e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e046      	b.n	800ade2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6899      	ldr	r1, [r3, #8]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	4b23      	ldr	r3, [pc, #140]	; (800adec <HAL_RTC_Init+0xf4>)
 800ad60:	400b      	ands	r3, r1
 800ad62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6899      	ldr	r1, [r3, #8]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	431a      	orrs	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	68d2      	ldr	r2, [r2, #12]
 800ad8a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6919      	ldr	r1, [r3, #16]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	041a      	lsls	r2, r3, #16
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68da      	ldr	r2, [r3, #12]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adae:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0208 	bic.w	r2, r2, #8
 800adbe:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699a      	ldr	r2, [r3, #24]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	22ff      	movs	r2, #255	; 0xff
 800add8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ade0:	2300      	movs	r3, #0
  }
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	ff8fffbf 	.word	0xff8fffbf

0800adf0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d119      	bne.n	800ae3e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae14:	f7fc fb50 	bl	80074b8 <HAL_GetTick>
 800ae18:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae1a:	e009      	b.n	800ae30 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ae1c:	f7fc fb4c 	bl	80074b8 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae2a:	d901      	bls.n	800ae30 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e007      	b.n	800ae40 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0ee      	beq.n	800ae1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e084      	b.n	800af64 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d106      	bne.n	800ae7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7fb fe4f 	bl	8006b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae90:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ae9a:	d902      	bls.n	800aea2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	e002      	b.n	800aea8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aea6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aeb0:	d007      	beq.n	800aec2 <HAL_SPI_Init+0x7a>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aeba:	d002      	beq.n	800aec2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10b      	bne.n	800aee2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aed2:	d903      	bls.n	800aedc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	631a      	str	r2, [r3, #48]	; 0x30
 800aeda:	e002      	b.n	800aee2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	431a      	orrs	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	431a      	orrs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	431a      	orrs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af00:	431a      	orrs	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	431a      	orrs	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	ea42 0103 	orr.w	r1, r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	430a      	orrs	r2, r1
 800af1a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	0c1b      	lsrs	r3, r3, #16
 800af22:	f003 0204 	and.w	r2, r3, #4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2a:	431a      	orrs	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af30:	431a      	orrs	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	ea42 0103 	orr.w	r1, r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	430a      	orrs	r2, r1
 800af42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	69da      	ldr	r2, [r3, #28]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	4613      	mov	r3, r2
 800af7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800af86:	2b01      	cmp	r3, #1
 800af88:	d101      	bne.n	800af8e <HAL_SPI_Transmit+0x22>
 800af8a:	2302      	movs	r3, #2
 800af8c:	e150      	b.n	800b230 <HAL_SPI_Transmit+0x2c4>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af96:	f7fc fa8f 	bl	80074b8 <HAL_GetTick>
 800af9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af9c:	88fb      	ldrh	r3, [r7, #6]
 800af9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d002      	beq.n	800afb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800afac:	2302      	movs	r3, #2
 800afae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afb0:	e135      	b.n	800b21e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <HAL_SPI_Transmit+0x52>
 800afb8:	88fb      	ldrh	r3, [r7, #6]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d102      	bne.n	800afc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afc2:	e12c      	b.n	800b21e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2203      	movs	r2, #3
 800afc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	88fa      	ldrh	r2, [r7, #6]
 800afdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	88fa      	ldrh	r2, [r7, #6]
 800afe2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b00e:	d107      	bne.n	800b020 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b01e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02a:	2b40      	cmp	r3, #64	; 0x40
 800b02c:	d007      	beq.n	800b03e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b03c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b046:	d94b      	bls.n	800b0e0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <HAL_SPI_Transmit+0xea>
 800b050:	8afb      	ldrh	r3, [r7, #22]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d13e      	bne.n	800b0d4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	881a      	ldrh	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	1c9a      	adds	r2, r3, #2
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b070:	b29b      	uxth	r3, r3
 800b072:	3b01      	subs	r3, #1
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b07a:	e02b      	b.n	800b0d4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b02      	cmp	r3, #2
 800b088:	d112      	bne.n	800b0b0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08e:	881a      	ldrh	r2, [r3, #0]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	1c9a      	adds	r2, r3, #2
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0ae:	e011      	b.n	800b0d4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0b0:	f7fc fa02 	bl	80074b8 <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d803      	bhi.n	800b0c8 <HAL_SPI_Transmit+0x15c>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d102      	bne.n	800b0ce <HAL_SPI_Transmit+0x162>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d102      	bne.n	800b0d4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b0d2:	e0a4      	b.n	800b21e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1ce      	bne.n	800b07c <HAL_SPI_Transmit+0x110>
 800b0de:	e07c      	b.n	800b1da <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <HAL_SPI_Transmit+0x182>
 800b0e8:	8afb      	ldrh	r3, [r7, #22]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d170      	bne.n	800b1d0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d912      	bls.n	800b11e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fc:	881a      	ldrh	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	1c9a      	adds	r2, r3, #2
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b112:	b29b      	uxth	r3, r3
 800b114:	3b02      	subs	r3, #2
 800b116:	b29a      	uxth	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b11c:	e058      	b.n	800b1d0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	330c      	adds	r3, #12
 800b128:	7812      	ldrb	r2, [r2, #0]
 800b12a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	3b01      	subs	r3, #1
 800b13e:	b29a      	uxth	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b144:	e044      	b.n	800b1d0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b02      	cmp	r3, #2
 800b152:	d12b      	bne.n	800b1ac <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b158:	b29b      	uxth	r3, r3
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d912      	bls.n	800b184 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	1c9a      	adds	r2, r3, #2
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b178:	b29b      	uxth	r3, r3
 800b17a:	3b02      	subs	r3, #2
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b182:	e025      	b.n	800b1d0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	330c      	adds	r3, #12
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1aa:	e011      	b.n	800b1d0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1ac:	f7fc f984 	bl	80074b8 <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d803      	bhi.n	800b1c4 <HAL_SPI_Transmit+0x258>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c2:	d102      	bne.n	800b1ca <HAL_SPI_Transmit+0x25e>
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b1ce:	e026      	b.n	800b21e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1b5      	bne.n	800b146 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 fa20 	bl	800b624 <SPI_EndRxTxTransaction>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d002      	beq.n	800b1f0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2220      	movs	r2, #32
 800b1ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	613b      	str	r3, [r7, #16]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	613b      	str	r3, [r7, #16]
 800b20c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	77fb      	strb	r3, [r7, #31]
 800b21a:	e000      	b.n	800b21e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800b21c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b22e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	099b      	lsrs	r3, r3, #6
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10f      	bne.n	800b27c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	099b      	lsrs	r3, r3, #6
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	4798      	blx	r3
    return;
 800b27a:	e0d8      	b.n	800b42e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	085b      	lsrs	r3, r3, #1
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00a      	beq.n	800b29e <HAL_SPI_IRQHandler+0x66>
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	09db      	lsrs	r3, r3, #7
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d004      	beq.n	800b29e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	4798      	blx	r3
    return;
 800b29c:	e0c7      	b.n	800b42e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	095b      	lsrs	r3, r3, #5
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10c      	bne.n	800b2c4 <HAL_SPI_IRQHandler+0x8c>
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	099b      	lsrs	r3, r3, #6
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <HAL_SPI_IRQHandler+0x8c>
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	0a1b      	lsrs	r3, r3, #8
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 80b5 	beq.w	800b42e <HAL_SPI_IRQHandler+0x1f6>
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80ae 	beq.w	800b42e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	099b      	lsrs	r3, r3, #6
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d023      	beq.n	800b326 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d011      	beq.n	800b30e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ee:	f043 0204 	orr.w	r2, r3, #4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	e00b      	b.n	800b326 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b30e:	2300      	movs	r3, #0
 800b310:	613b      	str	r3, [r7, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	613b      	str	r3, [r7, #16]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	693b      	ldr	r3, [r7, #16]
        return;
 800b324:	e083      	b.n	800b42e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	095b      	lsrs	r3, r3, #5
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d014      	beq.n	800b35c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b336:	f043 0201 	orr.w	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	0a1b      	lsrs	r3, r3, #8
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00c      	beq.n	800b382 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b36c:	f043 0208 	orr.w	r2, r3, #8
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b374:	2300      	movs	r3, #0
 800b376:	60bb      	str	r3, [r7, #8]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	60bb      	str	r3, [r7, #8]
 800b380:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b386:	2b00      	cmp	r3, #0
 800b388:	d050      	beq.n	800b42c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b398:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <HAL_SPI_IRQHandler+0x17e>
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d034      	beq.n	800b420 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 0203 	bic.w	r2, r2, #3
 800b3c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d2:	4a18      	ldr	r2, [pc, #96]	; (800b434 <HAL_SPI_IRQHandler+0x1fc>)
 800b3d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fd f8a6 	bl	800852c <HAL_DMA_Abort_IT>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d016      	beq.n	800b428 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fe:	4a0d      	ldr	r2, [pc, #52]	; (800b434 <HAL_SPI_IRQHandler+0x1fc>)
 800b400:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b406:	4618      	mov	r0, r3
 800b408:	f7fd f890 	bl	800852c <HAL_DMA_Abort_IT>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b41e:	e003      	b.n	800b428 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f809 	bl	800b438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b426:	e000      	b.n	800b42a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b428:	bf00      	nop
    return;
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
  }
}
 800b42e:	3720      	adds	r7, #32
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	0800b44d 	.word	0x0800b44d

0800b438 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b458:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff ffe5 	bl	800b438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	4613      	mov	r3, r2
 800b484:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b486:	e04c      	b.n	800b522 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48e:	d048      	beq.n	800b522 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b490:	f7fc f812 	bl	80074b8 <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d902      	bls.n	800b4a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d13d      	bne.n	800b522 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b4b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4be:	d111      	bne.n	800b4e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c8:	d004      	beq.n	800b4d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4d2:	d107      	bne.n	800b4e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ec:	d10f      	bne.n	800b50e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b50c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e00f      	b.n	800b542 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4013      	ands	r3, r2
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	429a      	cmp	r2, r3
 800b530:	bf0c      	ite	eq
 800b532:	2301      	moveq	r3, #1
 800b534:	2300      	movne	r3, #0
 800b536:	b2db      	uxtb	r3, r3
 800b538:	461a      	mov	r2, r3
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d1a3      	bne.n	800b488 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800b558:	e057      	b.n	800b60a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b560:	d106      	bne.n	800b570 <SPI_WaitFifoStateUntilTimeout+0x26>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	330c      	adds	r3, #12
 800b56e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b576:	d048      	beq.n	800b60a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b578:	f7fb ff9e 	bl	80074b8 <HAL_GetTick>
 800b57c:	4602      	mov	r2, r0
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d902      	bls.n	800b58e <SPI_WaitFifoStateUntilTimeout+0x44>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d13d      	bne.n	800b60a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b59c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5a6:	d111      	bne.n	800b5cc <SPI_WaitFifoStateUntilTimeout+0x82>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b0:	d004      	beq.n	800b5bc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ba:	d107      	bne.n	800b5cc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d4:	d10f      	bne.n	800b5f6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e008      	b.n	800b61c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	4013      	ands	r3, r2
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	429a      	cmp	r2, r3
 800b618:	d19f      	bne.n	800b55a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2200      	movs	r2, #0
 800b638:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f7ff ff84 	bl	800b54a <SPI_WaitFifoStateUntilTimeout>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d007      	beq.n	800b658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b64c:	f043 0220 	orr.w	r2, r3, #32
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	e027      	b.n	800b6a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2200      	movs	r2, #0
 800b660:	2180      	movs	r1, #128	; 0x80
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff ff07 	bl	800b476 <SPI_WaitFlagStateUntilTimeout>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b672:	f043 0220 	orr.w	r2, r3, #32
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b67a:	2303      	movs	r3, #3
 800b67c:	e014      	b.n	800b6a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2200      	movs	r2, #0
 800b686:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff ff5d 	bl	800b54a <SPI_WaitFifoStateUntilTimeout>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d007      	beq.n	800b6a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b69a:	f043 0220 	orr.w	r2, r3, #32
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e000      	b.n	800b6a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e01d      	b.n	800b6fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7fb faba 	bl	8006c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f000 fb82 	bl	800bdf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
	...

0800b708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f042 0201 	orr.w	r2, r2, #1
 800b71e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689a      	ldr	r2, [r3, #8]
 800b726:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <HAL_TIM_Base_Start_IT+0x50>)
 800b728:	4013      	ands	r3, r2
 800b72a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b06      	cmp	r3, #6
 800b730:	d00b      	beq.n	800b74a <HAL_TIM_Base_Start_IT+0x42>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b738:	d007      	beq.n	800b74a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f042 0201 	orr.w	r2, r2, #1
 800b748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	00010007 	.word	0x00010007

0800b75c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e01d      	b.n	800b7aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f815 	bl	800b7b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	3304      	adds	r3, #4
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	f000 fb2c 	bl	800bdf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d122      	bne.n	800b822 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f003 0302 	and.w	r3, r3, #2
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d11b      	bne.n	800b822 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f06f 0202 	mvn.w	r2, #2
 800b7f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d003      	beq.n	800b810 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fad7 	bl	800bdbc <HAL_TIM_IC_CaptureCallback>
 800b80e:	e005      	b.n	800b81c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fac9 	bl	800bda8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fada 	bl	800bdd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	f003 0304 	and.w	r3, r3, #4
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	d122      	bne.n	800b876 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d11b      	bne.n	800b876 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f06f 0204 	mvn.w	r2, #4
 800b846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2202      	movs	r2, #2
 800b84c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 faad 	bl	800bdbc <HAL_TIM_IC_CaptureCallback>
 800b862:	e005      	b.n	800b870 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fa9f 	bl	800bda8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fab0 	bl	800bdd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b08      	cmp	r3, #8
 800b882:	d122      	bne.n	800b8ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f003 0308 	and.w	r3, r3, #8
 800b88e:	2b08      	cmp	r3, #8
 800b890:	d11b      	bne.n	800b8ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f06f 0208 	mvn.w	r2, #8
 800b89a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2204      	movs	r2, #4
 800b8a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69db      	ldr	r3, [r3, #28]
 800b8a8:	f003 0303 	and.w	r3, r3, #3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fa83 	bl	800bdbc <HAL_TIM_IC_CaptureCallback>
 800b8b6:	e005      	b.n	800b8c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fa75 	bl	800bda8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fa86 	bl	800bdd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f003 0310 	and.w	r3, r3, #16
 800b8d4:	2b10      	cmp	r3, #16
 800b8d6:	d122      	bne.n	800b91e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	f003 0310 	and.w	r3, r3, #16
 800b8e2:	2b10      	cmp	r3, #16
 800b8e4:	d11b      	bne.n	800b91e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f06f 0210 	mvn.w	r2, #16
 800b8ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2208      	movs	r2, #8
 800b8f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fa59 	bl	800bdbc <HAL_TIM_IC_CaptureCallback>
 800b90a:	e005      	b.n	800b918 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa4b 	bl	800bda8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa5c 	bl	800bdd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d10e      	bne.n	800b94a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	2b01      	cmp	r3, #1
 800b938:	d107      	bne.n	800b94a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f06f 0201 	mvn.w	r2, #1
 800b942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7f8 fc77 	bl	8004238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b954:	2b80      	cmp	r3, #128	; 0x80
 800b956:	d10e      	bne.n	800b976 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b962:	2b80      	cmp	r3, #128	; 0x80
 800b964:	d107      	bne.n	800b976 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fe71 	bl	800c658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b984:	d10e      	bne.n	800b9a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b990:	2b80      	cmp	r3, #128	; 0x80
 800b992:	d107      	bne.n	800b9a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b99c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fe64 	bl	800c66c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ae:	2b40      	cmp	r3, #64	; 0x40
 800b9b0:	d10e      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9bc:	2b40      	cmp	r3, #64	; 0x40
 800b9be:	d107      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa0a 	bl	800bde4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	f003 0320 	and.w	r3, r3, #32
 800b9da:	2b20      	cmp	r3, #32
 800b9dc:	d10e      	bne.n	800b9fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f003 0320 	and.w	r3, r3, #32
 800b9e8:	2b20      	cmp	r3, #32
 800b9ea:	d107      	bne.n	800b9fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f06f 0220 	mvn.w	r2, #32
 800b9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fe24 	bl	800c644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9fc:	bf00      	nop
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e105      	b.n	800bc2a <HAL_TIM_PWM_ConfigChannel+0x226>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2202      	movs	r2, #2
 800ba2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b14      	cmp	r3, #20
 800ba32:	f200 80f0 	bhi.w	800bc16 <HAL_TIM_PWM_ConfigChannel+0x212>
 800ba36:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800bc17 	.word	0x0800bc17
 800ba44:	0800bc17 	.word	0x0800bc17
 800ba48:	0800bc17 	.word	0x0800bc17
 800ba4c:	0800bad1 	.word	0x0800bad1
 800ba50:	0800bc17 	.word	0x0800bc17
 800ba54:	0800bc17 	.word	0x0800bc17
 800ba58:	0800bc17 	.word	0x0800bc17
 800ba5c:	0800bb13 	.word	0x0800bb13
 800ba60:	0800bc17 	.word	0x0800bc17
 800ba64:	0800bc17 	.word	0x0800bc17
 800ba68:	0800bc17 	.word	0x0800bc17
 800ba6c:	0800bb53 	.word	0x0800bb53
 800ba70:	0800bc17 	.word	0x0800bc17
 800ba74:	0800bc17 	.word	0x0800bc17
 800ba78:	0800bc17 	.word	0x0800bc17
 800ba7c:	0800bb95 	.word	0x0800bb95
 800ba80:	0800bc17 	.word	0x0800bc17
 800ba84:	0800bc17 	.word	0x0800bc17
 800ba88:	0800bc17 	.word	0x0800bc17
 800ba8c:	0800bbd5 	.word	0x0800bbd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 fa4e 	bl	800bf38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f042 0208 	orr.w	r2, r2, #8
 800baaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0204 	bic.w	r2, r2, #4
 800baba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6999      	ldr	r1, [r3, #24]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	691a      	ldr	r2, [r3, #16]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	619a      	str	r2, [r3, #24]
      break;
 800bace:	e0a3      	b.n	800bc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68b9      	ldr	r1, [r7, #8]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f000 faa0 	bl	800c01c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	699a      	ldr	r2, [r3, #24]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	699a      	ldr	r2, [r3, #24]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bafa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6999      	ldr	r1, [r3, #24]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	021a      	lsls	r2, r3, #8
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	619a      	str	r2, [r3, #24]
      break;
 800bb10:	e082      	b.n	800bc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 faf7 	bl	800c10c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	69da      	ldr	r2, [r3, #28]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f042 0208 	orr.w	r2, r2, #8
 800bb2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f022 0204 	bic.w	r2, r2, #4
 800bb3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	69d9      	ldr	r1, [r3, #28]
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	691a      	ldr	r2, [r3, #16]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	430a      	orrs	r2, r1
 800bb4e:	61da      	str	r2, [r3, #28]
      break;
 800bb50:	e062      	b.n	800bc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fb4d 	bl	800c1f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69da      	ldr	r2, [r3, #28]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69da      	ldr	r2, [r3, #28]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69d9      	ldr	r1, [r3, #28]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	021a      	lsls	r2, r3, #8
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	61da      	str	r2, [r3, #28]
      break;
 800bb92:	e041      	b.n	800bc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fb84 	bl	800c2a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f042 0208 	orr.w	r2, r2, #8
 800bbae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f022 0204 	bic.w	r2, r2, #4
 800bbbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	691a      	ldr	r2, [r3, #16]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbd2:	e021      	b.n	800bc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68b9      	ldr	r1, [r7, #8]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 fbb6 	bl	800c34c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	021a      	lsls	r2, r3, #8
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc14:	e000      	b.n	800bc18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800bc16:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop

0800bc34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_TIM_ConfigClockSource+0x18>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e0a6      	b.n	800bd9a <HAL_TIM_ConfigClockSource+0x166>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	4b4f      	ldr	r3, [pc, #316]	; (800bda4 <HAL_TIM_ConfigClockSource+0x170>)
 800bc68:	4013      	ands	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b40      	cmp	r3, #64	; 0x40
 800bc82:	d067      	beq.n	800bd54 <HAL_TIM_ConfigClockSource+0x120>
 800bc84:	2b40      	cmp	r3, #64	; 0x40
 800bc86:	d80b      	bhi.n	800bca0 <HAL_TIM_ConfigClockSource+0x6c>
 800bc88:	2b10      	cmp	r3, #16
 800bc8a:	d073      	beq.n	800bd74 <HAL_TIM_ConfigClockSource+0x140>
 800bc8c:	2b10      	cmp	r3, #16
 800bc8e:	d802      	bhi.n	800bc96 <HAL_TIM_ConfigClockSource+0x62>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d06f      	beq.n	800bd74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bc94:	e078      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d06c      	beq.n	800bd74 <HAL_TIM_ConfigClockSource+0x140>
 800bc9a:	2b30      	cmp	r3, #48	; 0x30
 800bc9c:	d06a      	beq.n	800bd74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bc9e:	e073      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bca0:	2b70      	cmp	r3, #112	; 0x70
 800bca2:	d00d      	beq.n	800bcc0 <HAL_TIM_ConfigClockSource+0x8c>
 800bca4:	2b70      	cmp	r3, #112	; 0x70
 800bca6:	d804      	bhi.n	800bcb2 <HAL_TIM_ConfigClockSource+0x7e>
 800bca8:	2b50      	cmp	r3, #80	; 0x50
 800bcaa:	d033      	beq.n	800bd14 <HAL_TIM_ConfigClockSource+0xe0>
 800bcac:	2b60      	cmp	r3, #96	; 0x60
 800bcae:	d041      	beq.n	800bd34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bcb0:	e06a      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bcb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcb6:	d066      	beq.n	800bd86 <HAL_TIM_ConfigClockSource+0x152>
 800bcb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcbc:	d017      	beq.n	800bcee <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bcbe:	e063      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	6899      	ldr	r1, [r3, #8]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f000 fc0a 	bl	800c4e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bce2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	609a      	str	r2, [r3, #8]
      break;
 800bcec:	e04c      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	6899      	ldr	r1, [r3, #8]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	f000 fbf3 	bl	800c4e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	689a      	ldr	r2, [r3, #8]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd10:	609a      	str	r2, [r3, #8]
      break;
 800bd12:	e039      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	6859      	ldr	r1, [r3, #4]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	461a      	mov	r2, r3
 800bd22:	f000 fb67 	bl	800c3f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2150      	movs	r1, #80	; 0x50
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 fbc0 	bl	800c4b2 <TIM_ITRx_SetConfig>
      break;
 800bd32:	e029      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6818      	ldr	r0, [r3, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	6859      	ldr	r1, [r3, #4]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	461a      	mov	r2, r3
 800bd42:	f000 fb86 	bl	800c452 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2160      	movs	r1, #96	; 0x60
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fbb0 	bl	800c4b2 <TIM_ITRx_SetConfig>
      break;
 800bd52:	e019      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	6859      	ldr	r1, [r3, #4]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	461a      	mov	r2, r3
 800bd62:	f000 fb47 	bl	800c3f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2140      	movs	r1, #64	; 0x40
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 fba0 	bl	800c4b2 <TIM_ITRx_SetConfig>
      break;
 800bd72:	e009      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f000 fb97 	bl	800c4b2 <TIM_ITRx_SetConfig>
      break;
 800bd84:	e000      	b.n	800bd88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bd86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	fffeff88 	.word	0xfffeff88

0800bda8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a40      	ldr	r2, [pc, #256]	; (800bf0c <TIM_Base_SetConfig+0x114>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d013      	beq.n	800be38 <TIM_Base_SetConfig+0x40>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be16:	d00f      	beq.n	800be38 <TIM_Base_SetConfig+0x40>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a3d      	ldr	r2, [pc, #244]	; (800bf10 <TIM_Base_SetConfig+0x118>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d00b      	beq.n	800be38 <TIM_Base_SetConfig+0x40>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a3c      	ldr	r2, [pc, #240]	; (800bf14 <TIM_Base_SetConfig+0x11c>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d007      	beq.n	800be38 <TIM_Base_SetConfig+0x40>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a3b      	ldr	r2, [pc, #236]	; (800bf18 <TIM_Base_SetConfig+0x120>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d003      	beq.n	800be38 <TIM_Base_SetConfig+0x40>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a3a      	ldr	r2, [pc, #232]	; (800bf1c <TIM_Base_SetConfig+0x124>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d108      	bne.n	800be4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a2f      	ldr	r2, [pc, #188]	; (800bf0c <TIM_Base_SetConfig+0x114>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d02b      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be58:	d027      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a2c      	ldr	r2, [pc, #176]	; (800bf10 <TIM_Base_SetConfig+0x118>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d023      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a2b      	ldr	r2, [pc, #172]	; (800bf14 <TIM_Base_SetConfig+0x11c>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d01f      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a2a      	ldr	r2, [pc, #168]	; (800bf18 <TIM_Base_SetConfig+0x120>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d01b      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a29      	ldr	r2, [pc, #164]	; (800bf1c <TIM_Base_SetConfig+0x124>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d017      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a28      	ldr	r2, [pc, #160]	; (800bf20 <TIM_Base_SetConfig+0x128>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d013      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a27      	ldr	r2, [pc, #156]	; (800bf24 <TIM_Base_SetConfig+0x12c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d00f      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a26      	ldr	r2, [pc, #152]	; (800bf28 <TIM_Base_SetConfig+0x130>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00b      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a25      	ldr	r2, [pc, #148]	; (800bf2c <TIM_Base_SetConfig+0x134>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d007      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a24      	ldr	r2, [pc, #144]	; (800bf30 <TIM_Base_SetConfig+0x138>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d003      	beq.n	800beaa <TIM_Base_SetConfig+0xb2>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a23      	ldr	r2, [pc, #140]	; (800bf34 <TIM_Base_SetConfig+0x13c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d108      	bne.n	800bebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	4313      	orrs	r3, r2
 800beba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	689a      	ldr	r2, [r3, #8]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a0a      	ldr	r2, [pc, #40]	; (800bf0c <TIM_Base_SetConfig+0x114>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d003      	beq.n	800bef0 <TIM_Base_SetConfig+0xf8>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a0c      	ldr	r2, [pc, #48]	; (800bf1c <TIM_Base_SetConfig+0x124>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d103      	bne.n	800bef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	691a      	ldr	r2, [r3, #16]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	615a      	str	r2, [r3, #20]
}
 800befe:	bf00      	nop
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	40010000 	.word	0x40010000
 800bf10:	40000400 	.word	0x40000400
 800bf14:	40000800 	.word	0x40000800
 800bf18:	40000c00 	.word	0x40000c00
 800bf1c:	40010400 	.word	0x40010400
 800bf20:	40014000 	.word	0x40014000
 800bf24:	40014400 	.word	0x40014400
 800bf28:	40014800 	.word	0x40014800
 800bf2c:	40001800 	.word	0x40001800
 800bf30:	40001c00 	.word	0x40001c00
 800bf34:	40002000 	.word	0x40002000

0800bf38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	f023 0201 	bic.w	r2, r3, #1
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4b2b      	ldr	r3, [pc, #172]	; (800c010 <TIM_OC1_SetConfig+0xd8>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f023 0302 	bic.w	r3, r3, #2
 800bf80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a21      	ldr	r2, [pc, #132]	; (800c014 <TIM_OC1_SetConfig+0xdc>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d003      	beq.n	800bf9c <TIM_OC1_SetConfig+0x64>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a20      	ldr	r2, [pc, #128]	; (800c018 <TIM_OC1_SetConfig+0xe0>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d10c      	bne.n	800bfb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f023 0308 	bic.w	r3, r3, #8
 800bfa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f023 0304 	bic.w	r3, r3, #4
 800bfb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a16      	ldr	r2, [pc, #88]	; (800c014 <TIM_OC1_SetConfig+0xdc>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d003      	beq.n	800bfc6 <TIM_OC1_SetConfig+0x8e>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a15      	ldr	r2, [pc, #84]	; (800c018 <TIM_OC1_SetConfig+0xe0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d111      	bne.n	800bfea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	693a      	ldr	r2, [r7, #16]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	697a      	ldr	r2, [r7, #20]
 800c002:	621a      	str	r2, [r3, #32]
}
 800c004:	bf00      	nop
 800c006:	371c      	adds	r7, #28
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	fffeff8f 	.word	0xfffeff8f
 800c014:	40010000 	.word	0x40010000
 800c018:	40010400 	.word	0x40010400

0800c01c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b087      	sub	sp, #28
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	f023 0210 	bic.w	r2, r3, #16
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	4b2e      	ldr	r3, [pc, #184]	; (800c100 <TIM_OC2_SetConfig+0xe4>)
 800c048:	4013      	ands	r3, r2
 800c04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	021b      	lsls	r3, r3, #8
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f023 0320 	bic.w	r3, r3, #32
 800c066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	011b      	lsls	r3, r3, #4
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	4313      	orrs	r3, r2
 800c072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a23      	ldr	r2, [pc, #140]	; (800c104 <TIM_OC2_SetConfig+0xe8>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d003      	beq.n	800c084 <TIM_OC2_SetConfig+0x68>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a22      	ldr	r2, [pc, #136]	; (800c108 <TIM_OC2_SetConfig+0xec>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d10d      	bne.n	800c0a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c08a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c09e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a18      	ldr	r2, [pc, #96]	; (800c104 <TIM_OC2_SetConfig+0xe8>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d003      	beq.n	800c0b0 <TIM_OC2_SetConfig+0x94>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a17      	ldr	r2, [pc, #92]	; (800c108 <TIM_OC2_SetConfig+0xec>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d113      	bne.n	800c0d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	699b      	ldr	r3, [r3, #24]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	621a      	str	r2, [r3, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	371c      	adds	r7, #28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	feff8fff 	.word	0xfeff8fff
 800c104:	40010000 	.word	0x40010000
 800c108:	40010400 	.word	0x40010400

0800c10c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b087      	sub	sp, #28
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	69db      	ldr	r3, [r3, #28]
 800c132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4b2d      	ldr	r3, [pc, #180]	; (800c1ec <TIM_OC3_SetConfig+0xe0>)
 800c138:	4013      	ands	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f023 0303 	bic.w	r3, r3, #3
 800c142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	4313      	orrs	r3, r2
 800c160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a22      	ldr	r2, [pc, #136]	; (800c1f0 <TIM_OC3_SetConfig+0xe4>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d003      	beq.n	800c172 <TIM_OC3_SetConfig+0x66>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a21      	ldr	r2, [pc, #132]	; (800c1f4 <TIM_OC3_SetConfig+0xe8>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d10d      	bne.n	800c18e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	021b      	lsls	r3, r3, #8
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c18c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a17      	ldr	r2, [pc, #92]	; (800c1f0 <TIM_OC3_SetConfig+0xe4>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <TIM_OC3_SetConfig+0x92>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a16      	ldr	r2, [pc, #88]	; (800c1f4 <TIM_OC3_SetConfig+0xe8>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d113      	bne.n	800c1c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	011b      	lsls	r3, r3, #4
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	621a      	str	r2, [r3, #32]
}
 800c1e0:	bf00      	nop
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	fffeff8f 	.word	0xfffeff8f
 800c1f0:	40010000 	.word	0x40010000
 800c1f4:	40010400 	.word	0x40010400

0800c1f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	4b1e      	ldr	r3, [pc, #120]	; (800c29c <TIM_OC4_SetConfig+0xa4>)
 800c224:	4013      	ands	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	031b      	lsls	r3, r3, #12
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a13      	ldr	r2, [pc, #76]	; (800c2a0 <TIM_OC4_SetConfig+0xa8>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d003      	beq.n	800c260 <TIM_OC4_SetConfig+0x68>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a12      	ldr	r2, [pc, #72]	; (800c2a4 <TIM_OC4_SetConfig+0xac>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d109      	bne.n	800c274 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	019b      	lsls	r3, r3, #6
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	4313      	orrs	r3, r2
 800c272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	693a      	ldr	r2, [r7, #16]
 800c28c:	621a      	str	r2, [r3, #32]
}
 800c28e:	bf00      	nop
 800c290:	371c      	adds	r7, #28
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	feff8fff 	.word	0xfeff8fff
 800c2a0:	40010000 	.word	0x40010000
 800c2a4:	40010400 	.word	0x40010400

0800c2a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	4b1b      	ldr	r3, [pc, #108]	; (800c340 <TIM_OC5_SetConfig+0x98>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	041b      	lsls	r3, r3, #16
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a12      	ldr	r2, [pc, #72]	; (800c344 <TIM_OC5_SetConfig+0x9c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d003      	beq.n	800c306 <TIM_OC5_SetConfig+0x5e>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a11      	ldr	r2, [pc, #68]	; (800c348 <TIM_OC5_SetConfig+0xa0>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d109      	bne.n	800c31a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c30c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	021b      	lsls	r3, r3, #8
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	4313      	orrs	r3, r2
 800c318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	621a      	str	r2, [r3, #32]
}
 800c334:	bf00      	nop
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	fffeff8f 	.word	0xfffeff8f
 800c344:	40010000 	.word	0x40010000
 800c348:	40010400 	.word	0x40010400

0800c34c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4b1c      	ldr	r3, [pc, #112]	; (800c3e8 <TIM_OC6_SetConfig+0x9c>)
 800c378:	4013      	ands	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	021b      	lsls	r3, r3, #8
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	4313      	orrs	r3, r2
 800c386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c38e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	051b      	lsls	r3, r3, #20
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	4313      	orrs	r3, r2
 800c39a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a13      	ldr	r2, [pc, #76]	; (800c3ec <TIM_OC6_SetConfig+0xa0>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d003      	beq.n	800c3ac <TIM_OC6_SetConfig+0x60>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a12      	ldr	r2, [pc, #72]	; (800c3f0 <TIM_OC6_SetConfig+0xa4>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d109      	bne.n	800c3c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	029b      	lsls	r3, r3, #10
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685a      	ldr	r2, [r3, #4]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	693a      	ldr	r2, [r7, #16]
 800c3d8:	621a      	str	r2, [r3, #32]
}
 800c3da:	bf00      	nop
 800c3dc:	371c      	adds	r7, #28
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	feff8fff 	.word	0xfeff8fff
 800c3ec:	40010000 	.word	0x40010000
 800c3f0:	40010400 	.word	0x40010400

0800c3f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6a1b      	ldr	r3, [r3, #32]
 800c404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	f023 0201 	bic.w	r2, r3, #1
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c41e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	4313      	orrs	r3, r2
 800c428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	f023 030a 	bic.w	r3, r3, #10
 800c430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	4313      	orrs	r3, r2
 800c438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	621a      	str	r2, [r3, #32]
}
 800c446:	bf00      	nop
 800c448:	371c      	adds	r7, #28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c452:	b480      	push	{r7}
 800c454:	b087      	sub	sp, #28
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	60b9      	str	r1, [r7, #8]
 800c45c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	f023 0210 	bic.w	r2, r3, #16
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6a1b      	ldr	r3, [r3, #32]
 800c474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c47c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	031b      	lsls	r3, r3, #12
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	4313      	orrs	r3, r2
 800c486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c48e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	011b      	lsls	r3, r3, #4
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	4313      	orrs	r3, r2
 800c498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	697a      	ldr	r2, [r7, #20]
 800c49e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	693a      	ldr	r2, [r7, #16]
 800c4a4:	621a      	str	r2, [r3, #32]
}
 800c4a6:	bf00      	nop
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f043 0307 	orr.w	r3, r3, #7
 800c4d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	609a      	str	r2, [r3, #8]
}
 800c4dc:	bf00      	nop
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b087      	sub	sp, #28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
 800c4f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	021a      	lsls	r2, r3, #8
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	4313      	orrs	r3, r2
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	4313      	orrs	r3, r2
 800c514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	609a      	str	r2, [r3, #8]
}
 800c51c:	bf00      	nop
 800c51e:	371c      	adds	r7, #28
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d101      	bne.n	800c540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c53c:	2302      	movs	r3, #2
 800c53e:	e06d      	b.n	800c61c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2202      	movs	r2, #2
 800c54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a30      	ldr	r2, [pc, #192]	; (800c628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d004      	beq.n	800c574 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a2f      	ldr	r2, [pc, #188]	; (800c62c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d108      	bne.n	800c586 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c57a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4313      	orrs	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c58c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	4313      	orrs	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a20      	ldr	r2, [pc, #128]	; (800c628 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d022      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b2:	d01d      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a1d      	ldr	r2, [pc, #116]	; (800c630 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d018      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a1c      	ldr	r2, [pc, #112]	; (800c634 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d013      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a1a      	ldr	r2, [pc, #104]	; (800c638 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d00e      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a15      	ldr	r2, [pc, #84]	; (800c62c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d009      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a16      	ldr	r2, [pc, #88]	; (800c63c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d004      	beq.n	800c5f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a15      	ldr	r2, [pc, #84]	; (800c640 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d10c      	bne.n	800c60a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr
 800c628:	40010000 	.word	0x40010000
 800c62c:	40010400 	.word	0x40010400
 800c630:	40000400 	.word	0x40000400
 800c634:	40000800 	.word	0x40000800
 800c638:	40000c00 	.word	0x40000c00
 800c63c:	40014000 	.word	0x40014000
 800c640:	40001800 	.word	0x40001800

0800c644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e040      	b.n	800c714 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c696:	2b00      	cmp	r3, #0
 800c698:	d106      	bne.n	800c6a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7fa fb66 	bl	8006d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2224      	movs	r2, #36	; 0x24
 800c6ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f022 0201 	bic.w	r2, r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f8be 	bl	800c840 <UART_SetConfig>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d101      	bne.n	800c6ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e022      	b.n	800c714 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fb5c 	bl	800cd94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c6ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	689a      	ldr	r2, [r3, #8]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f042 0201 	orr.w	r2, r2, #1
 800c70a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fbe3 	bl	800ced8 <UART_CheckIdleState>
 800c712:	4603      	mov	r3, r0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08a      	sub	sp, #40	; 0x28
 800c720:	af02      	add	r7, sp, #8
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	4613      	mov	r3, r2
 800c72a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c730:	2b20      	cmp	r3, #32
 800c732:	d17f      	bne.n	800c834 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <HAL_UART_Transmit+0x24>
 800c73a:	88fb      	ldrh	r3, [r7, #6]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e078      	b.n	800c836 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d101      	bne.n	800c752 <HAL_UART_Transmit+0x36>
 800c74e:	2302      	movs	r3, #2
 800c750:	e071      	b.n	800c836 <HAL_UART_Transmit+0x11a>
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2221      	movs	r2, #33	; 0x21
 800c764:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c766:	f7fa fea7 	bl	80074b8 <HAL_GetTick>
 800c76a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	88fa      	ldrh	r2, [r7, #6]
 800c770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	88fa      	ldrh	r2, [r7, #6]
 800c778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c784:	d108      	bne.n	800c798 <HAL_UART_Transmit+0x7c>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d104      	bne.n	800c798 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800c78e:	2300      	movs	r3, #0
 800c790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	61bb      	str	r3, [r7, #24]
 800c796:	e003      	b.n	800c7a0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800c7a8:	e02c      	b.n	800c804 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2180      	movs	r1, #128	; 0x80
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 fbd4 	bl	800cf62 <UART_WaitOnFlagUntilTimeout>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	e038      	b.n	800c836 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10b      	bne.n	800c7e2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	3302      	adds	r3, #2
 800c7de:	61bb      	str	r3, [r7, #24]
 800c7e0:	e007      	b.n	800c7f2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	781a      	ldrb	r2, [r3, #0]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1cc      	bne.n	800c7aa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2200      	movs	r2, #0
 800c818:	2140      	movs	r1, #64	; 0x40
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 fba1 	bl	800cf62 <UART_WaitOnFlagUntilTimeout>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e005      	b.n	800c836 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2220      	movs	r2, #32
 800c82e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	e000      	b.n	800c836 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800c834:	2302      	movs	r3, #2
  }
}
 800c836:	4618      	mov	r0, r3
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c848:	2300      	movs	r3, #0
 800c84a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	431a      	orrs	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	431a      	orrs	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	69db      	ldr	r3, [r3, #28]
 800c864:	4313      	orrs	r3, r2
 800c866:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	4bb1      	ldr	r3, [pc, #708]	; (800cb34 <UART_SetConfig+0x2f4>)
 800c870:	4013      	ands	r3, r2
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	6939      	ldr	r1, [r7, #16]
 800c878:	430b      	orrs	r3, r1
 800c87a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a1b      	ldr	r3, [r3, #32]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a9f      	ldr	r2, [pc, #636]	; (800cb38 <UART_SetConfig+0x2f8>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d121      	bne.n	800c904 <UART_SetConfig+0xc4>
 800c8c0:	4b9e      	ldr	r3, [pc, #632]	; (800cb3c <UART_SetConfig+0x2fc>)
 800c8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8c6:	f003 0303 	and.w	r3, r3, #3
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d816      	bhi.n	800c8fc <UART_SetConfig+0xbc>
 800c8ce:	a201      	add	r2, pc, #4	; (adr r2, 800c8d4 <UART_SetConfig+0x94>)
 800c8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d4:	0800c8e5 	.word	0x0800c8e5
 800c8d8:	0800c8f1 	.word	0x0800c8f1
 800c8dc:	0800c8eb 	.word	0x0800c8eb
 800c8e0:	0800c8f7 	.word	0x0800c8f7
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	77fb      	strb	r3, [r7, #31]
 800c8e8:	e151      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	77fb      	strb	r3, [r7, #31]
 800c8ee:	e14e      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c8f0:	2304      	movs	r3, #4
 800c8f2:	77fb      	strb	r3, [r7, #31]
 800c8f4:	e14b      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c8f6:	2308      	movs	r3, #8
 800c8f8:	77fb      	strb	r3, [r7, #31]
 800c8fa:	e148      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	77fb      	strb	r3, [r7, #31]
 800c900:	bf00      	nop
 800c902:	e144      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a8d      	ldr	r2, [pc, #564]	; (800cb40 <UART_SetConfig+0x300>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d134      	bne.n	800c978 <UART_SetConfig+0x138>
 800c90e:	4b8b      	ldr	r3, [pc, #556]	; (800cb3c <UART_SetConfig+0x2fc>)
 800c910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c914:	f003 030c 	and.w	r3, r3, #12
 800c918:	2b0c      	cmp	r3, #12
 800c91a:	d829      	bhi.n	800c970 <UART_SetConfig+0x130>
 800c91c:	a201      	add	r2, pc, #4	; (adr r2, 800c924 <UART_SetConfig+0xe4>)
 800c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c922:	bf00      	nop
 800c924:	0800c959 	.word	0x0800c959
 800c928:	0800c971 	.word	0x0800c971
 800c92c:	0800c971 	.word	0x0800c971
 800c930:	0800c971 	.word	0x0800c971
 800c934:	0800c965 	.word	0x0800c965
 800c938:	0800c971 	.word	0x0800c971
 800c93c:	0800c971 	.word	0x0800c971
 800c940:	0800c971 	.word	0x0800c971
 800c944:	0800c95f 	.word	0x0800c95f
 800c948:	0800c971 	.word	0x0800c971
 800c94c:	0800c971 	.word	0x0800c971
 800c950:	0800c971 	.word	0x0800c971
 800c954:	0800c96b 	.word	0x0800c96b
 800c958:	2300      	movs	r3, #0
 800c95a:	77fb      	strb	r3, [r7, #31]
 800c95c:	e117      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c95e:	2302      	movs	r3, #2
 800c960:	77fb      	strb	r3, [r7, #31]
 800c962:	e114      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c964:	2304      	movs	r3, #4
 800c966:	77fb      	strb	r3, [r7, #31]
 800c968:	e111      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c96a:	2308      	movs	r3, #8
 800c96c:	77fb      	strb	r3, [r7, #31]
 800c96e:	e10e      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c970:	2310      	movs	r3, #16
 800c972:	77fb      	strb	r3, [r7, #31]
 800c974:	bf00      	nop
 800c976:	e10a      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a71      	ldr	r2, [pc, #452]	; (800cb44 <UART_SetConfig+0x304>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d120      	bne.n	800c9c4 <UART_SetConfig+0x184>
 800c982:	4b6e      	ldr	r3, [pc, #440]	; (800cb3c <UART_SetConfig+0x2fc>)
 800c984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c988:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c98c:	2b10      	cmp	r3, #16
 800c98e:	d00f      	beq.n	800c9b0 <UART_SetConfig+0x170>
 800c990:	2b10      	cmp	r3, #16
 800c992:	d802      	bhi.n	800c99a <UART_SetConfig+0x15a>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d005      	beq.n	800c9a4 <UART_SetConfig+0x164>
 800c998:	e010      	b.n	800c9bc <UART_SetConfig+0x17c>
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	d005      	beq.n	800c9aa <UART_SetConfig+0x16a>
 800c99e:	2b30      	cmp	r3, #48	; 0x30
 800c9a0:	d009      	beq.n	800c9b6 <UART_SetConfig+0x176>
 800c9a2:	e00b      	b.n	800c9bc <UART_SetConfig+0x17c>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	77fb      	strb	r3, [r7, #31]
 800c9a8:	e0f1      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	77fb      	strb	r3, [r7, #31]
 800c9ae:	e0ee      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	77fb      	strb	r3, [r7, #31]
 800c9b4:	e0eb      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9b6:	2308      	movs	r3, #8
 800c9b8:	77fb      	strb	r3, [r7, #31]
 800c9ba:	e0e8      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9bc:	2310      	movs	r3, #16
 800c9be:	77fb      	strb	r3, [r7, #31]
 800c9c0:	bf00      	nop
 800c9c2:	e0e4      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a5f      	ldr	r2, [pc, #380]	; (800cb48 <UART_SetConfig+0x308>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d120      	bne.n	800ca10 <UART_SetConfig+0x1d0>
 800c9ce:	4b5b      	ldr	r3, [pc, #364]	; (800cb3c <UART_SetConfig+0x2fc>)
 800c9d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c9d8:	2b40      	cmp	r3, #64	; 0x40
 800c9da:	d00f      	beq.n	800c9fc <UART_SetConfig+0x1bc>
 800c9dc:	2b40      	cmp	r3, #64	; 0x40
 800c9de:	d802      	bhi.n	800c9e6 <UART_SetConfig+0x1a6>
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <UART_SetConfig+0x1b0>
 800c9e4:	e010      	b.n	800ca08 <UART_SetConfig+0x1c8>
 800c9e6:	2b80      	cmp	r3, #128	; 0x80
 800c9e8:	d005      	beq.n	800c9f6 <UART_SetConfig+0x1b6>
 800c9ea:	2bc0      	cmp	r3, #192	; 0xc0
 800c9ec:	d009      	beq.n	800ca02 <UART_SetConfig+0x1c2>
 800c9ee:	e00b      	b.n	800ca08 <UART_SetConfig+0x1c8>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	77fb      	strb	r3, [r7, #31]
 800c9f4:	e0cb      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	77fb      	strb	r3, [r7, #31]
 800c9fa:	e0c8      	b.n	800cb8e <UART_SetConfig+0x34e>
 800c9fc:	2304      	movs	r3, #4
 800c9fe:	77fb      	strb	r3, [r7, #31]
 800ca00:	e0c5      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca02:	2308      	movs	r3, #8
 800ca04:	77fb      	strb	r3, [r7, #31]
 800ca06:	e0c2      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	77fb      	strb	r3, [r7, #31]
 800ca0c:	bf00      	nop
 800ca0e:	e0be      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a4d      	ldr	r2, [pc, #308]	; (800cb4c <UART_SetConfig+0x30c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d124      	bne.n	800ca64 <UART_SetConfig+0x224>
 800ca1a:	4b48      	ldr	r3, [pc, #288]	; (800cb3c <UART_SetConfig+0x2fc>)
 800ca1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca28:	d012      	beq.n	800ca50 <UART_SetConfig+0x210>
 800ca2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca2e:	d802      	bhi.n	800ca36 <UART_SetConfig+0x1f6>
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d007      	beq.n	800ca44 <UART_SetConfig+0x204>
 800ca34:	e012      	b.n	800ca5c <UART_SetConfig+0x21c>
 800ca36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca3a:	d006      	beq.n	800ca4a <UART_SetConfig+0x20a>
 800ca3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca40:	d009      	beq.n	800ca56 <UART_SetConfig+0x216>
 800ca42:	e00b      	b.n	800ca5c <UART_SetConfig+0x21c>
 800ca44:	2300      	movs	r3, #0
 800ca46:	77fb      	strb	r3, [r7, #31]
 800ca48:	e0a1      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	77fb      	strb	r3, [r7, #31]
 800ca4e:	e09e      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca50:	2304      	movs	r3, #4
 800ca52:	77fb      	strb	r3, [r7, #31]
 800ca54:	e09b      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca56:	2308      	movs	r3, #8
 800ca58:	77fb      	strb	r3, [r7, #31]
 800ca5a:	e098      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca5c:	2310      	movs	r3, #16
 800ca5e:	77fb      	strb	r3, [r7, #31]
 800ca60:	bf00      	nop
 800ca62:	e094      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a39      	ldr	r2, [pc, #228]	; (800cb50 <UART_SetConfig+0x310>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d124      	bne.n	800cab8 <UART_SetConfig+0x278>
 800ca6e:	4b33      	ldr	r3, [pc, #204]	; (800cb3c <UART_SetConfig+0x2fc>)
 800ca70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca7c:	d012      	beq.n	800caa4 <UART_SetConfig+0x264>
 800ca7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca82:	d802      	bhi.n	800ca8a <UART_SetConfig+0x24a>
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <UART_SetConfig+0x258>
 800ca88:	e012      	b.n	800cab0 <UART_SetConfig+0x270>
 800ca8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca8e:	d006      	beq.n	800ca9e <UART_SetConfig+0x25e>
 800ca90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca94:	d009      	beq.n	800caaa <UART_SetConfig+0x26a>
 800ca96:	e00b      	b.n	800cab0 <UART_SetConfig+0x270>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	77fb      	strb	r3, [r7, #31]
 800ca9c:	e077      	b.n	800cb8e <UART_SetConfig+0x34e>
 800ca9e:	2302      	movs	r3, #2
 800caa0:	77fb      	strb	r3, [r7, #31]
 800caa2:	e074      	b.n	800cb8e <UART_SetConfig+0x34e>
 800caa4:	2304      	movs	r3, #4
 800caa6:	77fb      	strb	r3, [r7, #31]
 800caa8:	e071      	b.n	800cb8e <UART_SetConfig+0x34e>
 800caaa:	2308      	movs	r3, #8
 800caac:	77fb      	strb	r3, [r7, #31]
 800caae:	e06e      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cab0:	2310      	movs	r3, #16
 800cab2:	77fb      	strb	r3, [r7, #31]
 800cab4:	bf00      	nop
 800cab6:	e06a      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a25      	ldr	r2, [pc, #148]	; (800cb54 <UART_SetConfig+0x314>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d124      	bne.n	800cb0c <UART_SetConfig+0x2cc>
 800cac2:	4b1e      	ldr	r3, [pc, #120]	; (800cb3c <UART_SetConfig+0x2fc>)
 800cac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cac8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cad0:	d012      	beq.n	800caf8 <UART_SetConfig+0x2b8>
 800cad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cad6:	d802      	bhi.n	800cade <UART_SetConfig+0x29e>
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d007      	beq.n	800caec <UART_SetConfig+0x2ac>
 800cadc:	e012      	b.n	800cb04 <UART_SetConfig+0x2c4>
 800cade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cae2:	d006      	beq.n	800caf2 <UART_SetConfig+0x2b2>
 800cae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cae8:	d009      	beq.n	800cafe <UART_SetConfig+0x2be>
 800caea:	e00b      	b.n	800cb04 <UART_SetConfig+0x2c4>
 800caec:	2300      	movs	r3, #0
 800caee:	77fb      	strb	r3, [r7, #31]
 800caf0:	e04d      	b.n	800cb8e <UART_SetConfig+0x34e>
 800caf2:	2302      	movs	r3, #2
 800caf4:	77fb      	strb	r3, [r7, #31]
 800caf6:	e04a      	b.n	800cb8e <UART_SetConfig+0x34e>
 800caf8:	2304      	movs	r3, #4
 800cafa:	77fb      	strb	r3, [r7, #31]
 800cafc:	e047      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cafe:	2308      	movs	r3, #8
 800cb00:	77fb      	strb	r3, [r7, #31]
 800cb02:	e044      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb04:	2310      	movs	r3, #16
 800cb06:	77fb      	strb	r3, [r7, #31]
 800cb08:	bf00      	nop
 800cb0a:	e040      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a11      	ldr	r2, [pc, #68]	; (800cb58 <UART_SetConfig+0x318>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d139      	bne.n	800cb8a <UART_SetConfig+0x34a>
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <UART_SetConfig+0x2fc>)
 800cb18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cb20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb24:	d027      	beq.n	800cb76 <UART_SetConfig+0x336>
 800cb26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb2a:	d817      	bhi.n	800cb5c <UART_SetConfig+0x31c>
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01c      	beq.n	800cb6a <UART_SetConfig+0x32a>
 800cb30:	e027      	b.n	800cb82 <UART_SetConfig+0x342>
 800cb32:	bf00      	nop
 800cb34:	efff69f3 	.word	0xefff69f3
 800cb38:	40011000 	.word	0x40011000
 800cb3c:	40023800 	.word	0x40023800
 800cb40:	40004400 	.word	0x40004400
 800cb44:	40004800 	.word	0x40004800
 800cb48:	40004c00 	.word	0x40004c00
 800cb4c:	40005000 	.word	0x40005000
 800cb50:	40011400 	.word	0x40011400
 800cb54:	40007800 	.word	0x40007800
 800cb58:	40007c00 	.word	0x40007c00
 800cb5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb60:	d006      	beq.n	800cb70 <UART_SetConfig+0x330>
 800cb62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb66:	d009      	beq.n	800cb7c <UART_SetConfig+0x33c>
 800cb68:	e00b      	b.n	800cb82 <UART_SetConfig+0x342>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	77fb      	strb	r3, [r7, #31]
 800cb6e:	e00e      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb70:	2302      	movs	r3, #2
 800cb72:	77fb      	strb	r3, [r7, #31]
 800cb74:	e00b      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb76:	2304      	movs	r3, #4
 800cb78:	77fb      	strb	r3, [r7, #31]
 800cb7a:	e008      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb7c:	2308      	movs	r3, #8
 800cb7e:	77fb      	strb	r3, [r7, #31]
 800cb80:	e005      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb82:	2310      	movs	r3, #16
 800cb84:	77fb      	strb	r3, [r7, #31]
 800cb86:	bf00      	nop
 800cb88:	e001      	b.n	800cb8e <UART_SetConfig+0x34e>
 800cb8a:	2310      	movs	r3, #16
 800cb8c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	69db      	ldr	r3, [r3, #28]
 800cb92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb96:	d17f      	bne.n	800cc98 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800cb98:	7ffb      	ldrb	r3, [r7, #31]
 800cb9a:	2b08      	cmp	r3, #8
 800cb9c:	d85c      	bhi.n	800cc58 <UART_SetConfig+0x418>
 800cb9e:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <UART_SetConfig+0x364>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cbc9 	.word	0x0800cbc9
 800cba8:	0800cbe9 	.word	0x0800cbe9
 800cbac:	0800cc09 	.word	0x0800cc09
 800cbb0:	0800cc59 	.word	0x0800cc59
 800cbb4:	0800cc21 	.word	0x0800cc21
 800cbb8:	0800cc59 	.word	0x0800cc59
 800cbbc:	0800cc59 	.word	0x0800cc59
 800cbc0:	0800cc59 	.word	0x0800cc59
 800cbc4:	0800cc41 	.word	0x0800cc41
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbc8:	f7fd fc16 	bl	800a3f8 <HAL_RCC_GetPCLK1Freq>
 800cbcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	005a      	lsls	r2, r3, #1
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	085b      	lsrs	r3, r3, #1
 800cbd8:	441a      	add	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	61bb      	str	r3, [r7, #24]
        break;
 800cbe6:	e03a      	b.n	800cc5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbe8:	f7fd fc1a 	bl	800a420 <HAL_RCC_GetPCLK2Freq>
 800cbec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	005a      	lsls	r2, r3, #1
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	085b      	lsrs	r3, r3, #1
 800cbf8:	441a      	add	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	61bb      	str	r3, [r7, #24]
        break;
 800cc06:	e02a      	b.n	800cc5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	085a      	lsrs	r2, r3, #1
 800cc0e:	4b5f      	ldr	r3, [pc, #380]	; (800cd8c <UART_SetConfig+0x54c>)
 800cc10:	4413      	add	r3, r2
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	6852      	ldr	r2, [r2, #4]
 800cc16:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	61bb      	str	r3, [r7, #24]
        break;
 800cc1e:	e01e      	b.n	800cc5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc20:	f7fd fb2c 	bl	800a27c <HAL_RCC_GetSysClockFreq>
 800cc24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	005a      	lsls	r2, r3, #1
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	085b      	lsrs	r3, r3, #1
 800cc30:	441a      	add	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	61bb      	str	r3, [r7, #24]
        break;
 800cc3e:	e00e      	b.n	800cc5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	085b      	lsrs	r3, r3, #1
 800cc46:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	61bb      	str	r3, [r7, #24]
        break;
 800cc56:	e002      	b.n	800cc5e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	75fb      	strb	r3, [r7, #23]
        break;
 800cc5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2b0f      	cmp	r3, #15
 800cc62:	d916      	bls.n	800cc92 <UART_SetConfig+0x452>
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc6a:	d212      	bcs.n	800cc92 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	f023 030f 	bic.w	r3, r3, #15
 800cc74:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	085b      	lsrs	r3, r3, #1
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	f003 0307 	and.w	r3, r3, #7
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	897b      	ldrh	r3, [r7, #10]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	897a      	ldrh	r2, [r7, #10]
 800cc8e:	60da      	str	r2, [r3, #12]
 800cc90:	e070      	b.n	800cd74 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	75fb      	strb	r3, [r7, #23]
 800cc96:	e06d      	b.n	800cd74 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800cc98:	7ffb      	ldrb	r3, [r7, #31]
 800cc9a:	2b08      	cmp	r3, #8
 800cc9c:	d859      	bhi.n	800cd52 <UART_SetConfig+0x512>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <UART_SetConfig+0x464>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800ccc9 	.word	0x0800ccc9
 800cca8:	0800cce7 	.word	0x0800cce7
 800ccac:	0800cd05 	.word	0x0800cd05
 800ccb0:	0800cd53 	.word	0x0800cd53
 800ccb4:	0800cd1d 	.word	0x0800cd1d
 800ccb8:	0800cd53 	.word	0x0800cd53
 800ccbc:	0800cd53 	.word	0x0800cd53
 800ccc0:	0800cd53 	.word	0x0800cd53
 800ccc4:	0800cd3b 	.word	0x0800cd3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccc8:	f7fd fb96 	bl	800a3f8 <HAL_RCC_GetPCLK1Freq>
 800cccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	085a      	lsrs	r2, r3, #1
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	441a      	add	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	61bb      	str	r3, [r7, #24]
        break;
 800cce4:	e038      	b.n	800cd58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cce6:	f7fd fb9b 	bl	800a420 <HAL_RCC_GetPCLK2Freq>
 800ccea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	085a      	lsrs	r2, r3, #1
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	441a      	add	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	61bb      	str	r3, [r7, #24]
        break;
 800cd02:	e029      	b.n	800cd58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	085a      	lsrs	r2, r3, #1
 800cd0a:	4b21      	ldr	r3, [pc, #132]	; (800cd90 <UART_SetConfig+0x550>)
 800cd0c:	4413      	add	r3, r2
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6852      	ldr	r2, [r2, #4]
 800cd12:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	61bb      	str	r3, [r7, #24]
        break;
 800cd1a:	e01d      	b.n	800cd58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd1c:	f7fd faae 	bl	800a27c <HAL_RCC_GetSysClockFreq>
 800cd20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	085a      	lsrs	r2, r3, #1
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	441a      	add	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	61bb      	str	r3, [r7, #24]
        break;
 800cd38:	e00e      	b.n	800cd58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	085b      	lsrs	r3, r3, #1
 800cd40:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	61bb      	str	r3, [r7, #24]
        break;
 800cd50:	e002      	b.n	800cd58 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	75fb      	strb	r3, [r7, #23]
        break;
 800cd56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2b0f      	cmp	r3, #15
 800cd5c:	d908      	bls.n	800cd70 <UART_SetConfig+0x530>
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd64:	d204      	bcs.n	800cd70 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	69ba      	ldr	r2, [r7, #24]
 800cd6c:	60da      	str	r2, [r3, #12]
 800cd6e:	e001      	b.n	800cd74 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3720      	adds	r7, #32
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	01e84800 	.word	0x01e84800
 800cd90:	00f42400 	.word	0x00f42400

0800cd94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00a      	beq.n	800cdbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc2:	f003 0302 	and.w	r3, r3, #2
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00a      	beq.n	800cde0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	430a      	orrs	r2, r1
 800cdde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	f003 0304 	and.w	r3, r3, #4
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00a      	beq.n	800ce02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	430a      	orrs	r2, r1
 800ce00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce06:	f003 0308 	and.w	r3, r3, #8
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00a      	beq.n	800ce24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	430a      	orrs	r2, r1
 800ce22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	f003 0310 	and.w	r3, r3, #16
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00a      	beq.n	800ce46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4a:	f003 0320 	and.w	r3, r3, #32
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00a      	beq.n	800ce68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d01a      	beq.n	800ceaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	430a      	orrs	r2, r1
 800ce88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce92:	d10a      	bne.n	800ceaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00a      	beq.n	800cecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	430a      	orrs	r2, r1
 800ceca:	605a      	str	r2, [r3, #4]
  }
}
 800cecc:	bf00      	nop
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b086      	sub	sp, #24
 800cedc:	af02      	add	r7, sp, #8
 800cede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cee6:	f7fa fae7 	bl	80074b8 <HAL_GetTick>
 800ceea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 0308 	and.w	r3, r3, #8
 800cef6:	2b08      	cmp	r3, #8
 800cef8:	d10e      	bne.n	800cf18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cefa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f82a 	bl	800cf62 <UART_WaitOnFlagUntilTimeout>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e020      	b.n	800cf5a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	d10e      	bne.n	800cf44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f814 	bl	800cf62 <UART_WaitOnFlagUntilTimeout>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf40:	2303      	movs	r3, #3
 800cf42:	e00a      	b.n	800cf5a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b084      	sub	sp, #16
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	603b      	str	r3, [r7, #0]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf72:	e05d      	b.n	800d030 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7a:	d059      	beq.n	800d030 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf7c:	f7fa fa9c 	bl	80074b8 <HAL_GetTick>
 800cf80:	4602      	mov	r2, r0
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	69ba      	ldr	r2, [r7, #24]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d302      	bcc.n	800cf92 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d11b      	bne.n	800cfca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cfa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f022 0201 	bic.w	r2, r2, #1
 800cfb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2220      	movs	r2, #32
 800cfb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2220      	movs	r2, #32
 800cfbc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e042      	b.n	800d050 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d02b      	beq.n	800d030 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfe6:	d123      	bne.n	800d030 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cff0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d000:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689a      	ldr	r2, [r3, #8]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f022 0201 	bic.w	r2, r2, #1
 800d010:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2220      	movs	r2, #32
 800d016:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2220      	movs	r2, #32
 800d01c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2220      	movs	r2, #32
 800d022:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d02c:	2303      	movs	r3, #3
 800d02e:	e00f      	b.n	800d050 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	69da      	ldr	r2, [r3, #28]
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	4013      	ands	r3, r2
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	bf0c      	ite	eq
 800d040:	2301      	moveq	r3, #1
 800d042:	2300      	movne	r3, #0
 800d044:	b2db      	uxtb	r3, r3
 800d046:	461a      	mov	r2, r3
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d092      	beq.n	800cf74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d058:	b084      	sub	sp, #16
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	f107 001c 	add.w	r0, r7, #28
 800d066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d120      	bne.n	800d0b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	4b20      	ldr	r3, [pc, #128]	; (800d104 <USB_CoreInit+0xac>)
 800d082:	4013      	ands	r3, r2
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d096:	2b01      	cmp	r3, #1
 800d098:	d105      	bne.n	800d0a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fa52 	bl	800d550 <USB_CoreReset>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73fb      	strb	r3, [r7, #15]
 800d0b0:	e010      	b.n	800d0d4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fa46 	bl	800d550 <USB_CoreReset>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d10b      	bne.n	800d0f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f043 0206 	orr.w	r2, r3, #6
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	f043 0220 	orr.w	r2, r3, #32
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0fe:	b004      	add	sp, #16
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	ffbdffbf 	.word	0xffbdffbf

0800d108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f023 0201 	bic.w	r2, r3, #1
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	370c      	adds	r7, #12
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d142:	78fb      	ldrb	r3, [r7, #3]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d106      	bne.n	800d156 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	60da      	str	r2, [r3, #12]
 800d154:	e00b      	b.n	800d16e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	60da      	str	r2, [r3, #12]
 800d168:	e001      	b.n	800d16e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e003      	b.n	800d176 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d16e:	2032      	movs	r0, #50	; 0x32
 800d170:	f7fa f9ae 	bl	80074d0 <HAL_Delay>

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
	...

0800d180 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d180:	b084      	sub	sp, #16
 800d182:	b580      	push	{r7, lr}
 800d184:	b086      	sub	sp, #24
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d18e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d192:	2300      	movs	r3, #0
 800d194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d19a:	2300      	movs	r3, #0
 800d19c:	613b      	str	r3, [r7, #16]
 800d19e:	e009      	b.n	800d1b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	3340      	adds	r3, #64	; 0x40
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	613b      	str	r3, [r7, #16]
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2b0e      	cmp	r3, #14
 800d1b8:	d9f2      	bls.n	800d1a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d11c      	bne.n	800d1fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1ce:	f043 0302 	orr.w	r3, r3, #2
 800d1d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	e005      	b.n	800d206 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d20c:	461a      	mov	r2, r3
 800d20e:	2300      	movs	r3, #0
 800d210:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d218:	4619      	mov	r1, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d220:	461a      	mov	r2, r3
 800d222:	680b      	ldr	r3, [r1, #0]
 800d224:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d10c      	bne.n	800d246 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d104      	bne.n	800d23c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d232:	2100      	movs	r1, #0
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f959 	bl	800d4ec <USB_SetDevSpeed>
 800d23a:	e018      	b.n	800d26e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d23c:	2101      	movs	r1, #1
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f954 	bl	800d4ec <USB_SetDevSpeed>
 800d244:	e013      	b.n	800d26e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d10c      	bne.n	800d266 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d104      	bne.n	800d25c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d252:	2100      	movs	r1, #0
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f949 	bl	800d4ec <USB_SetDevSpeed>
 800d25a:	e008      	b.n	800d26e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d25c:	2101      	movs	r1, #1
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f944 	bl	800d4ec <USB_SetDevSpeed>
 800d264:	e003      	b.n	800d26e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d266:	2103      	movs	r1, #3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f93f 	bl	800d4ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d26e:	2110      	movs	r1, #16
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f8f3 	bl	800d45c <USB_FlushTxFifo>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 f911 	bl	800d4a8 <USB_FlushRxFifo>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d296:	461a      	mov	r2, r3
 800d298:	2300      	movs	r3, #0
 800d29a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	613b      	str	r3, [r7, #16]
 800d2b8:	e043      	b.n	800d342 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	015a      	lsls	r2, r3, #5
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2d0:	d118      	bne.n	800d304 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	015a      	lsls	r2, r3, #5
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	4413      	add	r3, r2
 800d2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2ea:	6013      	str	r3, [r2, #0]
 800d2ec:	e013      	b.n	800d316 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	015a      	lsls	r2, r3, #5
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	e008      	b.n	800d316 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d310:	461a      	mov	r2, r3
 800d312:	2300      	movs	r3, #0
 800d314:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	015a      	lsls	r2, r3, #5
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	4413      	add	r3, r2
 800d31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d322:	461a      	mov	r2, r3
 800d324:	2300      	movs	r3, #0
 800d326:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d334:	461a      	mov	r2, r3
 800d336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d33a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	3301      	adds	r3, #1
 800d340:	613b      	str	r3, [r7, #16]
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	429a      	cmp	r2, r3
 800d348:	d3b7      	bcc.n	800d2ba <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d34a:	2300      	movs	r3, #0
 800d34c:	613b      	str	r3, [r7, #16]
 800d34e:	e043      	b.n	800d3d8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	015a      	lsls	r2, r3, #5
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	4413      	add	r3, r2
 800d358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d366:	d118      	bne.n	800d39a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10a      	bne.n	800d384 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37a:	461a      	mov	r2, r3
 800d37c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	e013      	b.n	800d3ac <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	015a      	lsls	r2, r3, #5
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d390:	461a      	mov	r2, r3
 800d392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	e008      	b.n	800d3ac <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d3d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	613b      	str	r3, [r7, #16]
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d3b7      	bcc.n	800d350 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d400:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d404:	2b00      	cmp	r3, #0
 800d406:	d105      	bne.n	800d414 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	f043 0210 	orr.w	r2, r3, #16
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	699a      	ldr	r2, [r3, #24]
 800d418:	4b0e      	ldr	r3, [pc, #56]	; (800d454 <USB_DevInit+0x2d4>)
 800d41a:	4313      	orrs	r3, r2
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d005      	beq.n	800d432 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	f043 0208 	orr.w	r2, r3, #8
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d434:	2b01      	cmp	r3, #1
 800d436:	d105      	bne.n	800d444 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	699a      	ldr	r2, [r3, #24]
 800d43c:	4b06      	ldr	r3, [pc, #24]	; (800d458 <USB_DevInit+0x2d8>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d444:	7dfb      	ldrb	r3, [r7, #23]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d450:	b004      	add	sp, #16
 800d452:	4770      	bx	lr
 800d454:	803c3800 	.word	0x803c3800
 800d458:	40000004 	.word	0x40000004

0800d45c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d466:	2300      	movs	r3, #0
 800d468:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	019b      	lsls	r3, r3, #6
 800d46e:	f043 0220 	orr.w	r2, r3, #32
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	4a09      	ldr	r2, [pc, #36]	; (800d4a4 <USB_FlushTxFifo+0x48>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d901      	bls.n	800d488 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d484:	2303      	movs	r3, #3
 800d486:	e006      	b.n	800d496 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	f003 0320 	and.w	r3, r3, #32
 800d490:	2b20      	cmp	r3, #32
 800d492:	d0f0      	beq.n	800d476 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	00030d40 	.word	0x00030d40

0800d4a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2210      	movs	r2, #16
 800d4b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	60fb      	str	r3, [r7, #12]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	4a09      	ldr	r2, [pc, #36]	; (800d4e8 <USB_FlushRxFifo+0x40>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d901      	bls.n	800d4cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	e006      	b.n	800d4da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	691b      	ldr	r3, [r3, #16]
 800d4d0:	f003 0310 	and.w	r3, r3, #16
 800d4d4:	2b10      	cmp	r3, #16
 800d4d6:	d0f0      	beq.n	800d4ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	00030d40 	.word	0x00030d40

0800d4ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	78fb      	ldrb	r3, [r7, #3]
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d50c:	4313      	orrs	r3, r2
 800d50e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d538:	f043 0302 	orr.w	r3, r3, #2
 800d53c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d53e:	2003      	movs	r0, #3
 800d540:	f7f9 ffc6 	bl	80074d0 <HAL_Delay>

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3301      	adds	r3, #1
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	4a13      	ldr	r2, [pc, #76]	; (800d5b4 <USB_CoreReset+0x64>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d901      	bls.n	800d56e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d56a:	2303      	movs	r3, #3
 800d56c:	e01b      	b.n	800d5a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	2b00      	cmp	r3, #0
 800d574:	daf2      	bge.n	800d55c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d576:	2300      	movs	r3, #0
 800d578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	f043 0201 	orr.w	r2, r3, #1
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3301      	adds	r3, #1
 800d58a:	60fb      	str	r3, [r7, #12]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4a09      	ldr	r2, [pc, #36]	; (800d5b4 <USB_CoreReset+0x64>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d901      	bls.n	800d598 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d594:	2303      	movs	r3, #3
 800d596:	e006      	b.n	800d5a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	f003 0301 	and.w	r3, r3, #1
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d0f0      	beq.n	800d586 <USB_CoreReset+0x36>

  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3714      	adds	r7, #20
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	00030d40 	.word	0x00030d40

0800d5b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d5b8:	b480      	push	{r7}
 800d5ba:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d5bc:	bf00      	nop
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
	...

0800d5c8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5ce:	f3ef 8305 	mrs	r3, IPSR
 800d5d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10f      	bne.n	800d5fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5da:	f3ef 8310 	mrs	r3, PRIMASK
 800d5de:	607b      	str	r3, [r7, #4]
  return(result);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d105      	bne.n	800d5f2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ea:	603b      	str	r3, [r7, #0]
  return(result);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d007      	beq.n	800d602 <osKernelInitialize+0x3a>
 800d5f2:	4b0e      	ldr	r3, [pc, #56]	; (800d62c <osKernelInitialize+0x64>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d103      	bne.n	800d602 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d5fa:	f06f 0305 	mvn.w	r3, #5
 800d5fe:	60fb      	str	r3, [r7, #12]
 800d600:	e00c      	b.n	800d61c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d602:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <osKernelInitialize+0x64>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d105      	bne.n	800d616 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d60a:	4b08      	ldr	r3, [pc, #32]	; (800d62c <osKernelInitialize+0x64>)
 800d60c:	2201      	movs	r2, #1
 800d60e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d610:	2300      	movs	r3, #0
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e002      	b.n	800d61c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d616:	f04f 33ff 	mov.w	r3, #4294967295
 800d61a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d61c:	68fb      	ldr	r3, [r7, #12]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3714      	adds	r7, #20
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	200032d8 	.word	0x200032d8

0800d630 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d636:	f3ef 8305 	mrs	r3, IPSR
 800d63a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d63c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10f      	bne.n	800d662 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d642:	f3ef 8310 	mrs	r3, PRIMASK
 800d646:	607b      	str	r3, [r7, #4]
  return(result);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d105      	bne.n	800d65a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d64e:	f3ef 8311 	mrs	r3, BASEPRI
 800d652:	603b      	str	r3, [r7, #0]
  return(result);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d007      	beq.n	800d66a <osKernelStart+0x3a>
 800d65a:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <osKernelStart+0x68>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d103      	bne.n	800d66a <osKernelStart+0x3a>
    stat = osErrorISR;
 800d662:	f06f 0305 	mvn.w	r3, #5
 800d666:	60fb      	str	r3, [r7, #12]
 800d668:	e010      	b.n	800d68c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d66a:	4b0b      	ldr	r3, [pc, #44]	; (800d698 <osKernelStart+0x68>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d109      	bne.n	800d686 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d672:	f7ff ffa1 	bl	800d5b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d676:	4b08      	ldr	r3, [pc, #32]	; (800d698 <osKernelStart+0x68>)
 800d678:	2202      	movs	r2, #2
 800d67a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d67c:	f001 f89c 	bl	800e7b8 <vTaskStartScheduler>
      stat = osOK;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e002      	b.n	800d68c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d686:	f04f 33ff 	mov.w	r3, #4294967295
 800d68a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d68c:	68fb      	ldr	r3, [r7, #12]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	200032d8 	.word	0x200032d8

0800d69c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b090      	sub	sp, #64	; 0x40
 800d6a0:	af04      	add	r7, sp, #16
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6ac:	f3ef 8305 	mrs	r3, IPSR
 800d6b0:	61fb      	str	r3, [r7, #28]
  return(result);
 800d6b2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f040 808f 	bne.w	800d7d8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d6be:	61bb      	str	r3, [r7, #24]
  return(result);
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d105      	bne.n	800d6d2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6c6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6ca:	617b      	str	r3, [r7, #20]
  return(result);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d003      	beq.n	800d6da <osThreadNew+0x3e>
 800d6d2:	4b44      	ldr	r3, [pc, #272]	; (800d7e4 <osThreadNew+0x148>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	d07e      	beq.n	800d7d8 <osThreadNew+0x13c>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d07b      	beq.n	800d7d8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d6e0:	2380      	movs	r3, #128	; 0x80
 800d6e2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d6e4:	2318      	movs	r3, #24
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d045      	beq.n	800d784 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <osThreadNew+0x6a>
        name = attr->name;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d002      	beq.n	800d714 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	d008      	beq.n	800d72c <osThreadNew+0x90>
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	2b38      	cmp	r3, #56	; 0x38
 800d71e:	d805      	bhi.n	800d72c <osThreadNew+0x90>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <osThreadNew+0x94>
        return (NULL);
 800d72c:	2300      	movs	r3, #0
 800d72e:	e054      	b.n	800d7da <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	695b      	ldr	r3, [r3, #20]
 800d73c:	089b      	lsrs	r3, r3, #2
 800d73e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00e      	beq.n	800d766 <osThreadNew+0xca>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	2b5b      	cmp	r3, #91	; 0x5b
 800d74e:	d90a      	bls.n	800d766 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <osThreadNew+0xca>
        mem = 1;
 800d760:	2301      	movs	r3, #1
 800d762:	623b      	str	r3, [r7, #32]
 800d764:	e010      	b.n	800d788 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10c      	bne.n	800d788 <osThreadNew+0xec>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d108      	bne.n	800d788 <osThreadNew+0xec>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d104      	bne.n	800d788 <osThreadNew+0xec>
          mem = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	623b      	str	r3, [r7, #32]
 800d782:	e001      	b.n	800d788 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d110      	bne.n	800d7b0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d796:	9202      	str	r2, [sp, #8]
 800d798:	9301      	str	r3, [sp, #4]
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 fe2b 	bl	800e400 <xTaskCreateStatic>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	613b      	str	r3, [r7, #16]
 800d7ae:	e013      	b.n	800d7d8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d110      	bne.n	800d7d8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	f107 0310 	add.w	r3, r7, #16
 800d7be:	9301      	str	r3, [sp, #4]
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f000 fe79 	bl	800e4c0 <xTaskCreate>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d001      	beq.n	800d7d8 <osThreadNew+0x13c>
          hTask = NULL;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d7d8:	693b      	ldr	r3, [r7, #16]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3730      	adds	r7, #48	; 0x30
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	200032d8 	.word	0x200032d8

0800d7e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7f0:	f3ef 8305 	mrs	r3, IPSR
 800d7f4:	613b      	str	r3, [r7, #16]
  return(result);
 800d7f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10f      	bne.n	800d81c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d800:	60fb      	str	r3, [r7, #12]
  return(result);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d105      	bne.n	800d814 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d808:	f3ef 8311 	mrs	r3, BASEPRI
 800d80c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <osDelay+0x3c>
 800d814:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <osDelay+0x58>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d103      	bne.n	800d824 <osDelay+0x3c>
    stat = osErrorISR;
 800d81c:	f06f 0305 	mvn.w	r3, #5
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	e007      	b.n	800d834 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d824:	2300      	movs	r3, #0
 800d826:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 ff8c 	bl	800e74c <vTaskDelay>
    }
  }

  return (stat);
 800d834:	697b      	ldr	r3, [r7, #20]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	200032d8 	.word	0x200032d8

0800d844 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4a07      	ldr	r2, [pc, #28]	; (800d870 <vApplicationGetIdleTaskMemory+0x2c>)
 800d854:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4a06      	ldr	r2, [pc, #24]	; (800d874 <vApplicationGetIdleTaskMemory+0x30>)
 800d85a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2280      	movs	r2, #128	; 0x80
 800d860:	601a      	str	r2, [r3, #0]
}
 800d862:	bf00      	nop
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	200032dc 	.word	0x200032dc
 800d874:	20003338 	.word	0x20003338

0800d878 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4a07      	ldr	r2, [pc, #28]	; (800d8a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d888:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	4a06      	ldr	r2, [pc, #24]	; (800d8a8 <vApplicationGetTimerTaskMemory+0x30>)
 800d88e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d896:	601a      	str	r2, [r3, #0]
}
 800d898:	bf00      	nop
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	20003538 	.word	0x20003538
 800d8a8:	20003594 	.word	0x20003594

0800d8ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f103 0208 	add.w	r2, r3, #8
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f103 0208 	add.w	r2, r3, #8
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f103 0208 	add.w	r2, r3, #8
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8fa:	bf00      	nop
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d906:	b480      	push	{r7}
 800d908:	b085      	sub	sp, #20
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	683a      	ldr	r2, [r7, #0]
 800d92a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	683a      	ldr	r2, [r7, #0]
 800d930:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	1c5a      	adds	r2, r3, #1
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	601a      	str	r2, [r3, #0]
}
 800d942:	bf00      	nop
 800d944:	3714      	adds	r7, #20
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr

0800d94e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d94e:	b480      	push	{r7}
 800d950:	b085      	sub	sp, #20
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d964:	d103      	bne.n	800d96e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	60fb      	str	r3, [r7, #12]
 800d96c:	e00c      	b.n	800d988 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	3308      	adds	r3, #8
 800d972:	60fb      	str	r3, [r7, #12]
 800d974:	e002      	b.n	800d97c <vListInsert+0x2e>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	429a      	cmp	r2, r3
 800d986:	d2f6      	bcs.n	800d976 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	1c5a      	adds	r2, r3, #1
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	601a      	str	r2, [r3, #0]
}
 800d9b4:	bf00      	nop
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	6892      	ldr	r2, [r2, #8]
 800d9d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6852      	ldr	r2, [r2, #4]
 800d9e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d103      	bne.n	800d9f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	689a      	ldr	r2, [r3, #8]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	1e5a      	subs	r2, r3, #1
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10b      	bne.n	800da40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2c:	b672      	cpsid	i
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	b662      	cpsie	i
 800da3c:	60bb      	str	r3, [r7, #8]
 800da3e:	e7fe      	b.n	800da3e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800da40:	f002 f95a 	bl	800fcf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da4c:	68f9      	ldr	r1, [r7, #12]
 800da4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da50:	fb01 f303 	mul.w	r3, r1, r3
 800da54:	441a      	add	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2200      	movs	r2, #0
 800da5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da70:	3b01      	subs	r3, #1
 800da72:	68f9      	ldr	r1, [r7, #12]
 800da74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da76:	fb01 f303 	mul.w	r3, r1, r3
 800da7a:	441a      	add	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	22ff      	movs	r2, #255	; 0xff
 800da84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	22ff      	movs	r2, #255	; 0xff
 800da8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d114      	bne.n	800dac0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d01a      	beq.n	800dad4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3310      	adds	r3, #16
 800daa2:	4618      	mov	r0, r3
 800daa4:	f001 f916 	bl	800ecd4 <xTaskRemoveFromEventList>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d012      	beq.n	800dad4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800daae:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <xQueueGenericReset+0xd0>)
 800dab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab4:	601a      	str	r2, [r3, #0]
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	e009      	b.n	800dad4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	3310      	adds	r3, #16
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7ff fef1 	bl	800d8ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	3324      	adds	r3, #36	; 0x24
 800dace:	4618      	mov	r0, r3
 800dad0:	f7ff feec 	bl	800d8ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dad4:	f002 f942 	bl	800fd5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dad8:	2301      	movs	r3, #1
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	e000ed04 	.word	0xe000ed04

0800dae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08e      	sub	sp, #56	; 0x38
 800daec:	af02      	add	r7, sp, #8
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <xQueueGenericCreateStatic+0x2c>
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	b672      	cpsid	i
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	b662      	cpsie	i
 800db10:	62bb      	str	r3, [r7, #40]	; 0x28
 800db12:	e7fe      	b.n	800db12 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10b      	bne.n	800db32 <xQueueGenericCreateStatic+0x4a>
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	b672      	cpsid	i
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	b662      	cpsie	i
 800db2e:	627b      	str	r3, [r7, #36]	; 0x24
 800db30:	e7fe      	b.n	800db30 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <xQueueGenericCreateStatic+0x56>
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <xQueueGenericCreateStatic+0x5a>
 800db3e:	2301      	movs	r3, #1
 800db40:	e000      	b.n	800db44 <xQueueGenericCreateStatic+0x5c>
 800db42:	2300      	movs	r3, #0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10b      	bne.n	800db60 <xQueueGenericCreateStatic+0x78>
 800db48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4c:	b672      	cpsid	i
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	b662      	cpsie	i
 800db5c:	623b      	str	r3, [r7, #32]
 800db5e:	e7fe      	b.n	800db5e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d102      	bne.n	800db6c <xQueueGenericCreateStatic+0x84>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <xQueueGenericCreateStatic+0x88>
 800db6c:	2301      	movs	r3, #1
 800db6e:	e000      	b.n	800db72 <xQueueGenericCreateStatic+0x8a>
 800db70:	2300      	movs	r3, #0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10b      	bne.n	800db8e <xQueueGenericCreateStatic+0xa6>
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	b672      	cpsid	i
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	b662      	cpsie	i
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	e7fe      	b.n	800db8c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800db8e:	2350      	movs	r3, #80	; 0x50
 800db90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b50      	cmp	r3, #80	; 0x50
 800db96:	d00b      	beq.n	800dbb0 <xQueueGenericCreateStatic+0xc8>
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	b672      	cpsid	i
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	b662      	cpsie	i
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	e7fe      	b.n	800dbae <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dbb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00d      	beq.n	800dbd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbc4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	68b9      	ldr	r1, [r7, #8]
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f000 f805 	bl	800dbe2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3730      	adds	r7, #48	; 0x30
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b084      	sub	sp, #16
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	60f8      	str	r0, [r7, #12]
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
 800dbee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d103      	bne.n	800dbfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	601a      	str	r2, [r3, #0]
 800dbfc:	e002      	b.n	800dc04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc10:	2101      	movs	r1, #1
 800dc12:	69b8      	ldr	r0, [r7, #24]
 800dc14:	f7ff fefe 	bl	800da14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	78fa      	ldrb	r2, [r7, #3]
 800dc1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc20:	bf00      	nop
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08e      	sub	sp, #56	; 0x38
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc36:	2300      	movs	r3, #0
 800dc38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10b      	bne.n	800dc5c <xQueueGenericSend+0x34>
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	b672      	cpsid	i
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	b662      	cpsie	i
 800dc58:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc5a:	e7fe      	b.n	800dc5a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d103      	bne.n	800dc6a <xQueueGenericSend+0x42>
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <xQueueGenericSend+0x46>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e000      	b.n	800dc70 <xQueueGenericSend+0x48>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10b      	bne.n	800dc8c <xQueueGenericSend+0x64>
 800dc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc78:	b672      	cpsid	i
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	b662      	cpsie	i
 800dc88:	627b      	str	r3, [r7, #36]	; 0x24
 800dc8a:	e7fe      	b.n	800dc8a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d103      	bne.n	800dc9a <xQueueGenericSend+0x72>
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d101      	bne.n	800dc9e <xQueueGenericSend+0x76>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e000      	b.n	800dca0 <xQueueGenericSend+0x78>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10b      	bne.n	800dcbc <xQueueGenericSend+0x94>
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	b672      	cpsid	i
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	b662      	cpsie	i
 800dcb8:	623b      	str	r3, [r7, #32]
 800dcba:	e7fe      	b.n	800dcba <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcbc:	f001 f9c8 	bl	800f050 <xTaskGetSchedulerState>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <xQueueGenericSend+0xa4>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <xQueueGenericSend+0xa8>
 800dccc:	2301      	movs	r3, #1
 800dcce:	e000      	b.n	800dcd2 <xQueueGenericSend+0xaa>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10b      	bne.n	800dcee <xQueueGenericSend+0xc6>
 800dcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcda:	b672      	cpsid	i
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	b662      	cpsie	i
 800dcea:	61fb      	str	r3, [r7, #28]
 800dcec:	e7fe      	b.n	800dcec <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcee:	f002 f803 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d302      	bcc.n	800dd04 <xQueueGenericSend+0xdc>
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d129      	bne.n	800dd58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	68b9      	ldr	r1, [r7, #8]
 800dd08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd0a:	f000 fa0d 	bl	800e128 <prvCopyDataToQueue>
 800dd0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d010      	beq.n	800dd3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	3324      	adds	r3, #36	; 0x24
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 ffd9 	bl	800ecd4 <xTaskRemoveFromEventList>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d013      	beq.n	800dd50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd28:	4b3f      	ldr	r3, [pc, #252]	; (800de28 <xQueueGenericSend+0x200>)
 800dd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	e00a      	b.n	800dd50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d007      	beq.n	800dd50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dd40:	4b39      	ldr	r3, [pc, #228]	; (800de28 <xQueueGenericSend+0x200>)
 800dd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dd50:	f002 f804 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800dd54:	2301      	movs	r3, #1
 800dd56:	e063      	b.n	800de20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d103      	bne.n	800dd66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd5e:	f001 fffd 	bl	800fd5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dd62:	2300      	movs	r3, #0
 800dd64:	e05c      	b.n	800de20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd6c:	f107 0314 	add.w	r3, r7, #20
 800dd70:	4618      	mov	r0, r3
 800dd72:	f001 f813 	bl	800ed9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd76:	2301      	movs	r3, #1
 800dd78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd7a:	f001 ffef 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd7e:	f000 fd83 	bl	800e888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd82:	f001 ffb9 	bl	800fcf8 <vPortEnterCritical>
 800dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d103      	bne.n	800dd9c <xQueueGenericSend+0x174>
 800dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dda2:	b25b      	sxtb	r3, r3
 800dda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda8:	d103      	bne.n	800ddb2 <xQueueGenericSend+0x18a>
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddb2:	f001 ffd3 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddb6:	1d3a      	adds	r2, r7, #4
 800ddb8:	f107 0314 	add.w	r3, r7, #20
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f001 f802 	bl	800edc8 <xTaskCheckForTimeOut>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d124      	bne.n	800de14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ddca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddcc:	f000 faa4 	bl	800e318 <prvIsQueueFull>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d018      	beq.n	800de08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	3310      	adds	r3, #16
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 ff26 	bl	800ec30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dde6:	f000 fa2f 	bl	800e248 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ddea:	f000 fd5b 	bl	800e8a4 <xTaskResumeAll>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f47f af7c 	bne.w	800dcee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ddf6:	4b0c      	ldr	r3, [pc, #48]	; (800de28 <xQueueGenericSend+0x200>)
 800ddf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	e772      	b.n	800dcee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de0a:	f000 fa1d 	bl	800e248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de0e:	f000 fd49 	bl	800e8a4 <xTaskResumeAll>
 800de12:	e76c      	b.n	800dcee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de16:	f000 fa17 	bl	800e248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de1a:	f000 fd43 	bl	800e8a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de20:	4618      	mov	r0, r3
 800de22:	3738      	adds	r7, #56	; 0x38
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b08e      	sub	sp, #56	; 0x38
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
 800de38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10b      	bne.n	800de5c <xQueueGenericSendFromISR+0x30>
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	b672      	cpsid	i
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	b662      	cpsie	i
 800de58:	627b      	str	r3, [r7, #36]	; 0x24
 800de5a:	e7fe      	b.n	800de5a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d103      	bne.n	800de6a <xQueueGenericSendFromISR+0x3e>
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <xQueueGenericSendFromISR+0x42>
 800de6a:	2301      	movs	r3, #1
 800de6c:	e000      	b.n	800de70 <xQueueGenericSendFromISR+0x44>
 800de6e:	2300      	movs	r3, #0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10b      	bne.n	800de8c <xQueueGenericSendFromISR+0x60>
 800de74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de78:	b672      	cpsid	i
 800de7a:	f383 8811 	msr	BASEPRI, r3
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	b662      	cpsie	i
 800de88:	623b      	str	r3, [r7, #32]
 800de8a:	e7fe      	b.n	800de8a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d103      	bne.n	800de9a <xQueueGenericSendFromISR+0x6e>
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de96:	2b01      	cmp	r3, #1
 800de98:	d101      	bne.n	800de9e <xQueueGenericSendFromISR+0x72>
 800de9a:	2301      	movs	r3, #1
 800de9c:	e000      	b.n	800dea0 <xQueueGenericSendFromISR+0x74>
 800de9e:	2300      	movs	r3, #0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10b      	bne.n	800debc <xQueueGenericSendFromISR+0x90>
 800dea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea8:	b672      	cpsid	i
 800deaa:	f383 8811 	msr	BASEPRI, r3
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f3bf 8f4f 	dsb	sy
 800deb6:	b662      	cpsie	i
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	e7fe      	b.n	800deba <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800debc:	f001 fffc 	bl	800feb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dec0:	f3ef 8211 	mrs	r2, BASEPRI
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	b672      	cpsid	i
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	b662      	cpsie	i
 800ded8:	61ba      	str	r2, [r7, #24]
 800deda:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dedc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dede:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dee8:	429a      	cmp	r2, r3
 800deea:	d302      	bcc.n	800def2 <xQueueGenericSendFromISR+0xc6>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d12c      	bne.n	800df4c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800def8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	68b9      	ldr	r1, [r7, #8]
 800df00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df02:	f000 f911 	bl	800e128 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d112      	bne.n	800df36 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	2b00      	cmp	r3, #0
 800df16:	d016      	beq.n	800df46 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	3324      	adds	r3, #36	; 0x24
 800df1c:	4618      	mov	r0, r3
 800df1e:	f000 fed9 	bl	800ecd4 <xTaskRemoveFromEventList>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00e      	beq.n	800df46 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00b      	beq.n	800df46 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	e007      	b.n	800df46 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df3a:	3301      	adds	r3, #1
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	b25a      	sxtb	r2, r3
 800df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800df46:	2301      	movs	r3, #1
 800df48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800df4a:	e001      	b.n	800df50 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800df4c:	2300      	movs	r3, #0
 800df4e:	637b      	str	r3, [r7, #52]	; 0x34
 800df50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3738      	adds	r7, #56	; 0x38
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08c      	sub	sp, #48	; 0x30
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800df70:	2300      	movs	r3, #0
 800df72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10b      	bne.n	800df96 <xQueueReceive+0x32>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df82:	b672      	cpsid	i
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	b662      	cpsie	i
 800df92:	623b      	str	r3, [r7, #32]
 800df94:	e7fe      	b.n	800df94 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d103      	bne.n	800dfa4 <xQueueReceive+0x40>
 800df9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <xQueueReceive+0x44>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e000      	b.n	800dfaa <xQueueReceive+0x46>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10b      	bne.n	800dfc6 <xQueueReceive+0x62>
 800dfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb2:	b672      	cpsid	i
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	b662      	cpsie	i
 800dfc2:	61fb      	str	r3, [r7, #28]
 800dfc4:	e7fe      	b.n	800dfc4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfc6:	f001 f843 	bl	800f050 <xTaskGetSchedulerState>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <xQueueReceive+0x72>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <xQueueReceive+0x76>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e000      	b.n	800dfdc <xQueueReceive+0x78>
 800dfda:	2300      	movs	r3, #0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10b      	bne.n	800dff8 <xQueueReceive+0x94>
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	b672      	cpsid	i
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	b662      	cpsie	i
 800dff4:	61bb      	str	r3, [r7, #24]
 800dff6:	e7fe      	b.n	800dff6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dff8:	f001 fe7e 	bl	800fcf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e000:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e004:	2b00      	cmp	r3, #0
 800e006:	d01f      	beq.n	800e048 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e008:	68b9      	ldr	r1, [r7, #8]
 800e00a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e00c:	f000 f8f6 	bl	800e1fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	1e5a      	subs	r2, r3, #1
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00f      	beq.n	800e040 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	3310      	adds	r3, #16
 800e024:	4618      	mov	r0, r3
 800e026:	f000 fe55 	bl	800ecd4 <xTaskRemoveFromEventList>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e030:	4b3c      	ldr	r3, [pc, #240]	; (800e124 <xQueueReceive+0x1c0>)
 800e032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e040:	f001 fe8c 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800e044:	2301      	movs	r3, #1
 800e046:	e069      	b.n	800e11c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d103      	bne.n	800e056 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e04e:	f001 fe85 	bl	800fd5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e052:	2300      	movs	r3, #0
 800e054:	e062      	b.n	800e11c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e05c:	f107 0310 	add.w	r3, r7, #16
 800e060:	4618      	mov	r0, r3
 800e062:	f000 fe9b 	bl	800ed9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e066:	2301      	movs	r3, #1
 800e068:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e06a:	f001 fe77 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e06e:	f000 fc0b 	bl	800e888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e072:	f001 fe41 	bl	800fcf8 <vPortEnterCritical>
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e07c:	b25b      	sxtb	r3, r3
 800e07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e082:	d103      	bne.n	800e08c <xQueueReceive+0x128>
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e092:	b25b      	sxtb	r3, r3
 800e094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e098:	d103      	bne.n	800e0a2 <xQueueReceive+0x13e>
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0a2:	f001 fe5b 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0a6:	1d3a      	adds	r2, r7, #4
 800e0a8:	f107 0310 	add.w	r3, r7, #16
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 fe8a 	bl	800edc8 <xTaskCheckForTimeOut>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d123      	bne.n	800e102 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0bc:	f000 f916 	bl	800e2ec <prvIsQueueEmpty>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d017      	beq.n	800e0f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	3324      	adds	r3, #36	; 0x24
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 fdae 	bl	800ec30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0d6:	f000 f8b7 	bl	800e248 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0da:	f000 fbe3 	bl	800e8a4 <xTaskResumeAll>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d189      	bne.n	800dff8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e0e4:	4b0f      	ldr	r3, [pc, #60]	; (800e124 <xQueueReceive+0x1c0>)
 800e0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	e780      	b.n	800dff8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0f8:	f000 f8a6 	bl	800e248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0fc:	f000 fbd2 	bl	800e8a4 <xTaskResumeAll>
 800e100:	e77a      	b.n	800dff8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e104:	f000 f8a0 	bl	800e248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e108:	f000 fbcc 	bl	800e8a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e10e:	f000 f8ed 	bl	800e2ec <prvIsQueueEmpty>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	f43f af6f 	beq.w	800dff8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e11a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3730      	adds	r7, #48	; 0x30
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	e000ed04 	.word	0xe000ed04

0800e128 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e134:	2300      	movs	r3, #0
 800e136:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e13c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10d      	bne.n	800e162 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d14d      	bne.n	800e1ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	4618      	mov	r0, r3
 800e154:	f000 ff9a 	bl	800f08c <xTaskPriorityDisinherit>
 800e158:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	609a      	str	r2, [r3, #8]
 800e160:	e043      	b.n	800e1ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d119      	bne.n	800e19c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6858      	ldr	r0, [r3, #4]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e170:	461a      	mov	r2, r3
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	f002 f8ec 	bl	8010350 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e180:	441a      	add	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	685a      	ldr	r2, [r3, #4]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d32b      	bcc.n	800e1ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	605a      	str	r2, [r3, #4]
 800e19a:	e026      	b.n	800e1ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68d8      	ldr	r0, [r3, #12]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	68b9      	ldr	r1, [r7, #8]
 800e1a8:	f002 f8d2 	bl	8010350 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68da      	ldr	r2, [r3, #12]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b4:	425b      	negs	r3, r3
 800e1b6:	441a      	add	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d207      	bcs.n	800e1d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	689a      	ldr	r2, [r3, #8]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d0:	425b      	negs	r3, r3
 800e1d2:	441a      	add	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d105      	bne.n	800e1ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d002      	beq.n	800e1ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e1f2:	697b      	ldr	r3, [r7, #20]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3718      	adds	r7, #24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d018      	beq.n	800e240 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	68da      	ldr	r2, [r3, #12]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e216:	441a      	add	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	429a      	cmp	r2, r3
 800e226:	d303      	bcc.n	800e230 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	68d9      	ldr	r1, [r3, #12]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e238:	461a      	mov	r2, r3
 800e23a:	6838      	ldr	r0, [r7, #0]
 800e23c:	f002 f888 	bl	8010350 <memcpy>
	}
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e250:	f001 fd52 	bl	800fcf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e25a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e25c:	e011      	b.n	800e282 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e262:	2b00      	cmp	r3, #0
 800e264:	d012      	beq.n	800e28c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3324      	adds	r3, #36	; 0x24
 800e26a:	4618      	mov	r0, r3
 800e26c:	f000 fd32 	bl	800ecd4 <xTaskRemoveFromEventList>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e276:	f000 fe0b 	bl	800ee90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	dce9      	bgt.n	800e25e <prvUnlockQueue+0x16>
 800e28a:	e000      	b.n	800e28e <prvUnlockQueue+0x46>
					break;
 800e28c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	22ff      	movs	r2, #255	; 0xff
 800e292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e296:	f001 fd61 	bl	800fd5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e29a:	f001 fd2d 	bl	800fcf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2a6:	e011      	b.n	800e2cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d012      	beq.n	800e2d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3310      	adds	r3, #16
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fd0d 	bl	800ecd4 <xTaskRemoveFromEventList>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e2c0:	f000 fde6 	bl	800ee90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	dce9      	bgt.n	800e2a8 <prvUnlockQueue+0x60>
 800e2d4:	e000      	b.n	800e2d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	22ff      	movs	r2, #255	; 0xff
 800e2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e2e0:	f001 fd3c 	bl	800fd5c <vPortExitCritical>
}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2f4:	f001 fd00 	bl	800fcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d102      	bne.n	800e306 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e300:	2301      	movs	r3, #1
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	e001      	b.n	800e30a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e306:	2300      	movs	r3, #0
 800e308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e30a:	f001 fd27 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800e30e:	68fb      	ldr	r3, [r7, #12]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e320:	f001 fcea 	bl	800fcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d102      	bne.n	800e336 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e330:	2301      	movs	r3, #1
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	e001      	b.n	800e33a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e33a:	f001 fd0f 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800e33e:	68fb      	ldr	r3, [r7, #12]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e352:	2300      	movs	r3, #0
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	e014      	b.n	800e382 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e358:	4a0e      	ldr	r2, [pc, #56]	; (800e394 <vQueueAddToRegistry+0x4c>)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10b      	bne.n	800e37c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e364:	490b      	ldr	r1, [pc, #44]	; (800e394 <vQueueAddToRegistry+0x4c>)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e36e:	4a09      	ldr	r2, [pc, #36]	; (800e394 <vQueueAddToRegistry+0x4c>)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	4413      	add	r3, r2
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e37a:	e005      	b.n	800e388 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3301      	adds	r3, #1
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b07      	cmp	r3, #7
 800e386:	d9e7      	bls.n	800e358 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e388:	bf00      	nop
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	20024114 	.word	0x20024114

0800e398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3a8:	f001 fca6 	bl	800fcf8 <vPortEnterCritical>
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3b2:	b25b      	sxtb	r3, r3
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b8:	d103      	bne.n	800e3c2 <vQueueWaitForMessageRestricted+0x2a>
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3c8:	b25b      	sxtb	r3, r3
 800e3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ce:	d103      	bne.n	800e3d8 <vQueueWaitForMessageRestricted+0x40>
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3d8:	f001 fcc0 	bl	800fd5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d106      	bne.n	800e3f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	3324      	adds	r3, #36	; 0x24
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	68b9      	ldr	r1, [r7, #8]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f000 fc45 	bl	800ec7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3f2:	6978      	ldr	r0, [r7, #20]
 800e3f4:	f7ff ff28 	bl	800e248 <prvUnlockQueue>
	}
 800e3f8:	bf00      	nop
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e400:	b580      	push	{r7, lr}
 800e402:	b08e      	sub	sp, #56	; 0x38
 800e404:	af04      	add	r7, sp, #16
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e410:	2b00      	cmp	r3, #0
 800e412:	d10b      	bne.n	800e42c <xTaskCreateStatic+0x2c>
 800e414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e418:	b672      	cpsid	i
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	b662      	cpsie	i
 800e428:	623b      	str	r3, [r7, #32]
 800e42a:	e7fe      	b.n	800e42a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10b      	bne.n	800e44a <xTaskCreateStatic+0x4a>
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	b672      	cpsid	i
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	b662      	cpsie	i
 800e446:	61fb      	str	r3, [r7, #28]
 800e448:	e7fe      	b.n	800e448 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e44a:	235c      	movs	r3, #92	; 0x5c
 800e44c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2b5c      	cmp	r3, #92	; 0x5c
 800e452:	d00b      	beq.n	800e46c <xTaskCreateStatic+0x6c>
 800e454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e458:	b672      	cpsid	i
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	b662      	cpsie	i
 800e468:	61bb      	str	r3, [r7, #24]
 800e46a:	e7fe      	b.n	800e46a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e46c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	2b00      	cmp	r3, #0
 800e472:	d01e      	beq.n	800e4b2 <xTaskCreateStatic+0xb2>
 800e474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e476:	2b00      	cmp	r3, #0
 800e478:	d01b      	beq.n	800e4b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e482:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	2202      	movs	r2, #2
 800e488:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e48c:	2300      	movs	r3, #0
 800e48e:	9303      	str	r3, [sp, #12]
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	9302      	str	r3, [sp, #8]
 800e494:	f107 0314 	add.w	r3, r7, #20
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	68b9      	ldr	r1, [r7, #8]
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 f850 	bl	800e54a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4ac:	f000 f8de 	bl	800e66c <prvAddNewTaskToReadyList>
 800e4b0:	e001      	b.n	800e4b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4b6:	697b      	ldr	r3, [r7, #20]
	}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3728      	adds	r7, #40	; 0x28
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b08c      	sub	sp, #48	; 0x30
 800e4c4:	af04      	add	r7, sp, #16
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	603b      	str	r3, [r7, #0]
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4d0:	88fb      	ldrh	r3, [r7, #6]
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f001 fd31 	bl	800ff3c <pvPortMalloc>
 800e4da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d00e      	beq.n	800e500 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4e2:	205c      	movs	r0, #92	; 0x5c
 800e4e4:	f001 fd2a 	bl	800ff3c <pvPortMalloc>
 800e4e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d003      	beq.n	800e4f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	697a      	ldr	r2, [r7, #20]
 800e4f4:	631a      	str	r2, [r3, #48]	; 0x30
 800e4f6:	e005      	b.n	800e504 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4f8:	6978      	ldr	r0, [r7, #20]
 800e4fa:	f001 fde7 	bl	80100cc <vPortFree>
 800e4fe:	e001      	b.n	800e504 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d017      	beq.n	800e53a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e512:	88fa      	ldrh	r2, [r7, #6]
 800e514:	2300      	movs	r3, #0
 800e516:	9303      	str	r3, [sp, #12]
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	9302      	str	r3, [sp, #8]
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	9301      	str	r3, [sp, #4]
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	68b9      	ldr	r1, [r7, #8]
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 f80e 	bl	800e54a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e52e:	69f8      	ldr	r0, [r7, #28]
 800e530:	f000 f89c 	bl	800e66c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e534:	2301      	movs	r3, #1
 800e536:	61bb      	str	r3, [r7, #24]
 800e538:	e002      	b.n	800e540 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e53a:	f04f 33ff 	mov.w	r3, #4294967295
 800e53e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e540:	69bb      	ldr	r3, [r7, #24]
	}
 800e542:	4618      	mov	r0, r3
 800e544:	3720      	adds	r7, #32
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b088      	sub	sp, #32
 800e54e:	af00      	add	r7, sp, #0
 800e550:	60f8      	str	r0, [r7, #12]
 800e552:	60b9      	str	r1, [r7, #8]
 800e554:	607a      	str	r2, [r7, #4]
 800e556:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	461a      	mov	r2, r3
 800e562:	21a5      	movs	r1, #165	; 0xa5
 800e564:	f001 feff 	bl	8010366 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e572:	440b      	add	r3, r1
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	f023 0307 	bic.w	r3, r3, #7
 800e580:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	f003 0307 	and.w	r3, r3, #7
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00b      	beq.n	800e5a4 <prvInitialiseNewTask+0x5a>
 800e58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e590:	b672      	cpsid	i
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	b662      	cpsie	i
 800e5a0:	617b      	str	r3, [r7, #20]
 800e5a2:	e7fe      	b.n	800e5a2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d01f      	beq.n	800e5ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61fb      	str	r3, [r7, #28]
 800e5ae:	e012      	b.n	800e5d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	7819      	ldrb	r1, [r3, #0]
 800e5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	4413      	add	r3, r2
 800e5be:	3334      	adds	r3, #52	; 0x34
 800e5c0:	460a      	mov	r2, r1
 800e5c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d006      	beq.n	800e5de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	61fb      	str	r3, [r7, #28]
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	2b0f      	cmp	r3, #15
 800e5da:	d9e9      	bls.n	800e5b0 <prvInitialiseNewTask+0x66>
 800e5dc:	e000      	b.n	800e5e0 <prvInitialiseNewTask+0x96>
			{
				break;
 800e5de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5e8:	e003      	b.n	800e5f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f4:	2b37      	cmp	r3, #55	; 0x37
 800e5f6:	d901      	bls.n	800e5fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5f8:	2337      	movs	r3, #55	; 0x37
 800e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e606:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60a:	2200      	movs	r2, #0
 800e60c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	3304      	adds	r3, #4
 800e612:	4618      	mov	r0, r3
 800e614:	f7ff f96a 	bl	800d8ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	3318      	adds	r3, #24
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7ff f965 	bl	800d8ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63a:	2200      	movs	r2, #0
 800e63c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	68f9      	ldr	r1, [r7, #12]
 800e64a:	69b8      	ldr	r0, [r7, #24]
 800e64c:	f001 fa4a 	bl	800fae4 <pxPortInitialiseStack>
 800e650:	4602      	mov	r2, r0
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e662:	bf00      	nop
 800e664:	3720      	adds	r7, #32
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e674:	f001 fb40 	bl	800fcf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e678:	4b2d      	ldr	r3, [pc, #180]	; (800e730 <prvAddNewTaskToReadyList+0xc4>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	4a2c      	ldr	r2, [pc, #176]	; (800e730 <prvAddNewTaskToReadyList+0xc4>)
 800e680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e682:	4b2c      	ldr	r3, [pc, #176]	; (800e734 <prvAddNewTaskToReadyList+0xc8>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d109      	bne.n	800e69e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e68a:	4a2a      	ldr	r2, [pc, #168]	; (800e734 <prvAddNewTaskToReadyList+0xc8>)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e690:	4b27      	ldr	r3, [pc, #156]	; (800e730 <prvAddNewTaskToReadyList+0xc4>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b01      	cmp	r3, #1
 800e696:	d110      	bne.n	800e6ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e698:	f000 fc1e 	bl	800eed8 <prvInitialiseTaskLists>
 800e69c:	e00d      	b.n	800e6ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e69e:	4b26      	ldr	r3, [pc, #152]	; (800e738 <prvAddNewTaskToReadyList+0xcc>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d109      	bne.n	800e6ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6a6:	4b23      	ldr	r3, [pc, #140]	; (800e734 <prvAddNewTaskToReadyList+0xc8>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d802      	bhi.n	800e6ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6b4:	4a1f      	ldr	r2, [pc, #124]	; (800e734 <prvAddNewTaskToReadyList+0xc8>)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6ba:	4b20      	ldr	r3, [pc, #128]	; (800e73c <prvAddNewTaskToReadyList+0xd0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	4a1e      	ldr	r2, [pc, #120]	; (800e73c <prvAddNewTaskToReadyList+0xd0>)
 800e6c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e6c4:	4b1d      	ldr	r3, [pc, #116]	; (800e73c <prvAddNewTaskToReadyList+0xd0>)
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d0:	4b1b      	ldr	r3, [pc, #108]	; (800e740 <prvAddNewTaskToReadyList+0xd4>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d903      	bls.n	800e6e0 <prvAddNewTaskToReadyList+0x74>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	4a18      	ldr	r2, [pc, #96]	; (800e740 <prvAddNewTaskToReadyList+0xd4>)
 800e6de:	6013      	str	r3, [r2, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4413      	add	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4a15      	ldr	r2, [pc, #84]	; (800e744 <prvAddNewTaskToReadyList+0xd8>)
 800e6ee:	441a      	add	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f7ff f905 	bl	800d906 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e6fc:	f001 fb2e 	bl	800fd5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e700:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <prvAddNewTaskToReadyList+0xcc>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00e      	beq.n	800e726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <prvAddNewTaskToReadyList+0xc8>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e712:	429a      	cmp	r2, r3
 800e714:	d207      	bcs.n	800e726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e716:	4b0c      	ldr	r3, [pc, #48]	; (800e748 <prvAddNewTaskToReadyList+0xdc>)
 800e718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e726:	bf00      	nop
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20003e68 	.word	0x20003e68
 800e734:	20003994 	.word	0x20003994
 800e738:	20003e74 	.word	0x20003e74
 800e73c:	20003e84 	.word	0x20003e84
 800e740:	20003e70 	.word	0x20003e70
 800e744:	20003998 	.word	0x20003998
 800e748:	e000ed04 	.word	0xe000ed04

0800e74c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e754:	2300      	movs	r3, #0
 800e756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d018      	beq.n	800e790 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e75e:	4b14      	ldr	r3, [pc, #80]	; (800e7b0 <vTaskDelay+0x64>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00b      	beq.n	800e77e <vTaskDelay+0x32>
 800e766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76a:	b672      	cpsid	i
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	b662      	cpsie	i
 800e77a:	60bb      	str	r3, [r7, #8]
 800e77c:	e7fe      	b.n	800e77c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e77e:	f000 f883 	bl	800e888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e782:	2100      	movs	r1, #0
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fe05 	bl	800f394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e78a:	f000 f88b 	bl	800e8a4 <xTaskResumeAll>
 800e78e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d107      	bne.n	800e7a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e796:	4b07      	ldr	r3, [pc, #28]	; (800e7b4 <vTaskDelay+0x68>)
 800e798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7a6:	bf00      	nop
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20003e90 	.word	0x20003e90
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b08a      	sub	sp, #40	; 0x28
 800e7bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7c6:	463a      	mov	r2, r7
 800e7c8:	1d39      	adds	r1, r7, #4
 800e7ca:	f107 0308 	add.w	r3, r7, #8
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff f838 	bl	800d844 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	9202      	str	r2, [sp, #8]
 800e7dc:	9301      	str	r3, [sp, #4]
 800e7de:	2300      	movs	r3, #0
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	460a      	mov	r2, r1
 800e7e6:	4922      	ldr	r1, [pc, #136]	; (800e870 <vTaskStartScheduler+0xb8>)
 800e7e8:	4822      	ldr	r0, [pc, #136]	; (800e874 <vTaskStartScheduler+0xbc>)
 800e7ea:	f7ff fe09 	bl	800e400 <xTaskCreateStatic>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	4b21      	ldr	r3, [pc, #132]	; (800e878 <vTaskStartScheduler+0xc0>)
 800e7f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e7f4:	4b20      	ldr	r3, [pc, #128]	; (800e878 <vTaskStartScheduler+0xc0>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	617b      	str	r3, [r7, #20]
 800e800:	e001      	b.n	800e806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e802:	2300      	movs	r3, #0
 800e804:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d102      	bne.n	800e812 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e80c:	f000 fe16 	bl	800f43c <xTimerCreateTimerTask>
 800e810:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	2b01      	cmp	r3, #1
 800e816:	d117      	bne.n	800e848 <vTaskStartScheduler+0x90>
 800e818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81c:	b672      	cpsid	i
 800e81e:	f383 8811 	msr	BASEPRI, r3
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	b662      	cpsie	i
 800e82c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e82e:	4b13      	ldr	r3, [pc, #76]	; (800e87c <vTaskStartScheduler+0xc4>)
 800e830:	f04f 32ff 	mov.w	r2, #4294967295
 800e834:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e836:	4b12      	ldr	r3, [pc, #72]	; (800e880 <vTaskStartScheduler+0xc8>)
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e83c:	4b11      	ldr	r3, [pc, #68]	; (800e884 <vTaskStartScheduler+0xcc>)
 800e83e:	2200      	movs	r2, #0
 800e840:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e842:	f001 f9dd 	bl	800fc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e846:	e00f      	b.n	800e868 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84e:	d10b      	bne.n	800e868 <vTaskStartScheduler+0xb0>
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	b672      	cpsid	i
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	b662      	cpsie	i
 800e864:	60fb      	str	r3, [r7, #12]
 800e866:	e7fe      	b.n	800e866 <vTaskStartScheduler+0xae>
}
 800e868:	bf00      	nop
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	080148f4 	.word	0x080148f4
 800e874:	0800eea9 	.word	0x0800eea9
 800e878:	20003e8c 	.word	0x20003e8c
 800e87c:	20003e88 	.word	0x20003e88
 800e880:	20003e74 	.word	0x20003e74
 800e884:	20003e6c 	.word	0x20003e6c

0800e888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e88c:	4b04      	ldr	r3, [pc, #16]	; (800e8a0 <vTaskSuspendAll+0x18>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3301      	adds	r3, #1
 800e892:	4a03      	ldr	r2, [pc, #12]	; (800e8a0 <vTaskSuspendAll+0x18>)
 800e894:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e896:	bf00      	nop
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr
 800e8a0:	20003e90 	.word	0x20003e90

0800e8a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e8b2:	4b42      	ldr	r3, [pc, #264]	; (800e9bc <xTaskResumeAll+0x118>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10b      	bne.n	800e8d2 <xTaskResumeAll+0x2e>
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	b672      	cpsid	i
 800e8c0:	f383 8811 	msr	BASEPRI, r3
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	b662      	cpsie	i
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	e7fe      	b.n	800e8d0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8d2:	f001 fa11 	bl	800fcf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8d6:	4b39      	ldr	r3, [pc, #228]	; (800e9bc <xTaskResumeAll+0x118>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	4a37      	ldr	r2, [pc, #220]	; (800e9bc <xTaskResumeAll+0x118>)
 800e8de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8e0:	4b36      	ldr	r3, [pc, #216]	; (800e9bc <xTaskResumeAll+0x118>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d162      	bne.n	800e9ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e8e8:	4b35      	ldr	r3, [pc, #212]	; (800e9c0 <xTaskResumeAll+0x11c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d05e      	beq.n	800e9ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8f0:	e02f      	b.n	800e952 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f2:	4b34      	ldr	r3, [pc, #208]	; (800e9c4 <xTaskResumeAll+0x120>)
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3318      	adds	r3, #24
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff f85e 	bl	800d9c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	3304      	adds	r3, #4
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff f859 	bl	800d9c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e912:	4b2d      	ldr	r3, [pc, #180]	; (800e9c8 <xTaskResumeAll+0x124>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	429a      	cmp	r2, r3
 800e918:	d903      	bls.n	800e922 <xTaskResumeAll+0x7e>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91e:	4a2a      	ldr	r2, [pc, #168]	; (800e9c8 <xTaskResumeAll+0x124>)
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e926:	4613      	mov	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	4413      	add	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4a27      	ldr	r2, [pc, #156]	; (800e9cc <xTaskResumeAll+0x128>)
 800e930:	441a      	add	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	3304      	adds	r3, #4
 800e936:	4619      	mov	r1, r3
 800e938:	4610      	mov	r0, r2
 800e93a:	f7fe ffe4 	bl	800d906 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e942:	4b23      	ldr	r3, [pc, #140]	; (800e9d0 <xTaskResumeAll+0x12c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	429a      	cmp	r2, r3
 800e94a:	d302      	bcc.n	800e952 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e94c:	4b21      	ldr	r3, [pc, #132]	; (800e9d4 <xTaskResumeAll+0x130>)
 800e94e:	2201      	movs	r2, #1
 800e950:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e952:	4b1c      	ldr	r3, [pc, #112]	; (800e9c4 <xTaskResumeAll+0x120>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1cb      	bne.n	800e8f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e960:	f000 fb56 	bl	800f010 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e964:	4b1c      	ldr	r3, [pc, #112]	; (800e9d8 <xTaskResumeAll+0x134>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d010      	beq.n	800e992 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e970:	f000 f846 	bl	800ea00 <xTaskIncrementTick>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e97a:	4b16      	ldr	r3, [pc, #88]	; (800e9d4 <xTaskResumeAll+0x130>)
 800e97c:	2201      	movs	r2, #1
 800e97e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	3b01      	subs	r3, #1
 800e984:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1f1      	bne.n	800e970 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e98c:	4b12      	ldr	r3, [pc, #72]	; (800e9d8 <xTaskResumeAll+0x134>)
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e992:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <xTaskResumeAll+0x130>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d009      	beq.n	800e9ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e99a:	2301      	movs	r3, #1
 800e99c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e99e:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <xTaskResumeAll+0x138>)
 800e9a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a4:	601a      	str	r2, [r3, #0]
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9ae:	f001 f9d5 	bl	800fd5c <vPortExitCritical>

	return xAlreadyYielded;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20003e90 	.word	0x20003e90
 800e9c0:	20003e68 	.word	0x20003e68
 800e9c4:	20003e28 	.word	0x20003e28
 800e9c8:	20003e70 	.word	0x20003e70
 800e9cc:	20003998 	.word	0x20003998
 800e9d0:	20003994 	.word	0x20003994
 800e9d4:	20003e7c 	.word	0x20003e7c
 800e9d8:	20003e78 	.word	0x20003e78
 800e9dc:	e000ed04 	.word	0xe000ed04

0800e9e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e9e6:	4b05      	ldr	r3, [pc, #20]	; (800e9fc <xTaskGetTickCount+0x1c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e9ec:	687b      	ldr	r3, [r7, #4]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	20003e6c 	.word	0x20003e6c

0800ea00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ea06:	2300      	movs	r3, #0
 800ea08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea0a:	4b4f      	ldr	r3, [pc, #316]	; (800eb48 <xTaskIncrementTick+0x148>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f040 808a 	bne.w	800eb28 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea14:	4b4d      	ldr	r3, [pc, #308]	; (800eb4c <xTaskIncrementTick+0x14c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea1c:	4a4b      	ldr	r2, [pc, #300]	; (800eb4c <xTaskIncrementTick+0x14c>)
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d121      	bne.n	800ea6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea28:	4b49      	ldr	r3, [pc, #292]	; (800eb50 <xTaskIncrementTick+0x150>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00b      	beq.n	800ea4a <xTaskIncrementTick+0x4a>
 800ea32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea36:	b672      	cpsid	i
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	b662      	cpsie	i
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	e7fe      	b.n	800ea48 <xTaskIncrementTick+0x48>
 800ea4a:	4b41      	ldr	r3, [pc, #260]	; (800eb50 <xTaskIncrementTick+0x150>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	4b40      	ldr	r3, [pc, #256]	; (800eb54 <xTaskIncrementTick+0x154>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a3e      	ldr	r2, [pc, #248]	; (800eb50 <xTaskIncrementTick+0x150>)
 800ea56:	6013      	str	r3, [r2, #0]
 800ea58:	4a3e      	ldr	r2, [pc, #248]	; (800eb54 <xTaskIncrementTick+0x154>)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4b3e      	ldr	r3, [pc, #248]	; (800eb58 <xTaskIncrementTick+0x158>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3301      	adds	r3, #1
 800ea64:	4a3c      	ldr	r2, [pc, #240]	; (800eb58 <xTaskIncrementTick+0x158>)
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	f000 fad2 	bl	800f010 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea6c:	4b3b      	ldr	r3, [pc, #236]	; (800eb5c <xTaskIncrementTick+0x15c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d349      	bcc.n	800eb0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea76:	4b36      	ldr	r3, [pc, #216]	; (800eb50 <xTaskIncrementTick+0x150>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d104      	bne.n	800ea8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea80:	4b36      	ldr	r3, [pc, #216]	; (800eb5c <xTaskIncrementTick+0x15c>)
 800ea82:	f04f 32ff 	mov.w	r2, #4294967295
 800ea86:	601a      	str	r2, [r3, #0]
					break;
 800ea88:	e03f      	b.n	800eb0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea8a:	4b31      	ldr	r3, [pc, #196]	; (800eb50 <xTaskIncrementTick+0x150>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d203      	bcs.n	800eaaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eaa2:	4a2e      	ldr	r2, [pc, #184]	; (800eb5c <xTaskIncrementTick+0x15c>)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eaa8:	e02f      	b.n	800eb0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fe ff86 	bl	800d9c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	3318      	adds	r3, #24
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe ff7d 	bl	800d9c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	4b25      	ldr	r3, [pc, #148]	; (800eb60 <xTaskIncrementTick+0x160>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d903      	bls.n	800eada <xTaskIncrementTick+0xda>
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead6:	4a22      	ldr	r2, [pc, #136]	; (800eb60 <xTaskIncrementTick+0x160>)
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4a1f      	ldr	r2, [pc, #124]	; (800eb64 <xTaskIncrementTick+0x164>)
 800eae8:	441a      	add	r2, r3
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f7fe ff08 	bl	800d906 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafa:	4b1b      	ldr	r3, [pc, #108]	; (800eb68 <xTaskIncrementTick+0x168>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d3b8      	bcc.n	800ea76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eb04:	2301      	movs	r3, #1
 800eb06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb08:	e7b5      	b.n	800ea76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb0a:	4b17      	ldr	r3, [pc, #92]	; (800eb68 <xTaskIncrementTick+0x168>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb10:	4914      	ldr	r1, [pc, #80]	; (800eb64 <xTaskIncrementTick+0x164>)
 800eb12:	4613      	mov	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	440b      	add	r3, r1
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d907      	bls.n	800eb32 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800eb22:	2301      	movs	r3, #1
 800eb24:	617b      	str	r3, [r7, #20]
 800eb26:	e004      	b.n	800eb32 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eb28:	4b10      	ldr	r3, [pc, #64]	; (800eb6c <xTaskIncrementTick+0x16c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	4a0f      	ldr	r2, [pc, #60]	; (800eb6c <xTaskIncrementTick+0x16c>)
 800eb30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eb32:	4b0f      	ldr	r3, [pc, #60]	; (800eb70 <xTaskIncrementTick+0x170>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eb3e:	697b      	ldr	r3, [r7, #20]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20003e90 	.word	0x20003e90
 800eb4c:	20003e6c 	.word	0x20003e6c
 800eb50:	20003e20 	.word	0x20003e20
 800eb54:	20003e24 	.word	0x20003e24
 800eb58:	20003e80 	.word	0x20003e80
 800eb5c:	20003e88 	.word	0x20003e88
 800eb60:	20003e70 	.word	0x20003e70
 800eb64:	20003998 	.word	0x20003998
 800eb68:	20003994 	.word	0x20003994
 800eb6c:	20003e78 	.word	0x20003e78
 800eb70:	20003e7c 	.word	0x20003e7c

0800eb74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb7a:	4b28      	ldr	r3, [pc, #160]	; (800ec1c <vTaskSwitchContext+0xa8>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d003      	beq.n	800eb8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb82:	4b27      	ldr	r3, [pc, #156]	; (800ec20 <vTaskSwitchContext+0xac>)
 800eb84:	2201      	movs	r2, #1
 800eb86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb88:	e042      	b.n	800ec10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800eb8a:	4b25      	ldr	r3, [pc, #148]	; (800ec20 <vTaskSwitchContext+0xac>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb90:	4b24      	ldr	r3, [pc, #144]	; (800ec24 <vTaskSwitchContext+0xb0>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	60fb      	str	r3, [r7, #12]
 800eb96:	e011      	b.n	800ebbc <vTaskSwitchContext+0x48>
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10b      	bne.n	800ebb6 <vTaskSwitchContext+0x42>
 800eb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba2:	b672      	cpsid	i
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	b662      	cpsie	i
 800ebb2:	607b      	str	r3, [r7, #4]
 800ebb4:	e7fe      	b.n	800ebb4 <vTaskSwitchContext+0x40>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	3b01      	subs	r3, #1
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	491a      	ldr	r1, [pc, #104]	; (800ec28 <vTaskSwitchContext+0xb4>)
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	4413      	add	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	440b      	add	r3, r1
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d0e3      	beq.n	800eb98 <vTaskSwitchContext+0x24>
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4a13      	ldr	r2, [pc, #76]	; (800ec28 <vTaskSwitchContext+0xb4>)
 800ebdc:	4413      	add	r3, r2
 800ebde:	60bb      	str	r3, [r7, #8]
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	605a      	str	r2, [r3, #4]
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d104      	bne.n	800ec00 <vTaskSwitchContext+0x8c>
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	685a      	ldr	r2, [r3, #4]
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	605a      	str	r2, [r3, #4]
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	4a09      	ldr	r2, [pc, #36]	; (800ec2c <vTaskSwitchContext+0xb8>)
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	4a06      	ldr	r2, [pc, #24]	; (800ec24 <vTaskSwitchContext+0xb0>)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6013      	str	r3, [r2, #0]
}
 800ec10:	bf00      	nop
 800ec12:	3714      	adds	r7, #20
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr
 800ec1c:	20003e90 	.word	0x20003e90
 800ec20:	20003e7c 	.word	0x20003e7c
 800ec24:	20003e70 	.word	0x20003e70
 800ec28:	20003998 	.word	0x20003998
 800ec2c:	20003994 	.word	0x20003994

0800ec30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10b      	bne.n	800ec58 <vTaskPlaceOnEventList+0x28>
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	b672      	cpsid	i
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	b662      	cpsie	i
 800ec54:	60fb      	str	r3, [r7, #12]
 800ec56:	e7fe      	b.n	800ec56 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <vTaskPlaceOnEventList+0x48>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3318      	adds	r3, #24
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fe fe74 	bl	800d94e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec66:	2101      	movs	r1, #1
 800ec68:	6838      	ldr	r0, [r7, #0]
 800ec6a:	f000 fb93 	bl	800f394 <prvAddCurrentTaskToDelayedList>
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20003994 	.word	0x20003994

0800ec7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b086      	sub	sp, #24
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10b      	bne.n	800eca6 <vTaskPlaceOnEventListRestricted+0x2a>
 800ec8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec92:	b672      	cpsid	i
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	b662      	cpsie	i
 800eca2:	617b      	str	r3, [r7, #20]
 800eca4:	e7fe      	b.n	800eca4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eca6:	4b0a      	ldr	r3, [pc, #40]	; (800ecd0 <vTaskPlaceOnEventListRestricted+0x54>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	3318      	adds	r3, #24
 800ecac:	4619      	mov	r1, r3
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7fe fe29 	bl	800d906 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ecba:	f04f 33ff 	mov.w	r3, #4294967295
 800ecbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	68b8      	ldr	r0, [r7, #8]
 800ecc4:	f000 fb66 	bl	800f394 <prvAddCurrentTaskToDelayedList>
	}
 800ecc8:	bf00      	nop
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	20003994 	.word	0x20003994

0800ecd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10b      	bne.n	800ed02 <xTaskRemoveFromEventList+0x2e>
 800ecea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecee:	b672      	cpsid	i
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	b662      	cpsie	i
 800ecfe:	60fb      	str	r3, [r7, #12]
 800ed00:	e7fe      	b.n	800ed00 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	3318      	adds	r3, #24
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fe fe5a 	bl	800d9c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed0c:	4b1d      	ldr	r3, [pc, #116]	; (800ed84 <xTaskRemoveFromEventList+0xb0>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d11d      	bne.n	800ed50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	3304      	adds	r3, #4
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe fe51 	bl	800d9c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	4b19      	ldr	r3, [pc, #100]	; (800ed88 <xTaskRemoveFromEventList+0xb4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d903      	bls.n	800ed32 <xTaskRemoveFromEventList+0x5e>
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	4a16      	ldr	r2, [pc, #88]	; (800ed88 <xTaskRemoveFromEventList+0xb4>)
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed36:	4613      	mov	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4a13      	ldr	r2, [pc, #76]	; (800ed8c <xTaskRemoveFromEventList+0xb8>)
 800ed40:	441a      	add	r2, r3
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	3304      	adds	r3, #4
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7fe fddc 	bl	800d906 <vListInsertEnd>
 800ed4e:	e005      	b.n	800ed5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	3318      	adds	r3, #24
 800ed54:	4619      	mov	r1, r3
 800ed56:	480e      	ldr	r0, [pc, #56]	; (800ed90 <xTaskRemoveFromEventList+0xbc>)
 800ed58:	f7fe fdd5 	bl	800d906 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed60:	4b0c      	ldr	r3, [pc, #48]	; (800ed94 <xTaskRemoveFromEventList+0xc0>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d905      	bls.n	800ed76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed6e:	4b0a      	ldr	r3, [pc, #40]	; (800ed98 <xTaskRemoveFromEventList+0xc4>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	e001      	b.n	800ed7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ed76:	2300      	movs	r3, #0
 800ed78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed7a:	697b      	ldr	r3, [r7, #20]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3718      	adds	r7, #24
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	20003e90 	.word	0x20003e90
 800ed88:	20003e70 	.word	0x20003e70
 800ed8c:	20003998 	.word	0x20003998
 800ed90:	20003e28 	.word	0x20003e28
 800ed94:	20003994 	.word	0x20003994
 800ed98:	20003e7c 	.word	0x20003e7c

0800ed9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eda4:	4b06      	ldr	r3, [pc, #24]	; (800edc0 <vTaskInternalSetTimeOutState+0x24>)
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800edac:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <vTaskInternalSetTimeOutState+0x28>)
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	605a      	str	r2, [r3, #4]
}
 800edb4:	bf00      	nop
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	20003e80 	.word	0x20003e80
 800edc4:	20003e6c 	.word	0x20003e6c

0800edc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10b      	bne.n	800edf0 <xTaskCheckForTimeOut+0x28>
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	b672      	cpsid	i
 800edde:	f383 8811 	msr	BASEPRI, r3
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	b662      	cpsie	i
 800edec:	613b      	str	r3, [r7, #16]
 800edee:	e7fe      	b.n	800edee <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10b      	bne.n	800ee0e <xTaskCheckForTimeOut+0x46>
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	b672      	cpsid	i
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	b662      	cpsie	i
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	e7fe      	b.n	800ee0c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ee0e:	f000 ff73 	bl	800fcf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ee12:	4b1d      	ldr	r3, [pc, #116]	; (800ee88 <xTaskCheckForTimeOut+0xc0>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	69ba      	ldr	r2, [r7, #24]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2a:	d102      	bne.n	800ee32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]
 800ee30:	e023      	b.n	800ee7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	4b15      	ldr	r3, [pc, #84]	; (800ee8c <xTaskCheckForTimeOut+0xc4>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d007      	beq.n	800ee4e <xTaskCheckForTimeOut+0x86>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	69ba      	ldr	r2, [r7, #24]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d302      	bcc.n	800ee4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	61fb      	str	r3, [r7, #28]
 800ee4c:	e015      	b.n	800ee7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d20b      	bcs.n	800ee70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	1ad2      	subs	r2, r2, r3
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff ff99 	bl	800ed9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	61fb      	str	r3, [r7, #28]
 800ee6e:	e004      	b.n	800ee7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2200      	movs	r2, #0
 800ee74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee76:	2301      	movs	r3, #1
 800ee78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee7a:	f000 ff6f 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3720      	adds	r7, #32
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	20003e6c 	.word	0x20003e6c
 800ee8c:	20003e80 	.word	0x20003e80

0800ee90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee90:	b480      	push	{r7}
 800ee92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee94:	4b03      	ldr	r3, [pc, #12]	; (800eea4 <vTaskMissedYield+0x14>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	601a      	str	r2, [r3, #0]
}
 800ee9a:	bf00      	nop
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	20003e7c 	.word	0x20003e7c

0800eea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eeb0:	f000 f852 	bl	800ef58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eeb4:	4b06      	ldr	r3, [pc, #24]	; (800eed0 <prvIdleTask+0x28>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d9f9      	bls.n	800eeb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eebc:	4b05      	ldr	r3, [pc, #20]	; (800eed4 <prvIdleTask+0x2c>)
 800eebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eecc:	e7f0      	b.n	800eeb0 <prvIdleTask+0x8>
 800eece:	bf00      	nop
 800eed0:	20003998 	.word	0x20003998
 800eed4:	e000ed04 	.word	0xe000ed04

0800eed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eede:	2300      	movs	r3, #0
 800eee0:	607b      	str	r3, [r7, #4]
 800eee2:	e00c      	b.n	800eefe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	4613      	mov	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4a12      	ldr	r2, [pc, #72]	; (800ef38 <prvInitialiseTaskLists+0x60>)
 800eef0:	4413      	add	r3, r2
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe fcda 	bl	800d8ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	3301      	adds	r3, #1
 800eefc:	607b      	str	r3, [r7, #4]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b37      	cmp	r3, #55	; 0x37
 800ef02:	d9ef      	bls.n	800eee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef04:	480d      	ldr	r0, [pc, #52]	; (800ef3c <prvInitialiseTaskLists+0x64>)
 800ef06:	f7fe fcd1 	bl	800d8ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef0a:	480d      	ldr	r0, [pc, #52]	; (800ef40 <prvInitialiseTaskLists+0x68>)
 800ef0c:	f7fe fcce 	bl	800d8ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ef10:	480c      	ldr	r0, [pc, #48]	; (800ef44 <prvInitialiseTaskLists+0x6c>)
 800ef12:	f7fe fccb 	bl	800d8ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ef16:	480c      	ldr	r0, [pc, #48]	; (800ef48 <prvInitialiseTaskLists+0x70>)
 800ef18:	f7fe fcc8 	bl	800d8ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ef1c:	480b      	ldr	r0, [pc, #44]	; (800ef4c <prvInitialiseTaskLists+0x74>)
 800ef1e:	f7fe fcc5 	bl	800d8ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ef22:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <prvInitialiseTaskLists+0x78>)
 800ef24:	4a05      	ldr	r2, [pc, #20]	; (800ef3c <prvInitialiseTaskLists+0x64>)
 800ef26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ef28:	4b0a      	ldr	r3, [pc, #40]	; (800ef54 <prvInitialiseTaskLists+0x7c>)
 800ef2a:	4a05      	ldr	r2, [pc, #20]	; (800ef40 <prvInitialiseTaskLists+0x68>)
 800ef2c:	601a      	str	r2, [r3, #0]
}
 800ef2e:	bf00      	nop
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20003998 	.word	0x20003998
 800ef3c:	20003df8 	.word	0x20003df8
 800ef40:	20003e0c 	.word	0x20003e0c
 800ef44:	20003e28 	.word	0x20003e28
 800ef48:	20003e3c 	.word	0x20003e3c
 800ef4c:	20003e54 	.word	0x20003e54
 800ef50:	20003e20 	.word	0x20003e20
 800ef54:	20003e24 	.word	0x20003e24

0800ef58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef5e:	e019      	b.n	800ef94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef60:	f000 feca 	bl	800fcf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef64:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <prvCheckTasksWaitingTermination+0x4c>)
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	3304      	adds	r3, #4
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe fd25 	bl	800d9c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <prvCheckTasksWaitingTermination+0x50>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	4a0a      	ldr	r2, [pc, #40]	; (800efa8 <prvCheckTasksWaitingTermination+0x50>)
 800ef7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef80:	4b0a      	ldr	r3, [pc, #40]	; (800efac <prvCheckTasksWaitingTermination+0x54>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	4a09      	ldr	r2, [pc, #36]	; (800efac <prvCheckTasksWaitingTermination+0x54>)
 800ef88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef8a:	f000 fee7 	bl	800fd5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f80e 	bl	800efb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef94:	4b05      	ldr	r3, [pc, #20]	; (800efac <prvCheckTasksWaitingTermination+0x54>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1e1      	bne.n	800ef60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef9c:	bf00      	nop
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20003e3c 	.word	0x20003e3c
 800efa8:	20003e68 	.word	0x20003e68
 800efac:	20003e50 	.word	0x20003e50

0800efb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d108      	bne.n	800efd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc6:	4618      	mov	r0, r3
 800efc8:	f001 f880 	bl	80100cc <vPortFree>
				vPortFree( pxTCB );
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f001 f87d 	bl	80100cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800efd2:	e019      	b.n	800f008 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d103      	bne.n	800efe6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f001 f874 	bl	80100cc <vPortFree>
	}
 800efe4:	e010      	b.n	800f008 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800efec:	2b02      	cmp	r3, #2
 800efee:	d00b      	beq.n	800f008 <prvDeleteTCB+0x58>
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	b672      	cpsid	i
 800eff6:	f383 8811 	msr	BASEPRI, r3
 800effa:	f3bf 8f6f 	isb	sy
 800effe:	f3bf 8f4f 	dsb	sy
 800f002:	b662      	cpsie	i
 800f004:	60fb      	str	r3, [r7, #12]
 800f006:	e7fe      	b.n	800f006 <prvDeleteTCB+0x56>
	}
 800f008:	bf00      	nop
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f016:	4b0c      	ldr	r3, [pc, #48]	; (800f048 <prvResetNextTaskUnblockTime+0x38>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d104      	bne.n	800f02a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f020:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <prvResetNextTaskUnblockTime+0x3c>)
 800f022:	f04f 32ff 	mov.w	r2, #4294967295
 800f026:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f028:	e008      	b.n	800f03c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f02a:	4b07      	ldr	r3, [pc, #28]	; (800f048 <prvResetNextTaskUnblockTime+0x38>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	4a04      	ldr	r2, [pc, #16]	; (800f04c <prvResetNextTaskUnblockTime+0x3c>)
 800f03a:	6013      	str	r3, [r2, #0]
}
 800f03c:	bf00      	nop
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	20003e20 	.word	0x20003e20
 800f04c:	20003e88 	.word	0x20003e88

0800f050 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f056:	4b0b      	ldr	r3, [pc, #44]	; (800f084 <xTaskGetSchedulerState+0x34>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d102      	bne.n	800f064 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f05e:	2301      	movs	r3, #1
 800f060:	607b      	str	r3, [r7, #4]
 800f062:	e008      	b.n	800f076 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f064:	4b08      	ldr	r3, [pc, #32]	; (800f088 <xTaskGetSchedulerState+0x38>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d102      	bne.n	800f072 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f06c:	2302      	movs	r3, #2
 800f06e:	607b      	str	r3, [r7, #4]
 800f070:	e001      	b.n	800f076 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f072:	2300      	movs	r3, #0
 800f074:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f076:	687b      	ldr	r3, [r7, #4]
	}
 800f078:	4618      	mov	r0, r3
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	20003e74 	.word	0x20003e74
 800f088:	20003e90 	.word	0x20003e90

0800f08c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b086      	sub	sp, #24
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f098:	2300      	movs	r3, #0
 800f09a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d058      	beq.n	800f154 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f0a2:	4b2f      	ldr	r3, [pc, #188]	; (800f160 <xTaskPriorityDisinherit+0xd4>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d00b      	beq.n	800f0c4 <xTaskPriorityDisinherit+0x38>
 800f0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b0:	b672      	cpsid	i
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	b662      	cpsie	i
 800f0c0:	60fb      	str	r3, [r7, #12]
 800f0c2:	e7fe      	b.n	800f0c2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10b      	bne.n	800f0e4 <xTaskPriorityDisinherit+0x58>
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	b672      	cpsid	i
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	b662      	cpsie	i
 800f0e0:	60bb      	str	r3, [r7, #8]
 800f0e2:	e7fe      	b.n	800f0e2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0e8:	1e5a      	subs	r2, r3, #1
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d02c      	beq.n	800f154 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d128      	bne.n	800f154 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	3304      	adds	r3, #4
 800f106:	4618      	mov	r0, r3
 800f108:	f7fe fc5a 	bl	800d9c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f124:	4b0f      	ldr	r3, [pc, #60]	; (800f164 <xTaskPriorityDisinherit+0xd8>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d903      	bls.n	800f134 <xTaskPriorityDisinherit+0xa8>
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f130:	4a0c      	ldr	r2, [pc, #48]	; (800f164 <xTaskPriorityDisinherit+0xd8>)
 800f132:	6013      	str	r3, [r2, #0]
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f138:	4613      	mov	r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	4413      	add	r3, r2
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	4a09      	ldr	r2, [pc, #36]	; (800f168 <xTaskPriorityDisinherit+0xdc>)
 800f142:	441a      	add	r2, r3
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	3304      	adds	r3, #4
 800f148:	4619      	mov	r1, r3
 800f14a:	4610      	mov	r0, r2
 800f14c:	f7fe fbdb 	bl	800d906 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f150:	2301      	movs	r3, #1
 800f152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f154:	697b      	ldr	r3, [r7, #20]
	}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20003994 	.word	0x20003994
 800f164:	20003e70 	.word	0x20003e70
 800f168:	20003998 	.word	0x20003998

0800f16c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f17a:	f000 fdbd 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f17e:	4b26      	ldr	r3, [pc, #152]	; (800f218 <xTaskNotifyWait+0xac>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d01a      	beq.n	800f1c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f18c:	4b22      	ldr	r3, [pc, #136]	; (800f218 <xTaskNotifyWait+0xac>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	43d2      	mvns	r2, r2
 800f196:	400a      	ands	r2, r1
 800f198:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f19a:	4b1f      	ldr	r3, [pc, #124]	; (800f218 <xTaskNotifyWait+0xac>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00b      	beq.n	800f1c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	6838      	ldr	r0, [r7, #0]
 800f1ae:	f000 f8f1 	bl	800f394 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f1b2:	4b1a      	ldr	r3, [pc, #104]	; (800f21c <xTaskNotifyWait+0xb0>)
 800f1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f1c2:	f000 fdcb 	bl	800fd5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f1c6:	f000 fd97 	bl	800fcf8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d004      	beq.n	800f1da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f1d0:	4b11      	ldr	r3, [pc, #68]	; (800f218 <xTaskNotifyWait+0xac>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f1da:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <xTaskNotifyWait+0xac>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	d002      	beq.n	800f1ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	617b      	str	r3, [r7, #20]
 800f1ec:	e008      	b.n	800f200 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f1ee:	4b0a      	ldr	r3, [pc, #40]	; (800f218 <xTaskNotifyWait+0xac>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1f4:	68ba      	ldr	r2, [r7, #8]
 800f1f6:	43d2      	mvns	r2, r2
 800f1f8:	400a      	ands	r2, r1
 800f1fa:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f200:	4b05      	ldr	r3, [pc, #20]	; (800f218 <xTaskNotifyWait+0xac>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2200      	movs	r2, #0
 800f206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f20a:	f000 fda7 	bl	800fd5c <vPortExitCritical>

		return xReturn;
 800f20e:	697b      	ldr	r3, [r7, #20]
	}
 800f210:	4618      	mov	r0, r3
 800f212:	3718      	adds	r7, #24
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20003994 	.word	0x20003994
 800f21c:	e000ed04 	.word	0xe000ed04

0800f220 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f220:	b580      	push	{r7, lr}
 800f222:	b08a      	sub	sp, #40	; 0x28
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	603b      	str	r3, [r7, #0]
 800f22c:	4613      	mov	r3, r2
 800f22e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f230:	2301      	movs	r3, #1
 800f232:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d10b      	bne.n	800f252 <xTaskGenericNotify+0x32>
 800f23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23e:	b672      	cpsid	i
 800f240:	f383 8811 	msr	BASEPRI, r3
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	b662      	cpsie	i
 800f24e:	61bb      	str	r3, [r7, #24]
 800f250:	e7fe      	b.n	800f250 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f256:	f000 fd4f 	bl	800fcf8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d003      	beq.n	800f268 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f260:	6a3b      	ldr	r3, [r7, #32]
 800f262:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f26e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	2202      	movs	r2, #2
 800f274:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f278:	79fb      	ldrb	r3, [r7, #7]
 800f27a:	2b04      	cmp	r3, #4
 800f27c:	d827      	bhi.n	800f2ce <xTaskGenericNotify+0xae>
 800f27e:	a201      	add	r2, pc, #4	; (adr r2, 800f284 <xTaskGenericNotify+0x64>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f2f1 	.word	0x0800f2f1
 800f288:	0800f299 	.word	0x0800f299
 800f28c:	0800f2a7 	.word	0x0800f2a7
 800f290:	0800f2b3 	.word	0x0800f2b3
 800f294:	0800f2bb 	.word	0x0800f2bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f298:	6a3b      	ldr	r3, [r7, #32]
 800f29a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	431a      	orrs	r2, r3
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f2a4:	e027      	b.n	800f2f6 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f2a6:	6a3b      	ldr	r3, [r7, #32]
 800f2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	6a3b      	ldr	r3, [r7, #32]
 800f2ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f2b0:	e021      	b.n	800f2f6 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f2b8:	e01d      	b.n	800f2f6 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f2ba:	7ffb      	ldrb	r3, [r7, #31]
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d003      	beq.n	800f2c8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f2c6:	e016      	b.n	800f2f6 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f2cc:	e013      	b.n	800f2f6 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f2ce:	6a3b      	ldr	r3, [r7, #32]
 800f2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d6:	d00d      	beq.n	800f2f4 <xTaskGenericNotify+0xd4>
 800f2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2dc:	b672      	cpsid	i
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	b662      	cpsie	i
 800f2ec:	617b      	str	r3, [r7, #20]
 800f2ee:	e7fe      	b.n	800f2ee <xTaskGenericNotify+0xce>
					break;
 800f2f0:	bf00      	nop
 800f2f2:	e000      	b.n	800f2f6 <xTaskGenericNotify+0xd6>

					break;
 800f2f4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f2f6:	7ffb      	ldrb	r3, [r7, #31]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d13b      	bne.n	800f374 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	3304      	adds	r3, #4
 800f300:	4618      	mov	r0, r3
 800f302:	f7fe fb5d 	bl	800d9c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f306:	6a3b      	ldr	r3, [r7, #32]
 800f308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30a:	4b1e      	ldr	r3, [pc, #120]	; (800f384 <xTaskGenericNotify+0x164>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d903      	bls.n	800f31a <xTaskGenericNotify+0xfa>
 800f312:	6a3b      	ldr	r3, [r7, #32]
 800f314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f316:	4a1b      	ldr	r2, [pc, #108]	; (800f384 <xTaskGenericNotify+0x164>)
 800f318:	6013      	str	r3, [r2, #0]
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31e:	4613      	mov	r3, r2
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4413      	add	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	4a18      	ldr	r2, [pc, #96]	; (800f388 <xTaskGenericNotify+0x168>)
 800f328:	441a      	add	r2, r3
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	3304      	adds	r3, #4
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f7fe fae8 	bl	800d906 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00b      	beq.n	800f356 <xTaskGenericNotify+0x136>
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	b672      	cpsid	i
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	b662      	cpsie	i
 800f352:	613b      	str	r3, [r7, #16]
 800f354:	e7fe      	b.n	800f354 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35a:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <xTaskGenericNotify+0x16c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f360:	429a      	cmp	r2, r3
 800f362:	d907      	bls.n	800f374 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f364:	4b0a      	ldr	r3, [pc, #40]	; (800f390 <xTaskGenericNotify+0x170>)
 800f366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f36a:	601a      	str	r2, [r3, #0]
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f374:	f000 fcf2 	bl	800fd5c <vPortExitCritical>

		return xReturn;
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3728      	adds	r7, #40	; 0x28
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	20003e70 	.word	0x20003e70
 800f388:	20003998 	.word	0x20003998
 800f38c:	20003994 	.word	0x20003994
 800f390:	e000ed04 	.word	0xe000ed04

0800f394 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f39e:	4b21      	ldr	r3, [pc, #132]	; (800f424 <prvAddCurrentTaskToDelayedList+0x90>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3a4:	4b20      	ldr	r3, [pc, #128]	; (800f428 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fe fb08 	bl	800d9c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b6:	d10a      	bne.n	800f3ce <prvAddCurrentTaskToDelayedList+0x3a>
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d007      	beq.n	800f3ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3be:	4b1a      	ldr	r3, [pc, #104]	; (800f428 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	3304      	adds	r3, #4
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4819      	ldr	r0, [pc, #100]	; (800f42c <prvAddCurrentTaskToDelayedList+0x98>)
 800f3c8:	f7fe fa9d 	bl	800d906 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f3cc:	e026      	b.n	800f41c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3d6:	4b14      	ldr	r3, [pc, #80]	; (800f428 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d209      	bcs.n	800f3fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3e6:	4b12      	ldr	r3, [pc, #72]	; (800f430 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	4b0f      	ldr	r3, [pc, #60]	; (800f428 <prvAddCurrentTaskToDelayedList+0x94>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3304      	adds	r3, #4
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	f7fe faab 	bl	800d94e <vListInsert>
}
 800f3f8:	e010      	b.n	800f41c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3fa:	4b0e      	ldr	r3, [pc, #56]	; (800f434 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	4b0a      	ldr	r3, [pc, #40]	; (800f428 <prvAddCurrentTaskToDelayedList+0x94>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	3304      	adds	r3, #4
 800f404:	4619      	mov	r1, r3
 800f406:	4610      	mov	r0, r2
 800f408:	f7fe faa1 	bl	800d94e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f40c:	4b0a      	ldr	r3, [pc, #40]	; (800f438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68ba      	ldr	r2, [r7, #8]
 800f412:	429a      	cmp	r2, r3
 800f414:	d202      	bcs.n	800f41c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f416:	4a08      	ldr	r2, [pc, #32]	; (800f438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	6013      	str	r3, [r2, #0]
}
 800f41c:	bf00      	nop
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	20003e6c 	.word	0x20003e6c
 800f428:	20003994 	.word	0x20003994
 800f42c:	20003e54 	.word	0x20003e54
 800f430:	20003e24 	.word	0x20003e24
 800f434:	20003e20 	.word	0x20003e20
 800f438:	20003e88 	.word	0x20003e88

0800f43c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f442:	2300      	movs	r3, #0
 800f444:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f446:	f000 fb0d 	bl	800fa64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f44a:	4b1d      	ldr	r3, [pc, #116]	; (800f4c0 <xTimerCreateTimerTask+0x84>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d021      	beq.n	800f496 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f452:	2300      	movs	r3, #0
 800f454:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f45a:	1d3a      	adds	r2, r7, #4
 800f45c:	f107 0108 	add.w	r1, r7, #8
 800f460:	f107 030c 	add.w	r3, r7, #12
 800f464:	4618      	mov	r0, r3
 800f466:	f7fe fa07 	bl	800d878 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f46a:	6879      	ldr	r1, [r7, #4]
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	9202      	str	r2, [sp, #8]
 800f472:	9301      	str	r3, [sp, #4]
 800f474:	2302      	movs	r3, #2
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	2300      	movs	r3, #0
 800f47a:	460a      	mov	r2, r1
 800f47c:	4911      	ldr	r1, [pc, #68]	; (800f4c4 <xTimerCreateTimerTask+0x88>)
 800f47e:	4812      	ldr	r0, [pc, #72]	; (800f4c8 <xTimerCreateTimerTask+0x8c>)
 800f480:	f7fe ffbe 	bl	800e400 <xTaskCreateStatic>
 800f484:	4602      	mov	r2, r0
 800f486:	4b11      	ldr	r3, [pc, #68]	; (800f4cc <xTimerCreateTimerTask+0x90>)
 800f488:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f48a:	4b10      	ldr	r3, [pc, #64]	; (800f4cc <xTimerCreateTimerTask+0x90>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f492:	2301      	movs	r3, #1
 800f494:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10b      	bne.n	800f4b4 <xTimerCreateTimerTask+0x78>
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	b672      	cpsid	i
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	b662      	cpsie	i
 800f4b0:	613b      	str	r3, [r7, #16]
 800f4b2:	e7fe      	b.n	800f4b2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800f4b4:	697b      	ldr	r3, [r7, #20]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	20003ec4 	.word	0x20003ec4
 800f4c4:	080148fc 	.word	0x080148fc
 800f4c8:	0800f609 	.word	0x0800f609
 800f4cc:	20003ec8 	.word	0x20003ec8

0800f4d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08a      	sub	sp, #40	; 0x28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
 800f4dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10b      	bne.n	800f500 <xTimerGenericCommand+0x30>
 800f4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ec:	b672      	cpsid	i
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	b662      	cpsie	i
 800f4fc:	623b      	str	r3, [r7, #32]
 800f4fe:	e7fe      	b.n	800f4fe <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f500:	4b19      	ldr	r3, [pc, #100]	; (800f568 <xTimerGenericCommand+0x98>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d02a      	beq.n	800f55e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b05      	cmp	r3, #5
 800f518:	dc18      	bgt.n	800f54c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f51a:	f7ff fd99 	bl	800f050 <xTaskGetSchedulerState>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b02      	cmp	r3, #2
 800f522:	d109      	bne.n	800f538 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f524:	4b10      	ldr	r3, [pc, #64]	; (800f568 <xTimerGenericCommand+0x98>)
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	f107 0110 	add.w	r1, r7, #16
 800f52c:	2300      	movs	r3, #0
 800f52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f530:	f7fe fb7a 	bl	800dc28 <xQueueGenericSend>
 800f534:	6278      	str	r0, [r7, #36]	; 0x24
 800f536:	e012      	b.n	800f55e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f538:	4b0b      	ldr	r3, [pc, #44]	; (800f568 <xTimerGenericCommand+0x98>)
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	f107 0110 	add.w	r1, r7, #16
 800f540:	2300      	movs	r3, #0
 800f542:	2200      	movs	r2, #0
 800f544:	f7fe fb70 	bl	800dc28 <xQueueGenericSend>
 800f548:	6278      	str	r0, [r7, #36]	; 0x24
 800f54a:	e008      	b.n	800f55e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f54c:	4b06      	ldr	r3, [pc, #24]	; (800f568 <xTimerGenericCommand+0x98>)
 800f54e:	6818      	ldr	r0, [r3, #0]
 800f550:	f107 0110 	add.w	r1, r7, #16
 800f554:	2300      	movs	r3, #0
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	f7fe fc68 	bl	800de2c <xQueueGenericSendFromISR>
 800f55c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f560:	4618      	mov	r0, r3
 800f562:	3728      	adds	r7, #40	; 0x28
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	20003ec4 	.word	0x20003ec4

0800f56c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af02      	add	r7, sp, #8
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f576:	4b23      	ldr	r3, [pc, #140]	; (800f604 <prvProcessExpiredTimer+0x98>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	3304      	adds	r3, #4
 800f584:	4618      	mov	r0, r3
 800f586:	f7fe fa1b 	bl	800d9c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f590:	f003 0304 	and.w	r3, r3, #4
 800f594:	2b00      	cmp	r3, #0
 800f596:	d023      	beq.n	800f5e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	699a      	ldr	r2, [r3, #24]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	18d1      	adds	r1, r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	6978      	ldr	r0, [r7, #20]
 800f5a6:	f000 f8d3 	bl	800f750 <prvInsertTimerInActiveList>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d020      	beq.n	800f5f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	6978      	ldr	r0, [r7, #20]
 800f5bc:	f7ff ff88 	bl	800f4d0 <xTimerGenericCommand>
 800f5c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d114      	bne.n	800f5f2 <prvProcessExpiredTimer+0x86>
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	b672      	cpsid	i
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	b662      	cpsie	i
 800f5dc:	60fb      	str	r3, [r7, #12]
 800f5de:	e7fe      	b.n	800f5de <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5e6:	f023 0301 	bic.w	r3, r3, #1
 800f5ea:	b2da      	uxtb	r2, r3
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	6a1b      	ldr	r3, [r3, #32]
 800f5f6:	6978      	ldr	r0, [r7, #20]
 800f5f8:	4798      	blx	r3
}
 800f5fa:	bf00      	nop
 800f5fc:	3718      	adds	r7, #24
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	20003ebc 	.word	0x20003ebc

0800f608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f610:	f107 0308 	add.w	r3, r7, #8
 800f614:	4618      	mov	r0, r3
 800f616:	f000 f857 	bl	800f6c8 <prvGetNextExpireTime>
 800f61a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	4619      	mov	r1, r3
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f000 f803 	bl	800f62c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f626:	f000 f8d5 	bl	800f7d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f62a:	e7f1      	b.n	800f610 <prvTimerTask+0x8>

0800f62c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f636:	f7ff f927 	bl	800e888 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f63a:	f107 0308 	add.w	r3, r7, #8
 800f63e:	4618      	mov	r0, r3
 800f640:	f000 f866 	bl	800f710 <prvSampleTimeNow>
 800f644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d130      	bne.n	800f6ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10a      	bne.n	800f668 <prvProcessTimerOrBlockTask+0x3c>
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	429a      	cmp	r2, r3
 800f658:	d806      	bhi.n	800f668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f65a:	f7ff f923 	bl	800e8a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f65e:	68f9      	ldr	r1, [r7, #12]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff ff83 	bl	800f56c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f666:	e024      	b.n	800f6b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d008      	beq.n	800f680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f66e:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <prvProcessTimerOrBlockTask+0x90>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d101      	bne.n	800f67c <prvProcessTimerOrBlockTask+0x50>
 800f678:	2301      	movs	r3, #1
 800f67a:	e000      	b.n	800f67e <prvProcessTimerOrBlockTask+0x52>
 800f67c:	2300      	movs	r3, #0
 800f67e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f680:	4b0f      	ldr	r3, [pc, #60]	; (800f6c0 <prvProcessTimerOrBlockTask+0x94>)
 800f682:	6818      	ldr	r0, [r3, #0]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	4619      	mov	r1, r3
 800f68e:	f7fe fe83 	bl	800e398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f692:	f7ff f907 	bl	800e8a4 <xTaskResumeAll>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10a      	bne.n	800f6b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f69c:	4b09      	ldr	r3, [pc, #36]	; (800f6c4 <prvProcessTimerOrBlockTask+0x98>)
 800f69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6a2:	601a      	str	r2, [r3, #0]
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	f3bf 8f6f 	isb	sy
}
 800f6ac:	e001      	b.n	800f6b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6ae:	f7ff f8f9 	bl	800e8a4 <xTaskResumeAll>
}
 800f6b2:	bf00      	nop
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20003ec0 	.word	0x20003ec0
 800f6c0:	20003ec4 	.word	0x20003ec4
 800f6c4:	e000ed04 	.word	0xe000ed04

0800f6c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6d0:	4b0e      	ldr	r3, [pc, #56]	; (800f70c <prvGetNextExpireTime+0x44>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <prvGetNextExpireTime+0x16>
 800f6da:	2201      	movs	r2, #1
 800f6dc:	e000      	b.n	800f6e0 <prvGetNextExpireTime+0x18>
 800f6de:	2200      	movs	r2, #0
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d105      	bne.n	800f6f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6ec:	4b07      	ldr	r3, [pc, #28]	; (800f70c <prvGetNextExpireTime+0x44>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	60fb      	str	r3, [r7, #12]
 800f6f6:	e001      	b.n	800f6fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	20003ebc 	.word	0x20003ebc

0800f710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f718:	f7ff f962 	bl	800e9e0 <xTaskGetTickCount>
 800f71c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f71e:	4b0b      	ldr	r3, [pc, #44]	; (800f74c <prvSampleTimeNow+0x3c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	429a      	cmp	r2, r3
 800f726:	d205      	bcs.n	800f734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f728:	f000 f936 	bl	800f998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	e002      	b.n	800f73a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f73a:	4a04      	ldr	r2, [pc, #16]	; (800f74c <prvSampleTimeNow+0x3c>)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f740:	68fb      	ldr	r3, [r7, #12]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	20003ecc 	.word	0x20003ecc

0800f750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
 800f75c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f75e:	2300      	movs	r3, #0
 800f760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	429a      	cmp	r2, r3
 800f774:	d812      	bhi.n	800f79c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	1ad2      	subs	r2, r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	429a      	cmp	r2, r3
 800f782:	d302      	bcc.n	800f78a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f784:	2301      	movs	r3, #1
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e01b      	b.n	800f7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f78a:	4b10      	ldr	r3, [pc, #64]	; (800f7cc <prvInsertTimerInActiveList+0x7c>)
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	3304      	adds	r3, #4
 800f792:	4619      	mov	r1, r3
 800f794:	4610      	mov	r0, r2
 800f796:	f7fe f8da 	bl	800d94e <vListInsert>
 800f79a:	e012      	b.n	800f7c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d206      	bcs.n	800f7b2 <prvInsertTimerInActiveList+0x62>
 800f7a4:	68ba      	ldr	r2, [r7, #8]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d302      	bcc.n	800f7b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	617b      	str	r3, [r7, #20]
 800f7b0:	e007      	b.n	800f7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7b2:	4b07      	ldr	r3, [pc, #28]	; (800f7d0 <prvInsertTimerInActiveList+0x80>)
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	3304      	adds	r3, #4
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4610      	mov	r0, r2
 800f7be:	f7fe f8c6 	bl	800d94e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7c2:	697b      	ldr	r3, [r7, #20]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3718      	adds	r7, #24
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	20003ec0 	.word	0x20003ec0
 800f7d0:	20003ebc 	.word	0x20003ebc

0800f7d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08e      	sub	sp, #56	; 0x38
 800f7d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7da:	e0cc      	b.n	800f976 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	da19      	bge.n	800f816 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7e2:	1d3b      	adds	r3, r7, #4
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10b      	bne.n	800f806 <prvProcessReceivedCommands+0x32>
 800f7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f2:	b672      	cpsid	i
 800f7f4:	f383 8811 	msr	BASEPRI, r3
 800f7f8:	f3bf 8f6f 	isb	sy
 800f7fc:	f3bf 8f4f 	dsb	sy
 800f800:	b662      	cpsie	i
 800f802:	61fb      	str	r3, [r7, #28]
 800f804:	e7fe      	b.n	800f804 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f80c:	6850      	ldr	r0, [r2, #4]
 800f80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f810:	6892      	ldr	r2, [r2, #8]
 800f812:	4611      	mov	r1, r2
 800f814:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f2c0 80ab 	blt.w	800f974 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	695b      	ldr	r3, [r3, #20]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82c:	3304      	adds	r3, #4
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe f8c6 	bl	800d9c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f834:	463b      	mov	r3, r7
 800f836:	4618      	mov	r0, r3
 800f838:	f7ff ff6a 	bl	800f710 <prvSampleTimeNow>
 800f83c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b09      	cmp	r3, #9
 800f842:	f200 8098 	bhi.w	800f976 <prvProcessReceivedCommands+0x1a2>
 800f846:	a201      	add	r2, pc, #4	; (adr r2, 800f84c <prvProcessReceivedCommands+0x78>)
 800f848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f84c:	0800f875 	.word	0x0800f875
 800f850:	0800f875 	.word	0x0800f875
 800f854:	0800f875 	.word	0x0800f875
 800f858:	0800f8eb 	.word	0x0800f8eb
 800f85c:	0800f8ff 	.word	0x0800f8ff
 800f860:	0800f94b 	.word	0x0800f94b
 800f864:	0800f875 	.word	0x0800f875
 800f868:	0800f875 	.word	0x0800f875
 800f86c:	0800f8eb 	.word	0x0800f8eb
 800f870:	0800f8ff 	.word	0x0800f8ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f87a:	f043 0301 	orr.w	r3, r3, #1
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88a:	699b      	ldr	r3, [r3, #24]
 800f88c:	18d1      	adds	r1, r2, r3
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f894:	f7ff ff5c 	bl	800f750 <prvInsertTimerInActiveList>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d06b      	beq.n	800f976 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a0:	6a1b      	ldr	r3, [r3, #32]
 800f8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8ac:	f003 0304 	and.w	r3, r3, #4
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d060      	beq.n	800f976 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8b4:	68ba      	ldr	r2, [r7, #8]
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	699b      	ldr	r3, [r3, #24]
 800f8ba:	441a      	add	r2, r3
 800f8bc:	2300      	movs	r3, #0
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8c6:	f7ff fe03 	bl	800f4d0 <xTimerGenericCommand>
 800f8ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d151      	bne.n	800f976 <prvProcessReceivedCommands+0x1a2>
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	b672      	cpsid	i
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	b662      	cpsie	i
 800f8e6:	61bb      	str	r3, [r7, #24]
 800f8e8:	e7fe      	b.n	800f8e8 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8f0:	f023 0301 	bic.w	r3, r3, #1
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f8fc:	e03b      	b.n	800f976 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f904:	f043 0301 	orr.w	r3, r3, #1
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f918:	699b      	ldr	r3, [r3, #24]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10b      	bne.n	800f936 <prvProcessReceivedCommands+0x162>
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	b672      	cpsid	i
 800f924:	f383 8811 	msr	BASEPRI, r3
 800f928:	f3bf 8f6f 	isb	sy
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	b662      	cpsie	i
 800f932:	617b      	str	r3, [r7, #20]
 800f934:	e7fe      	b.n	800f934 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f938:	699a      	ldr	r2, [r3, #24]
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	18d1      	adds	r1, r2, r3
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f944:	f7ff ff04 	bl	800f750 <prvInsertTimerInActiveList>
					break;
 800f948:	e015      	b.n	800f976 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f950:	f003 0302 	and.w	r3, r3, #2
 800f954:	2b00      	cmp	r3, #0
 800f956:	d103      	bne.n	800f960 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f95a:	f000 fbb7 	bl	80100cc <vPortFree>
 800f95e:	e00a      	b.n	800f976 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f966:	f023 0301 	bic.w	r3, r3, #1
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f972:	e000      	b.n	800f976 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f974:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f976:	4b07      	ldr	r3, [pc, #28]	; (800f994 <prvProcessReceivedCommands+0x1c0>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	1d39      	adds	r1, r7, #4
 800f97c:	2200      	movs	r2, #0
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe faf0 	bl	800df64 <xQueueReceive>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	f47f af28 	bne.w	800f7dc <prvProcessReceivedCommands+0x8>
	}
}
 800f98c:	bf00      	nop
 800f98e:	3730      	adds	r7, #48	; 0x30
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	20003ec4 	.word	0x20003ec4

0800f998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b088      	sub	sp, #32
 800f99c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f99e:	e049      	b.n	800fa34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9a0:	4b2e      	ldr	r3, [pc, #184]	; (800fa5c <prvSwitchTimerLists+0xc4>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9aa:	4b2c      	ldr	r3, [pc, #176]	; (800fa5c <prvSwitchTimerLists+0xc4>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe f801 	bl	800d9c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9cc:	f003 0304 	and.w	r3, r3, #4
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d02f      	beq.n	800fa34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	693a      	ldr	r2, [r7, #16]
 800f9da:	4413      	add	r3, r2
 800f9dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d90e      	bls.n	800fa04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9f2:	4b1a      	ldr	r3, [pc, #104]	; (800fa5c <prvSwitchTimerLists+0xc4>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7fd ffa6 	bl	800d94e <vListInsert>
 800fa02:	e017      	b.n	800fa34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa04:	2300      	movs	r3, #0
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	2300      	movs	r3, #0
 800fa0a:	693a      	ldr	r2, [r7, #16]
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7ff fd5e 	bl	800f4d0 <xTimerGenericCommand>
 800fa14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10b      	bne.n	800fa34 <prvSwitchTimerLists+0x9c>
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	b672      	cpsid	i
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	b662      	cpsie	i
 800fa30:	603b      	str	r3, [r7, #0]
 800fa32:	e7fe      	b.n	800fa32 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa34:	4b09      	ldr	r3, [pc, #36]	; (800fa5c <prvSwitchTimerLists+0xc4>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1b0      	bne.n	800f9a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa3e:	4b07      	ldr	r3, [pc, #28]	; (800fa5c <prvSwitchTimerLists+0xc4>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa44:	4b06      	ldr	r3, [pc, #24]	; (800fa60 <prvSwitchTimerLists+0xc8>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a04      	ldr	r2, [pc, #16]	; (800fa5c <prvSwitchTimerLists+0xc4>)
 800fa4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa4c:	4a04      	ldr	r2, [pc, #16]	; (800fa60 <prvSwitchTimerLists+0xc8>)
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	6013      	str	r3, [r2, #0]
}
 800fa52:	bf00      	nop
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20003ebc 	.word	0x20003ebc
 800fa60:	20003ec0 	.word	0x20003ec0

0800fa64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa6a:	f000 f945 	bl	800fcf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa6e:	4b15      	ldr	r3, [pc, #84]	; (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d120      	bne.n	800fab8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa76:	4814      	ldr	r0, [pc, #80]	; (800fac8 <prvCheckForValidListAndQueue+0x64>)
 800fa78:	f7fd ff18 	bl	800d8ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa7c:	4813      	ldr	r0, [pc, #76]	; (800facc <prvCheckForValidListAndQueue+0x68>)
 800fa7e:	f7fd ff15 	bl	800d8ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa82:	4b13      	ldr	r3, [pc, #76]	; (800fad0 <prvCheckForValidListAndQueue+0x6c>)
 800fa84:	4a10      	ldr	r2, [pc, #64]	; (800fac8 <prvCheckForValidListAndQueue+0x64>)
 800fa86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa88:	4b12      	ldr	r3, [pc, #72]	; (800fad4 <prvCheckForValidListAndQueue+0x70>)
 800fa8a:	4a10      	ldr	r2, [pc, #64]	; (800facc <prvCheckForValidListAndQueue+0x68>)
 800fa8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa8e:	2300      	movs	r3, #0
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	4b11      	ldr	r3, [pc, #68]	; (800fad8 <prvCheckForValidListAndQueue+0x74>)
 800fa94:	4a11      	ldr	r2, [pc, #68]	; (800fadc <prvCheckForValidListAndQueue+0x78>)
 800fa96:	2110      	movs	r1, #16
 800fa98:	200a      	movs	r0, #10
 800fa9a:	f7fe f825 	bl	800dae8 <xQueueGenericCreateStatic>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	4b08      	ldr	r3, [pc, #32]	; (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800faa2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800faa4:	4b07      	ldr	r3, [pc, #28]	; (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d005      	beq.n	800fab8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800faac:	4b05      	ldr	r3, [pc, #20]	; (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	490b      	ldr	r1, [pc, #44]	; (800fae0 <prvCheckForValidListAndQueue+0x7c>)
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fc48 	bl	800e348 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fab8:	f000 f950 	bl	800fd5c <vPortExitCritical>
}
 800fabc:	bf00      	nop
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	20003ec4 	.word	0x20003ec4
 800fac8:	20003e94 	.word	0x20003e94
 800facc:	20003ea8 	.word	0x20003ea8
 800fad0:	20003ebc 	.word	0x20003ebc
 800fad4:	20003ec0 	.word	0x20003ec0
 800fad8:	20003f70 	.word	0x20003f70
 800fadc:	20003ed0 	.word	0x20003ed0
 800fae0:	08014904 	.word	0x08014904

0800fae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fae4:	b480      	push	{r7}
 800fae6:	b085      	sub	sp, #20
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3b04      	subs	r3, #4
 800faf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fafc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3b04      	subs	r3, #4
 800fb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	f023 0201 	bic.w	r2, r3, #1
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3b04      	subs	r3, #4
 800fb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb14:	4a0c      	ldr	r2, [pc, #48]	; (800fb48 <pxPortInitialiseStack+0x64>)
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	3b14      	subs	r3, #20
 800fb1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	3b04      	subs	r3, #4
 800fb2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f06f 0202 	mvn.w	r2, #2
 800fb32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3b20      	subs	r3, #32
 800fb38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3714      	adds	r7, #20
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr
 800fb48:	0800fb4d 	.word	0x0800fb4d

0800fb4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb56:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <prvTaskExitError+0x58>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5e:	d00b      	beq.n	800fb78 <prvTaskExitError+0x2c>
 800fb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb64:	b672      	cpsid	i
 800fb66:	f383 8811 	msr	BASEPRI, r3
 800fb6a:	f3bf 8f6f 	isb	sy
 800fb6e:	f3bf 8f4f 	dsb	sy
 800fb72:	b662      	cpsie	i
 800fb74:	60fb      	str	r3, [r7, #12]
 800fb76:	e7fe      	b.n	800fb76 <prvTaskExitError+0x2a>
 800fb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7c:	b672      	cpsid	i
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	b662      	cpsie	i
 800fb8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb8e:	bf00      	nop
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d0fc      	beq.n	800fb90 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb96:	bf00      	nop
 800fb98:	3714      	adds	r7, #20
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	20000194 	.word	0x20000194
	...

0800fbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbb0:	4b07      	ldr	r3, [pc, #28]	; (800fbd0 <pxCurrentTCBConst2>)
 800fbb2:	6819      	ldr	r1, [r3, #0]
 800fbb4:	6808      	ldr	r0, [r1, #0]
 800fbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbba:	f380 8809 	msr	PSP, r0
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f04f 0000 	mov.w	r0, #0
 800fbc6:	f380 8811 	msr	BASEPRI, r0
 800fbca:	4770      	bx	lr
 800fbcc:	f3af 8000 	nop.w

0800fbd0 <pxCurrentTCBConst2>:
 800fbd0:	20003994 	.word	0x20003994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbd4:	bf00      	nop
 800fbd6:	bf00      	nop

0800fbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbd8:	4808      	ldr	r0, [pc, #32]	; (800fbfc <prvPortStartFirstTask+0x24>)
 800fbda:	6800      	ldr	r0, [r0, #0]
 800fbdc:	6800      	ldr	r0, [r0, #0]
 800fbde:	f380 8808 	msr	MSP, r0
 800fbe2:	f04f 0000 	mov.w	r0, #0
 800fbe6:	f380 8814 	msr	CONTROL, r0
 800fbea:	b662      	cpsie	i
 800fbec:	b661      	cpsie	f
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	f3bf 8f6f 	isb	sy
 800fbf6:	df00      	svc	0
 800fbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbfa:	bf00      	nop
 800fbfc:	e000ed08 	.word	0xe000ed08

0800fc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc06:	4b36      	ldr	r3, [pc, #216]	; (800fce0 <xPortStartScheduler+0xe0>)
 800fc08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	22ff      	movs	r2, #255	; 0xff
 800fc16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc20:	78fb      	ldrb	r3, [r7, #3]
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	4b2e      	ldr	r3, [pc, #184]	; (800fce4 <xPortStartScheduler+0xe4>)
 800fc2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc2e:	4b2e      	ldr	r3, [pc, #184]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc30:	2207      	movs	r2, #7
 800fc32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc34:	e009      	b.n	800fc4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fc36:	4b2c      	ldr	r3, [pc, #176]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	4a2a      	ldr	r2, [pc, #168]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc40:	78fb      	ldrb	r3, [r7, #3]
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc4a:	78fb      	ldrb	r3, [r7, #3]
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc52:	2b80      	cmp	r3, #128	; 0x80
 800fc54:	d0ef      	beq.n	800fc36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc56:	4b24      	ldr	r3, [pc, #144]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f1c3 0307 	rsb	r3, r3, #7
 800fc5e:	2b04      	cmp	r3, #4
 800fc60:	d00b      	beq.n	800fc7a <xPortStartScheduler+0x7a>
 800fc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc66:	b672      	cpsid	i
 800fc68:	f383 8811 	msr	BASEPRI, r3
 800fc6c:	f3bf 8f6f 	isb	sy
 800fc70:	f3bf 8f4f 	dsb	sy
 800fc74:	b662      	cpsie	i
 800fc76:	60bb      	str	r3, [r7, #8]
 800fc78:	e7fe      	b.n	800fc78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc7a:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	021b      	lsls	r3, r3, #8
 800fc80:	4a19      	ldr	r2, [pc, #100]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc84:	4b18      	ldr	r3, [pc, #96]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc8c:	4a16      	ldr	r2, [pc, #88]	; (800fce8 <xPortStartScheduler+0xe8>)
 800fc8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc98:	4b14      	ldr	r3, [pc, #80]	; (800fcec <xPortStartScheduler+0xec>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a13      	ldr	r2, [pc, #76]	; (800fcec <xPortStartScheduler+0xec>)
 800fc9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fca2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fca4:	4b11      	ldr	r3, [pc, #68]	; (800fcec <xPortStartScheduler+0xec>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a10      	ldr	r2, [pc, #64]	; (800fcec <xPortStartScheduler+0xec>)
 800fcaa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fcae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcb0:	f000 f8d4 	bl	800fe5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcb4:	4b0e      	ldr	r3, [pc, #56]	; (800fcf0 <xPortStartScheduler+0xf0>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcba:	f000 f8f3 	bl	800fea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fcbe:	4b0d      	ldr	r3, [pc, #52]	; (800fcf4 <xPortStartScheduler+0xf4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a0c      	ldr	r2, [pc, #48]	; (800fcf4 <xPortStartScheduler+0xf4>)
 800fcc4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fcc8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcca:	f7ff ff85 	bl	800fbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcce:	f7fe ff51 	bl	800eb74 <vTaskSwitchContext>
	prvTaskExitError();
 800fcd2:	f7ff ff3b 	bl	800fb4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	e000e400 	.word	0xe000e400
 800fce4:	20003fc0 	.word	0x20003fc0
 800fce8:	20003fc4 	.word	0x20003fc4
 800fcec:	e000ed20 	.word	0xe000ed20
 800fcf0:	20000194 	.word	0x20000194
 800fcf4:	e000ef34 	.word	0xe000ef34

0800fcf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	b672      	cpsid	i
 800fd04:	f383 8811 	msr	BASEPRI, r3
 800fd08:	f3bf 8f6f 	isb	sy
 800fd0c:	f3bf 8f4f 	dsb	sy
 800fd10:	b662      	cpsie	i
 800fd12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd14:	4b0f      	ldr	r3, [pc, #60]	; (800fd54 <vPortEnterCritical+0x5c>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	4a0e      	ldr	r2, [pc, #56]	; (800fd54 <vPortEnterCritical+0x5c>)
 800fd1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	; (800fd54 <vPortEnterCritical+0x5c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d110      	bne.n	800fd48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd26:	4b0c      	ldr	r3, [pc, #48]	; (800fd58 <vPortEnterCritical+0x60>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00b      	beq.n	800fd48 <vPortEnterCritical+0x50>
 800fd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd34:	b672      	cpsid	i
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	b662      	cpsie	i
 800fd44:	603b      	str	r3, [r7, #0]
 800fd46:	e7fe      	b.n	800fd46 <vPortEnterCritical+0x4e>
	}
}
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr
 800fd54:	20000194 	.word	0x20000194
 800fd58:	e000ed04 	.word	0xe000ed04

0800fd5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd62:	4b12      	ldr	r3, [pc, #72]	; (800fdac <vPortExitCritical+0x50>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10b      	bne.n	800fd82 <vPortExitCritical+0x26>
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	b672      	cpsid	i
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	b662      	cpsie	i
 800fd7e:	607b      	str	r3, [r7, #4]
 800fd80:	e7fe      	b.n	800fd80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800fd82:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <vPortExitCritical+0x50>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	4a08      	ldr	r2, [pc, #32]	; (800fdac <vPortExitCritical+0x50>)
 800fd8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd8c:	4b07      	ldr	r3, [pc, #28]	; (800fdac <vPortExitCritical+0x50>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d104      	bne.n	800fd9e <vPortExitCritical+0x42>
 800fd94:	2300      	movs	r3, #0
 800fd96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd9e:	bf00      	nop
 800fda0:	370c      	adds	r7, #12
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	20000194 	.word	0x20000194

0800fdb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdb0:	f3ef 8009 	mrs	r0, PSP
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	4b15      	ldr	r3, [pc, #84]	; (800fe10 <pxCurrentTCBConst>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	f01e 0f10 	tst.w	lr, #16
 800fdc0:	bf08      	it	eq
 800fdc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdca:	6010      	str	r0, [r2, #0]
 800fdcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fdd4:	b672      	cpsid	i
 800fdd6:	f380 8811 	msr	BASEPRI, r0
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	b662      	cpsie	i
 800fde4:	f7fe fec6 	bl	800eb74 <vTaskSwitchContext>
 800fde8:	f04f 0000 	mov.w	r0, #0
 800fdec:	f380 8811 	msr	BASEPRI, r0
 800fdf0:	bc09      	pop	{r0, r3}
 800fdf2:	6819      	ldr	r1, [r3, #0]
 800fdf4:	6808      	ldr	r0, [r1, #0]
 800fdf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfa:	f01e 0f10 	tst.w	lr, #16
 800fdfe:	bf08      	it	eq
 800fe00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe04:	f380 8809 	msr	PSP, r0
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop

0800fe10 <pxCurrentTCBConst>:
 800fe10:	20003994 	.word	0x20003994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop

0800fe18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe22:	b672      	cpsid	i
 800fe24:	f383 8811 	msr	BASEPRI, r3
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	f3bf 8f4f 	dsb	sy
 800fe30:	b662      	cpsie	i
 800fe32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe34:	f7fe fde4 	bl	800ea00 <xTaskIncrementTick>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d003      	beq.n	800fe46 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe3e:	4b06      	ldr	r3, [pc, #24]	; (800fe58 <SysTick_Handler+0x40>)
 800fe40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	2300      	movs	r3, #0
 800fe48:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	e000ed04 	.word	0xe000ed04

0800fe5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe60:	4b0b      	ldr	r3, [pc, #44]	; (800fe90 <vPortSetupTimerInterrupt+0x34>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe66:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <vPortSetupTimerInterrupt+0x38>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <vPortSetupTimerInterrupt+0x3c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a0a      	ldr	r2, [pc, #40]	; (800fe9c <vPortSetupTimerInterrupt+0x40>)
 800fe72:	fba2 2303 	umull	r2, r3, r2, r3
 800fe76:	099b      	lsrs	r3, r3, #6
 800fe78:	4a09      	ldr	r2, [pc, #36]	; (800fea0 <vPortSetupTimerInterrupt+0x44>)
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe7e:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <vPortSetupTimerInterrupt+0x34>)
 800fe80:	2207      	movs	r2, #7
 800fe82:	601a      	str	r2, [r3, #0]
}
 800fe84:	bf00      	nop
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	e000e010 	.word	0xe000e010
 800fe94:	e000e018 	.word	0xe000e018
 800fe98:	20000188 	.word	0x20000188
 800fe9c:	10624dd3 	.word	0x10624dd3
 800fea0:	e000e014 	.word	0xe000e014

0800fea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800feb4 <vPortEnableVFP+0x10>
 800fea8:	6801      	ldr	r1, [r0, #0]
 800feaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800feae:	6001      	str	r1, [r0, #0]
 800feb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800feb2:	bf00      	nop
 800feb4:	e000ed88 	.word	0xe000ed88

0800feb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800febe:	f3ef 8305 	mrs	r3, IPSR
 800fec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b0f      	cmp	r3, #15
 800fec8:	d915      	bls.n	800fef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feca:	4a18      	ldr	r2, [pc, #96]	; (800ff2c <vPortValidateInterruptPriority+0x74>)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	4413      	add	r3, r2
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fed4:	4b16      	ldr	r3, [pc, #88]	; (800ff30 <vPortValidateInterruptPriority+0x78>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	7afa      	ldrb	r2, [r7, #11]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d20b      	bcs.n	800fef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee2:	b672      	cpsid	i
 800fee4:	f383 8811 	msr	BASEPRI, r3
 800fee8:	f3bf 8f6f 	isb	sy
 800feec:	f3bf 8f4f 	dsb	sy
 800fef0:	b662      	cpsie	i
 800fef2:	607b      	str	r3, [r7, #4]
 800fef4:	e7fe      	b.n	800fef4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fef6:	4b0f      	ldr	r3, [pc, #60]	; (800ff34 <vPortValidateInterruptPriority+0x7c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fefe:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <vPortValidateInterruptPriority+0x80>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d90b      	bls.n	800ff1e <vPortValidateInterruptPriority+0x66>
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	b672      	cpsid	i
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	b662      	cpsie	i
 800ff1a:	603b      	str	r3, [r7, #0]
 800ff1c:	e7fe      	b.n	800ff1c <vPortValidateInterruptPriority+0x64>
	}
 800ff1e:	bf00      	nop
 800ff20:	3714      	adds	r7, #20
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop
 800ff2c:	e000e3f0 	.word	0xe000e3f0
 800ff30:	20003fc0 	.word	0x20003fc0
 800ff34:	e000ed0c 	.word	0xe000ed0c
 800ff38:	20003fc4 	.word	0x20003fc4

0800ff3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b08a      	sub	sp, #40	; 0x28
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff48:	f7fe fc9e 	bl	800e888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff4c:	4b5a      	ldr	r3, [pc, #360]	; (80100b8 <pvPortMalloc+0x17c>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff54:	f000 f916 	bl	8010184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff58:	4b58      	ldr	r3, [pc, #352]	; (80100bc <pvPortMalloc+0x180>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4013      	ands	r3, r2
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f040 8090 	bne.w	8010086 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d01e      	beq.n	800ffaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff6c:	2208      	movs	r2, #8
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4413      	add	r3, r2
 800ff72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f003 0307 	and.w	r3, r3, #7
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d015      	beq.n	800ffaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f023 0307 	bic.w	r3, r3, #7
 800ff84:	3308      	adds	r3, #8
 800ff86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f003 0307 	and.w	r3, r3, #7
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00b      	beq.n	800ffaa <pvPortMalloc+0x6e>
 800ff92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff96:	b672      	cpsid	i
 800ff98:	f383 8811 	msr	BASEPRI, r3
 800ff9c:	f3bf 8f6f 	isb	sy
 800ffa0:	f3bf 8f4f 	dsb	sy
 800ffa4:	b662      	cpsie	i
 800ffa6:	617b      	str	r3, [r7, #20]
 800ffa8:	e7fe      	b.n	800ffa8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d06a      	beq.n	8010086 <pvPortMalloc+0x14a>
 800ffb0:	4b43      	ldr	r3, [pc, #268]	; (80100c0 <pvPortMalloc+0x184>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d865      	bhi.n	8010086 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffba:	4b42      	ldr	r3, [pc, #264]	; (80100c4 <pvPortMalloc+0x188>)
 800ffbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffbe:	4b41      	ldr	r3, [pc, #260]	; (80100c4 <pvPortMalloc+0x188>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffc4:	e004      	b.n	800ffd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d903      	bls.n	800ffe2 <pvPortMalloc+0xa6>
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1f1      	bne.n	800ffc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffe2:	4b35      	ldr	r3, [pc, #212]	; (80100b8 <pvPortMalloc+0x17c>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d04c      	beq.n	8010086 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2208      	movs	r2, #8
 800fff2:	4413      	add	r3, r2
 800fff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	6a3b      	ldr	r3, [r7, #32]
 800fffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	1ad2      	subs	r2, r2, r3
 8010006:	2308      	movs	r3, #8
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	429a      	cmp	r2, r3
 801000c:	d920      	bls.n	8010050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801000e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4413      	add	r3, r2
 8010014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	f003 0307 	and.w	r3, r3, #7
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <pvPortMalloc+0xfc>
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	b672      	cpsid	i
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	b662      	cpsie	i
 8010034:	613b      	str	r3, [r7, #16]
 8010036:	e7fe      	b.n	8010036 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	685a      	ldr	r2, [r3, #4]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	1ad2      	subs	r2, r2, r3
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801004a:	69b8      	ldr	r0, [r7, #24]
 801004c:	f000 f8fc 	bl	8010248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010050:	4b1b      	ldr	r3, [pc, #108]	; (80100c0 <pvPortMalloc+0x184>)
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	4a19      	ldr	r2, [pc, #100]	; (80100c0 <pvPortMalloc+0x184>)
 801005c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801005e:	4b18      	ldr	r3, [pc, #96]	; (80100c0 <pvPortMalloc+0x184>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	4b19      	ldr	r3, [pc, #100]	; (80100c8 <pvPortMalloc+0x18c>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	429a      	cmp	r2, r3
 8010068:	d203      	bcs.n	8010072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801006a:	4b15      	ldr	r3, [pc, #84]	; (80100c0 <pvPortMalloc+0x184>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a16      	ldr	r2, [pc, #88]	; (80100c8 <pvPortMalloc+0x18c>)
 8010070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	4b11      	ldr	r3, [pc, #68]	; (80100bc <pvPortMalloc+0x180>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	431a      	orrs	r2, r3
 801007c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	2200      	movs	r2, #0
 8010084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010086:	f7fe fc0d 	bl	800e8a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	f003 0307 	and.w	r3, r3, #7
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00b      	beq.n	80100ac <pvPortMalloc+0x170>
 8010094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010098:	b672      	cpsid	i
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	b662      	cpsie	i
 80100a8:	60fb      	str	r3, [r7, #12]
 80100aa:	e7fe      	b.n	80100aa <pvPortMalloc+0x16e>
	return pvReturn;
 80100ac:	69fb      	ldr	r3, [r7, #28]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3728      	adds	r7, #40	; 0x28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	20010320 	.word	0x20010320
 80100bc:	2001032c 	.word	0x2001032c
 80100c0:	20010324 	.word	0x20010324
 80100c4:	20010318 	.word	0x20010318
 80100c8:	20010328 	.word	0x20010328

080100cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d04a      	beq.n	8010174 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100de:	2308      	movs	r3, #8
 80100e0:	425b      	negs	r3, r3
 80100e2:	697a      	ldr	r2, [r7, #20]
 80100e4:	4413      	add	r3, r2
 80100e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	685a      	ldr	r2, [r3, #4]
 80100f0:	4b22      	ldr	r3, [pc, #136]	; (801017c <vPortFree+0xb0>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4013      	ands	r3, r2
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10b      	bne.n	8010112 <vPortFree+0x46>
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	b672      	cpsid	i
 8010100:	f383 8811 	msr	BASEPRI, r3
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	b662      	cpsie	i
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	e7fe      	b.n	8010110 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00b      	beq.n	8010132 <vPortFree+0x66>
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	b672      	cpsid	i
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	b662      	cpsie	i
 801012e:	60bb      	str	r3, [r7, #8]
 8010130:	e7fe      	b.n	8010130 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	685a      	ldr	r2, [r3, #4]
 8010136:	4b11      	ldr	r3, [pc, #68]	; (801017c <vPortFree+0xb0>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4013      	ands	r3, r2
 801013c:	2b00      	cmp	r3, #0
 801013e:	d019      	beq.n	8010174 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d115      	bne.n	8010174 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	4b0b      	ldr	r3, [pc, #44]	; (801017c <vPortFree+0xb0>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	43db      	mvns	r3, r3
 8010152:	401a      	ands	r2, r3
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010158:	f7fe fb96 	bl	800e888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	4b07      	ldr	r3, [pc, #28]	; (8010180 <vPortFree+0xb4>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4413      	add	r3, r2
 8010166:	4a06      	ldr	r2, [pc, #24]	; (8010180 <vPortFree+0xb4>)
 8010168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801016a:	6938      	ldr	r0, [r7, #16]
 801016c:	f000 f86c 	bl	8010248 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010170:	f7fe fb98 	bl	800e8a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010174:	bf00      	nop
 8010176:	3718      	adds	r7, #24
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	2001032c 	.word	0x2001032c
 8010180:	20010324 	.word	0x20010324

08010184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801018a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801018e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010190:	4b27      	ldr	r3, [pc, #156]	; (8010230 <prvHeapInit+0xac>)
 8010192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f003 0307 	and.w	r3, r3, #7
 801019a:	2b00      	cmp	r3, #0
 801019c:	d00c      	beq.n	80101b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3307      	adds	r3, #7
 80101a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f023 0307 	bic.w	r3, r3, #7
 80101aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	4a1f      	ldr	r2, [pc, #124]	; (8010230 <prvHeapInit+0xac>)
 80101b4:	4413      	add	r3, r2
 80101b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101bc:	4a1d      	ldr	r2, [pc, #116]	; (8010234 <prvHeapInit+0xb0>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101c2:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <prvHeapInit+0xb0>)
 80101c4:	2200      	movs	r2, #0
 80101c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	4413      	add	r3, r2
 80101ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101d0:	2208      	movs	r2, #8
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	1a9b      	subs	r3, r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f023 0307 	bic.w	r3, r3, #7
 80101de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4a15      	ldr	r2, [pc, #84]	; (8010238 <prvHeapInit+0xb4>)
 80101e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101e6:	4b14      	ldr	r3, [pc, #80]	; (8010238 <prvHeapInit+0xb4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2200      	movs	r2, #0
 80101ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101ee:	4b12      	ldr	r3, [pc, #72]	; (8010238 <prvHeapInit+0xb4>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2200      	movs	r2, #0
 80101f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	1ad2      	subs	r2, r2, r3
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010204:	4b0c      	ldr	r3, [pc, #48]	; (8010238 <prvHeapInit+0xb4>)
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	4a0a      	ldr	r2, [pc, #40]	; (801023c <prvHeapInit+0xb8>)
 8010212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	4a09      	ldr	r2, [pc, #36]	; (8010240 <prvHeapInit+0xbc>)
 801021a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801021c:	4b09      	ldr	r3, [pc, #36]	; (8010244 <prvHeapInit+0xc0>)
 801021e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010222:	601a      	str	r2, [r3, #0]
}
 8010224:	bf00      	nop
 8010226:	3714      	adds	r7, #20
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	20003fc8 	.word	0x20003fc8
 8010234:	20010318 	.word	0x20010318
 8010238:	20010320 	.word	0x20010320
 801023c:	20010328 	.word	0x20010328
 8010240:	20010324 	.word	0x20010324
 8010244:	2001032c 	.word	0x2001032c

08010248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010250:	4b28      	ldr	r3, [pc, #160]	; (80102f4 <prvInsertBlockIntoFreeList+0xac>)
 8010252:	60fb      	str	r3, [r7, #12]
 8010254:	e002      	b.n	801025c <prvInsertBlockIntoFreeList+0x14>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	429a      	cmp	r2, r3
 8010264:	d8f7      	bhi.n	8010256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	4413      	add	r3, r2
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	429a      	cmp	r2, r3
 8010276:	d108      	bne.n	801028a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	685a      	ldr	r2, [r3, #4]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	441a      	add	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	441a      	add	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429a      	cmp	r2, r3
 801029c:	d118      	bne.n	80102d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	4b15      	ldr	r3, [pc, #84]	; (80102f8 <prvInsertBlockIntoFreeList+0xb0>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d00d      	beq.n	80102c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685a      	ldr	r2, [r3, #4]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	441a      	add	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	e008      	b.n	80102d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102c6:	4b0c      	ldr	r3, [pc, #48]	; (80102f8 <prvInsertBlockIntoFreeList+0xb0>)
 80102c8:	681a      	ldr	r2, [r3, #0]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	e003      	b.n	80102d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d002      	beq.n	80102e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102e6:	bf00      	nop
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	20010318 	.word	0x20010318
 80102f8:	20010320 	.word	0x20010320

080102fc <__errno>:
 80102fc:	4b01      	ldr	r3, [pc, #4]	; (8010304 <__errno+0x8>)
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	20000198 	.word	0x20000198

08010308 <__libc_init_array>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	4e0d      	ldr	r6, [pc, #52]	; (8010340 <__libc_init_array+0x38>)
 801030c:	4c0d      	ldr	r4, [pc, #52]	; (8010344 <__libc_init_array+0x3c>)
 801030e:	1ba4      	subs	r4, r4, r6
 8010310:	10a4      	asrs	r4, r4, #2
 8010312:	2500      	movs	r5, #0
 8010314:	42a5      	cmp	r5, r4
 8010316:	d109      	bne.n	801032c <__libc_init_array+0x24>
 8010318:	4e0b      	ldr	r6, [pc, #44]	; (8010348 <__libc_init_array+0x40>)
 801031a:	4c0c      	ldr	r4, [pc, #48]	; (801034c <__libc_init_array+0x44>)
 801031c:	f004 f83e 	bl	801439c <_init>
 8010320:	1ba4      	subs	r4, r4, r6
 8010322:	10a4      	asrs	r4, r4, #2
 8010324:	2500      	movs	r5, #0
 8010326:	42a5      	cmp	r5, r4
 8010328:	d105      	bne.n	8010336 <__libc_init_array+0x2e>
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010330:	4798      	blx	r3
 8010332:	3501      	adds	r5, #1
 8010334:	e7ee      	b.n	8010314 <__libc_init_array+0xc>
 8010336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801033a:	4798      	blx	r3
 801033c:	3501      	adds	r5, #1
 801033e:	e7f2      	b.n	8010326 <__libc_init_array+0x1e>
 8010340:	080153a8 	.word	0x080153a8
 8010344:	080153a8 	.word	0x080153a8
 8010348:	080153a8 	.word	0x080153a8
 801034c:	080153ac 	.word	0x080153ac

08010350 <memcpy>:
 8010350:	b510      	push	{r4, lr}
 8010352:	1e43      	subs	r3, r0, #1
 8010354:	440a      	add	r2, r1
 8010356:	4291      	cmp	r1, r2
 8010358:	d100      	bne.n	801035c <memcpy+0xc>
 801035a:	bd10      	pop	{r4, pc}
 801035c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010364:	e7f7      	b.n	8010356 <memcpy+0x6>

08010366 <memset>:
 8010366:	4402      	add	r2, r0
 8010368:	4603      	mov	r3, r0
 801036a:	4293      	cmp	r3, r2
 801036c:	d100      	bne.n	8010370 <memset+0xa>
 801036e:	4770      	bx	lr
 8010370:	f803 1b01 	strb.w	r1, [r3], #1
 8010374:	e7f9      	b.n	801036a <memset+0x4>

08010376 <__cvt>:
 8010376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010378:	ed2d 8b02 	vpush	{d8}
 801037c:	eeb0 8b40 	vmov.f64	d8, d0
 8010380:	b085      	sub	sp, #20
 8010382:	4617      	mov	r7, r2
 8010384:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010386:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010388:	ee18 2a90 	vmov	r2, s17
 801038c:	f025 0520 	bic.w	r5, r5, #32
 8010390:	2a00      	cmp	r2, #0
 8010392:	bfb6      	itet	lt
 8010394:	222d      	movlt	r2, #45	; 0x2d
 8010396:	2200      	movge	r2, #0
 8010398:	eeb1 8b40 	vneglt.f64	d8, d0
 801039c:	2d46      	cmp	r5, #70	; 0x46
 801039e:	460c      	mov	r4, r1
 80103a0:	701a      	strb	r2, [r3, #0]
 80103a2:	d004      	beq.n	80103ae <__cvt+0x38>
 80103a4:	2d45      	cmp	r5, #69	; 0x45
 80103a6:	d100      	bne.n	80103aa <__cvt+0x34>
 80103a8:	3401      	adds	r4, #1
 80103aa:	2102      	movs	r1, #2
 80103ac:	e000      	b.n	80103b0 <__cvt+0x3a>
 80103ae:	2103      	movs	r1, #3
 80103b0:	ab03      	add	r3, sp, #12
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	ab02      	add	r3, sp, #8
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	4622      	mov	r2, r4
 80103ba:	4633      	mov	r3, r6
 80103bc:	eeb0 0b48 	vmov.f64	d0, d8
 80103c0:	f001 fe42 	bl	8012048 <_dtoa_r>
 80103c4:	2d47      	cmp	r5, #71	; 0x47
 80103c6:	d101      	bne.n	80103cc <__cvt+0x56>
 80103c8:	07fb      	lsls	r3, r7, #31
 80103ca:	d51e      	bpl.n	801040a <__cvt+0x94>
 80103cc:	2d46      	cmp	r5, #70	; 0x46
 80103ce:	eb00 0304 	add.w	r3, r0, r4
 80103d2:	d10c      	bne.n	80103ee <__cvt+0x78>
 80103d4:	7802      	ldrb	r2, [r0, #0]
 80103d6:	2a30      	cmp	r2, #48	; 0x30
 80103d8:	d107      	bne.n	80103ea <__cvt+0x74>
 80103da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e2:	bf1c      	itt	ne
 80103e4:	f1c4 0401 	rsbne	r4, r4, #1
 80103e8:	6034      	strne	r4, [r6, #0]
 80103ea:	6832      	ldr	r2, [r6, #0]
 80103ec:	4413      	add	r3, r2
 80103ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	d007      	beq.n	8010408 <__cvt+0x92>
 80103f8:	2130      	movs	r1, #48	; 0x30
 80103fa:	9a03      	ldr	r2, [sp, #12]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d204      	bcs.n	801040a <__cvt+0x94>
 8010400:	1c54      	adds	r4, r2, #1
 8010402:	9403      	str	r4, [sp, #12]
 8010404:	7011      	strb	r1, [r2, #0]
 8010406:	e7f8      	b.n	80103fa <__cvt+0x84>
 8010408:	9303      	str	r3, [sp, #12]
 801040a:	9b03      	ldr	r3, [sp, #12]
 801040c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801040e:	1a1b      	subs	r3, r3, r0
 8010410:	6013      	str	r3, [r2, #0]
 8010412:	b005      	add	sp, #20
 8010414:	ecbd 8b02 	vpop	{d8}
 8010418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801041a <__exponent>:
 801041a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801041c:	2900      	cmp	r1, #0
 801041e:	4604      	mov	r4, r0
 8010420:	bfba      	itte	lt
 8010422:	4249      	neglt	r1, r1
 8010424:	232d      	movlt	r3, #45	; 0x2d
 8010426:	232b      	movge	r3, #43	; 0x2b
 8010428:	2909      	cmp	r1, #9
 801042a:	f804 2b02 	strb.w	r2, [r4], #2
 801042e:	7043      	strb	r3, [r0, #1]
 8010430:	dd20      	ble.n	8010474 <__exponent+0x5a>
 8010432:	f10d 0307 	add.w	r3, sp, #7
 8010436:	461f      	mov	r7, r3
 8010438:	260a      	movs	r6, #10
 801043a:	fb91 f5f6 	sdiv	r5, r1, r6
 801043e:	fb06 1115 	mls	r1, r6, r5, r1
 8010442:	3130      	adds	r1, #48	; 0x30
 8010444:	2d09      	cmp	r5, #9
 8010446:	f803 1c01 	strb.w	r1, [r3, #-1]
 801044a:	f103 32ff 	add.w	r2, r3, #4294967295
 801044e:	4629      	mov	r1, r5
 8010450:	dc09      	bgt.n	8010466 <__exponent+0x4c>
 8010452:	3130      	adds	r1, #48	; 0x30
 8010454:	3b02      	subs	r3, #2
 8010456:	f802 1c01 	strb.w	r1, [r2, #-1]
 801045a:	42bb      	cmp	r3, r7
 801045c:	4622      	mov	r2, r4
 801045e:	d304      	bcc.n	801046a <__exponent+0x50>
 8010460:	1a10      	subs	r0, r2, r0
 8010462:	b003      	add	sp, #12
 8010464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010466:	4613      	mov	r3, r2
 8010468:	e7e7      	b.n	801043a <__exponent+0x20>
 801046a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801046e:	f804 2b01 	strb.w	r2, [r4], #1
 8010472:	e7f2      	b.n	801045a <__exponent+0x40>
 8010474:	2330      	movs	r3, #48	; 0x30
 8010476:	4419      	add	r1, r3
 8010478:	7083      	strb	r3, [r0, #2]
 801047a:	1d02      	adds	r2, r0, #4
 801047c:	70c1      	strb	r1, [r0, #3]
 801047e:	e7ef      	b.n	8010460 <__exponent+0x46>

08010480 <_printf_float>:
 8010480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010484:	b08d      	sub	sp, #52	; 0x34
 8010486:	460c      	mov	r4, r1
 8010488:	4616      	mov	r6, r2
 801048a:	461f      	mov	r7, r3
 801048c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010490:	4605      	mov	r5, r0
 8010492:	f002 ffcb 	bl	801342c <_localeconv_r>
 8010496:	f8d0 b000 	ldr.w	fp, [r0]
 801049a:	4658      	mov	r0, fp
 801049c:	f7ef fed0 	bl	8000240 <strlen>
 80104a0:	2300      	movs	r3, #0
 80104a2:	930a      	str	r3, [sp, #40]	; 0x28
 80104a4:	f8d8 3000 	ldr.w	r3, [r8]
 80104a8:	9005      	str	r0, [sp, #20]
 80104aa:	3307      	adds	r3, #7
 80104ac:	f023 0307 	bic.w	r3, r3, #7
 80104b0:	f103 0108 	add.w	r1, r3, #8
 80104b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80104b8:	6822      	ldr	r2, [r4, #0]
 80104ba:	f8c8 1000 	str.w	r1, [r8]
 80104be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80104c6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010750 <_printf_float+0x2d0>
 80104ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80104ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80104d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80104d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104da:	dd24      	ble.n	8010526 <_printf_float+0xa6>
 80104dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80104e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e4:	d502      	bpl.n	80104ec <_printf_float+0x6c>
 80104e6:	232d      	movs	r3, #45	; 0x2d
 80104e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104ec:	499a      	ldr	r1, [pc, #616]	; (8010758 <_printf_float+0x2d8>)
 80104ee:	4b9b      	ldr	r3, [pc, #620]	; (801075c <_printf_float+0x2dc>)
 80104f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80104f4:	bf8c      	ite	hi
 80104f6:	4688      	movhi	r8, r1
 80104f8:	4698      	movls	r8, r3
 80104fa:	f022 0204 	bic.w	r2, r2, #4
 80104fe:	2303      	movs	r3, #3
 8010500:	6123      	str	r3, [r4, #16]
 8010502:	6022      	str	r2, [r4, #0]
 8010504:	f04f 0a00 	mov.w	sl, #0
 8010508:	9700      	str	r7, [sp, #0]
 801050a:	4633      	mov	r3, r6
 801050c:	aa0b      	add	r2, sp, #44	; 0x2c
 801050e:	4621      	mov	r1, r4
 8010510:	4628      	mov	r0, r5
 8010512:	f000 f9e1 	bl	80108d8 <_printf_common>
 8010516:	3001      	adds	r0, #1
 8010518:	f040 8089 	bne.w	801062e <_printf_float+0x1ae>
 801051c:	f04f 30ff 	mov.w	r0, #4294967295
 8010520:	b00d      	add	sp, #52	; 0x34
 8010522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010526:	eeb4 0b40 	vcmp.f64	d0, d0
 801052a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052e:	d702      	bvc.n	8010536 <_printf_float+0xb6>
 8010530:	498b      	ldr	r1, [pc, #556]	; (8010760 <_printf_float+0x2e0>)
 8010532:	4b8c      	ldr	r3, [pc, #560]	; (8010764 <_printf_float+0x2e4>)
 8010534:	e7dc      	b.n	80104f0 <_printf_float+0x70>
 8010536:	6861      	ldr	r1, [r4, #4]
 8010538:	1c4b      	adds	r3, r1, #1
 801053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801053e:	ab0a      	add	r3, sp, #40	; 0x28
 8010540:	a809      	add	r0, sp, #36	; 0x24
 8010542:	d13b      	bne.n	80105bc <_printf_float+0x13c>
 8010544:	2106      	movs	r1, #6
 8010546:	6061      	str	r1, [r4, #4]
 8010548:	f04f 0c00 	mov.w	ip, #0
 801054c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010550:	e9cd 0900 	strd	r0, r9, [sp]
 8010554:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010558:	6022      	str	r2, [r4, #0]
 801055a:	6861      	ldr	r1, [r4, #4]
 801055c:	4628      	mov	r0, r5
 801055e:	f7ff ff0a 	bl	8010376 <__cvt>
 8010562:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010566:	2b47      	cmp	r3, #71	; 0x47
 8010568:	4680      	mov	r8, r0
 801056a:	d109      	bne.n	8010580 <_printf_float+0x100>
 801056c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801056e:	1cd8      	adds	r0, r3, #3
 8010570:	db02      	blt.n	8010578 <_printf_float+0xf8>
 8010572:	6862      	ldr	r2, [r4, #4]
 8010574:	4293      	cmp	r3, r2
 8010576:	dd47      	ble.n	8010608 <_printf_float+0x188>
 8010578:	f1a9 0902 	sub.w	r9, r9, #2
 801057c:	fa5f f989 	uxtb.w	r9, r9
 8010580:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010586:	d824      	bhi.n	80105d2 <_printf_float+0x152>
 8010588:	3901      	subs	r1, #1
 801058a:	464a      	mov	r2, r9
 801058c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010590:	9109      	str	r1, [sp, #36]	; 0x24
 8010592:	f7ff ff42 	bl	801041a <__exponent>
 8010596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010598:	1813      	adds	r3, r2, r0
 801059a:	2a01      	cmp	r2, #1
 801059c:	4682      	mov	sl, r0
 801059e:	6123      	str	r3, [r4, #16]
 80105a0:	dc02      	bgt.n	80105a8 <_printf_float+0x128>
 80105a2:	6822      	ldr	r2, [r4, #0]
 80105a4:	07d1      	lsls	r1, r2, #31
 80105a6:	d501      	bpl.n	80105ac <_printf_float+0x12c>
 80105a8:	3301      	adds	r3, #1
 80105aa:	6123      	str	r3, [r4, #16]
 80105ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d0a9      	beq.n	8010508 <_printf_float+0x88>
 80105b4:	232d      	movs	r3, #45	; 0x2d
 80105b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105ba:	e7a5      	b.n	8010508 <_printf_float+0x88>
 80105bc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80105c0:	f000 8178 	beq.w	80108b4 <_printf_float+0x434>
 80105c4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80105c8:	d1be      	bne.n	8010548 <_printf_float+0xc8>
 80105ca:	2900      	cmp	r1, #0
 80105cc:	d1bc      	bne.n	8010548 <_printf_float+0xc8>
 80105ce:	2101      	movs	r1, #1
 80105d0:	e7b9      	b.n	8010546 <_printf_float+0xc6>
 80105d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80105d6:	d119      	bne.n	801060c <_printf_float+0x18c>
 80105d8:	2900      	cmp	r1, #0
 80105da:	6863      	ldr	r3, [r4, #4]
 80105dc:	dd0c      	ble.n	80105f8 <_printf_float+0x178>
 80105de:	6121      	str	r1, [r4, #16]
 80105e0:	b913      	cbnz	r3, 80105e8 <_printf_float+0x168>
 80105e2:	6822      	ldr	r2, [r4, #0]
 80105e4:	07d2      	lsls	r2, r2, #31
 80105e6:	d502      	bpl.n	80105ee <_printf_float+0x16e>
 80105e8:	3301      	adds	r3, #1
 80105ea:	440b      	add	r3, r1
 80105ec:	6123      	str	r3, [r4, #16]
 80105ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80105f2:	f04f 0a00 	mov.w	sl, #0
 80105f6:	e7d9      	b.n	80105ac <_printf_float+0x12c>
 80105f8:	b913      	cbnz	r3, 8010600 <_printf_float+0x180>
 80105fa:	6822      	ldr	r2, [r4, #0]
 80105fc:	07d0      	lsls	r0, r2, #31
 80105fe:	d501      	bpl.n	8010604 <_printf_float+0x184>
 8010600:	3302      	adds	r3, #2
 8010602:	e7f3      	b.n	80105ec <_printf_float+0x16c>
 8010604:	2301      	movs	r3, #1
 8010606:	e7f1      	b.n	80105ec <_printf_float+0x16c>
 8010608:	f04f 0967 	mov.w	r9, #103	; 0x67
 801060c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010610:	4293      	cmp	r3, r2
 8010612:	db05      	blt.n	8010620 <_printf_float+0x1a0>
 8010614:	6822      	ldr	r2, [r4, #0]
 8010616:	6123      	str	r3, [r4, #16]
 8010618:	07d1      	lsls	r1, r2, #31
 801061a:	d5e8      	bpl.n	80105ee <_printf_float+0x16e>
 801061c:	3301      	adds	r3, #1
 801061e:	e7e5      	b.n	80105ec <_printf_float+0x16c>
 8010620:	2b00      	cmp	r3, #0
 8010622:	bfd4      	ite	le
 8010624:	f1c3 0302 	rsble	r3, r3, #2
 8010628:	2301      	movgt	r3, #1
 801062a:	4413      	add	r3, r2
 801062c:	e7de      	b.n	80105ec <_printf_float+0x16c>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	055a      	lsls	r2, r3, #21
 8010632:	d407      	bmi.n	8010644 <_printf_float+0x1c4>
 8010634:	6923      	ldr	r3, [r4, #16]
 8010636:	4642      	mov	r2, r8
 8010638:	4631      	mov	r1, r6
 801063a:	4628      	mov	r0, r5
 801063c:	47b8      	blx	r7
 801063e:	3001      	adds	r0, #1
 8010640:	d12a      	bne.n	8010698 <_printf_float+0x218>
 8010642:	e76b      	b.n	801051c <_printf_float+0x9c>
 8010644:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010648:	f240 80de 	bls.w	8010808 <_printf_float+0x388>
 801064c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010650:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010658:	d133      	bne.n	80106c2 <_printf_float+0x242>
 801065a:	2301      	movs	r3, #1
 801065c:	4a42      	ldr	r2, [pc, #264]	; (8010768 <_printf_float+0x2e8>)
 801065e:	4631      	mov	r1, r6
 8010660:	4628      	mov	r0, r5
 8010662:	47b8      	blx	r7
 8010664:	3001      	adds	r0, #1
 8010666:	f43f af59 	beq.w	801051c <_printf_float+0x9c>
 801066a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801066e:	429a      	cmp	r2, r3
 8010670:	db02      	blt.n	8010678 <_printf_float+0x1f8>
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	07d8      	lsls	r0, r3, #31
 8010676:	d50f      	bpl.n	8010698 <_printf_float+0x218>
 8010678:	9b05      	ldr	r3, [sp, #20]
 801067a:	465a      	mov	r2, fp
 801067c:	4631      	mov	r1, r6
 801067e:	4628      	mov	r0, r5
 8010680:	47b8      	blx	r7
 8010682:	3001      	adds	r0, #1
 8010684:	f43f af4a 	beq.w	801051c <_printf_float+0x9c>
 8010688:	f04f 0800 	mov.w	r8, #0
 801068c:	f104 091a 	add.w	r9, r4, #26
 8010690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010692:	3b01      	subs	r3, #1
 8010694:	4543      	cmp	r3, r8
 8010696:	dc09      	bgt.n	80106ac <_printf_float+0x22c>
 8010698:	6823      	ldr	r3, [r4, #0]
 801069a:	079b      	lsls	r3, r3, #30
 801069c:	f100 8105 	bmi.w	80108aa <_printf_float+0x42a>
 80106a0:	68e0      	ldr	r0, [r4, #12]
 80106a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106a4:	4298      	cmp	r0, r3
 80106a6:	bfb8      	it	lt
 80106a8:	4618      	movlt	r0, r3
 80106aa:	e739      	b.n	8010520 <_printf_float+0xa0>
 80106ac:	2301      	movs	r3, #1
 80106ae:	464a      	mov	r2, r9
 80106b0:	4631      	mov	r1, r6
 80106b2:	4628      	mov	r0, r5
 80106b4:	47b8      	blx	r7
 80106b6:	3001      	adds	r0, #1
 80106b8:	f43f af30 	beq.w	801051c <_printf_float+0x9c>
 80106bc:	f108 0801 	add.w	r8, r8, #1
 80106c0:	e7e6      	b.n	8010690 <_printf_float+0x210>
 80106c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	dc2b      	bgt.n	8010720 <_printf_float+0x2a0>
 80106c8:	2301      	movs	r3, #1
 80106ca:	4a27      	ldr	r2, [pc, #156]	; (8010768 <_printf_float+0x2e8>)
 80106cc:	4631      	mov	r1, r6
 80106ce:	4628      	mov	r0, r5
 80106d0:	47b8      	blx	r7
 80106d2:	3001      	adds	r0, #1
 80106d4:	f43f af22 	beq.w	801051c <_printf_float+0x9c>
 80106d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106da:	b923      	cbnz	r3, 80106e6 <_printf_float+0x266>
 80106dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106de:	b913      	cbnz	r3, 80106e6 <_printf_float+0x266>
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	07d9      	lsls	r1, r3, #31
 80106e4:	d5d8      	bpl.n	8010698 <_printf_float+0x218>
 80106e6:	9b05      	ldr	r3, [sp, #20]
 80106e8:	465a      	mov	r2, fp
 80106ea:	4631      	mov	r1, r6
 80106ec:	4628      	mov	r0, r5
 80106ee:	47b8      	blx	r7
 80106f0:	3001      	adds	r0, #1
 80106f2:	f43f af13 	beq.w	801051c <_printf_float+0x9c>
 80106f6:	f04f 0900 	mov.w	r9, #0
 80106fa:	f104 0a1a 	add.w	sl, r4, #26
 80106fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010700:	425b      	negs	r3, r3
 8010702:	454b      	cmp	r3, r9
 8010704:	dc01      	bgt.n	801070a <_printf_float+0x28a>
 8010706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010708:	e795      	b.n	8010636 <_printf_float+0x1b6>
 801070a:	2301      	movs	r3, #1
 801070c:	4652      	mov	r2, sl
 801070e:	4631      	mov	r1, r6
 8010710:	4628      	mov	r0, r5
 8010712:	47b8      	blx	r7
 8010714:	3001      	adds	r0, #1
 8010716:	f43f af01 	beq.w	801051c <_printf_float+0x9c>
 801071a:	f109 0901 	add.w	r9, r9, #1
 801071e:	e7ee      	b.n	80106fe <_printf_float+0x27e>
 8010720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010724:	429a      	cmp	r2, r3
 8010726:	bfa8      	it	ge
 8010728:	461a      	movge	r2, r3
 801072a:	2a00      	cmp	r2, #0
 801072c:	4691      	mov	r9, r2
 801072e:	dd07      	ble.n	8010740 <_printf_float+0x2c0>
 8010730:	4613      	mov	r3, r2
 8010732:	4631      	mov	r1, r6
 8010734:	4642      	mov	r2, r8
 8010736:	4628      	mov	r0, r5
 8010738:	47b8      	blx	r7
 801073a:	3001      	adds	r0, #1
 801073c:	f43f aeee 	beq.w	801051c <_printf_float+0x9c>
 8010740:	f104 031a 	add.w	r3, r4, #26
 8010744:	f04f 0a00 	mov.w	sl, #0
 8010748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801074c:	9307      	str	r3, [sp, #28]
 801074e:	e017      	b.n	8010780 <_printf_float+0x300>
 8010750:	ffffffff 	.word	0xffffffff
 8010754:	7fefffff 	.word	0x7fefffff
 8010758:	08015088 	.word	0x08015088
 801075c:	08015084 	.word	0x08015084
 8010760:	08015090 	.word	0x08015090
 8010764:	0801508c 	.word	0x0801508c
 8010768:	08015094 	.word	0x08015094
 801076c:	2301      	movs	r3, #1
 801076e:	9a07      	ldr	r2, [sp, #28]
 8010770:	4631      	mov	r1, r6
 8010772:	4628      	mov	r0, r5
 8010774:	47b8      	blx	r7
 8010776:	3001      	adds	r0, #1
 8010778:	f43f aed0 	beq.w	801051c <_printf_float+0x9c>
 801077c:	f10a 0a01 	add.w	sl, sl, #1
 8010780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010782:	9306      	str	r3, [sp, #24]
 8010784:	eba3 0309 	sub.w	r3, r3, r9
 8010788:	4553      	cmp	r3, sl
 801078a:	dcef      	bgt.n	801076c <_printf_float+0x2ec>
 801078c:	9b06      	ldr	r3, [sp, #24]
 801078e:	4498      	add	r8, r3
 8010790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010794:	429a      	cmp	r2, r3
 8010796:	db15      	blt.n	80107c4 <_printf_float+0x344>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	07da      	lsls	r2, r3, #31
 801079c:	d412      	bmi.n	80107c4 <_printf_float+0x344>
 801079e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107a0:	9a06      	ldr	r2, [sp, #24]
 80107a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107a4:	1a9a      	subs	r2, r3, r2
 80107a6:	eba3 0a01 	sub.w	sl, r3, r1
 80107aa:	4592      	cmp	sl, r2
 80107ac:	bfa8      	it	ge
 80107ae:	4692      	movge	sl, r2
 80107b0:	f1ba 0f00 	cmp.w	sl, #0
 80107b4:	dc0e      	bgt.n	80107d4 <_printf_float+0x354>
 80107b6:	f04f 0800 	mov.w	r8, #0
 80107ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107be:	f104 091a 	add.w	r9, r4, #26
 80107c2:	e019      	b.n	80107f8 <_printf_float+0x378>
 80107c4:	9b05      	ldr	r3, [sp, #20]
 80107c6:	465a      	mov	r2, fp
 80107c8:	4631      	mov	r1, r6
 80107ca:	4628      	mov	r0, r5
 80107cc:	47b8      	blx	r7
 80107ce:	3001      	adds	r0, #1
 80107d0:	d1e5      	bne.n	801079e <_printf_float+0x31e>
 80107d2:	e6a3      	b.n	801051c <_printf_float+0x9c>
 80107d4:	4653      	mov	r3, sl
 80107d6:	4642      	mov	r2, r8
 80107d8:	4631      	mov	r1, r6
 80107da:	4628      	mov	r0, r5
 80107dc:	47b8      	blx	r7
 80107de:	3001      	adds	r0, #1
 80107e0:	d1e9      	bne.n	80107b6 <_printf_float+0x336>
 80107e2:	e69b      	b.n	801051c <_printf_float+0x9c>
 80107e4:	2301      	movs	r3, #1
 80107e6:	464a      	mov	r2, r9
 80107e8:	4631      	mov	r1, r6
 80107ea:	4628      	mov	r0, r5
 80107ec:	47b8      	blx	r7
 80107ee:	3001      	adds	r0, #1
 80107f0:	f43f ae94 	beq.w	801051c <_printf_float+0x9c>
 80107f4:	f108 0801 	add.w	r8, r8, #1
 80107f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107fc:	1a9b      	subs	r3, r3, r2
 80107fe:	eba3 030a 	sub.w	r3, r3, sl
 8010802:	4543      	cmp	r3, r8
 8010804:	dcee      	bgt.n	80107e4 <_printf_float+0x364>
 8010806:	e747      	b.n	8010698 <_printf_float+0x218>
 8010808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801080a:	2a01      	cmp	r2, #1
 801080c:	dc01      	bgt.n	8010812 <_printf_float+0x392>
 801080e:	07db      	lsls	r3, r3, #31
 8010810:	d539      	bpl.n	8010886 <_printf_float+0x406>
 8010812:	2301      	movs	r3, #1
 8010814:	4642      	mov	r2, r8
 8010816:	4631      	mov	r1, r6
 8010818:	4628      	mov	r0, r5
 801081a:	47b8      	blx	r7
 801081c:	3001      	adds	r0, #1
 801081e:	f43f ae7d 	beq.w	801051c <_printf_float+0x9c>
 8010822:	9b05      	ldr	r3, [sp, #20]
 8010824:	465a      	mov	r2, fp
 8010826:	4631      	mov	r1, r6
 8010828:	4628      	mov	r0, r5
 801082a:	47b8      	blx	r7
 801082c:	3001      	adds	r0, #1
 801082e:	f108 0801 	add.w	r8, r8, #1
 8010832:	f43f ae73 	beq.w	801051c <_printf_float+0x9c>
 8010836:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801083a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801083c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010844:	f103 33ff 	add.w	r3, r3, #4294967295
 8010848:	d018      	beq.n	801087c <_printf_float+0x3fc>
 801084a:	4642      	mov	r2, r8
 801084c:	4631      	mov	r1, r6
 801084e:	4628      	mov	r0, r5
 8010850:	47b8      	blx	r7
 8010852:	3001      	adds	r0, #1
 8010854:	d10e      	bne.n	8010874 <_printf_float+0x3f4>
 8010856:	e661      	b.n	801051c <_printf_float+0x9c>
 8010858:	2301      	movs	r3, #1
 801085a:	464a      	mov	r2, r9
 801085c:	4631      	mov	r1, r6
 801085e:	4628      	mov	r0, r5
 8010860:	47b8      	blx	r7
 8010862:	3001      	adds	r0, #1
 8010864:	f43f ae5a 	beq.w	801051c <_printf_float+0x9c>
 8010868:	f108 0801 	add.w	r8, r8, #1
 801086c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801086e:	3b01      	subs	r3, #1
 8010870:	4543      	cmp	r3, r8
 8010872:	dcf1      	bgt.n	8010858 <_printf_float+0x3d8>
 8010874:	4653      	mov	r3, sl
 8010876:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801087a:	e6dd      	b.n	8010638 <_printf_float+0x1b8>
 801087c:	f04f 0800 	mov.w	r8, #0
 8010880:	f104 091a 	add.w	r9, r4, #26
 8010884:	e7f2      	b.n	801086c <_printf_float+0x3ec>
 8010886:	2301      	movs	r3, #1
 8010888:	e7df      	b.n	801084a <_printf_float+0x3ca>
 801088a:	2301      	movs	r3, #1
 801088c:	464a      	mov	r2, r9
 801088e:	4631      	mov	r1, r6
 8010890:	4628      	mov	r0, r5
 8010892:	47b8      	blx	r7
 8010894:	3001      	adds	r0, #1
 8010896:	f43f ae41 	beq.w	801051c <_printf_float+0x9c>
 801089a:	f108 0801 	add.w	r8, r8, #1
 801089e:	68e3      	ldr	r3, [r4, #12]
 80108a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108a2:	1a9b      	subs	r3, r3, r2
 80108a4:	4543      	cmp	r3, r8
 80108a6:	dcf0      	bgt.n	801088a <_printf_float+0x40a>
 80108a8:	e6fa      	b.n	80106a0 <_printf_float+0x220>
 80108aa:	f04f 0800 	mov.w	r8, #0
 80108ae:	f104 0919 	add.w	r9, r4, #25
 80108b2:	e7f4      	b.n	801089e <_printf_float+0x41e>
 80108b4:	2900      	cmp	r1, #0
 80108b6:	f43f ae8a 	beq.w	80105ce <_printf_float+0x14e>
 80108ba:	f04f 0c00 	mov.w	ip, #0
 80108be:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80108c2:	e9cd 0900 	strd	r0, r9, [sp]
 80108c6:	6022      	str	r2, [r4, #0]
 80108c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108cc:	4628      	mov	r0, r5
 80108ce:	f7ff fd52 	bl	8010376 <__cvt>
 80108d2:	4680      	mov	r8, r0
 80108d4:	e64a      	b.n	801056c <_printf_float+0xec>
 80108d6:	bf00      	nop

080108d8 <_printf_common>:
 80108d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108dc:	4691      	mov	r9, r2
 80108de:	461f      	mov	r7, r3
 80108e0:	688a      	ldr	r2, [r1, #8]
 80108e2:	690b      	ldr	r3, [r1, #16]
 80108e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108e8:	4293      	cmp	r3, r2
 80108ea:	bfb8      	it	lt
 80108ec:	4613      	movlt	r3, r2
 80108ee:	f8c9 3000 	str.w	r3, [r9]
 80108f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108f6:	4606      	mov	r6, r0
 80108f8:	460c      	mov	r4, r1
 80108fa:	b112      	cbz	r2, 8010902 <_printf_common+0x2a>
 80108fc:	3301      	adds	r3, #1
 80108fe:	f8c9 3000 	str.w	r3, [r9]
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	0699      	lsls	r1, r3, #26
 8010906:	bf42      	ittt	mi
 8010908:	f8d9 3000 	ldrmi.w	r3, [r9]
 801090c:	3302      	addmi	r3, #2
 801090e:	f8c9 3000 	strmi.w	r3, [r9]
 8010912:	6825      	ldr	r5, [r4, #0]
 8010914:	f015 0506 	ands.w	r5, r5, #6
 8010918:	d107      	bne.n	801092a <_printf_common+0x52>
 801091a:	f104 0a19 	add.w	sl, r4, #25
 801091e:	68e3      	ldr	r3, [r4, #12]
 8010920:	f8d9 2000 	ldr.w	r2, [r9]
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	42ab      	cmp	r3, r5
 8010928:	dc28      	bgt.n	801097c <_printf_common+0xa4>
 801092a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801092e:	6822      	ldr	r2, [r4, #0]
 8010930:	3300      	adds	r3, #0
 8010932:	bf18      	it	ne
 8010934:	2301      	movne	r3, #1
 8010936:	0692      	lsls	r2, r2, #26
 8010938:	d42d      	bmi.n	8010996 <_printf_common+0xbe>
 801093a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801093e:	4639      	mov	r1, r7
 8010940:	4630      	mov	r0, r6
 8010942:	47c0      	blx	r8
 8010944:	3001      	adds	r0, #1
 8010946:	d020      	beq.n	801098a <_printf_common+0xb2>
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	68e5      	ldr	r5, [r4, #12]
 801094c:	f8d9 2000 	ldr.w	r2, [r9]
 8010950:	f003 0306 	and.w	r3, r3, #6
 8010954:	2b04      	cmp	r3, #4
 8010956:	bf08      	it	eq
 8010958:	1aad      	subeq	r5, r5, r2
 801095a:	68a3      	ldr	r3, [r4, #8]
 801095c:	6922      	ldr	r2, [r4, #16]
 801095e:	bf0c      	ite	eq
 8010960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010964:	2500      	movne	r5, #0
 8010966:	4293      	cmp	r3, r2
 8010968:	bfc4      	itt	gt
 801096a:	1a9b      	subgt	r3, r3, r2
 801096c:	18ed      	addgt	r5, r5, r3
 801096e:	f04f 0900 	mov.w	r9, #0
 8010972:	341a      	adds	r4, #26
 8010974:	454d      	cmp	r5, r9
 8010976:	d11a      	bne.n	80109ae <_printf_common+0xd6>
 8010978:	2000      	movs	r0, #0
 801097a:	e008      	b.n	801098e <_printf_common+0xb6>
 801097c:	2301      	movs	r3, #1
 801097e:	4652      	mov	r2, sl
 8010980:	4639      	mov	r1, r7
 8010982:	4630      	mov	r0, r6
 8010984:	47c0      	blx	r8
 8010986:	3001      	adds	r0, #1
 8010988:	d103      	bne.n	8010992 <_printf_common+0xba>
 801098a:	f04f 30ff 	mov.w	r0, #4294967295
 801098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010992:	3501      	adds	r5, #1
 8010994:	e7c3      	b.n	801091e <_printf_common+0x46>
 8010996:	18e1      	adds	r1, r4, r3
 8010998:	1c5a      	adds	r2, r3, #1
 801099a:	2030      	movs	r0, #48	; 0x30
 801099c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109a0:	4422      	add	r2, r4
 80109a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109aa:	3302      	adds	r3, #2
 80109ac:	e7c5      	b.n	801093a <_printf_common+0x62>
 80109ae:	2301      	movs	r3, #1
 80109b0:	4622      	mov	r2, r4
 80109b2:	4639      	mov	r1, r7
 80109b4:	4630      	mov	r0, r6
 80109b6:	47c0      	blx	r8
 80109b8:	3001      	adds	r0, #1
 80109ba:	d0e6      	beq.n	801098a <_printf_common+0xb2>
 80109bc:	f109 0901 	add.w	r9, r9, #1
 80109c0:	e7d8      	b.n	8010974 <_printf_common+0x9c>
	...

080109c4 <_printf_i>:
 80109c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80109cc:	460c      	mov	r4, r1
 80109ce:	7e09      	ldrb	r1, [r1, #24]
 80109d0:	b085      	sub	sp, #20
 80109d2:	296e      	cmp	r1, #110	; 0x6e
 80109d4:	4617      	mov	r7, r2
 80109d6:	4606      	mov	r6, r0
 80109d8:	4698      	mov	r8, r3
 80109da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109dc:	f000 80b3 	beq.w	8010b46 <_printf_i+0x182>
 80109e0:	d822      	bhi.n	8010a28 <_printf_i+0x64>
 80109e2:	2963      	cmp	r1, #99	; 0x63
 80109e4:	d036      	beq.n	8010a54 <_printf_i+0x90>
 80109e6:	d80a      	bhi.n	80109fe <_printf_i+0x3a>
 80109e8:	2900      	cmp	r1, #0
 80109ea:	f000 80b9 	beq.w	8010b60 <_printf_i+0x19c>
 80109ee:	2958      	cmp	r1, #88	; 0x58
 80109f0:	f000 8083 	beq.w	8010afa <_printf_i+0x136>
 80109f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80109fc:	e032      	b.n	8010a64 <_printf_i+0xa0>
 80109fe:	2964      	cmp	r1, #100	; 0x64
 8010a00:	d001      	beq.n	8010a06 <_printf_i+0x42>
 8010a02:	2969      	cmp	r1, #105	; 0x69
 8010a04:	d1f6      	bne.n	80109f4 <_printf_i+0x30>
 8010a06:	6820      	ldr	r0, [r4, #0]
 8010a08:	6813      	ldr	r3, [r2, #0]
 8010a0a:	0605      	lsls	r5, r0, #24
 8010a0c:	f103 0104 	add.w	r1, r3, #4
 8010a10:	d52a      	bpl.n	8010a68 <_printf_i+0xa4>
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	6011      	str	r1, [r2, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	da03      	bge.n	8010a22 <_printf_i+0x5e>
 8010a1a:	222d      	movs	r2, #45	; 0x2d
 8010a1c:	425b      	negs	r3, r3
 8010a1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010a22:	486f      	ldr	r0, [pc, #444]	; (8010be0 <_printf_i+0x21c>)
 8010a24:	220a      	movs	r2, #10
 8010a26:	e039      	b.n	8010a9c <_printf_i+0xd8>
 8010a28:	2973      	cmp	r1, #115	; 0x73
 8010a2a:	f000 809d 	beq.w	8010b68 <_printf_i+0x1a4>
 8010a2e:	d808      	bhi.n	8010a42 <_printf_i+0x7e>
 8010a30:	296f      	cmp	r1, #111	; 0x6f
 8010a32:	d020      	beq.n	8010a76 <_printf_i+0xb2>
 8010a34:	2970      	cmp	r1, #112	; 0x70
 8010a36:	d1dd      	bne.n	80109f4 <_printf_i+0x30>
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	f043 0320 	orr.w	r3, r3, #32
 8010a3e:	6023      	str	r3, [r4, #0]
 8010a40:	e003      	b.n	8010a4a <_printf_i+0x86>
 8010a42:	2975      	cmp	r1, #117	; 0x75
 8010a44:	d017      	beq.n	8010a76 <_printf_i+0xb2>
 8010a46:	2978      	cmp	r1, #120	; 0x78
 8010a48:	d1d4      	bne.n	80109f4 <_printf_i+0x30>
 8010a4a:	2378      	movs	r3, #120	; 0x78
 8010a4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a50:	4864      	ldr	r0, [pc, #400]	; (8010be4 <_printf_i+0x220>)
 8010a52:	e055      	b.n	8010b00 <_printf_i+0x13c>
 8010a54:	6813      	ldr	r3, [r2, #0]
 8010a56:	1d19      	adds	r1, r3, #4
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	6011      	str	r1, [r2, #0]
 8010a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a64:	2301      	movs	r3, #1
 8010a66:	e08c      	b.n	8010b82 <_printf_i+0x1be>
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	6011      	str	r1, [r2, #0]
 8010a6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a70:	bf18      	it	ne
 8010a72:	b21b      	sxthne	r3, r3
 8010a74:	e7cf      	b.n	8010a16 <_printf_i+0x52>
 8010a76:	6813      	ldr	r3, [r2, #0]
 8010a78:	6825      	ldr	r5, [r4, #0]
 8010a7a:	1d18      	adds	r0, r3, #4
 8010a7c:	6010      	str	r0, [r2, #0]
 8010a7e:	0628      	lsls	r0, r5, #24
 8010a80:	d501      	bpl.n	8010a86 <_printf_i+0xc2>
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	e002      	b.n	8010a8c <_printf_i+0xc8>
 8010a86:	0668      	lsls	r0, r5, #25
 8010a88:	d5fb      	bpl.n	8010a82 <_printf_i+0xbe>
 8010a8a:	881b      	ldrh	r3, [r3, #0]
 8010a8c:	4854      	ldr	r0, [pc, #336]	; (8010be0 <_printf_i+0x21c>)
 8010a8e:	296f      	cmp	r1, #111	; 0x6f
 8010a90:	bf14      	ite	ne
 8010a92:	220a      	movne	r2, #10
 8010a94:	2208      	moveq	r2, #8
 8010a96:	2100      	movs	r1, #0
 8010a98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a9c:	6865      	ldr	r5, [r4, #4]
 8010a9e:	60a5      	str	r5, [r4, #8]
 8010aa0:	2d00      	cmp	r5, #0
 8010aa2:	f2c0 8095 	blt.w	8010bd0 <_printf_i+0x20c>
 8010aa6:	6821      	ldr	r1, [r4, #0]
 8010aa8:	f021 0104 	bic.w	r1, r1, #4
 8010aac:	6021      	str	r1, [r4, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d13d      	bne.n	8010b2e <_printf_i+0x16a>
 8010ab2:	2d00      	cmp	r5, #0
 8010ab4:	f040 808e 	bne.w	8010bd4 <_printf_i+0x210>
 8010ab8:	4665      	mov	r5, ip
 8010aba:	2a08      	cmp	r2, #8
 8010abc:	d10b      	bne.n	8010ad6 <_printf_i+0x112>
 8010abe:	6823      	ldr	r3, [r4, #0]
 8010ac0:	07db      	lsls	r3, r3, #31
 8010ac2:	d508      	bpl.n	8010ad6 <_printf_i+0x112>
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	6862      	ldr	r2, [r4, #4]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	bfde      	ittt	le
 8010acc:	2330      	movle	r3, #48	; 0x30
 8010ace:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ad2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ad6:	ebac 0305 	sub.w	r3, ip, r5
 8010ada:	6123      	str	r3, [r4, #16]
 8010adc:	f8cd 8000 	str.w	r8, [sp]
 8010ae0:	463b      	mov	r3, r7
 8010ae2:	aa03      	add	r2, sp, #12
 8010ae4:	4621      	mov	r1, r4
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f7ff fef6 	bl	80108d8 <_printf_common>
 8010aec:	3001      	adds	r0, #1
 8010aee:	d14d      	bne.n	8010b8c <_printf_i+0x1c8>
 8010af0:	f04f 30ff 	mov.w	r0, #4294967295
 8010af4:	b005      	add	sp, #20
 8010af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010afa:	4839      	ldr	r0, [pc, #228]	; (8010be0 <_printf_i+0x21c>)
 8010afc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010b00:	6813      	ldr	r3, [r2, #0]
 8010b02:	6821      	ldr	r1, [r4, #0]
 8010b04:	1d1d      	adds	r5, r3, #4
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	6015      	str	r5, [r2, #0]
 8010b0a:	060a      	lsls	r2, r1, #24
 8010b0c:	d50b      	bpl.n	8010b26 <_printf_i+0x162>
 8010b0e:	07ca      	lsls	r2, r1, #31
 8010b10:	bf44      	itt	mi
 8010b12:	f041 0120 	orrmi.w	r1, r1, #32
 8010b16:	6021      	strmi	r1, [r4, #0]
 8010b18:	b91b      	cbnz	r3, 8010b22 <_printf_i+0x15e>
 8010b1a:	6822      	ldr	r2, [r4, #0]
 8010b1c:	f022 0220 	bic.w	r2, r2, #32
 8010b20:	6022      	str	r2, [r4, #0]
 8010b22:	2210      	movs	r2, #16
 8010b24:	e7b7      	b.n	8010a96 <_printf_i+0xd2>
 8010b26:	064d      	lsls	r5, r1, #25
 8010b28:	bf48      	it	mi
 8010b2a:	b29b      	uxthmi	r3, r3
 8010b2c:	e7ef      	b.n	8010b0e <_printf_i+0x14a>
 8010b2e:	4665      	mov	r5, ip
 8010b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b34:	fb02 3311 	mls	r3, r2, r1, r3
 8010b38:	5cc3      	ldrb	r3, [r0, r3]
 8010b3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b3e:	460b      	mov	r3, r1
 8010b40:	2900      	cmp	r1, #0
 8010b42:	d1f5      	bne.n	8010b30 <_printf_i+0x16c>
 8010b44:	e7b9      	b.n	8010aba <_printf_i+0xf6>
 8010b46:	6813      	ldr	r3, [r2, #0]
 8010b48:	6825      	ldr	r5, [r4, #0]
 8010b4a:	6961      	ldr	r1, [r4, #20]
 8010b4c:	1d18      	adds	r0, r3, #4
 8010b4e:	6010      	str	r0, [r2, #0]
 8010b50:	0628      	lsls	r0, r5, #24
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	d501      	bpl.n	8010b5a <_printf_i+0x196>
 8010b56:	6019      	str	r1, [r3, #0]
 8010b58:	e002      	b.n	8010b60 <_printf_i+0x19c>
 8010b5a:	066a      	lsls	r2, r5, #25
 8010b5c:	d5fb      	bpl.n	8010b56 <_printf_i+0x192>
 8010b5e:	8019      	strh	r1, [r3, #0]
 8010b60:	2300      	movs	r3, #0
 8010b62:	6123      	str	r3, [r4, #16]
 8010b64:	4665      	mov	r5, ip
 8010b66:	e7b9      	b.n	8010adc <_printf_i+0x118>
 8010b68:	6813      	ldr	r3, [r2, #0]
 8010b6a:	1d19      	adds	r1, r3, #4
 8010b6c:	6011      	str	r1, [r2, #0]
 8010b6e:	681d      	ldr	r5, [r3, #0]
 8010b70:	6862      	ldr	r2, [r4, #4]
 8010b72:	2100      	movs	r1, #0
 8010b74:	4628      	mov	r0, r5
 8010b76:	f7ef fb6b 	bl	8000250 <memchr>
 8010b7a:	b108      	cbz	r0, 8010b80 <_printf_i+0x1bc>
 8010b7c:	1b40      	subs	r0, r0, r5
 8010b7e:	6060      	str	r0, [r4, #4]
 8010b80:	6863      	ldr	r3, [r4, #4]
 8010b82:	6123      	str	r3, [r4, #16]
 8010b84:	2300      	movs	r3, #0
 8010b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b8a:	e7a7      	b.n	8010adc <_printf_i+0x118>
 8010b8c:	6923      	ldr	r3, [r4, #16]
 8010b8e:	462a      	mov	r2, r5
 8010b90:	4639      	mov	r1, r7
 8010b92:	4630      	mov	r0, r6
 8010b94:	47c0      	blx	r8
 8010b96:	3001      	adds	r0, #1
 8010b98:	d0aa      	beq.n	8010af0 <_printf_i+0x12c>
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	079b      	lsls	r3, r3, #30
 8010b9e:	d413      	bmi.n	8010bc8 <_printf_i+0x204>
 8010ba0:	68e0      	ldr	r0, [r4, #12]
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	4298      	cmp	r0, r3
 8010ba6:	bfb8      	it	lt
 8010ba8:	4618      	movlt	r0, r3
 8010baa:	e7a3      	b.n	8010af4 <_printf_i+0x130>
 8010bac:	2301      	movs	r3, #1
 8010bae:	464a      	mov	r2, r9
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	47c0      	blx	r8
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	d09a      	beq.n	8010af0 <_printf_i+0x12c>
 8010bba:	3501      	adds	r5, #1
 8010bbc:	68e3      	ldr	r3, [r4, #12]
 8010bbe:	9a03      	ldr	r2, [sp, #12]
 8010bc0:	1a9b      	subs	r3, r3, r2
 8010bc2:	42ab      	cmp	r3, r5
 8010bc4:	dcf2      	bgt.n	8010bac <_printf_i+0x1e8>
 8010bc6:	e7eb      	b.n	8010ba0 <_printf_i+0x1dc>
 8010bc8:	2500      	movs	r5, #0
 8010bca:	f104 0919 	add.w	r9, r4, #25
 8010bce:	e7f5      	b.n	8010bbc <_printf_i+0x1f8>
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d1ac      	bne.n	8010b2e <_printf_i+0x16a>
 8010bd4:	7803      	ldrb	r3, [r0, #0]
 8010bd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bde:	e76c      	b.n	8010aba <_printf_i+0xf6>
 8010be0:	08015096 	.word	0x08015096
 8010be4:	080150a7 	.word	0x080150a7

08010be8 <_scanf_float>:
 8010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bec:	469a      	mov	sl, r3
 8010bee:	688b      	ldr	r3, [r1, #8]
 8010bf0:	4616      	mov	r6, r2
 8010bf2:	1e5a      	subs	r2, r3, #1
 8010bf4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010bf8:	b087      	sub	sp, #28
 8010bfa:	bf83      	ittte	hi
 8010bfc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010c00:	189b      	addhi	r3, r3, r2
 8010c02:	9301      	strhi	r3, [sp, #4]
 8010c04:	2300      	movls	r3, #0
 8010c06:	bf86      	itte	hi
 8010c08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c0c:	608b      	strhi	r3, [r1, #8]
 8010c0e:	9301      	strls	r3, [sp, #4]
 8010c10:	680b      	ldr	r3, [r1, #0]
 8010c12:	4688      	mov	r8, r1
 8010c14:	f04f 0b00 	mov.w	fp, #0
 8010c18:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010c1c:	f848 3b1c 	str.w	r3, [r8], #28
 8010c20:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010c24:	4607      	mov	r7, r0
 8010c26:	460c      	mov	r4, r1
 8010c28:	4645      	mov	r5, r8
 8010c2a:	465a      	mov	r2, fp
 8010c2c:	46d9      	mov	r9, fp
 8010c2e:	f8cd b008 	str.w	fp, [sp, #8]
 8010c32:	68a1      	ldr	r1, [r4, #8]
 8010c34:	b181      	cbz	r1, 8010c58 <_scanf_float+0x70>
 8010c36:	6833      	ldr	r3, [r6, #0]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	2b49      	cmp	r3, #73	; 0x49
 8010c3c:	d071      	beq.n	8010d22 <_scanf_float+0x13a>
 8010c3e:	d84d      	bhi.n	8010cdc <_scanf_float+0xf4>
 8010c40:	2b39      	cmp	r3, #57	; 0x39
 8010c42:	d840      	bhi.n	8010cc6 <_scanf_float+0xde>
 8010c44:	2b31      	cmp	r3, #49	; 0x31
 8010c46:	f080 8088 	bcs.w	8010d5a <_scanf_float+0x172>
 8010c4a:	2b2d      	cmp	r3, #45	; 0x2d
 8010c4c:	f000 8090 	beq.w	8010d70 <_scanf_float+0x188>
 8010c50:	d815      	bhi.n	8010c7e <_scanf_float+0x96>
 8010c52:	2b2b      	cmp	r3, #43	; 0x2b
 8010c54:	f000 808c 	beq.w	8010d70 <_scanf_float+0x188>
 8010c58:	f1b9 0f00 	cmp.w	r9, #0
 8010c5c:	d003      	beq.n	8010c66 <_scanf_float+0x7e>
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	3a01      	subs	r2, #1
 8010c68:	2a01      	cmp	r2, #1
 8010c6a:	f200 80ea 	bhi.w	8010e42 <_scanf_float+0x25a>
 8010c6e:	4545      	cmp	r5, r8
 8010c70:	f200 80dc 	bhi.w	8010e2c <_scanf_float+0x244>
 8010c74:	2601      	movs	r6, #1
 8010c76:	4630      	mov	r0, r6
 8010c78:	b007      	add	sp, #28
 8010c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8010c80:	f000 809f 	beq.w	8010dc2 <_scanf_float+0x1da>
 8010c84:	2b30      	cmp	r3, #48	; 0x30
 8010c86:	d1e7      	bne.n	8010c58 <_scanf_float+0x70>
 8010c88:	6820      	ldr	r0, [r4, #0]
 8010c8a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010c8e:	d064      	beq.n	8010d5a <_scanf_float+0x172>
 8010c90:	9b01      	ldr	r3, [sp, #4]
 8010c92:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010c96:	6020      	str	r0, [r4, #0]
 8010c98:	f109 0901 	add.w	r9, r9, #1
 8010c9c:	b11b      	cbz	r3, 8010ca6 <_scanf_float+0xbe>
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	3101      	adds	r1, #1
 8010ca2:	9301      	str	r3, [sp, #4]
 8010ca4:	60a1      	str	r1, [r4, #8]
 8010ca6:	68a3      	ldr	r3, [r4, #8]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	60a3      	str	r3, [r4, #8]
 8010cac:	6923      	ldr	r3, [r4, #16]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	6123      	str	r3, [r4, #16]
 8010cb2:	6873      	ldr	r3, [r6, #4]
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	6073      	str	r3, [r6, #4]
 8010cba:	f340 80ac 	ble.w	8010e16 <_scanf_float+0x22e>
 8010cbe:	6833      	ldr	r3, [r6, #0]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	6033      	str	r3, [r6, #0]
 8010cc4:	e7b5      	b.n	8010c32 <_scanf_float+0x4a>
 8010cc6:	2b45      	cmp	r3, #69	; 0x45
 8010cc8:	f000 8085 	beq.w	8010dd6 <_scanf_float+0x1ee>
 8010ccc:	2b46      	cmp	r3, #70	; 0x46
 8010cce:	d06a      	beq.n	8010da6 <_scanf_float+0x1be>
 8010cd0:	2b41      	cmp	r3, #65	; 0x41
 8010cd2:	d1c1      	bne.n	8010c58 <_scanf_float+0x70>
 8010cd4:	2a01      	cmp	r2, #1
 8010cd6:	d1bf      	bne.n	8010c58 <_scanf_float+0x70>
 8010cd8:	2202      	movs	r2, #2
 8010cda:	e046      	b.n	8010d6a <_scanf_float+0x182>
 8010cdc:	2b65      	cmp	r3, #101	; 0x65
 8010cde:	d07a      	beq.n	8010dd6 <_scanf_float+0x1ee>
 8010ce0:	d818      	bhi.n	8010d14 <_scanf_float+0x12c>
 8010ce2:	2b54      	cmp	r3, #84	; 0x54
 8010ce4:	d066      	beq.n	8010db4 <_scanf_float+0x1cc>
 8010ce6:	d811      	bhi.n	8010d0c <_scanf_float+0x124>
 8010ce8:	2b4e      	cmp	r3, #78	; 0x4e
 8010cea:	d1b5      	bne.n	8010c58 <_scanf_float+0x70>
 8010cec:	2a00      	cmp	r2, #0
 8010cee:	d146      	bne.n	8010d7e <_scanf_float+0x196>
 8010cf0:	f1b9 0f00 	cmp.w	r9, #0
 8010cf4:	d145      	bne.n	8010d82 <_scanf_float+0x19a>
 8010cf6:	6821      	ldr	r1, [r4, #0]
 8010cf8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010cfc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010d00:	d13f      	bne.n	8010d82 <_scanf_float+0x19a>
 8010d02:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010d06:	6021      	str	r1, [r4, #0]
 8010d08:	2201      	movs	r2, #1
 8010d0a:	e02e      	b.n	8010d6a <_scanf_float+0x182>
 8010d0c:	2b59      	cmp	r3, #89	; 0x59
 8010d0e:	d01e      	beq.n	8010d4e <_scanf_float+0x166>
 8010d10:	2b61      	cmp	r3, #97	; 0x61
 8010d12:	e7de      	b.n	8010cd2 <_scanf_float+0xea>
 8010d14:	2b6e      	cmp	r3, #110	; 0x6e
 8010d16:	d0e9      	beq.n	8010cec <_scanf_float+0x104>
 8010d18:	d815      	bhi.n	8010d46 <_scanf_float+0x15e>
 8010d1a:	2b66      	cmp	r3, #102	; 0x66
 8010d1c:	d043      	beq.n	8010da6 <_scanf_float+0x1be>
 8010d1e:	2b69      	cmp	r3, #105	; 0x69
 8010d20:	d19a      	bne.n	8010c58 <_scanf_float+0x70>
 8010d22:	f1bb 0f00 	cmp.w	fp, #0
 8010d26:	d138      	bne.n	8010d9a <_scanf_float+0x1b2>
 8010d28:	f1b9 0f00 	cmp.w	r9, #0
 8010d2c:	d197      	bne.n	8010c5e <_scanf_float+0x76>
 8010d2e:	6821      	ldr	r1, [r4, #0]
 8010d30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010d34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010d38:	d195      	bne.n	8010c66 <_scanf_float+0x7e>
 8010d3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010d3e:	6021      	str	r1, [r4, #0]
 8010d40:	f04f 0b01 	mov.w	fp, #1
 8010d44:	e011      	b.n	8010d6a <_scanf_float+0x182>
 8010d46:	2b74      	cmp	r3, #116	; 0x74
 8010d48:	d034      	beq.n	8010db4 <_scanf_float+0x1cc>
 8010d4a:	2b79      	cmp	r3, #121	; 0x79
 8010d4c:	d184      	bne.n	8010c58 <_scanf_float+0x70>
 8010d4e:	f1bb 0f07 	cmp.w	fp, #7
 8010d52:	d181      	bne.n	8010c58 <_scanf_float+0x70>
 8010d54:	f04f 0b08 	mov.w	fp, #8
 8010d58:	e007      	b.n	8010d6a <_scanf_float+0x182>
 8010d5a:	eb12 0f0b 	cmn.w	r2, fp
 8010d5e:	f47f af7b 	bne.w	8010c58 <_scanf_float+0x70>
 8010d62:	6821      	ldr	r1, [r4, #0]
 8010d64:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010d68:	6021      	str	r1, [r4, #0]
 8010d6a:	702b      	strb	r3, [r5, #0]
 8010d6c:	3501      	adds	r5, #1
 8010d6e:	e79a      	b.n	8010ca6 <_scanf_float+0xbe>
 8010d70:	6821      	ldr	r1, [r4, #0]
 8010d72:	0608      	lsls	r0, r1, #24
 8010d74:	f57f af70 	bpl.w	8010c58 <_scanf_float+0x70>
 8010d78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010d7c:	e7f4      	b.n	8010d68 <_scanf_float+0x180>
 8010d7e:	2a02      	cmp	r2, #2
 8010d80:	d047      	beq.n	8010e12 <_scanf_float+0x22a>
 8010d82:	f1bb 0f01 	cmp.w	fp, #1
 8010d86:	d003      	beq.n	8010d90 <_scanf_float+0x1a8>
 8010d88:	f1bb 0f04 	cmp.w	fp, #4
 8010d8c:	f47f af64 	bne.w	8010c58 <_scanf_float+0x70>
 8010d90:	f10b 0b01 	add.w	fp, fp, #1
 8010d94:	fa5f fb8b 	uxtb.w	fp, fp
 8010d98:	e7e7      	b.n	8010d6a <_scanf_float+0x182>
 8010d9a:	f1bb 0f03 	cmp.w	fp, #3
 8010d9e:	d0f7      	beq.n	8010d90 <_scanf_float+0x1a8>
 8010da0:	f1bb 0f05 	cmp.w	fp, #5
 8010da4:	e7f2      	b.n	8010d8c <_scanf_float+0x1a4>
 8010da6:	f1bb 0f02 	cmp.w	fp, #2
 8010daa:	f47f af55 	bne.w	8010c58 <_scanf_float+0x70>
 8010dae:	f04f 0b03 	mov.w	fp, #3
 8010db2:	e7da      	b.n	8010d6a <_scanf_float+0x182>
 8010db4:	f1bb 0f06 	cmp.w	fp, #6
 8010db8:	f47f af4e 	bne.w	8010c58 <_scanf_float+0x70>
 8010dbc:	f04f 0b07 	mov.w	fp, #7
 8010dc0:	e7d3      	b.n	8010d6a <_scanf_float+0x182>
 8010dc2:	6821      	ldr	r1, [r4, #0]
 8010dc4:	0588      	lsls	r0, r1, #22
 8010dc6:	f57f af47 	bpl.w	8010c58 <_scanf_float+0x70>
 8010dca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010dce:	6021      	str	r1, [r4, #0]
 8010dd0:	f8cd 9008 	str.w	r9, [sp, #8]
 8010dd4:	e7c9      	b.n	8010d6a <_scanf_float+0x182>
 8010dd6:	6821      	ldr	r1, [r4, #0]
 8010dd8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010ddc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010de0:	d006      	beq.n	8010df0 <_scanf_float+0x208>
 8010de2:	0548      	lsls	r0, r1, #21
 8010de4:	f57f af38 	bpl.w	8010c58 <_scanf_float+0x70>
 8010de8:	f1b9 0f00 	cmp.w	r9, #0
 8010dec:	f43f af3b 	beq.w	8010c66 <_scanf_float+0x7e>
 8010df0:	0588      	lsls	r0, r1, #22
 8010df2:	bf58      	it	pl
 8010df4:	9802      	ldrpl	r0, [sp, #8]
 8010df6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010dfa:	bf58      	it	pl
 8010dfc:	eba9 0000 	subpl.w	r0, r9, r0
 8010e00:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010e04:	bf58      	it	pl
 8010e06:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010e0a:	6021      	str	r1, [r4, #0]
 8010e0c:	f04f 0900 	mov.w	r9, #0
 8010e10:	e7ab      	b.n	8010d6a <_scanf_float+0x182>
 8010e12:	2203      	movs	r2, #3
 8010e14:	e7a9      	b.n	8010d6a <_scanf_float+0x182>
 8010e16:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010e1a:	9205      	str	r2, [sp, #20]
 8010e1c:	4631      	mov	r1, r6
 8010e1e:	4638      	mov	r0, r7
 8010e20:	4798      	blx	r3
 8010e22:	9a05      	ldr	r2, [sp, #20]
 8010e24:	2800      	cmp	r0, #0
 8010e26:	f43f af04 	beq.w	8010c32 <_scanf_float+0x4a>
 8010e2a:	e715      	b.n	8010c58 <_scanf_float+0x70>
 8010e2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010e34:	4632      	mov	r2, r6
 8010e36:	4638      	mov	r0, r7
 8010e38:	4798      	blx	r3
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	3b01      	subs	r3, #1
 8010e3e:	6123      	str	r3, [r4, #16]
 8010e40:	e715      	b.n	8010c6e <_scanf_float+0x86>
 8010e42:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010e46:	2b06      	cmp	r3, #6
 8010e48:	d80a      	bhi.n	8010e60 <_scanf_float+0x278>
 8010e4a:	f1bb 0f02 	cmp.w	fp, #2
 8010e4e:	d966      	bls.n	8010f1e <_scanf_float+0x336>
 8010e50:	f1ab 0b03 	sub.w	fp, fp, #3
 8010e54:	fa5f fb8b 	uxtb.w	fp, fp
 8010e58:	eba5 0b0b 	sub.w	fp, r5, fp
 8010e5c:	455d      	cmp	r5, fp
 8010e5e:	d149      	bne.n	8010ef4 <_scanf_float+0x30c>
 8010e60:	6823      	ldr	r3, [r4, #0]
 8010e62:	05da      	lsls	r2, r3, #23
 8010e64:	d51f      	bpl.n	8010ea6 <_scanf_float+0x2be>
 8010e66:	055b      	lsls	r3, r3, #21
 8010e68:	d466      	bmi.n	8010f38 <_scanf_float+0x350>
 8010e6a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010e6e:	6923      	ldr	r3, [r4, #16]
 8010e70:	2965      	cmp	r1, #101	; 0x65
 8010e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e76:	f105 3bff 	add.w	fp, r5, #4294967295
 8010e7a:	6123      	str	r3, [r4, #16]
 8010e7c:	d00d      	beq.n	8010e9a <_scanf_float+0x2b2>
 8010e7e:	2945      	cmp	r1, #69	; 0x45
 8010e80:	d00b      	beq.n	8010e9a <_scanf_float+0x2b2>
 8010e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e86:	4632      	mov	r2, r6
 8010e88:	4638      	mov	r0, r7
 8010e8a:	4798      	blx	r3
 8010e8c:	6923      	ldr	r3, [r4, #16]
 8010e8e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010e92:	3b01      	subs	r3, #1
 8010e94:	f1a5 0b02 	sub.w	fp, r5, #2
 8010e98:	6123      	str	r3, [r4, #16]
 8010e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e9e:	4632      	mov	r2, r6
 8010ea0:	4638      	mov	r0, r7
 8010ea2:	4798      	blx	r3
 8010ea4:	465d      	mov	r5, fp
 8010ea6:	6826      	ldr	r6, [r4, #0]
 8010ea8:	f016 0610 	ands.w	r6, r6, #16
 8010eac:	d170      	bne.n	8010f90 <_scanf_float+0x3a8>
 8010eae:	702e      	strb	r6, [r5, #0]
 8010eb0:	6823      	ldr	r3, [r4, #0]
 8010eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010eba:	d140      	bne.n	8010f3e <_scanf_float+0x356>
 8010ebc:	9b02      	ldr	r3, [sp, #8]
 8010ebe:	eba9 0303 	sub.w	r3, r9, r3
 8010ec2:	425a      	negs	r2, r3
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d147      	bne.n	8010f58 <_scanf_float+0x370>
 8010ec8:	2200      	movs	r2, #0
 8010eca:	4638      	mov	r0, r7
 8010ecc:	4641      	mov	r1, r8
 8010ece:	f000 fecf 	bl	8011c70 <_strtod_r>
 8010ed2:	6820      	ldr	r0, [r4, #0]
 8010ed4:	f8da 3000 	ldr.w	r3, [sl]
 8010ed8:	f010 0f02 	tst.w	r0, #2
 8010edc:	f103 0204 	add.w	r2, r3, #4
 8010ee0:	f8ca 2000 	str.w	r2, [sl]
 8010ee4:	d043      	beq.n	8010f6e <_scanf_float+0x386>
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	ed83 0b00 	vstr	d0, [r3]
 8010eec:	68e3      	ldr	r3, [r4, #12]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	60e3      	str	r3, [r4, #12]
 8010ef2:	e6c0      	b.n	8010c76 <_scanf_float+0x8e>
 8010ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ef8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010efc:	4632      	mov	r2, r6
 8010efe:	4638      	mov	r0, r7
 8010f00:	4798      	blx	r3
 8010f02:	6923      	ldr	r3, [r4, #16]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	6123      	str	r3, [r4, #16]
 8010f08:	e7a8      	b.n	8010e5c <_scanf_float+0x274>
 8010f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f0e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f12:	4632      	mov	r2, r6
 8010f14:	4638      	mov	r0, r7
 8010f16:	4798      	blx	r3
 8010f18:	6923      	ldr	r3, [r4, #16]
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	6123      	str	r3, [r4, #16]
 8010f1e:	4545      	cmp	r5, r8
 8010f20:	d8f3      	bhi.n	8010f0a <_scanf_float+0x322>
 8010f22:	e6a7      	b.n	8010c74 <_scanf_float+0x8c>
 8010f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010f2c:	4632      	mov	r2, r6
 8010f2e:	4638      	mov	r0, r7
 8010f30:	4798      	blx	r3
 8010f32:	6923      	ldr	r3, [r4, #16]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	6123      	str	r3, [r4, #16]
 8010f38:	4545      	cmp	r5, r8
 8010f3a:	d8f3      	bhi.n	8010f24 <_scanf_float+0x33c>
 8010f3c:	e69a      	b.n	8010c74 <_scanf_float+0x8c>
 8010f3e:	9b03      	ldr	r3, [sp, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d0c1      	beq.n	8010ec8 <_scanf_float+0x2e0>
 8010f44:	9904      	ldr	r1, [sp, #16]
 8010f46:	230a      	movs	r3, #10
 8010f48:	4632      	mov	r2, r6
 8010f4a:	3101      	adds	r1, #1
 8010f4c:	4638      	mov	r0, r7
 8010f4e:	f000 ff1b 	bl	8011d88 <_strtol_r>
 8010f52:	9b03      	ldr	r3, [sp, #12]
 8010f54:	9d04      	ldr	r5, [sp, #16]
 8010f56:	1ac2      	subs	r2, r0, r3
 8010f58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f5c:	429d      	cmp	r5, r3
 8010f5e:	bf28      	it	cs
 8010f60:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010f64:	490b      	ldr	r1, [pc, #44]	; (8010f94 <_scanf_float+0x3ac>)
 8010f66:	4628      	mov	r0, r5
 8010f68:	f000 f880 	bl	801106c <siprintf>
 8010f6c:	e7ac      	b.n	8010ec8 <_scanf_float+0x2e0>
 8010f6e:	f010 0004 	ands.w	r0, r0, #4
 8010f72:	d1b8      	bne.n	8010ee6 <_scanf_float+0x2fe>
 8010f74:	eeb4 0b40 	vcmp.f64	d0, d0
 8010f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7c:	681d      	ldr	r5, [r3, #0]
 8010f7e:	d704      	bvc.n	8010f8a <_scanf_float+0x3a2>
 8010f80:	f000 f86e 	bl	8011060 <nanf>
 8010f84:	ed85 0a00 	vstr	s0, [r5]
 8010f88:	e7b0      	b.n	8010eec <_scanf_float+0x304>
 8010f8a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f8e:	e7f9      	b.n	8010f84 <_scanf_float+0x39c>
 8010f90:	2600      	movs	r6, #0
 8010f92:	e670      	b.n	8010c76 <_scanf_float+0x8e>
 8010f94:	080150b8 	.word	0x080150b8

08010f98 <_puts_r>:
 8010f98:	b570      	push	{r4, r5, r6, lr}
 8010f9a:	460e      	mov	r6, r1
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	b118      	cbz	r0, 8010fa8 <_puts_r+0x10>
 8010fa0:	6983      	ldr	r3, [r0, #24]
 8010fa2:	b90b      	cbnz	r3, 8010fa8 <_puts_r+0x10>
 8010fa4:	f001 fe8c 	bl	8012cc0 <__sinit>
 8010fa8:	69ab      	ldr	r3, [r5, #24]
 8010faa:	68ac      	ldr	r4, [r5, #8]
 8010fac:	b913      	cbnz	r3, 8010fb4 <_puts_r+0x1c>
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f001 fe86 	bl	8012cc0 <__sinit>
 8010fb4:	4b23      	ldr	r3, [pc, #140]	; (8011044 <_puts_r+0xac>)
 8010fb6:	429c      	cmp	r4, r3
 8010fb8:	d117      	bne.n	8010fea <_puts_r+0x52>
 8010fba:	686c      	ldr	r4, [r5, #4]
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	071b      	lsls	r3, r3, #28
 8010fc0:	d51d      	bpl.n	8010ffe <_puts_r+0x66>
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	b1db      	cbz	r3, 8010ffe <_puts_r+0x66>
 8010fc6:	3e01      	subs	r6, #1
 8010fc8:	68a3      	ldr	r3, [r4, #8]
 8010fca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	60a3      	str	r3, [r4, #8]
 8010fd2:	b9e9      	cbnz	r1, 8011010 <_puts_r+0x78>
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	da2e      	bge.n	8011036 <_puts_r+0x9e>
 8010fd8:	4622      	mov	r2, r4
 8010fda:	210a      	movs	r1, #10
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f000 fee5 	bl	8011dac <__swbuf_r>
 8010fe2:	3001      	adds	r0, #1
 8010fe4:	d011      	beq.n	801100a <_puts_r+0x72>
 8010fe6:	200a      	movs	r0, #10
 8010fe8:	e011      	b.n	801100e <_puts_r+0x76>
 8010fea:	4b17      	ldr	r3, [pc, #92]	; (8011048 <_puts_r+0xb0>)
 8010fec:	429c      	cmp	r4, r3
 8010fee:	d101      	bne.n	8010ff4 <_puts_r+0x5c>
 8010ff0:	68ac      	ldr	r4, [r5, #8]
 8010ff2:	e7e3      	b.n	8010fbc <_puts_r+0x24>
 8010ff4:	4b15      	ldr	r3, [pc, #84]	; (801104c <_puts_r+0xb4>)
 8010ff6:	429c      	cmp	r4, r3
 8010ff8:	bf08      	it	eq
 8010ffa:	68ec      	ldreq	r4, [r5, #12]
 8010ffc:	e7de      	b.n	8010fbc <_puts_r+0x24>
 8010ffe:	4621      	mov	r1, r4
 8011000:	4628      	mov	r0, r5
 8011002:	f000 ff25 	bl	8011e50 <__swsetup_r>
 8011006:	2800      	cmp	r0, #0
 8011008:	d0dd      	beq.n	8010fc6 <_puts_r+0x2e>
 801100a:	f04f 30ff 	mov.w	r0, #4294967295
 801100e:	bd70      	pop	{r4, r5, r6, pc}
 8011010:	2b00      	cmp	r3, #0
 8011012:	da04      	bge.n	801101e <_puts_r+0x86>
 8011014:	69a2      	ldr	r2, [r4, #24]
 8011016:	429a      	cmp	r2, r3
 8011018:	dc06      	bgt.n	8011028 <_puts_r+0x90>
 801101a:	290a      	cmp	r1, #10
 801101c:	d004      	beq.n	8011028 <_puts_r+0x90>
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	1c5a      	adds	r2, r3, #1
 8011022:	6022      	str	r2, [r4, #0]
 8011024:	7019      	strb	r1, [r3, #0]
 8011026:	e7cf      	b.n	8010fc8 <_puts_r+0x30>
 8011028:	4622      	mov	r2, r4
 801102a:	4628      	mov	r0, r5
 801102c:	f000 febe 	bl	8011dac <__swbuf_r>
 8011030:	3001      	adds	r0, #1
 8011032:	d1c9      	bne.n	8010fc8 <_puts_r+0x30>
 8011034:	e7e9      	b.n	801100a <_puts_r+0x72>
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	200a      	movs	r0, #10
 801103a:	1c5a      	adds	r2, r3, #1
 801103c:	6022      	str	r2, [r4, #0]
 801103e:	7018      	strb	r0, [r3, #0]
 8011040:	e7e5      	b.n	801100e <_puts_r+0x76>
 8011042:	bf00      	nop
 8011044:	08015140 	.word	0x08015140
 8011048:	08015160 	.word	0x08015160
 801104c:	08015120 	.word	0x08015120

08011050 <puts>:
 8011050:	4b02      	ldr	r3, [pc, #8]	; (801105c <puts+0xc>)
 8011052:	4601      	mov	r1, r0
 8011054:	6818      	ldr	r0, [r3, #0]
 8011056:	f7ff bf9f 	b.w	8010f98 <_puts_r>
 801105a:	bf00      	nop
 801105c:	20000198 	.word	0x20000198

08011060 <nanf>:
 8011060:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011068 <nanf+0x8>
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop
 8011068:	7fc00000 	.word	0x7fc00000

0801106c <siprintf>:
 801106c:	b40e      	push	{r1, r2, r3}
 801106e:	b500      	push	{lr}
 8011070:	b09c      	sub	sp, #112	; 0x70
 8011072:	ab1d      	add	r3, sp, #116	; 0x74
 8011074:	9002      	str	r0, [sp, #8]
 8011076:	9006      	str	r0, [sp, #24]
 8011078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801107c:	4809      	ldr	r0, [pc, #36]	; (80110a4 <siprintf+0x38>)
 801107e:	9107      	str	r1, [sp, #28]
 8011080:	9104      	str	r1, [sp, #16]
 8011082:	4909      	ldr	r1, [pc, #36]	; (80110a8 <siprintf+0x3c>)
 8011084:	f853 2b04 	ldr.w	r2, [r3], #4
 8011088:	9105      	str	r1, [sp, #20]
 801108a:	6800      	ldr	r0, [r0, #0]
 801108c:	9301      	str	r3, [sp, #4]
 801108e:	a902      	add	r1, sp, #8
 8011090:	f002 ff68 	bl	8013f64 <_svfiprintf_r>
 8011094:	9b02      	ldr	r3, [sp, #8]
 8011096:	2200      	movs	r2, #0
 8011098:	701a      	strb	r2, [r3, #0]
 801109a:	b01c      	add	sp, #112	; 0x70
 801109c:	f85d eb04 	ldr.w	lr, [sp], #4
 80110a0:	b003      	add	sp, #12
 80110a2:	4770      	bx	lr
 80110a4:	20000198 	.word	0x20000198
 80110a8:	ffff0208 	.word	0xffff0208

080110ac <sulp>:
 80110ac:	b570      	push	{r4, r5, r6, lr}
 80110ae:	4604      	mov	r4, r0
 80110b0:	460d      	mov	r5, r1
 80110b2:	4616      	mov	r6, r2
 80110b4:	ec45 4b10 	vmov	d0, r4, r5
 80110b8:	f002 fd10 	bl	8013adc <__ulp>
 80110bc:	b17e      	cbz	r6, 80110de <sulp+0x32>
 80110be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	dd09      	ble.n	80110de <sulp+0x32>
 80110ca:	051b      	lsls	r3, r3, #20
 80110cc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80110d0:	2000      	movs	r0, #0
 80110d2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80110d6:	ec41 0b17 	vmov	d7, r0, r1
 80110da:	ee20 0b07 	vmul.f64	d0, d0, d7
 80110de:	bd70      	pop	{r4, r5, r6, pc}

080110e0 <_strtod_l>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	ed2d 8b0c 	vpush	{d8-d13}
 80110e8:	4698      	mov	r8, r3
 80110ea:	b09d      	sub	sp, #116	; 0x74
 80110ec:	2300      	movs	r3, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	4640      	mov	r0, r8
 80110f2:	460e      	mov	r6, r1
 80110f4:	9214      	str	r2, [sp, #80]	; 0x50
 80110f6:	9318      	str	r3, [sp, #96]	; 0x60
 80110f8:	f002 f995 	bl	8013426 <__localeconv_l>
 80110fc:	4681      	mov	r9, r0
 80110fe:	6800      	ldr	r0, [r0, #0]
 8011100:	f7ef f89e 	bl	8000240 <strlen>
 8011104:	f04f 0a00 	mov.w	sl, #0
 8011108:	4607      	mov	r7, r0
 801110a:	f04f 0b00 	mov.w	fp, #0
 801110e:	9617      	str	r6, [sp, #92]	; 0x5c
 8011110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011112:	781a      	ldrb	r2, [r3, #0]
 8011114:	2a0d      	cmp	r2, #13
 8011116:	d834      	bhi.n	8011182 <_strtod_l+0xa2>
 8011118:	2a09      	cmp	r2, #9
 801111a:	d238      	bcs.n	801118e <_strtod_l+0xae>
 801111c:	2a00      	cmp	r2, #0
 801111e:	d040      	beq.n	80111a2 <_strtod_l+0xc2>
 8011120:	2300      	movs	r3, #0
 8011122:	930d      	str	r3, [sp, #52]	; 0x34
 8011124:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011126:	782b      	ldrb	r3, [r5, #0]
 8011128:	2b30      	cmp	r3, #48	; 0x30
 801112a:	f040 80b3 	bne.w	8011294 <_strtod_l+0x1b4>
 801112e:	786b      	ldrb	r3, [r5, #1]
 8011130:	2b58      	cmp	r3, #88	; 0x58
 8011132:	d001      	beq.n	8011138 <_strtod_l+0x58>
 8011134:	2b78      	cmp	r3, #120	; 0x78
 8011136:	d169      	bne.n	801120c <_strtod_l+0x12c>
 8011138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801113a:	9301      	str	r3, [sp, #4]
 801113c:	ab18      	add	r3, sp, #96	; 0x60
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	f8cd 8008 	str.w	r8, [sp, #8]
 8011144:	ab19      	add	r3, sp, #100	; 0x64
 8011146:	4a8f      	ldr	r2, [pc, #572]	; (8011384 <_strtod_l+0x2a4>)
 8011148:	a917      	add	r1, sp, #92	; 0x5c
 801114a:	4620      	mov	r0, r4
 801114c:	f001 fe91 	bl	8012e72 <__gethex>
 8011150:	f010 0607 	ands.w	r6, r0, #7
 8011154:	4607      	mov	r7, r0
 8011156:	d005      	beq.n	8011164 <_strtod_l+0x84>
 8011158:	2e06      	cmp	r6, #6
 801115a:	d12c      	bne.n	80111b6 <_strtod_l+0xd6>
 801115c:	3501      	adds	r5, #1
 801115e:	2300      	movs	r3, #0
 8011160:	9517      	str	r5, [sp, #92]	; 0x5c
 8011162:	930d      	str	r3, [sp, #52]	; 0x34
 8011164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011166:	2b00      	cmp	r3, #0
 8011168:	f040 855e 	bne.w	8011c28 <_strtod_l+0xb48>
 801116c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801116e:	b1eb      	cbz	r3, 80111ac <_strtod_l+0xcc>
 8011170:	ec4b ab17 	vmov	d7, sl, fp
 8011174:	eeb1 0b47 	vneg.f64	d0, d7
 8011178:	b01d      	add	sp, #116	; 0x74
 801117a:	ecbd 8b0c 	vpop	{d8-d13}
 801117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011182:	2a2b      	cmp	r2, #43	; 0x2b
 8011184:	d015      	beq.n	80111b2 <_strtod_l+0xd2>
 8011186:	2a2d      	cmp	r2, #45	; 0x2d
 8011188:	d004      	beq.n	8011194 <_strtod_l+0xb4>
 801118a:	2a20      	cmp	r2, #32
 801118c:	d1c8      	bne.n	8011120 <_strtod_l+0x40>
 801118e:	3301      	adds	r3, #1
 8011190:	9317      	str	r3, [sp, #92]	; 0x5c
 8011192:	e7bd      	b.n	8011110 <_strtod_l+0x30>
 8011194:	2201      	movs	r2, #1
 8011196:	920d      	str	r2, [sp, #52]	; 0x34
 8011198:	1c5a      	adds	r2, r3, #1
 801119a:	9217      	str	r2, [sp, #92]	; 0x5c
 801119c:	785b      	ldrb	r3, [r3, #1]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1c0      	bne.n	8011124 <_strtod_l+0x44>
 80111a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80111a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f040 853c 	bne.w	8011c24 <_strtod_l+0xb44>
 80111ac:	ec4b ab10 	vmov	d0, sl, fp
 80111b0:	e7e2      	b.n	8011178 <_strtod_l+0x98>
 80111b2:	2200      	movs	r2, #0
 80111b4:	e7ef      	b.n	8011196 <_strtod_l+0xb6>
 80111b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80111b8:	b13a      	cbz	r2, 80111ca <_strtod_l+0xea>
 80111ba:	2135      	movs	r1, #53	; 0x35
 80111bc:	a81a      	add	r0, sp, #104	; 0x68
 80111be:	f002 fd86 	bl	8013cce <__copybits>
 80111c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111c4:	4620      	mov	r0, r4
 80111c6:	f002 f9f1 	bl	80135ac <_Bfree>
 80111ca:	3e01      	subs	r6, #1
 80111cc:	2e04      	cmp	r6, #4
 80111ce:	d806      	bhi.n	80111de <_strtod_l+0xfe>
 80111d0:	e8df f006 	tbb	[pc, r6]
 80111d4:	1714030a 	.word	0x1714030a
 80111d8:	0a          	.byte	0x0a
 80111d9:	00          	.byte	0x00
 80111da:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80111de:	073b      	lsls	r3, r7, #28
 80111e0:	d5c0      	bpl.n	8011164 <_strtod_l+0x84>
 80111e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80111e6:	e7bd      	b.n	8011164 <_strtod_l+0x84>
 80111e8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80111ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80111ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80111f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80111f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80111fa:	e7f0      	b.n	80111de <_strtod_l+0xfe>
 80111fc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011388 <_strtod_l+0x2a8>
 8011200:	e7ed      	b.n	80111de <_strtod_l+0xfe>
 8011202:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011206:	f04f 3aff 	mov.w	sl, #4294967295
 801120a:	e7e8      	b.n	80111de <_strtod_l+0xfe>
 801120c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801120e:	1c5a      	adds	r2, r3, #1
 8011210:	9217      	str	r2, [sp, #92]	; 0x5c
 8011212:	785b      	ldrb	r3, [r3, #1]
 8011214:	2b30      	cmp	r3, #48	; 0x30
 8011216:	d0f9      	beq.n	801120c <_strtod_l+0x12c>
 8011218:	2b00      	cmp	r3, #0
 801121a:	d0a3      	beq.n	8011164 <_strtod_l+0x84>
 801121c:	2301      	movs	r3, #1
 801121e:	930a      	str	r3, [sp, #40]	; 0x28
 8011220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011222:	930c      	str	r3, [sp, #48]	; 0x30
 8011224:	2300      	movs	r3, #0
 8011226:	9306      	str	r3, [sp, #24]
 8011228:	9308      	str	r3, [sp, #32]
 801122a:	461d      	mov	r5, r3
 801122c:	220a      	movs	r2, #10
 801122e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011230:	f890 8000 	ldrb.w	r8, [r0]
 8011234:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011238:	b2d9      	uxtb	r1, r3
 801123a:	2909      	cmp	r1, #9
 801123c:	d92c      	bls.n	8011298 <_strtod_l+0x1b8>
 801123e:	463a      	mov	r2, r7
 8011240:	f8d9 1000 	ldr.w	r1, [r9]
 8011244:	f002 ffd9 	bl	80141fa <strncmp>
 8011248:	2800      	cmp	r0, #0
 801124a:	d035      	beq.n	80112b8 <_strtod_l+0x1d8>
 801124c:	2000      	movs	r0, #0
 801124e:	4642      	mov	r2, r8
 8011250:	462b      	mov	r3, r5
 8011252:	4601      	mov	r1, r0
 8011254:	9004      	str	r0, [sp, #16]
 8011256:	2a65      	cmp	r2, #101	; 0x65
 8011258:	d001      	beq.n	801125e <_strtod_l+0x17e>
 801125a:	2a45      	cmp	r2, #69	; 0x45
 801125c:	d117      	bne.n	801128e <_strtod_l+0x1ae>
 801125e:	b923      	cbnz	r3, 801126a <_strtod_l+0x18a>
 8011260:	b910      	cbnz	r0, 8011268 <_strtod_l+0x188>
 8011262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011264:	2b00      	cmp	r3, #0
 8011266:	d09c      	beq.n	80111a2 <_strtod_l+0xc2>
 8011268:	2300      	movs	r3, #0
 801126a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801126c:	1c72      	adds	r2, r6, #1
 801126e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011270:	7872      	ldrb	r2, [r6, #1]
 8011272:	2a2b      	cmp	r2, #43	; 0x2b
 8011274:	f000 8082 	beq.w	801137c <_strtod_l+0x29c>
 8011278:	2a2d      	cmp	r2, #45	; 0x2d
 801127a:	d079      	beq.n	8011370 <_strtod_l+0x290>
 801127c:	f04f 0e00 	mov.w	lr, #0
 8011280:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011284:	f1bc 0f09 	cmp.w	ip, #9
 8011288:	f240 8086 	bls.w	8011398 <_strtod_l+0x2b8>
 801128c:	9617      	str	r6, [sp, #92]	; 0x5c
 801128e:	f04f 0800 	mov.w	r8, #0
 8011292:	e0a8      	b.n	80113e6 <_strtod_l+0x306>
 8011294:	2300      	movs	r3, #0
 8011296:	e7c2      	b.n	801121e <_strtod_l+0x13e>
 8011298:	2d08      	cmp	r5, #8
 801129a:	bfd5      	itete	le
 801129c:	9908      	ldrle	r1, [sp, #32]
 801129e:	9906      	ldrgt	r1, [sp, #24]
 80112a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80112a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80112a8:	f100 0001 	add.w	r0, r0, #1
 80112ac:	bfd4      	ite	le
 80112ae:	9308      	strle	r3, [sp, #32]
 80112b0:	9306      	strgt	r3, [sp, #24]
 80112b2:	3501      	adds	r5, #1
 80112b4:	9017      	str	r0, [sp, #92]	; 0x5c
 80112b6:	e7ba      	b.n	801122e <_strtod_l+0x14e>
 80112b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112ba:	19da      	adds	r2, r3, r7
 80112bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80112be:	5dda      	ldrb	r2, [r3, r7]
 80112c0:	2d00      	cmp	r5, #0
 80112c2:	d038      	beq.n	8011336 <_strtod_l+0x256>
 80112c4:	4601      	mov	r1, r0
 80112c6:	462b      	mov	r3, r5
 80112c8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80112cc:	2f09      	cmp	r7, #9
 80112ce:	d913      	bls.n	80112f8 <_strtod_l+0x218>
 80112d0:	2701      	movs	r7, #1
 80112d2:	9704      	str	r7, [sp, #16]
 80112d4:	e7bf      	b.n	8011256 <_strtod_l+0x176>
 80112d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112d8:	1c5a      	adds	r2, r3, #1
 80112da:	9217      	str	r2, [sp, #92]	; 0x5c
 80112dc:	785a      	ldrb	r2, [r3, #1]
 80112de:	3001      	adds	r0, #1
 80112e0:	2a30      	cmp	r2, #48	; 0x30
 80112e2:	d0f8      	beq.n	80112d6 <_strtod_l+0x1f6>
 80112e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80112e8:	2b08      	cmp	r3, #8
 80112ea:	f200 84a2 	bhi.w	8011c32 <_strtod_l+0xb52>
 80112ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112f0:	930c      	str	r3, [sp, #48]	; 0x30
 80112f2:	4601      	mov	r1, r0
 80112f4:	2000      	movs	r0, #0
 80112f6:	4603      	mov	r3, r0
 80112f8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80112fc:	f100 0701 	add.w	r7, r0, #1
 8011300:	d013      	beq.n	801132a <_strtod_l+0x24a>
 8011302:	4439      	add	r1, r7
 8011304:	eb00 0e03 	add.w	lr, r0, r3
 8011308:	461f      	mov	r7, r3
 801130a:	f04f 0c0a 	mov.w	ip, #10
 801130e:	45be      	cmp	lr, r7
 8011310:	d113      	bne.n	801133a <_strtod_l+0x25a>
 8011312:	181f      	adds	r7, r3, r0
 8011314:	2f08      	cmp	r7, #8
 8011316:	f103 0301 	add.w	r3, r3, #1
 801131a:	4403      	add	r3, r0
 801131c:	dc1d      	bgt.n	801135a <_strtod_l+0x27a>
 801131e:	9a08      	ldr	r2, [sp, #32]
 8011320:	200a      	movs	r0, #10
 8011322:	fb00 8202 	mla	r2, r0, r2, r8
 8011326:	9208      	str	r2, [sp, #32]
 8011328:	2700      	movs	r7, #0
 801132a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801132c:	1c50      	adds	r0, r2, #1
 801132e:	9017      	str	r0, [sp, #92]	; 0x5c
 8011330:	7852      	ldrb	r2, [r2, #1]
 8011332:	4638      	mov	r0, r7
 8011334:	e7c8      	b.n	80112c8 <_strtod_l+0x1e8>
 8011336:	4628      	mov	r0, r5
 8011338:	e7d2      	b.n	80112e0 <_strtod_l+0x200>
 801133a:	2f08      	cmp	r7, #8
 801133c:	f107 0701 	add.w	r7, r7, #1
 8011340:	dc04      	bgt.n	801134c <_strtod_l+0x26c>
 8011342:	9a08      	ldr	r2, [sp, #32]
 8011344:	fb0c f202 	mul.w	r2, ip, r2
 8011348:	9208      	str	r2, [sp, #32]
 801134a:	e7e0      	b.n	801130e <_strtod_l+0x22e>
 801134c:	2f10      	cmp	r7, #16
 801134e:	bfde      	ittt	le
 8011350:	9a06      	ldrle	r2, [sp, #24]
 8011352:	fb0c f202 	mulle.w	r2, ip, r2
 8011356:	9206      	strle	r2, [sp, #24]
 8011358:	e7d9      	b.n	801130e <_strtod_l+0x22e>
 801135a:	2b10      	cmp	r3, #16
 801135c:	bfdf      	itttt	le
 801135e:	9a06      	ldrle	r2, [sp, #24]
 8011360:	200a      	movle	r0, #10
 8011362:	fb00 8202 	mlale	r2, r0, r2, r8
 8011366:	9206      	strle	r2, [sp, #24]
 8011368:	e7de      	b.n	8011328 <_strtod_l+0x248>
 801136a:	2301      	movs	r3, #1
 801136c:	9304      	str	r3, [sp, #16]
 801136e:	e777      	b.n	8011260 <_strtod_l+0x180>
 8011370:	f04f 0e01 	mov.w	lr, #1
 8011374:	1cb2      	adds	r2, r6, #2
 8011376:	9217      	str	r2, [sp, #92]	; 0x5c
 8011378:	78b2      	ldrb	r2, [r6, #2]
 801137a:	e781      	b.n	8011280 <_strtod_l+0x1a0>
 801137c:	f04f 0e00 	mov.w	lr, #0
 8011380:	e7f8      	b.n	8011374 <_strtod_l+0x294>
 8011382:	bf00      	nop
 8011384:	080150c0 	.word	0x080150c0
 8011388:	7ff00000 	.word	0x7ff00000
 801138c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801138e:	f102 0c01 	add.w	ip, r2, #1
 8011392:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011396:	7852      	ldrb	r2, [r2, #1]
 8011398:	2a30      	cmp	r2, #48	; 0x30
 801139a:	d0f7      	beq.n	801138c <_strtod_l+0x2ac>
 801139c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80113a0:	f1bc 0f08 	cmp.w	ip, #8
 80113a4:	f63f af73 	bhi.w	801128e <_strtod_l+0x1ae>
 80113a8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80113ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113ae:	920e      	str	r2, [sp, #56]	; 0x38
 80113b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113b2:	f102 0c01 	add.w	ip, r2, #1
 80113b6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80113ba:	7852      	ldrb	r2, [r2, #1]
 80113bc:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80113c0:	f1b9 0f09 	cmp.w	r9, #9
 80113c4:	d939      	bls.n	801143a <_strtod_l+0x35a>
 80113c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80113c8:	ebac 0c07 	sub.w	ip, ip, r7
 80113cc:	f1bc 0f08 	cmp.w	ip, #8
 80113d0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80113d4:	dc37      	bgt.n	8011446 <_strtod_l+0x366>
 80113d6:	45e0      	cmp	r8, ip
 80113d8:	bfa8      	it	ge
 80113da:	46e0      	movge	r8, ip
 80113dc:	f1be 0f00 	cmp.w	lr, #0
 80113e0:	d001      	beq.n	80113e6 <_strtod_l+0x306>
 80113e2:	f1c8 0800 	rsb	r8, r8, #0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d151      	bne.n	801148e <_strtod_l+0x3ae>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	f47f aeba 	bne.w	8011164 <_strtod_l+0x84>
 80113f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f47f aeb6 	bne.w	8011164 <_strtod_l+0x84>
 80113f8:	9b04      	ldr	r3, [sp, #16]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f47f aed1 	bne.w	80111a2 <_strtod_l+0xc2>
 8011400:	2a4e      	cmp	r2, #78	; 0x4e
 8011402:	d027      	beq.n	8011454 <_strtod_l+0x374>
 8011404:	dc21      	bgt.n	801144a <_strtod_l+0x36a>
 8011406:	2a49      	cmp	r2, #73	; 0x49
 8011408:	f47f aecb 	bne.w	80111a2 <_strtod_l+0xc2>
 801140c:	499a      	ldr	r1, [pc, #616]	; (8011678 <_strtod_l+0x598>)
 801140e:	a817      	add	r0, sp, #92	; 0x5c
 8011410:	f001 ff62 	bl	80132d8 <__match>
 8011414:	2800      	cmp	r0, #0
 8011416:	f43f aec4 	beq.w	80111a2 <_strtod_l+0xc2>
 801141a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801141c:	4997      	ldr	r1, [pc, #604]	; (801167c <_strtod_l+0x59c>)
 801141e:	3b01      	subs	r3, #1
 8011420:	a817      	add	r0, sp, #92	; 0x5c
 8011422:	9317      	str	r3, [sp, #92]	; 0x5c
 8011424:	f001 ff58 	bl	80132d8 <__match>
 8011428:	b910      	cbnz	r0, 8011430 <_strtod_l+0x350>
 801142a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801142c:	3301      	adds	r3, #1
 801142e:	9317      	str	r3, [sp, #92]	; 0x5c
 8011430:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011694 <_strtod_l+0x5b4>
 8011434:	f04f 0a00 	mov.w	sl, #0
 8011438:	e694      	b.n	8011164 <_strtod_l+0x84>
 801143a:	270a      	movs	r7, #10
 801143c:	fb07 2808 	mla	r8, r7, r8, r2
 8011440:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011444:	e7b4      	b.n	80113b0 <_strtod_l+0x2d0>
 8011446:	46e0      	mov	r8, ip
 8011448:	e7c8      	b.n	80113dc <_strtod_l+0x2fc>
 801144a:	2a69      	cmp	r2, #105	; 0x69
 801144c:	d0de      	beq.n	801140c <_strtod_l+0x32c>
 801144e:	2a6e      	cmp	r2, #110	; 0x6e
 8011450:	f47f aea7 	bne.w	80111a2 <_strtod_l+0xc2>
 8011454:	498a      	ldr	r1, [pc, #552]	; (8011680 <_strtod_l+0x5a0>)
 8011456:	a817      	add	r0, sp, #92	; 0x5c
 8011458:	f001 ff3e 	bl	80132d8 <__match>
 801145c:	2800      	cmp	r0, #0
 801145e:	f43f aea0 	beq.w	80111a2 <_strtod_l+0xc2>
 8011462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	2b28      	cmp	r3, #40	; 0x28
 8011468:	d10e      	bne.n	8011488 <_strtod_l+0x3a8>
 801146a:	aa1a      	add	r2, sp, #104	; 0x68
 801146c:	4985      	ldr	r1, [pc, #532]	; (8011684 <_strtod_l+0x5a4>)
 801146e:	a817      	add	r0, sp, #92	; 0x5c
 8011470:	f001 ff46 	bl	8013300 <__hexnan>
 8011474:	2805      	cmp	r0, #5
 8011476:	d107      	bne.n	8011488 <_strtod_l+0x3a8>
 8011478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801147a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801147e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011482:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011486:	e66d      	b.n	8011164 <_strtod_l+0x84>
 8011488:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011698 <_strtod_l+0x5b8>
 801148c:	e7d2      	b.n	8011434 <_strtod_l+0x354>
 801148e:	eddd 7a08 	vldr	s15, [sp, #32]
 8011492:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011496:	eba8 0201 	sub.w	r2, r8, r1
 801149a:	2d00      	cmp	r5, #0
 801149c:	bf08      	it	eq
 801149e:	461d      	moveq	r5, r3
 80114a0:	2b10      	cmp	r3, #16
 80114a2:	9204      	str	r2, [sp, #16]
 80114a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80114a8:	461a      	mov	r2, r3
 80114aa:	bfa8      	it	ge
 80114ac:	2210      	movge	r2, #16
 80114ae:	2b09      	cmp	r3, #9
 80114b0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80114b4:	dc14      	bgt.n	80114e0 <_strtod_l+0x400>
 80114b6:	9904      	ldr	r1, [sp, #16]
 80114b8:	2900      	cmp	r1, #0
 80114ba:	f43f ae53 	beq.w	8011164 <_strtod_l+0x84>
 80114be:	9904      	ldr	r1, [sp, #16]
 80114c0:	dd72      	ble.n	80115a8 <_strtod_l+0x4c8>
 80114c2:	2916      	cmp	r1, #22
 80114c4:	dc5a      	bgt.n	801157c <_strtod_l+0x49c>
 80114c6:	4970      	ldr	r1, [pc, #448]	; (8011688 <_strtod_l+0x5a8>)
 80114c8:	9b04      	ldr	r3, [sp, #16]
 80114ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80114ce:	ed91 7b00 	vldr	d7, [r1]
 80114d2:	ec4b ab16 	vmov	d6, sl, fp
 80114d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114da:	ec5b ab17 	vmov	sl, fp, d7
 80114de:	e641      	b.n	8011164 <_strtod_l+0x84>
 80114e0:	4969      	ldr	r1, [pc, #420]	; (8011688 <_strtod_l+0x5a8>)
 80114e2:	eddd 7a06 	vldr	s15, [sp, #24]
 80114e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80114ea:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80114ee:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80114f2:	2b0f      	cmp	r3, #15
 80114f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80114f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114fc:	ec5b ab17 	vmov	sl, fp, d7
 8011500:	ddd9      	ble.n	80114b6 <_strtod_l+0x3d6>
 8011502:	9904      	ldr	r1, [sp, #16]
 8011504:	1a9a      	subs	r2, r3, r2
 8011506:	440a      	add	r2, r1
 8011508:	2a00      	cmp	r2, #0
 801150a:	f340 8096 	ble.w	801163a <_strtod_l+0x55a>
 801150e:	f012 000f 	ands.w	r0, r2, #15
 8011512:	d00a      	beq.n	801152a <_strtod_l+0x44a>
 8011514:	495c      	ldr	r1, [pc, #368]	; (8011688 <_strtod_l+0x5a8>)
 8011516:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801151a:	ed91 7b00 	vldr	d7, [r1]
 801151e:	ec4b ab16 	vmov	d6, sl, fp
 8011522:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011526:	ec5b ab17 	vmov	sl, fp, d7
 801152a:	f032 020f 	bics.w	r2, r2, #15
 801152e:	d072      	beq.n	8011616 <_strtod_l+0x536>
 8011530:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011534:	dd45      	ble.n	80115c2 <_strtod_l+0x4e2>
 8011536:	2500      	movs	r5, #0
 8011538:	46a8      	mov	r8, r5
 801153a:	9506      	str	r5, [sp, #24]
 801153c:	46a9      	mov	r9, r5
 801153e:	2322      	movs	r3, #34	; 0x22
 8011540:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011694 <_strtod_l+0x5b4>
 8011544:	6023      	str	r3, [r4, #0]
 8011546:	f04f 0a00 	mov.w	sl, #0
 801154a:	9b06      	ldr	r3, [sp, #24]
 801154c:	2b00      	cmp	r3, #0
 801154e:	f43f ae09 	beq.w	8011164 <_strtod_l+0x84>
 8011552:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011554:	4620      	mov	r0, r4
 8011556:	f002 f829 	bl	80135ac <_Bfree>
 801155a:	4649      	mov	r1, r9
 801155c:	4620      	mov	r0, r4
 801155e:	f002 f825 	bl	80135ac <_Bfree>
 8011562:	4641      	mov	r1, r8
 8011564:	4620      	mov	r0, r4
 8011566:	f002 f821 	bl	80135ac <_Bfree>
 801156a:	9906      	ldr	r1, [sp, #24]
 801156c:	4620      	mov	r0, r4
 801156e:	f002 f81d 	bl	80135ac <_Bfree>
 8011572:	4629      	mov	r1, r5
 8011574:	4620      	mov	r0, r4
 8011576:	f002 f819 	bl	80135ac <_Bfree>
 801157a:	e5f3      	b.n	8011164 <_strtod_l+0x84>
 801157c:	9804      	ldr	r0, [sp, #16]
 801157e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011582:	4281      	cmp	r1, r0
 8011584:	dbbd      	blt.n	8011502 <_strtod_l+0x422>
 8011586:	4a40      	ldr	r2, [pc, #256]	; (8011688 <_strtod_l+0x5a8>)
 8011588:	f1c3 030f 	rsb	r3, r3, #15
 801158c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011590:	ed91 7b00 	vldr	d7, [r1]
 8011594:	ec4b ab16 	vmov	d6, sl, fp
 8011598:	1ac3      	subs	r3, r0, r3
 801159a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801159e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115a2:	ed92 6b00 	vldr	d6, [r2]
 80115a6:	e796      	b.n	80114d6 <_strtod_l+0x3f6>
 80115a8:	3116      	adds	r1, #22
 80115aa:	dbaa      	blt.n	8011502 <_strtod_l+0x422>
 80115ac:	4936      	ldr	r1, [pc, #216]	; (8011688 <_strtod_l+0x5a8>)
 80115ae:	9b04      	ldr	r3, [sp, #16]
 80115b0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80115b4:	ed91 7b00 	vldr	d7, [r1]
 80115b8:	ec4b ab16 	vmov	d6, sl, fp
 80115bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80115c0:	e78b      	b.n	80114da <_strtod_l+0x3fa>
 80115c2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80115c6:	2000      	movs	r0, #0
 80115c8:	4e30      	ldr	r6, [pc, #192]	; (801168c <_strtod_l+0x5ac>)
 80115ca:	1112      	asrs	r2, r2, #4
 80115cc:	4601      	mov	r1, r0
 80115ce:	2a01      	cmp	r2, #1
 80115d0:	dc23      	bgt.n	801161a <_strtod_l+0x53a>
 80115d2:	b108      	cbz	r0, 80115d8 <_strtod_l+0x4f8>
 80115d4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80115d8:	4a2c      	ldr	r2, [pc, #176]	; (801168c <_strtod_l+0x5ac>)
 80115da:	482d      	ldr	r0, [pc, #180]	; (8011690 <_strtod_l+0x5b0>)
 80115dc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80115e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80115e4:	ed91 7b00 	vldr	d7, [r1]
 80115e8:	ec4b ab16 	vmov	d6, sl, fp
 80115ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115f4:	9907      	ldr	r1, [sp, #28]
 80115f6:	4a27      	ldr	r2, [pc, #156]	; (8011694 <_strtod_l+0x5b4>)
 80115f8:	400a      	ands	r2, r1
 80115fa:	4282      	cmp	r2, r0
 80115fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011600:	d899      	bhi.n	8011536 <_strtod_l+0x456>
 8011602:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011606:	4282      	cmp	r2, r0
 8011608:	bf86      	itte	hi
 801160a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801169c <_strtod_l+0x5bc>
 801160e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011612:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8011616:	2700      	movs	r7, #0
 8011618:	e070      	b.n	80116fc <_strtod_l+0x61c>
 801161a:	07d7      	lsls	r7, r2, #31
 801161c:	d50a      	bpl.n	8011634 <_strtod_l+0x554>
 801161e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8011622:	ed90 7b00 	vldr	d7, [r0]
 8011626:	ed9d 6b06 	vldr	d6, [sp, #24]
 801162a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801162e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011632:	2001      	movs	r0, #1
 8011634:	3101      	adds	r1, #1
 8011636:	1052      	asrs	r2, r2, #1
 8011638:	e7c9      	b.n	80115ce <_strtod_l+0x4ee>
 801163a:	d0ec      	beq.n	8011616 <_strtod_l+0x536>
 801163c:	4252      	negs	r2, r2
 801163e:	f012 000f 	ands.w	r0, r2, #15
 8011642:	d00a      	beq.n	801165a <_strtod_l+0x57a>
 8011644:	4910      	ldr	r1, [pc, #64]	; (8011688 <_strtod_l+0x5a8>)
 8011646:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801164a:	ed91 7b00 	vldr	d7, [r1]
 801164e:	ec4b ab16 	vmov	d6, sl, fp
 8011652:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011656:	ec5b ab17 	vmov	sl, fp, d7
 801165a:	1112      	asrs	r2, r2, #4
 801165c:	d0db      	beq.n	8011616 <_strtod_l+0x536>
 801165e:	2a1f      	cmp	r2, #31
 8011660:	dd1e      	ble.n	80116a0 <_strtod_l+0x5c0>
 8011662:	2500      	movs	r5, #0
 8011664:	46a8      	mov	r8, r5
 8011666:	9506      	str	r5, [sp, #24]
 8011668:	46a9      	mov	r9, r5
 801166a:	2322      	movs	r3, #34	; 0x22
 801166c:	f04f 0a00 	mov.w	sl, #0
 8011670:	f04f 0b00 	mov.w	fp, #0
 8011674:	6023      	str	r3, [r4, #0]
 8011676:	e768      	b.n	801154a <_strtod_l+0x46a>
 8011678:	08015089 	.word	0x08015089
 801167c:	08015113 	.word	0x08015113
 8011680:	08015091 	.word	0x08015091
 8011684:	080150d4 	.word	0x080150d4
 8011688:	080151b8 	.word	0x080151b8
 801168c:	08015190 	.word	0x08015190
 8011690:	7ca00000 	.word	0x7ca00000
 8011694:	7ff00000 	.word	0x7ff00000
 8011698:	fff80000 	.word	0xfff80000
 801169c:	7fefffff 	.word	0x7fefffff
 80116a0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80116a4:	f012 0710 	ands.w	r7, r2, #16
 80116a8:	49ab      	ldr	r1, [pc, #684]	; (8011958 <_strtod_l+0x878>)
 80116aa:	bf18      	it	ne
 80116ac:	276a      	movne	r7, #106	; 0x6a
 80116ae:	2000      	movs	r0, #0
 80116b0:	2a00      	cmp	r2, #0
 80116b2:	f300 8113 	bgt.w	80118dc <_strtod_l+0x7fc>
 80116b6:	b108      	cbz	r0, 80116bc <_strtod_l+0x5dc>
 80116b8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80116bc:	b1bf      	cbz	r7, 80116ee <_strtod_l+0x60e>
 80116be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80116c2:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80116c6:	2a00      	cmp	r2, #0
 80116c8:	4659      	mov	r1, fp
 80116ca:	dd10      	ble.n	80116ee <_strtod_l+0x60e>
 80116cc:	2a1f      	cmp	r2, #31
 80116ce:	f340 8113 	ble.w	80118f8 <_strtod_l+0x818>
 80116d2:	2a34      	cmp	r2, #52	; 0x34
 80116d4:	bfde      	ittt	le
 80116d6:	3a20      	suble	r2, #32
 80116d8:	f04f 30ff 	movle.w	r0, #4294967295
 80116dc:	fa00 f202 	lslle.w	r2, r0, r2
 80116e0:	f04f 0a00 	mov.w	sl, #0
 80116e4:	bfcc      	ite	gt
 80116e6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80116ea:	ea02 0b01 	andle.w	fp, r2, r1
 80116ee:	ec4b ab17 	vmov	d7, sl, fp
 80116f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fa:	d0b2      	beq.n	8011662 <_strtod_l+0x582>
 80116fc:	9a08      	ldr	r2, [sp, #32]
 80116fe:	9200      	str	r2, [sp, #0]
 8011700:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011702:	462a      	mov	r2, r5
 8011704:	4620      	mov	r0, r4
 8011706:	f001 ffa3 	bl	8013650 <__s2b>
 801170a:	9006      	str	r0, [sp, #24]
 801170c:	2800      	cmp	r0, #0
 801170e:	f43f af12 	beq.w	8011536 <_strtod_l+0x456>
 8011712:	9a04      	ldr	r2, [sp, #16]
 8011714:	9b04      	ldr	r3, [sp, #16]
 8011716:	2a00      	cmp	r2, #0
 8011718:	f1c3 0300 	rsb	r3, r3, #0
 801171c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011940 <_strtod_l+0x860>
 8011720:	bfa8      	it	ge
 8011722:	2300      	movge	r3, #0
 8011724:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011948 <_strtod_l+0x868>
 8011728:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011950 <_strtod_l+0x870>
 801172c:	930e      	str	r3, [sp, #56]	; 0x38
 801172e:	2500      	movs	r5, #0
 8011730:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011734:	9310      	str	r3, [sp, #64]	; 0x40
 8011736:	46a8      	mov	r8, r5
 8011738:	9b06      	ldr	r3, [sp, #24]
 801173a:	4620      	mov	r0, r4
 801173c:	6859      	ldr	r1, [r3, #4]
 801173e:	f001 ff01 	bl	8013544 <_Balloc>
 8011742:	4681      	mov	r9, r0
 8011744:	2800      	cmp	r0, #0
 8011746:	f43f aefa 	beq.w	801153e <_strtod_l+0x45e>
 801174a:	9b06      	ldr	r3, [sp, #24]
 801174c:	691a      	ldr	r2, [r3, #16]
 801174e:	3202      	adds	r2, #2
 8011750:	f103 010c 	add.w	r1, r3, #12
 8011754:	0092      	lsls	r2, r2, #2
 8011756:	300c      	adds	r0, #12
 8011758:	f7fe fdfa 	bl	8010350 <memcpy>
 801175c:	aa1a      	add	r2, sp, #104	; 0x68
 801175e:	a919      	add	r1, sp, #100	; 0x64
 8011760:	ec4b ab10 	vmov	d0, sl, fp
 8011764:	4620      	mov	r0, r4
 8011766:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801176a:	f002 fa2d 	bl	8013bc8 <__d2b>
 801176e:	9018      	str	r0, [sp, #96]	; 0x60
 8011770:	2800      	cmp	r0, #0
 8011772:	f43f aee4 	beq.w	801153e <_strtod_l+0x45e>
 8011776:	2101      	movs	r1, #1
 8011778:	4620      	mov	r0, r4
 801177a:	f001 fff5 	bl	8013768 <__i2b>
 801177e:	4680      	mov	r8, r0
 8011780:	2800      	cmp	r0, #0
 8011782:	f43f aedc 	beq.w	801153e <_strtod_l+0x45e>
 8011786:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011788:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801178a:	2e00      	cmp	r6, #0
 801178c:	bfb1      	iteee	lt
 801178e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011790:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011792:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011794:	18f3      	addge	r3, r6, r3
 8011796:	bfba      	itte	lt
 8011798:	1b98      	sublt	r0, r3, r6
 801179a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801179c:	9308      	strge	r3, [sp, #32]
 801179e:	eba6 0607 	sub.w	r6, r6, r7
 80117a2:	bfb8      	it	lt
 80117a4:	9308      	strlt	r3, [sp, #32]
 80117a6:	4416      	add	r6, r2
 80117a8:	4b6c      	ldr	r3, [pc, #432]	; (801195c <_strtod_l+0x87c>)
 80117aa:	3e01      	subs	r6, #1
 80117ac:	429e      	cmp	r6, r3
 80117ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117b2:	f280 80b4 	bge.w	801191e <_strtod_l+0x83e>
 80117b6:	1b9b      	subs	r3, r3, r6
 80117b8:	2b1f      	cmp	r3, #31
 80117ba:	eba2 0203 	sub.w	r2, r2, r3
 80117be:	f04f 0101 	mov.w	r1, #1
 80117c2:	f300 80a0 	bgt.w	8011906 <_strtod_l+0x826>
 80117c6:	fa01 f303 	lsl.w	r3, r1, r3
 80117ca:	9311      	str	r3, [sp, #68]	; 0x44
 80117cc:	2300      	movs	r3, #0
 80117ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80117d0:	9b08      	ldr	r3, [sp, #32]
 80117d2:	4413      	add	r3, r2
 80117d4:	4402      	add	r2, r0
 80117d6:	18be      	adds	r6, r7, r2
 80117d8:	9a08      	ldr	r2, [sp, #32]
 80117da:	429a      	cmp	r2, r3
 80117dc:	bfa8      	it	ge
 80117de:	461a      	movge	r2, r3
 80117e0:	42b2      	cmp	r2, r6
 80117e2:	bfa8      	it	ge
 80117e4:	4632      	movge	r2, r6
 80117e6:	2a00      	cmp	r2, #0
 80117e8:	dd04      	ble.n	80117f4 <_strtod_l+0x714>
 80117ea:	9908      	ldr	r1, [sp, #32]
 80117ec:	1a9b      	subs	r3, r3, r2
 80117ee:	1ab6      	subs	r6, r6, r2
 80117f0:	1a8a      	subs	r2, r1, r2
 80117f2:	9208      	str	r2, [sp, #32]
 80117f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117f6:	b1c2      	cbz	r2, 801182a <_strtod_l+0x74a>
 80117f8:	4641      	mov	r1, r8
 80117fa:	4620      	mov	r0, r4
 80117fc:	9315      	str	r3, [sp, #84]	; 0x54
 80117fe:	f002 f853 	bl	80138a8 <__pow5mult>
 8011802:	4680      	mov	r8, r0
 8011804:	2800      	cmp	r0, #0
 8011806:	f43f ae9a 	beq.w	801153e <_strtod_l+0x45e>
 801180a:	4601      	mov	r1, r0
 801180c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801180e:	4620      	mov	r0, r4
 8011810:	f001 ffb3 	bl	801377a <__multiply>
 8011814:	900c      	str	r0, [sp, #48]	; 0x30
 8011816:	2800      	cmp	r0, #0
 8011818:	f43f ae91 	beq.w	801153e <_strtod_l+0x45e>
 801181c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801181e:	4620      	mov	r0, r4
 8011820:	f001 fec4 	bl	80135ac <_Bfree>
 8011824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011826:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011828:	9218      	str	r2, [sp, #96]	; 0x60
 801182a:	2b00      	cmp	r3, #0
 801182c:	dc7c      	bgt.n	8011928 <_strtod_l+0x848>
 801182e:	9b04      	ldr	r3, [sp, #16]
 8011830:	2b00      	cmp	r3, #0
 8011832:	dd08      	ble.n	8011846 <_strtod_l+0x766>
 8011834:	4649      	mov	r1, r9
 8011836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011838:	4620      	mov	r0, r4
 801183a:	f002 f835 	bl	80138a8 <__pow5mult>
 801183e:	4681      	mov	r9, r0
 8011840:	2800      	cmp	r0, #0
 8011842:	f43f ae7c 	beq.w	801153e <_strtod_l+0x45e>
 8011846:	2e00      	cmp	r6, #0
 8011848:	dd08      	ble.n	801185c <_strtod_l+0x77c>
 801184a:	4649      	mov	r1, r9
 801184c:	4632      	mov	r2, r6
 801184e:	4620      	mov	r0, r4
 8011850:	f002 f878 	bl	8013944 <__lshift>
 8011854:	4681      	mov	r9, r0
 8011856:	2800      	cmp	r0, #0
 8011858:	f43f ae71 	beq.w	801153e <_strtod_l+0x45e>
 801185c:	9b08      	ldr	r3, [sp, #32]
 801185e:	2b00      	cmp	r3, #0
 8011860:	dd08      	ble.n	8011874 <_strtod_l+0x794>
 8011862:	4641      	mov	r1, r8
 8011864:	461a      	mov	r2, r3
 8011866:	4620      	mov	r0, r4
 8011868:	f002 f86c 	bl	8013944 <__lshift>
 801186c:	4680      	mov	r8, r0
 801186e:	2800      	cmp	r0, #0
 8011870:	f43f ae65 	beq.w	801153e <_strtod_l+0x45e>
 8011874:	464a      	mov	r2, r9
 8011876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011878:	4620      	mov	r0, r4
 801187a:	f002 f8d1 	bl	8013a20 <__mdiff>
 801187e:	4605      	mov	r5, r0
 8011880:	2800      	cmp	r0, #0
 8011882:	f43f ae5c 	beq.w	801153e <_strtod_l+0x45e>
 8011886:	68c3      	ldr	r3, [r0, #12]
 8011888:	930c      	str	r3, [sp, #48]	; 0x30
 801188a:	2300      	movs	r3, #0
 801188c:	60c3      	str	r3, [r0, #12]
 801188e:	4641      	mov	r1, r8
 8011890:	f002 f8ac 	bl	80139ec <__mcmp>
 8011894:	2800      	cmp	r0, #0
 8011896:	da63      	bge.n	8011960 <_strtod_l+0x880>
 8011898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801189a:	b9e3      	cbnz	r3, 80118d6 <_strtod_l+0x7f6>
 801189c:	f1ba 0f00 	cmp.w	sl, #0
 80118a0:	d119      	bne.n	80118d6 <_strtod_l+0x7f6>
 80118a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118a6:	b9b3      	cbnz	r3, 80118d6 <_strtod_l+0x7f6>
 80118a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118ac:	0d1b      	lsrs	r3, r3, #20
 80118ae:	051b      	lsls	r3, r3, #20
 80118b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118b4:	d90f      	bls.n	80118d6 <_strtod_l+0x7f6>
 80118b6:	696b      	ldr	r3, [r5, #20]
 80118b8:	b913      	cbnz	r3, 80118c0 <_strtod_l+0x7e0>
 80118ba:	692b      	ldr	r3, [r5, #16]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	dd0a      	ble.n	80118d6 <_strtod_l+0x7f6>
 80118c0:	4629      	mov	r1, r5
 80118c2:	2201      	movs	r2, #1
 80118c4:	4620      	mov	r0, r4
 80118c6:	f002 f83d 	bl	8013944 <__lshift>
 80118ca:	4641      	mov	r1, r8
 80118cc:	4605      	mov	r5, r0
 80118ce:	f002 f88d 	bl	80139ec <__mcmp>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	dc75      	bgt.n	80119c2 <_strtod_l+0x8e2>
 80118d6:	2f00      	cmp	r7, #0
 80118d8:	d17f      	bne.n	80119da <_strtod_l+0x8fa>
 80118da:	e63a      	b.n	8011552 <_strtod_l+0x472>
 80118dc:	07d6      	lsls	r6, r2, #31
 80118de:	d508      	bpl.n	80118f2 <_strtod_l+0x812>
 80118e0:	ed9d 6b06 	vldr	d6, [sp, #24]
 80118e4:	ed91 7b00 	vldr	d7, [r1]
 80118e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80118ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118f0:	2001      	movs	r0, #1
 80118f2:	1052      	asrs	r2, r2, #1
 80118f4:	3108      	adds	r1, #8
 80118f6:	e6db      	b.n	80116b0 <_strtod_l+0x5d0>
 80118f8:	f04f 31ff 	mov.w	r1, #4294967295
 80118fc:	fa01 f202 	lsl.w	r2, r1, r2
 8011900:	ea02 0a0a 	and.w	sl, r2, sl
 8011904:	e6f3      	b.n	80116ee <_strtod_l+0x60e>
 8011906:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801190a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801190e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011912:	36e2      	adds	r6, #226	; 0xe2
 8011914:	fa01 f306 	lsl.w	r3, r1, r6
 8011918:	930f      	str	r3, [sp, #60]	; 0x3c
 801191a:	9111      	str	r1, [sp, #68]	; 0x44
 801191c:	e758      	b.n	80117d0 <_strtod_l+0x6f0>
 801191e:	2300      	movs	r3, #0
 8011920:	930f      	str	r3, [sp, #60]	; 0x3c
 8011922:	2301      	movs	r3, #1
 8011924:	9311      	str	r3, [sp, #68]	; 0x44
 8011926:	e753      	b.n	80117d0 <_strtod_l+0x6f0>
 8011928:	461a      	mov	r2, r3
 801192a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801192c:	4620      	mov	r0, r4
 801192e:	f002 f809 	bl	8013944 <__lshift>
 8011932:	9018      	str	r0, [sp, #96]	; 0x60
 8011934:	2800      	cmp	r0, #0
 8011936:	f47f af7a 	bne.w	801182e <_strtod_l+0x74e>
 801193a:	e600      	b.n	801153e <_strtod_l+0x45e>
 801193c:	f3af 8000 	nop.w
 8011940:	94a03595 	.word	0x94a03595
 8011944:	3fdfffff 	.word	0x3fdfffff
 8011948:	35afe535 	.word	0x35afe535
 801194c:	3fe00000 	.word	0x3fe00000
 8011950:	94a03595 	.word	0x94a03595
 8011954:	3fcfffff 	.word	0x3fcfffff
 8011958:	080150e8 	.word	0x080150e8
 801195c:	fffffc02 	.word	0xfffffc02
 8011960:	f8cd b020 	str.w	fp, [sp, #32]
 8011964:	f040 8085 	bne.w	8011a72 <_strtod_l+0x992>
 8011968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801196a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801196e:	b322      	cbz	r2, 80119ba <_strtod_l+0x8da>
 8011970:	4ab7      	ldr	r2, [pc, #732]	; (8011c50 <_strtod_l+0xb70>)
 8011972:	4293      	cmp	r3, r2
 8011974:	d154      	bne.n	8011a20 <_strtod_l+0x940>
 8011976:	4651      	mov	r1, sl
 8011978:	b1e7      	cbz	r7, 80119b4 <_strtod_l+0x8d4>
 801197a:	4bb6      	ldr	r3, [pc, #728]	; (8011c54 <_strtod_l+0xb74>)
 801197c:	465a      	mov	r2, fp
 801197e:	4013      	ands	r3, r2
 8011980:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011984:	f04f 32ff 	mov.w	r2, #4294967295
 8011988:	d803      	bhi.n	8011992 <_strtod_l+0x8b2>
 801198a:	0d1b      	lsrs	r3, r3, #20
 801198c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011990:	409a      	lsls	r2, r3
 8011992:	4291      	cmp	r1, r2
 8011994:	d144      	bne.n	8011a20 <_strtod_l+0x940>
 8011996:	4bb0      	ldr	r3, [pc, #704]	; (8011c58 <_strtod_l+0xb78>)
 8011998:	9a08      	ldr	r2, [sp, #32]
 801199a:	429a      	cmp	r2, r3
 801199c:	d102      	bne.n	80119a4 <_strtod_l+0x8c4>
 801199e:	3101      	adds	r1, #1
 80119a0:	f43f adcd 	beq.w	801153e <_strtod_l+0x45e>
 80119a4:	4bab      	ldr	r3, [pc, #684]	; (8011c54 <_strtod_l+0xb74>)
 80119a6:	9a08      	ldr	r2, [sp, #32]
 80119a8:	401a      	ands	r2, r3
 80119aa:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80119ae:	f04f 0a00 	mov.w	sl, #0
 80119b2:	e790      	b.n	80118d6 <_strtod_l+0x7f6>
 80119b4:	f04f 32ff 	mov.w	r2, #4294967295
 80119b8:	e7eb      	b.n	8011992 <_strtod_l+0x8b2>
 80119ba:	bb8b      	cbnz	r3, 8011a20 <_strtod_l+0x940>
 80119bc:	f1ba 0f00 	cmp.w	sl, #0
 80119c0:	d12e      	bne.n	8011a20 <_strtod_l+0x940>
 80119c2:	465b      	mov	r3, fp
 80119c4:	4aa3      	ldr	r2, [pc, #652]	; (8011c54 <_strtod_l+0xb74>)
 80119c6:	b30f      	cbz	r7, 8011a0c <_strtod_l+0x92c>
 80119c8:	ea02 010b 	and.w	r1, r2, fp
 80119cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80119d0:	dc1c      	bgt.n	8011a0c <_strtod_l+0x92c>
 80119d2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80119d6:	f77f ae48 	ble.w	801166a <_strtod_l+0x58a>
 80119da:	4aa0      	ldr	r2, [pc, #640]	; (8011c5c <_strtod_l+0xb7c>)
 80119dc:	2300      	movs	r3, #0
 80119de:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80119e2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80119e6:	ec4b ab17 	vmov	d7, sl, fp
 80119ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80119f2:	9b05      	ldr	r3, [sp, #20]
 80119f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f47f adaa 	bne.w	8011552 <_strtod_l+0x472>
 80119fe:	9b04      	ldr	r3, [sp, #16]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	f47f ada6 	bne.w	8011552 <_strtod_l+0x472>
 8011a06:	2322      	movs	r3, #34	; 0x22
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	e5a2      	b.n	8011552 <_strtod_l+0x472>
 8011a0c:	4013      	ands	r3, r2
 8011a0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a12:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011a1a:	f04f 3aff 	mov.w	sl, #4294967295
 8011a1e:	e75a      	b.n	80118d6 <_strtod_l+0x7f6>
 8011a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a22:	b18b      	cbz	r3, 8011a48 <_strtod_l+0x968>
 8011a24:	9a08      	ldr	r2, [sp, #32]
 8011a26:	4213      	tst	r3, r2
 8011a28:	f43f af55 	beq.w	80118d6 <_strtod_l+0x7f6>
 8011a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a2e:	463a      	mov	r2, r7
 8011a30:	4650      	mov	r0, sl
 8011a32:	4659      	mov	r1, fp
 8011a34:	b163      	cbz	r3, 8011a50 <_strtod_l+0x970>
 8011a36:	f7ff fb39 	bl	80110ac <sulp>
 8011a3a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011a3e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8011a42:	ec5b ab17 	vmov	sl, fp, d7
 8011a46:	e746      	b.n	80118d6 <_strtod_l+0x7f6>
 8011a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a4a:	ea13 0f0a 	tst.w	r3, sl
 8011a4e:	e7eb      	b.n	8011a28 <_strtod_l+0x948>
 8011a50:	f7ff fb2c 	bl	80110ac <sulp>
 8011a54:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011a58:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011a5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a68:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011a6c:	f43f adfd 	beq.w	801166a <_strtod_l+0x58a>
 8011a70:	e731      	b.n	80118d6 <_strtod_l+0x7f6>
 8011a72:	4641      	mov	r1, r8
 8011a74:	4628      	mov	r0, r5
 8011a76:	f002 f8f6 	bl	8013c66 <__ratio>
 8011a7a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011a7e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a86:	d869      	bhi.n	8011b5c <_strtod_l+0xa7c>
 8011a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d045      	beq.n	8011b1a <_strtod_l+0xa3a>
 8011a8e:	4b74      	ldr	r3, [pc, #464]	; (8011c60 <_strtod_l+0xb80>)
 8011a90:	2200      	movs	r2, #0
 8011a92:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8011a96:	9808      	ldr	r0, [sp, #32]
 8011a98:	496e      	ldr	r1, [pc, #440]	; (8011c54 <_strtod_l+0xb74>)
 8011a9a:	ea00 0601 	and.w	r6, r0, r1
 8011a9e:	4871      	ldr	r0, [pc, #452]	; (8011c64 <_strtod_l+0xb84>)
 8011aa0:	4286      	cmp	r6, r0
 8011aa2:	f040 8089 	bne.w	8011bb8 <_strtod_l+0xad8>
 8011aa6:	910f      	str	r1, [sp, #60]	; 0x3c
 8011aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011aac:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011ab0:	9908      	ldr	r1, [sp, #32]
 8011ab2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8011ab6:	ec4b ab10 	vmov	d0, sl, fp
 8011aba:	ec43 2b1c 	vmov	d12, r2, r3
 8011abe:	f002 f80d 	bl	8013adc <__ulp>
 8011ac2:	ec4b ab1d 	vmov	d13, sl, fp
 8011ac6:	eeac db00 	vfma.f64	d13, d12, d0
 8011aca:	ed8d db08 	vstr	d13, [sp, #32]
 8011ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011ad2:	4a65      	ldr	r2, [pc, #404]	; (8011c68 <_strtod_l+0xb88>)
 8011ad4:	4019      	ands	r1, r3
 8011ad6:	4291      	cmp	r1, r2
 8011ad8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8011adc:	d948      	bls.n	8011b70 <_strtod_l+0xa90>
 8011ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ae0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d103      	bne.n	8011af0 <_strtod_l+0xa10>
 8011ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aea:	3301      	adds	r3, #1
 8011aec:	f43f ad27 	beq.w	801153e <_strtod_l+0x45e>
 8011af0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8011c58 <_strtod_l+0xb78>
 8011af4:	f04f 3aff 	mov.w	sl, #4294967295
 8011af8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011afa:	4620      	mov	r0, r4
 8011afc:	f001 fd56 	bl	80135ac <_Bfree>
 8011b00:	4649      	mov	r1, r9
 8011b02:	4620      	mov	r0, r4
 8011b04:	f001 fd52 	bl	80135ac <_Bfree>
 8011b08:	4641      	mov	r1, r8
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f001 fd4e 	bl	80135ac <_Bfree>
 8011b10:	4629      	mov	r1, r5
 8011b12:	4620      	mov	r0, r4
 8011b14:	f001 fd4a 	bl	80135ac <_Bfree>
 8011b18:	e60e      	b.n	8011738 <_strtod_l+0x658>
 8011b1a:	f1ba 0f00 	cmp.w	sl, #0
 8011b1e:	d113      	bne.n	8011b48 <_strtod_l+0xa68>
 8011b20:	9b08      	ldr	r3, [sp, #32]
 8011b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b26:	b9b3      	cbnz	r3, 8011b56 <_strtod_l+0xa76>
 8011b28:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011b2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b34:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011b38:	d401      	bmi.n	8011b3e <_strtod_l+0xa5e>
 8011b3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011b3e:	eeb1 7b48 	vneg.f64	d7, d8
 8011b42:	ec53 2b17 	vmov	r2, r3, d7
 8011b46:	e7a6      	b.n	8011a96 <_strtod_l+0x9b6>
 8011b48:	f1ba 0f01 	cmp.w	sl, #1
 8011b4c:	d103      	bne.n	8011b56 <_strtod_l+0xa76>
 8011b4e:	9b08      	ldr	r3, [sp, #32]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	f43f ad8a 	beq.w	801166a <_strtod_l+0x58a>
 8011b56:	2200      	movs	r2, #0
 8011b58:	4b44      	ldr	r3, [pc, #272]	; (8011c6c <_strtod_l+0xb8c>)
 8011b5a:	e79a      	b.n	8011a92 <_strtod_l+0x9b2>
 8011b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b5e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011b62:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d0e9      	beq.n	8011b3e <_strtod_l+0xa5e>
 8011b6a:	ec53 2b18 	vmov	r2, r3, d8
 8011b6e:	e792      	b.n	8011a96 <_strtod_l+0x9b6>
 8011b70:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011b74:	2f00      	cmp	r7, #0
 8011b76:	d1bf      	bne.n	8011af8 <_strtod_l+0xa18>
 8011b78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b7c:	0d1b      	lsrs	r3, r3, #20
 8011b7e:	051b      	lsls	r3, r3, #20
 8011b80:	429e      	cmp	r6, r3
 8011b82:	d1b9      	bne.n	8011af8 <_strtod_l+0xa18>
 8011b84:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8011b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b8a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8011b8e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011b92:	b92b      	cbnz	r3, 8011ba0 <_strtod_l+0xac0>
 8011b94:	f1ba 0f00 	cmp.w	sl, #0
 8011b98:	d102      	bne.n	8011ba0 <_strtod_l+0xac0>
 8011b9a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8011b9e:	b3d2      	cbz	r2, 8011c16 <_strtod_l+0xb36>
 8011ba0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba8:	f53f acd3 	bmi.w	8011552 <_strtod_l+0x472>
 8011bac:	eeb4 8bca 	vcmpe.f64	d8, d10
 8011bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb4:	dda0      	ble.n	8011af8 <_strtod_l+0xa18>
 8011bb6:	e4cc      	b.n	8011552 <_strtod_l+0x472>
 8011bb8:	b1ef      	cbz	r7, 8011bf6 <_strtod_l+0xb16>
 8011bba:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8011bbe:	d81a      	bhi.n	8011bf6 <_strtod_l+0xb16>
 8011bc0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011c48 <_strtod_l+0xb68>
 8011bc4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	d810      	bhi.n	8011bf0 <_strtod_l+0xb10>
 8011bce:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8011bd2:	ee17 3a90 	vmov	r3, s15
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	bf08      	it	eq
 8011bda:	2301      	moveq	r3, #1
 8011bdc:	ee07 3a90 	vmov	s15, r3
 8011be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011be2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8011be6:	b99b      	cbnz	r3, 8011c10 <_strtod_l+0xb30>
 8011be8:	eeb1 7b48 	vneg.f64	d7, d8
 8011bec:	ec53 2b17 	vmov	r2, r3, d7
 8011bf0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8011bf4:	1b8b      	subs	r3, r1, r6
 8011bf6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011bfa:	ec43 2b1c 	vmov	d12, r2, r3
 8011bfe:	f001 ff6d 	bl	8013adc <__ulp>
 8011c02:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8011c06:	eeac 7b00 	vfma.f64	d7, d12, d0
 8011c0a:	ec5b ab17 	vmov	sl, fp, d7
 8011c0e:	e7b1      	b.n	8011b74 <_strtod_l+0xa94>
 8011c10:	ec53 2b18 	vmov	r2, r3, d8
 8011c14:	e7ec      	b.n	8011bf0 <_strtod_l+0xb10>
 8011c16:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	f57f af6b 	bpl.w	8011af8 <_strtod_l+0xa18>
 8011c22:	e496      	b.n	8011552 <_strtod_l+0x472>
 8011c24:	2300      	movs	r3, #0
 8011c26:	930d      	str	r3, [sp, #52]	; 0x34
 8011c28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c2c:	6013      	str	r3, [r2, #0]
 8011c2e:	f7ff ba9d 	b.w	801116c <_strtod_l+0x8c>
 8011c32:	2a65      	cmp	r2, #101	; 0x65
 8011c34:	f04f 0100 	mov.w	r1, #0
 8011c38:	f43f ab97 	beq.w	801136a <_strtod_l+0x28a>
 8011c3c:	2701      	movs	r7, #1
 8011c3e:	460b      	mov	r3, r1
 8011c40:	9704      	str	r7, [sp, #16]
 8011c42:	f7ff bb0a 	b.w	801125a <_strtod_l+0x17a>
 8011c46:	bf00      	nop
 8011c48:	ffc00000 	.word	0xffc00000
 8011c4c:	41dfffff 	.word	0x41dfffff
 8011c50:	000fffff 	.word	0x000fffff
 8011c54:	7ff00000 	.word	0x7ff00000
 8011c58:	7fefffff 	.word	0x7fefffff
 8011c5c:	39500000 	.word	0x39500000
 8011c60:	3ff00000 	.word	0x3ff00000
 8011c64:	7fe00000 	.word	0x7fe00000
 8011c68:	7c9fffff 	.word	0x7c9fffff
 8011c6c:	bff00000 	.word	0xbff00000

08011c70 <_strtod_r>:
 8011c70:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <_strtod_r+0x18>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	b410      	push	{r4}
 8011c76:	6a1b      	ldr	r3, [r3, #32]
 8011c78:	4c04      	ldr	r4, [pc, #16]	; (8011c8c <_strtod_r+0x1c>)
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	bf08      	it	eq
 8011c7e:	4623      	moveq	r3, r4
 8011c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c84:	f7ff ba2c 	b.w	80110e0 <_strtod_l>
 8011c88:	20000198 	.word	0x20000198
 8011c8c:	200001fc 	.word	0x200001fc

08011c90 <_strtol_l.isra.0>:
 8011c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c94:	4680      	mov	r8, r0
 8011c96:	4689      	mov	r9, r1
 8011c98:	4692      	mov	sl, r2
 8011c9a:	461e      	mov	r6, r3
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	463d      	mov	r5, r7
 8011ca0:	9808      	ldr	r0, [sp, #32]
 8011ca2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ca6:	f001 fbbb 	bl	8013420 <__locale_ctype_ptr_l>
 8011caa:	4420      	add	r0, r4
 8011cac:	7843      	ldrb	r3, [r0, #1]
 8011cae:	f013 0308 	ands.w	r3, r3, #8
 8011cb2:	d132      	bne.n	8011d1a <_strtol_l.isra.0+0x8a>
 8011cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8011cb6:	d132      	bne.n	8011d1e <_strtol_l.isra.0+0x8e>
 8011cb8:	787c      	ldrb	r4, [r7, #1]
 8011cba:	1cbd      	adds	r5, r7, #2
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	2e00      	cmp	r6, #0
 8011cc0:	d05d      	beq.n	8011d7e <_strtol_l.isra.0+0xee>
 8011cc2:	2e10      	cmp	r6, #16
 8011cc4:	d109      	bne.n	8011cda <_strtol_l.isra.0+0x4a>
 8011cc6:	2c30      	cmp	r4, #48	; 0x30
 8011cc8:	d107      	bne.n	8011cda <_strtol_l.isra.0+0x4a>
 8011cca:	782b      	ldrb	r3, [r5, #0]
 8011ccc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011cd0:	2b58      	cmp	r3, #88	; 0x58
 8011cd2:	d14f      	bne.n	8011d74 <_strtol_l.isra.0+0xe4>
 8011cd4:	786c      	ldrb	r4, [r5, #1]
 8011cd6:	2610      	movs	r6, #16
 8011cd8:	3502      	adds	r5, #2
 8011cda:	2a00      	cmp	r2, #0
 8011cdc:	bf14      	ite	ne
 8011cde:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011ce2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011ce6:	2700      	movs	r7, #0
 8011ce8:	fbb1 fcf6 	udiv	ip, r1, r6
 8011cec:	4638      	mov	r0, r7
 8011cee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011cf2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011cf6:	2b09      	cmp	r3, #9
 8011cf8:	d817      	bhi.n	8011d2a <_strtol_l.isra.0+0x9a>
 8011cfa:	461c      	mov	r4, r3
 8011cfc:	42a6      	cmp	r6, r4
 8011cfe:	dd23      	ble.n	8011d48 <_strtol_l.isra.0+0xb8>
 8011d00:	1c7b      	adds	r3, r7, #1
 8011d02:	d007      	beq.n	8011d14 <_strtol_l.isra.0+0x84>
 8011d04:	4584      	cmp	ip, r0
 8011d06:	d31c      	bcc.n	8011d42 <_strtol_l.isra.0+0xb2>
 8011d08:	d101      	bne.n	8011d0e <_strtol_l.isra.0+0x7e>
 8011d0a:	45a6      	cmp	lr, r4
 8011d0c:	db19      	blt.n	8011d42 <_strtol_l.isra.0+0xb2>
 8011d0e:	fb00 4006 	mla	r0, r0, r6, r4
 8011d12:	2701      	movs	r7, #1
 8011d14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d18:	e7eb      	b.n	8011cf2 <_strtol_l.isra.0+0x62>
 8011d1a:	462f      	mov	r7, r5
 8011d1c:	e7bf      	b.n	8011c9e <_strtol_l.isra.0+0xe>
 8011d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8011d20:	bf04      	itt	eq
 8011d22:	1cbd      	addeq	r5, r7, #2
 8011d24:	787c      	ldrbeq	r4, [r7, #1]
 8011d26:	461a      	mov	r2, r3
 8011d28:	e7c9      	b.n	8011cbe <_strtol_l.isra.0+0x2e>
 8011d2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011d2e:	2b19      	cmp	r3, #25
 8011d30:	d801      	bhi.n	8011d36 <_strtol_l.isra.0+0xa6>
 8011d32:	3c37      	subs	r4, #55	; 0x37
 8011d34:	e7e2      	b.n	8011cfc <_strtol_l.isra.0+0x6c>
 8011d36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011d3a:	2b19      	cmp	r3, #25
 8011d3c:	d804      	bhi.n	8011d48 <_strtol_l.isra.0+0xb8>
 8011d3e:	3c57      	subs	r4, #87	; 0x57
 8011d40:	e7dc      	b.n	8011cfc <_strtol_l.isra.0+0x6c>
 8011d42:	f04f 37ff 	mov.w	r7, #4294967295
 8011d46:	e7e5      	b.n	8011d14 <_strtol_l.isra.0+0x84>
 8011d48:	1c7b      	adds	r3, r7, #1
 8011d4a:	d108      	bne.n	8011d5e <_strtol_l.isra.0+0xce>
 8011d4c:	2322      	movs	r3, #34	; 0x22
 8011d4e:	f8c8 3000 	str.w	r3, [r8]
 8011d52:	4608      	mov	r0, r1
 8011d54:	f1ba 0f00 	cmp.w	sl, #0
 8011d58:	d107      	bne.n	8011d6a <_strtol_l.isra.0+0xda>
 8011d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d5e:	b102      	cbz	r2, 8011d62 <_strtol_l.isra.0+0xd2>
 8011d60:	4240      	negs	r0, r0
 8011d62:	f1ba 0f00 	cmp.w	sl, #0
 8011d66:	d0f8      	beq.n	8011d5a <_strtol_l.isra.0+0xca>
 8011d68:	b10f      	cbz	r7, 8011d6e <_strtol_l.isra.0+0xde>
 8011d6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8011d6e:	f8ca 9000 	str.w	r9, [sl]
 8011d72:	e7f2      	b.n	8011d5a <_strtol_l.isra.0+0xca>
 8011d74:	2430      	movs	r4, #48	; 0x30
 8011d76:	2e00      	cmp	r6, #0
 8011d78:	d1af      	bne.n	8011cda <_strtol_l.isra.0+0x4a>
 8011d7a:	2608      	movs	r6, #8
 8011d7c:	e7ad      	b.n	8011cda <_strtol_l.isra.0+0x4a>
 8011d7e:	2c30      	cmp	r4, #48	; 0x30
 8011d80:	d0a3      	beq.n	8011cca <_strtol_l.isra.0+0x3a>
 8011d82:	260a      	movs	r6, #10
 8011d84:	e7a9      	b.n	8011cda <_strtol_l.isra.0+0x4a>
	...

08011d88 <_strtol_r>:
 8011d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d8a:	4c06      	ldr	r4, [pc, #24]	; (8011da4 <_strtol_r+0x1c>)
 8011d8c:	4d06      	ldr	r5, [pc, #24]	; (8011da8 <_strtol_r+0x20>)
 8011d8e:	6824      	ldr	r4, [r4, #0]
 8011d90:	6a24      	ldr	r4, [r4, #32]
 8011d92:	2c00      	cmp	r4, #0
 8011d94:	bf08      	it	eq
 8011d96:	462c      	moveq	r4, r5
 8011d98:	9400      	str	r4, [sp, #0]
 8011d9a:	f7ff ff79 	bl	8011c90 <_strtol_l.isra.0>
 8011d9e:	b003      	add	sp, #12
 8011da0:	bd30      	pop	{r4, r5, pc}
 8011da2:	bf00      	nop
 8011da4:	20000198 	.word	0x20000198
 8011da8:	200001fc 	.word	0x200001fc

08011dac <__swbuf_r>:
 8011dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dae:	460e      	mov	r6, r1
 8011db0:	4614      	mov	r4, r2
 8011db2:	4605      	mov	r5, r0
 8011db4:	b118      	cbz	r0, 8011dbe <__swbuf_r+0x12>
 8011db6:	6983      	ldr	r3, [r0, #24]
 8011db8:	b90b      	cbnz	r3, 8011dbe <__swbuf_r+0x12>
 8011dba:	f000 ff81 	bl	8012cc0 <__sinit>
 8011dbe:	4b21      	ldr	r3, [pc, #132]	; (8011e44 <__swbuf_r+0x98>)
 8011dc0:	429c      	cmp	r4, r3
 8011dc2:	d12a      	bne.n	8011e1a <__swbuf_r+0x6e>
 8011dc4:	686c      	ldr	r4, [r5, #4]
 8011dc6:	69a3      	ldr	r3, [r4, #24]
 8011dc8:	60a3      	str	r3, [r4, #8]
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	071a      	lsls	r2, r3, #28
 8011dce:	d52e      	bpl.n	8011e2e <__swbuf_r+0x82>
 8011dd0:	6923      	ldr	r3, [r4, #16]
 8011dd2:	b363      	cbz	r3, 8011e2e <__swbuf_r+0x82>
 8011dd4:	6923      	ldr	r3, [r4, #16]
 8011dd6:	6820      	ldr	r0, [r4, #0]
 8011dd8:	1ac0      	subs	r0, r0, r3
 8011dda:	6963      	ldr	r3, [r4, #20]
 8011ddc:	b2f6      	uxtb	r6, r6
 8011dde:	4283      	cmp	r3, r0
 8011de0:	4637      	mov	r7, r6
 8011de2:	dc04      	bgt.n	8011dee <__swbuf_r+0x42>
 8011de4:	4621      	mov	r1, r4
 8011de6:	4628      	mov	r0, r5
 8011de8:	f000 ff00 	bl	8012bec <_fflush_r>
 8011dec:	bb28      	cbnz	r0, 8011e3a <__swbuf_r+0x8e>
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	3b01      	subs	r3, #1
 8011df2:	60a3      	str	r3, [r4, #8]
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	1c5a      	adds	r2, r3, #1
 8011df8:	6022      	str	r2, [r4, #0]
 8011dfa:	701e      	strb	r6, [r3, #0]
 8011dfc:	6963      	ldr	r3, [r4, #20]
 8011dfe:	3001      	adds	r0, #1
 8011e00:	4283      	cmp	r3, r0
 8011e02:	d004      	beq.n	8011e0e <__swbuf_r+0x62>
 8011e04:	89a3      	ldrh	r3, [r4, #12]
 8011e06:	07db      	lsls	r3, r3, #31
 8011e08:	d519      	bpl.n	8011e3e <__swbuf_r+0x92>
 8011e0a:	2e0a      	cmp	r6, #10
 8011e0c:	d117      	bne.n	8011e3e <__swbuf_r+0x92>
 8011e0e:	4621      	mov	r1, r4
 8011e10:	4628      	mov	r0, r5
 8011e12:	f000 feeb 	bl	8012bec <_fflush_r>
 8011e16:	b190      	cbz	r0, 8011e3e <__swbuf_r+0x92>
 8011e18:	e00f      	b.n	8011e3a <__swbuf_r+0x8e>
 8011e1a:	4b0b      	ldr	r3, [pc, #44]	; (8011e48 <__swbuf_r+0x9c>)
 8011e1c:	429c      	cmp	r4, r3
 8011e1e:	d101      	bne.n	8011e24 <__swbuf_r+0x78>
 8011e20:	68ac      	ldr	r4, [r5, #8]
 8011e22:	e7d0      	b.n	8011dc6 <__swbuf_r+0x1a>
 8011e24:	4b09      	ldr	r3, [pc, #36]	; (8011e4c <__swbuf_r+0xa0>)
 8011e26:	429c      	cmp	r4, r3
 8011e28:	bf08      	it	eq
 8011e2a:	68ec      	ldreq	r4, [r5, #12]
 8011e2c:	e7cb      	b.n	8011dc6 <__swbuf_r+0x1a>
 8011e2e:	4621      	mov	r1, r4
 8011e30:	4628      	mov	r0, r5
 8011e32:	f000 f80d 	bl	8011e50 <__swsetup_r>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d0cc      	beq.n	8011dd4 <__swbuf_r+0x28>
 8011e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8011e3e:	4638      	mov	r0, r7
 8011e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e42:	bf00      	nop
 8011e44:	08015140 	.word	0x08015140
 8011e48:	08015160 	.word	0x08015160
 8011e4c:	08015120 	.word	0x08015120

08011e50 <__swsetup_r>:
 8011e50:	4b32      	ldr	r3, [pc, #200]	; (8011f1c <__swsetup_r+0xcc>)
 8011e52:	b570      	push	{r4, r5, r6, lr}
 8011e54:	681d      	ldr	r5, [r3, #0]
 8011e56:	4606      	mov	r6, r0
 8011e58:	460c      	mov	r4, r1
 8011e5a:	b125      	cbz	r5, 8011e66 <__swsetup_r+0x16>
 8011e5c:	69ab      	ldr	r3, [r5, #24]
 8011e5e:	b913      	cbnz	r3, 8011e66 <__swsetup_r+0x16>
 8011e60:	4628      	mov	r0, r5
 8011e62:	f000 ff2d 	bl	8012cc0 <__sinit>
 8011e66:	4b2e      	ldr	r3, [pc, #184]	; (8011f20 <__swsetup_r+0xd0>)
 8011e68:	429c      	cmp	r4, r3
 8011e6a:	d10f      	bne.n	8011e8c <__swsetup_r+0x3c>
 8011e6c:	686c      	ldr	r4, [r5, #4]
 8011e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	0715      	lsls	r5, r2, #28
 8011e76:	d42c      	bmi.n	8011ed2 <__swsetup_r+0x82>
 8011e78:	06d0      	lsls	r0, r2, #27
 8011e7a:	d411      	bmi.n	8011ea0 <__swsetup_r+0x50>
 8011e7c:	2209      	movs	r2, #9
 8011e7e:	6032      	str	r2, [r6, #0]
 8011e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e84:	81a3      	strh	r3, [r4, #12]
 8011e86:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8a:	e03e      	b.n	8011f0a <__swsetup_r+0xba>
 8011e8c:	4b25      	ldr	r3, [pc, #148]	; (8011f24 <__swsetup_r+0xd4>)
 8011e8e:	429c      	cmp	r4, r3
 8011e90:	d101      	bne.n	8011e96 <__swsetup_r+0x46>
 8011e92:	68ac      	ldr	r4, [r5, #8]
 8011e94:	e7eb      	b.n	8011e6e <__swsetup_r+0x1e>
 8011e96:	4b24      	ldr	r3, [pc, #144]	; (8011f28 <__swsetup_r+0xd8>)
 8011e98:	429c      	cmp	r4, r3
 8011e9a:	bf08      	it	eq
 8011e9c:	68ec      	ldreq	r4, [r5, #12]
 8011e9e:	e7e6      	b.n	8011e6e <__swsetup_r+0x1e>
 8011ea0:	0751      	lsls	r1, r2, #29
 8011ea2:	d512      	bpl.n	8011eca <__swsetup_r+0x7a>
 8011ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ea6:	b141      	cbz	r1, 8011eba <__swsetup_r+0x6a>
 8011ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011eac:	4299      	cmp	r1, r3
 8011eae:	d002      	beq.n	8011eb6 <__swsetup_r+0x66>
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	f001 ff55 	bl	8013d60 <_free_r>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8011eba:	89a3      	ldrh	r3, [r4, #12]
 8011ebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ec0:	81a3      	strh	r3, [r4, #12]
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	6063      	str	r3, [r4, #4]
 8011ec6:	6923      	ldr	r3, [r4, #16]
 8011ec8:	6023      	str	r3, [r4, #0]
 8011eca:	89a3      	ldrh	r3, [r4, #12]
 8011ecc:	f043 0308 	orr.w	r3, r3, #8
 8011ed0:	81a3      	strh	r3, [r4, #12]
 8011ed2:	6923      	ldr	r3, [r4, #16]
 8011ed4:	b94b      	cbnz	r3, 8011eea <__swsetup_r+0x9a>
 8011ed6:	89a3      	ldrh	r3, [r4, #12]
 8011ed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ee0:	d003      	beq.n	8011eea <__swsetup_r+0x9a>
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f001 fad3 	bl	8013490 <__smakebuf_r>
 8011eea:	89a2      	ldrh	r2, [r4, #12]
 8011eec:	f012 0301 	ands.w	r3, r2, #1
 8011ef0:	d00c      	beq.n	8011f0c <__swsetup_r+0xbc>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60a3      	str	r3, [r4, #8]
 8011ef6:	6963      	ldr	r3, [r4, #20]
 8011ef8:	425b      	negs	r3, r3
 8011efa:	61a3      	str	r3, [r4, #24]
 8011efc:	6923      	ldr	r3, [r4, #16]
 8011efe:	b953      	cbnz	r3, 8011f16 <__swsetup_r+0xc6>
 8011f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011f08:	d1ba      	bne.n	8011e80 <__swsetup_r+0x30>
 8011f0a:	bd70      	pop	{r4, r5, r6, pc}
 8011f0c:	0792      	lsls	r2, r2, #30
 8011f0e:	bf58      	it	pl
 8011f10:	6963      	ldrpl	r3, [r4, #20]
 8011f12:	60a3      	str	r3, [r4, #8]
 8011f14:	e7f2      	b.n	8011efc <__swsetup_r+0xac>
 8011f16:	2000      	movs	r0, #0
 8011f18:	e7f7      	b.n	8011f0a <__swsetup_r+0xba>
 8011f1a:	bf00      	nop
 8011f1c:	20000198 	.word	0x20000198
 8011f20:	08015140 	.word	0x08015140
 8011f24:	08015160 	.word	0x08015160
 8011f28:	08015120 	.word	0x08015120

08011f2c <quorem>:
 8011f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f30:	6903      	ldr	r3, [r0, #16]
 8011f32:	690c      	ldr	r4, [r1, #16]
 8011f34:	42a3      	cmp	r3, r4
 8011f36:	4680      	mov	r8, r0
 8011f38:	f2c0 8082 	blt.w	8012040 <quorem+0x114>
 8011f3c:	3c01      	subs	r4, #1
 8011f3e:	f101 0714 	add.w	r7, r1, #20
 8011f42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011f46:	f100 0614 	add.w	r6, r0, #20
 8011f4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011f4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011f52:	eb06 030c 	add.w	r3, r6, ip
 8011f56:	3501      	adds	r5, #1
 8011f58:	eb07 090c 	add.w	r9, r7, ip
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8011f62:	b395      	cbz	r5, 8011fca <quorem+0x9e>
 8011f64:	f04f 0a00 	mov.w	sl, #0
 8011f68:	4638      	mov	r0, r7
 8011f6a:	46b6      	mov	lr, r6
 8011f6c:	46d3      	mov	fp, sl
 8011f6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f72:	b293      	uxth	r3, r2
 8011f74:	fb05 a303 	mla	r3, r5, r3, sl
 8011f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	ebab 0303 	sub.w	r3, fp, r3
 8011f82:	0c12      	lsrs	r2, r2, #16
 8011f84:	f8de b000 	ldr.w	fp, [lr]
 8011f88:	fb05 a202 	mla	r2, r5, r2, sl
 8011f8c:	fa13 f38b 	uxtah	r3, r3, fp
 8011f90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011f94:	fa1f fb82 	uxth.w	fp, r2
 8011f98:	f8de 2000 	ldr.w	r2, [lr]
 8011f9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011faa:	4581      	cmp	r9, r0
 8011fac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011fb0:	f84e 3b04 	str.w	r3, [lr], #4
 8011fb4:	d2db      	bcs.n	8011f6e <quorem+0x42>
 8011fb6:	f856 300c 	ldr.w	r3, [r6, ip]
 8011fba:	b933      	cbnz	r3, 8011fca <quorem+0x9e>
 8011fbc:	9b01      	ldr	r3, [sp, #4]
 8011fbe:	3b04      	subs	r3, #4
 8011fc0:	429e      	cmp	r6, r3
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	d330      	bcc.n	8012028 <quorem+0xfc>
 8011fc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8011fca:	4640      	mov	r0, r8
 8011fcc:	f001 fd0e 	bl	80139ec <__mcmp>
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	db25      	blt.n	8012020 <quorem+0xf4>
 8011fd4:	3501      	adds	r5, #1
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	f04f 0c00 	mov.w	ip, #0
 8011fdc:	f857 2b04 	ldr.w	r2, [r7], #4
 8011fe0:	f8d0 e000 	ldr.w	lr, [r0]
 8011fe4:	b293      	uxth	r3, r2
 8011fe6:	ebac 0303 	sub.w	r3, ip, r3
 8011fea:	0c12      	lsrs	r2, r2, #16
 8011fec:	fa13 f38e 	uxtah	r3, r3, lr
 8011ff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ffe:	45b9      	cmp	r9, r7
 8012000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012004:	f840 3b04 	str.w	r3, [r0], #4
 8012008:	d2e8      	bcs.n	8011fdc <quorem+0xb0>
 801200a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801200e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012012:	b92a      	cbnz	r2, 8012020 <quorem+0xf4>
 8012014:	3b04      	subs	r3, #4
 8012016:	429e      	cmp	r6, r3
 8012018:	461a      	mov	r2, r3
 801201a:	d30b      	bcc.n	8012034 <quorem+0x108>
 801201c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012020:	4628      	mov	r0, r5
 8012022:	b003      	add	sp, #12
 8012024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012028:	6812      	ldr	r2, [r2, #0]
 801202a:	3b04      	subs	r3, #4
 801202c:	2a00      	cmp	r2, #0
 801202e:	d1ca      	bne.n	8011fc6 <quorem+0x9a>
 8012030:	3c01      	subs	r4, #1
 8012032:	e7c5      	b.n	8011fc0 <quorem+0x94>
 8012034:	6812      	ldr	r2, [r2, #0]
 8012036:	3b04      	subs	r3, #4
 8012038:	2a00      	cmp	r2, #0
 801203a:	d1ef      	bne.n	801201c <quorem+0xf0>
 801203c:	3c01      	subs	r4, #1
 801203e:	e7ea      	b.n	8012016 <quorem+0xea>
 8012040:	2000      	movs	r0, #0
 8012042:	e7ee      	b.n	8012022 <quorem+0xf6>
 8012044:	0000      	movs	r0, r0
	...

08012048 <_dtoa_r>:
 8012048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	ec57 6b10 	vmov	r6, r7, d0
 8012050:	b095      	sub	sp, #84	; 0x54
 8012052:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012054:	9108      	str	r1, [sp, #32]
 8012056:	4604      	mov	r4, r0
 8012058:	920a      	str	r2, [sp, #40]	; 0x28
 801205a:	9311      	str	r3, [sp, #68]	; 0x44
 801205c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012060:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012064:	b93d      	cbnz	r5, 8012076 <_dtoa_r+0x2e>
 8012066:	2010      	movs	r0, #16
 8012068:	f001 fa52 	bl	8013510 <malloc>
 801206c:	6260      	str	r0, [r4, #36]	; 0x24
 801206e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012072:	6005      	str	r5, [r0, #0]
 8012074:	60c5      	str	r5, [r0, #12]
 8012076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012078:	6819      	ldr	r1, [r3, #0]
 801207a:	b151      	cbz	r1, 8012092 <_dtoa_r+0x4a>
 801207c:	685a      	ldr	r2, [r3, #4]
 801207e:	604a      	str	r2, [r1, #4]
 8012080:	2301      	movs	r3, #1
 8012082:	4093      	lsls	r3, r2
 8012084:	608b      	str	r3, [r1, #8]
 8012086:	4620      	mov	r0, r4
 8012088:	f001 fa90 	bl	80135ac <_Bfree>
 801208c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801208e:	2200      	movs	r2, #0
 8012090:	601a      	str	r2, [r3, #0]
 8012092:	1e3b      	subs	r3, r7, #0
 8012094:	bfb9      	ittee	lt
 8012096:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801209a:	9303      	strlt	r3, [sp, #12]
 801209c:	2300      	movge	r3, #0
 801209e:	f8c8 3000 	strge.w	r3, [r8]
 80120a2:	9d03      	ldr	r5, [sp, #12]
 80120a4:	4bac      	ldr	r3, [pc, #688]	; (8012358 <_dtoa_r+0x310>)
 80120a6:	bfbc      	itt	lt
 80120a8:	2201      	movlt	r2, #1
 80120aa:	f8c8 2000 	strlt.w	r2, [r8]
 80120ae:	43ab      	bics	r3, r5
 80120b0:	d11b      	bne.n	80120ea <_dtoa_r+0xa2>
 80120b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80120b4:	f242 730f 	movw	r3, #9999	; 0x270f
 80120b8:	6013      	str	r3, [r2, #0]
 80120ba:	9b02      	ldr	r3, [sp, #8]
 80120bc:	b923      	cbnz	r3, 80120c8 <_dtoa_r+0x80>
 80120be:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80120c2:	2d00      	cmp	r5, #0
 80120c4:	f000 84dd 	beq.w	8012a82 <_dtoa_r+0xa3a>
 80120c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120ca:	b953      	cbnz	r3, 80120e2 <_dtoa_r+0x9a>
 80120cc:	4ba3      	ldr	r3, [pc, #652]	; (801235c <_dtoa_r+0x314>)
 80120ce:	e020      	b.n	8012112 <_dtoa_r+0xca>
 80120d0:	4ba3      	ldr	r3, [pc, #652]	; (8012360 <_dtoa_r+0x318>)
 80120d2:	9304      	str	r3, [sp, #16]
 80120d4:	3308      	adds	r3, #8
 80120d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120d8:	6013      	str	r3, [r2, #0]
 80120da:	9804      	ldr	r0, [sp, #16]
 80120dc:	b015      	add	sp, #84	; 0x54
 80120de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e2:	4b9e      	ldr	r3, [pc, #632]	; (801235c <_dtoa_r+0x314>)
 80120e4:	9304      	str	r3, [sp, #16]
 80120e6:	3303      	adds	r3, #3
 80120e8:	e7f5      	b.n	80120d6 <_dtoa_r+0x8e>
 80120ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80120fa:	d10c      	bne.n	8012116 <_dtoa_r+0xce>
 80120fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80120fe:	2301      	movs	r3, #1
 8012100:	6013      	str	r3, [r2, #0]
 8012102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012104:	2b00      	cmp	r3, #0
 8012106:	f000 84b9 	beq.w	8012a7c <_dtoa_r+0xa34>
 801210a:	4b96      	ldr	r3, [pc, #600]	; (8012364 <_dtoa_r+0x31c>)
 801210c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801210e:	6013      	str	r3, [r2, #0]
 8012110:	3b01      	subs	r3, #1
 8012112:	9304      	str	r3, [sp, #16]
 8012114:	e7e1      	b.n	80120da <_dtoa_r+0x92>
 8012116:	a913      	add	r1, sp, #76	; 0x4c
 8012118:	aa12      	add	r2, sp, #72	; 0x48
 801211a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801211e:	4620      	mov	r0, r4
 8012120:	f001 fd52 	bl	8013bc8 <__d2b>
 8012124:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012128:	9001      	str	r0, [sp, #4]
 801212a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801212c:	2e00      	cmp	r6, #0
 801212e:	d046      	beq.n	80121be <_dtoa_r+0x176>
 8012130:	9805      	ldr	r0, [sp, #20]
 8012132:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801213a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801213e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012142:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012146:	2700      	movs	r7, #0
 8012148:	ee07 aa90 	vmov	s15, sl
 801214c:	ec43 2b16 	vmov	d6, r2, r3
 8012150:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012154:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012340 <_dtoa_r+0x2f8>
 8012158:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801215c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012160:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012348 <_dtoa_r+0x300>
 8012164:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012168:	eeb0 7b46 	vmov.f64	d7, d6
 801216c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012350 <_dtoa_r+0x308>
 8012170:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012174:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012178:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012180:	ee16 ba90 	vmov	fp, s13
 8012184:	d508      	bpl.n	8012198 <_dtoa_r+0x150>
 8012186:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801218a:	eeb4 6b47 	vcmp.f64	d6, d7
 801218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012192:	bf18      	it	ne
 8012194:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012198:	f1bb 0f16 	cmp.w	fp, #22
 801219c:	d834      	bhi.n	8012208 <_dtoa_r+0x1c0>
 801219e:	4b72      	ldr	r3, [pc, #456]	; (8012368 <_dtoa_r+0x320>)
 80121a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80121a4:	ed93 7b00 	vldr	d7, [r3]
 80121a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80121ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80121b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b4:	dd01      	ble.n	80121ba <_dtoa_r+0x172>
 80121b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80121ba:	2300      	movs	r3, #0
 80121bc:	e025      	b.n	801220a <_dtoa_r+0x1c2>
 80121be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80121c0:	eb01 0a03 	add.w	sl, r1, r3
 80121c4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80121c8:	2b20      	cmp	r3, #32
 80121ca:	dd17      	ble.n	80121fc <_dtoa_r+0x1b4>
 80121cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80121d0:	9a02      	ldr	r2, [sp, #8]
 80121d2:	409d      	lsls	r5, r3
 80121d4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80121d8:	fa22 f303 	lsr.w	r3, r2, r3
 80121dc:	432b      	orrs	r3, r5
 80121de:	ee07 3a90 	vmov	s15, r3
 80121e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80121e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80121ee:	9805      	ldr	r0, [sp, #20]
 80121f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121f4:	2701      	movs	r7, #1
 80121f6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80121fa:	e7a5      	b.n	8012148 <_dtoa_r+0x100>
 80121fc:	9a02      	ldr	r2, [sp, #8]
 80121fe:	f1c3 0320 	rsb	r3, r3, #32
 8012202:	fa02 f303 	lsl.w	r3, r2, r3
 8012206:	e7ea      	b.n	80121de <_dtoa_r+0x196>
 8012208:	2301      	movs	r3, #1
 801220a:	eba1 0a0a 	sub.w	sl, r1, sl
 801220e:	9310      	str	r3, [sp, #64]	; 0x40
 8012210:	f1ba 0301 	subs.w	r3, sl, #1
 8012214:	9307      	str	r3, [sp, #28]
 8012216:	bf43      	ittte	mi
 8012218:	2300      	movmi	r3, #0
 801221a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801221e:	9307      	strmi	r3, [sp, #28]
 8012220:	f04f 0a00 	movpl.w	sl, #0
 8012224:	f1bb 0f00 	cmp.w	fp, #0
 8012228:	db19      	blt.n	801225e <_dtoa_r+0x216>
 801222a:	9b07      	ldr	r3, [sp, #28]
 801222c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012230:	445b      	add	r3, fp
 8012232:	9307      	str	r3, [sp, #28]
 8012234:	f04f 0800 	mov.w	r8, #0
 8012238:	9b08      	ldr	r3, [sp, #32]
 801223a:	2b09      	cmp	r3, #9
 801223c:	d866      	bhi.n	801230c <_dtoa_r+0x2c4>
 801223e:	2b05      	cmp	r3, #5
 8012240:	bfc4      	itt	gt
 8012242:	3b04      	subgt	r3, #4
 8012244:	9308      	strgt	r3, [sp, #32]
 8012246:	9b08      	ldr	r3, [sp, #32]
 8012248:	f1a3 0302 	sub.w	r3, r3, #2
 801224c:	bfcc      	ite	gt
 801224e:	2500      	movgt	r5, #0
 8012250:	2501      	movle	r5, #1
 8012252:	2b03      	cmp	r3, #3
 8012254:	d866      	bhi.n	8012324 <_dtoa_r+0x2dc>
 8012256:	e8df f003 	tbb	[pc, r3]
 801225a:	5755      	.short	0x5755
 801225c:	4909      	.short	0x4909
 801225e:	2300      	movs	r3, #0
 8012260:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012264:	f1cb 0800 	rsb	r8, fp, #0
 8012268:	930b      	str	r3, [sp, #44]	; 0x2c
 801226a:	e7e5      	b.n	8012238 <_dtoa_r+0x1f0>
 801226c:	2301      	movs	r3, #1
 801226e:	9309      	str	r3, [sp, #36]	; 0x24
 8012270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012272:	2b00      	cmp	r3, #0
 8012274:	dd59      	ble.n	801232a <_dtoa_r+0x2e2>
 8012276:	9306      	str	r3, [sp, #24]
 8012278:	4699      	mov	r9, r3
 801227a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801227c:	2200      	movs	r2, #0
 801227e:	6072      	str	r2, [r6, #4]
 8012280:	2204      	movs	r2, #4
 8012282:	f102 0014 	add.w	r0, r2, #20
 8012286:	4298      	cmp	r0, r3
 8012288:	6871      	ldr	r1, [r6, #4]
 801228a:	d953      	bls.n	8012334 <_dtoa_r+0x2ec>
 801228c:	4620      	mov	r0, r4
 801228e:	f001 f959 	bl	8013544 <_Balloc>
 8012292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012294:	6030      	str	r0, [r6, #0]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	9304      	str	r3, [sp, #16]
 801229a:	f1b9 0f0e 	cmp.w	r9, #14
 801229e:	f200 80c2 	bhi.w	8012426 <_dtoa_r+0x3de>
 80122a2:	2d00      	cmp	r5, #0
 80122a4:	f000 80bf 	beq.w	8012426 <_dtoa_r+0x3de>
 80122a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122ac:	f1bb 0f00 	cmp.w	fp, #0
 80122b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80122b4:	f340 80e6 	ble.w	8012484 <_dtoa_r+0x43c>
 80122b8:	4a2b      	ldr	r2, [pc, #172]	; (8012368 <_dtoa_r+0x320>)
 80122ba:	f00b 030f 	and.w	r3, fp, #15
 80122be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122c2:	ed93 7b00 	vldr	d7, [r3]
 80122c6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80122ca:	06da      	lsls	r2, r3, #27
 80122cc:	f140 80d8 	bpl.w	8012480 <_dtoa_r+0x438>
 80122d0:	4a26      	ldr	r2, [pc, #152]	; (801236c <_dtoa_r+0x324>)
 80122d2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80122d6:	ed92 6b08 	vldr	d6, [r2, #32]
 80122da:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80122de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80122e2:	f003 030f 	and.w	r3, r3, #15
 80122e6:	2203      	movs	r2, #3
 80122e8:	4920      	ldr	r1, [pc, #128]	; (801236c <_dtoa_r+0x324>)
 80122ea:	e04a      	b.n	8012382 <_dtoa_r+0x33a>
 80122ec:	2301      	movs	r3, #1
 80122ee:	9309      	str	r3, [sp, #36]	; 0x24
 80122f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f2:	445b      	add	r3, fp
 80122f4:	f103 0901 	add.w	r9, r3, #1
 80122f8:	9306      	str	r3, [sp, #24]
 80122fa:	464b      	mov	r3, r9
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	bfb8      	it	lt
 8012300:	2301      	movlt	r3, #1
 8012302:	e7ba      	b.n	801227a <_dtoa_r+0x232>
 8012304:	2300      	movs	r3, #0
 8012306:	e7b2      	b.n	801226e <_dtoa_r+0x226>
 8012308:	2300      	movs	r3, #0
 801230a:	e7f0      	b.n	80122ee <_dtoa_r+0x2a6>
 801230c:	2501      	movs	r5, #1
 801230e:	2300      	movs	r3, #0
 8012310:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012314:	f04f 33ff 	mov.w	r3, #4294967295
 8012318:	9306      	str	r3, [sp, #24]
 801231a:	4699      	mov	r9, r3
 801231c:	2200      	movs	r2, #0
 801231e:	2312      	movs	r3, #18
 8012320:	920a      	str	r2, [sp, #40]	; 0x28
 8012322:	e7aa      	b.n	801227a <_dtoa_r+0x232>
 8012324:	2301      	movs	r3, #1
 8012326:	9309      	str	r3, [sp, #36]	; 0x24
 8012328:	e7f4      	b.n	8012314 <_dtoa_r+0x2cc>
 801232a:	2301      	movs	r3, #1
 801232c:	9306      	str	r3, [sp, #24]
 801232e:	4699      	mov	r9, r3
 8012330:	461a      	mov	r2, r3
 8012332:	e7f5      	b.n	8012320 <_dtoa_r+0x2d8>
 8012334:	3101      	adds	r1, #1
 8012336:	6071      	str	r1, [r6, #4]
 8012338:	0052      	lsls	r2, r2, #1
 801233a:	e7a2      	b.n	8012282 <_dtoa_r+0x23a>
 801233c:	f3af 8000 	nop.w
 8012340:	636f4361 	.word	0x636f4361
 8012344:	3fd287a7 	.word	0x3fd287a7
 8012348:	8b60c8b3 	.word	0x8b60c8b3
 801234c:	3fc68a28 	.word	0x3fc68a28
 8012350:	509f79fb 	.word	0x509f79fb
 8012354:	3fd34413 	.word	0x3fd34413
 8012358:	7ff00000 	.word	0x7ff00000
 801235c:	08015119 	.word	0x08015119
 8012360:	08015110 	.word	0x08015110
 8012364:	08015095 	.word	0x08015095
 8012368:	080151b8 	.word	0x080151b8
 801236c:	08015190 	.word	0x08015190
 8012370:	07de      	lsls	r6, r3, #31
 8012372:	d504      	bpl.n	801237e <_dtoa_r+0x336>
 8012374:	ed91 6b00 	vldr	d6, [r1]
 8012378:	3201      	adds	r2, #1
 801237a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801237e:	105b      	asrs	r3, r3, #1
 8012380:	3108      	adds	r1, #8
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1f4      	bne.n	8012370 <_dtoa_r+0x328>
 8012386:	ed9d 6b02 	vldr	d6, [sp, #8]
 801238a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801238e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012392:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012394:	2b00      	cmp	r3, #0
 8012396:	f000 80a7 	beq.w	80124e8 <_dtoa_r+0x4a0>
 801239a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801239e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123aa:	f140 809d 	bpl.w	80124e8 <_dtoa_r+0x4a0>
 80123ae:	f1b9 0f00 	cmp.w	r9, #0
 80123b2:	f000 8099 	beq.w	80124e8 <_dtoa_r+0x4a0>
 80123b6:	9b06      	ldr	r3, [sp, #24]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dd30      	ble.n	801241e <_dtoa_r+0x3d6>
 80123bc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80123c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80123c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80123c8:	9d06      	ldr	r5, [sp, #24]
 80123ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80123ce:	3201      	adds	r2, #1
 80123d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80123d4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80123d8:	ee07 2a90 	vmov	s15, r2
 80123dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80123e0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80123e4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80123e8:	9a03      	ldr	r2, [sp, #12]
 80123ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123ee:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80123f2:	2d00      	cmp	r5, #0
 80123f4:	d17b      	bne.n	80124ee <_dtoa_r+0x4a6>
 80123f6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80123fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80123fe:	ec41 0b17 	vmov	d7, r0, r1
 8012402:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240a:	f300 8253 	bgt.w	80128b4 <_dtoa_r+0x86c>
 801240e:	eeb1 7b47 	vneg.f64	d7, d7
 8012412:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241a:	f100 8249 	bmi.w	80128b0 <_dtoa_r+0x868>
 801241e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012422:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012428:	2b00      	cmp	r3, #0
 801242a:	f2c0 8119 	blt.w	8012660 <_dtoa_r+0x618>
 801242e:	f1bb 0f0e 	cmp.w	fp, #14
 8012432:	f300 8115 	bgt.w	8012660 <_dtoa_r+0x618>
 8012436:	4bc3      	ldr	r3, [pc, #780]	; (8012744 <_dtoa_r+0x6fc>)
 8012438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801243c:	ed93 6b00 	vldr	d6, [r3]
 8012440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012442:	2b00      	cmp	r3, #0
 8012444:	f280 80ba 	bge.w	80125bc <_dtoa_r+0x574>
 8012448:	f1b9 0f00 	cmp.w	r9, #0
 801244c:	f300 80b6 	bgt.w	80125bc <_dtoa_r+0x574>
 8012450:	f040 822d 	bne.w	80128ae <_dtoa_r+0x866>
 8012454:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012458:	ee26 6b07 	vmul.f64	d6, d6, d7
 801245c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012468:	464d      	mov	r5, r9
 801246a:	464f      	mov	r7, r9
 801246c:	f280 8204 	bge.w	8012878 <_dtoa_r+0x830>
 8012470:	9b04      	ldr	r3, [sp, #16]
 8012472:	9a04      	ldr	r2, [sp, #16]
 8012474:	1c5e      	adds	r6, r3, #1
 8012476:	2331      	movs	r3, #49	; 0x31
 8012478:	7013      	strb	r3, [r2, #0]
 801247a:	f10b 0b01 	add.w	fp, fp, #1
 801247e:	e1ff      	b.n	8012880 <_dtoa_r+0x838>
 8012480:	2202      	movs	r2, #2
 8012482:	e731      	b.n	80122e8 <_dtoa_r+0x2a0>
 8012484:	d02e      	beq.n	80124e4 <_dtoa_r+0x49c>
 8012486:	f1cb 0300 	rsb	r3, fp, #0
 801248a:	4aae      	ldr	r2, [pc, #696]	; (8012744 <_dtoa_r+0x6fc>)
 801248c:	f003 010f 	and.w	r1, r3, #15
 8012490:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012494:	ed92 7b00 	vldr	d7, [r2]
 8012498:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801249c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80124a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80124a4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80124a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80124ac:	49a6      	ldr	r1, [pc, #664]	; (8012748 <_dtoa_r+0x700>)
 80124ae:	111b      	asrs	r3, r3, #4
 80124b0:	2000      	movs	r0, #0
 80124b2:	2202      	movs	r2, #2
 80124b4:	b93b      	cbnz	r3, 80124c6 <_dtoa_r+0x47e>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	f43f af6b 	beq.w	8012392 <_dtoa_r+0x34a>
 80124bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80124c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124c4:	e765      	b.n	8012392 <_dtoa_r+0x34a>
 80124c6:	07dd      	lsls	r5, r3, #31
 80124c8:	d509      	bpl.n	80124de <_dtoa_r+0x496>
 80124ca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80124ce:	ed91 7b00 	vldr	d7, [r1]
 80124d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80124d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80124da:	3201      	adds	r2, #1
 80124dc:	2001      	movs	r0, #1
 80124de:	105b      	asrs	r3, r3, #1
 80124e0:	3108      	adds	r1, #8
 80124e2:	e7e7      	b.n	80124b4 <_dtoa_r+0x46c>
 80124e4:	2202      	movs	r2, #2
 80124e6:	e754      	b.n	8012392 <_dtoa_r+0x34a>
 80124e8:	465b      	mov	r3, fp
 80124ea:	464d      	mov	r5, r9
 80124ec:	e770      	b.n	80123d0 <_dtoa_r+0x388>
 80124ee:	4a95      	ldr	r2, [pc, #596]	; (8012744 <_dtoa_r+0x6fc>)
 80124f0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80124f4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80124f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124fa:	ec41 0b17 	vmov	d7, r0, r1
 80124fe:	b35a      	cbz	r2, 8012558 <_dtoa_r+0x510>
 8012500:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012504:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012508:	9e04      	ldr	r6, [sp, #16]
 801250a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801250e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012512:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012516:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801251a:	ee14 2a90 	vmov	r2, s9
 801251e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012522:	3230      	adds	r2, #48	; 0x30
 8012524:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012528:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012530:	f806 2b01 	strb.w	r2, [r6], #1
 8012534:	d43b      	bmi.n	80125ae <_dtoa_r+0x566>
 8012536:	ee32 5b46 	vsub.f64	d5, d2, d6
 801253a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012542:	d472      	bmi.n	801262a <_dtoa_r+0x5e2>
 8012544:	9a04      	ldr	r2, [sp, #16]
 8012546:	1ab2      	subs	r2, r6, r2
 8012548:	4295      	cmp	r5, r2
 801254a:	f77f af68 	ble.w	801241e <_dtoa_r+0x3d6>
 801254e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012552:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012556:	e7de      	b.n	8012516 <_dtoa_r+0x4ce>
 8012558:	9a04      	ldr	r2, [sp, #16]
 801255a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801255e:	1956      	adds	r6, r2, r5
 8012560:	4611      	mov	r1, r2
 8012562:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012566:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801256a:	ee14 2a90 	vmov	r2, s9
 801256e:	3230      	adds	r2, #48	; 0x30
 8012570:	f801 2b01 	strb.w	r2, [r1], #1
 8012574:	42b1      	cmp	r1, r6
 8012576:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801257a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801257e:	d11a      	bne.n	80125b6 <_dtoa_r+0x56e>
 8012580:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012584:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012588:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012590:	dc4b      	bgt.n	801262a <_dtoa_r+0x5e2>
 8012592:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259e:	f57f af3e 	bpl.w	801241e <_dtoa_r+0x3d6>
 80125a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80125a6:	2a30      	cmp	r2, #48	; 0x30
 80125a8:	f106 31ff 	add.w	r1, r6, #4294967295
 80125ac:	d001      	beq.n	80125b2 <_dtoa_r+0x56a>
 80125ae:	469b      	mov	fp, r3
 80125b0:	e02a      	b.n	8012608 <_dtoa_r+0x5c0>
 80125b2:	460e      	mov	r6, r1
 80125b4:	e7f5      	b.n	80125a2 <_dtoa_r+0x55a>
 80125b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80125ba:	e7d4      	b.n	8012566 <_dtoa_r+0x51e>
 80125bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125c0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80125c4:	9e04      	ldr	r6, [sp, #16]
 80125c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80125ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80125ce:	ee15 3a10 	vmov	r3, s10
 80125d2:	3330      	adds	r3, #48	; 0x30
 80125d4:	f806 3b01 	strb.w	r3, [r6], #1
 80125d8:	9b04      	ldr	r3, [sp, #16]
 80125da:	1af3      	subs	r3, r6, r3
 80125dc:	4599      	cmp	r9, r3
 80125de:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80125e2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80125e6:	d133      	bne.n	8012650 <_dtoa_r+0x608>
 80125e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80125ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f4:	dc18      	bgt.n	8012628 <_dtoa_r+0x5e0>
 80125f6:	eeb4 7b46 	vcmp.f64	d7, d6
 80125fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fe:	d103      	bne.n	8012608 <_dtoa_r+0x5c0>
 8012600:	ee15 3a10 	vmov	r3, s10
 8012604:	07db      	lsls	r3, r3, #31
 8012606:	d40f      	bmi.n	8012628 <_dtoa_r+0x5e0>
 8012608:	9901      	ldr	r1, [sp, #4]
 801260a:	4620      	mov	r0, r4
 801260c:	f000 ffce 	bl	80135ac <_Bfree>
 8012610:	2300      	movs	r3, #0
 8012612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012614:	7033      	strb	r3, [r6, #0]
 8012616:	f10b 0301 	add.w	r3, fp, #1
 801261a:	6013      	str	r3, [r2, #0]
 801261c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801261e:	2b00      	cmp	r3, #0
 8012620:	f43f ad5b 	beq.w	80120da <_dtoa_r+0x92>
 8012624:	601e      	str	r6, [r3, #0]
 8012626:	e558      	b.n	80120da <_dtoa_r+0x92>
 8012628:	465b      	mov	r3, fp
 801262a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801262e:	2939      	cmp	r1, #57	; 0x39
 8012630:	f106 32ff 	add.w	r2, r6, #4294967295
 8012634:	d106      	bne.n	8012644 <_dtoa_r+0x5fc>
 8012636:	9904      	ldr	r1, [sp, #16]
 8012638:	4291      	cmp	r1, r2
 801263a:	d107      	bne.n	801264c <_dtoa_r+0x604>
 801263c:	2230      	movs	r2, #48	; 0x30
 801263e:	700a      	strb	r2, [r1, #0]
 8012640:	3301      	adds	r3, #1
 8012642:	460a      	mov	r2, r1
 8012644:	7811      	ldrb	r1, [r2, #0]
 8012646:	3101      	adds	r1, #1
 8012648:	7011      	strb	r1, [r2, #0]
 801264a:	e7b0      	b.n	80125ae <_dtoa_r+0x566>
 801264c:	4616      	mov	r6, r2
 801264e:	e7ec      	b.n	801262a <_dtoa_r+0x5e2>
 8012650:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012654:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265c:	d1b3      	bne.n	80125c6 <_dtoa_r+0x57e>
 801265e:	e7d3      	b.n	8012608 <_dtoa_r+0x5c0>
 8012660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012662:	2a00      	cmp	r2, #0
 8012664:	f000 808d 	beq.w	8012782 <_dtoa_r+0x73a>
 8012668:	9a08      	ldr	r2, [sp, #32]
 801266a:	2a01      	cmp	r2, #1
 801266c:	dc72      	bgt.n	8012754 <_dtoa_r+0x70c>
 801266e:	2f00      	cmp	r7, #0
 8012670:	d06c      	beq.n	801274c <_dtoa_r+0x704>
 8012672:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012676:	4645      	mov	r5, r8
 8012678:	4656      	mov	r6, sl
 801267a:	9a07      	ldr	r2, [sp, #28]
 801267c:	2101      	movs	r1, #1
 801267e:	441a      	add	r2, r3
 8012680:	4620      	mov	r0, r4
 8012682:	449a      	add	sl, r3
 8012684:	9207      	str	r2, [sp, #28]
 8012686:	f001 f86f 	bl	8013768 <__i2b>
 801268a:	4607      	mov	r7, r0
 801268c:	2e00      	cmp	r6, #0
 801268e:	dd0b      	ble.n	80126a8 <_dtoa_r+0x660>
 8012690:	9b07      	ldr	r3, [sp, #28]
 8012692:	2b00      	cmp	r3, #0
 8012694:	dd08      	ble.n	80126a8 <_dtoa_r+0x660>
 8012696:	42b3      	cmp	r3, r6
 8012698:	9a07      	ldr	r2, [sp, #28]
 801269a:	bfa8      	it	ge
 801269c:	4633      	movge	r3, r6
 801269e:	ebaa 0a03 	sub.w	sl, sl, r3
 80126a2:	1af6      	subs	r6, r6, r3
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	9307      	str	r3, [sp, #28]
 80126a8:	f1b8 0f00 	cmp.w	r8, #0
 80126ac:	d01d      	beq.n	80126ea <_dtoa_r+0x6a2>
 80126ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d06a      	beq.n	801278a <_dtoa_r+0x742>
 80126b4:	b18d      	cbz	r5, 80126da <_dtoa_r+0x692>
 80126b6:	4639      	mov	r1, r7
 80126b8:	462a      	mov	r2, r5
 80126ba:	4620      	mov	r0, r4
 80126bc:	f001 f8f4 	bl	80138a8 <__pow5mult>
 80126c0:	9a01      	ldr	r2, [sp, #4]
 80126c2:	4601      	mov	r1, r0
 80126c4:	4607      	mov	r7, r0
 80126c6:	4620      	mov	r0, r4
 80126c8:	f001 f857 	bl	801377a <__multiply>
 80126cc:	9901      	ldr	r1, [sp, #4]
 80126ce:	900c      	str	r0, [sp, #48]	; 0x30
 80126d0:	4620      	mov	r0, r4
 80126d2:	f000 ff6b 	bl	80135ac <_Bfree>
 80126d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126d8:	9301      	str	r3, [sp, #4]
 80126da:	ebb8 0205 	subs.w	r2, r8, r5
 80126de:	d004      	beq.n	80126ea <_dtoa_r+0x6a2>
 80126e0:	9901      	ldr	r1, [sp, #4]
 80126e2:	4620      	mov	r0, r4
 80126e4:	f001 f8e0 	bl	80138a8 <__pow5mult>
 80126e8:	9001      	str	r0, [sp, #4]
 80126ea:	2101      	movs	r1, #1
 80126ec:	4620      	mov	r0, r4
 80126ee:	f001 f83b 	bl	8013768 <__i2b>
 80126f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126f4:	4605      	mov	r5, r0
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f000 81ca 	beq.w	8012a90 <_dtoa_r+0xa48>
 80126fc:	461a      	mov	r2, r3
 80126fe:	4601      	mov	r1, r0
 8012700:	4620      	mov	r0, r4
 8012702:	f001 f8d1 	bl	80138a8 <__pow5mult>
 8012706:	9b08      	ldr	r3, [sp, #32]
 8012708:	2b01      	cmp	r3, #1
 801270a:	4605      	mov	r5, r0
 801270c:	dc44      	bgt.n	8012798 <_dtoa_r+0x750>
 801270e:	9b02      	ldr	r3, [sp, #8]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d13c      	bne.n	801278e <_dtoa_r+0x746>
 8012714:	9b03      	ldr	r3, [sp, #12]
 8012716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801271a:	2b00      	cmp	r3, #0
 801271c:	d137      	bne.n	801278e <_dtoa_r+0x746>
 801271e:	9b03      	ldr	r3, [sp, #12]
 8012720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012724:	0d1b      	lsrs	r3, r3, #20
 8012726:	051b      	lsls	r3, r3, #20
 8012728:	2b00      	cmp	r3, #0
 801272a:	d033      	beq.n	8012794 <_dtoa_r+0x74c>
 801272c:	9b07      	ldr	r3, [sp, #28]
 801272e:	3301      	adds	r3, #1
 8012730:	f10a 0a01 	add.w	sl, sl, #1
 8012734:	9307      	str	r3, [sp, #28]
 8012736:	f04f 0801 	mov.w	r8, #1
 801273a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801273c:	bb73      	cbnz	r3, 801279c <_dtoa_r+0x754>
 801273e:	2001      	movs	r0, #1
 8012740:	e034      	b.n	80127ac <_dtoa_r+0x764>
 8012742:	bf00      	nop
 8012744:	080151b8 	.word	0x080151b8
 8012748:	08015190 	.word	0x08015190
 801274c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801274e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012752:	e790      	b.n	8012676 <_dtoa_r+0x62e>
 8012754:	f109 35ff 	add.w	r5, r9, #4294967295
 8012758:	45a8      	cmp	r8, r5
 801275a:	bfbf      	itttt	lt
 801275c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801275e:	eba5 0808 	sublt.w	r8, r5, r8
 8012762:	4443      	addlt	r3, r8
 8012764:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012766:	bfb6      	itet	lt
 8012768:	46a8      	movlt	r8, r5
 801276a:	eba8 0505 	subge.w	r5, r8, r5
 801276e:	2500      	movlt	r5, #0
 8012770:	f1b9 0f00 	cmp.w	r9, #0
 8012774:	bfb9      	ittee	lt
 8012776:	ebaa 0609 	sublt.w	r6, sl, r9
 801277a:	2300      	movlt	r3, #0
 801277c:	4656      	movge	r6, sl
 801277e:	464b      	movge	r3, r9
 8012780:	e77b      	b.n	801267a <_dtoa_r+0x632>
 8012782:	4645      	mov	r5, r8
 8012784:	4656      	mov	r6, sl
 8012786:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012788:	e780      	b.n	801268c <_dtoa_r+0x644>
 801278a:	4642      	mov	r2, r8
 801278c:	e7a8      	b.n	80126e0 <_dtoa_r+0x698>
 801278e:	f04f 0800 	mov.w	r8, #0
 8012792:	e7d2      	b.n	801273a <_dtoa_r+0x6f2>
 8012794:	4698      	mov	r8, r3
 8012796:	e7d0      	b.n	801273a <_dtoa_r+0x6f2>
 8012798:	f04f 0800 	mov.w	r8, #0
 801279c:	692b      	ldr	r3, [r5, #16]
 801279e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80127a2:	6918      	ldr	r0, [r3, #16]
 80127a4:	f000 ff92 	bl	80136cc <__hi0bits>
 80127a8:	f1c0 0020 	rsb	r0, r0, #32
 80127ac:	9b07      	ldr	r3, [sp, #28]
 80127ae:	4418      	add	r0, r3
 80127b0:	f010 001f 	ands.w	r0, r0, #31
 80127b4:	d047      	beq.n	8012846 <_dtoa_r+0x7fe>
 80127b6:	f1c0 0320 	rsb	r3, r0, #32
 80127ba:	2b04      	cmp	r3, #4
 80127bc:	dd3b      	ble.n	8012836 <_dtoa_r+0x7ee>
 80127be:	9b07      	ldr	r3, [sp, #28]
 80127c0:	f1c0 001c 	rsb	r0, r0, #28
 80127c4:	4482      	add	sl, r0
 80127c6:	4406      	add	r6, r0
 80127c8:	4403      	add	r3, r0
 80127ca:	9307      	str	r3, [sp, #28]
 80127cc:	f1ba 0f00 	cmp.w	sl, #0
 80127d0:	dd05      	ble.n	80127de <_dtoa_r+0x796>
 80127d2:	4652      	mov	r2, sl
 80127d4:	9901      	ldr	r1, [sp, #4]
 80127d6:	4620      	mov	r0, r4
 80127d8:	f001 f8b4 	bl	8013944 <__lshift>
 80127dc:	9001      	str	r0, [sp, #4]
 80127de:	9b07      	ldr	r3, [sp, #28]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	dd05      	ble.n	80127f0 <_dtoa_r+0x7a8>
 80127e4:	4629      	mov	r1, r5
 80127e6:	461a      	mov	r2, r3
 80127e8:	4620      	mov	r0, r4
 80127ea:	f001 f8ab 	bl	8013944 <__lshift>
 80127ee:	4605      	mov	r5, r0
 80127f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127f2:	b353      	cbz	r3, 801284a <_dtoa_r+0x802>
 80127f4:	4629      	mov	r1, r5
 80127f6:	9801      	ldr	r0, [sp, #4]
 80127f8:	f001 f8f8 	bl	80139ec <__mcmp>
 80127fc:	2800      	cmp	r0, #0
 80127fe:	da24      	bge.n	801284a <_dtoa_r+0x802>
 8012800:	2300      	movs	r3, #0
 8012802:	220a      	movs	r2, #10
 8012804:	9901      	ldr	r1, [sp, #4]
 8012806:	4620      	mov	r0, r4
 8012808:	f000 fee7 	bl	80135da <__multadd>
 801280c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280e:	9001      	str	r0, [sp, #4]
 8012810:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 8142 	beq.w	8012a9e <_dtoa_r+0xa56>
 801281a:	2300      	movs	r3, #0
 801281c:	4639      	mov	r1, r7
 801281e:	220a      	movs	r2, #10
 8012820:	4620      	mov	r0, r4
 8012822:	f000 feda 	bl	80135da <__multadd>
 8012826:	9b06      	ldr	r3, [sp, #24]
 8012828:	2b00      	cmp	r3, #0
 801282a:	4607      	mov	r7, r0
 801282c:	dc4b      	bgt.n	80128c6 <_dtoa_r+0x87e>
 801282e:	9b08      	ldr	r3, [sp, #32]
 8012830:	2b02      	cmp	r3, #2
 8012832:	dd48      	ble.n	80128c6 <_dtoa_r+0x87e>
 8012834:	e011      	b.n	801285a <_dtoa_r+0x812>
 8012836:	d0c9      	beq.n	80127cc <_dtoa_r+0x784>
 8012838:	9a07      	ldr	r2, [sp, #28]
 801283a:	331c      	adds	r3, #28
 801283c:	441a      	add	r2, r3
 801283e:	449a      	add	sl, r3
 8012840:	441e      	add	r6, r3
 8012842:	4613      	mov	r3, r2
 8012844:	e7c1      	b.n	80127ca <_dtoa_r+0x782>
 8012846:	4603      	mov	r3, r0
 8012848:	e7f6      	b.n	8012838 <_dtoa_r+0x7f0>
 801284a:	f1b9 0f00 	cmp.w	r9, #0
 801284e:	dc34      	bgt.n	80128ba <_dtoa_r+0x872>
 8012850:	9b08      	ldr	r3, [sp, #32]
 8012852:	2b02      	cmp	r3, #2
 8012854:	dd31      	ble.n	80128ba <_dtoa_r+0x872>
 8012856:	f8cd 9018 	str.w	r9, [sp, #24]
 801285a:	9b06      	ldr	r3, [sp, #24]
 801285c:	b963      	cbnz	r3, 8012878 <_dtoa_r+0x830>
 801285e:	4629      	mov	r1, r5
 8012860:	2205      	movs	r2, #5
 8012862:	4620      	mov	r0, r4
 8012864:	f000 feb9 	bl	80135da <__multadd>
 8012868:	4601      	mov	r1, r0
 801286a:	4605      	mov	r5, r0
 801286c:	9801      	ldr	r0, [sp, #4]
 801286e:	f001 f8bd 	bl	80139ec <__mcmp>
 8012872:	2800      	cmp	r0, #0
 8012874:	f73f adfc 	bgt.w	8012470 <_dtoa_r+0x428>
 8012878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801287a:	9e04      	ldr	r6, [sp, #16]
 801287c:	ea6f 0b03 	mvn.w	fp, r3
 8012880:	f04f 0900 	mov.w	r9, #0
 8012884:	4629      	mov	r1, r5
 8012886:	4620      	mov	r0, r4
 8012888:	f000 fe90 	bl	80135ac <_Bfree>
 801288c:	2f00      	cmp	r7, #0
 801288e:	f43f aebb 	beq.w	8012608 <_dtoa_r+0x5c0>
 8012892:	f1b9 0f00 	cmp.w	r9, #0
 8012896:	d005      	beq.n	80128a4 <_dtoa_r+0x85c>
 8012898:	45b9      	cmp	r9, r7
 801289a:	d003      	beq.n	80128a4 <_dtoa_r+0x85c>
 801289c:	4649      	mov	r1, r9
 801289e:	4620      	mov	r0, r4
 80128a0:	f000 fe84 	bl	80135ac <_Bfree>
 80128a4:	4639      	mov	r1, r7
 80128a6:	4620      	mov	r0, r4
 80128a8:	f000 fe80 	bl	80135ac <_Bfree>
 80128ac:	e6ac      	b.n	8012608 <_dtoa_r+0x5c0>
 80128ae:	2500      	movs	r5, #0
 80128b0:	462f      	mov	r7, r5
 80128b2:	e7e1      	b.n	8012878 <_dtoa_r+0x830>
 80128b4:	469b      	mov	fp, r3
 80128b6:	462f      	mov	r7, r5
 80128b8:	e5da      	b.n	8012470 <_dtoa_r+0x428>
 80128ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128bc:	f8cd 9018 	str.w	r9, [sp, #24]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f000 80f3 	beq.w	8012aac <_dtoa_r+0xa64>
 80128c6:	2e00      	cmp	r6, #0
 80128c8:	dd05      	ble.n	80128d6 <_dtoa_r+0x88e>
 80128ca:	4639      	mov	r1, r7
 80128cc:	4632      	mov	r2, r6
 80128ce:	4620      	mov	r0, r4
 80128d0:	f001 f838 	bl	8013944 <__lshift>
 80128d4:	4607      	mov	r7, r0
 80128d6:	f1b8 0f00 	cmp.w	r8, #0
 80128da:	d04c      	beq.n	8012976 <_dtoa_r+0x92e>
 80128dc:	6879      	ldr	r1, [r7, #4]
 80128de:	4620      	mov	r0, r4
 80128e0:	f000 fe30 	bl	8013544 <_Balloc>
 80128e4:	693a      	ldr	r2, [r7, #16]
 80128e6:	3202      	adds	r2, #2
 80128e8:	4606      	mov	r6, r0
 80128ea:	0092      	lsls	r2, r2, #2
 80128ec:	f107 010c 	add.w	r1, r7, #12
 80128f0:	300c      	adds	r0, #12
 80128f2:	f7fd fd2d 	bl	8010350 <memcpy>
 80128f6:	2201      	movs	r2, #1
 80128f8:	4631      	mov	r1, r6
 80128fa:	4620      	mov	r0, r4
 80128fc:	f001 f822 	bl	8013944 <__lshift>
 8012900:	9b02      	ldr	r3, [sp, #8]
 8012902:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012906:	f003 0301 	and.w	r3, r3, #1
 801290a:	46b9      	mov	r9, r7
 801290c:	9307      	str	r3, [sp, #28]
 801290e:	4607      	mov	r7, r0
 8012910:	4629      	mov	r1, r5
 8012912:	9801      	ldr	r0, [sp, #4]
 8012914:	f7ff fb0a 	bl	8011f2c <quorem>
 8012918:	4649      	mov	r1, r9
 801291a:	4606      	mov	r6, r0
 801291c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012920:	9801      	ldr	r0, [sp, #4]
 8012922:	f001 f863 	bl	80139ec <__mcmp>
 8012926:	463a      	mov	r2, r7
 8012928:	9002      	str	r0, [sp, #8]
 801292a:	4629      	mov	r1, r5
 801292c:	4620      	mov	r0, r4
 801292e:	f001 f877 	bl	8013a20 <__mdiff>
 8012932:	68c3      	ldr	r3, [r0, #12]
 8012934:	4602      	mov	r2, r0
 8012936:	bb03      	cbnz	r3, 801297a <_dtoa_r+0x932>
 8012938:	4601      	mov	r1, r0
 801293a:	9009      	str	r0, [sp, #36]	; 0x24
 801293c:	9801      	ldr	r0, [sp, #4]
 801293e:	f001 f855 	bl	80139ec <__mcmp>
 8012942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012944:	4603      	mov	r3, r0
 8012946:	4611      	mov	r1, r2
 8012948:	4620      	mov	r0, r4
 801294a:	9309      	str	r3, [sp, #36]	; 0x24
 801294c:	f000 fe2e 	bl	80135ac <_Bfree>
 8012950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012952:	b9a3      	cbnz	r3, 801297e <_dtoa_r+0x936>
 8012954:	9a08      	ldr	r2, [sp, #32]
 8012956:	b992      	cbnz	r2, 801297e <_dtoa_r+0x936>
 8012958:	9a07      	ldr	r2, [sp, #28]
 801295a:	b982      	cbnz	r2, 801297e <_dtoa_r+0x936>
 801295c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012960:	d029      	beq.n	80129b6 <_dtoa_r+0x96e>
 8012962:	9b02      	ldr	r3, [sp, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	dd01      	ble.n	801296c <_dtoa_r+0x924>
 8012968:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801296c:	f10a 0601 	add.w	r6, sl, #1
 8012970:	f88a 8000 	strb.w	r8, [sl]
 8012974:	e786      	b.n	8012884 <_dtoa_r+0x83c>
 8012976:	4638      	mov	r0, r7
 8012978:	e7c2      	b.n	8012900 <_dtoa_r+0x8b8>
 801297a:	2301      	movs	r3, #1
 801297c:	e7e3      	b.n	8012946 <_dtoa_r+0x8fe>
 801297e:	9a02      	ldr	r2, [sp, #8]
 8012980:	2a00      	cmp	r2, #0
 8012982:	db04      	blt.n	801298e <_dtoa_r+0x946>
 8012984:	d124      	bne.n	80129d0 <_dtoa_r+0x988>
 8012986:	9a08      	ldr	r2, [sp, #32]
 8012988:	bb12      	cbnz	r2, 80129d0 <_dtoa_r+0x988>
 801298a:	9a07      	ldr	r2, [sp, #28]
 801298c:	bb02      	cbnz	r2, 80129d0 <_dtoa_r+0x988>
 801298e:	2b00      	cmp	r3, #0
 8012990:	ddec      	ble.n	801296c <_dtoa_r+0x924>
 8012992:	2201      	movs	r2, #1
 8012994:	9901      	ldr	r1, [sp, #4]
 8012996:	4620      	mov	r0, r4
 8012998:	f000 ffd4 	bl	8013944 <__lshift>
 801299c:	4629      	mov	r1, r5
 801299e:	9001      	str	r0, [sp, #4]
 80129a0:	f001 f824 	bl	80139ec <__mcmp>
 80129a4:	2800      	cmp	r0, #0
 80129a6:	dc03      	bgt.n	80129b0 <_dtoa_r+0x968>
 80129a8:	d1e0      	bne.n	801296c <_dtoa_r+0x924>
 80129aa:	f018 0f01 	tst.w	r8, #1
 80129ae:	d0dd      	beq.n	801296c <_dtoa_r+0x924>
 80129b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80129b4:	d1d8      	bne.n	8012968 <_dtoa_r+0x920>
 80129b6:	2339      	movs	r3, #57	; 0x39
 80129b8:	f10a 0601 	add.w	r6, sl, #1
 80129bc:	f88a 3000 	strb.w	r3, [sl]
 80129c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80129c4:	2b39      	cmp	r3, #57	; 0x39
 80129c6:	f106 32ff 	add.w	r2, r6, #4294967295
 80129ca:	d04c      	beq.n	8012a66 <_dtoa_r+0xa1e>
 80129cc:	3301      	adds	r3, #1
 80129ce:	e051      	b.n	8012a74 <_dtoa_r+0xa2c>
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f10a 0601 	add.w	r6, sl, #1
 80129d6:	dd05      	ble.n	80129e4 <_dtoa_r+0x99c>
 80129d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80129dc:	d0eb      	beq.n	80129b6 <_dtoa_r+0x96e>
 80129de:	f108 0801 	add.w	r8, r8, #1
 80129e2:	e7c5      	b.n	8012970 <_dtoa_r+0x928>
 80129e4:	9b04      	ldr	r3, [sp, #16]
 80129e6:	9a06      	ldr	r2, [sp, #24]
 80129e8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80129ec:	1af3      	subs	r3, r6, r3
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d021      	beq.n	8012a36 <_dtoa_r+0x9ee>
 80129f2:	2300      	movs	r3, #0
 80129f4:	220a      	movs	r2, #10
 80129f6:	9901      	ldr	r1, [sp, #4]
 80129f8:	4620      	mov	r0, r4
 80129fa:	f000 fdee 	bl	80135da <__multadd>
 80129fe:	45b9      	cmp	r9, r7
 8012a00:	9001      	str	r0, [sp, #4]
 8012a02:	f04f 0300 	mov.w	r3, #0
 8012a06:	f04f 020a 	mov.w	r2, #10
 8012a0a:	4649      	mov	r1, r9
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	d105      	bne.n	8012a1c <_dtoa_r+0x9d4>
 8012a10:	f000 fde3 	bl	80135da <__multadd>
 8012a14:	4681      	mov	r9, r0
 8012a16:	4607      	mov	r7, r0
 8012a18:	46b2      	mov	sl, r6
 8012a1a:	e779      	b.n	8012910 <_dtoa_r+0x8c8>
 8012a1c:	f000 fddd 	bl	80135da <__multadd>
 8012a20:	4639      	mov	r1, r7
 8012a22:	4681      	mov	r9, r0
 8012a24:	2300      	movs	r3, #0
 8012a26:	220a      	movs	r2, #10
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f000 fdd6 	bl	80135da <__multadd>
 8012a2e:	4607      	mov	r7, r0
 8012a30:	e7f2      	b.n	8012a18 <_dtoa_r+0x9d0>
 8012a32:	f04f 0900 	mov.w	r9, #0
 8012a36:	2201      	movs	r2, #1
 8012a38:	9901      	ldr	r1, [sp, #4]
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f000 ff82 	bl	8013944 <__lshift>
 8012a40:	4629      	mov	r1, r5
 8012a42:	9001      	str	r0, [sp, #4]
 8012a44:	f000 ffd2 	bl	80139ec <__mcmp>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	dcb9      	bgt.n	80129c0 <_dtoa_r+0x978>
 8012a4c:	d102      	bne.n	8012a54 <_dtoa_r+0xa0c>
 8012a4e:	f018 0f01 	tst.w	r8, #1
 8012a52:	d1b5      	bne.n	80129c0 <_dtoa_r+0x978>
 8012a54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a58:	2b30      	cmp	r3, #48	; 0x30
 8012a5a:	f106 32ff 	add.w	r2, r6, #4294967295
 8012a5e:	f47f af11 	bne.w	8012884 <_dtoa_r+0x83c>
 8012a62:	4616      	mov	r6, r2
 8012a64:	e7f6      	b.n	8012a54 <_dtoa_r+0xa0c>
 8012a66:	9b04      	ldr	r3, [sp, #16]
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d105      	bne.n	8012a78 <_dtoa_r+0xa30>
 8012a6c:	9a04      	ldr	r2, [sp, #16]
 8012a6e:	f10b 0b01 	add.w	fp, fp, #1
 8012a72:	2331      	movs	r3, #49	; 0x31
 8012a74:	7013      	strb	r3, [r2, #0]
 8012a76:	e705      	b.n	8012884 <_dtoa_r+0x83c>
 8012a78:	4616      	mov	r6, r2
 8012a7a:	e7a1      	b.n	80129c0 <_dtoa_r+0x978>
 8012a7c:	4b16      	ldr	r3, [pc, #88]	; (8012ad8 <_dtoa_r+0xa90>)
 8012a7e:	f7ff bb48 	b.w	8012112 <_dtoa_r+0xca>
 8012a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	f47f ab23 	bne.w	80120d0 <_dtoa_r+0x88>
 8012a8a:	4b14      	ldr	r3, [pc, #80]	; (8012adc <_dtoa_r+0xa94>)
 8012a8c:	f7ff bb41 	b.w	8012112 <_dtoa_r+0xca>
 8012a90:	9b08      	ldr	r3, [sp, #32]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	f77f ae3b 	ble.w	801270e <_dtoa_r+0x6c6>
 8012a98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012a9c:	e64f      	b.n	801273e <_dtoa_r+0x6f6>
 8012a9e:	9b06      	ldr	r3, [sp, #24]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	dc03      	bgt.n	8012aac <_dtoa_r+0xa64>
 8012aa4:	9b08      	ldr	r3, [sp, #32]
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	f73f aed7 	bgt.w	801285a <_dtoa_r+0x812>
 8012aac:	9e04      	ldr	r6, [sp, #16]
 8012aae:	9801      	ldr	r0, [sp, #4]
 8012ab0:	4629      	mov	r1, r5
 8012ab2:	f7ff fa3b 	bl	8011f2c <quorem>
 8012ab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012aba:	f806 8b01 	strb.w	r8, [r6], #1
 8012abe:	9b04      	ldr	r3, [sp, #16]
 8012ac0:	9a06      	ldr	r2, [sp, #24]
 8012ac2:	1af3      	subs	r3, r6, r3
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	ddb4      	ble.n	8012a32 <_dtoa_r+0x9ea>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	220a      	movs	r2, #10
 8012acc:	9901      	ldr	r1, [sp, #4]
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f000 fd83 	bl	80135da <__multadd>
 8012ad4:	9001      	str	r0, [sp, #4]
 8012ad6:	e7ea      	b.n	8012aae <_dtoa_r+0xa66>
 8012ad8:	08015094 	.word	0x08015094
 8012adc:	08015110 	.word	0x08015110

08012ae0 <__sflush_r>:
 8012ae0:	898a      	ldrh	r2, [r1, #12]
 8012ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	0710      	lsls	r0, r2, #28
 8012aea:	460c      	mov	r4, r1
 8012aec:	d458      	bmi.n	8012ba0 <__sflush_r+0xc0>
 8012aee:	684b      	ldr	r3, [r1, #4]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	dc05      	bgt.n	8012b00 <__sflush_r+0x20>
 8012af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	dc02      	bgt.n	8012b00 <__sflush_r+0x20>
 8012afa:	2000      	movs	r0, #0
 8012afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b02:	2e00      	cmp	r6, #0
 8012b04:	d0f9      	beq.n	8012afa <__sflush_r+0x1a>
 8012b06:	2300      	movs	r3, #0
 8012b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012b0c:	682f      	ldr	r7, [r5, #0]
 8012b0e:	6a21      	ldr	r1, [r4, #32]
 8012b10:	602b      	str	r3, [r5, #0]
 8012b12:	d032      	beq.n	8012b7a <__sflush_r+0x9a>
 8012b14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	075a      	lsls	r2, r3, #29
 8012b1a:	d505      	bpl.n	8012b28 <__sflush_r+0x48>
 8012b1c:	6863      	ldr	r3, [r4, #4]
 8012b1e:	1ac0      	subs	r0, r0, r3
 8012b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b22:	b10b      	cbz	r3, 8012b28 <__sflush_r+0x48>
 8012b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b26:	1ac0      	subs	r0, r0, r3
 8012b28:	2300      	movs	r3, #0
 8012b2a:	4602      	mov	r2, r0
 8012b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b2e:	6a21      	ldr	r1, [r4, #32]
 8012b30:	4628      	mov	r0, r5
 8012b32:	47b0      	blx	r6
 8012b34:	1c43      	adds	r3, r0, #1
 8012b36:	89a3      	ldrh	r3, [r4, #12]
 8012b38:	d106      	bne.n	8012b48 <__sflush_r+0x68>
 8012b3a:	6829      	ldr	r1, [r5, #0]
 8012b3c:	291d      	cmp	r1, #29
 8012b3e:	d848      	bhi.n	8012bd2 <__sflush_r+0xf2>
 8012b40:	4a29      	ldr	r2, [pc, #164]	; (8012be8 <__sflush_r+0x108>)
 8012b42:	40ca      	lsrs	r2, r1
 8012b44:	07d6      	lsls	r6, r2, #31
 8012b46:	d544      	bpl.n	8012bd2 <__sflush_r+0xf2>
 8012b48:	2200      	movs	r2, #0
 8012b4a:	6062      	str	r2, [r4, #4]
 8012b4c:	04d9      	lsls	r1, r3, #19
 8012b4e:	6922      	ldr	r2, [r4, #16]
 8012b50:	6022      	str	r2, [r4, #0]
 8012b52:	d504      	bpl.n	8012b5e <__sflush_r+0x7e>
 8012b54:	1c42      	adds	r2, r0, #1
 8012b56:	d101      	bne.n	8012b5c <__sflush_r+0x7c>
 8012b58:	682b      	ldr	r3, [r5, #0]
 8012b5a:	b903      	cbnz	r3, 8012b5e <__sflush_r+0x7e>
 8012b5c:	6560      	str	r0, [r4, #84]	; 0x54
 8012b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b60:	602f      	str	r7, [r5, #0]
 8012b62:	2900      	cmp	r1, #0
 8012b64:	d0c9      	beq.n	8012afa <__sflush_r+0x1a>
 8012b66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b6a:	4299      	cmp	r1, r3
 8012b6c:	d002      	beq.n	8012b74 <__sflush_r+0x94>
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f001 f8f6 	bl	8013d60 <_free_r>
 8012b74:	2000      	movs	r0, #0
 8012b76:	6360      	str	r0, [r4, #52]	; 0x34
 8012b78:	e7c0      	b.n	8012afc <__sflush_r+0x1c>
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	47b0      	blx	r6
 8012b80:	1c41      	adds	r1, r0, #1
 8012b82:	d1c8      	bne.n	8012b16 <__sflush_r+0x36>
 8012b84:	682b      	ldr	r3, [r5, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d0c5      	beq.n	8012b16 <__sflush_r+0x36>
 8012b8a:	2b1d      	cmp	r3, #29
 8012b8c:	d001      	beq.n	8012b92 <__sflush_r+0xb2>
 8012b8e:	2b16      	cmp	r3, #22
 8012b90:	d101      	bne.n	8012b96 <__sflush_r+0xb6>
 8012b92:	602f      	str	r7, [r5, #0]
 8012b94:	e7b1      	b.n	8012afa <__sflush_r+0x1a>
 8012b96:	89a3      	ldrh	r3, [r4, #12]
 8012b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b9c:	81a3      	strh	r3, [r4, #12]
 8012b9e:	e7ad      	b.n	8012afc <__sflush_r+0x1c>
 8012ba0:	690f      	ldr	r7, [r1, #16]
 8012ba2:	2f00      	cmp	r7, #0
 8012ba4:	d0a9      	beq.n	8012afa <__sflush_r+0x1a>
 8012ba6:	0793      	lsls	r3, r2, #30
 8012ba8:	680e      	ldr	r6, [r1, #0]
 8012baa:	bf08      	it	eq
 8012bac:	694b      	ldreq	r3, [r1, #20]
 8012bae:	600f      	str	r7, [r1, #0]
 8012bb0:	bf18      	it	ne
 8012bb2:	2300      	movne	r3, #0
 8012bb4:	eba6 0807 	sub.w	r8, r6, r7
 8012bb8:	608b      	str	r3, [r1, #8]
 8012bba:	f1b8 0f00 	cmp.w	r8, #0
 8012bbe:	dd9c      	ble.n	8012afa <__sflush_r+0x1a>
 8012bc0:	4643      	mov	r3, r8
 8012bc2:	463a      	mov	r2, r7
 8012bc4:	6a21      	ldr	r1, [r4, #32]
 8012bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012bc8:	4628      	mov	r0, r5
 8012bca:	47b0      	blx	r6
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	dc06      	bgt.n	8012bde <__sflush_r+0xfe>
 8012bd0:	89a3      	ldrh	r3, [r4, #12]
 8012bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bd6:	81a3      	strh	r3, [r4, #12]
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bdc:	e78e      	b.n	8012afc <__sflush_r+0x1c>
 8012bde:	4407      	add	r7, r0
 8012be0:	eba8 0800 	sub.w	r8, r8, r0
 8012be4:	e7e9      	b.n	8012bba <__sflush_r+0xda>
 8012be6:	bf00      	nop
 8012be8:	20400001 	.word	0x20400001

08012bec <_fflush_r>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	690b      	ldr	r3, [r1, #16]
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	b1db      	cbz	r3, 8012c2e <_fflush_r+0x42>
 8012bf6:	b118      	cbz	r0, 8012c00 <_fflush_r+0x14>
 8012bf8:	6983      	ldr	r3, [r0, #24]
 8012bfa:	b90b      	cbnz	r3, 8012c00 <_fflush_r+0x14>
 8012bfc:	f000 f860 	bl	8012cc0 <__sinit>
 8012c00:	4b0c      	ldr	r3, [pc, #48]	; (8012c34 <_fflush_r+0x48>)
 8012c02:	429c      	cmp	r4, r3
 8012c04:	d109      	bne.n	8012c1a <_fflush_r+0x2e>
 8012c06:	686c      	ldr	r4, [r5, #4]
 8012c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c0c:	b17b      	cbz	r3, 8012c2e <_fflush_r+0x42>
 8012c0e:	4621      	mov	r1, r4
 8012c10:	4628      	mov	r0, r5
 8012c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c16:	f7ff bf63 	b.w	8012ae0 <__sflush_r>
 8012c1a:	4b07      	ldr	r3, [pc, #28]	; (8012c38 <_fflush_r+0x4c>)
 8012c1c:	429c      	cmp	r4, r3
 8012c1e:	d101      	bne.n	8012c24 <_fflush_r+0x38>
 8012c20:	68ac      	ldr	r4, [r5, #8]
 8012c22:	e7f1      	b.n	8012c08 <_fflush_r+0x1c>
 8012c24:	4b05      	ldr	r3, [pc, #20]	; (8012c3c <_fflush_r+0x50>)
 8012c26:	429c      	cmp	r4, r3
 8012c28:	bf08      	it	eq
 8012c2a:	68ec      	ldreq	r4, [r5, #12]
 8012c2c:	e7ec      	b.n	8012c08 <_fflush_r+0x1c>
 8012c2e:	2000      	movs	r0, #0
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	bf00      	nop
 8012c34:	08015140 	.word	0x08015140
 8012c38:	08015160 	.word	0x08015160
 8012c3c:	08015120 	.word	0x08015120

08012c40 <std>:
 8012c40:	2300      	movs	r3, #0
 8012c42:	b510      	push	{r4, lr}
 8012c44:	4604      	mov	r4, r0
 8012c46:	e9c0 3300 	strd	r3, r3, [r0]
 8012c4a:	6083      	str	r3, [r0, #8]
 8012c4c:	8181      	strh	r1, [r0, #12]
 8012c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8012c50:	81c2      	strh	r2, [r0, #14]
 8012c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c56:	6183      	str	r3, [r0, #24]
 8012c58:	4619      	mov	r1, r3
 8012c5a:	2208      	movs	r2, #8
 8012c5c:	305c      	adds	r0, #92	; 0x5c
 8012c5e:	f7fd fb82 	bl	8010366 <memset>
 8012c62:	4b05      	ldr	r3, [pc, #20]	; (8012c78 <std+0x38>)
 8012c64:	6263      	str	r3, [r4, #36]	; 0x24
 8012c66:	4b05      	ldr	r3, [pc, #20]	; (8012c7c <std+0x3c>)
 8012c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c6a:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <std+0x40>)
 8012c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c6e:	4b05      	ldr	r3, [pc, #20]	; (8012c84 <std+0x44>)
 8012c70:	6224      	str	r4, [r4, #32]
 8012c72:	6323      	str	r3, [r4, #48]	; 0x30
 8012c74:	bd10      	pop	{r4, pc}
 8012c76:	bf00      	nop
 8012c78:	08014175 	.word	0x08014175
 8012c7c:	08014197 	.word	0x08014197
 8012c80:	080141cf 	.word	0x080141cf
 8012c84:	080141f3 	.word	0x080141f3

08012c88 <_cleanup_r>:
 8012c88:	4901      	ldr	r1, [pc, #4]	; (8012c90 <_cleanup_r+0x8>)
 8012c8a:	f000 b885 	b.w	8012d98 <_fwalk_reent>
 8012c8e:	bf00      	nop
 8012c90:	08012bed 	.word	0x08012bed

08012c94 <__sfmoreglue>:
 8012c94:	b570      	push	{r4, r5, r6, lr}
 8012c96:	1e4a      	subs	r2, r1, #1
 8012c98:	2568      	movs	r5, #104	; 0x68
 8012c9a:	4355      	muls	r5, r2
 8012c9c:	460e      	mov	r6, r1
 8012c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ca2:	f001 f8ab 	bl	8013dfc <_malloc_r>
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	b140      	cbz	r0, 8012cbc <__sfmoreglue+0x28>
 8012caa:	2100      	movs	r1, #0
 8012cac:	e9c0 1600 	strd	r1, r6, [r0]
 8012cb0:	300c      	adds	r0, #12
 8012cb2:	60a0      	str	r0, [r4, #8]
 8012cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012cb8:	f7fd fb55 	bl	8010366 <memset>
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	bd70      	pop	{r4, r5, r6, pc}

08012cc0 <__sinit>:
 8012cc0:	6983      	ldr	r3, [r0, #24]
 8012cc2:	b510      	push	{r4, lr}
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	bb33      	cbnz	r3, 8012d16 <__sinit+0x56>
 8012cc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012ccc:	6503      	str	r3, [r0, #80]	; 0x50
 8012cce:	4b12      	ldr	r3, [pc, #72]	; (8012d18 <__sinit+0x58>)
 8012cd0:	4a12      	ldr	r2, [pc, #72]	; (8012d1c <__sinit+0x5c>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	6282      	str	r2, [r0, #40]	; 0x28
 8012cd6:	4298      	cmp	r0, r3
 8012cd8:	bf04      	itt	eq
 8012cda:	2301      	moveq	r3, #1
 8012cdc:	6183      	streq	r3, [r0, #24]
 8012cde:	f000 f81f 	bl	8012d20 <__sfp>
 8012ce2:	6060      	str	r0, [r4, #4]
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f000 f81b 	bl	8012d20 <__sfp>
 8012cea:	60a0      	str	r0, [r4, #8]
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 f817 	bl	8012d20 <__sfp>
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	60e0      	str	r0, [r4, #12]
 8012cf6:	2104      	movs	r1, #4
 8012cf8:	6860      	ldr	r0, [r4, #4]
 8012cfa:	f7ff ffa1 	bl	8012c40 <std>
 8012cfe:	2201      	movs	r2, #1
 8012d00:	2109      	movs	r1, #9
 8012d02:	68a0      	ldr	r0, [r4, #8]
 8012d04:	f7ff ff9c 	bl	8012c40 <std>
 8012d08:	2202      	movs	r2, #2
 8012d0a:	2112      	movs	r1, #18
 8012d0c:	68e0      	ldr	r0, [r4, #12]
 8012d0e:	f7ff ff97 	bl	8012c40 <std>
 8012d12:	2301      	movs	r3, #1
 8012d14:	61a3      	str	r3, [r4, #24]
 8012d16:	bd10      	pop	{r4, pc}
 8012d18:	08015080 	.word	0x08015080
 8012d1c:	08012c89 	.word	0x08012c89

08012d20 <__sfp>:
 8012d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d22:	4b1b      	ldr	r3, [pc, #108]	; (8012d90 <__sfp+0x70>)
 8012d24:	681e      	ldr	r6, [r3, #0]
 8012d26:	69b3      	ldr	r3, [r6, #24]
 8012d28:	4607      	mov	r7, r0
 8012d2a:	b913      	cbnz	r3, 8012d32 <__sfp+0x12>
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	f7ff ffc7 	bl	8012cc0 <__sinit>
 8012d32:	3648      	adds	r6, #72	; 0x48
 8012d34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	d503      	bpl.n	8012d44 <__sfp+0x24>
 8012d3c:	6833      	ldr	r3, [r6, #0]
 8012d3e:	b133      	cbz	r3, 8012d4e <__sfp+0x2e>
 8012d40:	6836      	ldr	r6, [r6, #0]
 8012d42:	e7f7      	b.n	8012d34 <__sfp+0x14>
 8012d44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d48:	b16d      	cbz	r5, 8012d66 <__sfp+0x46>
 8012d4a:	3468      	adds	r4, #104	; 0x68
 8012d4c:	e7f4      	b.n	8012d38 <__sfp+0x18>
 8012d4e:	2104      	movs	r1, #4
 8012d50:	4638      	mov	r0, r7
 8012d52:	f7ff ff9f 	bl	8012c94 <__sfmoreglue>
 8012d56:	6030      	str	r0, [r6, #0]
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d1f1      	bne.n	8012d40 <__sfp+0x20>
 8012d5c:	230c      	movs	r3, #12
 8012d5e:	603b      	str	r3, [r7, #0]
 8012d60:	4604      	mov	r4, r0
 8012d62:	4620      	mov	r0, r4
 8012d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d66:	4b0b      	ldr	r3, [pc, #44]	; (8012d94 <__sfp+0x74>)
 8012d68:	6665      	str	r5, [r4, #100]	; 0x64
 8012d6a:	e9c4 5500 	strd	r5, r5, [r4]
 8012d6e:	60a5      	str	r5, [r4, #8]
 8012d70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012d74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012d78:	2208      	movs	r2, #8
 8012d7a:	4629      	mov	r1, r5
 8012d7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d80:	f7fd faf1 	bl	8010366 <memset>
 8012d84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d8c:	e7e9      	b.n	8012d62 <__sfp+0x42>
 8012d8e:	bf00      	nop
 8012d90:	08015080 	.word	0x08015080
 8012d94:	ffff0001 	.word	0xffff0001

08012d98 <_fwalk_reent>:
 8012d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d9c:	4680      	mov	r8, r0
 8012d9e:	4689      	mov	r9, r1
 8012da0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012da4:	2600      	movs	r6, #0
 8012da6:	b914      	cbnz	r4, 8012dae <_fwalk_reent+0x16>
 8012da8:	4630      	mov	r0, r6
 8012daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012db2:	3f01      	subs	r7, #1
 8012db4:	d501      	bpl.n	8012dba <_fwalk_reent+0x22>
 8012db6:	6824      	ldr	r4, [r4, #0]
 8012db8:	e7f5      	b.n	8012da6 <_fwalk_reent+0xe>
 8012dba:	89ab      	ldrh	r3, [r5, #12]
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d907      	bls.n	8012dd0 <_fwalk_reent+0x38>
 8012dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	d003      	beq.n	8012dd0 <_fwalk_reent+0x38>
 8012dc8:	4629      	mov	r1, r5
 8012dca:	4640      	mov	r0, r8
 8012dcc:	47c8      	blx	r9
 8012dce:	4306      	orrs	r6, r0
 8012dd0:	3568      	adds	r5, #104	; 0x68
 8012dd2:	e7ee      	b.n	8012db2 <_fwalk_reent+0x1a>

08012dd4 <rshift>:
 8012dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dd6:	6906      	ldr	r6, [r0, #16]
 8012dd8:	114b      	asrs	r3, r1, #5
 8012dda:	429e      	cmp	r6, r3
 8012ddc:	f100 0414 	add.w	r4, r0, #20
 8012de0:	dd30      	ble.n	8012e44 <rshift+0x70>
 8012de2:	f011 011f 	ands.w	r1, r1, #31
 8012de6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012dea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012dee:	d108      	bne.n	8012e02 <rshift+0x2e>
 8012df0:	4621      	mov	r1, r4
 8012df2:	42b2      	cmp	r2, r6
 8012df4:	460b      	mov	r3, r1
 8012df6:	d211      	bcs.n	8012e1c <rshift+0x48>
 8012df8:	f852 3b04 	ldr.w	r3, [r2], #4
 8012dfc:	f841 3b04 	str.w	r3, [r1], #4
 8012e00:	e7f7      	b.n	8012df2 <rshift+0x1e>
 8012e02:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012e06:	f1c1 0c20 	rsb	ip, r1, #32
 8012e0a:	40cd      	lsrs	r5, r1
 8012e0c:	3204      	adds	r2, #4
 8012e0e:	4623      	mov	r3, r4
 8012e10:	42b2      	cmp	r2, r6
 8012e12:	4617      	mov	r7, r2
 8012e14:	d30c      	bcc.n	8012e30 <rshift+0x5c>
 8012e16:	601d      	str	r5, [r3, #0]
 8012e18:	b105      	cbz	r5, 8012e1c <rshift+0x48>
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	1b1a      	subs	r2, r3, r4
 8012e1e:	42a3      	cmp	r3, r4
 8012e20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012e24:	bf08      	it	eq
 8012e26:	2300      	moveq	r3, #0
 8012e28:	6102      	str	r2, [r0, #16]
 8012e2a:	bf08      	it	eq
 8012e2c:	6143      	streq	r3, [r0, #20]
 8012e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e30:	683f      	ldr	r7, [r7, #0]
 8012e32:	fa07 f70c 	lsl.w	r7, r7, ip
 8012e36:	433d      	orrs	r5, r7
 8012e38:	f843 5b04 	str.w	r5, [r3], #4
 8012e3c:	f852 5b04 	ldr.w	r5, [r2], #4
 8012e40:	40cd      	lsrs	r5, r1
 8012e42:	e7e5      	b.n	8012e10 <rshift+0x3c>
 8012e44:	4623      	mov	r3, r4
 8012e46:	e7e9      	b.n	8012e1c <rshift+0x48>

08012e48 <__hexdig_fun>:
 8012e48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012e4c:	2b09      	cmp	r3, #9
 8012e4e:	d802      	bhi.n	8012e56 <__hexdig_fun+0xe>
 8012e50:	3820      	subs	r0, #32
 8012e52:	b2c0      	uxtb	r0, r0
 8012e54:	4770      	bx	lr
 8012e56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012e5a:	2b05      	cmp	r3, #5
 8012e5c:	d801      	bhi.n	8012e62 <__hexdig_fun+0x1a>
 8012e5e:	3847      	subs	r0, #71	; 0x47
 8012e60:	e7f7      	b.n	8012e52 <__hexdig_fun+0xa>
 8012e62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012e66:	2b05      	cmp	r3, #5
 8012e68:	d801      	bhi.n	8012e6e <__hexdig_fun+0x26>
 8012e6a:	3827      	subs	r0, #39	; 0x27
 8012e6c:	e7f1      	b.n	8012e52 <__hexdig_fun+0xa>
 8012e6e:	2000      	movs	r0, #0
 8012e70:	4770      	bx	lr

08012e72 <__gethex>:
 8012e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e76:	b08b      	sub	sp, #44	; 0x2c
 8012e78:	468a      	mov	sl, r1
 8012e7a:	9002      	str	r0, [sp, #8]
 8012e7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012e7e:	9306      	str	r3, [sp, #24]
 8012e80:	4690      	mov	r8, r2
 8012e82:	f000 fad0 	bl	8013426 <__localeconv_l>
 8012e86:	6803      	ldr	r3, [r0, #0]
 8012e88:	9303      	str	r3, [sp, #12]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7ed f9d8 	bl	8000240 <strlen>
 8012e90:	9b03      	ldr	r3, [sp, #12]
 8012e92:	9001      	str	r0, [sp, #4]
 8012e94:	4403      	add	r3, r0
 8012e96:	f04f 0b00 	mov.w	fp, #0
 8012e9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012e9e:	9307      	str	r3, [sp, #28]
 8012ea0:	f8da 3000 	ldr.w	r3, [sl]
 8012ea4:	3302      	adds	r3, #2
 8012ea6:	461f      	mov	r7, r3
 8012ea8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012eac:	2830      	cmp	r0, #48	; 0x30
 8012eae:	d06c      	beq.n	8012f8a <__gethex+0x118>
 8012eb0:	f7ff ffca 	bl	8012e48 <__hexdig_fun>
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	d16a      	bne.n	8012f90 <__gethex+0x11e>
 8012eba:	9a01      	ldr	r2, [sp, #4]
 8012ebc:	9903      	ldr	r1, [sp, #12]
 8012ebe:	4638      	mov	r0, r7
 8012ec0:	f001 f99b 	bl	80141fa <strncmp>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	d166      	bne.n	8012f96 <__gethex+0x124>
 8012ec8:	9b01      	ldr	r3, [sp, #4]
 8012eca:	5cf8      	ldrb	r0, [r7, r3]
 8012ecc:	18fe      	adds	r6, r7, r3
 8012ece:	f7ff ffbb 	bl	8012e48 <__hexdig_fun>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d062      	beq.n	8012f9c <__gethex+0x12a>
 8012ed6:	4633      	mov	r3, r6
 8012ed8:	7818      	ldrb	r0, [r3, #0]
 8012eda:	2830      	cmp	r0, #48	; 0x30
 8012edc:	461f      	mov	r7, r3
 8012ede:	f103 0301 	add.w	r3, r3, #1
 8012ee2:	d0f9      	beq.n	8012ed8 <__gethex+0x66>
 8012ee4:	f7ff ffb0 	bl	8012e48 <__hexdig_fun>
 8012ee8:	fab0 f580 	clz	r5, r0
 8012eec:	096d      	lsrs	r5, r5, #5
 8012eee:	4634      	mov	r4, r6
 8012ef0:	f04f 0b01 	mov.w	fp, #1
 8012ef4:	463a      	mov	r2, r7
 8012ef6:	4616      	mov	r6, r2
 8012ef8:	3201      	adds	r2, #1
 8012efa:	7830      	ldrb	r0, [r6, #0]
 8012efc:	f7ff ffa4 	bl	8012e48 <__hexdig_fun>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d1f8      	bne.n	8012ef6 <__gethex+0x84>
 8012f04:	9a01      	ldr	r2, [sp, #4]
 8012f06:	9903      	ldr	r1, [sp, #12]
 8012f08:	4630      	mov	r0, r6
 8012f0a:	f001 f976 	bl	80141fa <strncmp>
 8012f0e:	b950      	cbnz	r0, 8012f26 <__gethex+0xb4>
 8012f10:	b954      	cbnz	r4, 8012f28 <__gethex+0xb6>
 8012f12:	9b01      	ldr	r3, [sp, #4]
 8012f14:	18f4      	adds	r4, r6, r3
 8012f16:	4622      	mov	r2, r4
 8012f18:	4616      	mov	r6, r2
 8012f1a:	3201      	adds	r2, #1
 8012f1c:	7830      	ldrb	r0, [r6, #0]
 8012f1e:	f7ff ff93 	bl	8012e48 <__hexdig_fun>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d1f8      	bne.n	8012f18 <__gethex+0xa6>
 8012f26:	b10c      	cbz	r4, 8012f2c <__gethex+0xba>
 8012f28:	1ba4      	subs	r4, r4, r6
 8012f2a:	00a4      	lsls	r4, r4, #2
 8012f2c:	7833      	ldrb	r3, [r6, #0]
 8012f2e:	2b50      	cmp	r3, #80	; 0x50
 8012f30:	d001      	beq.n	8012f36 <__gethex+0xc4>
 8012f32:	2b70      	cmp	r3, #112	; 0x70
 8012f34:	d140      	bne.n	8012fb8 <__gethex+0x146>
 8012f36:	7873      	ldrb	r3, [r6, #1]
 8012f38:	2b2b      	cmp	r3, #43	; 0x2b
 8012f3a:	d031      	beq.n	8012fa0 <__gethex+0x12e>
 8012f3c:	2b2d      	cmp	r3, #45	; 0x2d
 8012f3e:	d033      	beq.n	8012fa8 <__gethex+0x136>
 8012f40:	1c71      	adds	r1, r6, #1
 8012f42:	f04f 0900 	mov.w	r9, #0
 8012f46:	7808      	ldrb	r0, [r1, #0]
 8012f48:	f7ff ff7e 	bl	8012e48 <__hexdig_fun>
 8012f4c:	1e43      	subs	r3, r0, #1
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	2b18      	cmp	r3, #24
 8012f52:	d831      	bhi.n	8012fb8 <__gethex+0x146>
 8012f54:	f1a0 0210 	sub.w	r2, r0, #16
 8012f58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012f5c:	f7ff ff74 	bl	8012e48 <__hexdig_fun>
 8012f60:	1e43      	subs	r3, r0, #1
 8012f62:	b2db      	uxtb	r3, r3
 8012f64:	2b18      	cmp	r3, #24
 8012f66:	d922      	bls.n	8012fae <__gethex+0x13c>
 8012f68:	f1b9 0f00 	cmp.w	r9, #0
 8012f6c:	d000      	beq.n	8012f70 <__gethex+0xfe>
 8012f6e:	4252      	negs	r2, r2
 8012f70:	4414      	add	r4, r2
 8012f72:	f8ca 1000 	str.w	r1, [sl]
 8012f76:	b30d      	cbz	r5, 8012fbc <__gethex+0x14a>
 8012f78:	f1bb 0f00 	cmp.w	fp, #0
 8012f7c:	bf0c      	ite	eq
 8012f7e:	2706      	moveq	r7, #6
 8012f80:	2700      	movne	r7, #0
 8012f82:	4638      	mov	r0, r7
 8012f84:	b00b      	add	sp, #44	; 0x2c
 8012f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f8a:	f10b 0b01 	add.w	fp, fp, #1
 8012f8e:	e78a      	b.n	8012ea6 <__gethex+0x34>
 8012f90:	2500      	movs	r5, #0
 8012f92:	462c      	mov	r4, r5
 8012f94:	e7ae      	b.n	8012ef4 <__gethex+0x82>
 8012f96:	463e      	mov	r6, r7
 8012f98:	2501      	movs	r5, #1
 8012f9a:	e7c7      	b.n	8012f2c <__gethex+0xba>
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	e7fb      	b.n	8012f98 <__gethex+0x126>
 8012fa0:	f04f 0900 	mov.w	r9, #0
 8012fa4:	1cb1      	adds	r1, r6, #2
 8012fa6:	e7ce      	b.n	8012f46 <__gethex+0xd4>
 8012fa8:	f04f 0901 	mov.w	r9, #1
 8012fac:	e7fa      	b.n	8012fa4 <__gethex+0x132>
 8012fae:	230a      	movs	r3, #10
 8012fb0:	fb03 0202 	mla	r2, r3, r2, r0
 8012fb4:	3a10      	subs	r2, #16
 8012fb6:	e7cf      	b.n	8012f58 <__gethex+0xe6>
 8012fb8:	4631      	mov	r1, r6
 8012fba:	e7da      	b.n	8012f72 <__gethex+0x100>
 8012fbc:	1bf3      	subs	r3, r6, r7
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	2b07      	cmp	r3, #7
 8012fc4:	dc49      	bgt.n	801305a <__gethex+0x1e8>
 8012fc6:	9802      	ldr	r0, [sp, #8]
 8012fc8:	f000 fabc 	bl	8013544 <_Balloc>
 8012fcc:	9b01      	ldr	r3, [sp, #4]
 8012fce:	f100 0914 	add.w	r9, r0, #20
 8012fd2:	f04f 0b00 	mov.w	fp, #0
 8012fd6:	f1c3 0301 	rsb	r3, r3, #1
 8012fda:	4605      	mov	r5, r0
 8012fdc:	f8cd 9010 	str.w	r9, [sp, #16]
 8012fe0:	46da      	mov	sl, fp
 8012fe2:	9308      	str	r3, [sp, #32]
 8012fe4:	42b7      	cmp	r7, r6
 8012fe6:	d33b      	bcc.n	8013060 <__gethex+0x1ee>
 8012fe8:	9804      	ldr	r0, [sp, #16]
 8012fea:	f840 ab04 	str.w	sl, [r0], #4
 8012fee:	eba0 0009 	sub.w	r0, r0, r9
 8012ff2:	1080      	asrs	r0, r0, #2
 8012ff4:	6128      	str	r0, [r5, #16]
 8012ff6:	0147      	lsls	r7, r0, #5
 8012ff8:	4650      	mov	r0, sl
 8012ffa:	f000 fb67 	bl	80136cc <__hi0bits>
 8012ffe:	f8d8 6000 	ldr.w	r6, [r8]
 8013002:	1a3f      	subs	r7, r7, r0
 8013004:	42b7      	cmp	r7, r6
 8013006:	dd64      	ble.n	80130d2 <__gethex+0x260>
 8013008:	1bbf      	subs	r7, r7, r6
 801300a:	4639      	mov	r1, r7
 801300c:	4628      	mov	r0, r5
 801300e:	f000 fe78 	bl	8013d02 <__any_on>
 8013012:	4682      	mov	sl, r0
 8013014:	b178      	cbz	r0, 8013036 <__gethex+0x1c4>
 8013016:	1e7b      	subs	r3, r7, #1
 8013018:	1159      	asrs	r1, r3, #5
 801301a:	f003 021f 	and.w	r2, r3, #31
 801301e:	f04f 0a01 	mov.w	sl, #1
 8013022:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013026:	fa0a f202 	lsl.w	r2, sl, r2
 801302a:	420a      	tst	r2, r1
 801302c:	d003      	beq.n	8013036 <__gethex+0x1c4>
 801302e:	4553      	cmp	r3, sl
 8013030:	dc46      	bgt.n	80130c0 <__gethex+0x24e>
 8013032:	f04f 0a02 	mov.w	sl, #2
 8013036:	4639      	mov	r1, r7
 8013038:	4628      	mov	r0, r5
 801303a:	f7ff fecb 	bl	8012dd4 <rshift>
 801303e:	443c      	add	r4, r7
 8013040:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013044:	42a3      	cmp	r3, r4
 8013046:	da52      	bge.n	80130ee <__gethex+0x27c>
 8013048:	4629      	mov	r1, r5
 801304a:	9802      	ldr	r0, [sp, #8]
 801304c:	f000 faae 	bl	80135ac <_Bfree>
 8013050:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013052:	2300      	movs	r3, #0
 8013054:	6013      	str	r3, [r2, #0]
 8013056:	27a3      	movs	r7, #163	; 0xa3
 8013058:	e793      	b.n	8012f82 <__gethex+0x110>
 801305a:	3101      	adds	r1, #1
 801305c:	105b      	asrs	r3, r3, #1
 801305e:	e7b0      	b.n	8012fc2 <__gethex+0x150>
 8013060:	1e73      	subs	r3, r6, #1
 8013062:	9305      	str	r3, [sp, #20]
 8013064:	9a07      	ldr	r2, [sp, #28]
 8013066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801306a:	4293      	cmp	r3, r2
 801306c:	d018      	beq.n	80130a0 <__gethex+0x22e>
 801306e:	f1bb 0f20 	cmp.w	fp, #32
 8013072:	d107      	bne.n	8013084 <__gethex+0x212>
 8013074:	9b04      	ldr	r3, [sp, #16]
 8013076:	f8c3 a000 	str.w	sl, [r3]
 801307a:	3304      	adds	r3, #4
 801307c:	f04f 0a00 	mov.w	sl, #0
 8013080:	9304      	str	r3, [sp, #16]
 8013082:	46d3      	mov	fp, sl
 8013084:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013088:	f7ff fede 	bl	8012e48 <__hexdig_fun>
 801308c:	f000 000f 	and.w	r0, r0, #15
 8013090:	fa00 f00b 	lsl.w	r0, r0, fp
 8013094:	ea4a 0a00 	orr.w	sl, sl, r0
 8013098:	f10b 0b04 	add.w	fp, fp, #4
 801309c:	9b05      	ldr	r3, [sp, #20]
 801309e:	e00d      	b.n	80130bc <__gethex+0x24a>
 80130a0:	9b05      	ldr	r3, [sp, #20]
 80130a2:	9a08      	ldr	r2, [sp, #32]
 80130a4:	4413      	add	r3, r2
 80130a6:	42bb      	cmp	r3, r7
 80130a8:	d3e1      	bcc.n	801306e <__gethex+0x1fc>
 80130aa:	4618      	mov	r0, r3
 80130ac:	9a01      	ldr	r2, [sp, #4]
 80130ae:	9903      	ldr	r1, [sp, #12]
 80130b0:	9309      	str	r3, [sp, #36]	; 0x24
 80130b2:	f001 f8a2 	bl	80141fa <strncmp>
 80130b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130b8:	2800      	cmp	r0, #0
 80130ba:	d1d8      	bne.n	801306e <__gethex+0x1fc>
 80130bc:	461e      	mov	r6, r3
 80130be:	e791      	b.n	8012fe4 <__gethex+0x172>
 80130c0:	1eb9      	subs	r1, r7, #2
 80130c2:	4628      	mov	r0, r5
 80130c4:	f000 fe1d 	bl	8013d02 <__any_on>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d0b2      	beq.n	8013032 <__gethex+0x1c0>
 80130cc:	f04f 0a03 	mov.w	sl, #3
 80130d0:	e7b1      	b.n	8013036 <__gethex+0x1c4>
 80130d2:	da09      	bge.n	80130e8 <__gethex+0x276>
 80130d4:	1bf7      	subs	r7, r6, r7
 80130d6:	4629      	mov	r1, r5
 80130d8:	463a      	mov	r2, r7
 80130da:	9802      	ldr	r0, [sp, #8]
 80130dc:	f000 fc32 	bl	8013944 <__lshift>
 80130e0:	1be4      	subs	r4, r4, r7
 80130e2:	4605      	mov	r5, r0
 80130e4:	f100 0914 	add.w	r9, r0, #20
 80130e8:	f04f 0a00 	mov.w	sl, #0
 80130ec:	e7a8      	b.n	8013040 <__gethex+0x1ce>
 80130ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80130f2:	42a0      	cmp	r0, r4
 80130f4:	dd6a      	ble.n	80131cc <__gethex+0x35a>
 80130f6:	1b04      	subs	r4, r0, r4
 80130f8:	42a6      	cmp	r6, r4
 80130fa:	dc2e      	bgt.n	801315a <__gethex+0x2e8>
 80130fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013100:	2b02      	cmp	r3, #2
 8013102:	d022      	beq.n	801314a <__gethex+0x2d8>
 8013104:	2b03      	cmp	r3, #3
 8013106:	d024      	beq.n	8013152 <__gethex+0x2e0>
 8013108:	2b01      	cmp	r3, #1
 801310a:	d115      	bne.n	8013138 <__gethex+0x2c6>
 801310c:	42a6      	cmp	r6, r4
 801310e:	d113      	bne.n	8013138 <__gethex+0x2c6>
 8013110:	2e01      	cmp	r6, #1
 8013112:	dc0b      	bgt.n	801312c <__gethex+0x2ba>
 8013114:	9a06      	ldr	r2, [sp, #24]
 8013116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801311a:	6013      	str	r3, [r2, #0]
 801311c:	2301      	movs	r3, #1
 801311e:	612b      	str	r3, [r5, #16]
 8013120:	f8c9 3000 	str.w	r3, [r9]
 8013124:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013126:	2762      	movs	r7, #98	; 0x62
 8013128:	601d      	str	r5, [r3, #0]
 801312a:	e72a      	b.n	8012f82 <__gethex+0x110>
 801312c:	1e71      	subs	r1, r6, #1
 801312e:	4628      	mov	r0, r5
 8013130:	f000 fde7 	bl	8013d02 <__any_on>
 8013134:	2800      	cmp	r0, #0
 8013136:	d1ed      	bne.n	8013114 <__gethex+0x2a2>
 8013138:	4629      	mov	r1, r5
 801313a:	9802      	ldr	r0, [sp, #8]
 801313c:	f000 fa36 	bl	80135ac <_Bfree>
 8013140:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013142:	2300      	movs	r3, #0
 8013144:	6013      	str	r3, [r2, #0]
 8013146:	2750      	movs	r7, #80	; 0x50
 8013148:	e71b      	b.n	8012f82 <__gethex+0x110>
 801314a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801314c:	2b00      	cmp	r3, #0
 801314e:	d0e1      	beq.n	8013114 <__gethex+0x2a2>
 8013150:	e7f2      	b.n	8013138 <__gethex+0x2c6>
 8013152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013154:	2b00      	cmp	r3, #0
 8013156:	d1dd      	bne.n	8013114 <__gethex+0x2a2>
 8013158:	e7ee      	b.n	8013138 <__gethex+0x2c6>
 801315a:	1e67      	subs	r7, r4, #1
 801315c:	f1ba 0f00 	cmp.w	sl, #0
 8013160:	d131      	bne.n	80131c6 <__gethex+0x354>
 8013162:	b127      	cbz	r7, 801316e <__gethex+0x2fc>
 8013164:	4639      	mov	r1, r7
 8013166:	4628      	mov	r0, r5
 8013168:	f000 fdcb 	bl	8013d02 <__any_on>
 801316c:	4682      	mov	sl, r0
 801316e:	117a      	asrs	r2, r7, #5
 8013170:	2301      	movs	r3, #1
 8013172:	f007 071f 	and.w	r7, r7, #31
 8013176:	fa03 f707 	lsl.w	r7, r3, r7
 801317a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801317e:	4621      	mov	r1, r4
 8013180:	421f      	tst	r7, r3
 8013182:	4628      	mov	r0, r5
 8013184:	bf18      	it	ne
 8013186:	f04a 0a02 	orrne.w	sl, sl, #2
 801318a:	1b36      	subs	r6, r6, r4
 801318c:	f7ff fe22 	bl	8012dd4 <rshift>
 8013190:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013194:	2702      	movs	r7, #2
 8013196:	f1ba 0f00 	cmp.w	sl, #0
 801319a:	d048      	beq.n	801322e <__gethex+0x3bc>
 801319c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	d015      	beq.n	80131d0 <__gethex+0x35e>
 80131a4:	2b03      	cmp	r3, #3
 80131a6:	d017      	beq.n	80131d8 <__gethex+0x366>
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d109      	bne.n	80131c0 <__gethex+0x34e>
 80131ac:	f01a 0f02 	tst.w	sl, #2
 80131b0:	d006      	beq.n	80131c0 <__gethex+0x34e>
 80131b2:	f8d9 3000 	ldr.w	r3, [r9]
 80131b6:	ea4a 0a03 	orr.w	sl, sl, r3
 80131ba:	f01a 0f01 	tst.w	sl, #1
 80131be:	d10e      	bne.n	80131de <__gethex+0x36c>
 80131c0:	f047 0710 	orr.w	r7, r7, #16
 80131c4:	e033      	b.n	801322e <__gethex+0x3bc>
 80131c6:	f04f 0a01 	mov.w	sl, #1
 80131ca:	e7d0      	b.n	801316e <__gethex+0x2fc>
 80131cc:	2701      	movs	r7, #1
 80131ce:	e7e2      	b.n	8013196 <__gethex+0x324>
 80131d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131d2:	f1c3 0301 	rsb	r3, r3, #1
 80131d6:	9315      	str	r3, [sp, #84]	; 0x54
 80131d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d0f0      	beq.n	80131c0 <__gethex+0x34e>
 80131de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80131e2:	f105 0314 	add.w	r3, r5, #20
 80131e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80131ea:	eb03 010a 	add.w	r1, r3, sl
 80131ee:	f04f 0c00 	mov.w	ip, #0
 80131f2:	4618      	mov	r0, r3
 80131f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80131f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80131fc:	d01c      	beq.n	8013238 <__gethex+0x3c6>
 80131fe:	3201      	adds	r2, #1
 8013200:	6002      	str	r2, [r0, #0]
 8013202:	2f02      	cmp	r7, #2
 8013204:	f105 0314 	add.w	r3, r5, #20
 8013208:	d138      	bne.n	801327c <__gethex+0x40a>
 801320a:	f8d8 2000 	ldr.w	r2, [r8]
 801320e:	3a01      	subs	r2, #1
 8013210:	42b2      	cmp	r2, r6
 8013212:	d10a      	bne.n	801322a <__gethex+0x3b8>
 8013214:	1171      	asrs	r1, r6, #5
 8013216:	2201      	movs	r2, #1
 8013218:	f006 061f 	and.w	r6, r6, #31
 801321c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013220:	fa02 f606 	lsl.w	r6, r2, r6
 8013224:	421e      	tst	r6, r3
 8013226:	bf18      	it	ne
 8013228:	4617      	movne	r7, r2
 801322a:	f047 0720 	orr.w	r7, r7, #32
 801322e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013230:	601d      	str	r5, [r3, #0]
 8013232:	9b06      	ldr	r3, [sp, #24]
 8013234:	601c      	str	r4, [r3, #0]
 8013236:	e6a4      	b.n	8012f82 <__gethex+0x110>
 8013238:	4299      	cmp	r1, r3
 801323a:	f843 cc04 	str.w	ip, [r3, #-4]
 801323e:	d8d8      	bhi.n	80131f2 <__gethex+0x380>
 8013240:	68ab      	ldr	r3, [r5, #8]
 8013242:	4599      	cmp	r9, r3
 8013244:	db12      	blt.n	801326c <__gethex+0x3fa>
 8013246:	6869      	ldr	r1, [r5, #4]
 8013248:	9802      	ldr	r0, [sp, #8]
 801324a:	3101      	adds	r1, #1
 801324c:	f000 f97a 	bl	8013544 <_Balloc>
 8013250:	692a      	ldr	r2, [r5, #16]
 8013252:	3202      	adds	r2, #2
 8013254:	f105 010c 	add.w	r1, r5, #12
 8013258:	4683      	mov	fp, r0
 801325a:	0092      	lsls	r2, r2, #2
 801325c:	300c      	adds	r0, #12
 801325e:	f7fd f877 	bl	8010350 <memcpy>
 8013262:	4629      	mov	r1, r5
 8013264:	9802      	ldr	r0, [sp, #8]
 8013266:	f000 f9a1 	bl	80135ac <_Bfree>
 801326a:	465d      	mov	r5, fp
 801326c:	692b      	ldr	r3, [r5, #16]
 801326e:	1c5a      	adds	r2, r3, #1
 8013270:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013274:	612a      	str	r2, [r5, #16]
 8013276:	2201      	movs	r2, #1
 8013278:	615a      	str	r2, [r3, #20]
 801327a:	e7c2      	b.n	8013202 <__gethex+0x390>
 801327c:	692a      	ldr	r2, [r5, #16]
 801327e:	454a      	cmp	r2, r9
 8013280:	dd0b      	ble.n	801329a <__gethex+0x428>
 8013282:	2101      	movs	r1, #1
 8013284:	4628      	mov	r0, r5
 8013286:	f7ff fda5 	bl	8012dd4 <rshift>
 801328a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801328e:	3401      	adds	r4, #1
 8013290:	42a3      	cmp	r3, r4
 8013292:	f6ff aed9 	blt.w	8013048 <__gethex+0x1d6>
 8013296:	2701      	movs	r7, #1
 8013298:	e7c7      	b.n	801322a <__gethex+0x3b8>
 801329a:	f016 061f 	ands.w	r6, r6, #31
 801329e:	d0fa      	beq.n	8013296 <__gethex+0x424>
 80132a0:	449a      	add	sl, r3
 80132a2:	f1c6 0620 	rsb	r6, r6, #32
 80132a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80132aa:	f000 fa0f 	bl	80136cc <__hi0bits>
 80132ae:	42b0      	cmp	r0, r6
 80132b0:	dbe7      	blt.n	8013282 <__gethex+0x410>
 80132b2:	e7f0      	b.n	8013296 <__gethex+0x424>

080132b4 <L_shift>:
 80132b4:	f1c2 0208 	rsb	r2, r2, #8
 80132b8:	0092      	lsls	r2, r2, #2
 80132ba:	b570      	push	{r4, r5, r6, lr}
 80132bc:	f1c2 0620 	rsb	r6, r2, #32
 80132c0:	6843      	ldr	r3, [r0, #4]
 80132c2:	6804      	ldr	r4, [r0, #0]
 80132c4:	fa03 f506 	lsl.w	r5, r3, r6
 80132c8:	432c      	orrs	r4, r5
 80132ca:	40d3      	lsrs	r3, r2
 80132cc:	6004      	str	r4, [r0, #0]
 80132ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80132d2:	4288      	cmp	r0, r1
 80132d4:	d3f4      	bcc.n	80132c0 <L_shift+0xc>
 80132d6:	bd70      	pop	{r4, r5, r6, pc}

080132d8 <__match>:
 80132d8:	b530      	push	{r4, r5, lr}
 80132da:	6803      	ldr	r3, [r0, #0]
 80132dc:	3301      	adds	r3, #1
 80132de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132e2:	b914      	cbnz	r4, 80132ea <__match+0x12>
 80132e4:	6003      	str	r3, [r0, #0]
 80132e6:	2001      	movs	r0, #1
 80132e8:	bd30      	pop	{r4, r5, pc}
 80132ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80132f2:	2d19      	cmp	r5, #25
 80132f4:	bf98      	it	ls
 80132f6:	3220      	addls	r2, #32
 80132f8:	42a2      	cmp	r2, r4
 80132fa:	d0f0      	beq.n	80132de <__match+0x6>
 80132fc:	2000      	movs	r0, #0
 80132fe:	e7f3      	b.n	80132e8 <__match+0x10>

08013300 <__hexnan>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	680b      	ldr	r3, [r1, #0]
 8013306:	6801      	ldr	r1, [r0, #0]
 8013308:	115f      	asrs	r7, r3, #5
 801330a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801330e:	f013 031f 	ands.w	r3, r3, #31
 8013312:	b087      	sub	sp, #28
 8013314:	bf18      	it	ne
 8013316:	3704      	addne	r7, #4
 8013318:	2500      	movs	r5, #0
 801331a:	1f3e      	subs	r6, r7, #4
 801331c:	4682      	mov	sl, r0
 801331e:	4690      	mov	r8, r2
 8013320:	9301      	str	r3, [sp, #4]
 8013322:	f847 5c04 	str.w	r5, [r7, #-4]
 8013326:	46b1      	mov	r9, r6
 8013328:	4634      	mov	r4, r6
 801332a:	9502      	str	r5, [sp, #8]
 801332c:	46ab      	mov	fp, r5
 801332e:	784a      	ldrb	r2, [r1, #1]
 8013330:	1c4b      	adds	r3, r1, #1
 8013332:	9303      	str	r3, [sp, #12]
 8013334:	b342      	cbz	r2, 8013388 <__hexnan+0x88>
 8013336:	4610      	mov	r0, r2
 8013338:	9105      	str	r1, [sp, #20]
 801333a:	9204      	str	r2, [sp, #16]
 801333c:	f7ff fd84 	bl	8012e48 <__hexdig_fun>
 8013340:	2800      	cmp	r0, #0
 8013342:	d143      	bne.n	80133cc <__hexnan+0xcc>
 8013344:	9a04      	ldr	r2, [sp, #16]
 8013346:	9905      	ldr	r1, [sp, #20]
 8013348:	2a20      	cmp	r2, #32
 801334a:	d818      	bhi.n	801337e <__hexnan+0x7e>
 801334c:	9b02      	ldr	r3, [sp, #8]
 801334e:	459b      	cmp	fp, r3
 8013350:	dd13      	ble.n	801337a <__hexnan+0x7a>
 8013352:	454c      	cmp	r4, r9
 8013354:	d206      	bcs.n	8013364 <__hexnan+0x64>
 8013356:	2d07      	cmp	r5, #7
 8013358:	dc04      	bgt.n	8013364 <__hexnan+0x64>
 801335a:	462a      	mov	r2, r5
 801335c:	4649      	mov	r1, r9
 801335e:	4620      	mov	r0, r4
 8013360:	f7ff ffa8 	bl	80132b4 <L_shift>
 8013364:	4544      	cmp	r4, r8
 8013366:	d944      	bls.n	80133f2 <__hexnan+0xf2>
 8013368:	2300      	movs	r3, #0
 801336a:	f1a4 0904 	sub.w	r9, r4, #4
 801336e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013372:	f8cd b008 	str.w	fp, [sp, #8]
 8013376:	464c      	mov	r4, r9
 8013378:	461d      	mov	r5, r3
 801337a:	9903      	ldr	r1, [sp, #12]
 801337c:	e7d7      	b.n	801332e <__hexnan+0x2e>
 801337e:	2a29      	cmp	r2, #41	; 0x29
 8013380:	d14a      	bne.n	8013418 <__hexnan+0x118>
 8013382:	3102      	adds	r1, #2
 8013384:	f8ca 1000 	str.w	r1, [sl]
 8013388:	f1bb 0f00 	cmp.w	fp, #0
 801338c:	d044      	beq.n	8013418 <__hexnan+0x118>
 801338e:	454c      	cmp	r4, r9
 8013390:	d206      	bcs.n	80133a0 <__hexnan+0xa0>
 8013392:	2d07      	cmp	r5, #7
 8013394:	dc04      	bgt.n	80133a0 <__hexnan+0xa0>
 8013396:	462a      	mov	r2, r5
 8013398:	4649      	mov	r1, r9
 801339a:	4620      	mov	r0, r4
 801339c:	f7ff ff8a 	bl	80132b4 <L_shift>
 80133a0:	4544      	cmp	r4, r8
 80133a2:	d928      	bls.n	80133f6 <__hexnan+0xf6>
 80133a4:	4643      	mov	r3, r8
 80133a6:	f854 2b04 	ldr.w	r2, [r4], #4
 80133aa:	f843 2b04 	str.w	r2, [r3], #4
 80133ae:	42a6      	cmp	r6, r4
 80133b0:	d2f9      	bcs.n	80133a6 <__hexnan+0xa6>
 80133b2:	2200      	movs	r2, #0
 80133b4:	f843 2b04 	str.w	r2, [r3], #4
 80133b8:	429e      	cmp	r6, r3
 80133ba:	d2fb      	bcs.n	80133b4 <__hexnan+0xb4>
 80133bc:	6833      	ldr	r3, [r6, #0]
 80133be:	b91b      	cbnz	r3, 80133c8 <__hexnan+0xc8>
 80133c0:	4546      	cmp	r6, r8
 80133c2:	d127      	bne.n	8013414 <__hexnan+0x114>
 80133c4:	2301      	movs	r3, #1
 80133c6:	6033      	str	r3, [r6, #0]
 80133c8:	2005      	movs	r0, #5
 80133ca:	e026      	b.n	801341a <__hexnan+0x11a>
 80133cc:	3501      	adds	r5, #1
 80133ce:	2d08      	cmp	r5, #8
 80133d0:	f10b 0b01 	add.w	fp, fp, #1
 80133d4:	dd06      	ble.n	80133e4 <__hexnan+0xe4>
 80133d6:	4544      	cmp	r4, r8
 80133d8:	d9cf      	bls.n	801337a <__hexnan+0x7a>
 80133da:	2300      	movs	r3, #0
 80133dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80133e0:	2501      	movs	r5, #1
 80133e2:	3c04      	subs	r4, #4
 80133e4:	6822      	ldr	r2, [r4, #0]
 80133e6:	f000 000f 	and.w	r0, r0, #15
 80133ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80133ee:	6020      	str	r0, [r4, #0]
 80133f0:	e7c3      	b.n	801337a <__hexnan+0x7a>
 80133f2:	2508      	movs	r5, #8
 80133f4:	e7c1      	b.n	801337a <__hexnan+0x7a>
 80133f6:	9b01      	ldr	r3, [sp, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d0df      	beq.n	80133bc <__hexnan+0xbc>
 80133fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013400:	f1c3 0320 	rsb	r3, r3, #32
 8013404:	fa22 f303 	lsr.w	r3, r2, r3
 8013408:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801340c:	401a      	ands	r2, r3
 801340e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013412:	e7d3      	b.n	80133bc <__hexnan+0xbc>
 8013414:	3e04      	subs	r6, #4
 8013416:	e7d1      	b.n	80133bc <__hexnan+0xbc>
 8013418:	2004      	movs	r0, #4
 801341a:	b007      	add	sp, #28
 801341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013420 <__locale_ctype_ptr_l>:
 8013420:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013424:	4770      	bx	lr

08013426 <__localeconv_l>:
 8013426:	30f0      	adds	r0, #240	; 0xf0
 8013428:	4770      	bx	lr
	...

0801342c <_localeconv_r>:
 801342c:	4b04      	ldr	r3, [pc, #16]	; (8013440 <_localeconv_r+0x14>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	6a18      	ldr	r0, [r3, #32]
 8013432:	4b04      	ldr	r3, [pc, #16]	; (8013444 <_localeconv_r+0x18>)
 8013434:	2800      	cmp	r0, #0
 8013436:	bf08      	it	eq
 8013438:	4618      	moveq	r0, r3
 801343a:	30f0      	adds	r0, #240	; 0xf0
 801343c:	4770      	bx	lr
 801343e:	bf00      	nop
 8013440:	20000198 	.word	0x20000198
 8013444:	200001fc 	.word	0x200001fc

08013448 <__swhatbuf_r>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	460e      	mov	r6, r1
 801344c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013450:	2900      	cmp	r1, #0
 8013452:	b096      	sub	sp, #88	; 0x58
 8013454:	4614      	mov	r4, r2
 8013456:	461d      	mov	r5, r3
 8013458:	da07      	bge.n	801346a <__swhatbuf_r+0x22>
 801345a:	2300      	movs	r3, #0
 801345c:	602b      	str	r3, [r5, #0]
 801345e:	89b3      	ldrh	r3, [r6, #12]
 8013460:	061a      	lsls	r2, r3, #24
 8013462:	d410      	bmi.n	8013486 <__swhatbuf_r+0x3e>
 8013464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013468:	e00e      	b.n	8013488 <__swhatbuf_r+0x40>
 801346a:	466a      	mov	r2, sp
 801346c:	f000 ff06 	bl	801427c <_fstat_r>
 8013470:	2800      	cmp	r0, #0
 8013472:	dbf2      	blt.n	801345a <__swhatbuf_r+0x12>
 8013474:	9a01      	ldr	r2, [sp, #4]
 8013476:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801347a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801347e:	425a      	negs	r2, r3
 8013480:	415a      	adcs	r2, r3
 8013482:	602a      	str	r2, [r5, #0]
 8013484:	e7ee      	b.n	8013464 <__swhatbuf_r+0x1c>
 8013486:	2340      	movs	r3, #64	; 0x40
 8013488:	2000      	movs	r0, #0
 801348a:	6023      	str	r3, [r4, #0]
 801348c:	b016      	add	sp, #88	; 0x58
 801348e:	bd70      	pop	{r4, r5, r6, pc}

08013490 <__smakebuf_r>:
 8013490:	898b      	ldrh	r3, [r1, #12]
 8013492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013494:	079d      	lsls	r5, r3, #30
 8013496:	4606      	mov	r6, r0
 8013498:	460c      	mov	r4, r1
 801349a:	d507      	bpl.n	80134ac <__smakebuf_r+0x1c>
 801349c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134a0:	6023      	str	r3, [r4, #0]
 80134a2:	6123      	str	r3, [r4, #16]
 80134a4:	2301      	movs	r3, #1
 80134a6:	6163      	str	r3, [r4, #20]
 80134a8:	b002      	add	sp, #8
 80134aa:	bd70      	pop	{r4, r5, r6, pc}
 80134ac:	ab01      	add	r3, sp, #4
 80134ae:	466a      	mov	r2, sp
 80134b0:	f7ff ffca 	bl	8013448 <__swhatbuf_r>
 80134b4:	9900      	ldr	r1, [sp, #0]
 80134b6:	4605      	mov	r5, r0
 80134b8:	4630      	mov	r0, r6
 80134ba:	f000 fc9f 	bl	8013dfc <_malloc_r>
 80134be:	b948      	cbnz	r0, 80134d4 <__smakebuf_r+0x44>
 80134c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134c4:	059a      	lsls	r2, r3, #22
 80134c6:	d4ef      	bmi.n	80134a8 <__smakebuf_r+0x18>
 80134c8:	f023 0303 	bic.w	r3, r3, #3
 80134cc:	f043 0302 	orr.w	r3, r3, #2
 80134d0:	81a3      	strh	r3, [r4, #12]
 80134d2:	e7e3      	b.n	801349c <__smakebuf_r+0xc>
 80134d4:	4b0d      	ldr	r3, [pc, #52]	; (801350c <__smakebuf_r+0x7c>)
 80134d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	6020      	str	r0, [r4, #0]
 80134dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134e0:	81a3      	strh	r3, [r4, #12]
 80134e2:	9b00      	ldr	r3, [sp, #0]
 80134e4:	6163      	str	r3, [r4, #20]
 80134e6:	9b01      	ldr	r3, [sp, #4]
 80134e8:	6120      	str	r0, [r4, #16]
 80134ea:	b15b      	cbz	r3, 8013504 <__smakebuf_r+0x74>
 80134ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134f0:	4630      	mov	r0, r6
 80134f2:	f000 fed5 	bl	80142a0 <_isatty_r>
 80134f6:	b128      	cbz	r0, 8013504 <__smakebuf_r+0x74>
 80134f8:	89a3      	ldrh	r3, [r4, #12]
 80134fa:	f023 0303 	bic.w	r3, r3, #3
 80134fe:	f043 0301 	orr.w	r3, r3, #1
 8013502:	81a3      	strh	r3, [r4, #12]
 8013504:	89a3      	ldrh	r3, [r4, #12]
 8013506:	431d      	orrs	r5, r3
 8013508:	81a5      	strh	r5, [r4, #12]
 801350a:	e7cd      	b.n	80134a8 <__smakebuf_r+0x18>
 801350c:	08012c89 	.word	0x08012c89

08013510 <malloc>:
 8013510:	4b02      	ldr	r3, [pc, #8]	; (801351c <malloc+0xc>)
 8013512:	4601      	mov	r1, r0
 8013514:	6818      	ldr	r0, [r3, #0]
 8013516:	f000 bc71 	b.w	8013dfc <_malloc_r>
 801351a:	bf00      	nop
 801351c:	20000198 	.word	0x20000198

08013520 <__ascii_mbtowc>:
 8013520:	b082      	sub	sp, #8
 8013522:	b901      	cbnz	r1, 8013526 <__ascii_mbtowc+0x6>
 8013524:	a901      	add	r1, sp, #4
 8013526:	b142      	cbz	r2, 801353a <__ascii_mbtowc+0x1a>
 8013528:	b14b      	cbz	r3, 801353e <__ascii_mbtowc+0x1e>
 801352a:	7813      	ldrb	r3, [r2, #0]
 801352c:	600b      	str	r3, [r1, #0]
 801352e:	7812      	ldrb	r2, [r2, #0]
 8013530:	1c10      	adds	r0, r2, #0
 8013532:	bf18      	it	ne
 8013534:	2001      	movne	r0, #1
 8013536:	b002      	add	sp, #8
 8013538:	4770      	bx	lr
 801353a:	4610      	mov	r0, r2
 801353c:	e7fb      	b.n	8013536 <__ascii_mbtowc+0x16>
 801353e:	f06f 0001 	mvn.w	r0, #1
 8013542:	e7f8      	b.n	8013536 <__ascii_mbtowc+0x16>

08013544 <_Balloc>:
 8013544:	b570      	push	{r4, r5, r6, lr}
 8013546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013548:	4604      	mov	r4, r0
 801354a:	460e      	mov	r6, r1
 801354c:	b93d      	cbnz	r5, 801355e <_Balloc+0x1a>
 801354e:	2010      	movs	r0, #16
 8013550:	f7ff ffde 	bl	8013510 <malloc>
 8013554:	6260      	str	r0, [r4, #36]	; 0x24
 8013556:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801355a:	6005      	str	r5, [r0, #0]
 801355c:	60c5      	str	r5, [r0, #12]
 801355e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013560:	68eb      	ldr	r3, [r5, #12]
 8013562:	b183      	cbz	r3, 8013586 <_Balloc+0x42>
 8013564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013566:	68db      	ldr	r3, [r3, #12]
 8013568:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801356c:	b9b8      	cbnz	r0, 801359e <_Balloc+0x5a>
 801356e:	2101      	movs	r1, #1
 8013570:	fa01 f506 	lsl.w	r5, r1, r6
 8013574:	1d6a      	adds	r2, r5, #5
 8013576:	0092      	lsls	r2, r2, #2
 8013578:	4620      	mov	r0, r4
 801357a:	f000 fbe3 	bl	8013d44 <_calloc_r>
 801357e:	b160      	cbz	r0, 801359a <_Balloc+0x56>
 8013580:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013584:	e00e      	b.n	80135a4 <_Balloc+0x60>
 8013586:	2221      	movs	r2, #33	; 0x21
 8013588:	2104      	movs	r1, #4
 801358a:	4620      	mov	r0, r4
 801358c:	f000 fbda 	bl	8013d44 <_calloc_r>
 8013590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013592:	60e8      	str	r0, [r5, #12]
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1e4      	bne.n	8013564 <_Balloc+0x20>
 801359a:	2000      	movs	r0, #0
 801359c:	bd70      	pop	{r4, r5, r6, pc}
 801359e:	6802      	ldr	r2, [r0, #0]
 80135a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80135a4:	2300      	movs	r3, #0
 80135a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80135aa:	e7f7      	b.n	801359c <_Balloc+0x58>

080135ac <_Bfree>:
 80135ac:	b570      	push	{r4, r5, r6, lr}
 80135ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80135b0:	4606      	mov	r6, r0
 80135b2:	460d      	mov	r5, r1
 80135b4:	b93c      	cbnz	r4, 80135c6 <_Bfree+0x1a>
 80135b6:	2010      	movs	r0, #16
 80135b8:	f7ff ffaa 	bl	8013510 <malloc>
 80135bc:	6270      	str	r0, [r6, #36]	; 0x24
 80135be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80135c2:	6004      	str	r4, [r0, #0]
 80135c4:	60c4      	str	r4, [r0, #12]
 80135c6:	b13d      	cbz	r5, 80135d8 <_Bfree+0x2c>
 80135c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80135ca:	686a      	ldr	r2, [r5, #4]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80135d2:	6029      	str	r1, [r5, #0]
 80135d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80135d8:	bd70      	pop	{r4, r5, r6, pc}

080135da <__multadd>:
 80135da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135de:	690d      	ldr	r5, [r1, #16]
 80135e0:	461f      	mov	r7, r3
 80135e2:	4606      	mov	r6, r0
 80135e4:	460c      	mov	r4, r1
 80135e6:	f101 0c14 	add.w	ip, r1, #20
 80135ea:	2300      	movs	r3, #0
 80135ec:	f8dc 0000 	ldr.w	r0, [ip]
 80135f0:	b281      	uxth	r1, r0
 80135f2:	fb02 7101 	mla	r1, r2, r1, r7
 80135f6:	0c0f      	lsrs	r7, r1, #16
 80135f8:	0c00      	lsrs	r0, r0, #16
 80135fa:	fb02 7000 	mla	r0, r2, r0, r7
 80135fe:	b289      	uxth	r1, r1
 8013600:	3301      	adds	r3, #1
 8013602:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013606:	429d      	cmp	r5, r3
 8013608:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801360c:	f84c 1b04 	str.w	r1, [ip], #4
 8013610:	dcec      	bgt.n	80135ec <__multadd+0x12>
 8013612:	b1d7      	cbz	r7, 801364a <__multadd+0x70>
 8013614:	68a3      	ldr	r3, [r4, #8]
 8013616:	42ab      	cmp	r3, r5
 8013618:	dc12      	bgt.n	8013640 <__multadd+0x66>
 801361a:	6861      	ldr	r1, [r4, #4]
 801361c:	4630      	mov	r0, r6
 801361e:	3101      	adds	r1, #1
 8013620:	f7ff ff90 	bl	8013544 <_Balloc>
 8013624:	6922      	ldr	r2, [r4, #16]
 8013626:	3202      	adds	r2, #2
 8013628:	f104 010c 	add.w	r1, r4, #12
 801362c:	4680      	mov	r8, r0
 801362e:	0092      	lsls	r2, r2, #2
 8013630:	300c      	adds	r0, #12
 8013632:	f7fc fe8d 	bl	8010350 <memcpy>
 8013636:	4621      	mov	r1, r4
 8013638:	4630      	mov	r0, r6
 801363a:	f7ff ffb7 	bl	80135ac <_Bfree>
 801363e:	4644      	mov	r4, r8
 8013640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013644:	3501      	adds	r5, #1
 8013646:	615f      	str	r7, [r3, #20]
 8013648:	6125      	str	r5, [r4, #16]
 801364a:	4620      	mov	r0, r4
 801364c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013650 <__s2b>:
 8013650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013654:	460c      	mov	r4, r1
 8013656:	4615      	mov	r5, r2
 8013658:	461f      	mov	r7, r3
 801365a:	2209      	movs	r2, #9
 801365c:	3308      	adds	r3, #8
 801365e:	4606      	mov	r6, r0
 8013660:	fb93 f3f2 	sdiv	r3, r3, r2
 8013664:	2100      	movs	r1, #0
 8013666:	2201      	movs	r2, #1
 8013668:	429a      	cmp	r2, r3
 801366a:	db20      	blt.n	80136ae <__s2b+0x5e>
 801366c:	4630      	mov	r0, r6
 801366e:	f7ff ff69 	bl	8013544 <_Balloc>
 8013672:	9b08      	ldr	r3, [sp, #32]
 8013674:	6143      	str	r3, [r0, #20]
 8013676:	2d09      	cmp	r5, #9
 8013678:	f04f 0301 	mov.w	r3, #1
 801367c:	6103      	str	r3, [r0, #16]
 801367e:	dd19      	ble.n	80136b4 <__s2b+0x64>
 8013680:	f104 0809 	add.w	r8, r4, #9
 8013684:	46c1      	mov	r9, r8
 8013686:	442c      	add	r4, r5
 8013688:	f819 3b01 	ldrb.w	r3, [r9], #1
 801368c:	4601      	mov	r1, r0
 801368e:	3b30      	subs	r3, #48	; 0x30
 8013690:	220a      	movs	r2, #10
 8013692:	4630      	mov	r0, r6
 8013694:	f7ff ffa1 	bl	80135da <__multadd>
 8013698:	45a1      	cmp	r9, r4
 801369a:	d1f5      	bne.n	8013688 <__s2b+0x38>
 801369c:	eb08 0405 	add.w	r4, r8, r5
 80136a0:	3c08      	subs	r4, #8
 80136a2:	1b2d      	subs	r5, r5, r4
 80136a4:	1963      	adds	r3, r4, r5
 80136a6:	42bb      	cmp	r3, r7
 80136a8:	db07      	blt.n	80136ba <__s2b+0x6a>
 80136aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136ae:	0052      	lsls	r2, r2, #1
 80136b0:	3101      	adds	r1, #1
 80136b2:	e7d9      	b.n	8013668 <__s2b+0x18>
 80136b4:	340a      	adds	r4, #10
 80136b6:	2509      	movs	r5, #9
 80136b8:	e7f3      	b.n	80136a2 <__s2b+0x52>
 80136ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80136be:	4601      	mov	r1, r0
 80136c0:	3b30      	subs	r3, #48	; 0x30
 80136c2:	220a      	movs	r2, #10
 80136c4:	4630      	mov	r0, r6
 80136c6:	f7ff ff88 	bl	80135da <__multadd>
 80136ca:	e7eb      	b.n	80136a4 <__s2b+0x54>

080136cc <__hi0bits>:
 80136cc:	0c02      	lsrs	r2, r0, #16
 80136ce:	0412      	lsls	r2, r2, #16
 80136d0:	4603      	mov	r3, r0
 80136d2:	b9b2      	cbnz	r2, 8013702 <__hi0bits+0x36>
 80136d4:	0403      	lsls	r3, r0, #16
 80136d6:	2010      	movs	r0, #16
 80136d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80136dc:	bf04      	itt	eq
 80136de:	021b      	lsleq	r3, r3, #8
 80136e0:	3008      	addeq	r0, #8
 80136e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80136e6:	bf04      	itt	eq
 80136e8:	011b      	lsleq	r3, r3, #4
 80136ea:	3004      	addeq	r0, #4
 80136ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80136f0:	bf04      	itt	eq
 80136f2:	009b      	lsleq	r3, r3, #2
 80136f4:	3002      	addeq	r0, #2
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	db06      	blt.n	8013708 <__hi0bits+0x3c>
 80136fa:	005b      	lsls	r3, r3, #1
 80136fc:	d503      	bpl.n	8013706 <__hi0bits+0x3a>
 80136fe:	3001      	adds	r0, #1
 8013700:	4770      	bx	lr
 8013702:	2000      	movs	r0, #0
 8013704:	e7e8      	b.n	80136d8 <__hi0bits+0xc>
 8013706:	2020      	movs	r0, #32
 8013708:	4770      	bx	lr

0801370a <__lo0bits>:
 801370a:	6803      	ldr	r3, [r0, #0]
 801370c:	f013 0207 	ands.w	r2, r3, #7
 8013710:	4601      	mov	r1, r0
 8013712:	d00b      	beq.n	801372c <__lo0bits+0x22>
 8013714:	07da      	lsls	r2, r3, #31
 8013716:	d423      	bmi.n	8013760 <__lo0bits+0x56>
 8013718:	0798      	lsls	r0, r3, #30
 801371a:	bf49      	itett	mi
 801371c:	085b      	lsrmi	r3, r3, #1
 801371e:	089b      	lsrpl	r3, r3, #2
 8013720:	2001      	movmi	r0, #1
 8013722:	600b      	strmi	r3, [r1, #0]
 8013724:	bf5c      	itt	pl
 8013726:	600b      	strpl	r3, [r1, #0]
 8013728:	2002      	movpl	r0, #2
 801372a:	4770      	bx	lr
 801372c:	b298      	uxth	r0, r3
 801372e:	b9a8      	cbnz	r0, 801375c <__lo0bits+0x52>
 8013730:	0c1b      	lsrs	r3, r3, #16
 8013732:	2010      	movs	r0, #16
 8013734:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013738:	bf04      	itt	eq
 801373a:	0a1b      	lsreq	r3, r3, #8
 801373c:	3008      	addeq	r0, #8
 801373e:	071a      	lsls	r2, r3, #28
 8013740:	bf04      	itt	eq
 8013742:	091b      	lsreq	r3, r3, #4
 8013744:	3004      	addeq	r0, #4
 8013746:	079a      	lsls	r2, r3, #30
 8013748:	bf04      	itt	eq
 801374a:	089b      	lsreq	r3, r3, #2
 801374c:	3002      	addeq	r0, #2
 801374e:	07da      	lsls	r2, r3, #31
 8013750:	d402      	bmi.n	8013758 <__lo0bits+0x4e>
 8013752:	085b      	lsrs	r3, r3, #1
 8013754:	d006      	beq.n	8013764 <__lo0bits+0x5a>
 8013756:	3001      	adds	r0, #1
 8013758:	600b      	str	r3, [r1, #0]
 801375a:	4770      	bx	lr
 801375c:	4610      	mov	r0, r2
 801375e:	e7e9      	b.n	8013734 <__lo0bits+0x2a>
 8013760:	2000      	movs	r0, #0
 8013762:	4770      	bx	lr
 8013764:	2020      	movs	r0, #32
 8013766:	4770      	bx	lr

08013768 <__i2b>:
 8013768:	b510      	push	{r4, lr}
 801376a:	460c      	mov	r4, r1
 801376c:	2101      	movs	r1, #1
 801376e:	f7ff fee9 	bl	8013544 <_Balloc>
 8013772:	2201      	movs	r2, #1
 8013774:	6144      	str	r4, [r0, #20]
 8013776:	6102      	str	r2, [r0, #16]
 8013778:	bd10      	pop	{r4, pc}

0801377a <__multiply>:
 801377a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377e:	4614      	mov	r4, r2
 8013780:	690a      	ldr	r2, [r1, #16]
 8013782:	6923      	ldr	r3, [r4, #16]
 8013784:	429a      	cmp	r2, r3
 8013786:	bfb8      	it	lt
 8013788:	460b      	movlt	r3, r1
 801378a:	4688      	mov	r8, r1
 801378c:	bfbc      	itt	lt
 801378e:	46a0      	movlt	r8, r4
 8013790:	461c      	movlt	r4, r3
 8013792:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013796:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801379a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801379e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80137a2:	eb07 0609 	add.w	r6, r7, r9
 80137a6:	42b3      	cmp	r3, r6
 80137a8:	bfb8      	it	lt
 80137aa:	3101      	addlt	r1, #1
 80137ac:	f7ff feca 	bl	8013544 <_Balloc>
 80137b0:	f100 0514 	add.w	r5, r0, #20
 80137b4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80137b8:	462b      	mov	r3, r5
 80137ba:	2200      	movs	r2, #0
 80137bc:	4573      	cmp	r3, lr
 80137be:	d316      	bcc.n	80137ee <__multiply+0x74>
 80137c0:	f104 0214 	add.w	r2, r4, #20
 80137c4:	f108 0114 	add.w	r1, r8, #20
 80137c8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80137cc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	9b00      	ldr	r3, [sp, #0]
 80137d4:	9201      	str	r2, [sp, #4]
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d80c      	bhi.n	80137f4 <__multiply+0x7a>
 80137da:	2e00      	cmp	r6, #0
 80137dc:	dd03      	ble.n	80137e6 <__multiply+0x6c>
 80137de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d05d      	beq.n	80138a2 <__multiply+0x128>
 80137e6:	6106      	str	r6, [r0, #16]
 80137e8:	b003      	add	sp, #12
 80137ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ee:	f843 2b04 	str.w	r2, [r3], #4
 80137f2:	e7e3      	b.n	80137bc <__multiply+0x42>
 80137f4:	f8b2 b000 	ldrh.w	fp, [r2]
 80137f8:	f1bb 0f00 	cmp.w	fp, #0
 80137fc:	d023      	beq.n	8013846 <__multiply+0xcc>
 80137fe:	4689      	mov	r9, r1
 8013800:	46ac      	mov	ip, r5
 8013802:	f04f 0800 	mov.w	r8, #0
 8013806:	f859 4b04 	ldr.w	r4, [r9], #4
 801380a:	f8dc a000 	ldr.w	sl, [ip]
 801380e:	b2a3      	uxth	r3, r4
 8013810:	fa1f fa8a 	uxth.w	sl, sl
 8013814:	fb0b a303 	mla	r3, fp, r3, sl
 8013818:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801381c:	f8dc 4000 	ldr.w	r4, [ip]
 8013820:	4443      	add	r3, r8
 8013822:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013826:	fb0b 840a 	mla	r4, fp, sl, r8
 801382a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801382e:	46e2      	mov	sl, ip
 8013830:	b29b      	uxth	r3, r3
 8013832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013836:	454f      	cmp	r7, r9
 8013838:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801383c:	f84a 3b04 	str.w	r3, [sl], #4
 8013840:	d82b      	bhi.n	801389a <__multiply+0x120>
 8013842:	f8cc 8004 	str.w	r8, [ip, #4]
 8013846:	9b01      	ldr	r3, [sp, #4]
 8013848:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801384c:	3204      	adds	r2, #4
 801384e:	f1ba 0f00 	cmp.w	sl, #0
 8013852:	d020      	beq.n	8013896 <__multiply+0x11c>
 8013854:	682b      	ldr	r3, [r5, #0]
 8013856:	4689      	mov	r9, r1
 8013858:	46a8      	mov	r8, r5
 801385a:	f04f 0b00 	mov.w	fp, #0
 801385e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013862:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013866:	fb0a 440c 	mla	r4, sl, ip, r4
 801386a:	445c      	add	r4, fp
 801386c:	46c4      	mov	ip, r8
 801386e:	b29b      	uxth	r3, r3
 8013870:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013874:	f84c 3b04 	str.w	r3, [ip], #4
 8013878:	f859 3b04 	ldr.w	r3, [r9], #4
 801387c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013880:	0c1b      	lsrs	r3, r3, #16
 8013882:	fb0a b303 	mla	r3, sl, r3, fp
 8013886:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801388a:	454f      	cmp	r7, r9
 801388c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013890:	d805      	bhi.n	801389e <__multiply+0x124>
 8013892:	f8c8 3004 	str.w	r3, [r8, #4]
 8013896:	3504      	adds	r5, #4
 8013898:	e79b      	b.n	80137d2 <__multiply+0x58>
 801389a:	46d4      	mov	ip, sl
 801389c:	e7b3      	b.n	8013806 <__multiply+0x8c>
 801389e:	46e0      	mov	r8, ip
 80138a0:	e7dd      	b.n	801385e <__multiply+0xe4>
 80138a2:	3e01      	subs	r6, #1
 80138a4:	e799      	b.n	80137da <__multiply+0x60>
	...

080138a8 <__pow5mult>:
 80138a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138ac:	4615      	mov	r5, r2
 80138ae:	f012 0203 	ands.w	r2, r2, #3
 80138b2:	4606      	mov	r6, r0
 80138b4:	460f      	mov	r7, r1
 80138b6:	d007      	beq.n	80138c8 <__pow5mult+0x20>
 80138b8:	3a01      	subs	r2, #1
 80138ba:	4c21      	ldr	r4, [pc, #132]	; (8013940 <__pow5mult+0x98>)
 80138bc:	2300      	movs	r3, #0
 80138be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80138c2:	f7ff fe8a 	bl	80135da <__multadd>
 80138c6:	4607      	mov	r7, r0
 80138c8:	10ad      	asrs	r5, r5, #2
 80138ca:	d035      	beq.n	8013938 <__pow5mult+0x90>
 80138cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80138ce:	b93c      	cbnz	r4, 80138e0 <__pow5mult+0x38>
 80138d0:	2010      	movs	r0, #16
 80138d2:	f7ff fe1d 	bl	8013510 <malloc>
 80138d6:	6270      	str	r0, [r6, #36]	; 0x24
 80138d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138dc:	6004      	str	r4, [r0, #0]
 80138de:	60c4      	str	r4, [r0, #12]
 80138e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80138e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80138e8:	b94c      	cbnz	r4, 80138fe <__pow5mult+0x56>
 80138ea:	f240 2171 	movw	r1, #625	; 0x271
 80138ee:	4630      	mov	r0, r6
 80138f0:	f7ff ff3a 	bl	8013768 <__i2b>
 80138f4:	2300      	movs	r3, #0
 80138f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80138fa:	4604      	mov	r4, r0
 80138fc:	6003      	str	r3, [r0, #0]
 80138fe:	f04f 0800 	mov.w	r8, #0
 8013902:	07eb      	lsls	r3, r5, #31
 8013904:	d50a      	bpl.n	801391c <__pow5mult+0x74>
 8013906:	4639      	mov	r1, r7
 8013908:	4622      	mov	r2, r4
 801390a:	4630      	mov	r0, r6
 801390c:	f7ff ff35 	bl	801377a <__multiply>
 8013910:	4639      	mov	r1, r7
 8013912:	4681      	mov	r9, r0
 8013914:	4630      	mov	r0, r6
 8013916:	f7ff fe49 	bl	80135ac <_Bfree>
 801391a:	464f      	mov	r7, r9
 801391c:	106d      	asrs	r5, r5, #1
 801391e:	d00b      	beq.n	8013938 <__pow5mult+0x90>
 8013920:	6820      	ldr	r0, [r4, #0]
 8013922:	b938      	cbnz	r0, 8013934 <__pow5mult+0x8c>
 8013924:	4622      	mov	r2, r4
 8013926:	4621      	mov	r1, r4
 8013928:	4630      	mov	r0, r6
 801392a:	f7ff ff26 	bl	801377a <__multiply>
 801392e:	6020      	str	r0, [r4, #0]
 8013930:	f8c0 8000 	str.w	r8, [r0]
 8013934:	4604      	mov	r4, r0
 8013936:	e7e4      	b.n	8013902 <__pow5mult+0x5a>
 8013938:	4638      	mov	r0, r7
 801393a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801393e:	bf00      	nop
 8013940:	08015280 	.word	0x08015280

08013944 <__lshift>:
 8013944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013948:	460c      	mov	r4, r1
 801394a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801394e:	6923      	ldr	r3, [r4, #16]
 8013950:	6849      	ldr	r1, [r1, #4]
 8013952:	eb0a 0903 	add.w	r9, sl, r3
 8013956:	68a3      	ldr	r3, [r4, #8]
 8013958:	4607      	mov	r7, r0
 801395a:	4616      	mov	r6, r2
 801395c:	f109 0501 	add.w	r5, r9, #1
 8013960:	42ab      	cmp	r3, r5
 8013962:	db32      	blt.n	80139ca <__lshift+0x86>
 8013964:	4638      	mov	r0, r7
 8013966:	f7ff fded 	bl	8013544 <_Balloc>
 801396a:	2300      	movs	r3, #0
 801396c:	4680      	mov	r8, r0
 801396e:	f100 0114 	add.w	r1, r0, #20
 8013972:	461a      	mov	r2, r3
 8013974:	4553      	cmp	r3, sl
 8013976:	db2b      	blt.n	80139d0 <__lshift+0x8c>
 8013978:	6920      	ldr	r0, [r4, #16]
 801397a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801397e:	f104 0314 	add.w	r3, r4, #20
 8013982:	f016 021f 	ands.w	r2, r6, #31
 8013986:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801398a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801398e:	d025      	beq.n	80139dc <__lshift+0x98>
 8013990:	f1c2 0e20 	rsb	lr, r2, #32
 8013994:	2000      	movs	r0, #0
 8013996:	681e      	ldr	r6, [r3, #0]
 8013998:	468a      	mov	sl, r1
 801399a:	4096      	lsls	r6, r2
 801399c:	4330      	orrs	r0, r6
 801399e:	f84a 0b04 	str.w	r0, [sl], #4
 80139a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80139a6:	459c      	cmp	ip, r3
 80139a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80139ac:	d814      	bhi.n	80139d8 <__lshift+0x94>
 80139ae:	6048      	str	r0, [r1, #4]
 80139b0:	b108      	cbz	r0, 80139b6 <__lshift+0x72>
 80139b2:	f109 0502 	add.w	r5, r9, #2
 80139b6:	3d01      	subs	r5, #1
 80139b8:	4638      	mov	r0, r7
 80139ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80139be:	4621      	mov	r1, r4
 80139c0:	f7ff fdf4 	bl	80135ac <_Bfree>
 80139c4:	4640      	mov	r0, r8
 80139c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ca:	3101      	adds	r1, #1
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	e7c7      	b.n	8013960 <__lshift+0x1c>
 80139d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80139d4:	3301      	adds	r3, #1
 80139d6:	e7cd      	b.n	8013974 <__lshift+0x30>
 80139d8:	4651      	mov	r1, sl
 80139da:	e7dc      	b.n	8013996 <__lshift+0x52>
 80139dc:	3904      	subs	r1, #4
 80139de:	f853 2b04 	ldr.w	r2, [r3], #4
 80139e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80139e6:	459c      	cmp	ip, r3
 80139e8:	d8f9      	bhi.n	80139de <__lshift+0x9a>
 80139ea:	e7e4      	b.n	80139b6 <__lshift+0x72>

080139ec <__mcmp>:
 80139ec:	6903      	ldr	r3, [r0, #16]
 80139ee:	690a      	ldr	r2, [r1, #16]
 80139f0:	1a9b      	subs	r3, r3, r2
 80139f2:	b530      	push	{r4, r5, lr}
 80139f4:	d10c      	bne.n	8013a10 <__mcmp+0x24>
 80139f6:	0092      	lsls	r2, r2, #2
 80139f8:	3014      	adds	r0, #20
 80139fa:	3114      	adds	r1, #20
 80139fc:	1884      	adds	r4, r0, r2
 80139fe:	4411      	add	r1, r2
 8013a00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013a04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013a08:	4295      	cmp	r5, r2
 8013a0a:	d003      	beq.n	8013a14 <__mcmp+0x28>
 8013a0c:	d305      	bcc.n	8013a1a <__mcmp+0x2e>
 8013a0e:	2301      	movs	r3, #1
 8013a10:	4618      	mov	r0, r3
 8013a12:	bd30      	pop	{r4, r5, pc}
 8013a14:	42a0      	cmp	r0, r4
 8013a16:	d3f3      	bcc.n	8013a00 <__mcmp+0x14>
 8013a18:	e7fa      	b.n	8013a10 <__mcmp+0x24>
 8013a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a1e:	e7f7      	b.n	8013a10 <__mcmp+0x24>

08013a20 <__mdiff>:
 8013a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a24:	460d      	mov	r5, r1
 8013a26:	4607      	mov	r7, r0
 8013a28:	4611      	mov	r1, r2
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	4614      	mov	r4, r2
 8013a2e:	f7ff ffdd 	bl	80139ec <__mcmp>
 8013a32:	1e06      	subs	r6, r0, #0
 8013a34:	d108      	bne.n	8013a48 <__mdiff+0x28>
 8013a36:	4631      	mov	r1, r6
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f7ff fd83 	bl	8013544 <_Balloc>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a48:	bfa4      	itt	ge
 8013a4a:	4623      	movge	r3, r4
 8013a4c:	462c      	movge	r4, r5
 8013a4e:	4638      	mov	r0, r7
 8013a50:	6861      	ldr	r1, [r4, #4]
 8013a52:	bfa6      	itte	ge
 8013a54:	461d      	movge	r5, r3
 8013a56:	2600      	movge	r6, #0
 8013a58:	2601      	movlt	r6, #1
 8013a5a:	f7ff fd73 	bl	8013544 <_Balloc>
 8013a5e:	692b      	ldr	r3, [r5, #16]
 8013a60:	60c6      	str	r6, [r0, #12]
 8013a62:	6926      	ldr	r6, [r4, #16]
 8013a64:	f105 0914 	add.w	r9, r5, #20
 8013a68:	f104 0214 	add.w	r2, r4, #20
 8013a6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013a70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013a74:	f100 0514 	add.w	r5, r0, #20
 8013a78:	f04f 0e00 	mov.w	lr, #0
 8013a7c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013a80:	f859 4b04 	ldr.w	r4, [r9], #4
 8013a84:	fa1e f18a 	uxtah	r1, lr, sl
 8013a88:	b2a3      	uxth	r3, r4
 8013a8a:	1ac9      	subs	r1, r1, r3
 8013a8c:	0c23      	lsrs	r3, r4, #16
 8013a8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013a92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013a96:	b289      	uxth	r1, r1
 8013a98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013a9c:	45c8      	cmp	r8, r9
 8013a9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013aa2:	4694      	mov	ip, r2
 8013aa4:	f845 3b04 	str.w	r3, [r5], #4
 8013aa8:	d8e8      	bhi.n	8013a7c <__mdiff+0x5c>
 8013aaa:	45bc      	cmp	ip, r7
 8013aac:	d304      	bcc.n	8013ab8 <__mdiff+0x98>
 8013aae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013ab2:	b183      	cbz	r3, 8013ad6 <__mdiff+0xb6>
 8013ab4:	6106      	str	r6, [r0, #16]
 8013ab6:	e7c5      	b.n	8013a44 <__mdiff+0x24>
 8013ab8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013abc:	fa1e f381 	uxtah	r3, lr, r1
 8013ac0:	141a      	asrs	r2, r3, #16
 8013ac2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013acc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013ad0:	f845 3b04 	str.w	r3, [r5], #4
 8013ad4:	e7e9      	b.n	8013aaa <__mdiff+0x8a>
 8013ad6:	3e01      	subs	r6, #1
 8013ad8:	e7e9      	b.n	8013aae <__mdiff+0x8e>
	...

08013adc <__ulp>:
 8013adc:	4b12      	ldr	r3, [pc, #72]	; (8013b28 <__ulp+0x4c>)
 8013ade:	ee10 2a90 	vmov	r2, s1
 8013ae2:	401a      	ands	r2, r3
 8013ae4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	dd04      	ble.n	8013af6 <__ulp+0x1a>
 8013aec:	2000      	movs	r0, #0
 8013aee:	4619      	mov	r1, r3
 8013af0:	ec41 0b10 	vmov	d0, r0, r1
 8013af4:	4770      	bx	lr
 8013af6:	425b      	negs	r3, r3
 8013af8:	151b      	asrs	r3, r3, #20
 8013afa:	2b13      	cmp	r3, #19
 8013afc:	f04f 0000 	mov.w	r0, #0
 8013b00:	f04f 0100 	mov.w	r1, #0
 8013b04:	dc04      	bgt.n	8013b10 <__ulp+0x34>
 8013b06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013b0a:	fa42 f103 	asr.w	r1, r2, r3
 8013b0e:	e7ef      	b.n	8013af0 <__ulp+0x14>
 8013b10:	3b14      	subs	r3, #20
 8013b12:	2b1e      	cmp	r3, #30
 8013b14:	f04f 0201 	mov.w	r2, #1
 8013b18:	bfda      	itte	le
 8013b1a:	f1c3 031f 	rsble	r3, r3, #31
 8013b1e:	fa02 f303 	lslle.w	r3, r2, r3
 8013b22:	4613      	movgt	r3, r2
 8013b24:	4618      	mov	r0, r3
 8013b26:	e7e3      	b.n	8013af0 <__ulp+0x14>
 8013b28:	7ff00000 	.word	0x7ff00000

08013b2c <__b2d>:
 8013b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b2e:	6905      	ldr	r5, [r0, #16]
 8013b30:	f100 0714 	add.w	r7, r0, #20
 8013b34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013b38:	1f2e      	subs	r6, r5, #4
 8013b3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f7ff fdc4 	bl	80136cc <__hi0bits>
 8013b44:	f1c0 0320 	rsb	r3, r0, #32
 8013b48:	280a      	cmp	r0, #10
 8013b4a:	600b      	str	r3, [r1, #0]
 8013b4c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013bc4 <__b2d+0x98>
 8013b50:	dc14      	bgt.n	8013b7c <__b2d+0x50>
 8013b52:	f1c0 0e0b 	rsb	lr, r0, #11
 8013b56:	fa24 f10e 	lsr.w	r1, r4, lr
 8013b5a:	42b7      	cmp	r7, r6
 8013b5c:	ea41 030c 	orr.w	r3, r1, ip
 8013b60:	bf34      	ite	cc
 8013b62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b66:	2100      	movcs	r1, #0
 8013b68:	3015      	adds	r0, #21
 8013b6a:	fa04 f000 	lsl.w	r0, r4, r0
 8013b6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013b72:	ea40 0201 	orr.w	r2, r0, r1
 8013b76:	ec43 2b10 	vmov	d0, r2, r3
 8013b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b7c:	42b7      	cmp	r7, r6
 8013b7e:	bf3a      	itte	cc
 8013b80:	f1a5 0608 	subcc.w	r6, r5, #8
 8013b84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b88:	2100      	movcs	r1, #0
 8013b8a:	380b      	subs	r0, #11
 8013b8c:	d015      	beq.n	8013bba <__b2d+0x8e>
 8013b8e:	4084      	lsls	r4, r0
 8013b90:	f1c0 0520 	rsb	r5, r0, #32
 8013b94:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013b98:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013b9c:	42be      	cmp	r6, r7
 8013b9e:	fa21 fc05 	lsr.w	ip, r1, r5
 8013ba2:	ea44 030c 	orr.w	r3, r4, ip
 8013ba6:	bf8c      	ite	hi
 8013ba8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013bac:	2400      	movls	r4, #0
 8013bae:	fa01 f000 	lsl.w	r0, r1, r0
 8013bb2:	40ec      	lsrs	r4, r5
 8013bb4:	ea40 0204 	orr.w	r2, r0, r4
 8013bb8:	e7dd      	b.n	8013b76 <__b2d+0x4a>
 8013bba:	ea44 030c 	orr.w	r3, r4, ip
 8013bbe:	460a      	mov	r2, r1
 8013bc0:	e7d9      	b.n	8013b76 <__b2d+0x4a>
 8013bc2:	bf00      	nop
 8013bc4:	3ff00000 	.word	0x3ff00000

08013bc8 <__d2b>:
 8013bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bcc:	460e      	mov	r6, r1
 8013bce:	2101      	movs	r1, #1
 8013bd0:	ec59 8b10 	vmov	r8, r9, d0
 8013bd4:	4615      	mov	r5, r2
 8013bd6:	f7ff fcb5 	bl	8013544 <_Balloc>
 8013bda:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013bde:	4607      	mov	r7, r0
 8013be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013be4:	bb34      	cbnz	r4, 8013c34 <__d2b+0x6c>
 8013be6:	9301      	str	r3, [sp, #4]
 8013be8:	f1b8 0300 	subs.w	r3, r8, #0
 8013bec:	d027      	beq.n	8013c3e <__d2b+0x76>
 8013bee:	a802      	add	r0, sp, #8
 8013bf0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013bf4:	f7ff fd89 	bl	801370a <__lo0bits>
 8013bf8:	9900      	ldr	r1, [sp, #0]
 8013bfa:	b1f0      	cbz	r0, 8013c3a <__d2b+0x72>
 8013bfc:	9a01      	ldr	r2, [sp, #4]
 8013bfe:	f1c0 0320 	rsb	r3, r0, #32
 8013c02:	fa02 f303 	lsl.w	r3, r2, r3
 8013c06:	430b      	orrs	r3, r1
 8013c08:	40c2      	lsrs	r2, r0
 8013c0a:	617b      	str	r3, [r7, #20]
 8013c0c:	9201      	str	r2, [sp, #4]
 8013c0e:	9b01      	ldr	r3, [sp, #4]
 8013c10:	61bb      	str	r3, [r7, #24]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	bf14      	ite	ne
 8013c16:	2102      	movne	r1, #2
 8013c18:	2101      	moveq	r1, #1
 8013c1a:	6139      	str	r1, [r7, #16]
 8013c1c:	b1c4      	cbz	r4, 8013c50 <__d2b+0x88>
 8013c1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013c22:	4404      	add	r4, r0
 8013c24:	6034      	str	r4, [r6, #0]
 8013c26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c2a:	6028      	str	r0, [r5, #0]
 8013c2c:	4638      	mov	r0, r7
 8013c2e:	b003      	add	sp, #12
 8013c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c38:	e7d5      	b.n	8013be6 <__d2b+0x1e>
 8013c3a:	6179      	str	r1, [r7, #20]
 8013c3c:	e7e7      	b.n	8013c0e <__d2b+0x46>
 8013c3e:	a801      	add	r0, sp, #4
 8013c40:	f7ff fd63 	bl	801370a <__lo0bits>
 8013c44:	9b01      	ldr	r3, [sp, #4]
 8013c46:	617b      	str	r3, [r7, #20]
 8013c48:	2101      	movs	r1, #1
 8013c4a:	6139      	str	r1, [r7, #16]
 8013c4c:	3020      	adds	r0, #32
 8013c4e:	e7e5      	b.n	8013c1c <__d2b+0x54>
 8013c50:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013c54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c58:	6030      	str	r0, [r6, #0]
 8013c5a:	6918      	ldr	r0, [r3, #16]
 8013c5c:	f7ff fd36 	bl	80136cc <__hi0bits>
 8013c60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013c64:	e7e1      	b.n	8013c2a <__d2b+0x62>

08013c66 <__ratio>:
 8013c66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c6a:	4688      	mov	r8, r1
 8013c6c:	4669      	mov	r1, sp
 8013c6e:	4681      	mov	r9, r0
 8013c70:	f7ff ff5c 	bl	8013b2c <__b2d>
 8013c74:	a901      	add	r1, sp, #4
 8013c76:	4640      	mov	r0, r8
 8013c78:	ec57 6b10 	vmov	r6, r7, d0
 8013c7c:	ee10 4a10 	vmov	r4, s0
 8013c80:	f7ff ff54 	bl	8013b2c <__b2d>
 8013c84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013c88:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013c8c:	eba3 0c02 	sub.w	ip, r3, r2
 8013c90:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c94:	1a9b      	subs	r3, r3, r2
 8013c96:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013c9a:	ec51 0b10 	vmov	r0, r1, d0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	ee10 aa10 	vmov	sl, s0
 8013ca4:	bfce      	itee	gt
 8013ca6:	463a      	movgt	r2, r7
 8013ca8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013cac:	460a      	movle	r2, r1
 8013cae:	463d      	mov	r5, r7
 8013cb0:	468b      	mov	fp, r1
 8013cb2:	bfcc      	ite	gt
 8013cb4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013cb8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013cbc:	ec45 4b17 	vmov	d7, r4, r5
 8013cc0:	ec4b ab16 	vmov	d6, sl, fp
 8013cc4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013cc8:	b003      	add	sp, #12
 8013cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cce <__copybits>:
 8013cce:	3901      	subs	r1, #1
 8013cd0:	b510      	push	{r4, lr}
 8013cd2:	1149      	asrs	r1, r1, #5
 8013cd4:	6914      	ldr	r4, [r2, #16]
 8013cd6:	3101      	adds	r1, #1
 8013cd8:	f102 0314 	add.w	r3, r2, #20
 8013cdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ce4:	42a3      	cmp	r3, r4
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	d303      	bcc.n	8013cf2 <__copybits+0x24>
 8013cea:	2300      	movs	r3, #0
 8013cec:	428a      	cmp	r2, r1
 8013cee:	d305      	bcc.n	8013cfc <__copybits+0x2e>
 8013cf0:	bd10      	pop	{r4, pc}
 8013cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cf6:	f840 2b04 	str.w	r2, [r0], #4
 8013cfa:	e7f3      	b.n	8013ce4 <__copybits+0x16>
 8013cfc:	f842 3b04 	str.w	r3, [r2], #4
 8013d00:	e7f4      	b.n	8013cec <__copybits+0x1e>

08013d02 <__any_on>:
 8013d02:	f100 0214 	add.w	r2, r0, #20
 8013d06:	6900      	ldr	r0, [r0, #16]
 8013d08:	114b      	asrs	r3, r1, #5
 8013d0a:	4298      	cmp	r0, r3
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	db11      	blt.n	8013d34 <__any_on+0x32>
 8013d10:	dd0a      	ble.n	8013d28 <__any_on+0x26>
 8013d12:	f011 011f 	ands.w	r1, r1, #31
 8013d16:	d007      	beq.n	8013d28 <__any_on+0x26>
 8013d18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013d1c:	fa24 f001 	lsr.w	r0, r4, r1
 8013d20:	fa00 f101 	lsl.w	r1, r0, r1
 8013d24:	428c      	cmp	r4, r1
 8013d26:	d10b      	bne.n	8013d40 <__any_on+0x3e>
 8013d28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d803      	bhi.n	8013d38 <__any_on+0x36>
 8013d30:	2000      	movs	r0, #0
 8013d32:	bd10      	pop	{r4, pc}
 8013d34:	4603      	mov	r3, r0
 8013d36:	e7f7      	b.n	8013d28 <__any_on+0x26>
 8013d38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d3c:	2900      	cmp	r1, #0
 8013d3e:	d0f5      	beq.n	8013d2c <__any_on+0x2a>
 8013d40:	2001      	movs	r0, #1
 8013d42:	e7f6      	b.n	8013d32 <__any_on+0x30>

08013d44 <_calloc_r>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	fb02 f401 	mul.w	r4, r2, r1
 8013d4a:	4621      	mov	r1, r4
 8013d4c:	f000 f856 	bl	8013dfc <_malloc_r>
 8013d50:	4605      	mov	r5, r0
 8013d52:	b118      	cbz	r0, 8013d5c <_calloc_r+0x18>
 8013d54:	4622      	mov	r2, r4
 8013d56:	2100      	movs	r1, #0
 8013d58:	f7fc fb05 	bl	8010366 <memset>
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	bd38      	pop	{r3, r4, r5, pc}

08013d60 <_free_r>:
 8013d60:	b538      	push	{r3, r4, r5, lr}
 8013d62:	4605      	mov	r5, r0
 8013d64:	2900      	cmp	r1, #0
 8013d66:	d045      	beq.n	8013df4 <_free_r+0x94>
 8013d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d6c:	1f0c      	subs	r4, r1, #4
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	bfb8      	it	lt
 8013d72:	18e4      	addlt	r4, r4, r3
 8013d74:	f000 facf 	bl	8014316 <__malloc_lock>
 8013d78:	4a1f      	ldr	r2, [pc, #124]	; (8013df8 <_free_r+0x98>)
 8013d7a:	6813      	ldr	r3, [r2, #0]
 8013d7c:	4610      	mov	r0, r2
 8013d7e:	b933      	cbnz	r3, 8013d8e <_free_r+0x2e>
 8013d80:	6063      	str	r3, [r4, #4]
 8013d82:	6014      	str	r4, [r2, #0]
 8013d84:	4628      	mov	r0, r5
 8013d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d8a:	f000 bac5 	b.w	8014318 <__malloc_unlock>
 8013d8e:	42a3      	cmp	r3, r4
 8013d90:	d90c      	bls.n	8013dac <_free_r+0x4c>
 8013d92:	6821      	ldr	r1, [r4, #0]
 8013d94:	1862      	adds	r2, r4, r1
 8013d96:	4293      	cmp	r3, r2
 8013d98:	bf04      	itt	eq
 8013d9a:	681a      	ldreq	r2, [r3, #0]
 8013d9c:	685b      	ldreq	r3, [r3, #4]
 8013d9e:	6063      	str	r3, [r4, #4]
 8013da0:	bf04      	itt	eq
 8013da2:	1852      	addeq	r2, r2, r1
 8013da4:	6022      	streq	r2, [r4, #0]
 8013da6:	6004      	str	r4, [r0, #0]
 8013da8:	e7ec      	b.n	8013d84 <_free_r+0x24>
 8013daa:	4613      	mov	r3, r2
 8013dac:	685a      	ldr	r2, [r3, #4]
 8013dae:	b10a      	cbz	r2, 8013db4 <_free_r+0x54>
 8013db0:	42a2      	cmp	r2, r4
 8013db2:	d9fa      	bls.n	8013daa <_free_r+0x4a>
 8013db4:	6819      	ldr	r1, [r3, #0]
 8013db6:	1858      	adds	r0, r3, r1
 8013db8:	42a0      	cmp	r0, r4
 8013dba:	d10b      	bne.n	8013dd4 <_free_r+0x74>
 8013dbc:	6820      	ldr	r0, [r4, #0]
 8013dbe:	4401      	add	r1, r0
 8013dc0:	1858      	adds	r0, r3, r1
 8013dc2:	4282      	cmp	r2, r0
 8013dc4:	6019      	str	r1, [r3, #0]
 8013dc6:	d1dd      	bne.n	8013d84 <_free_r+0x24>
 8013dc8:	6810      	ldr	r0, [r2, #0]
 8013dca:	6852      	ldr	r2, [r2, #4]
 8013dcc:	605a      	str	r2, [r3, #4]
 8013dce:	4401      	add	r1, r0
 8013dd0:	6019      	str	r1, [r3, #0]
 8013dd2:	e7d7      	b.n	8013d84 <_free_r+0x24>
 8013dd4:	d902      	bls.n	8013ddc <_free_r+0x7c>
 8013dd6:	230c      	movs	r3, #12
 8013dd8:	602b      	str	r3, [r5, #0]
 8013dda:	e7d3      	b.n	8013d84 <_free_r+0x24>
 8013ddc:	6820      	ldr	r0, [r4, #0]
 8013dde:	1821      	adds	r1, r4, r0
 8013de0:	428a      	cmp	r2, r1
 8013de2:	bf04      	itt	eq
 8013de4:	6811      	ldreq	r1, [r2, #0]
 8013de6:	6852      	ldreq	r2, [r2, #4]
 8013de8:	6062      	str	r2, [r4, #4]
 8013dea:	bf04      	itt	eq
 8013dec:	1809      	addeq	r1, r1, r0
 8013dee:	6021      	streq	r1, [r4, #0]
 8013df0:	605c      	str	r4, [r3, #4]
 8013df2:	e7c7      	b.n	8013d84 <_free_r+0x24>
 8013df4:	bd38      	pop	{r3, r4, r5, pc}
 8013df6:	bf00      	nop
 8013df8:	20010330 	.word	0x20010330

08013dfc <_malloc_r>:
 8013dfc:	b570      	push	{r4, r5, r6, lr}
 8013dfe:	1ccd      	adds	r5, r1, #3
 8013e00:	f025 0503 	bic.w	r5, r5, #3
 8013e04:	3508      	adds	r5, #8
 8013e06:	2d0c      	cmp	r5, #12
 8013e08:	bf38      	it	cc
 8013e0a:	250c      	movcc	r5, #12
 8013e0c:	2d00      	cmp	r5, #0
 8013e0e:	4606      	mov	r6, r0
 8013e10:	db01      	blt.n	8013e16 <_malloc_r+0x1a>
 8013e12:	42a9      	cmp	r1, r5
 8013e14:	d903      	bls.n	8013e1e <_malloc_r+0x22>
 8013e16:	230c      	movs	r3, #12
 8013e18:	6033      	str	r3, [r6, #0]
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	bd70      	pop	{r4, r5, r6, pc}
 8013e1e:	f000 fa7a 	bl	8014316 <__malloc_lock>
 8013e22:	4a21      	ldr	r2, [pc, #132]	; (8013ea8 <_malloc_r+0xac>)
 8013e24:	6814      	ldr	r4, [r2, #0]
 8013e26:	4621      	mov	r1, r4
 8013e28:	b991      	cbnz	r1, 8013e50 <_malloc_r+0x54>
 8013e2a:	4c20      	ldr	r4, [pc, #128]	; (8013eac <_malloc_r+0xb0>)
 8013e2c:	6823      	ldr	r3, [r4, #0]
 8013e2e:	b91b      	cbnz	r3, 8013e38 <_malloc_r+0x3c>
 8013e30:	4630      	mov	r0, r6
 8013e32:	f000 f98f 	bl	8014154 <_sbrk_r>
 8013e36:	6020      	str	r0, [r4, #0]
 8013e38:	4629      	mov	r1, r5
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	f000 f98a 	bl	8014154 <_sbrk_r>
 8013e40:	1c43      	adds	r3, r0, #1
 8013e42:	d124      	bne.n	8013e8e <_malloc_r+0x92>
 8013e44:	230c      	movs	r3, #12
 8013e46:	6033      	str	r3, [r6, #0]
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f000 fa65 	bl	8014318 <__malloc_unlock>
 8013e4e:	e7e4      	b.n	8013e1a <_malloc_r+0x1e>
 8013e50:	680b      	ldr	r3, [r1, #0]
 8013e52:	1b5b      	subs	r3, r3, r5
 8013e54:	d418      	bmi.n	8013e88 <_malloc_r+0x8c>
 8013e56:	2b0b      	cmp	r3, #11
 8013e58:	d90f      	bls.n	8013e7a <_malloc_r+0x7e>
 8013e5a:	600b      	str	r3, [r1, #0]
 8013e5c:	50cd      	str	r5, [r1, r3]
 8013e5e:	18cc      	adds	r4, r1, r3
 8013e60:	4630      	mov	r0, r6
 8013e62:	f000 fa59 	bl	8014318 <__malloc_unlock>
 8013e66:	f104 000b 	add.w	r0, r4, #11
 8013e6a:	1d23      	adds	r3, r4, #4
 8013e6c:	f020 0007 	bic.w	r0, r0, #7
 8013e70:	1ac3      	subs	r3, r0, r3
 8013e72:	d0d3      	beq.n	8013e1c <_malloc_r+0x20>
 8013e74:	425a      	negs	r2, r3
 8013e76:	50e2      	str	r2, [r4, r3]
 8013e78:	e7d0      	b.n	8013e1c <_malloc_r+0x20>
 8013e7a:	428c      	cmp	r4, r1
 8013e7c:	684b      	ldr	r3, [r1, #4]
 8013e7e:	bf16      	itet	ne
 8013e80:	6063      	strne	r3, [r4, #4]
 8013e82:	6013      	streq	r3, [r2, #0]
 8013e84:	460c      	movne	r4, r1
 8013e86:	e7eb      	b.n	8013e60 <_malloc_r+0x64>
 8013e88:	460c      	mov	r4, r1
 8013e8a:	6849      	ldr	r1, [r1, #4]
 8013e8c:	e7cc      	b.n	8013e28 <_malloc_r+0x2c>
 8013e8e:	1cc4      	adds	r4, r0, #3
 8013e90:	f024 0403 	bic.w	r4, r4, #3
 8013e94:	42a0      	cmp	r0, r4
 8013e96:	d005      	beq.n	8013ea4 <_malloc_r+0xa8>
 8013e98:	1a21      	subs	r1, r4, r0
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f000 f95a 	bl	8014154 <_sbrk_r>
 8013ea0:	3001      	adds	r0, #1
 8013ea2:	d0cf      	beq.n	8013e44 <_malloc_r+0x48>
 8013ea4:	6025      	str	r5, [r4, #0]
 8013ea6:	e7db      	b.n	8013e60 <_malloc_r+0x64>
 8013ea8:	20010330 	.word	0x20010330
 8013eac:	20010334 	.word	0x20010334

08013eb0 <__ssputs_r>:
 8013eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013eb4:	688e      	ldr	r6, [r1, #8]
 8013eb6:	429e      	cmp	r6, r3
 8013eb8:	4682      	mov	sl, r0
 8013eba:	460c      	mov	r4, r1
 8013ebc:	4690      	mov	r8, r2
 8013ebe:	4699      	mov	r9, r3
 8013ec0:	d837      	bhi.n	8013f32 <__ssputs_r+0x82>
 8013ec2:	898a      	ldrh	r2, [r1, #12]
 8013ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ec8:	d031      	beq.n	8013f2e <__ssputs_r+0x7e>
 8013eca:	6825      	ldr	r5, [r4, #0]
 8013ecc:	6909      	ldr	r1, [r1, #16]
 8013ece:	1a6f      	subs	r7, r5, r1
 8013ed0:	6965      	ldr	r5, [r4, #20]
 8013ed2:	2302      	movs	r3, #2
 8013ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ed8:	fb95 f5f3 	sdiv	r5, r5, r3
 8013edc:	f109 0301 	add.w	r3, r9, #1
 8013ee0:	443b      	add	r3, r7
 8013ee2:	429d      	cmp	r5, r3
 8013ee4:	bf38      	it	cc
 8013ee6:	461d      	movcc	r5, r3
 8013ee8:	0553      	lsls	r3, r2, #21
 8013eea:	d530      	bpl.n	8013f4e <__ssputs_r+0x9e>
 8013eec:	4629      	mov	r1, r5
 8013eee:	f7ff ff85 	bl	8013dfc <_malloc_r>
 8013ef2:	4606      	mov	r6, r0
 8013ef4:	b950      	cbnz	r0, 8013f0c <__ssputs_r+0x5c>
 8013ef6:	230c      	movs	r3, #12
 8013ef8:	f8ca 3000 	str.w	r3, [sl]
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f02:	81a3      	strh	r3, [r4, #12]
 8013f04:	f04f 30ff 	mov.w	r0, #4294967295
 8013f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f0c:	463a      	mov	r2, r7
 8013f0e:	6921      	ldr	r1, [r4, #16]
 8013f10:	f7fc fa1e 	bl	8010350 <memcpy>
 8013f14:	89a3      	ldrh	r3, [r4, #12]
 8013f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f1e:	81a3      	strh	r3, [r4, #12]
 8013f20:	6126      	str	r6, [r4, #16]
 8013f22:	6165      	str	r5, [r4, #20]
 8013f24:	443e      	add	r6, r7
 8013f26:	1bed      	subs	r5, r5, r7
 8013f28:	6026      	str	r6, [r4, #0]
 8013f2a:	60a5      	str	r5, [r4, #8]
 8013f2c:	464e      	mov	r6, r9
 8013f2e:	454e      	cmp	r6, r9
 8013f30:	d900      	bls.n	8013f34 <__ssputs_r+0x84>
 8013f32:	464e      	mov	r6, r9
 8013f34:	4632      	mov	r2, r6
 8013f36:	4641      	mov	r1, r8
 8013f38:	6820      	ldr	r0, [r4, #0]
 8013f3a:	f000 f9d3 	bl	80142e4 <memmove>
 8013f3e:	68a3      	ldr	r3, [r4, #8]
 8013f40:	1b9b      	subs	r3, r3, r6
 8013f42:	60a3      	str	r3, [r4, #8]
 8013f44:	6823      	ldr	r3, [r4, #0]
 8013f46:	441e      	add	r6, r3
 8013f48:	6026      	str	r6, [r4, #0]
 8013f4a:	2000      	movs	r0, #0
 8013f4c:	e7dc      	b.n	8013f08 <__ssputs_r+0x58>
 8013f4e:	462a      	mov	r2, r5
 8013f50:	f000 f9e3 	bl	801431a <_realloc_r>
 8013f54:	4606      	mov	r6, r0
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d1e2      	bne.n	8013f20 <__ssputs_r+0x70>
 8013f5a:	6921      	ldr	r1, [r4, #16]
 8013f5c:	4650      	mov	r0, sl
 8013f5e:	f7ff feff 	bl	8013d60 <_free_r>
 8013f62:	e7c8      	b.n	8013ef6 <__ssputs_r+0x46>

08013f64 <_svfiprintf_r>:
 8013f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f68:	461d      	mov	r5, r3
 8013f6a:	898b      	ldrh	r3, [r1, #12]
 8013f6c:	061f      	lsls	r7, r3, #24
 8013f6e:	b09d      	sub	sp, #116	; 0x74
 8013f70:	4680      	mov	r8, r0
 8013f72:	460c      	mov	r4, r1
 8013f74:	4616      	mov	r6, r2
 8013f76:	d50f      	bpl.n	8013f98 <_svfiprintf_r+0x34>
 8013f78:	690b      	ldr	r3, [r1, #16]
 8013f7a:	b96b      	cbnz	r3, 8013f98 <_svfiprintf_r+0x34>
 8013f7c:	2140      	movs	r1, #64	; 0x40
 8013f7e:	f7ff ff3d 	bl	8013dfc <_malloc_r>
 8013f82:	6020      	str	r0, [r4, #0]
 8013f84:	6120      	str	r0, [r4, #16]
 8013f86:	b928      	cbnz	r0, 8013f94 <_svfiprintf_r+0x30>
 8013f88:	230c      	movs	r3, #12
 8013f8a:	f8c8 3000 	str.w	r3, [r8]
 8013f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f92:	e0c8      	b.n	8014126 <_svfiprintf_r+0x1c2>
 8013f94:	2340      	movs	r3, #64	; 0x40
 8013f96:	6163      	str	r3, [r4, #20]
 8013f98:	2300      	movs	r3, #0
 8013f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f9c:	2320      	movs	r3, #32
 8013f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fa2:	2330      	movs	r3, #48	; 0x30
 8013fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fa8:	9503      	str	r5, [sp, #12]
 8013faa:	f04f 0b01 	mov.w	fp, #1
 8013fae:	4637      	mov	r7, r6
 8013fb0:	463d      	mov	r5, r7
 8013fb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013fb6:	b10b      	cbz	r3, 8013fbc <_svfiprintf_r+0x58>
 8013fb8:	2b25      	cmp	r3, #37	; 0x25
 8013fba:	d13e      	bne.n	801403a <_svfiprintf_r+0xd6>
 8013fbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8013fc0:	d00b      	beq.n	8013fda <_svfiprintf_r+0x76>
 8013fc2:	4653      	mov	r3, sl
 8013fc4:	4632      	mov	r2, r6
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	4640      	mov	r0, r8
 8013fca:	f7ff ff71 	bl	8013eb0 <__ssputs_r>
 8013fce:	3001      	adds	r0, #1
 8013fd0:	f000 80a4 	beq.w	801411c <_svfiprintf_r+0x1b8>
 8013fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fd6:	4453      	add	r3, sl
 8013fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8013fda:	783b      	ldrb	r3, [r7, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 809d 	beq.w	801411c <_svfiprintf_r+0x1b8>
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fec:	9304      	str	r3, [sp, #16]
 8013fee:	9307      	str	r3, [sp, #28]
 8013ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8013ff6:	462f      	mov	r7, r5
 8013ff8:	2205      	movs	r2, #5
 8013ffa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013ffe:	4850      	ldr	r0, [pc, #320]	; (8014140 <_svfiprintf_r+0x1dc>)
 8014000:	f7ec f926 	bl	8000250 <memchr>
 8014004:	9b04      	ldr	r3, [sp, #16]
 8014006:	b9d0      	cbnz	r0, 801403e <_svfiprintf_r+0xda>
 8014008:	06d9      	lsls	r1, r3, #27
 801400a:	bf44      	itt	mi
 801400c:	2220      	movmi	r2, #32
 801400e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014012:	071a      	lsls	r2, r3, #28
 8014014:	bf44      	itt	mi
 8014016:	222b      	movmi	r2, #43	; 0x2b
 8014018:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801401c:	782a      	ldrb	r2, [r5, #0]
 801401e:	2a2a      	cmp	r2, #42	; 0x2a
 8014020:	d015      	beq.n	801404e <_svfiprintf_r+0xea>
 8014022:	9a07      	ldr	r2, [sp, #28]
 8014024:	462f      	mov	r7, r5
 8014026:	2000      	movs	r0, #0
 8014028:	250a      	movs	r5, #10
 801402a:	4639      	mov	r1, r7
 801402c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014030:	3b30      	subs	r3, #48	; 0x30
 8014032:	2b09      	cmp	r3, #9
 8014034:	d94d      	bls.n	80140d2 <_svfiprintf_r+0x16e>
 8014036:	b1b8      	cbz	r0, 8014068 <_svfiprintf_r+0x104>
 8014038:	e00f      	b.n	801405a <_svfiprintf_r+0xf6>
 801403a:	462f      	mov	r7, r5
 801403c:	e7b8      	b.n	8013fb0 <_svfiprintf_r+0x4c>
 801403e:	4a40      	ldr	r2, [pc, #256]	; (8014140 <_svfiprintf_r+0x1dc>)
 8014040:	1a80      	subs	r0, r0, r2
 8014042:	fa0b f000 	lsl.w	r0, fp, r0
 8014046:	4318      	orrs	r0, r3
 8014048:	9004      	str	r0, [sp, #16]
 801404a:	463d      	mov	r5, r7
 801404c:	e7d3      	b.n	8013ff6 <_svfiprintf_r+0x92>
 801404e:	9a03      	ldr	r2, [sp, #12]
 8014050:	1d11      	adds	r1, r2, #4
 8014052:	6812      	ldr	r2, [r2, #0]
 8014054:	9103      	str	r1, [sp, #12]
 8014056:	2a00      	cmp	r2, #0
 8014058:	db01      	blt.n	801405e <_svfiprintf_r+0xfa>
 801405a:	9207      	str	r2, [sp, #28]
 801405c:	e004      	b.n	8014068 <_svfiprintf_r+0x104>
 801405e:	4252      	negs	r2, r2
 8014060:	f043 0302 	orr.w	r3, r3, #2
 8014064:	9207      	str	r2, [sp, #28]
 8014066:	9304      	str	r3, [sp, #16]
 8014068:	783b      	ldrb	r3, [r7, #0]
 801406a:	2b2e      	cmp	r3, #46	; 0x2e
 801406c:	d10c      	bne.n	8014088 <_svfiprintf_r+0x124>
 801406e:	787b      	ldrb	r3, [r7, #1]
 8014070:	2b2a      	cmp	r3, #42	; 0x2a
 8014072:	d133      	bne.n	80140dc <_svfiprintf_r+0x178>
 8014074:	9b03      	ldr	r3, [sp, #12]
 8014076:	1d1a      	adds	r2, r3, #4
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	9203      	str	r2, [sp, #12]
 801407c:	2b00      	cmp	r3, #0
 801407e:	bfb8      	it	lt
 8014080:	f04f 33ff 	movlt.w	r3, #4294967295
 8014084:	3702      	adds	r7, #2
 8014086:	9305      	str	r3, [sp, #20]
 8014088:	4d2e      	ldr	r5, [pc, #184]	; (8014144 <_svfiprintf_r+0x1e0>)
 801408a:	7839      	ldrb	r1, [r7, #0]
 801408c:	2203      	movs	r2, #3
 801408e:	4628      	mov	r0, r5
 8014090:	f7ec f8de 	bl	8000250 <memchr>
 8014094:	b138      	cbz	r0, 80140a6 <_svfiprintf_r+0x142>
 8014096:	2340      	movs	r3, #64	; 0x40
 8014098:	1b40      	subs	r0, r0, r5
 801409a:	fa03 f000 	lsl.w	r0, r3, r0
 801409e:	9b04      	ldr	r3, [sp, #16]
 80140a0:	4303      	orrs	r3, r0
 80140a2:	3701      	adds	r7, #1
 80140a4:	9304      	str	r3, [sp, #16]
 80140a6:	7839      	ldrb	r1, [r7, #0]
 80140a8:	4827      	ldr	r0, [pc, #156]	; (8014148 <_svfiprintf_r+0x1e4>)
 80140aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140ae:	2206      	movs	r2, #6
 80140b0:	1c7e      	adds	r6, r7, #1
 80140b2:	f7ec f8cd 	bl	8000250 <memchr>
 80140b6:	2800      	cmp	r0, #0
 80140b8:	d038      	beq.n	801412c <_svfiprintf_r+0x1c8>
 80140ba:	4b24      	ldr	r3, [pc, #144]	; (801414c <_svfiprintf_r+0x1e8>)
 80140bc:	bb13      	cbnz	r3, 8014104 <_svfiprintf_r+0x1a0>
 80140be:	9b03      	ldr	r3, [sp, #12]
 80140c0:	3307      	adds	r3, #7
 80140c2:	f023 0307 	bic.w	r3, r3, #7
 80140c6:	3308      	adds	r3, #8
 80140c8:	9303      	str	r3, [sp, #12]
 80140ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140cc:	444b      	add	r3, r9
 80140ce:	9309      	str	r3, [sp, #36]	; 0x24
 80140d0:	e76d      	b.n	8013fae <_svfiprintf_r+0x4a>
 80140d2:	fb05 3202 	mla	r2, r5, r2, r3
 80140d6:	2001      	movs	r0, #1
 80140d8:	460f      	mov	r7, r1
 80140da:	e7a6      	b.n	801402a <_svfiprintf_r+0xc6>
 80140dc:	2300      	movs	r3, #0
 80140de:	3701      	adds	r7, #1
 80140e0:	9305      	str	r3, [sp, #20]
 80140e2:	4619      	mov	r1, r3
 80140e4:	250a      	movs	r5, #10
 80140e6:	4638      	mov	r0, r7
 80140e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140ec:	3a30      	subs	r2, #48	; 0x30
 80140ee:	2a09      	cmp	r2, #9
 80140f0:	d903      	bls.n	80140fa <_svfiprintf_r+0x196>
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d0c8      	beq.n	8014088 <_svfiprintf_r+0x124>
 80140f6:	9105      	str	r1, [sp, #20]
 80140f8:	e7c6      	b.n	8014088 <_svfiprintf_r+0x124>
 80140fa:	fb05 2101 	mla	r1, r5, r1, r2
 80140fe:	2301      	movs	r3, #1
 8014100:	4607      	mov	r7, r0
 8014102:	e7f0      	b.n	80140e6 <_svfiprintf_r+0x182>
 8014104:	ab03      	add	r3, sp, #12
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	4622      	mov	r2, r4
 801410a:	4b11      	ldr	r3, [pc, #68]	; (8014150 <_svfiprintf_r+0x1ec>)
 801410c:	a904      	add	r1, sp, #16
 801410e:	4640      	mov	r0, r8
 8014110:	f7fc f9b6 	bl	8010480 <_printf_float>
 8014114:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014118:	4681      	mov	r9, r0
 801411a:	d1d6      	bne.n	80140ca <_svfiprintf_r+0x166>
 801411c:	89a3      	ldrh	r3, [r4, #12]
 801411e:	065b      	lsls	r3, r3, #25
 8014120:	f53f af35 	bmi.w	8013f8e <_svfiprintf_r+0x2a>
 8014124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014126:	b01d      	add	sp, #116	; 0x74
 8014128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801412c:	ab03      	add	r3, sp, #12
 801412e:	9300      	str	r3, [sp, #0]
 8014130:	4622      	mov	r2, r4
 8014132:	4b07      	ldr	r3, [pc, #28]	; (8014150 <_svfiprintf_r+0x1ec>)
 8014134:	a904      	add	r1, sp, #16
 8014136:	4640      	mov	r0, r8
 8014138:	f7fc fc44 	bl	80109c4 <_printf_i>
 801413c:	e7ea      	b.n	8014114 <_svfiprintf_r+0x1b0>
 801413e:	bf00      	nop
 8014140:	0801528c 	.word	0x0801528c
 8014144:	08015292 	.word	0x08015292
 8014148:	08015296 	.word	0x08015296
 801414c:	08010481 	.word	0x08010481
 8014150:	08013eb1 	.word	0x08013eb1

08014154 <_sbrk_r>:
 8014154:	b538      	push	{r3, r4, r5, lr}
 8014156:	4c06      	ldr	r4, [pc, #24]	; (8014170 <_sbrk_r+0x1c>)
 8014158:	2300      	movs	r3, #0
 801415a:	4605      	mov	r5, r0
 801415c:	4608      	mov	r0, r1
 801415e:	6023      	str	r3, [r4, #0]
 8014160:	f7f3 f914 	bl	800738c <_sbrk>
 8014164:	1c43      	adds	r3, r0, #1
 8014166:	d102      	bne.n	801416e <_sbrk_r+0x1a>
 8014168:	6823      	ldr	r3, [r4, #0]
 801416a:	b103      	cbz	r3, 801416e <_sbrk_r+0x1a>
 801416c:	602b      	str	r3, [r5, #0]
 801416e:	bd38      	pop	{r3, r4, r5, pc}
 8014170:	20024154 	.word	0x20024154

08014174 <__sread>:
 8014174:	b510      	push	{r4, lr}
 8014176:	460c      	mov	r4, r1
 8014178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801417c:	f000 f8f4 	bl	8014368 <_read_r>
 8014180:	2800      	cmp	r0, #0
 8014182:	bfab      	itete	ge
 8014184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014186:	89a3      	ldrhlt	r3, [r4, #12]
 8014188:	181b      	addge	r3, r3, r0
 801418a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801418e:	bfac      	ite	ge
 8014190:	6563      	strge	r3, [r4, #84]	; 0x54
 8014192:	81a3      	strhlt	r3, [r4, #12]
 8014194:	bd10      	pop	{r4, pc}

08014196 <__swrite>:
 8014196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801419a:	461f      	mov	r7, r3
 801419c:	898b      	ldrh	r3, [r1, #12]
 801419e:	05db      	lsls	r3, r3, #23
 80141a0:	4605      	mov	r5, r0
 80141a2:	460c      	mov	r4, r1
 80141a4:	4616      	mov	r6, r2
 80141a6:	d505      	bpl.n	80141b4 <__swrite+0x1e>
 80141a8:	2302      	movs	r3, #2
 80141aa:	2200      	movs	r2, #0
 80141ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141b0:	f000 f886 	bl	80142c0 <_lseek_r>
 80141b4:	89a3      	ldrh	r3, [r4, #12]
 80141b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141be:	81a3      	strh	r3, [r4, #12]
 80141c0:	4632      	mov	r2, r6
 80141c2:	463b      	mov	r3, r7
 80141c4:	4628      	mov	r0, r5
 80141c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141ca:	f000 b835 	b.w	8014238 <_write_r>

080141ce <__sseek>:
 80141ce:	b510      	push	{r4, lr}
 80141d0:	460c      	mov	r4, r1
 80141d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141d6:	f000 f873 	bl	80142c0 <_lseek_r>
 80141da:	1c43      	adds	r3, r0, #1
 80141dc:	89a3      	ldrh	r3, [r4, #12]
 80141de:	bf15      	itete	ne
 80141e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80141e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141ea:	81a3      	strheq	r3, [r4, #12]
 80141ec:	bf18      	it	ne
 80141ee:	81a3      	strhne	r3, [r4, #12]
 80141f0:	bd10      	pop	{r4, pc}

080141f2 <__sclose>:
 80141f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141f6:	f000 b831 	b.w	801425c <_close_r>

080141fa <strncmp>:
 80141fa:	b510      	push	{r4, lr}
 80141fc:	b16a      	cbz	r2, 801421a <strncmp+0x20>
 80141fe:	3901      	subs	r1, #1
 8014200:	1884      	adds	r4, r0, r2
 8014202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014206:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801420a:	4293      	cmp	r3, r2
 801420c:	d103      	bne.n	8014216 <strncmp+0x1c>
 801420e:	42a0      	cmp	r0, r4
 8014210:	d001      	beq.n	8014216 <strncmp+0x1c>
 8014212:	2b00      	cmp	r3, #0
 8014214:	d1f5      	bne.n	8014202 <strncmp+0x8>
 8014216:	1a98      	subs	r0, r3, r2
 8014218:	bd10      	pop	{r4, pc}
 801421a:	4610      	mov	r0, r2
 801421c:	e7fc      	b.n	8014218 <strncmp+0x1e>

0801421e <__ascii_wctomb>:
 801421e:	b149      	cbz	r1, 8014234 <__ascii_wctomb+0x16>
 8014220:	2aff      	cmp	r2, #255	; 0xff
 8014222:	bf85      	ittet	hi
 8014224:	238a      	movhi	r3, #138	; 0x8a
 8014226:	6003      	strhi	r3, [r0, #0]
 8014228:	700a      	strbls	r2, [r1, #0]
 801422a:	f04f 30ff 	movhi.w	r0, #4294967295
 801422e:	bf98      	it	ls
 8014230:	2001      	movls	r0, #1
 8014232:	4770      	bx	lr
 8014234:	4608      	mov	r0, r1
 8014236:	4770      	bx	lr

08014238 <_write_r>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	4c07      	ldr	r4, [pc, #28]	; (8014258 <_write_r+0x20>)
 801423c:	4605      	mov	r5, r0
 801423e:	4608      	mov	r0, r1
 8014240:	4611      	mov	r1, r2
 8014242:	2200      	movs	r2, #0
 8014244:	6022      	str	r2, [r4, #0]
 8014246:	461a      	mov	r2, r3
 8014248:	f7f3 f84f 	bl	80072ea <_write>
 801424c:	1c43      	adds	r3, r0, #1
 801424e:	d102      	bne.n	8014256 <_write_r+0x1e>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	b103      	cbz	r3, 8014256 <_write_r+0x1e>
 8014254:	602b      	str	r3, [r5, #0]
 8014256:	bd38      	pop	{r3, r4, r5, pc}
 8014258:	20024154 	.word	0x20024154

0801425c <_close_r>:
 801425c:	b538      	push	{r3, r4, r5, lr}
 801425e:	4c06      	ldr	r4, [pc, #24]	; (8014278 <_close_r+0x1c>)
 8014260:	2300      	movs	r3, #0
 8014262:	4605      	mov	r5, r0
 8014264:	4608      	mov	r0, r1
 8014266:	6023      	str	r3, [r4, #0]
 8014268:	f7f3 f85b 	bl	8007322 <_close>
 801426c:	1c43      	adds	r3, r0, #1
 801426e:	d102      	bne.n	8014276 <_close_r+0x1a>
 8014270:	6823      	ldr	r3, [r4, #0]
 8014272:	b103      	cbz	r3, 8014276 <_close_r+0x1a>
 8014274:	602b      	str	r3, [r5, #0]
 8014276:	bd38      	pop	{r3, r4, r5, pc}
 8014278:	20024154 	.word	0x20024154

0801427c <_fstat_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4c07      	ldr	r4, [pc, #28]	; (801429c <_fstat_r+0x20>)
 8014280:	2300      	movs	r3, #0
 8014282:	4605      	mov	r5, r0
 8014284:	4608      	mov	r0, r1
 8014286:	4611      	mov	r1, r2
 8014288:	6023      	str	r3, [r4, #0]
 801428a:	f7f3 f856 	bl	800733a <_fstat>
 801428e:	1c43      	adds	r3, r0, #1
 8014290:	d102      	bne.n	8014298 <_fstat_r+0x1c>
 8014292:	6823      	ldr	r3, [r4, #0]
 8014294:	b103      	cbz	r3, 8014298 <_fstat_r+0x1c>
 8014296:	602b      	str	r3, [r5, #0]
 8014298:	bd38      	pop	{r3, r4, r5, pc}
 801429a:	bf00      	nop
 801429c:	20024154 	.word	0x20024154

080142a0 <_isatty_r>:
 80142a0:	b538      	push	{r3, r4, r5, lr}
 80142a2:	4c06      	ldr	r4, [pc, #24]	; (80142bc <_isatty_r+0x1c>)
 80142a4:	2300      	movs	r3, #0
 80142a6:	4605      	mov	r5, r0
 80142a8:	4608      	mov	r0, r1
 80142aa:	6023      	str	r3, [r4, #0]
 80142ac:	f7f3 f855 	bl	800735a <_isatty>
 80142b0:	1c43      	adds	r3, r0, #1
 80142b2:	d102      	bne.n	80142ba <_isatty_r+0x1a>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	b103      	cbz	r3, 80142ba <_isatty_r+0x1a>
 80142b8:	602b      	str	r3, [r5, #0]
 80142ba:	bd38      	pop	{r3, r4, r5, pc}
 80142bc:	20024154 	.word	0x20024154

080142c0 <_lseek_r>:
 80142c0:	b538      	push	{r3, r4, r5, lr}
 80142c2:	4c07      	ldr	r4, [pc, #28]	; (80142e0 <_lseek_r+0x20>)
 80142c4:	4605      	mov	r5, r0
 80142c6:	4608      	mov	r0, r1
 80142c8:	4611      	mov	r1, r2
 80142ca:	2200      	movs	r2, #0
 80142cc:	6022      	str	r2, [r4, #0]
 80142ce:	461a      	mov	r2, r3
 80142d0:	f7f3 f84e 	bl	8007370 <_lseek>
 80142d4:	1c43      	adds	r3, r0, #1
 80142d6:	d102      	bne.n	80142de <_lseek_r+0x1e>
 80142d8:	6823      	ldr	r3, [r4, #0]
 80142da:	b103      	cbz	r3, 80142de <_lseek_r+0x1e>
 80142dc:	602b      	str	r3, [r5, #0]
 80142de:	bd38      	pop	{r3, r4, r5, pc}
 80142e0:	20024154 	.word	0x20024154

080142e4 <memmove>:
 80142e4:	4288      	cmp	r0, r1
 80142e6:	b510      	push	{r4, lr}
 80142e8:	eb01 0302 	add.w	r3, r1, r2
 80142ec:	d807      	bhi.n	80142fe <memmove+0x1a>
 80142ee:	1e42      	subs	r2, r0, #1
 80142f0:	4299      	cmp	r1, r3
 80142f2:	d00a      	beq.n	801430a <memmove+0x26>
 80142f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80142fc:	e7f8      	b.n	80142f0 <memmove+0xc>
 80142fe:	4283      	cmp	r3, r0
 8014300:	d9f5      	bls.n	80142ee <memmove+0xa>
 8014302:	1881      	adds	r1, r0, r2
 8014304:	1ad2      	subs	r2, r2, r3
 8014306:	42d3      	cmn	r3, r2
 8014308:	d100      	bne.n	801430c <memmove+0x28>
 801430a:	bd10      	pop	{r4, pc}
 801430c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014310:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014314:	e7f7      	b.n	8014306 <memmove+0x22>

08014316 <__malloc_lock>:
 8014316:	4770      	bx	lr

08014318 <__malloc_unlock>:
 8014318:	4770      	bx	lr

0801431a <_realloc_r>:
 801431a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431c:	4607      	mov	r7, r0
 801431e:	4614      	mov	r4, r2
 8014320:	460e      	mov	r6, r1
 8014322:	b921      	cbnz	r1, 801432e <_realloc_r+0x14>
 8014324:	4611      	mov	r1, r2
 8014326:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801432a:	f7ff bd67 	b.w	8013dfc <_malloc_r>
 801432e:	b922      	cbnz	r2, 801433a <_realloc_r+0x20>
 8014330:	f7ff fd16 	bl	8013d60 <_free_r>
 8014334:	4625      	mov	r5, r4
 8014336:	4628      	mov	r0, r5
 8014338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801433a:	f000 f827 	bl	801438c <_malloc_usable_size_r>
 801433e:	42a0      	cmp	r0, r4
 8014340:	d20f      	bcs.n	8014362 <_realloc_r+0x48>
 8014342:	4621      	mov	r1, r4
 8014344:	4638      	mov	r0, r7
 8014346:	f7ff fd59 	bl	8013dfc <_malloc_r>
 801434a:	4605      	mov	r5, r0
 801434c:	2800      	cmp	r0, #0
 801434e:	d0f2      	beq.n	8014336 <_realloc_r+0x1c>
 8014350:	4631      	mov	r1, r6
 8014352:	4622      	mov	r2, r4
 8014354:	f7fb fffc 	bl	8010350 <memcpy>
 8014358:	4631      	mov	r1, r6
 801435a:	4638      	mov	r0, r7
 801435c:	f7ff fd00 	bl	8013d60 <_free_r>
 8014360:	e7e9      	b.n	8014336 <_realloc_r+0x1c>
 8014362:	4635      	mov	r5, r6
 8014364:	e7e7      	b.n	8014336 <_realloc_r+0x1c>
	...

08014368 <_read_r>:
 8014368:	b538      	push	{r3, r4, r5, lr}
 801436a:	4c07      	ldr	r4, [pc, #28]	; (8014388 <_read_r+0x20>)
 801436c:	4605      	mov	r5, r0
 801436e:	4608      	mov	r0, r1
 8014370:	4611      	mov	r1, r2
 8014372:	2200      	movs	r2, #0
 8014374:	6022      	str	r2, [r4, #0]
 8014376:	461a      	mov	r2, r3
 8014378:	f7f2 ff9a 	bl	80072b0 <_read>
 801437c:	1c43      	adds	r3, r0, #1
 801437e:	d102      	bne.n	8014386 <_read_r+0x1e>
 8014380:	6823      	ldr	r3, [r4, #0]
 8014382:	b103      	cbz	r3, 8014386 <_read_r+0x1e>
 8014384:	602b      	str	r3, [r5, #0]
 8014386:	bd38      	pop	{r3, r4, r5, pc}
 8014388:	20024154 	.word	0x20024154

0801438c <_malloc_usable_size_r>:
 801438c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014390:	1f18      	subs	r0, r3, #4
 8014392:	2b00      	cmp	r3, #0
 8014394:	bfbc      	itt	lt
 8014396:	580b      	ldrlt	r3, [r1, r0]
 8014398:	18c0      	addlt	r0, r0, r3
 801439a:	4770      	bx	lr

0801439c <_init>:
 801439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439e:	bf00      	nop
 80143a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143a2:	bc08      	pop	{r3}
 80143a4:	469e      	mov	lr, r3
 80143a6:	4770      	bx	lr

080143a8 <_fini>:
 80143a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143aa:	bf00      	nop
 80143ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ae:	bc08      	pop	{r3}
 80143b0:	469e      	mov	lr, r3
 80143b2:	4770      	bx	lr
