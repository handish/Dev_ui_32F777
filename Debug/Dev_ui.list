
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a19c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000274c  0801a3a0  0801a3a0  0002a3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801caec  0801caec  00030428  2**0
                  CONTENTS
  4 .ARM          00000008  0801caec  0801caec  0002caec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801caf4  0801caf4  00030428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801caf4  0801caf4  0002caf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801caf8  0801caf8  0002caf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  0801cafc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030e5c  20000428  0801cf24  00030428  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20031284  0801cf24  00031284  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a8a5  00000000  00000000  00030456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006434  00000000  00000000  0006acfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024c0  00000000  00000000  00071130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002278  00000000  00000000  000735f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000080b5  00000000  00000000  00075868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d3bf  00000000  00000000  0007d91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e870  00000000  00000000  000aacdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c954c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b084  00000000  00000000  001c95a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000428 	.word	0x20000428
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a384 	.word	0x0801a384

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000042c 	.word	0x2000042c
 800023c:	0801a384 	.word	0x0801a384

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	fa93 f3a3 	rbit	r3, r3
 80009e4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	0e1b      	lsrs	r3, r3, #24
 80009ea:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <SMLCD_InitGPIO+0x34>)
 8000a02:	f008 fdd7 	bl	80095b4 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <SMLCD_InitGPIO+0x38>)
 8000a0c:	f008 fdd2 	bl	80095b4 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <SMLCD_InitGPIO+0x34>)
 8000a16:	f008 fdcd 	bl	80095b4 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <SMLCD_InitGPIO+0x3c>)
 8000a22:	f008 fdc7 	bl	80095b4 <HAL_GPIO_WritePin>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022400 	.word	0x40022400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40021c00 	.word	0x40021c00

08000a38 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000a38:	b084      	sub	sp, #16
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	f107 0c08 	add.w	ip, r7, #8
 8000a42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SMLCD_Init+0x38>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <SMLCD_Init+0x3c>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2264      	movs	r2, #100	; 0x64
 8000a56:	4619      	mov	r1, r3
 8000a58:	f015 f8ac 	bl	8015bb4 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 f9c3 	bl	8000de8 <SMLCD_Orientation>
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a6a:	b004      	add	sp, #16
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20028b60 	.word	0x20028b60
 8000a74:	20028b68 	.word	0x20028b68

08000a78 <SMLCD_Clear>:

// Clear display memory (clear screen)
HAL_StatusTypeDef SMLCD_Clear(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	HAL_StatusTypeDef Status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]
	SMLCD_SCS_H;
 8000a82:	2201      	movs	r2, #1
 8000a84:	2110      	movs	r1, #16
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <SMLCD_Clear+0x40>)
 8000a88:	f008 fd94 	bl	80095b4 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 8000a90:	2300      	movs	r3, #0
 8000a92:	717b      	strb	r3, [r7, #5]
	Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 8000a94:	1d39      	adds	r1, r7, #4
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	2202      	movs	r2, #2
 8000a9a:	4808      	ldr	r0, [pc, #32]	; (8000abc <SMLCD_Clear+0x44>)
 8000a9c:	f00b f8d8 	bl	800bc50 <HAL_SPI_Transmit>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <SMLCD_Clear+0x40>)
 8000aaa:	f008 fd83 	bl	80095b4 <HAL_GPIO_WritePin>
	return Status;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	20028b68 	.word	0x20028b68

08000ac0 <SMLCD_Flush>:
	return HAL_OK;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
HAL_StatusTypeDef SMLCD_Flush(void) {
 8000ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac4:	b08c      	sub	sp, #48	; 0x30
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	466b      	mov	r3, sp
 8000aca:	4698      	mov	r8, r3
	HAL_StatusTypeDef Status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	int commandByte=1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
	int lineByte=1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
	int lineAmount=SCR_H;
 8000ada:	23f0      	movs	r3, #240	; 0xf0
 8000adc:	61fb      	str	r3, [r7, #28]
	int nopBytesPerLine= 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
	int dataBytesPerLine=SCR_W/8;
 8000ae2:	2332      	movs	r3, #50	; 0x32
 8000ae4:	617b      	str	r3, [r7, #20]
	int finalNOPByte=1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 8000aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	441a      	add	r2, r3
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	441a      	add	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	441a      	add	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	18d6      	adds	r6, r2, r3
 8000afc:	1e73      	subs	r3, r6, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4633      	mov	r3, r6
 8000b02:	4618      	mov	r0, r3
 8000b04:	f04f 0100 	mov.w	r1, #0
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	00cb      	lsls	r3, r1, #3
 8000b12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b16:	00c2      	lsls	r2, r0, #3
 8000b18:	4633      	mov	r3, r6
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f04f 0100 	mov.w	r1, #0
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	00cb      	lsls	r3, r1, #3
 8000b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b2e:	00c2      	lsls	r2, r0, #3
 8000b30:	4633      	mov	r3, r6
 8000b32:	3307      	adds	r3, #7
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3c:	466b      	mov	r3, sp
 8000b3e:	3300      	adds	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	4632      	mov	r2, r6
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f015 f841 	bl	8015bd0 <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000b4e:	4da1      	ldr	r5, [pc, #644]	; (8000dd4 <SMLCD_Flush+0x314>)
	register uint8_t line = 0;
 8000b50:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
	int x=0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2288      	movs	r2, #136	; 0x88
 8000b5e:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000b60:	4b9d      	ldr	r3, [pc, #628]	; (8000dd8 <SMLCD_Flush+0x318>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	f000 809c 	beq.w	8000ca2 <SMLCD_Flush+0x1e2>
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	f300 80e8 	bgt.w	8000d40 <SMLCD_Flush+0x280>
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d002      	beq.n	8000b7a <SMLCD_Flush+0xba>
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d041      	beq.n	8000bfc <SMLCD_Flush+0x13c>
 8000b78:	e0e2      	b.n	8000d40 <SMLCD_Flush+0x280>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000b7a:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000b7c:	e039      	b.n	8000bf2 <SMLCD_Flush+0x132>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b92:	e009      	b.n	8000ba8 <SMLCD_Flush+0xe8>
					transmitBuffer[x]=*ptr;
 8000b94:	7829      	ldrb	r1, [r5, #0]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	4413      	add	r3, r2
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
					ptr++;
 8000ba0:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	2b33      	cmp	r3, #51	; 0x33
 8000bac:	ddf2      	ble.n	8000b94 <SMLCD_Flush+0xd4>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	4886      	ldr	r0, [pc, #536]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000bc4:	f008 fcf6 	bl	80095b4 <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	b2b2      	uxth	r2, r6
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	4884      	ldr	r0, [pc, #528]	; (8000de0 <SMLCD_Flush+0x320>)
 8000bd0:	f00b f83e 	bl	800bc50 <HAL_SPI_Transmit>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	487f      	ldr	r0, [pc, #508]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000be0:	f008 fce8 	bl	80095b4 <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 8000be4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <SMLCD_Flush+0x132>
				{
					return Status;
 8000bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000bf0:	e0e9      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (--line > 0) {
 8000bf2:	1e63      	subs	r3, r4, #1
 8000bf4:	b2dc      	uxtb	r4, r3
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d1c1      	bne.n	8000b7e <SMLCD_Flush+0xbe>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 8000bfa:	e0e3      	b.n	8000dc4 <SMLCD_Flush+0x304>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 8000bfc:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000bfe:	4d79      	ldr	r5, [pc, #484]	; (8000de4 <SMLCD_Flush+0x324>)
			while (--line > 0) {
 8000c00:	e04a      	b.n	8000c98 <SMLCD_Flush+0x1d8>

				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff fee4 	bl	80009d0 <__reverse8bit>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4873      	ldr	r0, [pc, #460]	; (8000de0 <SMLCD_Flush+0x320>)
 8000c12:	f00b f81d 	bl	800bc50 <HAL_SPI_Transmit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <SMLCD_Flush+0x174>
				{
					SMLCD_SCS_L;
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	486c      	ldr	r0, [pc, #432]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000c2a:	f008 fcc3 	bl	80095b4 <HAL_GPIO_WritePin>
					return Status;
 8000c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c32:	e0c8      	b.n	8000dc6 <SMLCD_Flush+0x306>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000c34:	2600      	movs	r6, #0
 8000c36:	e018      	b.n	8000c6a <SMLCD_Flush+0x1aa>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000c38:	462b      	mov	r3, r5
 8000c3a:	1e5d      	subs	r5, r3, #1
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2201      	movs	r2, #1
 8000c44:	4866      	ldr	r0, [pc, #408]	; (8000de0 <SMLCD_Flush+0x320>)
 8000c46:	f00b f803 	bl	800bc50 <HAL_SPI_Transmit>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 8000c50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d007      	beq.n	8000c68 <SMLCD_Flush+0x1a8>
					{
						SMLCD_SCS_L;
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	485f      	ldr	r0, [pc, #380]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000c5e:	f008 fca9 	bl	80095b4 <HAL_GPIO_WritePin>
						return Status;
 8000c62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c66:	e0ae      	b.n	8000dc6 <SMLCD_Flush+0x306>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000c68:	3601      	adds	r6, #1
 8000c6a:	2e31      	cmp	r6, #49	; 0x31
 8000c6c:	d9e4      	bls.n	8000c38 <SMLCD_Flush+0x178>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2201      	movs	r2, #1
 8000c72:	2100      	movs	r1, #0
 8000c74:	485a      	ldr	r0, [pc, #360]	; (8000de0 <SMLCD_Flush+0x320>)
 8000c76:	f00a ffeb 	bl	800bc50 <HAL_SPI_Transmit>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <SMLCD_Flush+0x1d8>
				{
					SMLCD_SCS_L;
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4853      	ldr	r0, [pc, #332]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000c8e:	f008 fc91 	bl	80095b4 <HAL_GPIO_WritePin>
					return Status;
 8000c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c96:	e096      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (--line > 0) {
 8000c98:	1e63      	subs	r3, r4, #1
 8000c9a:	b2dc      	uxtb	r4, r3
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d1b0      	bne.n	8000c02 <SMLCD_Flush+0x142>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 8000ca0:	e090      	b.n	8000dc4 <SMLCD_Flush+0x304>
		case LCD_ORIENT_180:
			line = 0;
 8000ca2:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000ca4:	4d4f      	ldr	r5, [pc, #316]	; (8000de4 <SMLCD_Flush+0x324>)
			while (line++ < SCR_H + 1) {
 8000ca6:	e045      	b.n	8000d34 <SMLCD_Flush+0x274>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fe91 	bl	80009d0 <__reverse8bit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	484a      	ldr	r0, [pc, #296]	; (8000de0 <SMLCD_Flush+0x320>)
 8000cb8:	f00a ffca 	bl	800bc50 <HAL_SPI_Transmit>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <SMLCD_Flush+0x21a>
				{
					SMLCD_SCS_L;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4843      	ldr	r0, [pc, #268]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000cd0:	f008 fc70 	bl	80095b4 <HAL_GPIO_WritePin>
					return Status;
 8000cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cd8:	e075      	b.n	8000dc6 <SMLCD_Flush+0x306>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e013      	b.n	8000d06 <SMLCD_Flush+0x246>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000cde:	462b      	mov	r3, r5
 8000ce0:	1e5d      	subs	r5, r3, #1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	2201      	movs	r2, #1
 8000cea:	483d      	ldr	r0, [pc, #244]	; (8000de0 <SMLCD_Flush+0x320>)
 8000cec:	f00a ffb0 	bl	800bc50 <HAL_SPI_Transmit>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 8000cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SMLCD_Flush+0x244>
					{
						return Status;
 8000cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d02:	e060      	b.n	8000dc6 <SMLCD_Flush+0x306>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000d04:	3601      	adds	r6, #1
 8000d06:	2e31      	cmp	r6, #49	; 0x31
 8000d08:	d9e9      	bls.n	8000cde <SMLCD_Flush+0x21e>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4833      	ldr	r0, [pc, #204]	; (8000de0 <SMLCD_Flush+0x320>)
 8000d12:	f00a ff9d 	bl	800bc50 <HAL_SPI_Transmit>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <SMLCD_Flush+0x274>
				{
					SMLCD_SCS_L;
 8000d24:	2200      	movs	r2, #0
 8000d26:	2110      	movs	r1, #16
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000d2a:	f008 fc43 	bl	80095b4 <HAL_GPIO_WritePin>
					return Status;
 8000d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d32:	e048      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (line++ < SCR_H + 1) {
 8000d34:	4623      	mov	r3, r4
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	b2d4      	uxtb	r4, r2
 8000d3a:	2bf0      	cmp	r3, #240	; 0xf0
 8000d3c:	d9b4      	bls.n	8000ca8 <SMLCD_Flush+0x1e8>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 8000d3e:	e041      	b.n	8000dc4 <SMLCD_Flush+0x304>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 8000d40:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 8000d42:	e039      	b.n	8000db8 <SMLCD_Flush+0x2f8>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2288      	movs	r2, #136	; 0x88
 8000d48:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4622      	mov	r2, r4
 8000d52:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000d54:	2302      	movs	r3, #2
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d58:	e009      	b.n	8000d6e <SMLCD_Flush+0x2ae>
					transmitBuffer[x]=*ptr;
 8000d5a:	7829      	ldrb	r1, [r5, #0]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	4413      	add	r3, r2
 8000d62:	460a      	mov	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
					ptr++;
 8000d66:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	2b33      	cmp	r3, #51	; 0x33
 8000d72:	ddf2      	ble.n	8000d5a <SMLCD_Flush+0x29a>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000d8a:	f008 fc13 	bl	80095b4 <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	b2b2      	uxth	r2, r6
 8000d92:	2364      	movs	r3, #100	; 0x64
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <SMLCD_Flush+0x320>)
 8000d96:	f00a ff5b 	bl	800bc50 <HAL_SPI_Transmit>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 8000da0:	2200      	movs	r2, #0
 8000da2:	2110      	movs	r1, #16
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <SMLCD_Flush+0x31c>)
 8000da6:	f008 fc05 	bl	80095b4 <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 8000daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <SMLCD_Flush+0x2f8>
				{
					return Status;
 8000db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000db6:	e006      	b.n	8000dc6 <SMLCD_Flush+0x306>
			while (line++ < SCR_H + 1) {
 8000db8:	4623      	mov	r3, r4
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	b2d4      	uxtb	r4, r2
 8000dbe:	2bf0      	cmp	r3, #240	; 0xf0
 8000dc0:	d9c0      	bls.n	8000d44 <SMLCD_Flush+0x284>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 8000dc2:	bf00      	nop
	}
	return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000444 	.word	0x20000444
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	20028b68 	.word	0x20028b68
 8000de4:	20003323 	.word	0x20003323

08000de8 <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <SMLCD_Orientation+0x44>)
 8000dfe:	22f0      	movs	r2, #240	; 0xf0
 8000e00:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <SMLCD_Orientation+0x48>)
 8000e04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e08:	801a      	strh	r2, [r3, #0]
 8000e0a:	e006      	b.n	8000e1a <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <SMLCD_Orientation+0x44>)
 8000e0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e12:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SMLCD_Orientation+0x48>)
 8000e16:	22f0      	movs	r2, #240	; 0xf0
 8000e18:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <SMLCD_Orientation+0x4c>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	7013      	strb	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20028b62 	.word	0x20028b62
 8000e30:	20028b64 	.word	0x20028b64
 8000e34:	20000000 	.word	0x20000000

08000e38 <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000e3c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <LCD_Clear+0x18>)
 8000e46:	f014 fec3 	bl	8015bd0 <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000444 	.word	0x20000444

08000e54 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000e54:	b4b0      	push	{r4, r5, r7}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000e5c:	4929      	ldr	r1, [pc, #164]	; (8000f04 <LCD_Pixel+0xb0>)
 8000e5e:	7809      	ldrb	r1, [r1, #0]
 8000e60:	2908      	cmp	r1, #8
 8000e62:	d006      	beq.n	8000e72 <LCD_Pixel+0x1e>
 8000e64:	2908      	cmp	r1, #8
 8000e66:	dc15      	bgt.n	8000e94 <LCD_Pixel+0x40>
 8000e68:	2902      	cmp	r1, #2
 8000e6a:	d00f      	beq.n	8000e8c <LCD_Pixel+0x38>
 8000e6c:	2904      	cmp	r1, #4
 8000e6e:	d005      	beq.n	8000e7c <LCD_Pixel+0x28>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000e70:	e010      	b.n	8000e94 <LCD_Pixel+0x40>
			X = SCR_W - 1 - X;
 8000e72:	f240 118f 	movw	r1, #399	; 0x18f
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	460b      	mov	r3, r1
			break;
 8000e7a:	e00c      	b.n	8000e96 <LCD_Pixel+0x42>
			SWAP_VARS(X, Y);
 8000e7c:	4053      	eors	r3, r2
 8000e7e:	405a      	eors	r2, r3
 8000e80:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 8000e82:	f240 118f 	movw	r1, #399	; 0x18f
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	460b      	mov	r3, r1
			break;
 8000e8a:	e004      	b.n	8000e96 <LCD_Pixel+0x42>
			SWAP_VARS(X, Y);
 8000e8c:	4053      	eors	r3, r2
 8000e8e:	405a      	eors	r2, r3
 8000e90:	4053      	eors	r3, r2
			break;
 8000e92:	e000      	b.n	8000e96 <LCD_Pixel+0x42>
			break;
 8000e94:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 8000e96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e9a:	fb01 f202 	mul.w	r2, r1, r2
 8000e9e:	441a      	add	r2, r3
 8000ea0:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 8000ea2:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000ea6:	4294      	cmp	r4, r2
 8000ea8:	d828      	bhi.n	8000efc <LCD_Pixel+0xa8>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <LCD_Pixel+0xb4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d002      	beq.n	8000ec0 <LCD_Pixel+0x6c>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d00a      	beq.n	8000ed4 <LCD_Pixel+0x80>
 8000ebe:	e013      	b.n	8000ee8 <LCD_Pixel+0x94>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ec2:	5d1a      	ldrb	r2, [r3, r4]
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <LCD_Pixel+0xbc>)
 8000ec8:	5c5b      	ldrb	r3, [r3, r1]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ed0:	551a      	strb	r2, [r3, r4]
			break;
 8000ed2:	e014      	b.n	8000efe <LCD_Pixel+0xaa>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ed6:	5d1a      	ldrb	r2, [r3, r4]
 8000ed8:	4629      	mov	r1, r5
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <LCD_Pixel+0xbc>)
 8000edc:	5c5b      	ldrb	r3, [r3, r1]
 8000ede:	4053      	eors	r3, r2
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ee4:	551a      	strb	r2, [r3, r4]
			break;
 8000ee6:	e00a      	b.n	8000efe <LCD_Pixel+0xaa>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <LCD_Pixel+0xb8>)
 8000eea:	5d1a      	ldrb	r2, [r3, r4]
 8000eec:	4629      	mov	r1, r5
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LCD_Pixel+0xc0>)
 8000ef0:	5c5b      	ldrb	r3, [r3, r1]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <LCD_Pixel+0xb8>)
 8000ef8:	551a      	strb	r2, [r3, r4]
			break;
 8000efa:	e000      	b.n	8000efe <LCD_Pixel+0xaa>
		return;
 8000efc:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bcb0      	pop	{r4, r5, r7}
 8000f02:	4770      	bx	lr
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20028b60 	.word	0x20028b60
 8000f0c:	20000444 	.word	0x20000444
 8000f10:	0801b128 	.word	0x0801b128
 8000f14:	0801b120 	.word	0x0801b120

08000f18 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000f18:	b4b0      	push	{r4, r5, r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	460b      	mov	r3, r1
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f30:	fb02 f203 	mul.w	r2, r2, r3
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	4413      	add	r3, r2
 8000f38:	10db      	asrs	r3, r3, #3
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <LCD_VLineInt+0xa0>)
 8000f3c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <LCD_VLineInt+0xa4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d002      	beq.n	8000f54 <LCD_VLineInt+0x3c>
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d00f      	beq.n	8000f72 <LCD_VLineInt+0x5a>
 8000f52:	e01d      	b.n	8000f90 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <LCD_VLineInt+0xa8>)
 8000f58:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000f5a:	e004      	b.n	8000f66 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000f5c:	7823      	ldrb	r3, [r4, #0]
 8000f5e:	432b      	orrs	r3, r5
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000f64:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	807a      	strh	r2, [r7, #2]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f5      	bne.n	8000f5c <LCD_VLineInt+0x44>
			}
			break;
 8000f70:	e01d      	b.n	8000fae <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <LCD_VLineInt+0xa8>)
 8000f76:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000f78:	e004      	b.n	8000f84 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000f7a:	7823      	ldrb	r3, [r4, #0]
 8000f7c:	406b      	eors	r3, r5
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000f82:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	807a      	strh	r2, [r7, #2]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <LCD_VLineInt+0x62>
			}
			break;
 8000f8e:	e00e      	b.n	8000fae <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <LCD_VLineInt+0xac>)
 8000f94:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000f96:	e004      	b.n	8000fa2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000f98:	7823      	ldrb	r3, [r4, #0]
 8000f9a:	402b      	ands	r3, r5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000fa0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	807a      	strh	r2, [r7, #2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f5      	bne.n	8000f98 <LCD_VLineInt+0x80>
			}
			break;
 8000fac:	bf00      	nop
	}
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bcb0      	pop	{r4, r5, r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000444 	.word	0x20000444
 8000fbc:	20028b60 	.word	0x20028b60
 8000fc0:	0801b128 	.word	0x0801b128
 8000fc4:	0801b120 	.word	0x0801b120

08000fc8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000fc8:	b4f0      	push	{r4, r5, r6, r7}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	80bb      	strh	r3, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fe0:	fb02 f203 	mul.w	r2, r2, r3
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	10db      	asrs	r3, r3, #3
 8000fea:	4a66      	ldr	r2, [pc, #408]	; (8001184 <LCD_HLineInt+0x1bc>)
 8000fec:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d037      	beq.n	800106c <LCD_HLineInt+0xa4>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000ffc:	f1c6 0308 	rsb	r3, r6, #8
 8001000:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8001002:	4632      	mov	r2, r6
 8001004:	4b60      	ldr	r3, [pc, #384]	; (8001188 <LCD_HLineInt+0x1c0>)
 8001006:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8001008:	b2b3      	uxth	r3, r6
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	429a      	cmp	r2, r3
 800100e:	d206      	bcs.n	800101e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8001010:	4632      	mov	r2, r6
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4a5d      	ldr	r2, [pc, #372]	; (800118c <LCD_HLineInt+0x1c4>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	432b      	orrs	r3, r5
 800101c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <LCD_HLineInt+0x1c8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d002      	beq.n	800102c <LCD_HLineInt+0x64>
 8001026:	2b02      	cmp	r3, #2
 8001028:	d00a      	beq.n	8001040 <LCD_HLineInt+0x78>
 800102a:	e010      	b.n	800104e <LCD_HLineInt+0x86>
			case LCD_PRES:
				*ptr |= ~mask;
 800102c:	7823      	ldrb	r3, [r4, #0]
 800102e:	b25a      	sxtb	r2, r3
 8001030:	b26b      	sxtb	r3, r5
 8001032:	43db      	mvns	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	7023      	strb	r3, [r4, #0]
				break;
 800103e:	e00b      	b.n	8001058 <LCD_HLineInt+0x90>
			case LCD_PINV:
				*ptr ^= ~mask;
 8001040:	7823      	ldrb	r3, [r4, #0]
 8001042:	406b      	eors	r3, r5
 8001044:	b2db      	uxtb	r3, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	7023      	strb	r3, [r4, #0]
				break;
 800104c:	e004      	b.n	8001058 <LCD_HLineInt+0x90>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 800104e:	7823      	ldrb	r3, [r4, #0]
 8001050:	402b      	ands	r3, r5
 8001052:	b2db      	uxtb	r3, r3
 8001054:	7023      	strb	r3, [r4, #0]
				break;
 8001056:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8001058:	b2b3      	uxth	r3, r6
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	f0c0 808b 	bcc.w	8001178 <LCD_HLineInt+0x1b0>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8001062:	3401      	adds	r4, #1
		W -= modulo;
 8001064:	b2b3      	uxth	r3, r6
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	2b20      	cmp	r3, #32
 8001070:	d92c      	bls.n	80010cc <LCD_HLineInt+0x104>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <LCD_HLineInt+0x1c8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d003      	beq.n	8001082 <LCD_HLineInt+0xba>
 800107a:	2b02      	cmp	r3, #2
 800107c:	d00e      	beq.n	800109c <LCD_HLineInt+0xd4>
 800107e:	e01a      	b.n	80010b6 <LCD_HLineInt+0xee>
			case LCD_PRES:
 8001080:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8001082:	4623      	mov	r3, r4
 8001084:	1d1c      	adds	r4, r3, #4
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	601a      	str	r2, [r3, #0]
					W -= 32;
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	3b20      	subs	r3, #32
 8001090:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	2b1f      	cmp	r3, #31
 8001096:	d8f3      	bhi.n	8001080 <LCD_HLineInt+0xb8>
				break;
 8001098:	e018      	b.n	80010cc <LCD_HLineInt+0x104>
			case LCD_PINV:
 800109a:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 800109c:	4623      	mov	r3, r4
 800109e:	1d1c      	adds	r4, r3, #4
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	43d2      	mvns	r2, r2
 80010a4:	601a      	str	r2, [r3, #0]
					W -= 32;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	3b20      	subs	r3, #32
 80010aa:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	2b1f      	cmp	r3, #31
 80010b0:	d8f3      	bhi.n	800109a <LCD_HLineInt+0xd2>
				break;
 80010b2:	e00b      	b.n	80010cc <LCD_HLineInt+0x104>
			case LCD_PSET:
 80010b4:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 80010b6:	4623      	mov	r3, r4
 80010b8:	1d1c      	adds	r4, r3, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
					W -= 32;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	3b20      	subs	r3, #32
 80010c2:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	2b1f      	cmp	r3, #31
 80010c8:	d8f4      	bhi.n	80010b4 <LCD_HLineInt+0xec>
				break;
 80010ca:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	2b07      	cmp	r3, #7
 80010d0:	d92c      	bls.n	800112c <LCD_HLineInt+0x164>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <LCD_HLineInt+0x1c8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d003      	beq.n	80010e2 <LCD_HLineInt+0x11a>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d00d      	beq.n	80010fa <LCD_HLineInt+0x132>
 80010de:	e01a      	b.n	8001116 <LCD_HLineInt+0x14e>
			case LCD_PRES:
 80010e0:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 80010e2:	4623      	mov	r3, r4
 80010e4:	1c5c      	adds	r4, r3, #1
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	701a      	strb	r2, [r3, #0]
					W -= 8;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	3b08      	subs	r3, #8
 80010ee:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d8f4      	bhi.n	80010e0 <LCD_HLineInt+0x118>
				break;
 80010f6:	e01a      	b.n	800112e <LCD_HLineInt+0x166>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 80010fa:	4623      	mov	r3, r4
 80010fc:	1c5c      	adds	r4, r3, #1
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	43d2      	mvns	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	3b08      	subs	r3, #8
 800110a:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	2b07      	cmp	r3, #7
 8001110:	d8f2      	bhi.n	80010f8 <LCD_HLineInt+0x130>
				break;
 8001112:	e00c      	b.n	800112e <LCD_HLineInt+0x166>
			case LCD_PSET:
 8001114:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8001116:	4623      	mov	r3, r4
 8001118:	1c5c      	adds	r4, r3, #1
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
					W -= 8;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	3b08      	subs	r3, #8
 8001122:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	2b07      	cmp	r3, #7
 8001128:	d8f4      	bhi.n	8001114 <LCD_HLineInt+0x14c>
				break;
 800112a:	e000      	b.n	800112e <LCD_HLineInt+0x166>
		}
	}
 800112c:	bf00      	nop

	// Last partial byte?
	if (W) {
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d022      	beq.n	800117a <LCD_HLineInt+0x1b2>
		mask = LUT_B2[8 - W];
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	f1c3 0308 	rsb	r3, r3, #8
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <LCD_HLineInt+0x1c4>)
 800113c:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <LCD_HLineInt+0x1c8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d002      	beq.n	800114c <LCD_HLineInt+0x184>
 8001146:	2b02      	cmp	r3, #2
 8001148:	d00a      	beq.n	8001160 <LCD_HLineInt+0x198>
 800114a:	e010      	b.n	800116e <LCD_HLineInt+0x1a6>
			case LCD_PRES:
				*ptr |= ~mask;
 800114c:	7823      	ldrb	r3, [r4, #0]
 800114e:	b25a      	sxtb	r2, r3
 8001150:	b26b      	sxtb	r3, r5
 8001152:	43db      	mvns	r3, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	7023      	strb	r3, [r4, #0]
				break;
 800115e:	e00c      	b.n	800117a <LCD_HLineInt+0x1b2>
			case LCD_PINV:
				*ptr ^= ~mask;
 8001160:	7823      	ldrb	r3, [r4, #0]
 8001162:	406b      	eors	r3, r5
 8001164:	b2db      	uxtb	r3, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	7023      	strb	r3, [r4, #0]
				break;
 800116c:	e005      	b.n	800117a <LCD_HLineInt+0x1b2>
			case LCD_PSET:
			default:
				*ptr &= mask;
 800116e:	7823      	ldrb	r3, [r4, #0]
 8001170:	402b      	ands	r3, r5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	7023      	strb	r3, [r4, #0]
				break;
 8001176:	e000      	b.n	800117a <LCD_HLineInt+0x1b2>
			return;
 8001178:	bf00      	nop
		}
	}
}
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bcf0      	pop	{r4, r5, r6, r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000444 	.word	0x20000444
 8001188:	0801b130 	.word	0x0801b130
 800118c:	0801b138 	.word	0x0801b138
 8001190:	20028b60 	.word	0x20028b60

08001194 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	460b      	mov	r3, r1
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 80011a6:	88fa      	ldrh	r2, [r7, #6]
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d905      	bls.n	80011ba <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 80011ae:	88bd      	ldrh	r5, [r7, #4]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	88bb      	ldrh	r3, [r7, #4]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29c      	uxth	r4, r3
 80011b8:	e004      	b.n	80011c4 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 80011ba:	88fd      	ldrh	r5, [r7, #6]
 80011bc:	88ba      	ldrh	r2, [r7, #4]
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29c      	uxth	r4, r3
	}
	L++;
 80011c4:	4623      	mov	r3, r4
 80011c6:	3301      	adds	r3, #1
 80011c8:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <LCD_HLine+0x9c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d018      	beq.n	8001204 <LCD_HLine+0x70>
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	dc21      	bgt.n	800121a <LCD_HLine+0x86>
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d002      	beq.n	80011e0 <LCD_HLine+0x4c>
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d007      	beq.n	80011ee <LCD_HLine+0x5a>
 80011de:	e01c      	b.n	800121a <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4622      	mov	r2, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe96 	bl	8000f18 <LCD_VLineInt>
			break;
 80011ec:	e01c      	b.n	8001228 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4622      	mov	r2, r4
 80011fa:	4629      	mov	r1, r5
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe8b 	bl	8000f18 <LCD_VLineInt>
			break;
 8001202:	e011      	b.n	8001228 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8001204:	192b      	adds	r3, r5, r4
 8001206:	b29b      	uxth	r3, r3
 8001208:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800120c:	b29b      	uxth	r3, r3
 800120e:	8879      	ldrh	r1, [r7, #2]
 8001210:	4622      	mov	r2, r4
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fed8 	bl	8000fc8 <LCD_HLineInt>
			break;
 8001218:	e006      	b.n	8001228 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	4622      	mov	r2, r4
 800121e:	4619      	mov	r1, r3
 8001220:	4628      	mov	r0, r5
 8001222:	f7ff fed1 	bl	8000fc8 <LCD_HLineInt>
			break;
 8001226:	bf00      	nop
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	20000000 	.word	0x20000000

08001234 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	460b      	mov	r3, r1
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	d905      	bls.n	800125a <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 800124e:	887d      	ldrh	r5, [r7, #2]
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29c      	uxth	r4, r3
 8001258:	e004      	b.n	8001264 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 800125a:	88bd      	ldrh	r5, [r7, #4]
 800125c:	887a      	ldrh	r2, [r7, #2]
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29c      	uxth	r4, r3
	}
	L++;
 8001264:	4623      	mov	r3, r4
 8001266:	3301      	adds	r3, #1
 8001268:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <LCD_VLine+0x9c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b08      	cmp	r3, #8
 8001270:	d018      	beq.n	80012a4 <LCD_VLine+0x70>
 8001272:	2b08      	cmp	r3, #8
 8001274:	dc21      	bgt.n	80012ba <LCD_VLine+0x86>
 8001276:	2b02      	cmp	r3, #2
 8001278:	d002      	beq.n	8001280 <LCD_VLine+0x4c>
 800127a:	2b04      	cmp	r3, #4
 800127c:	d007      	beq.n	800128e <LCD_VLine+0x5a>
 800127e:	e01c      	b.n	80012ba <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4622      	mov	r2, r4
 8001284:	4619      	mov	r1, r3
 8001286:	4628      	mov	r0, r5
 8001288:	f7ff fe9e 	bl	8000fc8 <LCD_HLineInt>
			break;
 800128c:	e01c      	b.n	80012c8 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 800128e:	192b      	adds	r3, r5, r4
 8001290:	b29b      	uxth	r3, r3
 8001292:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001296:	b29b      	uxth	r3, r3
 8001298:	88f9      	ldrh	r1, [r7, #6]
 800129a:	4622      	mov	r2, r4
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe93 	bl	8000fc8 <LCD_HLineInt>
			break;
 80012a2:	e011      	b.n	80012c8 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80012aa:	3301      	adds	r3, #1
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4622      	mov	r2, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe30 	bl	8000f18 <LCD_VLineInt>
			break;
 80012b8:	e006      	b.n	80012c8 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4622      	mov	r2, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe29 	bl	8000f18 <LCD_VLineInt>
			break;
 80012c6:	bf00      	nop
	}
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	20000000 	.word	0x20000000

080012d4 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	4603      	mov	r3, r0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	8879      	ldrh	r1, [r7, #2]
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff4b 	bl	8001194 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 80012fe:	883a      	ldrh	r2, [r7, #0]
 8001300:	8879      	ldrh	r1, [r7, #2]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff45 	bl	8001194 <LCD_HLine>
	if (Y1 > Y2) {
 800130a:	88ba      	ldrh	r2, [r7, #4]
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d90b      	bls.n	800132a <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8001312:	88ba      	ldrh	r2, [r7, #4]
 8001314:	883b      	ldrh	r3, [r7, #0]
 8001316:	4053      	eors	r3, r2
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	883a      	ldrh	r2, [r7, #0]
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	4053      	eors	r3, r2
 8001320:	803b      	strh	r3, [r7, #0]
 8001322:	88ba      	ldrh	r2, [r7, #4]
 8001324:	883b      	ldrh	r3, [r7, #0]
 8001326:	4053      	eors	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	3b01      	subs	r3, #1
 8001334:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8001336:	883a      	ldrh	r2, [r7, #0]
 8001338:	88b9      	ldrh	r1, [r7, #4]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff79 	bl	8001234 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8001342:	883a      	ldrh	r2, [r7, #0]
 8001344:	88b9      	ldrh	r1, [r7, #4]
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff73 	bl	8001234 <LCD_VLine>
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
	...

08001358 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8001358:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	4604      	mov	r4, r0
 8001362:	4608      	mov	r0, r1
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4603      	mov	r3, r0
 800136e:	80bb      	strh	r3, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	429a      	cmp	r2, r3
 800137e:	d90b      	bls.n	8001398 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	4053      	eors	r3, r2
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4053      	eors	r3, r2
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	4053      	eors	r3, r2
 8001396:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d90b      	bls.n	80013b8 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	883b      	ldrh	r3, [r7, #0]
 80013a4:	4053      	eors	r3, r2
 80013a6:	80bb      	strh	r3, [r7, #4]
 80013a8:	883a      	ldrh	r2, [r7, #0]
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	4053      	eors	r3, r2
 80013ae:	803b      	strh	r3, [r7, #0]
 80013b0:	88ba      	ldrh	r2, [r7, #4]
 80013b2:	883b      	ldrh	r3, [r7, #0]
 80013b4:	4053      	eors	r3, r2
 80013b6:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 80013b8:	4b96      	ldr	r3, [pc, #600]	; (8001614 <LCD_FillRect+0x2bc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d006      	beq.n	80013ce <LCD_FillRect+0x76>
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	dc4f      	bgt.n	8001464 <LCD_FillRect+0x10c>
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d034      	beq.n	8001432 <LCD_FillRect+0xda>
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00d      	beq.n	80013e8 <LCD_FillRect+0x90>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80013cc:	e04a      	b.n	8001464 <LCD_FillRect+0x10c>
			dW = SCR_W - 1 - X2;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80013d4:	3301      	adds	r3, #1
 80013d6:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 80013de:	3301      	adds	r3, #1
 80013e0:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 80013e2:	897b      	ldrh	r3, [r7, #10]
 80013e4:	80fb      	strh	r3, [r7, #6]
			break;
 80013e6:	e03e      	b.n	8001466 <LCD_FillRect+0x10e>
			SWAP_VARS(X1, Y1);
 80013e8:	88fa      	ldrh	r2, [r7, #6]
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	4053      	eors	r3, r2
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	88ba      	ldrh	r2, [r7, #4]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4053      	eors	r3, r2
 80013f6:	80bb      	strh	r3, [r7, #4]
 80013f8:	88fa      	ldrh	r2, [r7, #6]
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	4053      	eors	r3, r2
 80013fe:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	883b      	ldrh	r3, [r7, #0]
 8001404:	4053      	eors	r3, r2
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	883a      	ldrh	r2, [r7, #0]
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	4053      	eors	r3, r2
 800140e:	803b      	strh	r3, [r7, #0]
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	883b      	ldrh	r3, [r7, #0]
 8001414:	4053      	eors	r3, r2
 8001416:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 800141e:	3301      	adds	r3, #1
 8001420:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001428:	3301      	adds	r3, #1
 800142a:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 800142c:	897b      	ldrh	r3, [r7, #10]
 800142e:	80fb      	strh	r3, [r7, #6]
			break;
 8001430:	e019      	b.n	8001466 <LCD_FillRect+0x10e>
			SWAP_VARS(X1, Y1);
 8001432:	88fa      	ldrh	r2, [r7, #6]
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	4053      	eors	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	88ba      	ldrh	r2, [r7, #4]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4053      	eors	r3, r2
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	4053      	eors	r3, r2
 8001448:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	4053      	eors	r3, r2
 8001450:	807b      	strh	r3, [r7, #2]
 8001452:	883a      	ldrh	r2, [r7, #0]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4053      	eors	r3, r2
 8001458:	803b      	strh	r3, [r7, #0]
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	4053      	eors	r3, r2
 8001460:	807b      	strh	r3, [r7, #2]
			break;
 8001462:	e000      	b.n	8001466 <LCD_FillRect+0x10e>
			break;
 8001464:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <LCD_FillRect+0x2c0>)
 800146e:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	4a69      	ldr	r2, [pc, #420]	; (800161c <LCD_FillRect+0x2c4>)
 8001478:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001482:	fb02 f203 	mul.w	r2, r2, r3
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	4413      	add	r3, r2
 800148a:	10db      	asrs	r3, r3, #3
 800148c:	4a64      	ldr	r2, [pc, #400]	; (8001620 <LCD_FillRect+0x2c8>)
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	b29a      	uxth	r2, r3
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b29b      	uxth	r3, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	817b      	strh	r3, [r7, #10]

	if (dW) {
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d070      	beq.n	800158a <LCD_FillRect+0x232>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <LCD_FillRect+0x2cc>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d003      	beq.n	80014b8 <LCD_FillRect+0x160>
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d022      	beq.n	80014fa <LCD_FillRect+0x1a2>
 80014b4:	e043      	b.n	800153e <LCD_FillRect+0x1e6>
			case LCD_PRES:
 80014b6:	bf00      	nop
				do {
					cntr = dW;
 80014b8:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 80014ba:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 80014bc:	4623      	mov	r3, r4
 80014be:	1c5c      	adds	r4, r3, #1
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	432a      	orrs	r2, r5
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80014c8:	e003      	b.n	80014d2 <LCD_FillRect+0x17a>
						*ptr++ = 0xFF;
 80014ca:	4623      	mov	r3, r4
 80014cc:	1c5c      	adds	r4, r3, #1
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80014d2:	1e73      	subs	r3, r6, #1
 80014d4:	b29e      	uxth	r6, r3
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d1f7      	bne.n	80014ca <LCD_FillRect+0x172>
					};
					*ptr |= mask_lb;
 80014da:	7823      	ldrb	r3, [r4, #0]
 80014dc:	ea48 0303 	orr.w	r3, r8, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3332      	adds	r3, #50	; 0x32
 80014e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	80ba      	strh	r2, [r7, #4]
 80014f0:	883a      	ldrh	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d8df      	bhi.n	80014b6 <LCD_FillRect+0x15e>
				break;
 80014f6:	e086      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PINV:
 80014f8:	bf00      	nop
				do {
					cntr = dW;
 80014fa:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 80014fc:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 80014fe:	4623      	mov	r3, r4
 8001500:	1c5c      	adds	r4, r3, #1
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	406a      	eors	r2, r5
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800150a:	e005      	b.n	8001518 <LCD_FillRect+0x1c0>
						*ptr++ ^= 0xFF;
 800150c:	4623      	mov	r3, r4
 800150e:	1c5c      	adds	r4, r3, #1
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	43d2      	mvns	r2, r2
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001518:	1e73      	subs	r3, r6, #1
 800151a:	b29e      	uxth	r6, r3
 800151c:	2e00      	cmp	r6, #0
 800151e:	d1f5      	bne.n	800150c <LCD_FillRect+0x1b4>
					};
					*ptr ^= mask_lb;
 8001520:	7823      	ldrb	r3, [r4, #0]
 8001522:	ea88 0303 	eor.w	r3, r8, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3332      	adds	r3, #50	; 0x32
 800152e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001530:	88bb      	ldrh	r3, [r7, #4]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	80ba      	strh	r2, [r7, #4]
 8001536:	883a      	ldrh	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8dd      	bhi.n	80014f8 <LCD_FillRect+0x1a0>
				break;
 800153c:	e063      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800153e:	43eb      	mvns	r3, r5
 8001540:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001542:	ea6f 0308 	mvn.w	r3, r8
 8001546:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 800154a:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 800154c:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 800154e:	4623      	mov	r3, r4
 8001550:	1c5c      	adds	r4, r3, #1
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	402a      	ands	r2, r5
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800155a:	e003      	b.n	8001564 <LCD_FillRect+0x20c>
						*ptr++ = 0x00;
 800155c:	4623      	mov	r3, r4
 800155e:	1c5c      	adds	r4, r3, #1
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001564:	1e73      	subs	r3, r6, #1
 8001566:	b29e      	uxth	r6, r3
 8001568:	2e00      	cmp	r6, #0
 800156a:	d1f7      	bne.n	800155c <LCD_FillRect+0x204>
					};
					*ptr &= mask_lb;
 800156c:	7823      	ldrb	r3, [r4, #0]
 800156e:	ea08 0303 	and.w	r3, r8, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3332      	adds	r3, #50	; 0x32
 800157a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	80ba      	strh	r2, [r7, #4]
 8001582:	883a      	ldrh	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8e0      	bhi.n	800154a <LCD_FillRect+0x1f2>
				break;
 8001588:	e03d      	b.n	8001606 <LCD_FillRect+0x2ae>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 800158a:	ea05 0308 	and.w	r3, r5, r8
 800158e:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <LCD_FillRect+0x2cc>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d003      	beq.n	80015a0 <LCD_FillRect+0x248>
 8001598:	2b02      	cmp	r3, #2
 800159a:	d012      	beq.n	80015c2 <LCD_FillRect+0x26a>
 800159c:	e021      	b.n	80015e2 <LCD_FillRect+0x28a>
			case LCD_PRES:
 800159e:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	432b      	orrs	r3, r5
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3332      	adds	r3, #50	; 0x32
 80015b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	80ba      	strh	r2, [r7, #4]
 80015b8:	883a      	ldrh	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d8ef      	bhi.n	800159e <LCD_FillRect+0x246>
				break;
 80015be:	e022      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PINV:
 80015c0:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	406b      	eors	r3, r5
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3332      	adds	r3, #50	; 0x32
 80015d2:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	80ba      	strh	r2, [r7, #4]
 80015da:	883a      	ldrh	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8ef      	bhi.n	80015c0 <LCD_FillRect+0x268>
				break;
 80015e0:	e011      	b.n	8001606 <LCD_FillRect+0x2ae>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 80015e2:	43eb      	mvns	r3, r5
 80015e4:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	402b      	ands	r3, r5
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	80ba      	strh	r2, [r7, #4]
 80015fe:	883a      	ldrh	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f0      	bhi.n	80015e6 <LCD_FillRect+0x28e>
				break;
 8001604:	bf00      	nop
		}
	}
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000000 	.word	0x20000000
 8001618:	0801b140 	.word	0x0801b140
 800161c:	0801b148 	.word	0x0801b148
 8001620:	20000444 	.word	0x20000444
 8001624:	20028b60 	.word	0x20028b60

08001628 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	4604      	mov	r4, r0
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4623      	mov	r3, r4
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	4603      	mov	r3, r0
 800163c:	80bb      	strh	r3, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001650:	883a      	ldrh	r2, [r7, #0]
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 800165a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	dd01      	ble.n	8001666 <LCD_Line+0x3e>
 8001662:	2301      	movs	r3, #1
 8001664:	e001      	b.n	800166a <LCD_Line+0x42>
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 800166c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001670:	2b00      	cmp	r3, #0
 8001672:	dd01      	ble.n	8001678 <LCD_Line+0x50>
 8001674:	2301      	movs	r3, #1
 8001676:	e001      	b.n	800167c <LCD_Line+0x54>
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 800167e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	88b9      	ldrh	r1, [r7, #4]
 800168a:	883a      	ldrh	r2, [r7, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fdd1 	bl	8001234 <LCD_VLine>
		return;
 8001692:	e08d      	b.n	80017b0 <LCD_Line+0x188>
	}
	if (dY == 0) {
 8001694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d106      	bne.n	80016aa <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	8879      	ldrh	r1, [r7, #2]
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd76 	bl	8001194 <LCD_HLine>
		return;
 80016a8:	e082      	b.n	80017b0 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80016aa:	8aba      	ldrh	r2, [r7, #20]
 80016ac:	8a3b      	ldrh	r3, [r7, #16]
 80016ae:	fb12 f303 	smulbb	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80016b6:	8a7a      	ldrh	r2, [r7, #18]
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	fb12 f303 	smulbb	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80016c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 80016ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 80016d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80016d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016da:	429a      	cmp	r2, r3
 80016dc:	db30      	blt.n	8001740 <LCD_Line+0x118>
		di = dY2 - dX;
 80016de:	897a      	ldrh	r2, [r7, #10]
 80016e0:	8abb      	ldrh	r3, [r7, #20]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 80016e8:	e023      	b.n	8001732 <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbad 	bl	8000e54 <LCD_Pixel>
			X1 += dXsym;
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 8001704:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da05      	bge.n	8001718 <LCD_Line+0xf0>
				di += dY2;
 800170c:	8afa      	ldrh	r2, [r7, #22]
 800170e:	897b      	ldrh	r3, [r7, #10]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
 8001716:	e00c      	b.n	8001732 <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001718:	897a      	ldrh	r2, [r7, #10]
 800171a:	89bb      	ldrh	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b29a      	uxth	r2, r3
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 8001732:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800173a:	429a      	cmp	r2, r3
 800173c:	d1d5      	bne.n	80016ea <LCD_Line+0xc2>
 800173e:	e02f      	b.n	80017a0 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001740:	89ba      	ldrh	r2, [r7, #12]
 8001742:	8a7b      	ldrh	r3, [r7, #18]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 800174a:	e023      	b.n	8001794 <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 800174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001750:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb7c 	bl	8000e54 <LCD_Pixel>
			Y1 += dYsym;
 800175c:	88ba      	ldrh	r2, [r7, #4]
 800175e:	89fb      	ldrh	r3, [r7, #14]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	2b00      	cmp	r3, #0
 800176c:	da05      	bge.n	800177a <LCD_Line+0x152>
				di += dX2;
 800176e:	8afa      	ldrh	r2, [r7, #22]
 8001770:	89bb      	ldrh	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	82fb      	strh	r3, [r7, #22]
 8001778:	e00c      	b.n	8001794 <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 800177a:	89ba      	ldrh	r2, [r7, #12]
 800177c:	897b      	ldrh	r3, [r7, #10]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29a      	uxth	r2, r3
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	8a3b      	ldrh	r3, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 8001794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001798:	f9b7 3000 	ldrsh.w	r3, [r7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d1d5      	bne.n	800174c <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80017a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fb52 	bl	8000e54 <LCD_Pixel>
}
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}

080017b6 <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b088      	sub	sp, #32
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]
 80017c2:	460b      	mov	r3, r1
 80017c4:	81bb      	strh	r3, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	791b      	ldrb	r3, [r3, #4]
 80017ce:	7afa      	ldrb	r2, [r7, #11]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d304      	bcc.n	80017de <LCD_PutChar+0x28>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	7afa      	ldrb	r2, [r7, #11]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d902      	bls.n	80017e4 <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	799b      	ldrb	r3, [r3, #6]
 80017e2:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	7912      	ldrb	r2, [r2, #4]
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	7892      	ldrb	r2, [r2, #2]
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	3307      	adds	r3, #7
 80017fa:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	78db      	ldrb	r3, [r3, #3]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d177      	bne.n	80018f4 <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d829      	bhi.n	8001860 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001810:	e01e      	b.n	8001850 <LCD_PutChar+0x9a>
				pY = Y;
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	617a      	str	r2, [r7, #20]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001820:	e010      	b.n	8001844 <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 8001822:	7efb      	ldrb	r3, [r7, #27]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 800182c:	8bfb      	ldrh	r3, [r7, #30]
 800182e:	8bba      	ldrh	r2, [r7, #28]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb0e 	bl	8000e54 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001838:	7efb      	ldrb	r3, [r7, #27]
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	76fb      	strb	r3, [r7, #27]
					pY++;
 800183e:	8bbb      	ldrh	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 8001844:	7efb      	ldrb	r3, [r7, #27]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1eb      	bne.n	8001822 <LCD_PutChar+0x6c>
				}
				pX++;
 800184a:	8bfb      	ldrh	r3, [r7, #30]
 800184c:	3301      	adds	r3, #1
 800184e:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001850:	8bfa      	ldrh	r2, [r7, #30]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	7809      	ldrb	r1, [r1, #0]
 8001858:	440b      	add	r3, r1
 800185a:	429a      	cmp	r2, r3
 800185c:	dbd9      	blt.n	8001812 <LCD_PutChar+0x5c>
 800185e:	e0c0      	b.n	80019e2 <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001864:	e03e      	b.n	80018e4 <LCD_PutChar+0x12e>
				pY = Y;
 8001866:	89bb      	ldrh	r3, [r7, #12]
 8001868:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 800186a:	e031      	b.n	80018d0 <LCD_PutChar+0x11a>
					bL = 8;
 800186c:	2308      	movs	r3, #8
 800186e:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	617a      	str	r2, [r7, #20]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 800187a:	7efb      	ldrb	r3, [r7, #27]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d022      	beq.n	80018c6 <LCD_PutChar+0x110>
						while (bL) {
 8001880:	e01d      	b.n	80018be <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 8001882:	7efb      	ldrb	r3, [r7, #27]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 800188c:	8bfb      	ldrh	r3, [r7, #30]
 800188e:	8bba      	ldrh	r2, [r7, #28]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fade 	bl	8000e54 <LCD_Pixel>
							}
							tmpCh >>= 1;
 8001898:	7efb      	ldrb	r3, [r7, #27]
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 800189e:	7efb      	ldrb	r3, [r7, #27]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <LCD_PutChar+0xfc>
								pY++;
 80018a4:	8bbb      	ldrh	r3, [r7, #28]
 80018a6:	3301      	adds	r3, #1
 80018a8:	83bb      	strh	r3, [r7, #28]
								bL--;
 80018aa:	7ebb      	ldrb	r3, [r7, #26]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	76bb      	strb	r3, [r7, #26]
 80018b0:	e005      	b.n	80018be <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80018b2:	7ebb      	ldrb	r3, [r7, #26]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	8bbb      	ldrh	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	83bb      	strh	r3, [r7, #28]
								break;
 80018bc:	e008      	b.n	80018d0 <LCD_PutChar+0x11a>
						while (bL) {
 80018be:	7ebb      	ldrb	r3, [r7, #26]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1de      	bne.n	8001882 <LCD_PutChar+0xcc>
 80018c4:	e004      	b.n	80018d0 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80018c6:	7ebb      	ldrb	r3, [r7, #26]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	8bbb      	ldrh	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80018d0:	8bba      	ldrh	r2, [r7, #28]
 80018d2:	89bb      	ldrh	r3, [r7, #12]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	7849      	ldrb	r1, [r1, #1]
 80018d8:	440b      	add	r3, r1
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbc6      	blt.n	800186c <LCD_PutChar+0xb6>
					}
				}
				pX++;
 80018de:	8bfb      	ldrh	r3, [r7, #30]
 80018e0:	3301      	adds	r3, #1
 80018e2:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 80018e4:	8bfa      	ldrh	r2, [r7, #30]
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	7809      	ldrb	r1, [r1, #0]
 80018ec:	440b      	add	r3, r1
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbb9      	blt.n	8001866 <LCD_PutChar+0xb0>
 80018f2:	e076      	b.n	80019e2 <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d829      	bhi.n	8001950 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 80018fc:	89bb      	ldrh	r3, [r7, #12]
 80018fe:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001900:	e01e      	b.n	8001940 <LCD_PutChar+0x18a>
				pX = X;
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001910:	e010      	b.n	8001934 <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 8001912:	7efb      	ldrb	r3, [r7, #27]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 800191c:	8bfb      	ldrh	r3, [r7, #30]
 800191e:	8bba      	ldrh	r2, [r7, #28]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa96 	bl	8000e54 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001928:	7efb      	ldrb	r3, [r7, #27]
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	76fb      	strb	r3, [r7, #27]
					pX++;
 800192e:	8bfb      	ldrh	r3, [r7, #30]
 8001930:	3301      	adds	r3, #1
 8001932:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 8001934:	7efb      	ldrb	r3, [r7, #27]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1eb      	bne.n	8001912 <LCD_PutChar+0x15c>
				}
				pY++;
 800193a:	8bbb      	ldrh	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001940:	8bba      	ldrh	r2, [r7, #28]
 8001942:	89bb      	ldrh	r3, [r7, #12]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	7849      	ldrb	r1, [r1, #1]
 8001948:	440b      	add	r3, r1
 800194a:	429a      	cmp	r2, r3
 800194c:	dbd9      	blt.n	8001902 <LCD_PutChar+0x14c>
 800194e:	e048      	b.n	80019e2 <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001950:	89bb      	ldrh	r3, [r7, #12]
 8001952:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001954:	e03e      	b.n	80019d4 <LCD_PutChar+0x21e>
				pX = X;
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 800195a:	e031      	b.n	80019c0 <LCD_PutChar+0x20a>
					bL = 8;
 800195c:	2308      	movs	r3, #8
 800195e:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	617a      	str	r2, [r7, #20]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 800196a:	7efb      	ldrb	r3, [r7, #27]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d022      	beq.n	80019b6 <LCD_PutChar+0x200>
						while (bL) {
 8001970:	e01d      	b.n	80019ae <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 8001972:	7efb      	ldrb	r3, [r7, #27]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 800197c:	8bfb      	ldrh	r3, [r7, #30]
 800197e:	8bba      	ldrh	r2, [r7, #28]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fa66 	bl	8000e54 <LCD_Pixel>
							}
							tmpCh >>= 1;
 8001988:	7efb      	ldrb	r3, [r7, #27]
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 800198e:	7efb      	ldrb	r3, [r7, #27]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <LCD_PutChar+0x1ec>
								pX++;
 8001994:	8bfb      	ldrh	r3, [r7, #30]
 8001996:	3301      	adds	r3, #1
 8001998:	83fb      	strh	r3, [r7, #30]
								bL--;
 800199a:	7ebb      	ldrb	r3, [r7, #26]
 800199c:	3b01      	subs	r3, #1
 800199e:	76bb      	strb	r3, [r7, #26]
 80019a0:	e005      	b.n	80019ae <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80019a2:	7ebb      	ldrb	r3, [r7, #26]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	8bfb      	ldrh	r3, [r7, #30]
 80019a8:	4413      	add	r3, r2
 80019aa:	83fb      	strh	r3, [r7, #30]
								break;
 80019ac:	e008      	b.n	80019c0 <LCD_PutChar+0x20a>
						while (bL) {
 80019ae:	7ebb      	ldrb	r3, [r7, #26]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1de      	bne.n	8001972 <LCD_PutChar+0x1bc>
 80019b4:	e004      	b.n	80019c0 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80019b6:	7ebb      	ldrb	r3, [r7, #26]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	4413      	add	r3, r2
 80019be:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80019c0:	8bfa      	ldrh	r2, [r7, #30]
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	7809      	ldrb	r1, [r1, #0]
 80019c8:	440b      	add	r3, r1
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbc6      	blt.n	800195c <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 80019ce:	8bbb      	ldrh	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 80019d4:	8bba      	ldrh	r2, [r7, #28]
 80019d6:	89bb      	ldrh	r3, [r7, #12]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	7849      	ldrb	r1, [r1, #1]
 80019dc:	440b      	add	r3, r1
 80019de:	429a      	cmp	r2, r3
 80019e0:	dbb9      	blt.n	8001956 <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4603      	mov	r3, r0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	460b      	mov	r3, r1
 8001a04:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <LCD_PutStr+0x6c>)
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001a1c:	e011      	b.n	8001a42 <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	89b9      	ldrh	r1, [r7, #12]
 8001a28:	8af8      	ldrh	r0, [r7, #22]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f7ff fec3 	bl	80017b6 <LCD_PutChar>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	4413      	add	r3, r2
 8001a38:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001a3a:	8afa      	ldrh	r2, [r7, #22]
 8001a3c:	8abb      	ldrh	r3, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d804      	bhi.n	8001a4c <LCD_PutStr+0x58>
	while (*str) {
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e9      	bne.n	8001a1e <LCD_PutStr+0x2a>
 8001a4a:	e000      	b.n	8001a4e <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001a4c:	bf00      	nop
	}

	return (pX - X);
 8001a4e:	8afa      	ldrh	r2, [r7, #22]
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20028b62 	.word	0x20028b62

08001a64 <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60ba      	str	r2, [r7, #8]
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	81fb      	strh	r3, [r7, #14]
 8001a72:	460b      	mov	r3, r1
 8001a74:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da05      	bge.n	8001aa2 <LCD_PutInt+0x3e>
		neg = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <LCD_PutInt+0xc8>)
 8001aa6:	fb83 1302 	smull	r1, r3, r3, r2
 8001aaa:	1099      	asrs	r1, r3, #2
 8001aac:	17d3      	asrs	r3, r2, #31
 8001aae:	1ac9      	subs	r1, r1, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	1ad1      	subs	r1, r2, r3
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	6279      	str	r1, [r7, #36]	; 0x24
 8001ac2:	3230      	adds	r2, #48	; 0x30
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <LCD_PutInt+0xc8>)
 8001acc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad0:	1092      	asrs	r2, r2, #2
 8001ad2:	17db      	asrs	r3, r3, #31
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e1      	bne.n	8001aa2 <LCD_PutInt+0x3e>
	if (neg) {
 8001ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d011      	beq.n	8001b0a <LCD_PutInt+0xa6>
		*pStr++ = '-';
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	627a      	str	r2, [r7, #36]	; 0x24
 8001aec:	222d      	movs	r2, #45	; 0x2d
 8001aee:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001af0:	e00b      	b.n	8001b0a <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	89b9      	ldrh	r1, [r7, #12]
 8001af8:	8c38      	ldrh	r0, [r7, #32]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f7ff fe5b 	bl	80017b6 <LCD_PutChar>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	8c3b      	ldrh	r3, [r7, #32]
 8001b06:	4413      	add	r3, r2
 8001b08:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ec      	bne.n	8001af2 <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001b18:	8c3b      	ldrh	r3, [r7, #32]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b2db      	uxtb	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	66666667 	.word	0x66666667

08001b30 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b08b      	sub	sp, #44	; 0x2c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	81fb      	strh	r3, [r7, #14]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	81bb      	strh	r3, [r7, #12]
 8001b42:	4613      	mov	r3, r2
 8001b44:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	627a      	str	r2, [r7, #36]	; 0x24
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da05      	bge.n	8001b78 <LCD_PutIntF+0x48>
		neg = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	425b      	negs	r3, r3
 8001b76:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <LCD_PutIntF+0x160>)
 8001b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b80:	1099      	asrs	r1, r3, #2
 8001b82:	17d3      	asrs	r3, r2, #31
 8001b84:	1ac9      	subs	r1, r1, r3
 8001b86:	460b      	mov	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	1ad1      	subs	r1, r2, r3
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1c59      	adds	r1, r3, #1
 8001b96:	6279      	str	r1, [r7, #36]	; 0x24
 8001b98:	3230      	adds	r2, #48	; 0x30
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001b9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <LCD_PutIntF+0x160>)
 8001bac:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb0:	1092      	asrs	r2, r2, #2
 8001bb2:	17db      	asrs	r3, r3, #31
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1dc      	bne.n	8001b78 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 8001bbe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d80f      	bhi.n	8001be8 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001bc8:	e009      	b.n	8001bde <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	627a      	str	r2, [r7, #36]	; 0x24
 8001bd0:	2230      	movs	r2, #48	; 0x30
 8001bd2:	701a      	strb	r2, [r3, #0]
			strLen++;
 8001bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001bde:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d9f0      	bls.n	8001bca <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03d      	beq.n	8001c6c <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8001bf6:	222d      	movs	r2, #45	; 0x2d
 8001bf8:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001bfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 8001c04:	e032      	b.n	8001c6c <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	89b9      	ldrh	r1, [r7, #12]
 8001c0c:	8c38      	ldrh	r0, [r7, #32]
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c10:	f7ff fdd1 	bl	80017b6 <LCD_PutChar>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	8c3b      	ldrh	r3, [r7, #32]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <LCD_PutIntF+0x13c>
 8001c24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c2e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d119      	bne.n	8001c6c <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	89bb      	ldrh	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b02      	subs	r3, #2
 8001c46:	b299      	uxth	r1, r3
 8001c48:	8c3b      	ldrh	r3, [r7, #32]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29c      	uxth	r4, r3
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	89bb      	ldrh	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	8c38      	ldrh	r0, [r7, #32]
 8001c60:	4622      	mov	r2, r4
 8001c62:	f7ff fb37 	bl	80012d4 <LCD_Rect>
			pX += 3;
 8001c66:	8c3b      	ldrh	r3, [r7, #32]
 8001c68:	3303      	adds	r3, #3
 8001c6a:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1c5      	bne.n	8001c06 <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 8001c7a:	8c3b      	ldrh	r3, [r7, #32]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b2db      	uxtb	r3, r3
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	372c      	adds	r7, #44	; 0x2c
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	66666667 	.word	0x66666667

08001c94 <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	80fb      	strh	r3, [r7, #6]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80bb      	strh	r3, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	803b      	strh	r3, [r7, #0]
	int i=X;
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	61bb      	str	r3, [r7, #24]
	int j=Y;
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	617b      	str	r3, [r7, #20]
	int size=S;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	613b      	str	r3, [r7, #16]
	int direction = dir;
 8001cbe:	883b      	ldrh	r3, [r7, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <drawUpDownArrow+0x3a>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d11f      	bne.n	8001d0e <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b29c      	uxth	r4, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4622      	mov	r2, r4
 8001d08:	f7ff fb26 	bl	8001358 <LCD_FillRect>
 8001d0c:	e01e      	b.n	8001d4c <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	b29c      	uxth	r4, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4622      	mov	r2, r4
 8001d48:	f7ff fb06 	bl	8001358 <LCD_FillRect>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	f200 8234 	bhi.w	80021bc <drawUpDownArrow+0x528>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <drawUpDownArrow+0xc8>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001e83 	.word	0x08001e83
 8001d64:	08001f99 	.word	0x08001f99
 8001d68:	080020ab 	.word	0x080020ab
	}
	switch(direction)
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e03d      	b.n	8001dee <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b218      	sxth	r0, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b219      	sxth	r1, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b21c      	sxth	r4, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4622      	mov	r2, r4
 8001de4:	f7ff fc20 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbbc      	blt.n	8001d72 <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b218      	sxth	r0, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b219      	sxth	r1, r3
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	b21c      	sxth	r4, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4622      	mov	r2, r4
 8001e38:	f7ff fbf6 	bl	8001628 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b218      	sxth	r0, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b219      	sxth	r1, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	b21c      	sxth	r4, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	f7ff fbd4 	bl	8001628 <LCD_Line>
		break;
 8001e80:	e19c      	b.n	80021bc <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e03d      	b.n	8001f04 <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b218      	sxth	r0, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b219      	sxth	r1, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	b21c      	sxth	r4, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	4622      	mov	r2, r4
 8001efa:	f7ff fb95 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbbc      	blt.n	8001e88 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b218      	sxth	r0, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b219      	sxth	r1, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	b21c      	sxth	r4, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	f7ff fb6b 	bl	8001628 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b218      	sxth	r0, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b219      	sxth	r1, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	b21c      	sxth	r4, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4622      	mov	r2, r4
 8001f92:	f7ff fb49 	bl	8001628 <LCD_Line>
		break;
 8001f96:	e111      	b.n	80021bc <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e03d      	b.n	800201a <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b218      	sxth	r0, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b219      	sxth	r1, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b21c      	sxth	r4, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21b      	sxth	r3, r3
 800200e:	4622      	mov	r2, r4
 8002010:	f7ff fb0a 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	3301      	adds	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbbc      	blt.n	8001f9e <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	b218      	sxth	r0, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	b29b      	uxth	r3, r3
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	b219      	sxth	r1, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	b29b      	uxth	r3, r3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	b29a      	uxth	r2, r3
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21a      	sxth	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	b21b      	sxth	r3, r3
 8002062:	f7ff fae1 	bl	8001628 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	b29b      	uxth	r3, r3
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	b29b      	uxth	r3, r3
 800207a:	b218      	sxth	r0, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	b29a      	uxth	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	b29b      	uxth	r3, r3
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	b29b      	uxth	r3, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	b219      	sxth	r1, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	b29b      	uxth	r3, r3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	b29a      	uxth	r2, r3
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4413      	add	r3, r2
 800209c:	b29b      	uxth	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	f7ff fac0 	bl	8001628 <LCD_Line>
		break;
 80020a8:	e088      	b.n	80021bc <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e03d      	b.n	800212c <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	b29a      	uxth	r2, r3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b218      	sxth	r0, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4413      	add	r3, r2
 80020dc:	b29a      	uxth	r2, r3
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b219      	sxth	r1, r3
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	b21c      	sxth	r4, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	b29a      	uxth	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	b29b      	uxth	r3, r3
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	b21b      	sxth	r3, r3
 8002120:	4622      	mov	r2, r4
 8002122:	f7ff fa81 	bl	8001628 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbbc      	blt.n	80020b0 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	b29a      	uxth	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	b29b      	uxth	r3, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b29b      	uxth	r3, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29b      	uxth	r3, r3
 800214a:	b218      	sxth	r0, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	b29b      	uxth	r3, r3
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	b219      	sxth	r1, r3
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	b29a      	uxth	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	b29b      	uxth	r3, r3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	b29b      	uxth	r3, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	b29b      	uxth	r3, r3
 800216e:	b21a      	sxth	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	b21b      	sxth	r3, r3
 8002174:	f7ff fa58 	bl	8001628 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	b29a      	uxth	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	b29b      	uxth	r3, r3
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	b218      	sxth	r0, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	b29a      	uxth	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	b29b      	uxth	r3, r3
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	b29b      	uxth	r3, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	b219      	sxth	r1, r3
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	f7ff fa37 	bl	8001628 <LCD_Line>
		break;
 80021ba:	bf00      	nop
	}
	}

}
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}

080021c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 //static _Bool ON = 1;
 //static _Bool OFF = 0;
  HAL_StatusTypeDef Status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ce:	f005 fd44 	bl	8007c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d2:	f000 f9ad 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d6:	f000 fff3 	bl	80031c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80021da:	f000 ff9f 	bl	800311c <MX_DMA_Init>
  MX_ADC1_Init();
 80021de:	f000 fa4f 	bl	8002680 <MX_ADC1_Init>
  MX_ADC2_Init();
 80021e2:	f000 fb2b 	bl	800283c <MX_ADC2_Init>
  MX_ADC3_Init();
 80021e6:	f000 fba5 	bl	8002934 <MX_ADC3_Init>
  MX_I2C1_Init();
 80021ea:	f000 fc3b 	bl	8002a64 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021ee:	f000 fc79 	bl	8002ae4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80021f2:	f000 fcb7 	bl	8002b64 <MX_I2C3_Init>
  MX_I2C4_Init();
 80021f6:	f000 fcf7 	bl	8002be8 <MX_I2C4_Init>
  MX_RTC_Init();
 80021fa:	f000 fd35 	bl	8002c68 <MX_RTC_Init>
  MX_SPI4_Init();
 80021fe:	f000 fd59 	bl	8002cb4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002202:	f000 fd95 	bl	8002d30 <MX_SPI5_Init>
  MX_TIM4_Init();
 8002206:	f000 fdd1 	bl	8002dac <MX_TIM4_Init>
  MX_TIM5_Init();
 800220a:	f000 fe47 	bl	8002e9c <MX_TIM5_Init>
  MX_UART4_Init();
 800220e:	f000 fec7 	bl	8002fa0 <MX_UART4_Init>
  MX_UART5_Init();
 8002212:	f000 fef5 	bl	8003000 <MX_UART5_Init>
  MX_UART7_Init();
 8002216:	f000 ff23 	bl	8003060 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 800221a:	f000 ff51 	bl	80030c0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 800221e:	f001 f9a3 	bl	8003568 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8002222:	220c      	movs	r2, #12
 8002224:	2100      	movs	r1, #0
 8002226:	488d      	ldr	r0, [pc, #564]	; (800245c <main+0x298>)
 8002228:	f013 fcd2 	bl	8015bd0 <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	498b      	ldr	r1, [pc, #556]	; (8002460 <main+0x29c>)
 8002232:	488c      	ldr	r0, [pc, #560]	; (8002464 <main+0x2a0>)
 8002234:	f005 fee8 	bl	8008008 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <main+0x8a>
  {
  	  DevUI_Error_Handler("ADC1 Failed to start.", Status, 0, 0, true);
 800223e:	78f9      	ldrb	r1, [r7, #3]
 8002240:	2301      	movs	r3, #1
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	2200      	movs	r2, #0
 8002248:	4887      	ldr	r0, [pc, #540]	; (8002468 <main+0x2a4>)
 800224a:	f001 f957 	bl	80034fc <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4986      	ldr	r1, [pc, #536]	; (800246c <main+0x2a8>)
 8002254:	4886      	ldr	r0, [pc, #536]	; (8002470 <main+0x2ac>)
 8002256:	f005 fed7 	bl	8008008 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <main+0xac>
  {
  	  DevUI_Error_Handler("ADC2 Failed to start.", Status, 0, 0, true);
 8002260:	78f9      	ldrb	r1, [r7, #3]
 8002262:	2301      	movs	r3, #1
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2200      	movs	r2, #0
 800226a:	4882      	ldr	r0, [pc, #520]	; (8002474 <main+0x2b0>)
 800226c:	f001 f946 	bl	80034fc <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4980      	ldr	r1, [pc, #512]	; (8002478 <main+0x2b4>)
 8002276:	4881      	ldr	r0, [pc, #516]	; (800247c <main+0x2b8>)
 8002278:	f005 fec6 	bl	8008008 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <main+0xce>
  {
  	  DevUI_Error_Handler("ADC3 Failed to start.", Status, 0, 0, true);
 8002282:	78f9      	ldrb	r1, [r7, #3]
 8002284:	2301      	movs	r3, #1
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	487c      	ldr	r0, [pc, #496]	; (8002480 <main+0x2bc>)
 800228e:	f001 f935 	bl	80034fc <DevUI_Error_Handler>
  }
   int x=1;
 8002292:	2301      	movs	r3, #1
 8002294:	607b      	str	r3, [r7, #4]

   HAL_UART_Receive_DMA(&SPARE_UART, spare_Uart_RX_Buf, sizeof(spare_Uart_RX_Buf));
 8002296:	22c8      	movs	r2, #200	; 0xc8
 8002298:	497a      	ldr	r1, [pc, #488]	; (8002484 <main+0x2c0>)
 800229a:	487b      	ldr	r0, [pc, #492]	; (8002488 <main+0x2c4>)
 800229c:	f00b f94e 	bl	800d53c <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&SOC_UART, soc_Uart_RX_Buf, sizeof(soc_Uart_RX_Buf));
 80022a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a4:	4979      	ldr	r1, [pc, #484]	; (800248c <main+0x2c8>)
 80022a6:	487a      	ldr	r0, [pc, #488]	; (8002490 <main+0x2cc>)
 80022a8:	f00b f948 	bl	800d53c <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&DEBUG_UART, debug_Uart_RX_Buf, sizeof(debug_Uart_RX_Buf));
 80022ac:	22c8      	movs	r2, #200	; 0xc8
 80022ae:	4979      	ldr	r1, [pc, #484]	; (8002494 <main+0x2d0>)
 80022b0:	4879      	ldr	r0, [pc, #484]	; (8002498 <main+0x2d4>)
 80022b2:	f00b f943 	bl	800d53c <HAL_UART_Receive_DMA>
//  winbondSPIDeviceIDRead(hspi5,(uint8_t*)spiDataRead);
//  //char buf[30];
//  spareUartTransmitRead("Lets see what comes out!");
//  x=0;

  configureLEDDriver();
 80022b6:	f001 fc4f 	bl	8003b58 <configureLEDDriver>
  
    setErrorLED(0,ON);
 80022ba:	2101      	movs	r1, #1
 80022bc:	2000      	movs	r0, #0
 80022be:	f001 fcfd 	bl	8003cbc <setErrorLED>
    HAL_Delay(1000);
 80022c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022c6:	f005 fcf5 	bl	8007cb4 <HAL_Delay>
    setErrorLED(1,OFF);
 80022ca:	2100      	movs	r1, #0
 80022cc:	2001      	movs	r0, #1
 80022ce:	f001 fcf5 	bl	8003cbc <setErrorLED>
    setErrorLED(8,ON);
 80022d2:	2101      	movs	r1, #1
 80022d4:	2008      	movs	r0, #8
 80022d6:	f001 fcf1 	bl	8003cbc <setErrorLED>
    HAL_Delay(1000);
 80022da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022de:	f005 fce9 	bl	8007cb4 <HAL_Delay>
    setErrorLED(8,OFF);
 80022e2:	2100      	movs	r1, #0
 80022e4:	2008      	movs	r0, #8
 80022e6:	f001 fce9 	bl	8003cbc <setErrorLED>
    setErrorLED(9,ON);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2009      	movs	r0, #9
 80022ee:	f001 fce5 	bl	8003cbc <setErrorLED>
    HAL_Delay(1000);
 80022f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f6:	f005 fcdd 	bl	8007cb4 <HAL_Delay>
    setErrorLED(8,ON);
 80022fa:	2101      	movs	r1, #1
 80022fc:	2008      	movs	r0, #8
 80022fe:	f001 fcdd 	bl	8003cbc <setErrorLED>
    setErrorLED(9,ON);
 8002302:	2101      	movs	r1, #1
 8002304:	2009      	movs	r0, #9
 8002306:	f001 fcd9 	bl	8003cbc <setErrorLED>
    HAL_Delay(1000);
 800230a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800230e:	f005 fcd1 	bl	8007cb4 <HAL_Delay>
    setErrorLED(9,OFF);
 8002312:	2100      	movs	r1, #0
 8002314:	2009      	movs	r0, #9
 8002316:	f001 fcd1 	bl	8003cbc <setErrorLED>

    printf("Welcome to DevUI!\r\n");
 800231a:	4860      	ldr	r0, [pc, #384]	; (800249c <main+0x2d8>)
 800231c:	f014 fb2c 	bl	8016978 <puts>
    printf("DevUI SW Version: 0.0.1\r\n");
 8002320:	485f      	ldr	r0, [pc, #380]	; (80024a0 <main+0x2dc>)
 8002322:	f014 fb29 	bl	8016978 <puts>
//    EX_SW_OFF;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002326:	f00c f923 	bl	800e570 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 800232a:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <main+0x2e0>)
 800232c:	2100      	movs	r1, #0
 800232e:	485e      	ldr	r0, [pc, #376]	; (80024a8 <main+0x2e4>)
 8002330:	f00c f988 	bl	800e644 <osThreadNew>
 8002334:	4603      	mov	r3, r0
 8002336:	4a5d      	ldr	r2, [pc, #372]	; (80024ac <main+0x2e8>)
 8002338:	6013      	str	r3, [r2, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 800233a:	4a5d      	ldr	r2, [pc, #372]	; (80024b0 <main+0x2ec>)
 800233c:	2100      	movs	r1, #0
 800233e:	485d      	ldr	r0, [pc, #372]	; (80024b4 <main+0x2f0>)
 8002340:	f00c f980 	bl	800e644 <osThreadNew>
 8002344:	4603      	mov	r3, r0
 8002346:	4a5c      	ldr	r2, [pc, #368]	; (80024b8 <main+0x2f4>)
 8002348:	6013      	str	r3, [r2, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 800234a:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <main+0x2f8>)
 800234c:	2100      	movs	r1, #0
 800234e:	485c      	ldr	r0, [pc, #368]	; (80024c0 <main+0x2fc>)
 8002350:	f00c f978 	bl	800e644 <osThreadNew>
 8002354:	4603      	mov	r3, r0
 8002356:	4a5b      	ldr	r2, [pc, #364]	; (80024c4 <main+0x300>)
 8002358:	6013      	str	r3, [r2, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 800235a:	4a5b      	ldr	r2, [pc, #364]	; (80024c8 <main+0x304>)
 800235c:	2100      	movs	r1, #0
 800235e:	485b      	ldr	r0, [pc, #364]	; (80024cc <main+0x308>)
 8002360:	f00c f970 	bl	800e644 <osThreadNew>
 8002364:	4603      	mov	r3, r0
 8002366:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <main+0x30c>)
 8002368:	6013      	str	r3, [r2, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <main+0x310>)
 800236c:	2100      	movs	r1, #0
 800236e:	485a      	ldr	r0, [pc, #360]	; (80024d8 <main+0x314>)
 8002370:	f00c f968 	bl	800e644 <osThreadNew>
 8002374:	4603      	mov	r3, r0
 8002376:	4a59      	ldr	r2, [pc, #356]	; (80024dc <main+0x318>)
 8002378:	6013      	str	r3, [r2, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 800237a:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <main+0x31c>)
 800237c:	2100      	movs	r1, #0
 800237e:	4859      	ldr	r0, [pc, #356]	; (80024e4 <main+0x320>)
 8002380:	f00c f960 	bl	800e644 <osThreadNew>
 8002384:	4603      	mov	r3, r0
 8002386:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <main+0x324>)
 8002388:	6013      	str	r3, [r2, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 800238a:	4a58      	ldr	r2, [pc, #352]	; (80024ec <main+0x328>)
 800238c:	2100      	movs	r1, #0
 800238e:	4858      	ldr	r0, [pc, #352]	; (80024f0 <main+0x32c>)
 8002390:	f00c f958 	bl	800e644 <osThreadNew>
 8002394:	4603      	mov	r3, r0
 8002396:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <main+0x330>)
 8002398:	6013      	str	r3, [r2, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 800239a:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <main+0x334>)
 800239c:	2100      	movs	r1, #0
 800239e:	4857      	ldr	r0, [pc, #348]	; (80024fc <main+0x338>)
 80023a0:	f00c f950 	bl	800e644 <osThreadNew>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a56      	ldr	r2, [pc, #344]	; (8002500 <main+0x33c>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* creation of socUart */
  socUartHandle = osThreadNew(startSocUart, NULL, &socUart_attributes);
 80023aa:	4a56      	ldr	r2, [pc, #344]	; (8002504 <main+0x340>)
 80023ac:	2100      	movs	r1, #0
 80023ae:	4856      	ldr	r0, [pc, #344]	; (8002508 <main+0x344>)
 80023b0:	f00c f948 	bl	800e644 <osThreadNew>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a55      	ldr	r2, [pc, #340]	; (800250c <main+0x348>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* creation of debugUart */
  debugUartHandle = osThreadNew(startDebugUart, NULL, &debugUart_attributes);
 80023ba:	4a55      	ldr	r2, [pc, #340]	; (8002510 <main+0x34c>)
 80023bc:	2100      	movs	r1, #0
 80023be:	4855      	ldr	r0, [pc, #340]	; (8002514 <main+0x350>)
 80023c0:	f00c f940 	bl	800e644 <osThreadNew>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a54      	ldr	r2, [pc, #336]	; (8002518 <main+0x354>)
 80023c8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Fault_Events */
  Fault_EventsHandle = osEventFlagsNew(&Fault_Events_attributes);
 80023ca:	4854      	ldr	r0, [pc, #336]	; (800251c <main+0x358>)
 80023cc:	f00c fa14 	bl	800e7f8 <osEventFlagsNew>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a53      	ldr	r2, [pc, #332]	; (8002520 <main+0x35c>)
 80023d4:	6013      	str	r3, [r2, #0]
	   bit 8: fault 9
	   bit 9: standard boot
	   bit 10: edl boot
	   bit 11: uefi boot
   */
  if (Fault_EventsHandle == NULL)
 80023d6:	4b52      	ldr	r3, [pc, #328]	; (8002520 <main+0x35c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <main+0x22c>
  {
	  // Event flags object not created, handle failure.
	  DevUI_Error_Handler("Faults Event Flag could not be created.\r\n",HAL_ERROR,0,0,true);
 80023de:	2301      	movs	r3, #1
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	2200      	movs	r2, #0
 80023e6:	2101      	movs	r1, #1
 80023e8:	484e      	ldr	r0, [pc, #312]	; (8002524 <main+0x360>)
 80023ea:	f001 f887 	bl	80034fc <DevUI_Error_Handler>
 80023ee:	e006      	b.n	80023fe <main+0x23a>
  }
  else
  {
	  // clear all event flags
	  osEventFlagsClear(Fault_EventsHandle, 0xFFFF);
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <main+0x35c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023f8:	4618      	mov	r0, r3
 80023fa:	f00c fa4f 	bl	800e89c <osEventFlagsClear>
  }
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80023fe:	f00c f8eb 	bl	800e5d8 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8002402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002406:	f005 fc55 	bl	8007cb4 <HAL_Delay>
	  if (!x) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d112      	bne.n	8002436 <main+0x272>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002416:	4844      	ldr	r0, [pc, #272]	; (8002528 <main+0x364>)
 8002418:	f007 f8cc 	bl	80095b4 <HAL_GPIO_WritePin>
		  x=1;
 800241c:	2301      	movs	r3, #1
 800241e:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	2110      	movs	r1, #16
 8002424:	4841      	ldr	r0, [pc, #260]	; (800252c <main+0x368>)
 8002426:	f007 f8c5 	bl	80095b4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2110      	movs	r1, #16
 800242e:	483f      	ldr	r0, [pc, #252]	; (800252c <main+0x368>)
 8002430:	f007 f8c0 	bl	80095b4 <HAL_GPIO_WritePin>
 8002434:	e7e5      	b.n	8002402 <main+0x23e>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243c:	483a      	ldr	r0, [pc, #232]	; (8002528 <main+0x364>)
 800243e:	f007 f8b9 	bl	80095b4 <HAL_GPIO_WritePin>
		  x=0;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2110      	movs	r1, #16
 800244a:	4838      	ldr	r0, [pc, #224]	; (800252c <main+0x368>)
 800244c:	f007 f8b2 	bl	80095b4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	2110      	movs	r1, #16
 8002454:	4835      	ldr	r0, [pc, #212]	; (800252c <main+0x368>)
 8002456:	f007 f8ad 	bl	80095b4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800245a:	e7d2      	b.n	8002402 <main+0x23e>
 800245c:	2002e92c 	.word	0x2002e92c
 8002460:	2002976c 	.word	0x2002976c
 8002464:	2002bf00 	.word	0x2002bf00
 8002468:	0801a42c 	.word	0x0801a42c
 800246c:	2002e9c4 	.word	0x2002e9c4
 8002470:	20028dfc 	.word	0x20028dfc
 8002474:	0801a444 	.word	0x0801a444
 8002478:	2002c21c 	.word	0x2002c21c
 800247c:	2002bfac 	.word	0x2002bfac
 8002480:	0801a45c 	.word	0x0801a45c
 8002484:	2002bff4 	.word	0x2002bff4
 8002488:	2002e940 	.word	0x2002e940
 800248c:	20029384 	.word	0x20029384
 8002490:	2002be80 	.word	0x2002be80
 8002494:	2002c154 	.word	0x2002c154
 8002498:	20028cc4 	.word	0x20028cc4
 800249c:	0801a474 	.word	0x0801a474
 80024a0:	0801a488 	.word	0x0801a488
 80024a4:	0801b150 	.word	0x0801b150
 80024a8:	0800495d 	.word	0x0800495d
 80024ac:	2002e9c0 	.word	0x2002e9c0
 80024b0:	0801b174 	.word	0x0801b174
 80024b4:	0800497d 	.word	0x0800497d
 80024b8:	20031198 	.word	0x20031198
 80024bc:	0801b198 	.word	0x0801b198
 80024c0:	08004a59 	.word	0x08004a59
 80024c4:	20031194 	.word	0x20031194
 80024c8:	0801b1bc 	.word	0x0801b1bc
 80024cc:	08004af9 	.word	0x08004af9
 80024d0:	2002bfa8 	.word	0x2002bfa8
 80024d4:	0801b1e0 	.word	0x0801b1e0
 80024d8:	08004c3d 	.word	0x08004c3d
 80024dc:	2002c150 	.word	0x2002c150
 80024e0:	0801b204 	.word	0x0801b204
 80024e4:	08004dbd 	.word	0x08004dbd
 80024e8:	20028dec 	.word	0x20028dec
 80024ec:	0801b228 	.word	0x0801b228
 80024f0:	08004e31 	.word	0x08004e31
 80024f4:	2002e938 	.word	0x2002e938
 80024f8:	0801b24c 	.word	0x0801b24c
 80024fc:	08005041 	.word	0x08005041
 8002500:	2002be7c 	.word	0x2002be7c
 8002504:	0801b270 	.word	0x0801b270
 8002508:	080050b9 	.word	0x080050b9
 800250c:	2002e93c 	.word	0x2002e93c
 8002510:	0801b294 	.word	0x0801b294
 8002514:	08005101 	.word	0x08005101
 8002518:	2002c0bc 	.word	0x2002c0bc
 800251c:	0801b2b8 	.word	0x0801b2b8
 8002520:	20028d44 	.word	0x20028d44
 8002524:	0801a4a4 	.word	0x0801a4a4
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b0b8      	sub	sp, #224	; 0xe0
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800253a:	2234      	movs	r2, #52	; 0x34
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f013 fb46 	bl	8015bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002544:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	2290      	movs	r2, #144	; 0x90
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f013 fb37 	bl	8015bd0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002562:	f008 f94f 	bl	800a804 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002566:	4b43      	ldr	r3, [pc, #268]	; (8002674 <SystemClock_Config+0x144>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a42      	ldr	r2, [pc, #264]	; (8002674 <SystemClock_Config+0x144>)
 800256c:	f023 0318 	bic.w	r3, r3, #24
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b40      	ldr	r3, [pc, #256]	; (8002674 <SystemClock_Config+0x144>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a3f      	ldr	r2, [pc, #252]	; (8002674 <SystemClock_Config+0x144>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <SystemClock_Config+0x144>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <SystemClock_Config+0x148>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002592:	4a39      	ldr	r2, [pc, #228]	; (8002678 <SystemClock_Config+0x148>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <SystemClock_Config+0x148>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80025a6:	2305      	movs	r3, #5
 80025a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 80025c8:	230f      	movs	r3, #15
 80025ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80025ce:	2390      	movs	r3, #144	; 0x90
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80025da:	2305      	movs	r3, #5
 80025dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025e4:	4618      	mov	r0, r3
 80025e6:	f008 f91d 	bl	800a824 <HAL_RCC_OscConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025f0:	f002 fe7c 	bl	80052ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f4:	230f      	movs	r3, #15
 80025f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002606:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800260a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002616:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800261a:	2103      	movs	r1, #3
 800261c:	4618      	mov	r0, r3
 800261e:	f008 fbaf 	bl	800ad80 <HAL_RCC_ClockConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002628:	f002 fe60 	bl	80052ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <SystemClock_Config+0x14c>)
 800262e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002636:	2300      	movs	r3, #0
 8002638:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800263a:	2300      	movs	r3, #0
 800263c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800263e:	2300      	movs	r3, #0
 8002640:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002642:	2300      	movs	r3, #0
 8002644:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002646:	2300      	movs	r3, #0
 8002648:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800264a:	2300      	movs	r3, #0
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800264e:	2300      	movs	r3, #0
 8002650:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	4618      	mov	r0, r3
 800265e:	f008 fd97 	bl	800b190 <HAL_RCCEx_PeriphCLKConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002668:	f002 fe40 	bl	80052ec <Error_Handler>
  }
}
 800266c:	bf00      	nop
 800266e:	37e0      	adds	r7, #224	; 0xe0
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	40007000 	.word	0x40007000
 800267c:	0023d620 	.word	0x0023d620

08002680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002686:	463b      	mov	r3, r7
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002692:	4b67      	ldr	r3, [pc, #412]	; (8002830 <MX_ADC1_Init+0x1b0>)
 8002694:	4a67      	ldr	r2, [pc, #412]	; (8002834 <MX_ADC1_Init+0x1b4>)
 8002696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002698:	4b65      	ldr	r3, [pc, #404]	; (8002830 <MX_ADC1_Init+0x1b0>)
 800269a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800269e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026a0:	4b63      	ldr	r3, [pc, #396]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026a6:	4b62      	ldr	r3, [pc, #392]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026b2:	4b5f      	ldr	r3, [pc, #380]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026c0:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026c2:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <MX_ADC1_Init+0x1b8>)
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026c6:	4b5a      	ldr	r3, [pc, #360]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80026cc:	4b58      	ldr	r3, [pc, #352]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026ce:	220b      	movs	r2, #11
 80026d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80026d2:	4b57      	ldr	r3, [pc, #348]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026da:	4b55      	ldr	r3, [pc, #340]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026dc:	2201      	movs	r2, #1
 80026de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026e0:	4853      	ldr	r0, [pc, #332]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80026e2:	f005 fb0b 	bl	8007cfc <HAL_ADC_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80026ec:	f002 fdfe 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026f0:	2303      	movs	r3, #3
 80026f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026f4:	2301      	movs	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80026f8:	2307      	movs	r3, #7
 80026fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	484b      	ldr	r0, [pc, #300]	; (8002830 <MX_ADC1_Init+0x1b0>)
 8002702:	f005 fdd7 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800270c:	f002 fdee 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002710:	2304      	movs	r3, #4
 8002712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002714:	2302      	movs	r3, #2
 8002716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002718:	463b      	mov	r3, r7
 800271a:	4619      	mov	r1, r3
 800271c:	4844      	ldr	r0, [pc, #272]	; (8002830 <MX_ADC1_Init+0x1b0>)
 800271e:	f005 fdc9 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002728:	f002 fde0 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800272c:	2305      	movs	r3, #5
 800272e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002730:	2303      	movs	r3, #3
 8002732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	4619      	mov	r1, r3
 8002738:	483d      	ldr	r0, [pc, #244]	; (8002830 <MX_ADC1_Init+0x1b0>)
 800273a:	f005 fdbb 	bl	80082b4 <HAL_ADC_ConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002744:	f002 fdd2 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002748:	2306      	movs	r3, #6
 800274a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800274c:	2304      	movs	r3, #4
 800274e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002750:	463b      	mov	r3, r7
 8002752:	4619      	mov	r1, r3
 8002754:	4836      	ldr	r0, [pc, #216]	; (8002830 <MX_ADC1_Init+0x1b0>)
 8002756:	f005 fdad 	bl	80082b4 <HAL_ADC_ConfigChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002760:	f002 fdc4 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002764:	2307      	movs	r3, #7
 8002766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002768:	2305      	movs	r3, #5
 800276a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276c:	463b      	mov	r3, r7
 800276e:	4619      	mov	r1, r3
 8002770:	482f      	ldr	r0, [pc, #188]	; (8002830 <MX_ADC1_Init+0x1b0>)
 8002772:	f005 fd9f 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800277c:	f002 fdb6 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002780:	2308      	movs	r3, #8
 8002782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002784:	2306      	movs	r3, #6
 8002786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	4828      	ldr	r0, [pc, #160]	; (8002830 <MX_ADC1_Init+0x1b0>)
 800278e:	f005 fd91 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002798:	f002 fda8 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800279c:	2309      	movs	r3, #9
 800279e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80027a0:	2307      	movs	r3, #7
 80027a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4821      	ldr	r0, [pc, #132]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80027aa:	f005 fd83 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80027b4:	f002 fd9a 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80027b8:	230a      	movs	r3, #10
 80027ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80027bc:	2308      	movs	r3, #8
 80027be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c0:	463b      	mov	r3, r7
 80027c2:	4619      	mov	r1, r3
 80027c4:	481a      	ldr	r0, [pc, #104]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80027c6:	f005 fd75 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80027d0:	f002 fd8c 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80027d4:	230b      	movs	r3, #11
 80027d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80027d8:	2309      	movs	r3, #9
 80027da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	4813      	ldr	r0, [pc, #76]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80027e2:	f005 fd67 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80027ec:	f002 fd7e 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80027f0:	230c      	movs	r3, #12
 80027f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80027f4:	230a      	movs	r3, #10
 80027f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <MX_ADC1_Init+0x1b0>)
 80027fe:	f005 fd59 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002808:	f002 fd70 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800280c:	230d      	movs	r3, #13
 800280e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002810:	230b      	movs	r3, #11
 8002812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_ADC1_Init+0x1b0>)
 800281a:	f005 fd4b 	bl	80082b4 <HAL_ADC_ConfigChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002824:	f002 fd62 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2002bf00 	.word	0x2002bf00
 8002834:	40012000 	.word	0x40012000
 8002838:	0f000001 	.word	0x0f000001

0800283c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002842:	463b      	mov	r3, r7
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <MX_ADC2_Init+0xec>)
 8002850:	4a36      	ldr	r2, [pc, #216]	; (800292c <MX_ADC2_Init+0xf0>)
 8002852:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002854:	4b34      	ldr	r3, [pc, #208]	; (8002928 <MX_ADC2_Init+0xec>)
 8002856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800285a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <MX_ADC2_Init+0xec>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <MX_ADC2_Init+0xec>)
 8002864:	2201      	movs	r2, #1
 8002866:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <MX_ADC2_Init+0xec>)
 800286a:	2201      	movs	r2, #1
 800286c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <MX_ADC2_Init+0xec>)
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <MX_ADC2_Init+0xec>)
 8002878:	2200      	movs	r2, #0
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <MX_ADC2_Init+0xec>)
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <MX_ADC2_Init+0xf4>)
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <MX_ADC2_Init+0xec>)
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <MX_ADC2_Init+0xec>)
 800288a:	2204      	movs	r2, #4
 800288c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <MX_ADC2_Init+0xec>)
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <MX_ADC2_Init+0xec>)
 8002898:	2201      	movs	r2, #1
 800289a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800289c:	4822      	ldr	r0, [pc, #136]	; (8002928 <MX_ADC2_Init+0xec>)
 800289e:	f005 fa2d 	bl	8007cfc <HAL_ADC_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80028a8:	f002 fd20 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028b0:	2301      	movs	r3, #1
 80028b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80028b4:	2307      	movs	r3, #7
 80028b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028b8:	463b      	mov	r3, r7
 80028ba:	4619      	mov	r1, r3
 80028bc:	481a      	ldr	r0, [pc, #104]	; (8002928 <MX_ADC2_Init+0xec>)
 80028be:	f005 fcf9 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80028c8:	f002 fd10 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028d0:	2302      	movs	r3, #2
 80028d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028d4:	463b      	mov	r3, r7
 80028d6:	4619      	mov	r1, r3
 80028d8:	4813      	ldr	r0, [pc, #76]	; (8002928 <MX_ADC2_Init+0xec>)
 80028da:	f005 fceb 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80028e4:	f002 fd02 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80028e8:	230e      	movs	r3, #14
 80028ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028ec:	2303      	movs	r3, #3
 80028ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <MX_ADC2_Init+0xec>)
 80028f6:	f005 fcdd 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002900:	f002 fcf4 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002904:	230f      	movs	r3, #15
 8002906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002908:	2304      	movs	r3, #4
 800290a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800290c:	463b      	mov	r3, r7
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_ADC2_Init+0xec>)
 8002912:	f005 fccf 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800291c:	f002 fce6 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20028dfc 	.word	0x20028dfc
 800292c:	40012100 	.word	0x40012100
 8002930:	0f000001 	.word	0x0f000001

08002934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800293a:	463b      	mov	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002946:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002948:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <MX_ADC3_Init+0x128>)
 800294a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800294c:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <MX_ADC3_Init+0x124>)
 800294e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002952:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <MX_ADC3_Init+0x124>)
 800295c:	2201      	movs	r2, #1
 800295e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002962:	2201      	movs	r2, #1
 8002964:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002970:	2200      	movs	r2, #0
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002976:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <MX_ADC3_Init+0x12c>)
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <MX_ADC3_Init+0x124>)
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002982:	2206      	movs	r2, #6
 8002984:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800298e:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002990:	2201      	movs	r2, #1
 8002992:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002994:	4830      	ldr	r0, [pc, #192]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002996:	f005 f9b1 	bl	8007cfc <HAL_ADC_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80029a0:	f002 fca4 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80029a4:	2302      	movs	r3, #2
 80029a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80029ac:	2307      	movs	r3, #7
 80029ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029b0:	463b      	mov	r3, r7
 80029b2:	4619      	mov	r1, r3
 80029b4:	4828      	ldr	r0, [pc, #160]	; (8002a58 <MX_ADC3_Init+0x124>)
 80029b6:	f005 fc7d 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80029c0:	f002 fc94 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029c4:	2304      	movs	r3, #4
 80029c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80029c8:	2302      	movs	r3, #2
 80029ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029cc:	463b      	mov	r3, r7
 80029ce:	4619      	mov	r1, r3
 80029d0:	4821      	ldr	r0, [pc, #132]	; (8002a58 <MX_ADC3_Init+0x124>)
 80029d2:	f005 fc6f 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80029dc:	f002 fc86 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029e0:	2305      	movs	r3, #5
 80029e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029e4:	2303      	movs	r3, #3
 80029e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	4619      	mov	r1, r3
 80029ec:	481a      	ldr	r0, [pc, #104]	; (8002a58 <MX_ADC3_Init+0x124>)
 80029ee:	f005 fc61 	bl	80082b4 <HAL_ADC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80029f8:	f002 fc78 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80029fc:	2306      	movs	r3, #6
 80029fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a00:	2304      	movs	r3, #4
 8002a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a04:	463b      	mov	r3, r7
 8002a06:	4619      	mov	r1, r3
 8002a08:	4813      	ldr	r0, [pc, #76]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002a0a:	f005 fc53 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8002a14:	f002 fc6a 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002a18:	2307      	movs	r3, #7
 8002a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002a26:	f005 fc45 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002a30:	f002 fc5c 	bl	80052ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a34:	2308      	movs	r3, #8
 8002a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002a38:	2306      	movs	r3, #6
 8002a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_ADC3_Init+0x124>)
 8002a42:	f005 fc37 	bl	80082b4 <HAL_ADC_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002a4c:	f002 fc4e 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2002bfac 	.word	0x2002bfac
 8002a5c:	40012200 	.word	0x40012200
 8002a60:	0f000001 	.word	0x0f000001

08002a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <MX_I2C1_Init+0x78>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <MX_I2C1_Init+0x7c>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a9e:	480e      	ldr	r0, [pc, #56]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002aa0:	f006 fde0 	bl	8009664 <HAL_I2C_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002aaa:	f002 fc1f 	bl	80052ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4809      	ldr	r0, [pc, #36]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002ab2:	f007 fca7 	bl	800a404 <HAL_I2CEx_ConfigAnalogFilter>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002abc:	f002 fc16 	bl	80052ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_I2C1_Init+0x74>)
 8002ac4:	f007 fce9 	bl	800a49a <HAL_I2CEx_ConfigDigitalFilter>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ace:	f002 fc0d 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20028e44 	.word	0x20028e44
 8002adc:	40005400 	.word	0x40005400
 8002ae0:	007074af 	.word	0x007074af

08002ae4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <MX_I2C2_Init+0x78>)
 8002aec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <MX_I2C2_Init+0x7c>)
 8002af2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b1e:	480e      	ldr	r0, [pc, #56]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b20:	f006 fda0 	bl	8009664 <HAL_I2C_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002b2a:	f002 fbdf 	bl	80052ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b32:	f007 fc67 	bl	800a404 <HAL_I2CEx_ConfigAnalogFilter>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002b3c:	f002 fbd6 	bl	80052ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b40:	2100      	movs	r1, #0
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_I2C2_Init+0x74>)
 8002b44:	f007 fca9 	bl	800a49a <HAL_I2CEx_ConfigDigitalFilter>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002b4e:	f002 fbcd 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20029294 	.word	0x20029294
 8002b5c:	40005800 	.word	0x40005800
 8002b60:	007074af 	.word	0x007074af

08002b64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <MX_I2C3_Init+0x7c>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <MX_I2C3_Init+0x80>)
 8002b72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b76:	2298      	movs	r2, #152	; 0x98
 8002b78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b9e:	480f      	ldr	r0, [pc, #60]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002ba0:	f006 fd60 	bl	8009664 <HAL_I2C_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002baa:	f002 fb9f 	bl	80052ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	480a      	ldr	r0, [pc, #40]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002bb2:	f007 fc27 	bl	800a404 <HAL_I2CEx_ConfigAnalogFilter>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002bbc:	f002 fb96 	bl	80052ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4806      	ldr	r0, [pc, #24]	; (8002bdc <MX_I2C3_Init+0x78>)
 8002bc4:	f007 fc69 	bl	800a49a <HAL_I2CEx_ConfigDigitalFilter>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002bce:	f002 fb8d 	bl	80052ec <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002bd2:	2004      	movs	r0, #4
 8002bd4:	f007 fcae 	bl	800a534 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20028c2c 	.word	0x20028c2c
 8002be0:	40005c00 	.word	0x40005c00
 8002be4:	100029fe 	.word	0x100029fe

08002be8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <MX_I2C4_Init+0x78>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <MX_I2C4_Init+0x7c>)
 8002bf6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c04:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002c22:	480e      	ldr	r0, [pc, #56]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c24:	f006 fd1e 	bl	8009664 <HAL_I2C_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002c2e:	f002 fb5d 	bl	80052ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c32:	2100      	movs	r1, #0
 8002c34:	4809      	ldr	r0, [pc, #36]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c36:	f007 fbe5 	bl	800a404 <HAL_I2CEx_ConfigAnalogFilter>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002c40:	f002 fb54 	bl	80052ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002c44:	2100      	movs	r1, #0
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_I2C4_Init+0x74>)
 8002c48:	f007 fc27 	bl	800a49a <HAL_I2CEx_ConfigDigitalFilter>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002c52:	f002 fb4b 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20028c78 	.word	0x20028c78
 8002c60:	40006000 	.word	0x40006000
 8002c64:	007074af 	.word	0x007074af

08002c68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <MX_RTC_Init+0x44>)
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <MX_RTC_Init+0x48>)
 8002c70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_RTC_Init+0x44>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <MX_RTC_Init+0x44>)
 8002c7a:	227f      	movs	r2, #127	; 0x7f
 8002c7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_RTC_Init+0x44>)
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_RTC_Init+0x44>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <MX_RTC_Init+0x44>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_RTC_Init+0x44>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <MX_RTC_Init+0x44>)
 8002c98:	f008 fea0 	bl	800b9dc <HAL_RTC_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002ca2:	f002 fb23 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2002c130 	.word	0x2002c130
 8002cb0:	40002800 	.word	0x40002800

08002cb4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cba:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <MX_SPI4_Init+0x78>)
 8002cbc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cc4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cd2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cea:	2210      	movs	r2, #16
 8002cec:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002d02:	2207      	movs	r2, #7
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_SPI4_Init+0x74>)
 8002d14:	f008 ff0a 	bl	800bb2c <HAL_SPI_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002d1e:	f002 fae5 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20028b68 	.word	0x20028b68
 8002d2c:	40013400 	.word	0x40013400

08002d30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <MX_SPI5_Init+0x78>)
 8002d38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d4e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d62:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d66:	2218      	movs	r2, #24
 8002d68:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d7e:	2207      	movs	r2, #7
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <MX_SPI5_Init+0x74>)
 8002d90:	f008 fecc 	bl	800bb2c <HAL_SPI_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002d9a:	f002 faa7 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20028d48 	.word	0x20028d48
 8002da8:	40015000 	.word	0x40015000

08002dac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	; 0x38
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002de0:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <MX_TIM4_Init+0xec>)
 8002de2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e04:	4823      	ldr	r0, [pc, #140]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e06:	f009 fac5 	bl	800c394 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002e10:	f002 fa6c 	bl	80052ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	481c      	ldr	r0, [pc, #112]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e22:	f009 fd79 	bl	800c918 <HAL_TIM_ConfigClockSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002e2c:	f002 fa5e 	bl	80052ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e30:	4818      	ldr	r0, [pc, #96]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e32:	f009 fb05 	bl	800c440 <HAL_TIM_PWM_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002e3c:	f002 fa56 	bl	80052ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4811      	ldr	r0, [pc, #68]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e50:	f00a f9e8 	bl	800d224 <HAL_TIMEx_MasterConfigSynchronization>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002e5a:	f002 fa47 	bl	80052ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5e:	2360      	movs	r3, #96	; 0x60
 8002e60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6e:	463b      	mov	r3, r7
 8002e70:	2200      	movs	r2, #0
 8002e72:	4619      	mov	r1, r3
 8002e74:	4807      	ldr	r0, [pc, #28]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e76:	f009 fc37 	bl	800c6e8 <HAL_TIM_PWM_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002e80:	f002 fa34 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e84:	4803      	ldr	r0, [pc, #12]	; (8002e94 <MX_TIM4_Init+0xe8>)
 8002e86:	f003 ff9d 	bl	8006dc4 <HAL_TIM_MspPostInit>

}
 8002e8a:	bf00      	nop
 8002e8c:	3738      	adds	r7, #56	; 0x38
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20028dac 	.word	0x20028dac
 8002e98:	40000800 	.word	0x40000800

08002e9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ed0:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <MX_TIM5_Init+0x100>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ed4:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ef4:	4828      	ldr	r0, [pc, #160]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002ef6:	f009 fa4d 	bl	800c394 <HAL_TIM_Base_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002f00:	f002 f9f4 	bl	80052ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4821      	ldr	r0, [pc, #132]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f12:	f009 fd01 	bl	800c918 <HAL_TIM_ConfigClockSource>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002f1c:	f002 f9e6 	bl	80052ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002f20:	481d      	ldr	r0, [pc, #116]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f22:	f009 fa8d 	bl	800c440 <HAL_TIM_PWM_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002f2c:	f002 f9de 	bl	80052ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4816      	ldr	r0, [pc, #88]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f40:	f00a f970 	bl	800d224 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002f4a:	f002 f9cf 	bl	80052ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f4e:	2360      	movs	r3, #96	; 0x60
 8002f50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	4619      	mov	r1, r3
 8002f64:	480c      	ldr	r0, [pc, #48]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f66:	f009 fbbf 	bl	800c6e8 <HAL_TIM_PWM_ConfigChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002f70:	f002 f9bc 	bl	80052ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	2204      	movs	r2, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4807      	ldr	r0, [pc, #28]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f7c:	f009 fbb4 	bl	800c6e8 <HAL_TIM_PWM_ConfigChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002f86:	f002 f9b1 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002f8a:	4803      	ldr	r0, [pc, #12]	; (8002f98 <MX_TIM5_Init+0xfc>)
 8002f8c:	f003 ff1a 	bl	8006dc4 <HAL_TIM_MspPostInit>

}
 8002f90:	bf00      	nop
 8002f92:	3738      	adds	r7, #56	; 0x38
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20029344 	.word	0x20029344
 8002f9c:	40000c00 	.word	0x40000c00

08002fa0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <MX_UART4_Init+0x5c>)
 8002fa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_UART4_Init+0x58>)
 8002fe4:	f00a f9ca 	bl	800d37c <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002fee:	f002 f97d 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2002e940 	.word	0x2002e940
 8002ffc:	40004c00 	.word	0x40004c00

08003000 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_UART5_Init+0x58>)
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <MX_UART5_Init+0x5c>)
 8003008:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_UART5_Init+0x58>)
 800300c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003010:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_UART5_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_UART5_Init+0x58>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_UART5_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_UART5_Init+0x58>)
 8003026:	220c      	movs	r2, #12
 8003028:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_UART5_Init+0x58>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_UART5_Init+0x58>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_UART5_Init+0x58>)
 8003038:	2200      	movs	r2, #0
 800303a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_UART5_Init+0x58>)
 800303e:	2200      	movs	r2, #0
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_UART5_Init+0x58>)
 8003044:	f00a f99a 	bl	800d37c <HAL_UART_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800304e:	f002 f94d 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2002be80 	.word	0x2002be80
 800305c:	40005000 	.word	0x40005000

08003060 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_UART7_Init+0x58>)
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <MX_UART7_Init+0x5c>)
 8003068:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_UART7_Init+0x58>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_UART7_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <MX_UART7_Init+0x58>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_UART7_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_UART7_Init+0x58>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_UART7_Init+0x58>)
 800308c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003090:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_UART7_Init+0x58>)
 8003094:	2200      	movs	r2, #0
 8003096:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <MX_UART7_Init+0x58>)
 800309a:	2200      	movs	r2, #0
 800309c:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_UART7_Init+0x58>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_UART7_Init+0x58>)
 80030a6:	f00a f969 	bl	800d37c <HAL_UART_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 80030b0:	f002 f91c 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20028cc4 	.word	0x20028cc4
 80030bc:	40007800 	.word	0x40007800

080030c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80030ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ce:	2206      	movs	r2, #6
 80030d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030d4:	2202      	movs	r2, #2
 80030d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030e0:	2202      	movs	r2, #2
 80030e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003102:	4805      	ldr	r0, [pc, #20]	; (8003118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003104:	f007 fa36 	bl	800a574 <HAL_PCD_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800310e:	f002 f8ed 	bl	80052ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20028e90 	.word	0x20028e90

0800311c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <MX_DMA_Init+0xa0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a25      	ldr	r2, [pc, #148]	; (80031bc <MX_DMA_Init+0xa0>)
 8003128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <MX_DMA_Init+0xa0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <MX_DMA_Init+0xa0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <MX_DMA_Init+0xa0>)
 8003140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <MX_DMA_Init+0xa0>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2105      	movs	r1, #5
 8003156:	200b      	movs	r0, #11
 8003158:	f005 fc34 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800315c:	200b      	movs	r0, #11
 800315e:	f005 fc4d 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2105      	movs	r1, #5
 8003166:	200d      	movs	r0, #13
 8003168:	f005 fc2c 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800316c:	200d      	movs	r0, #13
 800316e:	f005 fc45 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2105      	movs	r1, #5
 8003176:	200e      	movs	r0, #14
 8003178:	f005 fc24 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800317c:	200e      	movs	r0, #14
 800317e:	f005 fc3d 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2105      	movs	r1, #5
 8003186:	2038      	movs	r0, #56	; 0x38
 8003188:	f005 fc1c 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800318c:	2038      	movs	r0, #56	; 0x38
 800318e:	f005 fc35 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2105      	movs	r1, #5
 8003196:	2039      	movs	r0, #57	; 0x39
 8003198:	f005 fc14 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800319c:	2039      	movs	r0, #57	; 0x39
 800319e:	f005 fc2d 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2105      	movs	r1, #5
 80031a6:	203a      	movs	r0, #58	; 0x3a
 80031a8:	f005 fc0c 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031ac:	203a      	movs	r0, #58	; 0x3a
 80031ae:	f005 fc25 	bl	80089fc <HAL_NVIC_EnableIRQ>

}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	; 0x40
 80031c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d6:	4bb0      	ldr	r3, [pc, #704]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4aaf      	ldr	r2, [pc, #700]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4bad      	ldr	r3, [pc, #692]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031ee:	4baa      	ldr	r3, [pc, #680]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4aa9      	ldr	r2, [pc, #676]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80031f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4ba7      	ldr	r3, [pc, #668]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	4ba4      	ldr	r3, [pc, #656]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4aa3      	ldr	r2, [pc, #652]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4ba1      	ldr	r3, [pc, #644]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321e:	4b9e      	ldr	r3, [pc, #632]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a9d      	ldr	r2, [pc, #628]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b9b      	ldr	r3, [pc, #620]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	4b98      	ldr	r3, [pc, #608]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a97      	ldr	r2, [pc, #604]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b95      	ldr	r3, [pc, #596]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800324e:	4b92      	ldr	r3, [pc, #584]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a91      	ldr	r2, [pc, #580]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b8f      	ldr	r3, [pc, #572]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003266:	4b8c      	ldr	r3, [pc, #560]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a8b      	ldr	r2, [pc, #556]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800326c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b89      	ldr	r3, [pc, #548]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800327e:	4b86      	ldr	r3, [pc, #536]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a85      	ldr	r2, [pc, #532]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b83      	ldr	r3, [pc, #524]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003296:	4b80      	ldr	r3, [pc, #512]	; (8003498 <MX_GPIO_Init+0x2d8>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a7f      	ldr	r2, [pc, #508]	; (8003498 <MX_GPIO_Init+0x2d8>)
 800329c:	f043 0308 	orr.w	r3, r3, #8
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ae:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a79      	ldr	r2, [pc, #484]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b77      	ldr	r3, [pc, #476]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032c6:	4b74      	ldr	r3, [pc, #464]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a73      	ldr	r2, [pc, #460]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b71      	ldr	r3, [pc, #452]	; (8003498 <MX_GPIO_Init+0x2d8>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 80032de:	2200      	movs	r2, #0
 80032e0:	2110      	movs	r1, #16
 80032e2:	486e      	ldr	r0, [pc, #440]	; (800349c <MX_GPIO_Init+0x2dc>)
 80032e4:	f006 f966 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 80032e8:	2200      	movs	r2, #0
 80032ea:	f244 012f 	movw	r1, #16431	; 0x402f
 80032ee:	486c      	ldr	r0, [pc, #432]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80032f0:	f006 f960 	bl	80095b4 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80032f4:	2200      	movs	r2, #0
 80032f6:	f241 1150 	movw	r1, #4432	; 0x1150
 80032fa:	486a      	ldr	r0, [pc, #424]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 80032fc:	f006 f95a 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2103      	movs	r1, #3
 8003304:	4868      	ldr	r0, [pc, #416]	; (80034a8 <MX_GPIO_Init+0x2e8>)
 8003306:	f006 f955 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 800330a:	2200      	movs	r2, #0
 800330c:	f243 013c 	movw	r1, #12348	; 0x303c
 8003310:	4866      	ldr	r0, [pc, #408]	; (80034ac <MX_GPIO_Init+0x2ec>)
 8003312:	f006 f94f 	bl	80095b4 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8003316:	2200      	movs	r2, #0
 8003318:	f241 0104 	movw	r1, #4100	; 0x1004
 800331c:	4864      	ldr	r0, [pc, #400]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 800331e:	f006 f949 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8003322:	2200      	movs	r2, #0
 8003324:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003328:	4862      	ldr	r0, [pc, #392]	; (80034b4 <MX_GPIO_Init+0x2f4>)
 800332a:	f006 f943 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	211b      	movs	r1, #27
 8003332:	4861      	ldr	r0, [pc, #388]	; (80034b8 <MX_GPIO_Init+0x2f8>)
 8003334:	f006 f93e 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8003338:	2310      	movs	r3, #16
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333c:	2301      	movs	r3, #1
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003344:	2302      	movs	r3, #2
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4619      	mov	r1, r3
 800334e:	4853      	ldr	r0, [pc, #332]	; (800349c <MX_GPIO_Init+0x2dc>)
 8003350:	f005 ff6c 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8003354:	2308      	movs	r3, #8
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003358:	2300      	movs	r3, #0
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8003360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003364:	4619      	mov	r1, r3
 8003366:	484d      	ldr	r0, [pc, #308]	; (800349c <MX_GPIO_Init+0x2dc>)
 8003368:	f005 ff60 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 800336c:	f244 032f 	movw	r3, #16431	; 0x402f
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003372:	2301      	movs	r3, #1
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800337e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003382:	4619      	mov	r1, r3
 8003384:	4846      	ldr	r0, [pc, #280]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003386:	f005 ff51 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8003396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339a:	4619      	mov	r1, r3
 800339c:	4845      	ldr	r0, [pc, #276]	; (80034b4 <MX_GPIO_Init+0x2f4>)
 800339e:	f005 ff45 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 80033a2:	f241 1350 	movw	r3, #4432	; 0x1150
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a8:	2301      	movs	r3, #1
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	2300      	movs	r3, #0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b8:	4619      	mov	r1, r3
 80033ba:	483a      	ldr	r0, [pc, #232]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 80033bc:	f005 ff36 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 80033c0:	23f0      	movs	r3, #240	; 0xf0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <MX_GPIO_Init+0x2fc>)
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80033cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033d0:	4619      	mov	r1, r3
 80033d2:	4835      	ldr	r0, [pc, #212]	; (80034a8 <MX_GPIO_Init+0x2e8>)
 80033d4:	f005 ff2a 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 80033d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033de:	2300      	movs	r3, #0
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ea:	4619      	mov	r1, r3
 80033ec:	4834      	ldr	r0, [pc, #208]	; (80034c0 <MX_GPIO_Init+0x300>)
 80033ee:	f005 ff1d 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 80033f2:	f64f 7310 	movw	r3, #65296	; 0xff10
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003404:	4619      	mov	r1, r3
 8003406:	482f      	ldr	r0, [pc, #188]	; (80034c4 <MX_GPIO_Init+0x304>)
 8003408:	f005 ff10 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 800340c:	2303      	movs	r3, #3
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003410:	2301      	movs	r3, #1
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2300      	movs	r3, #0
 800341a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800341c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003420:	4619      	mov	r1, r3
 8003422:	4821      	ldr	r0, [pc, #132]	; (80034a8 <MX_GPIO_Init+0x2e8>)
 8003424:	f005 ff02 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8003428:	f243 033c 	movw	r3, #12348	; 0x303c
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342e:	2301      	movs	r3, #1
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800343a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800343e:	4619      	mov	r1, r3
 8003440:	481a      	ldr	r0, [pc, #104]	; (80034ac <MX_GPIO_Init+0x2ec>)
 8003442:	f005 fef3 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8003446:	f241 0304 	movw	r3, #4100	; 0x1004
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800344c:	2301      	movs	r3, #1
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345c:	4619      	mov	r1, r3
 800345e:	4814      	ldr	r0, [pc, #80]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 8003460:	f005 fee4 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8003464:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346a:	2301      	movs	r3, #1
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003472:	2300      	movs	r3, #0
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347a:	4619      	mov	r1, r3
 800347c:	480d      	ldr	r0, [pc, #52]	; (80034b4 <MX_GPIO_Init+0x2f4>)
 800347e:	f005 fed5 	bl	800922c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8003482:	231b      	movs	r3, #27
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	2301      	movs	r3, #1
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003496:	e017      	b.n	80034c8 <MX_GPIO_Init+0x308>
 8003498:	40023800 	.word	0x40023800
 800349c:	40021000 	.word	0x40021000
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40022800 	.word	0x40022800
 80034ac:	40021400 	.word	0x40021400
 80034b0:	40021c00 	.word	0x40021c00
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40022400 	.word	0x40022400
 80034bc:	10210000 	.word	0x10210000
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020c00 	.word	0x40020c00
 80034c8:	4619      	mov	r1, r3
 80034ca:	480b      	ldr	r0, [pc, #44]	; (80034f8 <MX_GPIO_Init+0x338>)
 80034cc:	f005 feae 	bl	800922c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2105      	movs	r1, #5
 80034d4:	200a      	movs	r0, #10
 80034d6:	f005 fa75 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80034da:	200a      	movs	r0, #10
 80034dc:	f005 fa8e 	bl	80089fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2105      	movs	r1, #5
 80034e4:	2017      	movs	r0, #23
 80034e6:	f005 fa6d 	bl	80089c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034ea:	2017      	movs	r0, #23
 80034ec:	f005 fa86 	bl	80089fc <HAL_NVIC_EnableIRQ>

}
 80034f0:	bf00      	nop
 80034f2:	3740      	adds	r7, #64	; 0x40
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40022400 	.word	0x40022400

080034fc <DevUI_Error_Handler>:
// Generic Error Handler for DevUI HAL hardware.
// char *msg is an error message that can be sent to the handler from the caller.
// err_param1 & err_param2 are additional error parameters that can be printed.
// For I2C errors, I2C device address in param1 and register address in param2.
void DevUI_Error_Handler(char *msg, HAL_StatusTypeDef ErrorCode, uint8_t err_param1, uint8_t err_param2, uint8_t critical_fault)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af02      	add	r7, sp, #8
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	70fb      	strb	r3, [r7, #3]
 800350e:	460b      	mov	r3, r1
 8003510:	70bb      	strb	r3, [r7, #2]
 8003512:	4613      	mov	r3, r2
 8003514:	707b      	strb	r3, [r7, #1]
  __ASM volatile ("cpsid i" : : : "memory");
 8003516:	b672      	cpsid	i
}
 8003518:	bf00      	nop
	__disable_irq();
	printf("ERROR: %s" " Code: %d Param1: 0x%x Param2: 0x%x\r\n", msg, ErrorCode, err_param1, err_param2);
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	78b9      	ldrb	r1, [r7, #2]
 800351e:	787b      	ldrb	r3, [r7, #1]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	460b      	mov	r3, r1
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <DevUI_Error_Handler+0x44>)
 8003528:	f013 f9a0 	bl	801686c <iprintf>
	// Set error LED
	//errorLED.fault9 = true;
	// Use event group flag to indicate an error for the startErrorLED task.

	// If the fault is labeled as "critical" stay here.  Else keep running RTOS.
	if (critical_fault == true)
 800352c:	7c3b      	ldrb	r3, [r7, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d100      	bne.n	8003534 <DevUI_Error_Handler+0x38>
	{
	  while (1)
 8003532:	e7fe      	b.n	8003532 <DevUI_Error_Handler+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8003534:	b662      	cpsie	i
}
 8003536:	bf00      	nop
	  }
	}
	else
	{
		__enable_irq();
		return;
 8003538:	bf00      	nop
	}
}
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0801a4d0 	.word	0x0801a4d0

08003544 <__io_putchar>:

int __io_putchar(int ch)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 800354c:	1d39      	adds	r1, r7, #4
 800354e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003552:	2201      	movs	r2, #1
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <__io_putchar+0x20>)
 8003556:	f009 ff5f 	bl	800d418 <HAL_UART_Transmit>

	return ch;
 800355a:	687b      	ldr	r3, [r7, #4]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20028cc4 	.word	0x20028cc4

08003568 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 800356c:	220e      	movs	r2, #14
 800356e:	2100      	movs	r1, #0
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <outputGPIOBufInitialization+0x40>)
 8003572:	f012 fb2d 	bl	8015bd0 <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <outputGPIOBufInitialization+0x44>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f817 	bl	80035b0 <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <outputGPIOBufInitialization+0x44>)
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f811 	bl	80035b0 <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <outputGPIOBufInitialization+0x44>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <outputGPIOBufInitialization+0x40>)
 8003594:	2101      	movs	r1, #1
 8003596:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <outputGPIOBufInitialization+0x44>)
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <outputGPIOBufInitialization+0x40>)
 800359e:	2101      	movs	r1, #1
 80035a0:	54d1      	strb	r1, [r2, r3]
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2002c120 	.word	0x2002c120
 80035ac:	20000020 	.word	0x20000020

080035b0 <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 80035ba:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <setOutputGPIOState+0x228>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d10d      	bne.n	80035e0 <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	2104      	movs	r1, #4
 80035cc:	4883      	ldr	r0, [pc, #524]	; (80037dc <setOutputGPIOState+0x22c>)
 80035ce:	f005 fff1 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 80035d2:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <setOutputGPIOState+0x228>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	b2d1      	uxtb	r1, r2
 80035da:	4a81      	ldr	r2, [pc, #516]	; (80037e0 <setOutputGPIOState+0x230>)
 80035dc:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80035de:	e0f7      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80035e0:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <setOutputGPIOState+0x228>)
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d10d      	bne.n	8003606 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	2110      	movs	r1, #16
 80035f2:	487c      	ldr	r0, [pc, #496]	; (80037e4 <setOutputGPIOState+0x234>)
 80035f4:	f005 ffde 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 80035f8:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <setOutputGPIOState+0x228>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d1      	uxtb	r1, r2
 8003600:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <setOutputGPIOState+0x230>)
 8003602:	54d1      	strb	r1, [r2, r3]
}
 8003604:	e0e4      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 8003606:	4b74      	ldr	r3, [pc, #464]	; (80037d8 <setOutputGPIOState+0x228>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d10d      	bne.n	800362c <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	2140      	movs	r1, #64	; 0x40
 8003618:	4872      	ldr	r0, [pc, #456]	; (80037e4 <setOutputGPIOState+0x234>)
 800361a:	f005 ffcb 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 800361e:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <setOutputGPIOState+0x228>)
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	b2d1      	uxtb	r1, r2
 8003626:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <setOutputGPIOState+0x230>)
 8003628:	54d1      	strb	r1, [r2, r3]
}
 800362a:	e0d1      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <setOutputGPIOState+0x228>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d10e      	bne.n	8003654 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003640:	4868      	ldr	r0, [pc, #416]	; (80037e4 <setOutputGPIOState+0x234>)
 8003642:	f005 ffb7 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003646:	4b64      	ldr	r3, [pc, #400]	; (80037d8 <setOutputGPIOState+0x228>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	b2d1      	uxtb	r1, r2
 800364e:	4a64      	ldr	r2, [pc, #400]	; (80037e0 <setOutputGPIOState+0x230>)
 8003650:	54d1      	strb	r1, [r2, r3]
}
 8003652:	e0bd      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003654:	4b60      	ldr	r3, [pc, #384]	; (80037d8 <setOutputGPIOState+0x228>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d10d      	bne.n	800367a <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	2110      	movs	r1, #16
 8003666:	4860      	ldr	r0, [pc, #384]	; (80037e8 <setOutputGPIOState+0x238>)
 8003668:	f005 ffa4 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 800366c:	4b5a      	ldr	r3, [pc, #360]	; (80037d8 <setOutputGPIOState+0x228>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d1      	uxtb	r1, r2
 8003674:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <setOutputGPIOState+0x230>)
 8003676:	54d1      	strb	r1, [r2, r3]
}
 8003678:	e0aa      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <setOutputGPIOState+0x228>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d10d      	bne.n	80036a0 <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	2101      	movs	r1, #1
 800368c:	4857      	ldr	r0, [pc, #348]	; (80037ec <setOutputGPIOState+0x23c>)
 800368e:	f005 ff91 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 8003692:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <setOutputGPIOState+0x228>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	b2d1      	uxtb	r1, r2
 800369a:	4a51      	ldr	r2, [pc, #324]	; (80037e0 <setOutputGPIOState+0x230>)
 800369c:	54d1      	strb	r1, [r2, r3]
}
 800369e:	e097      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 80036a0:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <setOutputGPIOState+0x228>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d10d      	bne.n	80036c6 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	2102      	movs	r1, #2
 80036b2:	484e      	ldr	r0, [pc, #312]	; (80037ec <setOutputGPIOState+0x23c>)
 80036b4:	f005 ff7e 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 80036b8:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <setOutputGPIOState+0x228>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d1      	uxtb	r1, r2
 80036c0:	4a47      	ldr	r2, [pc, #284]	; (80037e0 <setOutputGPIOState+0x230>)
 80036c2:	54d1      	strb	r1, [r2, r3]
}
 80036c4:	e084      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <setOutputGPIOState+0x228>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d10d      	bne.n	80036ec <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	2108      	movs	r1, #8
 80036d8:	4843      	ldr	r0, [pc, #268]	; (80037e8 <setOutputGPIOState+0x238>)
 80036da:	f005 ff6b 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <setOutputGPIOState+0x228>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	b2d1      	uxtb	r1, r2
 80036e6:	4a3e      	ldr	r2, [pc, #248]	; (80037e0 <setOutputGPIOState+0x230>)
 80036e8:	54d1      	strb	r1, [r2, r3]
}
 80036ea:	e071      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80036ec:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <setOutputGPIOState+0x228>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d10d      	bne.n	8003712 <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	2101      	movs	r1, #1
 80036fe:	483c      	ldr	r0, [pc, #240]	; (80037f0 <setOutputGPIOState+0x240>)
 8003700:	f005 ff58 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 8003704:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <setOutputGPIOState+0x228>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b2d1      	uxtb	r1, r2
 800370c:	4a34      	ldr	r2, [pc, #208]	; (80037e0 <setOutputGPIOState+0x230>)
 800370e:	54d1      	strb	r1, [r2, r3]
}
 8003710:	e05e      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 8003712:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <setOutputGPIOState+0x228>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	d10d      	bne.n	8003738 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	2102      	movs	r1, #2
 8003724:	4832      	ldr	r0, [pc, #200]	; (80037f0 <setOutputGPIOState+0x240>)
 8003726:	f005 ff45 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <setOutputGPIOState+0x228>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	b2d1      	uxtb	r1, r2
 8003732:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <setOutputGPIOState+0x230>)
 8003734:	54d1      	strb	r1, [r2, r3]
}
 8003736:	e04b      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <setOutputGPIOState+0x228>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d10d      	bne.n	800375e <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	2120      	movs	r1, #32
 800374a:	4829      	ldr	r0, [pc, #164]	; (80037f0 <setOutputGPIOState+0x240>)
 800374c:	f005 ff32 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 8003750:	4b21      	ldr	r3, [pc, #132]	; (80037d8 <setOutputGPIOState+0x228>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	b2d1      	uxtb	r1, r2
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <setOutputGPIOState+0x230>)
 800375a:	54d1      	strb	r1, [r2, r3]
}
 800375c:	e038      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <setOutputGPIOState+0x228>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d10e      	bne.n	8003786 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003772:	481f      	ldr	r0, [pc, #124]	; (80037f0 <setOutputGPIOState+0x240>)
 8003774:	f005 ff1e 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <setOutputGPIOState+0x228>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	b2d1      	uxtb	r1, r2
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <setOutputGPIOState+0x230>)
 8003782:	54d1      	strb	r1, [r2, r3]
}
 8003784:	e024      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <setOutputGPIOState+0x228>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d10d      	bne.n	80037ac <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	2104      	movs	r1, #4
 8003798:	4815      	ldr	r0, [pc, #84]	; (80037f0 <setOutputGPIOState+0x240>)
 800379a:	f005 ff0b 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <setOutputGPIOState+0x228>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	b2d1      	uxtb	r1, r2
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <setOutputGPIOState+0x230>)
 80037a8:	54d1      	strb	r1, [r2, r3]
}
 80037aa:	e011      	b.n	80037d0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <setOutputGPIOState+0x228>)
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d10c      	bne.n	80037d0 <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	2108      	movs	r1, #8
 80037be:	480c      	ldr	r0, [pc, #48]	; (80037f0 <setOutputGPIOState+0x240>)
 80037c0:	f005 fef8 	bl	80095b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <setOutputGPIOState+0x228>)
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d1      	uxtb	r1, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <setOutputGPIOState+0x230>)
 80037ce:	54d1      	strb	r1, [r2, r3]
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000020 	.word	0x20000020
 80037dc:	40021c00 	.word	0x40021c00
 80037e0:	2002c120 	.word	0x2002c120
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40022400 	.word	0x40022400
 80037ec:	40022800 	.word	0x40022800
 80037f0:	40021800 	.word	0x40021800

080037f4 <debugUartTransmitChar>:

void debugUartTransmitChar(char *message){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0b6      	sub	sp, #216	; 0xd8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	f013 f8c6 	bl	8016994 <siprintf>
 8003808:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, uart_buf_len,100);
 800380c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003810:	b29a      	uxth	r2, r3
 8003812:	f107 010c 	add.w	r1, r7, #12
 8003816:	2364      	movs	r3, #100	; 0x64
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <debugUartTransmitChar+0x34>)
 800381a:	f009 fdfd 	bl	800d418 <HAL_UART_Transmit>
}
 800381e:	bf00      	nop
 8003820:	37d8      	adds	r7, #216	; 0xd8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20028cc4 	.word	0x20028cc4

0800382c <debugUartTransmitStuff>:
void debugUartTransmitStuff(char *message, int size){
 800382c:	b580      	push	{r7, lr}
 800382e:	b0b6      	sub	sp, #216	; 0xd8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	f013 f8a9 	bl	8016994 <siprintf>
 8003842:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, size,100);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b29a      	uxth	r2, r3
 800384a:	f107 010c 	add.w	r1, r7, #12
 800384e:	2364      	movs	r3, #100	; 0x64
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <debugUartTransmitStuff+0x34>)
 8003852:	f009 fde1 	bl	800d418 <HAL_UART_Transmit>
}
 8003856:	bf00      	nop
 8003858:	37d8      	adds	r7, #216	; 0xd8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20028cc4 	.word	0x20028cc4

08003864 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60ba      	str	r2, [r7, #8]
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	4603      	mov	r3, r0
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	460b      	mov	r3, r1
 8003874:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003876:	4a5a      	ldr	r2, [pc, #360]	; (80039e0 <readI2CRegister+0x17c>)
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	7013      	strb	r3, [r2, #0]
	char *err_msg;
  	if(i2CBank == 1){
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10e      	bne.n	80038a0 <readI2CRegister+0x3c>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	b299      	uxth	r1, r3
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2301      	movs	r3, #1
 800388e:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <readI2CRegister+0x17c>)
 8003890:	4854      	ldr	r0, [pc, #336]	; (80039e4 <readI2CRegister+0x180>)
 8003892:	f005 ff77 	bl	8009784 <HAL_I2C_Master_Transmit>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 1.";
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <readI2CRegister+0x184>)
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e034      	b.n	800390a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 2){
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d10e      	bne.n	80038c4 <readI2CRegister+0x60>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	b299      	uxth	r1, r3
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2301      	movs	r3, #1
 80038b2:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <readI2CRegister+0x17c>)
 80038b4:	484d      	ldr	r0, [pc, #308]	; (80039ec <readI2CRegister+0x188>)
 80038b6:	f005 ff65 	bl	8009784 <HAL_I2C_Master_Transmit>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 2.";
 80038be:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <readI2CRegister+0x18c>)
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e022      	b.n	800390a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 3){
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d10e      	bne.n	80038e8 <readI2CRegister+0x84>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	b299      	uxth	r1, r3
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2301      	movs	r3, #1
 80038d6:	4a42      	ldr	r2, [pc, #264]	; (80039e0 <readI2CRegister+0x17c>)
 80038d8:	4846      	ldr	r0, [pc, #280]	; (80039f4 <readI2CRegister+0x190>)
 80038da:	f005 ff53 	bl	8009784 <HAL_I2C_Master_Transmit>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 3.";
 80038e2:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <readI2CRegister+0x194>)
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e010      	b.n	800390a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 4){
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d10d      	bne.n	800390a <readI2CRegister+0xa6>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	b299      	uxth	r1, r3
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2301      	movs	r3, #1
 80038fa:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <readI2CRegister+0x17c>)
 80038fc:	483f      	ldr	r0, [pc, #252]	; (80039fc <readI2CRegister+0x198>)
 80038fe:	f005 ff41 	bl	8009784 <HAL_I2C_Master_Transmit>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 4.";
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <readI2CRegister+0x19c>)
 8003908:	613b      	str	r3, [r7, #16]
  	}
	  if ( ret != HAL_OK ) {
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <readI2CRegister+0xc0>
		  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003910:	7bbb      	ldrb	r3, [r7, #14]
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	7df9      	ldrb	r1, [r7, #23]
 8003916:	2000      	movs	r0, #0
 8003918:	9000      	str	r0, [sp, #0]
 800391a:	6938      	ldr	r0, [r7, #16]
 800391c:	f7ff fdee 	bl	80034fc <DevUI_Error_Handler>
	          return (uint8_t*)0xfe;
 8003920:	23fe      	movs	r3, #254	; 0xfe
 8003922:	e058      	b.n	80039d6 <readI2CRegister+0x172>
	        }
	  else {
		  if(i2CBank == 1){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10f      	bne.n	800394a <readI2CRegister+0xe6>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	b299      	uxth	r1, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	b29b      	uxth	r3, r3
 8003932:	f04f 32ff 	mov.w	r2, #4294967295
 8003936:	9200      	str	r2, [sp, #0]
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <readI2CRegister+0x17c>)
 800393a:	482a      	ldr	r0, [pc, #168]	; (80039e4 <readI2CRegister+0x180>)
 800393c:	f006 f816 	bl	800996c <HAL_I2C_Master_Receive>
 8003940:	4603      	mov	r3, r0
 8003942:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 1.";
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <readI2CRegister+0x1a0>)
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e037      	b.n	80039ba <readI2CRegister+0x156>
			}
			else if(i2CBank == 2){
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d10f      	bne.n	8003970 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	b299      	uxth	r1, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	9200      	str	r2, [sp, #0]
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <readI2CRegister+0x17c>)
 8003960:	4822      	ldr	r0, [pc, #136]	; (80039ec <readI2CRegister+0x188>)
 8003962:	f006 f803 	bl	800996c <HAL_I2C_Master_Receive>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 2.";
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <readI2CRegister+0x1a4>)
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e024      	b.n	80039ba <readI2CRegister+0x156>
			}
			else if(i2CBank == 3){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d10f      	bne.n	8003996 <readI2CRegister+0x132>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	b299      	uxth	r1, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f04f 32ff 	mov.w	r2, #4294967295
 8003982:	9200      	str	r2, [sp, #0]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <readI2CRegister+0x17c>)
 8003986:	481b      	ldr	r0, [pc, #108]	; (80039f4 <readI2CRegister+0x190>)
 8003988:	f005 fff0 	bl	800996c <HAL_I2C_Master_Receive>
 800398c:	4603      	mov	r3, r0
 800398e:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 3.";
 8003990:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <readI2CRegister+0x1a8>)
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e011      	b.n	80039ba <readI2CRegister+0x156>
			}
			else if(i2CBank == 4){
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d10e      	bne.n	80039ba <readI2CRegister+0x156>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	b299      	uxth	r1, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	9200      	str	r2, [sp, #0]
 80039aa:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <readI2CRegister+0x17c>)
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <readI2CRegister+0x198>)
 80039ae:	f005 ffdd 	bl	800996c <HAL_I2C_Master_Receive>
 80039b2:	4603      	mov	r3, r0
 80039b4:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 4.";
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <readI2CRegister+0x1ac>)
 80039b8:	613b      	str	r3, [r7, #16]
			}
		  if ( ret != HAL_OK ) {
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <readI2CRegister+0x170>
			  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	7bfa      	ldrb	r2, [r7, #15]
 80039c4:	7df9      	ldrb	r1, [r7, #23]
 80039c6:	2000      	movs	r0, #0
 80039c8:	9000      	str	r0, [sp, #0]
 80039ca:	6938      	ldr	r0, [r7, #16]
 80039cc:	f7ff fd96 	bl	80034fc <DevUI_Error_Handler>
		          return (uint8_t*)0xfe;
 80039d0:	23fe      	movs	r3, #254	; 0xfe
 80039d2:	e000      	b.n	80039d6 <readI2CRegister+0x172>
		        }
		  else{
			  //uartTransmitInt(buf[0],7);
			  return buf;
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <readI2CRegister+0x17c>)
		  }
}
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000339c 	.word	0x2000339c
 80039e4:	20028e44 	.word	0x20028e44
 80039e8:	0801a510 	.word	0x0801a510
 80039ec:	20029294 	.word	0x20029294
 80039f0:	0801a534 	.word	0x0801a534
 80039f4:	20028c2c 	.word	0x20028c2c
 80039f8:	0801a558 	.word	0x0801a558
 80039fc:	20028c78 	.word	0x20028c78
 8003a00:	0801a57c 	.word	0x0801a57c
 8003a04:	0801a5a0 	.word	0x0801a5a0
 8003a08:	0801a5c4 	.word	0x0801a5c4
 8003a0c:	0801a5e8 	.word	0x0801a5e8
 8003a10:	0801a60c 	.word	0x0801a60c

08003a14 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60ba      	str	r2, [r7, #8]
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	460b      	mov	r3, r1
 8003a24:	73bb      	strb	r3, [r7, #14]
  	uint8_t buf[20];
  	HAL_StatusTypeDef ret;
  	buf[0]=reg;
 8003a26:	7bbb      	ldrb	r3, [r7, #14]
 8003a28:	743b      	strb	r3, [r7, #16]
  	int x = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  	char *err_msg;
  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a32:	e00d      	b.n	8003a50 <writeI2CRegister+0x3c>
  		buf[1+x] = bytes[x];
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	441a      	add	r2, r3
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003a44:	440b      	add	r3, r1
 8003a46:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d9ee      	bls.n	8003a34 <writeI2CRegister+0x20>
  	}
  	if(i2CBank == 1){
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d113      	bne.n	8003a84 <writeI2CRegister+0x70>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	b299      	uxth	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f107 0210 	add.w	r2, r7, #16
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	4831      	ldr	r0, [pc, #196]	; (8003b38 <writeI2CRegister+0x124>)
 8003a74:	f005 fe86 	bl	8009784 <HAL_I2C_Master_Transmit>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 1.";
 8003a7e:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <writeI2CRegister+0x128>)
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	e043      	b.n	8003b0c <writeI2CRegister+0xf8>
  	}
  	else if(i2CBank == 2){
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d113      	bne.n	8003ab2 <writeI2CRegister+0x9e>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	b299      	uxth	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f107 0210 	add.w	r2, r7, #16
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9e:	9000      	str	r0, [sp, #0]
 8003aa0:	4827      	ldr	r0, [pc, #156]	; (8003b40 <writeI2CRegister+0x12c>)
 8003aa2:	f005 fe6f 	bl	8009784 <HAL_I2C_Master_Transmit>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 2.";
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <writeI2CRegister+0x130>)
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab0:	e02c      	b.n	8003b0c <writeI2CRegister+0xf8>
  	}
  	else if(i2CBank == 3){
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d113      	bne.n	8003ae0 <writeI2CRegister+0xcc>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	b299      	uxth	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f107 0210 	add.w	r2, r7, #16
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	9000      	str	r0, [sp, #0]
 8003ace:	481e      	ldr	r0, [pc, #120]	; (8003b48 <writeI2CRegister+0x134>)
 8003ad0:	f005 fe58 	bl	8009784 <HAL_I2C_Master_Transmit>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 3.";
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <writeI2CRegister+0x138>)
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	e015      	b.n	8003b0c <writeI2CRegister+0xf8>
  	}
  	else if(i2CBank == 4){
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d112      	bne.n	8003b0c <writeI2CRegister+0xf8>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	b299      	uxth	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f107 0210 	add.w	r2, r7, #16
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	4814      	ldr	r0, [pc, #80]	; (8003b50 <writeI2CRegister+0x13c>)
 8003afe:	f005 fe41 	bl	8009784 <HAL_I2C_Master_Transmit>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 4.";
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <writeI2CRegister+0x140>)
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  	}
  	if (ret != HAL_OK)
 8003b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <writeI2CRegister+0x118>
  	{
  		DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003b14:	7bbb      	ldrb	r3, [r7, #14]
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	9000      	str	r0, [sp, #0]
 8003b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b22:	f7ff fceb 	bl	80034fc <DevUI_Error_Handler>
  		return ret;
 8003b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b2a:	e000      	b.n	8003b2e <writeI2CRegister+0x11a>
  	}
  	else
  	{
  		return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
  	}
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3730      	adds	r7, #48	; 0x30
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20028e44 	.word	0x20028e44
 8003b3c:	0801a630 	.word	0x0801a630
 8003b40:	20029294 	.word	0x20029294
 8003b44:	0801a64c 	.word	0x0801a64c
 8003b48:	20028c2c 	.word	0x20028c2c
 8003b4c:	0801a668 	.word	0x0801a668
 8003b50:	20028c78 	.word	0x20028c78
 8003b54:	0801a684 	.word	0x0801a684

08003b58 <configureLEDDriver>:
void configureLEDDriver(){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8003b62:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <configureLEDDriver+0x104>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 8003b68:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <configureLEDDriver+0x108>)
 8003b6a:	7818      	ldrb	r0, [r3, #0]
 8003b6c:	4b3c      	ldr	r3, [pc, #240]	; (8003c60 <configureLEDDriver+0x108>)
 8003b6e:	7999      	ldrb	r1, [r3, #6]
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <configureLEDDriver+0x108>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f7ff ff4a 	bl	8003a14 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8003b80:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <configureLEDDriver+0x108>)
 8003b82:	7818      	ldrb	r0, [r3, #0]
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <configureLEDDriver+0x108>)
 8003b86:	7999      	ldrb	r1, [r3, #6]
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <configureLEDDriver+0x108>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f7ff fe69 	bl	8003864 <readI2CRegister>
 8003b92:	6038      	str	r0, [r7, #0]
	//uartTransmitInt(buf[0],7);
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 8003b94:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <configureLEDDriver+0x108>)
 8003b96:	7818      	ldrb	r0, [r3, #0]
 8003b98:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <configureLEDDriver+0x108>)
 8003b9a:	7859      	ldrb	r1, [r3, #1]
 8003b9c:	4b30      	ldr	r3, [pc, #192]	; (8003c60 <configureLEDDriver+0x108>)
 8003b9e:	79db      	ldrb	r3, [r3, #7]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <configureLEDDriver+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f7ff ff33 	bl	8003a14 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <configureLEDDriver+0x108>)
 8003bb0:	7818      	ldrb	r0, [r3, #0]
 8003bb2:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <configureLEDDriver+0x108>)
 8003bb4:	7899      	ldrb	r1, [r3, #2]
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <configureLEDDriver+0x108>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <configureLEDDriver+0x104>)
 8003bc0:	f7ff ff28 	bl	8003a14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <configureLEDDriver+0x108>)
 8003bc6:	7818      	ldrb	r0, [r3, #0]
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <configureLEDDriver+0x108>)
 8003bca:	78d9      	ldrb	r1, [r3, #3]
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <configureLEDDriver+0x108>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <configureLEDDriver+0x104>)
 8003bd6:	f7ff ff1d 	bl	8003a14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bda:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <configureLEDDriver+0x108>)
 8003bdc:	7818      	ldrb	r0, [r3, #0]
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <configureLEDDriver+0x108>)
 8003be0:	7919      	ldrb	r1, [r3, #4]
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <configureLEDDriver+0x108>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2301      	movs	r3, #1
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <configureLEDDriver+0x104>)
 8003bec:	f7ff ff12 	bl	8003a14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <configureLEDDriver+0x108>)
 8003bf2:	7818      	ldrb	r0, [r3, #0]
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <configureLEDDriver+0x108>)
 8003bf6:	7959      	ldrb	r1, [r3, #5]
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <configureLEDDriver+0x108>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <configureLEDDriver+0x104>)
 8003c02:	f7ff ff07 	bl	8003a14 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <configureLEDDriver+0x108>)
 8003c08:	7818      	ldrb	r0, [r3, #0]
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <configureLEDDriver+0x108>)
 8003c0c:	7a19      	ldrb	r1, [r3, #8]
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <configureLEDDriver+0x108>)
 8003c10:	7adb      	ldrb	r3, [r3, #11]
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <configureLEDDriver+0x108>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f7ff fefa 	bl	8003a14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003c20:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <configureLEDDriver+0x108>)
 8003c22:	7818      	ldrb	r0, [r3, #0]
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <configureLEDDriver+0x108>)
 8003c26:	7a59      	ldrb	r1, [r3, #9]
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <configureLEDDriver+0x108>)
 8003c2a:	7adb      	ldrb	r3, [r3, #11]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <configureLEDDriver+0x108>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2301      	movs	r3, #1
 8003c36:	f7ff feed 	bl	8003a14 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <configureLEDDriver+0x108>)
 8003c3c:	7818      	ldrb	r0, [r3, #0]
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <configureLEDDriver+0x108>)
 8003c40:	7a99      	ldrb	r1, [r3, #10]
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <configureLEDDriver+0x108>)
 8003c44:	7adb      	ldrb	r3, [r3, #11]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <configureLEDDriver+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f7ff fee0 	bl	8003a14 <writeI2CRegister>
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200033b0 	.word	0x200033b0
 8003c60:	20000004 	.word	0x20000004

08003c64 <setRGBLED>:

//Configure & set RGB LED
void setRGBLED(uint8_t R, uint8_t G, uint8_t B)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	71bb      	strb	r3, [r7, #6]
 8003c72:	4613      	mov	r3, r2
 8003c74:	717b      	strb	r3, [r7, #5]
	setErrorLED(RED, R);
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	2007      	movs	r0, #7
 8003c86:	f000 f819 	bl	8003cbc <setErrorLED>
	setErrorLED(GREEN, G);
 8003c8a:	79bb      	ldrb	r3, [r7, #6]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4619      	mov	r1, r3
 8003c98:	2008      	movs	r0, #8
 8003c9a:	f000 f80f 	bl	8003cbc <setErrorLED>
	setErrorLED(BLUE, B);
 8003c9e:	797b      	ldrb	r3, [r7, #5]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4619      	mov	r1, r3
 8003cac:	2009      	movs	r0, #9
 8003cae:	f000 f805 	bl	8003cbc <setErrorLED>

	return;
 8003cb2:	bf00      	nop
}
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 8003ccc:	2304      	movs	r3, #4
 8003cce:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 8003cd4:	2340      	movs	r3, #64	; 0x40
 8003cd6:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8003cdc:	2308      	movs	r3, #8
 8003cde:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	dc05      	bgt.n	8003cfa <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8003cee:	4b80      	ldr	r3, [pc, #512]	; (8003ef0 <setErrorLED+0x234>)
 8003cf0:	789b      	ldrb	r3, [r3, #2]
 8003cf2:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e019      	b.n	8003d2e <setErrorLED+0x72>
	}
	else if(led <8){
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b07      	cmp	r3, #7
 8003cfe:	dc06      	bgt.n	8003d0e <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8003d00:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <setErrorLED+0x234>)
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3b04      	subs	r3, #4
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	e00f      	b.n	8003d2e <setErrorLED+0x72>
	}
	else if(led <12){
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b0b      	cmp	r3, #11
 8003d12:	dc06      	bgt.n	8003d22 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003d14:	4b76      	ldr	r3, [pc, #472]	; (8003ef0 <setErrorLED+0x234>)
 8003d16:	791b      	ldrb	r3, [r3, #4]
 8003d18:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3b08      	subs	r3, #8
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	e005      	b.n	8003d2e <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003d22:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <setErrorLED+0x234>)
 8003d24:	795b      	ldrb	r3, [r3, #5]
 8003d26:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b0c      	subs	r3, #12
 8003d2c:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003d2e:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <setErrorLED+0x234>)
 8003d30:	7818      	ldrb	r0, [r3, #0]
 8003d32:	4b6f      	ldr	r3, [pc, #444]	; (8003ef0 <setErrorLED+0x234>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	7ef9      	ldrb	r1, [r7, #27]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f7ff fd93 	bl	8003864 <readI2CRegister>
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f200 80bd 	bhi.w	8003ec2 <setErrorLED+0x206>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <setErrorLED+0x94>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003dc7 	.word	0x08003dc7
 8003d58:	08003e2d 	.word	0x08003e2d
 8003d5c:	08003e5d 	.word	0x08003e5d
	switch(ledBitNumber){

	case 0:
		if(change){
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d012      	beq.n	8003d8c <setErrorLED+0xd0>
			if(led == 8){
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d107      	bne.n	8003d7c <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	7dbb      	ldrb	r3, [r7, #22]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003d7a:	e0a2      	b.n	8003ec2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	7ebb      	ldrb	r3, [r7, #26]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	701a      	strb	r2, [r3, #0]
		break;
 8003d8a:	e09a      	b.n	8003ec2 <setErrorLED+0x206>
			if(led == 8){
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d10c      	bne.n	8003dac <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b25a      	sxtb	r2, r3
 8003d98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	b25b      	sxtb	r3, r3
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	701a      	strb	r2, [r3, #0]
		break;
 8003daa:	e08a      	b.n	8003ec2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b25a      	sxtb	r2, r3
 8003db2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	701a      	strb	r2, [r3, #0]
		break;
 8003dc4:	e07d      	b.n	8003ec2 <setErrorLED+0x206>

	case 1:
		if(change){
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <setErrorLED+0x136>
			if(led == 9){
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d107      	bne.n	8003de2 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	7d7b      	ldrb	r3, [r7, #21]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8003de0:	e06f      	b.n	8003ec2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	7e7b      	ldrb	r3, [r7, #25]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	701a      	strb	r2, [r3, #0]
		break;
 8003df0:	e067      	b.n	8003ec2 <setErrorLED+0x206>
			if(led == 9){
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b09      	cmp	r3, #9
 8003df6:	d10c      	bne.n	8003e12 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b25a      	sxtb	r2, r3
 8003dfe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	4013      	ands	r3, r2
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	701a      	strb	r2, [r3, #0]
		break;
 8003e10:	e057      	b.n	8003ec2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b25a      	sxtb	r2, r3
 8003e18:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	4013      	ands	r3, r2
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	701a      	strb	r2, [r3, #0]
		break;
 8003e2a:	e04a      	b.n	8003ec2 <setErrorLED+0x206>

	case 2:
		if(change){
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	7e3b      	ldrb	r3, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003e40:	e03f      	b.n	8003ec2 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b25a      	sxtb	r2, r3
 8003e48:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	701a      	strb	r2, [r3, #0]
		break;
 8003e5a:	e032      	b.n	8003ec2 <setErrorLED+0x206>

	case 3:
		if(change){
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d012      	beq.n	8003e88 <setErrorLED+0x1cc>
			if(led == 7){
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b07      	cmp	r3, #7
 8003e66:	d107      	bne.n	8003e78 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003e76:	e023      	b.n	8003ec0 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	701a      	strb	r2, [r3, #0]
		break;
 8003e86:	e01b      	b.n	8003ec0 <setErrorLED+0x204>
			if(led == 7){
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b07      	cmp	r3, #7
 8003e8c:	d10c      	bne.n	8003ea8 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	b25a      	sxtb	r2, r3
 8003e94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	b25b      	sxtb	r3, r3
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	701a      	strb	r2, [r3, #0]
		break;
 8003ea6:	e00b      	b.n	8003ec0 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b25a      	sxtb	r2, r3
 8003eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	701a      	strb	r2, [r3, #0]
		break;
 8003ec0:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <setErrorLED+0x234>)
 8003ec4:	7818      	ldrb	r0, [r3, #0]
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <setErrorLED+0x234>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	7ef9      	ldrb	r1, [r7, #27]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2301      	movs	r3, #1
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f7ff fd9f 	bl	8003a14 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <setErrorLED+0x234>)
 8003ed8:	7818      	ldrb	r0, [r3, #0]
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <setErrorLED+0x234>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	7ef9      	ldrb	r1, [r7, #27]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f7ff fcbf 	bl	8003864 <readI2CRegister>
 8003ee6:	60f8      	str	r0, [r7, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <getADCValues>:


float* getADCValues(){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b09e      	sub	sp, #120	; 0x78
 8003ef8:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8003efa:	463b      	mov	r3, r7
 8003efc:	2254      	movs	r2, #84	; 0x54
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f011 fe65 	bl	8015bd0 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 8003f06:	2316      	movs	r3, #22
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003f0e:	230c      	movs	r3, #12
 8003f10:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003f12:	2300      	movs	r3, #0
 8003f14:	677b      	str	r3, [r7, #116]	; 0x74
 8003f16:	e171      	b.n	80041fc <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003f18:	4b97      	ldr	r3, [pc, #604]	; (8004178 <getADCValues+0x284>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d009      	beq.n	8003f36 <getADCValues+0x42>
 8003f22:	4b95      	ldr	r3, [pc, #596]	; (8004178 <getADCValues+0x284>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d004      	beq.n	8003f36 <getADCValues+0x42>
 8003f2c:	4b92      	ldr	r3, [pc, #584]	; (8004178 <getADCValues+0x284>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d102      	bne.n	8003f3c <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f3a:	e071      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003f3c:	4b8e      	ldr	r3, [pc, #568]	; (8004178 <getADCValues+0x284>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d009      	beq.n	8003f5a <getADCValues+0x66>
 8003f46:	4b8c      	ldr	r3, [pc, #560]	; (8004178 <getADCValues+0x284>)
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d004      	beq.n	8003f5a <getADCValues+0x66>
 8003f50:	4b89      	ldr	r3, [pc, #548]	; (8004178 <getADCValues+0x284>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d102      	bne.n	8003f60 <getADCValues+0x6c>
			adcIndex=2;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f5e:	e05f      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003f60:	4b85      	ldr	r3, [pc, #532]	; (8004178 <getADCValues+0x284>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d009      	beq.n	8003f7e <getADCValues+0x8a>
 8003f6a:	4b83      	ldr	r3, [pc, #524]	; (8004178 <getADCValues+0x284>)
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d004      	beq.n	8003f7e <getADCValues+0x8a>
 8003f74:	4b80      	ldr	r3, [pc, #512]	; (8004178 <getADCValues+0x284>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d102      	bne.n	8003f84 <getADCValues+0x90>
			adcIndex=4;
 8003f7e:	2304      	movs	r3, #4
 8003f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f82:	e04d      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003f84:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <getADCValues+0x284>)
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d009      	beq.n	8003fa2 <getADCValues+0xae>
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	; (8004178 <getADCValues+0x284>)
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d004      	beq.n	8003fa2 <getADCValues+0xae>
 8003f98:	4b77      	ldr	r3, [pc, #476]	; (8004178 <getADCValues+0x284>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d102      	bne.n	8003fa8 <getADCValues+0xb4>
			adcIndex=6;
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa6:	e03b      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003fa8:	4b73      	ldr	r3, [pc, #460]	; (8004178 <getADCValues+0x284>)
 8003faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d004      	beq.n	8003fbc <getADCValues+0xc8>
 8003fb2:	4b71      	ldr	r3, [pc, #452]	; (8004178 <getADCValues+0x284>)
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d102      	bne.n	8003fc2 <getADCValues+0xce>
			adcIndex=8;
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc0:	e02e      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <getADCValues+0x284>)
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d004      	beq.n	8003fd6 <getADCValues+0xe2>
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <getADCValues+0x284>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d102      	bne.n	8003fdc <getADCValues+0xe8>
			adcIndex=10;
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fda:	e021      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <getADCValues+0x284>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d102      	bne.n	8003fec <getADCValues+0xf8>
			adcIndex=12;
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fea:	e019      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003fec:	4b62      	ldr	r3, [pc, #392]	; (8004178 <getADCValues+0x284>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d102      	bne.n	8003ffc <getADCValues+0x108>
			adcIndex=14;
 8003ff6:	230e      	movs	r3, #14
 8003ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffa:	e011      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <getADCValues+0x284>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004002:	429a      	cmp	r2, r3
 8004004:	d102      	bne.n	800400c <getADCValues+0x118>
			adcIndex=16;
 8004006:	2310      	movs	r3, #16
 8004008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800400a:	e009      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 800400c:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <getADCValues+0x284>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004012:	429a      	cmp	r2, r3
 8004014:	d102      	bne.n	800401c <getADCValues+0x128>
			adcIndex=18;
 8004016:	2312      	movs	r3, #18
 8004018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800401a:	e001      	b.n	8004020 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 800401c:	2314      	movs	r3, #20
 800401e:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8004020:	4b55      	ldr	r3, [pc, #340]	; (8004178 <getADCValues+0x284>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004026:	429a      	cmp	r2, r3
 8004028:	d00e      	beq.n	8004048 <getADCValues+0x154>
 800402a:	4b53      	ldr	r3, [pc, #332]	; (8004178 <getADCValues+0x284>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004030:	429a      	cmp	r2, r3
 8004032:	d009      	beq.n	8004048 <getADCValues+0x154>
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <getADCValues+0x284>)
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800403a:	429a      	cmp	r2, r3
 800403c:	d004      	beq.n	8004048 <getADCValues+0x154>
 800403e:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <getADCValues+0x284>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004044:	429a      	cmp	r2, r3
 8004046:	d13a      	bne.n	80040be <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8004048:	2300      	movs	r3, #0
 800404a:	673b      	str	r3, [r7, #112]	; 0x70
 800404c:	e033      	b.n	80040b6 <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800404e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004050:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004058:	4413      	add	r3, r2
 800405a:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 800405c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004064:	4413      	add	r3, r2
 8004066:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800406a:	4944      	ldr	r1, [pc, #272]	; (800417c <getADCValues+0x288>)
 800406c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800406e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004072:	441a      	add	r2, r3
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800407c:	440b      	add	r3, r1
 800407e:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8004082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004084:	2b13      	cmp	r3, #19
 8004086:	d113      	bne.n	80040b0 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004090:	4413      	add	r3, r2
 8004092:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004096:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <getADCValues+0x28c>)
 8004098:	fb82 1203 	smull	r1, r2, r2, r3
 800409c:	10d2      	asrs	r2, r2, #3
 800409e:	17db      	asrs	r3, r3, #31
 80040a0:	1ad2      	subs	r2, r2, r3
 80040a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80040aa:	440b      	add	r3, r1
 80040ac:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80040b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b2:	3301      	adds	r3, #1
 80040b4:	673b      	str	r3, [r7, #112]	; 0x70
 80040b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b8:	2b13      	cmp	r3, #19
 80040ba:	ddc8      	ble.n	800404e <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80040bc:	e09b      	b.n	80041f6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80040be:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <getADCValues+0x284>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d018      	beq.n	80040fa <getADCValues+0x206>
 80040c8:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <getADCValues+0x284>)
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d013      	beq.n	80040fa <getADCValues+0x206>
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <getADCValues+0x284>)
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040d8:	429a      	cmp	r2, r3
 80040da:	d00e      	beq.n	80040fa <getADCValues+0x206>
 80040dc:	4b26      	ldr	r3, [pc, #152]	; (8004178 <getADCValues+0x284>)
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d009      	beq.n	80040fa <getADCValues+0x206>
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <getADCValues+0x284>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d004      	beq.n	80040fa <getADCValues+0x206>
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <getADCValues+0x284>)
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d13a      	bne.n	8004170 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80040fa:	2300      	movs	r3, #0
 80040fc:	673b      	str	r3, [r7, #112]	; 0x70
 80040fe:	e033      	b.n	8004168 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8004100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004102:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800410a:	4413      	add	r3, r2
 800410c:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004116:	4413      	add	r3, r2
 8004118:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800411c:	4919      	ldr	r1, [pc, #100]	; (8004184 <getADCValues+0x290>)
 800411e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004120:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004124:	441a      	add	r2, r3
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800412e:	440b      	add	r3, r1
 8004130:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8004134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004136:	2b13      	cmp	r3, #19
 8004138:	d113      	bne.n	8004162 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800413a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004142:	4413      	add	r3, r2
 8004144:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004148:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <getADCValues+0x28c>)
 800414a:	fb82 1203 	smull	r1, r2, r2, r3
 800414e:	10d2      	asrs	r2, r2, #3
 8004150:	17db      	asrs	r3, r3, #31
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800415c:	440b      	add	r3, r1
 800415e:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8004162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004164:	3301      	adds	r3, #1
 8004166:	673b      	str	r3, [r7, #112]	; 0x70
 8004168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800416a:	2b13      	cmp	r3, #19
 800416c:	ddc8      	ble.n	8004100 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800416e:	e042      	b.n	80041f6 <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8004170:	2300      	movs	r3, #0
 8004172:	673b      	str	r3, [r7, #112]	; 0x70
 8004174:	e03c      	b.n	80041f0 <getADCValues+0x2fc>
 8004176:	bf00      	nop
 8004178:	20000058 	.word	0x20000058
 800417c:	2002e9c4 	.word	0x2002e9c4
 8004180:	66666667 	.word	0x66666667
 8004184:	2002c21c 	.word	0x2002c21c
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8004188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800418a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004192:	4413      	add	r3, r2
 8004194:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8004196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800419e:	4413      	add	r3, r2
 80041a0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041a4:	49c9      	ldr	r1, [pc, #804]	; (80044cc <getADCValues+0x5d8>)
 80041a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041a8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80041ac:	441a      	add	r2, r3
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80041b6:	440b      	add	r3, r1
 80041b8:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80041bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041be:	2b13      	cmp	r3, #19
 80041c0:	d113      	bne.n	80041ea <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80041c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041ca:	4413      	add	r3, r2
 80041cc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041d0:	4abf      	ldr	r2, [pc, #764]	; (80044d0 <getADCValues+0x5dc>)
 80041d2:	fb82 1203 	smull	r1, r2, r2, r3
 80041d6:	10d2      	asrs	r2, r2, #3
 80041d8:	17db      	asrs	r3, r3, #31
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80041e4:	440b      	add	r3, r1
 80041e6:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80041ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ec:	3301      	adds	r3, #1
 80041ee:	673b      	str	r3, [r7, #112]	; 0x70
 80041f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f2:	2b13      	cmp	r3, #19
 80041f4:	ddc8      	ble.n	8004188 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	3301      	adds	r3, #1
 80041fa:	677b      	str	r3, [r7, #116]	; 0x74
 80041fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fe:	2b14      	cmp	r3, #20
 8004200:	f77f ae8a 	ble.w	8003f18 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004204:	4bb3      	ldr	r3, [pc, #716]	; (80044d4 <getADCValues+0x5e0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800420e:	4413      	add	r3, r2
 8004210:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800421c:	4bad      	ldr	r3, [pc, #692]	; (80044d4 <getADCValues+0x5e0>)
 800421e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004226:	4bab      	ldr	r3, [pc, #684]	; (80044d4 <getADCValues+0x5e0>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004232:	4ba8      	ldr	r3, [pc, #672]	; (80044d4 <getADCValues+0x5e0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423a:	4aa7      	ldr	r2, [pc, #668]	; (80044d8 <getADCValues+0x5e4>)
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004244:	4ba3      	ldr	r3, [pc, #652]	; (80044d4 <getADCValues+0x5e0>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800424e:	4413      	add	r3, r2
 8004250:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425c:	4b9d      	ldr	r3, [pc, #628]	; (80044d4 <getADCValues+0x5e0>)
 800425e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004266:	4b9b      	ldr	r3, [pc, #620]	; (80044d4 <getADCValues+0x5e0>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004272:	4b98      	ldr	r3, [pc, #608]	; (80044d4 <getADCValues+0x5e0>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	4a97      	ldr	r2, [pc, #604]	; (80044d8 <getADCValues+0x5e4>)
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <getADCValues+0x5e0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800428e:	4413      	add	r3, r2
 8004290:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800429c:	4b8d      	ldr	r3, [pc, #564]	; (80044d4 <getADCValues+0x5e0>)
 800429e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80042a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042a6:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <getADCValues+0x5e0>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b2:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <getADCValues+0x5e0>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	4a87      	ldr	r2, [pc, #540]	; (80044d8 <getADCValues+0x5e4>)
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80042c4:	4b83      	ldr	r3, [pc, #524]	; (80044d4 <getADCValues+0x5e0>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80042ce:	4413      	add	r3, r2
 80042d0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042dc:	4b7d      	ldr	r3, [pc, #500]	; (80044d4 <getADCValues+0x5e0>)
 80042de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80042e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042e6:	4b7b      	ldr	r3, [pc, #492]	; (80044d4 <getADCValues+0x5e0>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f2:	4b78      	ldr	r3, [pc, #480]	; (80044d4 <getADCValues+0x5e0>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <getADCValues+0x5e4>)
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004304:	4b73      	ldr	r3, [pc, #460]	; (80044d4 <getADCValues+0x5e0>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800430e:	4413      	add	r3, r2
 8004310:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800431c:	4b6d      	ldr	r3, [pc, #436]	; (80044d4 <getADCValues+0x5e0>)
 800431e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004326:	4b6b      	ldr	r3, [pc, #428]	; (80044d4 <getADCValues+0x5e0>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004332:	4b68      	ldr	r3, [pc, #416]	; (80044d4 <getADCValues+0x5e0>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	4a67      	ldr	r2, [pc, #412]	; (80044d8 <getADCValues+0x5e4>)
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004344:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <getADCValues+0x5e0>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800434e:	4413      	add	r3, r2
 8004350:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800435c:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <getADCValues+0x5e0>)
 800435e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004366:	4b5b      	ldr	r3, [pc, #364]	; (80044d4 <getADCValues+0x5e0>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004372:	4b58      	ldr	r3, [pc, #352]	; (80044d4 <getADCValues+0x5e0>)
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437a:	4a57      	ldr	r2, [pc, #348]	; (80044d8 <getADCValues+0x5e4>)
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <getADCValues+0x5e0>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800438e:	4413      	add	r3, r2
 8004390:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004394:	ee07 3a90 	vmov	s15, r3
 8004398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800439c:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <getADCValues+0x5e0>)
 800439e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a6:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <getADCValues+0x5e0>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b2:	4b48      	ldr	r3, [pc, #288]	; (80044d4 <getADCValues+0x5e0>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	4a47      	ldr	r2, [pc, #284]	; (80044d8 <getADCValues+0x5e4>)
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80043c4:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <getADCValues+0x5e0>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80043ce:	4413      	add	r3, r2
 80043d0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043dc:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <getADCValues+0x5e0>)
 80043de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <getADCValues+0x5e0>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <getADCValues+0x5e0>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	4a37      	ldr	r2, [pc, #220]	; (80044d8 <getADCValues+0x5e4>)
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004404:	4b33      	ldr	r3, [pc, #204]	; (80044d4 <getADCValues+0x5e0>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800440e:	4413      	add	r3, r2
 8004410:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800441c:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <getADCValues+0x5e0>)
 800441e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <getADCValues+0x5e0>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <getADCValues+0x5e0>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <getADCValues+0x5e4>)
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <getADCValues+0x5e0>)
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800444e:	4413      	add	r3, r2
 8004450:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <getADCValues+0x5e0>)
 800445e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004466:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <getADCValues+0x5e0>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <getADCValues+0x5e0>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <getADCValues+0x5e4>)
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <getADCValues+0x5e0>)
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800448e:	4413      	add	r3, r2
 8004490:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <getADCValues+0x5e0>)
 800449e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80044a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <getADCValues+0x5e0>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <getADCValues+0x5e0>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <getADCValues+0x5e4>)
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <getADCValues+0x5e0>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	e007      	b.n	80044dc <getADCValues+0x5e8>
 80044cc:	2002976c 	.word	0x2002976c
 80044d0:	66666667 	.word	0x66666667
 80044d4:	20000058 	.word	0x20000058
 80044d8:	200033b4 	.word	0x200033b4
 80044dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80044e0:	4413      	add	r3, r2
 80044e2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044ee:	4b9c      	ldr	r3, [pc, #624]	; (8004760 <getADCValues+0x86c>)
 80044f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80044f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044f8:	4b99      	ldr	r3, [pc, #612]	; (8004760 <getADCValues+0x86c>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004504:	4b96      	ldr	r3, [pc, #600]	; (8004760 <getADCValues+0x86c>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450c:	4a95      	ldr	r2, [pc, #596]	; (8004764 <getADCValues+0x870>)
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004516:	4b92      	ldr	r3, [pc, #584]	; (8004760 <getADCValues+0x86c>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004520:	4413      	add	r3, r2
 8004522:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800452e:	4b8c      	ldr	r3, [pc, #560]	; (8004760 <getADCValues+0x86c>)
 8004530:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004538:	4b89      	ldr	r3, [pc, #548]	; (8004760 <getADCValues+0x86c>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004544:	4b86      	ldr	r3, [pc, #536]	; (8004760 <getADCValues+0x86c>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454c:	4a85      	ldr	r2, [pc, #532]	; (8004764 <getADCValues+0x870>)
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004556:	4b82      	ldr	r3, [pc, #520]	; (8004760 <getADCValues+0x86c>)
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004560:	4413      	add	r3, r2
 8004562:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800456e:	4b7c      	ldr	r3, [pc, #496]	; (8004760 <getADCValues+0x86c>)
 8004570:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	4b79      	ldr	r3, [pc, #484]	; (8004760 <getADCValues+0x86c>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004584:	4b76      	ldr	r3, [pc, #472]	; (8004760 <getADCValues+0x86c>)
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458c:	4a75      	ldr	r2, [pc, #468]	; (8004764 <getADCValues+0x870>)
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004596:	4b72      	ldr	r3, [pc, #456]	; (8004760 <getADCValues+0x86c>)
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80045a0:	4413      	add	r3, r2
 80045a2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ae:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <getADCValues+0x86c>)
 80045b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80045b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b8:	4b69      	ldr	r3, [pc, #420]	; (8004760 <getADCValues+0x86c>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c4:	4b66      	ldr	r3, [pc, #408]	; (8004760 <getADCValues+0x86c>)
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045cc:	4a65      	ldr	r2, [pc, #404]	; (8004764 <getADCValues+0x870>)
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80045d6:	4b62      	ldr	r3, [pc, #392]	; (8004760 <getADCValues+0x86c>)
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80045e0:	4413      	add	r3, r2
 80045e2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ee:	4b5c      	ldr	r3, [pc, #368]	; (8004760 <getADCValues+0x86c>)
 80045f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80045f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045f8:	4b59      	ldr	r3, [pc, #356]	; (8004760 <getADCValues+0x86c>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004604:	4b56      	ldr	r3, [pc, #344]	; (8004760 <getADCValues+0x86c>)
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460c:	4a55      	ldr	r2, [pc, #340]	; (8004764 <getADCValues+0x870>)
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004616:	4b52      	ldr	r3, [pc, #328]	; (8004760 <getADCValues+0x86c>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004620:	4413      	add	r3, r2
 8004622:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800462e:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <getADCValues+0x86c>)
 8004630:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004638:	4b49      	ldr	r3, [pc, #292]	; (8004760 <getADCValues+0x86c>)
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004644:	4b46      	ldr	r3, [pc, #280]	; (8004760 <getADCValues+0x86c>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	4a45      	ldr	r2, [pc, #276]	; (8004764 <getADCValues+0x870>)
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <getADCValues+0x86c>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004660:	4413      	add	r3, r2
 8004662:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800466e:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <getADCValues+0x86c>)
 8004670:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004678:	4b39      	ldr	r3, [pc, #228]	; (8004760 <getADCValues+0x86c>)
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004684:	4b36      	ldr	r3, [pc, #216]	; (8004760 <getADCValues+0x86c>)
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	4a35      	ldr	r2, [pc, #212]	; (8004764 <getADCValues+0x870>)
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <getADCValues+0x86c>)
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80046a0:	4413      	add	r3, r2
 80046a2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <getADCValues+0x86c>)
 80046b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <getADCValues+0x86c>)
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c4:	4b26      	ldr	r3, [pc, #152]	; (8004760 <getADCValues+0x86c>)
 80046c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046cc:	4a25      	ldr	r2, [pc, #148]	; (8004764 <getADCValues+0x870>)
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80046d6:	4b22      	ldr	r3, [pc, #136]	; (8004760 <getADCValues+0x86c>)
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80046e0:	4413      	add	r3, r2
 80046e2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046ee:	4b1c      	ldr	r3, [pc, #112]	; (8004760 <getADCValues+0x86c>)
 80046f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <getADCValues+0x86c>)
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <getADCValues+0x86c>)
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470c:	4a15      	ldr	r2, [pc, #84]	; (8004764 <getADCValues+0x870>)
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <getADCValues+0x86c>)
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004720:	4413      	add	r3, r2
 8004722:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <getADCValues+0x86c>)
 8004730:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <getADCValues+0x86c>)
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <getADCValues+0x86c>)
 8004746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474c:	4a05      	ldr	r2, [pc, #20]	; (8004764 <getADCValues+0x870>)
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8004756:	4b03      	ldr	r3, [pc, #12]	; (8004764 <getADCValues+0x870>)
}
 8004758:	4618      	mov	r0, r3
 800475a:	3778      	adds	r7, #120	; 0x78
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000058 	.word	0x20000058
 8004764:	200033b4 	.word	0x200033b4

08004768 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <debugUartParser>:
	uart_buf_len = sprintf(uart_buf, message);
	HAL_UART_Transmit(&SPARE_UART,(uint8_t *)uart_buf, uart_buf_len,100);
	//HAL_UART_Receive(&SPARE_UART,(uint8_t*)uart_receive_buf, sizeof(uart_receive_buf),1000);
}

uint8_t debugUartParser(){
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	uint8_t var_Seen[4];
	key_uint8[0] = (uint8_t)'G';
 8004782:	2347      	movs	r3, #71	; 0x47
 8004784:	723b      	strb	r3, [r7, #8]
	key_uint8[1] = (uint8_t)'I';
 8004786:	2349      	movs	r3, #73	; 0x49
 8004788:	727b      	strb	r3, [r7, #9]
	key_uint8[2] = (uint8_t)'V';
 800478a:	2356      	movs	r3, #86	; 0x56
 800478c:	72bb      	strb	r3, [r7, #10]
	key_uint8[3] = (uint8_t)'E';
 800478e:	2345      	movs	r3, #69	; 0x45
 8004790:	72fb      	strb	r3, [r7, #11]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 8004792:	2305      	movs	r3, #5
 8004794:	60fb      	str	r3, [r7, #12]

	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e039      	b.n	8004810 <debugUartParser+0x94>
		if(debug_Uart_RX_Buf[x]==key_uint8[0]){
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <debugUartParser+0xb8>)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	7a3b      	ldrb	r3, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d102      	bne.n	80047b0 <debugUartParser+0x34>
			var_Seen[0] = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	713b      	strb	r3, [r7, #4]
 80047ae:	e02c      	b.n	800480a <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 80047b0:	4a20      	ldr	r2, [pc, #128]	; (8004834 <debugUartParser+0xb8>)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	7a7b      	ldrb	r3, [r7, #9]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d105      	bne.n	80047ca <debugUartParser+0x4e>
 80047be:	793b      	ldrb	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <debugUartParser+0x4e>
			var_Seen[1] = 1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	717b      	strb	r3, [r7, #5]
 80047c8:	e01f      	b.n	800480a <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 80047ca:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <debugUartParser+0xb8>)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	7abb      	ldrb	r3, [r7, #10]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d105      	bne.n	80047e4 <debugUartParser+0x68>
 80047d8:	797b      	ldrb	r3, [r7, #5]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <debugUartParser+0x68>
			var_Seen[2] = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	71bb      	strb	r3, [r7, #6]
 80047e2:	e012      	b.n	800480a <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <debugUartParser+0xb8>)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d105      	bne.n	80047fe <debugUartParser+0x82>
 80047f2:	79bb      	ldrb	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <debugUartParser+0x82>
			var_Seen[3] = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	71fb      	strb	r3, [r7, #7]
			break;
 80047fc:	e00b      	b.n	8004816 <debugUartParser+0x9a>
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	2204      	movs	r2, #4
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f011 f9e3 	bl	8015bd0 <memset>
	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2bc7      	cmp	r3, #199	; 0xc7
 8004814:	d9c2      	bls.n	800479c <debugUartParser+0x20>
		}
	}
	if(var_Seen[3]){
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <debugUartParser+0xae>
		memset(debug_Uart_RX_Buf,0x00,sizeof(debug_Uart_RX_Buf));
 800481c:	22c8      	movs	r2, #200	; 0xc8
 800481e:	2100      	movs	r1, #0
 8004820:	4804      	ldr	r0, [pc, #16]	; (8004834 <debugUartParser+0xb8>)
 8004822:	f011 f9d5 	bl	8015bd0 <memset>
		return true;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <debugUartParser+0xb0>
	}
	else{
		return false;
 800482a:	2300      	movs	r3, #0
	}
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	2002c154 	.word	0x2002c154

08004838 <socUartParser>:

uint8_t * socUartParser(){
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	static uint8_t var_Seen[15];
	memset(var_Seen,0x00,sizeof(var_Seen));
 800483e:	220f      	movs	r2, #15
 8004840:	2100      	movs	r1, #0
 8004842:	4843      	ldr	r0, [pc, #268]	; (8004950 <socUartParser+0x118>)
 8004844:	f011 f9c4 	bl	8015bd0 <memset>
	static uint8_t failure[15];
	memset(failure, 0xff,sizeof(failure));
 8004848:	220f      	movs	r2, #15
 800484a:	21ff      	movs	r1, #255	; 0xff
 800484c:	4841      	ldr	r0, [pc, #260]	; (8004954 <socUartParser+0x11c>)
 800484e:	f011 f9bf 	bl	8015bd0 <memset>
	key_uint8[0] = (uint8_t)'F';
 8004852:	2346      	movs	r3, #70	; 0x46
 8004854:	713b      	strb	r3, [r7, #4]
	key_uint8[1] = (uint8_t)'F';
 8004856:	2346      	movs	r3, #70	; 0x46
 8004858:	717b      	strb	r3, [r7, #5]
	key_uint8[2] = (uint8_t)'U';
 800485a:	2355      	movs	r3, #85	; 0x55
 800485c:	71bb      	strb	r3, [r7, #6]
	key_uint8[3] = (uint8_t)':';
 800485e:	233a      	movs	r3, #58	; 0x3a
 8004860:	71fb      	strb	r3, [r7, #7]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 8004862:	2305      	movs	r3, #5
 8004864:	60fb      	str	r3, [r7, #12]
	int ffuBytes=4;
 8004866:	2304      	movs	r3, #4
 8004868:	60bb      	str	r3, [r7, #8]
	for(x=0;x<sizeof(soc_Uart_RX_Buf);x++){
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e057      	b.n	8004920 <socUartParser+0xe8>
		if(soc_Uart_RX_Buf[x]==key_uint8[0] && var_Seen[0]==0){
 8004870:	4a39      	ldr	r2, [pc, #228]	; (8004958 <socUartParser+0x120>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	793b      	ldrb	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d107      	bne.n	800488e <socUartParser+0x56>
 800487e:	4b34      	ldr	r3, [pc, #208]	; (8004950 <socUartParser+0x118>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <socUartParser+0x56>
			var_Seen[0] = 1;
 8004886:	4b32      	ldr	r3, [pc, #200]	; (8004950 <socUartParser+0x118>)
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e045      	b.n	800491a <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <socUartParser+0x120>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	797b      	ldrb	r3, [r7, #5]
 8004898:	429a      	cmp	r2, r3
 800489a:	d107      	bne.n	80048ac <socUartParser+0x74>
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <socUartParser+0x118>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <socUartParser+0x74>
			var_Seen[1] = 1;
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <socUartParser+0x118>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	705a      	strb	r2, [r3, #1]
 80048aa:	e036      	b.n	800491a <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <socUartParser+0x120>)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	79bb      	ldrb	r3, [r7, #6]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d107      	bne.n	80048ca <socUartParser+0x92>
 80048ba:	4b25      	ldr	r3, [pc, #148]	; (8004950 <socUartParser+0x118>)
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <socUartParser+0x92>
			var_Seen[2] = 1;
 80048c2:	4b23      	ldr	r3, [pc, #140]	; (8004950 <socUartParser+0x118>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	709a      	strb	r2, [r3, #2]
 80048c8:	e027      	b.n	800491a <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 80048ca:	4a23      	ldr	r2, [pc, #140]	; (8004958 <socUartParser+0x120>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <socUartParser+0xb0>
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <socUartParser+0x118>)
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <socUartParser+0xb0>
			var_Seen[3] = 1;
 80048e0:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <socUartParser+0x118>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	70da      	strb	r2, [r3, #3]
 80048e6:	e018      	b.n	800491a <socUartParser+0xe2>
			//break;
		}
		else if(var_Seen[3]){
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <socUartParser+0x118>)
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00f      	beq.n	8004910 <socUartParser+0xd8>
			if(ffuBytes<sizeof(var_Seen)){
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b0e      	cmp	r3, #14
 80048f4:	d819      	bhi.n	800492a <socUartParser+0xf2>
				var_Seen[ffuBytes] = soc_Uart_RX_Buf[x];
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <socUartParser+0x120>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	7819      	ldrb	r1, [r3, #0]
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <socUartParser+0x118>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4413      	add	r3, r2
 8004904:	460a      	mov	r2, r1
 8004906:	701a      	strb	r2, [r3, #0]
				ffuBytes++;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3301      	adds	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	e004      	b.n	800491a <socUartParser+0xe2>
			else{
				break;
			}
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 8004910:	220f      	movs	r2, #15
 8004912:	2100      	movs	r1, #0
 8004914:	480e      	ldr	r0, [pc, #56]	; (8004950 <socUartParser+0x118>)
 8004916:	f011 f95b 	bl	8015bd0 <memset>
	for(x=0;x<sizeof(soc_Uart_RX_Buf);x++){
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3301      	adds	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004926:	d3a3      	bcc.n	8004870 <socUartParser+0x38>
 8004928:	e000      	b.n	800492c <socUartParser+0xf4>
				break;
 800492a:	bf00      	nop
		}
	}
	if(var_Seen[3]){
 800492c:	4b08      	ldr	r3, [pc, #32]	; (8004950 <socUartParser+0x118>)
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <socUartParser+0x10c>

		memset(soc_Uart_RX_Buf,0x00,sizeof(soc_Uart_RX_Buf));
 8004934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004938:	2100      	movs	r1, #0
 800493a:	4807      	ldr	r0, [pc, #28]	; (8004958 <socUartParser+0x120>)
 800493c:	f011 f948 	bl	8015bd0 <memset>
		return var_Seen;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <socUartParser+0x118>)
 8004942:	e000      	b.n	8004946 <socUartParser+0x10e>
	}
	else{
		return failure;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <socUartParser+0x11c>)
	}
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20003408 	.word	0x20003408
 8004954:	20003418 	.word	0x20003418
 8004958:	20029384 	.word	0x20029384

0800495c <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8004964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004968:	4803      	ldr	r0, [pc, #12]	; (8004978 <startHeartbeat+0x1c>)
 800496a:	f004 fe3c 	bl	80095e6 <HAL_GPIO_TogglePin>
	  //spareUartTransmitRead("YOYOYO!\r\n");
	  osDelay(500);
 800496e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004972:	f009 ff13 	bl	800e79c <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8004976:	e7f5      	b.n	8004964 <startHeartbeat+0x8>
 8004978:	40022000 	.word	0x40022000

0800497c <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  HAL_StatusTypeDef Status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  // Clear HAL fault LED
	  //errorLED.fault9 = false;
	  //empty out the data ready variables and the adc3_bufs
	  adcStates.adcBank1Finished=0;
 8004988:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <startADCRead+0xb4>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
	  adcStates.adcBank2Finished=0;
 800498e:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <startADCRead+0xb4>)
 8004990:	2200      	movs	r2, #0
 8004992:	705a      	strb	r2, [r3, #1]
	  adcStates.adcBank3Finished=0;
 8004994:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <startADCRead+0xb4>)
 8004996:	2200      	movs	r2, #0
 8004998:	709a      	strb	r2, [r3, #2]
	//memset(adcRestart,0,sizeof(adcRestart));
	memset(adc1_buf, 0, sizeof(adc1_buf));
 800499a:	f242 7210 	movw	r2, #10000	; 0x2710
 800499e:	2100      	movs	r1, #0
 80049a0:	4824      	ldr	r0, [pc, #144]	; (8004a34 <startADCRead+0xb8>)
 80049a2:	f011 f915 	bl	8015bd0 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80049a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80049aa:	2100      	movs	r1, #0
 80049ac:	4822      	ldr	r0, [pc, #136]	; (8004a38 <startADCRead+0xbc>)
 80049ae:	f011 f90f 	bl	8015bd0 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80049b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80049b6:	2100      	movs	r1, #0
 80049b8:	4820      	ldr	r0, [pc, #128]	; (8004a3c <startADCRead+0xc0>)
 80049ba:	f011 f909 	bl	8015bd0 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	491c      	ldr	r1, [pc, #112]	; (8004a34 <startADCRead+0xb8>)
 80049c4:	481e      	ldr	r0, [pc, #120]	; (8004a40 <startADCRead+0xc4>)
 80049c6:	f003 fb1f 	bl	8008008 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <startADCRead+0x64>
	{
		DevUI_Error_Handler("ADC1 Failed read.", Status, 0, 0, true);
 80049d0:	7bf9      	ldrb	r1, [r7, #15]
 80049d2:	2301      	movs	r3, #1
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2300      	movs	r3, #0
 80049d8:	2200      	movs	r2, #0
 80049da:	481a      	ldr	r0, [pc, #104]	; (8004a44 <startADCRead+0xc8>)
 80049dc:	f7fe fd8e 	bl	80034fc <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	4914      	ldr	r1, [pc, #80]	; (8004a38 <startADCRead+0xbc>)
 80049e6:	4818      	ldr	r0, [pc, #96]	; (8004a48 <startADCRead+0xcc>)
 80049e8:	f003 fb0e 	bl	8008008 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <startADCRead+0x86>
	{
		DevUI_Error_Handler("ADC2 Failed read.", Status, 0, 0, true);
 80049f2:	7bf9      	ldrb	r1, [r7, #15]
 80049f4:	2301      	movs	r3, #1
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	2200      	movs	r2, #0
 80049fc:	4813      	ldr	r0, [pc, #76]	; (8004a4c <startADCRead+0xd0>)
 80049fe:	f7fe fd7d 	bl	80034fc <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <startADCRead+0xc0>)
 8004a08:	4811      	ldr	r0, [pc, #68]	; (8004a50 <startADCRead+0xd4>)
 8004a0a:	f003 fafd 	bl	8008008 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <startADCRead+0xa8>
	{
		DevUI_Error_Handler("ADC3 Failed read.", Status, 0, 0, true);
 8004a14:	7bf9      	ldrb	r1, [r7, #15]
 8004a16:	2301      	movs	r3, #1
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <startADCRead+0xd8>)
 8004a20:	f7fe fd6c 	bl	80034fc <DevUI_Error_Handler>
	}
    osDelay(600);
 8004a24:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004a28:	f009 feb8 	bl	800e79c <osDelay>
	  adcStates.adcBank1Finished=0;
 8004a2c:	e7ac      	b.n	8004988 <startADCRead+0xc>
 8004a2e:	bf00      	nop
 8004a30:	20003324 	.word	0x20003324
 8004a34:	2002976c 	.word	0x2002976c
 8004a38:	2002e9c4 	.word	0x2002e9c4
 8004a3c:	2002c21c 	.word	0x2002c21c
 8004a40:	2002bf00 	.word	0x2002bf00
 8004a44:	0801a6a0 	.word	0x0801a6a0
 8004a48:	20028dfc 	.word	0x20028dfc
 8004a4c:	0801a6b4 	.word	0x0801a6b4
 8004a50:	2002bfac 	.word	0x2002bfac
 8004a54:	0801a6c8 	.word	0x0801a6c8

08004a58 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
//	 int x = 0;
//	 float *adcValues;
//	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8004a60:	f000 fc56 	bl	8005310 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	737b      	strb	r3, [r7, #13]
//	 int *readI2c;
//	 int zionCleared=0;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8004a74:	f107 0208 	add.w	r2, r7, #8
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	21ff      	movs	r1, #255	; 0xff
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f00b fd5e 	bl	8010540 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 8004aa6:	7b7b      	ldrb	r3, [r7, #13]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d820      	bhi.n	8004af0 <GetDaScreenBlink+0x98>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <GetDaScreenBlink+0x5c>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004ac5 	.word	0x08004ac5
 8004abc:	08004add 	.word	0x08004add
 8004ac0:	08004ae7 	.word	0x08004ae7
		  {
		  case BOOT_MENU:
		  {
			  //printf("BOOT_MENU\r\n");
			  drawBootMenu(menu_val, button_val, running_menu);
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	7b7a      	ldrb	r2, [r7, #13]
 8004ac8:	7bf9      	ldrb	r1, [r7, #15]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fbd2 	bl	8006274 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 8004ad0:	e00e      	b.n	8004af0 <GetDaScreenBlink+0x98>
		  }
		  case MAIN_MENU:
		  {
			  //printf("MAIN_MENU\r\n");
			  drawMainMenu(menu_val);
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fc55 	bl	8005384 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 8004ada:	e009      	b.n	8004af0 <GetDaScreenBlink+0x98>
		  }
		  case STATUS_MENU:
		  {
			  //printf("STATUS_MENU\r\n");
			  drawStatusMenu(menu_val);
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fdea 	bl	80056b8 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8004ae4:	e004      	b.n	8004af0 <GetDaScreenBlink+0x98>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  //printf("SYSTEM INFO MENU\r\n");
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 8004ae6:	7bbb      	ldrb	r3, [r7, #14]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f8a7 	bl	8005c3c <drawSystemInfoMenu>
			  break;
 8004aee:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8004af0:	2064      	movs	r0, #100	; 0x64
 8004af2:	f009 fe53 	bl	800e79c <osDelay>
	 	  ulNotifiedValue = 0;
 8004af6:	e7bb      	b.n	8004a70 <GetDaScreenBlink+0x18>

08004af8 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004b00:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	461c      	mov	r4, r3
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	4847      	ldr	r0, [pc, #284]	; (8004c28 <startGpioInputRead+0x130>)
 8004b0a:	f004 fd3b 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b46      	ldr	r3, [pc, #280]	; (8004c2c <startGpioInputRead+0x134>)
 8004b14:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004b16:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b20:	4843      	ldr	r0, [pc, #268]	; (8004c30 <startGpioInputRead+0x138>)
 8004b22:	f004 fd2f 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b26:	4603      	mov	r3, r0
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b40      	ldr	r3, [pc, #256]	; (8004c2c <startGpioInputRead+0x134>)
 8004b2c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	461c      	mov	r4, r3
 8004b34:	2110      	movs	r1, #16
 8004b36:	483f      	ldr	r0, [pc, #252]	; (8004c34 <startGpioInputRead+0x13c>)
 8004b38:	f004 fd24 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b3a      	ldr	r3, [pc, #232]	; (8004c2c <startGpioInputRead+0x134>)
 8004b42:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b46:	78db      	ldrb	r3, [r3, #3]
 8004b48:	461c      	mov	r4, r3
 8004b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b4e:	4839      	ldr	r0, [pc, #228]	; (8004c34 <startGpioInputRead+0x13c>)
 8004b50:	f004 fd18 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <startGpioInputRead+0x134>)
 8004b5a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004b5c:	4b31      	ldr	r3, [pc, #196]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b5e:	791b      	ldrb	r3, [r3, #4]
 8004b60:	461c      	mov	r4, r3
 8004b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b66:	4833      	ldr	r0, [pc, #204]	; (8004c34 <startGpioInputRead+0x13c>)
 8004b68:	f004 fd0c 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <startGpioInputRead+0x134>)
 8004b72:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8004b74:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b76:	795b      	ldrb	r3, [r3, #5]
 8004b78:	461c      	mov	r4, r3
 8004b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b7e:	482d      	ldr	r0, [pc, #180]	; (8004c34 <startGpioInputRead+0x13c>)
 8004b80:	f004 fd00 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <startGpioInputRead+0x134>)
 8004b8a:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <startGpioInputRead+0x12c>)
 8004b8e:	799b      	ldrb	r3, [r3, #6]
 8004b90:	461c      	mov	r4, r3
 8004b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b96:	4827      	ldr	r0, [pc, #156]	; (8004c34 <startGpioInputRead+0x13c>)
 8004b98:	f004 fcf4 	bl	8009584 <HAL_GPIO_ReadPin>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <startGpioInputRead+0x134>)
 8004ba2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <startGpioInputRead+0x12c>)
 8004ba6:	79db      	ldrb	r3, [r3, #7]
 8004ba8:	461c      	mov	r4, r3
 8004baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bae:	4821      	ldr	r0, [pc, #132]	; (8004c34 <startGpioInputRead+0x13c>)
 8004bb0:	f004 fce8 	bl	8009584 <HAL_GPIO_ReadPin>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <startGpioInputRead+0x134>)
 8004bba:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <startGpioInputRead+0x12c>)
 8004bbe:	7a1b      	ldrb	r3, [r3, #8]
 8004bc0:	461c      	mov	r4, r3
 8004bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bc6:	481b      	ldr	r0, [pc, #108]	; (8004c34 <startGpioInputRead+0x13c>)
 8004bc8:	f004 fcdc 	bl	8009584 <HAL_GPIO_ReadPin>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <startGpioInputRead+0x134>)
 8004bd2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8004bd4:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <startGpioInputRead+0x12c>)
 8004bd6:	7a5b      	ldrb	r3, [r3, #9]
 8004bd8:	461c      	mov	r4, r3
 8004bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bde:	4815      	ldr	r0, [pc, #84]	; (8004c34 <startGpioInputRead+0x13c>)
 8004be0:	f004 fcd0 	bl	8009584 <HAL_GPIO_ReadPin>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <startGpioInputRead+0x134>)
 8004bea:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <startGpioInputRead+0x12c>)
 8004bee:	7a9b      	ldrb	r3, [r3, #10]
 8004bf0:	461c      	mov	r4, r3
 8004bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bf6:	480f      	ldr	r0, [pc, #60]	; (8004c34 <startGpioInputRead+0x13c>)
 8004bf8:	f004 fcc4 	bl	8009584 <HAL_GPIO_ReadPin>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <startGpioInputRead+0x134>)
 8004c02:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <startGpioInputRead+0x12c>)
 8004c06:	7adb      	ldrb	r3, [r3, #11]
 8004c08:	461c      	mov	r4, r3
 8004c0a:	2108      	movs	r1, #8
 8004c0c:	480a      	ldr	r0, [pc, #40]	; (8004c38 <startGpioInputRead+0x140>)
 8004c0e:	f004 fcb9 	bl	8009584 <HAL_GPIO_ReadPin>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <startGpioInputRead+0x134>)
 8004c18:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004c1a:	f240 30b6 	movw	r0, #950	; 0x3b6
 8004c1e:	f009 fdbd 	bl	800e79c <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004c22:	e76d      	b.n	8004b00 <startGpioInputRead+0x8>
 8004c24:	20000014 	.word	0x20000014
 8004c28:	40020400 	.word	0x40020400
 8004c2c:	20028df0 	.word	0x20028df0
 8004c30:	40020800 	.word	0x40020800
 8004c34:	40020c00 	.word	0x40020c00
 8004c38:	40021000 	.word	0x40021000

08004c3c <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004c50:	2303      	movs	r3, #3
 8004c52:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004c58:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <startNavigationTask+0x174>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d86f      	bhi.n	8004d42 <startNavigationTask+0x106>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <startNavigationTask+0x2c>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004cdf 	.word	0x08004cdf
 8004c74:	08004d0d 	.word	0x08004d0d
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d070      	beq.n	8004d60 <startNavigationTask+0x124>
 8004c7e:	4b4d      	ldr	r3, [pc, #308]	; (8004db4 <startNavigationTask+0x178>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d16c      	bne.n	8004d60 <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004c8c:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <startNavigationTask+0x17c>)
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	7bbb      	ldrb	r3, [r7, #14]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	f00b fca6 	bl	80105f4 <xTaskGenericNotify>
		}
		break;
 8004ca8:	e05a      	b.n	8004d60 <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	7b3b      	ldrb	r3, [r7, #12]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d258      	bcs.n	8004d64 <startNavigationTask+0x128>
 8004cb2:	4b40      	ldr	r3, [pc, #256]	; (8004db4 <startNavigationTask+0x178>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d154      	bne.n	8004d64 <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004cc0:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <startNavigationTask+0x17c>)
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	f043 0202 	orr.w	r2, r3, #2
 8004ccc:	7bbb      	ldrb	r3, [r7, #14]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	f00b fc8c 	bl	80105f4 <xTaskGenericNotify>
		}
		break;
 8004cdc:	e042      	b.n	8004d64 <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 8004cde:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <startNavigationTask+0x178>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <startNavigationTask+0xb2>
			menu_run = prev_menu;
 8004ce6:	7b7b      	ldrb	r3, [r7, #13]
 8004ce8:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <startNavigationTask+0x17c>)
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	f043 0203 	orr.w	r2, r3, #3
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	2204      	movs	r2, #4
 8004d06:	f00b fc75 	bl	80105f4 <xTaskGenericNotify>
		break;
 8004d0a:	e02c      	b.n	8004d66 <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d108      	bne.n	8004d24 <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <startNavigationTask+0x17c>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	f043 0204 	orr.w	r2, r3, #4
 8004d30:	7bbb      	ldrb	r3, [r7, #14]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	4313      	orrs	r3, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	f00b fc5a 	bl	80105f4 <xTaskGenericNotify>
		break;
 8004d40:	e011      	b.n	8004d66 <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <startNavigationTask+0x17c>)
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	f043 0205 	orr.w	r2, r3, #5
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	4313      	orrs	r3, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	2204      	movs	r2, #4
 8004d5a:	f00b fc4b 	bl	80105f4 <xTaskGenericNotify>
		break;
 8004d5e:	e002      	b.n	8004d66 <startNavigationTask+0x12a>
		break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <startNavigationTask+0x12a>
		break;
 8004d64:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d816      	bhi.n	8004d9c <startNavigationTask+0x160>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <startNavigationTask+0x138>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d8b 	.word	0x08004d8b
 8004d78:	08004d85 	.word	0x08004d85
 8004d7c:	08004d91 	.word	0x08004d91
 8004d80:	08004d97 	.word	0x08004d97

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004d84:	2305      	movs	r3, #5
 8004d86:	733b      	strb	r3, [r7, #12]
		break;
 8004d88:	e00b      	b.n	8004da2 <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	733b      	strb	r3, [r7, #12]
		break;
 8004d8e:	e008      	b.n	8004da2 <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004d90:	2303      	movs	r3, #3
 8004d92:	733b      	strb	r3, [r7, #12]
		break;
 8004d94:	e005      	b.n	8004da2 <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004d96:	2302      	movs	r3, #2
 8004d98:	733b      	strb	r3, [r7, #12]
		break;
 8004d9a:	e002      	b.n	8004da2 <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004d9c:	2305      	movs	r3, #5
 8004d9e:	733b      	strb	r3, [r7, #12]
		break;
 8004da0:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 8004da2:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <startNavigationTask+0x174>)
 8004da4:	2205      	movs	r2, #5
 8004da6:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004da8:	20c8      	movs	r0, #200	; 0xc8
 8004daa:	f009 fcf7 	bl	800e79c <osDelay>
	switch(inputButtonSet)
 8004dae:	e753      	b.n	8004c58 <startNavigationTask+0x1c>
 8004db0:	200000b8 	.word	0x200000b8
 8004db4:	20003360 	.word	0x20003360
 8004db8:	20031194 	.word	0x20031194

08004dbc <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b08e      	sub	sp, #56	; 0x38
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	uint8_t B;
	float * presentADCValues;

	// An array of voltage rails that are monitored for faults.  Each element maps to the apporpriate ADC channel for monitoring
	// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
	uint8_t monitor_rails[] = {VSYS, VREG_BOB, VREG_S5A, VREG_S6C};
 8004dc4:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <startErrorLEDs+0x64>)
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30

	// An array of falling edge fault thresholds for the voltage rails that are monitored for faults.  Size of the array and index for each fault should match the voltage name in monitor_rails[].
	double monitor_fault_thresholds[] = {VSYS_FLT, VREG_BOB_FLT, VREG_S5A_FLT, VREG_S6C_FLT};
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <startErrorLEDs+0x68>)
 8004dca:	f107 0410 	add.w	r4, r7, #16
 8004dce:	461d      	mov	r5, r3
 8004dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// An array of platform gpio inputs that are monitored for faults.  Each element maps to the appropriate STM GPIO input for monitoring
	// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
	uint8_t monitor_gpio[] = {SOC_IN0, SOC_IN3, SOC_IN8, SOC_IN11};
 8004ddc:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <startErrorLEDs+0x6c>)
 8004dde:	60fb      	str	r3, [r7, #12]

	// An array of logic fault thresholds for the GPIO input rails that are monitored for faults.  The fault thresholds should match the mapping used in monitor_gpio[].
	uint8_t gpio_thresholds[] = {SOC_IN0_FLT, SOC_IN3_FLT, SOC_IN8_FLT, SOC_IN11_FLT};
 8004de0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004de4:	60bb      	str	r3, [r7, #8]

	uint8_t * errorLEDptr;

  for(;;)
  {
	  int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <startErrorLEDs+0x70>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d007      	beq.n	8004dfe <startErrorLEDs+0x42>
 8004dee:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <startErrorLEDs+0x70>)
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d003      	beq.n	8004dfe <startErrorLEDs+0x42>
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <startErrorLEDs+0x70>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <startErrorLEDs+0x46>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <startErrorLEDs+0x48>
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
	  if(weAreAtlas){
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <startErrorLEDs+0x56>
		  atlasErrorLEDs();
 8004e0c:	f00e fe14 	bl	8013a38 <atlasErrorLEDs>
 8004e10:	e001      	b.n	8004e16 <startErrorLEDs+0x5a>
	  }
	  else{
		  defaultErrorLEDs();
 8004e12:	f010 fd99 	bl	8015948 <defaultErrorLEDs>
//		  setErrorLED(FAULT9,errorLED.fault9);
//	  }
//	  else
//		  errorLED.ledDriver = true;

    osDelay(500);
 8004e16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e1a:	f009 fcbf 	bl	800e79c <osDelay>
  {
 8004e1e:	e7e2      	b.n	8004de6 <startErrorLEDs+0x2a>
 8004e20:	03020100 	.word	0x03020100
 8004e24:	0801a6e0 	.word	0x0801a6e0
 8004e28:	0b080300 	.word	0x0b080300
 8004e2c:	20003328 	.word	0x20003328

08004e30 <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004e3c:	4b79      	ldr	r3, [pc, #484]	; (8005024 <startZionRead+0x1f4>)
 8004e3e:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 8004e40:	4b79      	ldr	r3, [pc, #484]	; (8005028 <startZionRead+0x1f8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f040 80e5 	bne.w	8005014 <startZionRead+0x1e4>
		  if (adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8004e4a:	4b78      	ldr	r3, [pc, #480]	; (800502c <startZionRead+0x1fc>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <startZionRead+0x46>
 8004e52:	4b76      	ldr	r3, [pc, #472]	; (800502c <startZionRead+0x1fc>)
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <startZionRead+0x46>
 8004e5a:	4b74      	ldr	r3, [pc, #464]	; (800502c <startZionRead+0x1fc>)
 8004e5c:	789b      	ldrb	r3, [r3, #2]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 8004e62:	f7ff f847 	bl	8003ef4 <getADCValues>
 8004e66:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 8004e68:	4b71      	ldr	r3, [pc, #452]	; (8005030 <startZionRead+0x200>)
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 8004e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e7a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005034 <startZionRead+0x204>
 8004e7e:	eef4 7a47 	vcmp.f32	s15, s14
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	f000 80c8 	beq.w	800501a <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004e8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9a:	dd5d      	ble.n	8004f58 <startZionRead+0x128>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d15a      	bne.n	8004f58 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 8004ea2:	f002 fefb 	bl	8007c9c <HAL_GetTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a63      	ldr	r2, [pc, #396]	; (8005038 <startZionRead+0x208>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	f340 80af 	ble.w	8005018 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004eba:	f002 fbf1 	bl	80076a0 <zionEEPROMPresence>
 8004ebe:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004ec8:	4b57      	ldr	r3, [pc, #348]	; (8005028 <startZionRead+0x1f8>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004ece:	20a6      	movs	r0, #166	; 0xa6
 8004ed0:	f002 fc36 	bl	8007740 <parseZionEEPROM>
 8004ed4:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a53      	ldr	r2, [pc, #332]	; (8005028 <startZionRead+0x1f8>)
 8004edc:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	4a51      	ldr	r2, [pc, #324]	; (8005028 <startZionRead+0x1f8>)
 8004ee4:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	4a4f      	ldr	r2, [pc, #316]	; (8005028 <startZionRead+0x1f8>)
 8004eec:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d012      	beq.n	8004f1e <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004ef8:	4b4b      	ldr	r3, [pc, #300]	; (8005028 <startZionRead+0x1f8>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004efe:	20a8      	movs	r0, #168	; 0xa8
 8004f00:	f002 fc1e 	bl	8007740 <parseZionEEPROM>
 8004f04:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <startZionRead+0x1f8>)
 8004f0c:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4a45      	ldr	r2, [pc, #276]	; (8005028 <startZionRead+0x1f8>)
 8004f14:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	4a43      	ldr	r2, [pc, #268]	; (8005028 <startZionRead+0x1f8>)
 8004f1c:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3308      	adds	r3, #8
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d012      	beq.n	8004f4e <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004f28:	4b3f      	ldr	r3, [pc, #252]	; (8005028 <startZionRead+0x1f8>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004f2e:	20aa      	movs	r0, #170	; 0xaa
 8004f30:	f002 fc06 	bl	8007740 <parseZionEEPROM>
 8004f34:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <startZionRead+0x1f8>)
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a39      	ldr	r2, [pc, #228]	; (8005028 <startZionRead+0x1f8>)
 8004f44:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4a37      	ldr	r2, [pc, #220]	; (8005028 <startZionRead+0x1f8>)
 8004f4c:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004f4e:	4b36      	ldr	r3, [pc, #216]	; (8005028 <startZionRead+0x1f8>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004f54:	f009 fc1c 	bl	800e790 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f64:	4835      	ldr	r0, [pc, #212]	; (800503c <startZionRead+0x20c>)
 8004f66:	f004 fb25 	bl	80095b4 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	; (8005028 <startZionRead+0x1f8>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004f70:	2301      	movs	r3, #1
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e051      	b.n	800501a <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004f76:	f002 fb93 	bl	80076a0 <zionEEPROMPresence>
 8004f7a:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d012      	beq.n	8004faa <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <startZionRead+0x1f8>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004f8a:	20a6      	movs	r0, #166	; 0xa6
 8004f8c:	f002 fbd8 	bl	8007740 <parseZionEEPROM>
 8004f90:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a24      	ldr	r2, [pc, #144]	; (8005028 <startZionRead+0x1f8>)
 8004f98:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	; (8005028 <startZionRead+0x1f8>)
 8004fa0:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <startZionRead+0x1f8>)
 8004fa8:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3304      	adds	r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <startZionRead+0x1f8>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004fba:	20a8      	movs	r0, #168	; 0xa8
 8004fbc:	f002 fbc0 	bl	8007740 <parseZionEEPROM>
 8004fc0:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <startZionRead+0x1f8>)
 8004fc8:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4a16      	ldr	r2, [pc, #88]	; (8005028 <startZionRead+0x1f8>)
 8004fd0:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <startZionRead+0x1f8>)
 8004fd8:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d012      	beq.n	800500a <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004fe4:	4b10      	ldr	r3, [pc, #64]	; (8005028 <startZionRead+0x1f8>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004fea:	20aa      	movs	r0, #170	; 0xaa
 8004fec:	f002 fba8 	bl	8007740 <parseZionEEPROM>
 8004ff0:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <startZionRead+0x1f8>)
 8004ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <startZionRead+0x1f8>)
 8005000:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <startZionRead+0x1f8>)
 8005008:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <startZionRead+0x1f8>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8005010:	f009 fbbe 	bl	800e790 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8005014:	f009 fbbc 	bl	800e790 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8005018:	bf00      	nop
	  }
    osDelay(400);
 800501a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800501e:	f009 fbbd 	bl	800e79c <osDelay>
	  if(!ZION.zionFinished){
 8005022:	e70d      	b.n	8004e40 <startZionRead+0x10>
 8005024:	429a0000 	.word	0x429a0000
 8005028:	20003328 	.word	0x20003328
 800502c:	20003324 	.word	0x20003324
 8005030:	20000058 	.word	0x20000058
 8005034:	429a0000 	.word	0x429a0000
 8005038:	10624dd3 	.word	0x10624dd3
 800503c:	40020400 	.word	0x40020400

08005040 <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
	int presentTime=0;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <startBootButtons+0x70>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d024      	beq.n	80050a6 <startBootButtons+0x66>
		  int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 800505c:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <startBootButtons+0x74>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d007      	beq.n	8005074 <startBootButtons+0x34>
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <startBootButtons+0x74>)
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b01      	cmp	r3, #1
 800506a:	d003      	beq.n	8005074 <startBootButtons+0x34>
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <startBootButtons+0x74>)
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <startBootButtons+0x38>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <startBootButtons+0x3a>
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
		  presentTime = (HAL_GetTick());
 800507c:	f002 fe0e 	bl	8007c9c <HAL_GetTick>
 8005080:	4603      	mov	r3, r0
 8005082:	60fb      	str	r3, [r7, #12]
		  if(timeTurnedOn==0){
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <startBootButtons+0x4e>
			  timeTurnedOn=presentTime;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	613b      	str	r3, [r7, #16]
		  }
		  if(weAreAtlas){
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <startBootButtons+0x5e>
			  pwrBtnReady=atlasBootButtons(pwrBtnReady);
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	f00e faa1 	bl	80135dc <atlasBootButtons>
 800509a:	6178      	str	r0, [r7, #20]
 800509c:	e003      	b.n	80050a6 <startBootButtons+0x66>
		  }
		  else{
			  pwrBtnReady=defaultBootButtons(pwrBtnReady);
 800509e:	6978      	ldr	r0, [r7, #20]
 80050a0:	f010 fb3a 	bl	8015718 <defaultBootButtons>
 80050a4:	6178      	str	r0, [r7, #20]
//				  EX_SW_OFF;
//				  //osDelay(300);
//			  }
//		  }
	  }
    osDelay(800);
 80050a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80050aa:	f009 fb77 	bl	800e79c <osDelay>
	  if(bootButtons.bootModeSet){
 80050ae:	e7d1      	b.n	8005054 <startBootButtons+0x14>
 80050b0:	20003360 	.word	0x20003360
 80050b4:	20003328 	.word	0x20003328

080050b8 <startSocUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSocUart */
void startSocUart(void *argument)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	uint8_t * receivedBytes;
	uint8_t values[11];
  /* Infinite loop */
  for(;;)
  {
	  receivedBytes = socUartParser();
 80050c0:	f7ff fbba 	bl	8004838 <socUartParser>
 80050c4:	61b8      	str	r0, [r7, #24]
	  if((*receivedBytes) != 0xff){
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2bff      	cmp	r3, #255	; 0xff
 80050cc:	d013      	beq.n	80050f6 <startSocUart+0x3e>
		  for(int x=4;x<15;x++){
 80050ce:	2304      	movs	r3, #4
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e00d      	b.n	80050f0 <startSocUart+0x38>
			  values[x-4] = *(receivedBytes+x);
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	441a      	add	r2, r3
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3b04      	subs	r3, #4
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	f107 0120 	add.w	r1, r7, #32
 80050e4:	440b      	add	r3, r1
 80050e6:	f803 2c14 	strb.w	r2, [r3, #-20]
		  for(int x=4;x<15;x++){
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b0e      	cmp	r3, #14
 80050f4:	ddee      	ble.n	80050d4 <startSocUart+0x1c>
		  }
	  }
	  //int x = 0;
    osDelay(400);
 80050f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80050fa:	f009 fb4f 	bl	800e79c <osDelay>
	  receivedBytes = socUartParser();
 80050fe:	e7df      	b.n	80050c0 <startSocUart+0x8>

08005100 <startDebugUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDebugUart */
void startDebugUart(void *argument)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	float * presentADCValues;


  for(;;)
  {
	  if(adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8005108:	4b62      	ldr	r3, [pc, #392]	; (8005294 <startDebugUart+0x194>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <startDebugUart+0x26>
 8005110:	4b60      	ldr	r3, [pc, #384]	; (8005294 <startDebugUart+0x194>)
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d006      	beq.n	8005126 <startDebugUart+0x26>
 8005118:	4b5e      	ldr	r3, [pc, #376]	; (8005294 <startDebugUart+0x194>)
 800511a:	789b      	ldrb	r3, [r3, #2]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <startDebugUart+0x26>
		  presentADCValues = getADCValues();
 8005120:	f7fe fee8 	bl	8003ef4 <getADCValues>
 8005124:	6238      	str	r0, [r7, #32]

	  }
	  commandSent = debugUartParser();
 8005126:	f7ff fb29 	bl	800477c <debugUartParser>
 800512a:	4603      	mov	r3, r0
 800512c:	77fb      	strb	r3, [r7, #31]
	  if(commandSent == true){
 800512e:	7ffb      	ldrb	r3, [r7, #31]
 8005130:	2b01      	cmp	r3, #1
 8005132:	f040 80a9 	bne.w	8005288 <startDebugUart+0x188>
		  char buf[5];
		  debugUartTransmitChar("ADCValues:");
 8005136:	4858      	ldr	r0, [pc, #352]	; (8005298 <startDebugUart+0x198>)
 8005138:	f7fe fb5c 	bl	80037f4 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
 8005140:	e01d      	b.n	800517e <startDebugUart+0x7e>
			  sprintf(buf, "%f", *(presentADCValues+x));
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	6a3a      	ldr	r2, [r7, #32]
 8005148:	4413      	add	r3, r2
 800514a:	edd3 7a00 	vldr	s15, [r3]
 800514e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005152:	f107 0018 	add.w	r0, r7, #24
 8005156:	ec53 2b17 	vmov	r2, r3, d7
 800515a:	4950      	ldr	r1, [pc, #320]	; (800529c <startDebugUart+0x19c>)
 800515c:	f011 fc1a 	bl	8016994 <siprintf>
			  //snprintf(buf, 5, "%f", *(presentADCValues+x));
			  debugUartTransmitStuff(buf,5);
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	2105      	movs	r1, #5
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fb60 	bl	800382c <debugUartTransmitStuff>
			  if(x<20){
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	2b13      	cmp	r3, #19
 8005170:	dc02      	bgt.n	8005178 <startDebugUart+0x78>
				  debugUartTransmitChar(",");
 8005172:	484b      	ldr	r0, [pc, #300]	; (80052a0 <startDebugUart+0x1a0>)
 8005174:	f7fe fb3e 	bl	80037f4 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	2b14      	cmp	r3, #20
 8005182:	ddde      	ble.n	8005142 <startDebugUart+0x42>
			  }

		  }
		  debugUartTransmitChar("\r\n");
 8005184:	4847      	ldr	r0, [pc, #284]	; (80052a4 <startDebugUart+0x1a4>)
 8005186:	f7fe fb35 	bl	80037f4 <debugUartTransmitChar>
		  debugUartTransmitChar("INPUT GPIOs:");
 800518a:	4847      	ldr	r0, [pc, #284]	; (80052a8 <startDebugUart+0x1a8>)
 800518c:	f7fe fb32 	bl	80037f4 <debugUartTransmitChar>
		  //uint8_t gpioInputs[12];
		  //memcpy(gpioInputs,gpioInputBuf,sizeof(gpioInputBuf));
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 8005190:	2300      	movs	r3, #0
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	e018      	b.n	80051c8 <startDebugUart+0xc8>
			  sprintf(buf,"%x",gpioInputBuf[x]);
 8005196:	4a45      	ldr	r2, [pc, #276]	; (80052ac <startDebugUart+0x1ac>)
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	4413      	add	r3, r2
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f107 0318 	add.w	r3, r7, #24
 80051a4:	4942      	ldr	r1, [pc, #264]	; (80052b0 <startDebugUart+0x1b0>)
 80051a6:	4618      	mov	r0, r3
 80051a8:	f011 fbf4 	bl	8016994 <siprintf>
			  debugUartTransmitChar(buf);
 80051ac:	f107 0318 	add.w	r3, r7, #24
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fb1f 	bl	80037f4 <debugUartTransmitChar>
			  if(x<(sizeof(gpioInputBuf))-1){
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	2b0a      	cmp	r3, #10
 80051ba:	d802      	bhi.n	80051c2 <startDebugUart+0xc2>
				  debugUartTransmitChar(",");
 80051bc:	4838      	ldr	r0, [pc, #224]	; (80052a0 <startDebugUart+0x1a0>)
 80051be:	f7fe fb19 	bl	80037f4 <debugUartTransmitChar>
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	3301      	adds	r3, #1
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	2b0b      	cmp	r3, #11
 80051cc:	d9e3      	bls.n	8005196 <startDebugUart+0x96>
			  }
		  }
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)gpioInputs, sizeof(gpioInputs),100);
		  debugUartTransmitChar("\r\n");
 80051ce:	4835      	ldr	r0, [pc, #212]	; (80052a4 <startDebugUart+0x1a4>)
 80051d0:	f7fe fb10 	bl	80037f4 <debugUartTransmitChar>
		  debugUartTransmitChar("Errors:");
 80051d4:	4837      	ldr	r0, [pc, #220]	; (80052b4 <startDebugUart+0x1b4>)
 80051d6:	f7fe fb0d 	bl	80037f4 <debugUartTransmitChar>
		  uint8_t errors[11];
		  errors[0] = errorLED.zionFault;
 80051da:	4b37      	ldr	r3, [pc, #220]	; (80052b8 <startDebugUart+0x1b8>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	733b      	strb	r3, [r7, #12]
		  errors[1] = errorLED.vsysPMIFault;
 80051e0:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <startDebugUart+0x1b8>)
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	737b      	strb	r3, [r7, #13]
		  errors[2] = errorLED.fault3;
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <startDebugUart+0x1b8>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	73bb      	strb	r3, [r7, #14]
		  errors[3] = errorLED.fault4;
 80051ec:	4b32      	ldr	r3, [pc, #200]	; (80052b8 <startDebugUart+0x1b8>)
 80051ee:	78db      	ldrb	r3, [r3, #3]
 80051f0:	73fb      	strb	r3, [r7, #15]
		  errors[4] = errorLED.fault5;
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <startDebugUart+0x1b8>)
 80051f4:	791b      	ldrb	r3, [r3, #4]
 80051f6:	743b      	strb	r3, [r7, #16]
		  errors[5] = errorLED.fault6;
 80051f8:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <startDebugUart+0x1b8>)
 80051fa:	795b      	ldrb	r3, [r3, #5]
 80051fc:	747b      	strb	r3, [r7, #17]
		  errors[6] = errorLED.fault7;
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <startDebugUart+0x1b8>)
 8005200:	799b      	ldrb	r3, [r3, #6]
 8005202:	74bb      	strb	r3, [r7, #18]
		  errors[7] = errorLED.fault8;
 8005204:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <startDebugUart+0x1b8>)
 8005206:	7adb      	ldrb	r3, [r3, #11]
 8005208:	74fb      	strb	r3, [r7, #19]
		  errors[8] = errorLED.fault9;
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <startDebugUart+0x1b8>)
 800520c:	7b1b      	ldrb	r3, [r3, #12]
 800520e:	753b      	strb	r3, [r7, #20]
		  errors[9] = errorLED.boot_fault;
 8005210:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <startDebugUart+0x1b8>)
 8005212:	79db      	ldrb	r3, [r3, #7]
 8005214:	757b      	strb	r3, [r7, #21]
		  errors[10] = errorLED.ledDriver;
 8005216:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <startDebugUart+0x1b8>)
 8005218:	7b5b      	ldrb	r3, [r3, #13]
 800521a:	75bb      	strb	r3, [r7, #22]
		  for(x=0;x<sizeof(errors);x++){
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	e019      	b.n	8005256 <startDebugUart+0x156>
			  sprintf(buf,"%x",errors[x]);
 8005222:	f107 020c 	add.w	r2, r7, #12
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	4413      	add	r3, r2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	f107 0318 	add.w	r3, r7, #24
 8005232:	491f      	ldr	r1, [pc, #124]	; (80052b0 <startDebugUart+0x1b0>)
 8005234:	4618      	mov	r0, r3
 8005236:	f011 fbad 	bl	8016994 <siprintf>
			  debugUartTransmitChar(buf);
 800523a:	f107 0318 	add.w	r3, r7, #24
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fad8 	bl	80037f4 <debugUartTransmitChar>
			  if(x<(sizeof(errors))-1){
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	2b09      	cmp	r3, #9
 8005248:	d802      	bhi.n	8005250 <startDebugUart+0x150>
				  debugUartTransmitChar(",");
 800524a:	4815      	ldr	r0, [pc, #84]	; (80052a0 <startDebugUart+0x1a0>)
 800524c:	f7fe fad2 	bl	80037f4 <debugUartTransmitChar>
		  for(x=0;x<sizeof(errors);x++){
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	3301      	adds	r3, #1
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b0a      	cmp	r3, #10
 800525a:	d9e2      	bls.n	8005222 <startDebugUart+0x122>
			  }
		  }
		  debugUartTransmitChar("\r\n");
 800525c:	4811      	ldr	r0, [pc, #68]	; (80052a4 <startDebugUart+0x1a4>)
 800525e:	f7fe fac9 	bl	80037f4 <debugUartTransmitChar>
		  debugUartTransmitChar("Boot Mode:");
 8005262:	4816      	ldr	r0, [pc, #88]	; (80052bc <startDebugUart+0x1bc>)
 8005264:	f7fe fac6 	bl	80037f4 <debugUartTransmitChar>
		  sprintf(buf,"%d",bootButtons.bootMode);
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <startDebugUart+0x1c0>)
 800526a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526c:	f107 0318 	add.w	r3, r7, #24
 8005270:	4914      	ldr	r1, [pc, #80]	; (80052c4 <startDebugUart+0x1c4>)
 8005272:	4618      	mov	r0, r3
 8005274:	f011 fb8e 	bl	8016994 <siprintf>
		  debugUartTransmitChar(buf);
 8005278:	f107 0318 	add.w	r3, r7, #24
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fab9 	bl	80037f4 <debugUartTransmitChar>
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)bootButtons.bootMode, 1,100);
		  debugUartTransmitChar("\r\n");
 8005282:	4808      	ldr	r0, [pc, #32]	; (80052a4 <startDebugUart+0x1a4>)
 8005284:	f7fe fab6 	bl	80037f4 <debugUartTransmitChar>
	  }
    osDelay(500);
 8005288:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800528c:	f009 fa86 	bl	800e79c <osDelay>
	  if(adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8005290:	e73a      	b.n	8005108 <startDebugUart+0x8>
 8005292:	bf00      	nop
 8005294:	20003324 	.word	0x20003324
 8005298:	0801a700 	.word	0x0801a700
 800529c:	0801a70c 	.word	0x0801a70c
 80052a0:	0801a710 	.word	0x0801a710
 80052a4:	0801a714 	.word	0x0801a714
 80052a8:	0801a718 	.word	0x0801a718
 80052ac:	20028df0 	.word	0x20028df0
 80052b0:	0801a728 	.word	0x0801a728
 80052b4:	0801a72c 	.word	0x0801a72c
 80052b8:	2000338c 	.word	0x2000338c
 80052bc:	0801a734 	.word	0x0801a734
 80052c0:	20003360 	.word	0x20003360
 80052c4:	0801a740 	.word	0x0801a740

080052c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80052da:	f002 fccb 	bl	8007c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40001000 	.word	0x40001000

080052ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052f0:	b672      	cpsid	i
}
 80052f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052f4:	e7fe      	b.n	80052f4 <Error_Handler+0x8>
	...

080052f8 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80052fc:	2201      	movs	r2, #1
 80052fe:	2102      	movs	r1, #2
 8005300:	4802      	ldr	r0, [pc, #8]	; (800530c <SMLCD_Enable+0x14>)
 8005302:	f004 f957 	bl	80095b4 <HAL_GPIO_WritePin>
}
 8005306:	bf00      	nop
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40022400 	.word	0x40022400

08005310 <initializeDisplay>:
int checkedEEPROM=0;
int i2cCheck=1;

#define VSYS_ADC_VAL		displayAdcValues[Adc.adc0]

void initializeDisplay(){
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b099      	sub	sp, #100	; 0x64
 8005314:	af16      	add	r7, sp, #88	; 0x58
	HAL_StatusTypeDef Status = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	71fb      	strb	r3, [r7, #7]
	SMLCD_InitGPIO();
 800531a:	f7fb fb6d 	bl	80009f8 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 800531e:	4c16      	ldr	r4, [pc, #88]	; (8005378 <initializeDisplay+0x68>)
 8005320:	4668      	mov	r0, sp
 8005322:	f104 0310 	add.w	r3, r4, #16
 8005326:	2254      	movs	r2, #84	; 0x54
 8005328:	4619      	mov	r1, r3
 800532a:	f010 fc43 	bl	8015bb4 <memcpy>
 800532e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005332:	f7fb fb81 	bl	8000a38 <SMLCD_Init>
	SMLCD_Enable();
 8005336:	f7ff ffdf 	bl	80052f8 <SMLCD_Enable>
	SMLCD_Clear();
 800533a:	f7fb fb9d 	bl	8000a78 <SMLCD_Clear>
	if (Status != HAL_OK)
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <initializeDisplay+0x44>
	{
		DevUI_Error_Handler("SPI LCD Clear Command Failed.", Status, 0, 0, true);
 8005344:	79f9      	ldrb	r1, [r7, #7]
 8005346:	2301      	movs	r3, #1
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	2200      	movs	r2, #0
 800534e:	480b      	ldr	r0, [pc, #44]	; (800537c <initializeDisplay+0x6c>)
 8005350:	f7fe f8d4 	bl	80034fc <DevUI_Error_Handler>
	}
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 8005354:	2301      	movs	r3, #1
 8005356:	71bb      	strb	r3, [r7, #6]
	}
	SMLCD_Orientation(ori);
 8005358:	79bb      	ldrb	r3, [r7, #6]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb fd44 	bl	8000de8 <SMLCD_Orientation>
	LCD_Clear();
 8005360:	f7fb fd6a 	bl	8000e38 <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8005364:	2254      	movs	r2, #84	; 0x54
 8005366:	2100      	movs	r1, #0
 8005368:	4805      	ldr	r0, [pc, #20]	; (8005380 <initializeDisplay+0x70>)
 800536a:	f010 fc31 	bl	8015bd0 <memset>
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bd90      	pop	{r4, r7, pc}
 8005376:	bf00      	nop
 8005378:	20028b68 	.word	0x20028b68
 800537c:	0801a744 	.word	0x0801a744
 8005380:	2003119c 	.word	0x2003119c

08005384 <drawMainMenu>:

void drawMainMenu(int indicator){
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 800538c:	4b57      	ldr	r3, [pc, #348]	; (80054ec <drawMainMenu+0x168>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
	getLatestADC();
 8005392:	f001 f8b1 	bl	80064f8 <getLatestADC>
	LCD_Clear();
 8005396:	f7fb fd4f 	bl	8000e38 <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 800539a:	4b55      	ldr	r3, [pc, #340]	; (80054f0 <drawMainMenu+0x16c>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80053a0:	4b54      	ldr	r3, [pc, #336]	; (80054f4 <drawMainMenu+0x170>)
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	4b53      	ldr	r3, [pc, #332]	; (80054f8 <drawMainMenu+0x174>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2100      	movs	r1, #0
 80053b2:	2000      	movs	r0, #0
 80053b4:	f7fb ff8e 	bl	80012d4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80053b8:	4b4e      	ldr	r3, [pc, #312]	; (80054f4 <drawMainMenu+0x170>)
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	3b03      	subs	r3, #3
 80053be:	b29a      	uxth	r2, r3
 80053c0:	4b4d      	ldr	r3, [pc, #308]	; (80054f8 <drawMainMenu+0x174>)
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	3b03      	subs	r3, #3
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2102      	movs	r1, #2
 80053ca:	2002      	movs	r0, #2
 80053cc:	f7fb ff82 	bl	80012d4 <LCD_Rect>

	// RTC :)
	i  = 10;
 80053d0:	230a      	movs	r3, #10
 80053d2:	613b      	str	r3, [r7, #16]
	j  = 10;
 80053d4:	230a      	movs	r3, #10
 80053d6:	617b      	str	r3, [r7, #20]
	printFaults(i,j);
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	6938      	ldr	r0, [r7, #16]
 80053dc:	f001 f8ba 	bl	8006554 <printFaults>
	i=150;
 80053e0:	2396      	movs	r3, #150	; 0x96
 80053e2:	613b      	str	r3, [r7, #16]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	b298      	uxth	r0, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	b299      	uxth	r1, r3
 80053ec:	4b43      	ldr	r3, [pc, #268]	; (80054fc <drawMainMenu+0x178>)
 80053ee:	4a44      	ldr	r2, [pc, #272]	; (8005500 <drawMainMenu+0x17c>)
 80053f0:	f7fc fb00 	bl	80019f4 <LCD_PutStr>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
	int weAreAtlas = (ZION.SOC_BoardID==ATLAS) || (ZION.ASIC_BoardID==ATLAS) || (ZION.DISPLAY_BoardID==ATLAS);
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <drawMainMenu+0x180>)
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d007      	beq.n	8005416 <drawMainMenu+0x92>
 8005406:	4b3f      	ldr	r3, [pc, #252]	; (8005504 <drawMainMenu+0x180>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d003      	beq.n	8005416 <drawMainMenu+0x92>
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <drawMainMenu+0x180>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <drawMainMenu+0x96>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <drawMainMenu+0x98>
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
	if(VSYS_ADC_VAL >VSYS_FLT){
 800541e:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <drawMainMenu+0x184>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3a      	ldr	r2, [pc, #232]	; (800550c <drawMainMenu+0x188>)
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	edd3 7a00 	vldr	s15, [r3]
 800542c:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8005430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005438:	dd15      	ble.n	8005466 <drawMainMenu+0xe2>
		if(ZION.SOC_EEPROM_Detected){
 800543a:	4b32      	ldr	r3, [pc, #200]	; (8005504 <drawMainMenu+0x180>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <drawMainMenu+0xd8>
			//Add an if/else if for your project name and call the method
			if(weAreAtlas){
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <drawMainMenu+0xce>
				atlasMainMenuBootModes(i,j);
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	6938      	ldr	r0, [r7, #16]
 800544c:	f00c fad8 	bl	8011a00 <atlasMainMenuBootModes>
 8005450:	e017      	b.n	8005482 <drawMainMenu+0xfe>
			}
			else{
				defaultMainMenuBootModes(i,j);
 8005452:	6979      	ldr	r1, [r7, #20]
 8005454:	6938      	ldr	r0, [r7, #16]
 8005456:	f00e fe47 	bl	80140e8 <defaultMainMenuBootModes>
 800545a:	e012      	b.n	8005482 <drawMainMenu+0xfe>
			}
		}
		else{
			defaultMainMenuBootModes(i,j);
 800545c:	6979      	ldr	r1, [r7, #20]
 800545e:	6938      	ldr	r0, [r7, #16]
 8005460:	f00e fe42 	bl	80140e8 <defaultMainMenuBootModes>
 8005464:	e00d      	b.n	8005482 <drawMainMenu+0xfe>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	b298      	uxth	r0, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	b299      	uxth	r1, r3
 800546e:	4b23      	ldr	r3, [pc, #140]	; (80054fc <drawMainMenu+0x178>)
 8005470:	4a27      	ldr	r2, [pc, #156]	; (8005510 <drawMainMenu+0x18c>)
 8005472:	f7fc fabf 	bl	80019f4 <LCD_PutStr>
		bootButtons.bootMode=0;
 8005476:	4b27      	ldr	r3, [pc, #156]	; (8005514 <drawMainMenu+0x190>)
 8005478:	2200      	movs	r2, #0
 800547a:	629a      	str	r2, [r3, #40]	; 0x28
		checkedEEPROM=0;
 800547c:	4b26      	ldr	r3, [pc, #152]	; (8005518 <drawMainMenu+0x194>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

	}
	i  = 135;
 8005482:	2387      	movs	r3, #135	; 0x87
 8005484:	613b      	str	r3, [r7, #16]
	j += 14;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	330e      	adds	r3, #14
 800548a:	617b      	str	r3, [r7, #20]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	b299      	uxth	r1, r3
 8005490:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <drawMainMenu+0x170>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	3b5e      	subs	r3, #94	; 0x5e
 8005496:	b29a      	uxth	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	b29b      	uxth	r3, r3
 800549c:	3303      	adds	r3, #3
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2002      	movs	r0, #2
 80054a2:	f7fb ff59 	bl	8001358 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3305      	adds	r3, #5
 80054ac:	b298      	uxth	r0, r3
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3308      	adds	r3, #8
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2102      	movs	r1, #2
 80054bc:	f7fb ff4c 	bl	8001358 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <drawMainMenu+0x170>)
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	3b61      	subs	r3, #97	; 0x61
 80054c6:	b298      	uxth	r0, r3
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <drawMainMenu+0x170>)
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	3b5e      	subs	r3, #94	; 0x5e
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <drawMainMenu+0x174>)
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2102      	movs	r1, #2
 80054da:	f7fb ff3d 	bl	8001358 <LCD_FillRect>

	//
	//Add Project Main Menu Fault call here.
	//
	if(weAreAtlas){
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <drawMainMenu+0x198>
		atlasMainMenuFaultLedLabels();
 80054e4:	f00c f934 	bl	8011750 <atlasMainMenuFaultLedLabels>
 80054e8:	e01a      	b.n	8005520 <drawMainMenu+0x19c>
 80054ea:	bf00      	nop
 80054ec:	20003428 	.word	0x20003428
 80054f0:	20028b60 	.word	0x20028b60
 80054f4:	20028b62 	.word	0x20028b62
 80054f8:	20028b64 	.word	0x20028b64
 80054fc:	0801b2c8 	.word	0x0801b2c8
 8005500:	0801a764 	.word	0x0801a764
 8005504:	20003328 	.word	0x20003328
 8005508:	200000d4 	.word	0x200000d4
 800550c:	2003119c 	.word	0x2003119c
 8005510:	0801a76c 	.word	0x0801a76c
 8005514:	20003360 	.word	0x20003360
 8005518:	20003430 	.word	0x20003430
	}
	else{
		defaultMainMenuFaultLedLabels();
 800551c:	f00e fc8a 	bl	8013e34 <defaultMainMenuFaultLedLabels>
	}
	j = scr_height-20;
 8005520:	4b5e      	ldr	r3, [pc, #376]	; (800569c <drawMainMenu+0x318>)
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	3b14      	subs	r3, #20
 8005526:	617b      	str	r3, [r7, #20]
	i  = scr_width-90;
 8005528:	4b5d      	ldr	r3, [pc, #372]	; (80056a0 <drawMainMenu+0x31c>)
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	3b5a      	subs	r3, #90	; 0x5a
 800552e:	613b      	str	r3, [r7, #16]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	b298      	uxth	r0, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b02      	subs	r3, #2
 800553a:	b299      	uxth	r1, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	b29b      	uxth	r3, r3
 8005540:	330c      	adds	r3, #12
 8005542:	b29a      	uxth	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	b29b      	uxth	r3, r3
 8005548:	3308      	adds	r3, #8
 800554a:	b29b      	uxth	r3, r3
 800554c:	f7fb ff04 	bl	8001358 <LCD_FillRect>
	i+=20;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3314      	adds	r3, #20
 8005554:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	b298      	uxth	r0, r3
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	b299      	uxth	r1, r3
 800555e:	4b51      	ldr	r3, [pc, #324]	; (80056a4 <drawMainMenu+0x320>)
 8005560:	4a51      	ldr	r2, [pc, #324]	; (80056a8 <drawMainMenu+0x324>)
 8005562:	f7fc fa47 	bl	80019f4 <LCD_PutStr>

	i=100;
 8005566:	2364      	movs	r3, #100	; 0x64
 8005568:	613b      	str	r3, [r7, #16]
	j=75;
 800556a:	234b      	movs	r3, #75	; 0x4b
 800556c:	617b      	str	r3, [r7, #20]
	i+=20;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3314      	adds	r3, #20
 8005572:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	b298      	uxth	r0, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	b299      	uxth	r1, r3
 800557c:	4b49      	ldr	r3, [pc, #292]	; (80056a4 <drawMainMenu+0x320>)
 800557e:	4a4b      	ldr	r2, [pc, #300]	; (80056ac <drawMainMenu+0x328>)
 8005580:	f7fc fa38 	bl	80019f4 <LCD_PutStr>
	j+=15;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	330f      	adds	r3, #15
 8005588:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b03      	subs	r3, #3
 8005590:	b298      	uxth	r0, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b02      	subs	r3, #2
 8005598:	b299      	uxth	r1, r3
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	b29b      	uxth	r3, r3
 800559e:	3347      	adds	r3, #71	; 0x47
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3302      	adds	r3, #2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f7fb fed5 	bl	8001358 <LCD_FillRect>

	i=100;
 80055ae:	2364      	movs	r3, #100	; 0x64
 80055b0:	613b      	str	r3, [r7, #16]
	j=110;
 80055b2:	236e      	movs	r3, #110	; 0x6e
 80055b4:	617b      	str	r3, [r7, #20]
	i+=20;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3314      	adds	r3, #20
 80055ba:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	b298      	uxth	r0, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	b299      	uxth	r1, r3
 80055c4:	4b37      	ldr	r3, [pc, #220]	; (80056a4 <drawMainMenu+0x320>)
 80055c6:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <drawMainMenu+0x32c>)
 80055c8:	f7fc fa14 	bl	80019f4 <LCD_PutStr>
	j+=15;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	330f      	adds	r3, #15
 80055d0:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b03      	subs	r3, #3
 80055d8:	b298      	uxth	r0, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b02      	subs	r3, #2
 80055e0:	b299      	uxth	r1, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3332      	adds	r3, #50	; 0x32
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3302      	adds	r3, #2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f7fb feb1 	bl	8001358 <LCD_FillRect>

	i=100;
 80055f6:	2364      	movs	r3, #100	; 0x64
 80055f8:	613b      	str	r3, [r7, #16]
	j=145;
 80055fa:	2391      	movs	r3, #145	; 0x91
 80055fc:	617b      	str	r3, [r7, #20]
	i+=20;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3314      	adds	r3, #20
 8005602:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	b298      	uxth	r0, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	b299      	uxth	r1, r3
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <drawMainMenu+0x320>)
 800560e:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <drawMainMenu+0x330>)
 8005610:	f7fc f9f0 	bl	80019f4 <LCD_PutStr>
	j+=15;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	330f      	adds	r3, #15
 8005618:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b03      	subs	r3, #3
 8005620:	b298      	uxth	r0, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b02      	subs	r3, #2
 8005628:	b299      	uxth	r1, r3
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	b29b      	uxth	r3, r3
 800562e:	3355      	adds	r3, #85	; 0x55
 8005630:	b29a      	uxth	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	b29b      	uxth	r3, r3
 8005636:	3302      	adds	r3, #2
 8005638:	b29b      	uxth	r3, r3
 800563a:	f7fb fe8d 	bl	8001358 <LCD_FillRect>
	i=100;
 800563e:	2364      	movs	r3, #100	; 0x64
 8005640:	613b      	str	r3, [r7, #16]
	switch(indicator){
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d00f      	beq.n	8005668 <drawMainMenu+0x2e4>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b03      	cmp	r3, #3
 800564c:	dc0f      	bgt.n	800566e <drawMainMenu+0x2ea>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d003      	beq.n	800565c <drawMainMenu+0x2d8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d003      	beq.n	8005662 <drawMainMenu+0x2de>
 800565a:	e008      	b.n	800566e <drawMainMenu+0x2ea>
	case FIRST:
	{
		j=75;
 800565c:	234b      	movs	r3, #75	; 0x4b
 800565e:	617b      	str	r3, [r7, #20]
		break;
 8005660:	e008      	b.n	8005674 <drawMainMenu+0x2f0>
	}
	case SECOND:
	{
		j=110;
 8005662:	236e      	movs	r3, #110	; 0x6e
 8005664:	617b      	str	r3, [r7, #20]
		break;
 8005666:	e005      	b.n	8005674 <drawMainMenu+0x2f0>
	}
	case THIRD:
	{
		j=145;
 8005668:	2391      	movs	r3, #145	; 0x91
 800566a:	617b      	str	r3, [r7, #20]
		break;
 800566c:	e002      	b.n	8005674 <drawMainMenu+0x2f0>
	}
	default:
	{
		j=75;
 800566e:	234b      	movs	r3, #75	; 0x4b
 8005670:	617b      	str	r3, [r7, #20]
		break;
 8005672:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	b298      	uxth	r0, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	b299      	uxth	r1, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	b29b      	uxth	r3, r3
 8005680:	330c      	adds	r3, #12
 8005682:	b29a      	uxth	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	b29b      	uxth	r3, r3
 8005688:	330a      	adds	r3, #10
 800568a:	b29b      	uxth	r3, r3
 800568c:	f7fb fe64 	bl	8001358 <LCD_FillRect>
	SMLCD_Flush();
 8005690:	f7fb fa16 	bl	8000ac0 <SMLCD_Flush>
}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20028b64 	.word	0x20028b64
 80056a0:	20028b62 	.word	0x20028b62
 80056a4:	0801b2c8 	.word	0x0801b2c8
 80056a8:	0801a770 	.word	0x0801a770
 80056ac:	0801a778 	.word	0x0801a778
 80056b0:	0801a784 	.word	0x0801a784
 80056b4:	0801a78c 	.word	0x0801a78c

080056b8 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 80056c0:	2314      	movs	r3, #20
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int inputGpioAlignment=245;
 80056c4:	23f5      	movs	r3, #245	; 0xf5
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
	int daughterCardAlignment=240;
 80056c8:	23f0      	movs	r3, #240	; 0xf0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowUp = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	623b      	str	r3, [r7, #32]
	int arrowDown=1;
 80056d0:	2301      	movs	r3, #1
 80056d2:	61fb      	str	r3, [r7, #28]
	int arrowSize=3;
 80056d4:	2303      	movs	r3, #3
 80056d6:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 80056d8:	4b65      	ldr	r3, [pc, #404]	; (8005870 <drawStatusMenu+0x1b8>)
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 80056de:	f7fb fbab 	bl	8000e38 <LCD_Clear>
	getLatestADC();
 80056e2:	f000 ff09 	bl	80064f8 <getLatestADC>
	drawMenuHeader();
 80056e6:	f000 fe6f 	bl	80063c8 <drawMenuHeader>
	int weAreAtlas = (ZION.SOC_BoardID==ATLAS) || (ZION.ASIC_BoardID==ATLAS) || (ZION.DISPLAY_BoardID==ATLAS);
 80056ea:	4b62      	ldr	r3, [pc, #392]	; (8005874 <drawStatusMenu+0x1bc>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d007      	beq.n	8005702 <drawStatusMenu+0x4a>
 80056f2:	4b60      	ldr	r3, [pc, #384]	; (8005874 <drawStatusMenu+0x1bc>)
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d003      	beq.n	8005702 <drawStatusMenu+0x4a>
 80056fa:	4b5e      	ldr	r3, [pc, #376]	; (8005874 <drawStatusMenu+0x1bc>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <drawStatusMenu+0x4e>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <drawStatusMenu+0x50>
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
	i  = 135;
 800570a:	2387      	movs	r3, #135	; 0x87
 800570c:	613b      	str	r3, [r7, #16]
	j = 24;
 800570e:	2318      	movs	r3, #24
 8005710:	60fb      	str	r3, [r7, #12]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	b299      	uxth	r1, r3
 8005716:	4b58      	ldr	r3, [pc, #352]	; (8005878 <drawStatusMenu+0x1c0>)
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	3b02      	subs	r3, #2
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	b29b      	uxth	r3, r3
 8005722:	3303      	adds	r3, #3
 8005724:	b29b      	uxth	r3, r3
 8005726:	2002      	movs	r0, #2
 8005728:	f7fb fe16 	bl	8001358 <LCD_FillRect>

	switch(indicator){
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b03      	cmp	r3, #3
 8005730:	f000 8125 	beq.w	800597e <drawStatusMenu+0x2c6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b03      	cmp	r3, #3
 8005738:	f300 826f 	bgt.w	8005c1a <drawStatusMenu+0x562>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d003      	beq.n	800574a <drawStatusMenu+0x92>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d05e      	beq.n	8005806 <drawStatusMenu+0x14e>
 8005748:	e267      	b.n	8005c1a <drawStatusMenu+0x562>
	case 1:{
		i=35;
 800574a:	2323      	movs	r3, #35	; 0x23
 800574c:	613b      	str	r3, [r7, #16]
		j=90;
 800574e:	235a      	movs	r3, #90	; 0x5a
 8005750:	60fb      	str	r3, [r7, #12]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b02      	subs	r3, #2
 8005758:	b299      	uxth	r1, r3
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <drawStatusMenu+0x1c0>)
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	3b02      	subs	r3, #2
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	b29b      	uxth	r3, r3
 8005766:	3302      	adds	r3, #2
 8005768:	b29b      	uxth	r3, r3
 800576a:	2002      	movs	r0, #2
 800576c:	f7fb fdf4 	bl	8001358 <LCD_FillRect>
		j=75;
 8005770:	234b      	movs	r3, #75	; 0x4b
 8005772:	60fb      	str	r3, [r7, #12]
		i=62;
 8005774:	233e      	movs	r3, #62	; 0x3e
 8005776:	613b      	str	r3, [r7, #16]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	b298      	uxth	r0, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	b299      	uxth	r1, r3
 8005780:	4b3e      	ldr	r3, [pc, #248]	; (800587c <drawStatusMenu+0x1c4>)
 8005782:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <drawStatusMenu+0x1c8>)
 8005784:	f7fc f936 	bl	80019f4 <LCD_PutStr>
 8005788:	4603      	mov	r3, r0
 800578a:	461a      	mov	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
		i+=145;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3391      	adds	r3, #145	; 0x91
 8005796:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	b298      	uxth	r0, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	b299      	uxth	r1, r3
 80057a0:	4b36      	ldr	r3, [pc, #216]	; (800587c <drawStatusMenu+0x1c4>)
 80057a2:	4a38      	ldr	r2, [pc, #224]	; (8005884 <drawStatusMenu+0x1cc>)
 80057a4:	f7fc f926 	bl	80019f4 <LCD_PutStr>

		//Add an if/else if for your project name and call the method

		if(weAreAtlas){
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <drawStatusMenu+0xfc>
			atlasStatusFaults();
 80057ae:	f00d fcd5 	bl	801315c <atlasStatusFaults>
 80057b2:	e001      	b.n	80057b8 <drawStatusMenu+0x100>
		}
		else{
			defaultStatusFaults();
 80057b4:	f00f fd6a 	bl	801528c <defaultStatusFaults>
		}

		i=200;
 80057b8:	23c8      	movs	r3, #200	; 0xc8
 80057ba:	613b      	str	r3, [r7, #16]
		j=220;
 80057bc:	23dc      	movs	r3, #220	; 0xdc
 80057be:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	b298      	uxth	r0, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	b299      	uxth	r1, r3
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f7fc fa60 	bl	8001c94 <drawUpDownArrow>
		i=180;
 80057d4:	23b4      	movs	r3, #180	; 0xb4
 80057d6:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	b298      	uxth	r0, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	b299      	uxth	r1, r3
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f7fc fa54 	bl	8001c94 <drawUpDownArrow>
		i=220;
 80057ec:	23dc      	movs	r3, #220	; 0xdc
 80057ee:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	b298      	uxth	r0, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	b299      	uxth	r1, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f7fc fa48 	bl	8001c94 <drawUpDownArrow>
		break;
 8005804:	e209      	b.n	8005c1a <drawStatusMenu+0x562>
	}
	case 2:{
		i=35;
 8005806:	2323      	movs	r3, #35	; 0x23
 8005808:	613b      	str	r3, [r7, #16]
		j=90;
 800580a:	235a      	movs	r3, #90	; 0x5a
 800580c:	60fb      	str	r3, [r7, #12]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b02      	subs	r3, #2
 8005814:	b299      	uxth	r1, r3
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <drawStatusMenu+0x1c0>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	3b02      	subs	r3, #2
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	b29b      	uxth	r3, r3
 8005822:	3302      	adds	r3, #2
 8005824:	b29b      	uxth	r3, r3
 8005826:	2002      	movs	r0, #2
 8005828:	f7fb fd96 	bl	8001358 <LCD_FillRect>
		j=75;
 800582c:	234b      	movs	r3, #75	; 0x4b
 800582e:	60fb      	str	r3, [r7, #12]
		i=42;
 8005830:	232a      	movs	r3, #42	; 0x2a
 8005832:	613b      	str	r3, [r7, #16]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	b298      	uxth	r0, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	b299      	uxth	r1, r3
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <drawStatusMenu+0x1c4>)
 800583e:	4a12      	ldr	r2, [pc, #72]	; (8005888 <drawStatusMenu+0x1d0>)
 8005840:	f7fc f8d8 	bl	80019f4 <LCD_PutStr>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
		i+=125;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	337d      	adds	r3, #125	; 0x7d
 8005852:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	b298      	uxth	r0, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	b299      	uxth	r1, r3
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <drawStatusMenu+0x1c4>)
 800585e:	4a0b      	ldr	r2, [pc, #44]	; (800588c <drawStatusMenu+0x1d4>)
 8005860:	f7fc f8c8 	bl	80019f4 <LCD_PutStr>

		//Add an if/else if for your project and call the method

		if(weAreAtlas){
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d012      	beq.n	8005890 <drawStatusMenu+0x1d8>
			atlasStatusADCsAndGPIOs();
 800586a:	f00c ff55 	bl	8012718 <atlasStatusADCsAndGPIOs>
 800586e:	e011      	b.n	8005894 <drawStatusMenu+0x1dc>
 8005870:	20003428 	.word	0x20003428
 8005874:	20003328 	.word	0x20003328
 8005878:	20028b62 	.word	0x20028b62
 800587c:	0801b2c8 	.word	0x0801b2c8
 8005880:	0801a798 	.word	0x0801a798
 8005884:	0801a7a0 	.word	0x0801a7a0
 8005888:	0801a7b0 	.word	0x0801a7b0
 800588c:	0801a7c0 	.word	0x0801a7c0
		}
		else{
			defaultStatusADCsAndGPIOs();
 8005890:	f00e fff6 	bl	8014880 <defaultStatusADCsAndGPIOs>
		}


		i=155;
 8005894:	239b      	movs	r3, #155	; 0x9b
 8005896:	613b      	str	r3, [r7, #16]
		j=35;
 8005898:	2323      	movs	r3, #35	; 0x23
 800589a:	60fb      	str	r3, [r7, #12]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	b298      	uxth	r0, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	b299      	uxth	r1, r3
 80058a4:	4b97      	ldr	r3, [pc, #604]	; (8005b04 <drawStatusMenu+0x44c>)
 80058a6:	4a98      	ldr	r2, [pc, #608]	; (8005b08 <drawStatusMenu+0x450>)
 80058a8:	f7fc f8a4 	bl	80019f4 <LCD_PutStr>
		i=155;
 80058ac:	239b      	movs	r3, #155	; 0x9b
 80058ae:	613b      	str	r3, [r7, #16]
		j=50;
 80058b0:	2332      	movs	r3, #50	; 0x32
 80058b2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	b298      	uxth	r0, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	b299      	uxth	r1, r3
 80058bc:	4b91      	ldr	r3, [pc, #580]	; (8005b04 <drawStatusMenu+0x44c>)
 80058be:	4a93      	ldr	r2, [pc, #588]	; (8005b0c <drawStatusMenu+0x454>)
 80058c0:	f7fc f898 	bl	80019f4 <LCD_PutStr>
 80058c4:	4603      	mov	r3, r0
 80058c6:	3308      	adds	r3, #8
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4413      	add	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
		j=28;
 80058ce:	231c      	movs	r3, #28
 80058d0:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	b298      	uxth	r0, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	b299      	uxth	r1, r3
 80058da:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <drawStatusMenu+0x458>)
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2302      	movs	r3, #2
 80058e0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80058e4:	f7fc f924 	bl	8001b30 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 80058e8:	23c8      	movs	r3, #200	; 0xc8
 80058ea:	613b      	str	r3, [r7, #16]
		j=220;
 80058ec:	23dc      	movs	r3, #220	; 0xdc
 80058ee:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	b298      	uxth	r0, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	b299      	uxth	r1, r3
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f7fc f9c8 	bl	8001c94 <drawUpDownArrow>
		j=15;
 8005904:	230f      	movs	r3, #15
 8005906:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	b298      	uxth	r0, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	b299      	uxth	r1, r3
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	b29a      	uxth	r2, r3
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f7fc f9bc 	bl	8001c94 <drawUpDownArrow>
		i=180;
 800591c:	23b4      	movs	r3, #180	; 0xb4
 800591e:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	b298      	uxth	r0, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	b299      	uxth	r1, r3
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	b29a      	uxth	r2, r3
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f7fc f9b0 	bl	8001c94 <drawUpDownArrow>
		j=220;
 8005934:	23dc      	movs	r3, #220	; 0xdc
 8005936:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	b298      	uxth	r0, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	b299      	uxth	r1, r3
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	b29a      	uxth	r2, r3
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	b29b      	uxth	r3, r3
 8005948:	f7fc f9a4 	bl	8001c94 <drawUpDownArrow>
		i=220;
 800594c:	23dc      	movs	r3, #220	; 0xdc
 800594e:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	b298      	uxth	r0, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	b299      	uxth	r1, r3
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	b29a      	uxth	r2, r3
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f7fc f998 	bl	8001c94 <drawUpDownArrow>
		j=15;
 8005964:	230f      	movs	r3, #15
 8005966:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	b298      	uxth	r0, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	b299      	uxth	r1, r3
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	b29a      	uxth	r2, r3
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f7fc f98c 	bl	8001c94 <drawUpDownArrow>
		break;
 800597c:	e14d      	b.n	8005c1a <drawStatusMenu+0x562>
	}
	case 3:{
		i=35;
 800597e:	2323      	movs	r3, #35	; 0x23
 8005980:	613b      	str	r3, [r7, #16]
		j=75;
 8005982:	234b      	movs	r3, #75	; 0x4b
 8005984:	60fb      	str	r3, [r7, #12]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b02      	subs	r3, #2
 800598c:	b299      	uxth	r1, r3
 800598e:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <drawStatusMenu+0x45c>)
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	3b02      	subs	r3, #2
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	b29b      	uxth	r3, r3
 800599a:	3302      	adds	r3, #2
 800599c:	b29b      	uxth	r3, r3
 800599e:	2002      	movs	r0, #2
 80059a0:	f7fb fcda 	bl	8001358 <LCD_FillRect>
		j=55;
 80059a4:	2337      	movs	r3, #55	; 0x37
 80059a6:	60fb      	str	r3, [r7, #12]
		i=150;
 80059a8:	2396      	movs	r3, #150	; 0x96
 80059aa:	613b      	str	r3, [r7, #16]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	b298      	uxth	r0, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	b299      	uxth	r1, r3
 80059b4:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <drawStatusMenu+0x44c>)
 80059b6:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <drawStatusMenu+0x460>)
 80059b8:	f7fc f81c 	bl	80019f4 <LCD_PutStr>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

		i=40;
 80059c6:	2328      	movs	r3, #40	; 0x28
 80059c8:	613b      	str	r3, [r7, #16]
		j=85;
 80059ca:	2355      	movs	r3, #85	; 0x55
 80059cc:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	b298      	uxth	r0, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	b299      	uxth	r1, r3
 80059d6:	4b4b      	ldr	r3, [pc, #300]	; (8005b04 <drawStatusMenu+0x44c>)
 80059d8:	4a50      	ldr	r2, [pc, #320]	; (8005b1c <drawStatusMenu+0x464>)
 80059da:	f7fc f80b 	bl	80019f4 <LCD_PutStr>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	b298      	uxth	r0, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	b299      	uxth	r1, r3
 80059f0:	4b44      	ldr	r3, [pc, #272]	; (8005b04 <drawStatusMenu+0x44c>)
 80059f2:	4a4b      	ldr	r2, [pc, #300]	; (8005b20 <drawStatusMenu+0x468>)
 80059f4:	f7fb fffe 	bl	80019f4 <LCD_PutStr>

		i=40;
 80059f8:	2328      	movs	r3, #40	; 0x28
 80059fa:	613b      	str	r3, [r7, #16]
		j+=25;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3319      	adds	r3, #25
 8005a00:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	b298      	uxth	r0, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	b299      	uxth	r1, r3
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	; (8005b04 <drawStatusMenu+0x44c>)
 8005a0c:	4a45      	ldr	r2, [pc, #276]	; (8005b24 <drawStatusMenu+0x46c>)
 8005a0e:	f7fb fff1 	bl	80019f4 <LCD_PutStr>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
		if(!(errorLED.ledDriver)){
 8005a1c:	4b42      	ldr	r3, [pc, #264]	; (8005b28 <drawStatusMenu+0x470>)
 8005a1e:	7b5b      	ldrb	r3, [r3, #13]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d108      	bne.n	8005a36 <drawStatusMenu+0x37e>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	b298      	uxth	r0, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	b299      	uxth	r1, r3
 8005a2c:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <drawStatusMenu+0x44c>)
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	; (8005b2c <drawStatusMenu+0x474>)
 8005a30:	f7fb ffe0 	bl	80019f4 <LCD_PutStr>
 8005a34:	e007      	b.n	8005a46 <drawStatusMenu+0x38e>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	b298      	uxth	r0, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	b299      	uxth	r1, r3
 8005a3e:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <drawStatusMenu+0x44c>)
 8005a40:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <drawStatusMenu+0x478>)
 8005a42:	f7fb ffd7 	bl	80019f4 <LCD_PutStr>
		}

		i=40;
 8005a46:	2328      	movs	r3, #40	; 0x28
 8005a48:	613b      	str	r3, [r7, #16]
		j+=25;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3319      	adds	r3, #25
 8005a4e:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	b298      	uxth	r0, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	b299      	uxth	r1, r3
 8005a58:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <drawStatusMenu+0x44c>)
 8005a5a:	4a36      	ldr	r2, [pc, #216]	; (8005b34 <drawStatusMenu+0x47c>)
 8005a5c:	f7fb ffca 	bl	80019f4 <LCD_PutStr>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	b298      	uxth	r0, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	b299      	uxth	r1, r3
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <drawStatusMenu+0x44c>)
 8005a74:	4a30      	ldr	r2, [pc, #192]	; (8005b38 <drawStatusMenu+0x480>)
 8005a76:	f7fb ffbd 	bl	80019f4 <LCD_PutStr>

		i=40;
 8005a7a:	2328      	movs	r3, #40	; 0x28
 8005a7c:	613b      	str	r3, [r7, #16]
		j+=25;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3319      	adds	r3, #25
 8005a82:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	b298      	uxth	r0, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <drawStatusMenu+0x44c>)
 8005a8e:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <drawStatusMenu+0x484>)
 8005a90:	f7fb ffb0 	bl	80019f4 <LCD_PutStr>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
		//check the I2C state once per switch ran. Multiple runs can cause hard faults
		if((VSYS_ADC_VAL > VSYS_FLT) && !(checkedEEPROM)){
 8005a9e:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <drawStatusMenu+0x488>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a28      	ldr	r2, [pc, #160]	; (8005b44 <drawStatusMenu+0x48c>)
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	edd3 7a00 	vldr	s15, [r3]
 8005aac:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8005ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab8:	dd14      	ble.n	8005ae4 <drawStatusMenu+0x42c>
 8005aba:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <drawStatusMenu+0x490>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d110      	bne.n	8005ae4 <drawStatusMenu+0x42c>
			i2cCheck = writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8005ac2:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <drawStatusMenu+0x494>)
 8005ac4:	7818      	ldrb	r0, [r3, #0]
 8005ac6:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <drawStatusMenu+0x494>)
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2301      	movs	r3, #1
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2111      	movs	r1, #17
 8005ad2:	f7fd ff9f 	bl	8003a14 <writeI2CRegister>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <drawStatusMenu+0x498>)
 8005ada:	6013      	str	r3, [r2, #0]
			checkedEEPROM=1;
 8005adc:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <drawStatusMenu+0x490>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <drawStatusMenu+0x432>
		}
		else{
			checkedEEPROM=0;
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <drawStatusMenu+0x490>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
		}
		if(i2cCheck == HAL_OK){
 8005aea:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <drawStatusMenu+0x498>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d130      	bne.n	8005b54 <drawStatusMenu+0x49c>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	b298      	uxth	r0, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	b299      	uxth	r1, r3
 8005afa:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <drawStatusMenu+0x44c>)
 8005afc:	4a0b      	ldr	r2, [pc, #44]	; (8005b2c <drawStatusMenu+0x474>)
 8005afe:	f7fb ff79 	bl	80019f4 <LCD_PutStr>
 8005b02:	e02f      	b.n	8005b64 <drawStatusMenu+0x4ac>
 8005b04:	0801b2c8 	.word	0x0801b2c8
 8005b08:	0801a7d0 	.word	0x0801a7d0
 8005b0c:	0801a7e0 	.word	0x0801a7e0
 8005b10:	0801b688 	.word	0x0801b688
 8005b14:	20028b62 	.word	0x20028b62
 8005b18:	0801a7f0 	.word	0x0801a7f0
 8005b1c:	0801a800 	.word	0x0801a800
 8005b20:	0801a808 	.word	0x0801a808
 8005b24:	0801a828 	.word	0x0801a828
 8005b28:	2000338c 	.word	0x2000338c
 8005b2c:	0801a838 	.word	0x0801a838
 8005b30:	0801a840 	.word	0x0801a840
 8005b34:	0801a850 	.word	0x0801a850
 8005b38:	0801a85c 	.word	0x0801a85c
 8005b3c:	0801a874 	.word	0x0801a874
 8005b40:	200000d4 	.word	0x200000d4
 8005b44:	2003119c 	.word	0x2003119c
 8005b48:	20003430 	.word	0x20003430
 8005b4c:	200000bc 	.word	0x200000bc
 8005b50:	20000134 	.word	0x20000134
			// Clear the HAL fault LED.
			//errorLED.fault9 = false;
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b298      	uxth	r0, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	b299      	uxth	r1, r3
 8005b5c:	4b32      	ldr	r3, [pc, #200]	; (8005c28 <drawStatusMenu+0x570>)
 8005b5e:	4a33      	ldr	r2, [pc, #204]	; (8005c2c <drawStatusMenu+0x574>)
 8005b60:	f7fb ff48 	bl	80019f4 <LCD_PutStr>
		}


		i=40;
 8005b64:	2328      	movs	r3, #40	; 0x28
 8005b66:	613b      	str	r3, [r7, #16]
		j+=25;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3319      	adds	r3, #25
 8005b6c:	60fb      	str	r3, [r7, #12]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	b298      	uxth	r0, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	b299      	uxth	r1, r3
 8005b76:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <drawStatusMenu+0x570>)
 8005b78:	4a2d      	ldr	r2, [pc, #180]	; (8005c30 <drawStatusMenu+0x578>)
 8005b7a:	f7fb ff3b 	bl	80019f4 <LCD_PutStr>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8005b88:	f002 f888 	bl	8007c9c <HAL_GetTick>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <drawStatusMenu+0x57c>)
 8005b90:	fba2 2303 	umull	r2, r3, r2, r3
 8005b94:	099b      	lsrs	r3, r3, #6
 8005b96:	60bb      	str	r3, [r7, #8]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	b298      	uxth	r0, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	b299      	uxth	r1, r3
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <drawStatusMenu+0x570>)
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	f7fb ff5e 	bl	8001a64 <LCD_PutInt>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4413      	add	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	b298      	uxth	r0, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	b299      	uxth	r1, r3
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <drawStatusMenu+0x570>)
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <drawStatusMenu+0x580>)
 8005bbe:	f7fb ff19 	bl	80019f4 <LCD_PutStr>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

		i=200;
 8005bcc:	23c8      	movs	r3, #200	; 0xc8
 8005bce:	613b      	str	r3, [r7, #16]
		j=15;
 8005bd0:	230f      	movs	r3, #15
 8005bd2:	60fb      	str	r3, [r7, #12]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	b298      	uxth	r0, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	b299      	uxth	r1, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f7fc f856 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8005be8:	23b4      	movs	r3, #180	; 0xb4
 8005bea:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	b298      	uxth	r0, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f7fc f84a 	bl	8001c94 <drawUpDownArrow>
		i=220;
 8005c00:	23dc      	movs	r3, #220	; 0xdc
 8005c02:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	b298      	uxth	r0, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f7fc f83e 	bl	8001c94 <drawUpDownArrow>

		break;
 8005c18:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8005c1a:	f7fa ff51 	bl	8000ac0 <SMLCD_Flush>



}
 8005c1e:	bf00      	nop
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	0801b2c8 	.word	0x0801b2c8
 8005c2c:	0801a880 	.word	0x0801a880
 8005c30:	0801a88c 	.word	0x0801a88c
 8005c34:	10624dd3 	.word	0x10624dd3
 8005c38:	0801a8a0 	.word	0x0801a8a0

08005c3c <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b090      	sub	sp, #64	; 0x40
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005c44:	2314      	movs	r3, #20
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
	int indentAlignment=20;
 8005c48:	2314      	movs	r3, #20
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30
	int arrowUp = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int arrowDown=1;
 8005c50:	2301      	movs	r3, #1
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowSize=3;
 8005c54:	2303      	movs	r3, #3
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
	int otherBoardAlignment = 225;
 8005c58:	23e1      	movs	r3, #225	; 0xe1
 8005c5a:	623b      	str	r3, [r7, #32]
	int verticalSpacing = 15;
 8005c5c:	230f      	movs	r3, #15
 8005c5e:	61fb      	str	r3, [r7, #28]
	previousMenu=0;
 8005c60:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <drawSystemInfoMenu+0x23c>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005c66:	f7fb f8e7 	bl	8000e38 <LCD_Clear>
	getLatestADC();
 8005c6a:	f000 fc45 	bl	80064f8 <getLatestADC>
	drawMenuHeader();
 8005c6e:	f000 fbab 	bl	80063c8 <drawMenuHeader>
	i  = 135;
 8005c72:	2387      	movs	r3, #135	; 0x87
 8005c74:	61bb      	str	r3, [r7, #24]
	j = 24;
 8005c76:	2318      	movs	r3, #24
 8005c78:	617b      	str	r3, [r7, #20]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	b299      	uxth	r1, r3
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	; (8005e7c <drawSystemInfoMenu+0x240>)
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	3b02      	subs	r3, #2
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2002      	movs	r0, #2
 8005c90:	f7fb fb62 	bl	8001358 <LCD_FillRect>

	switch(indicator){
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d004      	beq.n	8005ca4 <drawSystemInfoMenu+0x68>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f000 8187 	beq.w	8005fb0 <drawSystemInfoMenu+0x374>
 8005ca2:	e2c7      	b.n	8006234 <drawSystemInfoMenu+0x5f8>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8005ca4:	232d      	movs	r3, #45	; 0x2d
 8005ca6:	617b      	str	r3, [r7, #20]
		i=42;
 8005ca8:	232a      	movs	r3, #42	; 0x2a
 8005caa:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	b298      	uxth	r0, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	b299      	uxth	r1, r3
 8005cb4:	4b72      	ldr	r3, [pc, #456]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005cb6:	4a73      	ldr	r2, [pc, #460]	; (8005e84 <drawSystemInfoMenu+0x248>)
 8005cb8:	f7fb fe9c 	bl	80019f4 <LCD_PutStr>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	b298      	uxth	r0, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	b299      	uxth	r1, r3
 8005cce:	4b6c      	ldr	r3, [pc, #432]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005cd0:	4a6d      	ldr	r2, [pc, #436]	; (8005e88 <drawSystemInfoMenu+0x24c>)
 8005cd2:	f7fb fe8f 	bl	80019f4 <LCD_PutStr>

		j+=verticalSpacing;
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
		i=42;
 8005cde:	232a      	movs	r3, #42	; 0x2a
 8005ce0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b298      	uxth	r0, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	b299      	uxth	r1, r3
 8005cea:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005cec:	4a67      	ldr	r2, [pc, #412]	; (8005e8c <drawSystemInfoMenu+0x250>)
 8005cee:	f7fb fe81 	bl	80019f4 <LCD_PutStr>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	b298      	uxth	r0, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	b299      	uxth	r1, r3
 8005d04:	4b5e      	ldr	r3, [pc, #376]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005d06:	4a62      	ldr	r2, [pc, #392]	; (8005e90 <drawSystemInfoMenu+0x254>)
 8005d08:	f7fb fe74 	bl	80019f4 <LCD_PutStr>

		j+=30;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	331e      	adds	r3, #30
 8005d10:	617b      	str	r3, [r7, #20]
		i=10;
 8005d12:	230a      	movs	r3, #10
 8005d14:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	b298      	uxth	r0, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	b299      	uxth	r1, r3
 8005d1e:	4b58      	ldr	r3, [pc, #352]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005d20:	4a5c      	ldr	r2, [pc, #368]	; (8005e94 <drawSystemInfoMenu+0x258>)
 8005d22:	f7fb fe67 	bl	80019f4 <LCD_PutStr>

		j+=verticalSpacing;
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	61bb      	str	r3, [r7, #24]
		//add your project definition here. example is ATLAS below. ATLAS is defined as finding zion information of 1 in the device header.
		int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8005d32:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <drawSystemInfoMenu+0x25c>)
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d007      	beq.n	8005d4a <drawSystemInfoMenu+0x10e>
 8005d3a:	4b57      	ldr	r3, [pc, #348]	; (8005e98 <drawSystemInfoMenu+0x25c>)
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d003      	beq.n	8005d4a <drawSystemInfoMenu+0x10e>
 8005d42:	4b55      	ldr	r3, [pc, #340]	; (8005e98 <drawSystemInfoMenu+0x25c>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <drawSystemInfoMenu+0x112>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <drawSystemInfoMenu+0x114>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
//Add an if/else if for your project name

		if(weAreAtlas){
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <drawSystemInfoMenu+0x12e>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	b298      	uxth	r0, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	b299      	uxth	r1, r3
 8005d60:	4b47      	ldr	r3, [pc, #284]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005d62:	4a4e      	ldr	r2, [pc, #312]	; (8005e9c <drawSystemInfoMenu+0x260>)
 8005d64:	f7fb fe46 	bl	80019f4 <LCD_PutStr>
 8005d68:	e007      	b.n	8005d7a <drawSystemInfoMenu+0x13e>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	b298      	uxth	r0, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	b299      	uxth	r1, r3
 8005d72:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005d74:	4a44      	ldr	r2, [pc, #272]	; (8005e88 <drawSystemInfoMenu+0x24c>)
 8005d76:	f7fb fe3d 	bl	80019f4 <LCD_PutStr>
		}

		j+=verticalSpacing;
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
		i=10;
 8005d82:	230a      	movs	r3, #10
 8005d84:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	b298      	uxth	r0, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	b299      	uxth	r1, r3
 8005d8e:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005d90:	4a43      	ldr	r2, [pc, #268]	; (8005ea0 <drawSystemInfoMenu+0x264>)
 8005d92:	f7fb fe2f 	bl	80019f4 <LCD_PutStr>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
		i=otherBoardAlignment;
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	b298      	uxth	r0, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	b299      	uxth	r1, r3
 8005dac:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005dae:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <drawSystemInfoMenu+0x268>)
 8005db0:	f7fb fe20 	bl	80019f4 <LCD_PutStr>

		j+=verticalSpacing;
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	b298      	uxth	r0, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	b299      	uxth	r1, r3
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005dca:	4a37      	ldr	r2, [pc, #220]	; (8005ea8 <drawSystemInfoMenu+0x26c>)
 8005dcc:	f7fb fe12 	bl	80019f4 <LCD_PutStr>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
		//Add an if/else if for the soc name and call the method
		if(ZION.SOC_BoardID==ATLAS){
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <drawSystemInfoMenu+0x25c>)
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d104      	bne.n	8005dec <drawSystemInfoMenu+0x1b0>
			atlasSystemInfoSoc(i,j);
 8005de2:	6979      	ldr	r1, [r7, #20]
 8005de4:	69b8      	ldr	r0, [r7, #24]
 8005de6:	f00c f92d 	bl	8012044 <atlasSystemInfoSoc>
 8005dea:	e003      	b.n	8005df4 <drawSystemInfoMenu+0x1b8>
		}
		else{
			defaultSystemInfoSoc(i,j);
 8005dec:	6979      	ldr	r1, [r7, #20]
 8005dee:	69b8      	ldr	r0, [r7, #24]
 8005df0:	f00e fba8 	bl	8014544 <defaultSystemInfoSoc>
		}
		i=otherBoardAlignment+indentAlignment;
 8005df4:	6a3a      	ldr	r2, [r7, #32]
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	4413      	add	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	b299      	uxth	r1, r3
 8005e04:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005e06:	4a29      	ldr	r2, [pc, #164]	; (8005eac <drawSystemInfoMenu+0x270>)
 8005e08:	f7fb fdf4 	bl	80019f4 <LCD_PutStr>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	4413      	add	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
		if(ZION.zionSwitch){
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <drawSystemInfoMenu+0x25c>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <drawSystemInfoMenu+0x1f4>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	b298      	uxth	r0, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	b299      	uxth	r1, r3
 8005e26:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005e28:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <drawSystemInfoMenu+0x274>)
 8005e2a:	f7fb fde3 	bl	80019f4 <LCD_PutStr>
 8005e2e:	e007      	b.n	8005e40 <drawSystemInfoMenu+0x204>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	b298      	uxth	r0, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	b299      	uxth	r1, r3
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <drawSystemInfoMenu+0x278>)
 8005e3c:	f7fb fdda 	bl	80019f4 <LCD_PutStr>
		}

		j+=verticalSpacing;
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	b298      	uxth	r0, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	b299      	uxth	r1, r3
 8005e54:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <drawSystemInfoMenu+0x244>)
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <drawSystemInfoMenu+0x27c>)
 8005e58:	f7fb fdcc 	bl	80019f4 <LCD_PutStr>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	4413      	add	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
		//Add an if/else if for your ASIC name and call the method
		if(ZION.ASIC_BoardID==ATLAS){
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <drawSystemInfoMenu+0x25c>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d126      	bne.n	8005ebc <drawSystemInfoMenu+0x280>
			atlasSystemInfoAsic(i,j);
 8005e6e:	6979      	ldr	r1, [r7, #20]
 8005e70:	69b8      	ldr	r0, [r7, #24]
 8005e72:	f00c f94b 	bl	801210c <atlasSystemInfoAsic>
 8005e76:	e025      	b.n	8005ec4 <drawSystemInfoMenu+0x288>
 8005e78:	20003428 	.word	0x20003428
 8005e7c:	20028b62 	.word	0x20028b62
 8005e80:	0801b2c8 	.word	0x0801b2c8
 8005e84:	0801a8ac 	.word	0x0801a8ac
 8005e88:	0801a8bc 	.word	0x0801a8bc
 8005e8c:	0801a8c4 	.word	0x0801a8c4
 8005e90:	0801a8dc 	.word	0x0801a8dc
 8005e94:	0801a8e4 	.word	0x0801a8e4
 8005e98:	20003328 	.word	0x20003328
 8005e9c:	0801a8f0 	.word	0x0801a8f0
 8005ea0:	0801a8f8 	.word	0x0801a8f8
 8005ea4:	0801a90c 	.word	0x0801a90c
 8005ea8:	0801a91c 	.word	0x0801a91c
 8005eac:	0801a924 	.word	0x0801a924
 8005eb0:	0801a92c 	.word	0x0801a92c
 8005eb4:	0801a93c 	.word	0x0801a93c
 8005eb8:	0801a948 	.word	0x0801a948
		}
		else{
			defaultSystemInfoAsic(i,j);
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	69b8      	ldr	r0, [r7, #24]
 8005ec0:	f00e fb7c 	bl	80145bc <defaultSystemInfoAsic>
		}
		//Add an if/else if if your project has additional boards. call the method
		if(ZION.SOC_BoardID==ATLAS){
 8005ec4:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <drawSystemInfoMenu+0x368>)
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d103      	bne.n	8005ed4 <drawSystemInfoMenu+0x298>
			atlasSystemInfoPV(i,j);
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	69b8      	ldr	r0, [r7, #24]
 8005ed0:	f00c f9e4 	bl	801229c <atlasSystemInfoPV>
		}
		j+=verticalSpacing;
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	b298      	uxth	r0, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	4b2f      	ldr	r3, [pc, #188]	; (8005fa8 <drawSystemInfoMenu+0x36c>)
 8005eea:	4a30      	ldr	r2, [pc, #192]	; (8005fac <drawSystemInfoMenu+0x370>)
 8005eec:	f7fb fd82 	bl	80019f4 <LCD_PutStr>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
		//Add an if/else if for your DISPLAY name and call the method
		if(ZION.DISPLAY_BoardID==ATLAS){
 8005efa:	4b2a      	ldr	r3, [pc, #168]	; (8005fa4 <drawSystemInfoMenu+0x368>)
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d104      	bne.n	8005f0c <drawSystemInfoMenu+0x2d0>
			atlasSystemInfoDisplay(i,j);
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	69b8      	ldr	r0, [r7, #24]
 8005f06:	f00c f965 	bl	80121d4 <atlasSystemInfoDisplay>
 8005f0a:	e003      	b.n	8005f14 <drawSystemInfoMenu+0x2d8>
		}
		else{
			defaultSystemInfoDisplay(i,j);
 8005f0c:	6979      	ldr	r1, [r7, #20]
 8005f0e:	69b8      	ldr	r0, [r7, #24]
 8005f10:	f00e fb90 	bl	8014634 <defaultSystemInfoDisplay>
		}
		//Add an if/else if for any additional boards that DEV_UI can check and call the methods
		if(ZION.SOC_BoardID==ATLAS){
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <drawSystemInfoMenu+0x368>)
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d11b      	bne.n	8005f54 <drawSystemInfoMenu+0x318>
			atlasSystemInfoWIFI(i,j);
 8005f1c:	6979      	ldr	r1, [r7, #20]
 8005f1e:	69b8      	ldr	r0, [r7, #24]
 8005f20:	f00c fa00 	bl	8012324 <atlasSystemInfoWIFI>
			j+=verticalSpacing;
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
			atlasSystemInfoWIGIG(i,j);
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	69b8      	ldr	r0, [r7, #24]
 8005f30:	f00c fa3c 	bl	80123ac <atlasSystemInfoWIGIG>
			j+=verticalSpacing;
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
			atlasSystemInfoCODEC(i,j);
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	69b8      	ldr	r0, [r7, #24]
 8005f40:	f00c fa78 	bl	8012434 <atlasSystemInfoCODEC>
			j+=verticalSpacing;
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
			atlasSystemInfoRF(i,j);
 8005f4c:	6979      	ldr	r1, [r7, #20]
 8005f4e:	69b8      	ldr	r0, [r7, #24]
 8005f50:	f00c fab4 	bl	80124bc <atlasSystemInfoRF>
		}
		i=200;
 8005f54:	23c8      	movs	r3, #200	; 0xc8
 8005f56:	61bb      	str	r3, [r7, #24]
		j=220;
 8005f58:	23dc      	movs	r3, #220	; 0xdc
 8005f5a:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	b298      	uxth	r0, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	b299      	uxth	r1, r3
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f7fb fe92 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8005f70:	23b4      	movs	r3, #180	; 0xb4
 8005f72:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	b298      	uxth	r0, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	b299      	uxth	r1, r3
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f7fb fe86 	bl	8001c94 <drawUpDownArrow>
		i=220;
 8005f88:	23dc      	movs	r3, #220	; 0xdc
 8005f8a:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	b298      	uxth	r0, r3
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	b299      	uxth	r1, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f7fb fe7a 	bl	8001c94 <drawUpDownArrow>
		break;
 8005fa0:	e148      	b.n	8006234 <drawSystemInfoMenu+0x5f8>
 8005fa2:	bf00      	nop
 8005fa4:	20003328 	.word	0x20003328
 8005fa8:	0801b2c8 	.word	0x0801b2c8
 8005fac:	0801a950 	.word	0x0801a950
	}
	case 2:{
		j=45;
 8005fb0:	232d      	movs	r3, #45	; 0x2d
 8005fb2:	617b      	str	r3, [r7, #20]
		i=10;
 8005fb4:	230a      	movs	r3, #10
 8005fb6:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	b298      	uxth	r0, r3
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	b299      	uxth	r1, r3
 8005fc0:	4b9f      	ldr	r3, [pc, #636]	; (8006240 <drawSystemInfoMenu+0x604>)
 8005fc2:	4aa0      	ldr	r2, [pc, #640]	; (8006244 <drawSystemInfoMenu+0x608>)
 8005fc4:	f7fb fd16 	bl	80019f4 <LCD_PutStr>

		j+=25;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3319      	adds	r3, #25
 8005fcc:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	b298      	uxth	r0, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	b299      	uxth	r1, r3
 8005fda:	4b99      	ldr	r3, [pc, #612]	; (8006240 <drawSystemInfoMenu+0x604>)
 8005fdc:	4a9a      	ldr	r2, [pc, #616]	; (8006248 <drawSystemInfoMenu+0x60c>)
 8005fde:	f7fb fd09 	bl	80019f4 <LCD_PutStr>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	4413      	add	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8005fec:	4b97      	ldr	r3, [pc, #604]	; (800624c <drawSystemInfoMenu+0x610>)
 8005fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff0:	4a97      	ldr	r2, [pc, #604]	; (8006250 <drawSystemInfoMenu+0x614>)
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	edd3 7a00 	vldr	s15, [r3]
 8005ffa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ffe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006002:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006006:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800600a:	ee17 3a90 	vmov	r3, s15
 800600e:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	b298      	uxth	r0, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	b299      	uxth	r1, r3
 8006018:	4b89      	ldr	r3, [pc, #548]	; (8006240 <drawSystemInfoMenu+0x604>)
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	2301      	movs	r3, #1
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	f7fb fd86 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3319      	adds	r3, #25
 8006028:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	b298      	uxth	r0, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	b299      	uxth	r1, r3
 8006036:	4b82      	ldr	r3, [pc, #520]	; (8006240 <drawSystemInfoMenu+0x604>)
 8006038:	4a86      	ldr	r2, [pc, #536]	; (8006254 <drawSystemInfoMenu+0x618>)
 800603a:	f7fb fcdb 	bl	80019f4 <LCD_PutStr>
 800603e:	4603      	mov	r3, r0
 8006040:	461a      	mov	r2, r3
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	4413      	add	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8006048:	4b80      	ldr	r3, [pc, #512]	; (800624c <drawSystemInfoMenu+0x610>)
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	4a80      	ldr	r2, [pc, #512]	; (8006250 <drawSystemInfoMenu+0x614>)
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	edd3 7a00 	vldr	s15, [r3]
 8006056:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800605a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800605e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006062:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006066:	ee17 3a90 	vmov	r3, s15
 800606a:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	b298      	uxth	r0, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	b299      	uxth	r1, r3
 8006074:	4b72      	ldr	r3, [pc, #456]	; (8006240 <drawSystemInfoMenu+0x604>)
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2301      	movs	r3, #1
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	f7fb fd58 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3319      	adds	r3, #25
 8006084:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	b298      	uxth	r0, r3
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	b299      	uxth	r1, r3
 8006092:	4b6b      	ldr	r3, [pc, #428]	; (8006240 <drawSystemInfoMenu+0x604>)
 8006094:	4a70      	ldr	r2, [pc, #448]	; (8006258 <drawSystemInfoMenu+0x61c>)
 8006096:	f7fb fcad 	bl	80019f4 <LCD_PutStr>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	4413      	add	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 80060a4:	4b69      	ldr	r3, [pc, #420]	; (800624c <drawSystemInfoMenu+0x610>)
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	4a69      	ldr	r2, [pc, #420]	; (8006250 <drawSystemInfoMenu+0x614>)
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	edd3 7a00 	vldr	s15, [r3]
 80060b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80060b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80060ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80060c2:	ee17 3a90 	vmov	r3, s15
 80060c6:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	b298      	uxth	r0, r3
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	b299      	uxth	r1, r3
 80060d0:	4b5b      	ldr	r3, [pc, #364]	; (8006240 <drawSystemInfoMenu+0x604>)
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2301      	movs	r3, #1
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	f7fb fd2a 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	3319      	adds	r3, #25
 80060e0:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	b298      	uxth	r0, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	b299      	uxth	r1, r3
 80060ee:	4b54      	ldr	r3, [pc, #336]	; (8006240 <drawSystemInfoMenu+0x604>)
 80060f0:	4a5a      	ldr	r2, [pc, #360]	; (800625c <drawSystemInfoMenu+0x620>)
 80060f2:	f7fb fc7f 	bl	80019f4 <LCD_PutStr>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	4413      	add	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8006100:	4b52      	ldr	r3, [pc, #328]	; (800624c <drawSystemInfoMenu+0x610>)
 8006102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006104:	4a52      	ldr	r2, [pc, #328]	; (8006250 <drawSystemInfoMenu+0x614>)
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	edd3 7a00 	vldr	s15, [r3]
 800610e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006112:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006116:	ee27 7b06 	vmul.f64	d7, d7, d6
 800611a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800611e:	ee17 3a90 	vmov	r3, s15
 8006122:	613b      	str	r3, [r7, #16]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	b298      	uxth	r0, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	b299      	uxth	r1, r3
 800612c:	4b44      	ldr	r3, [pc, #272]	; (8006240 <drawSystemInfoMenu+0x604>)
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	2301      	movs	r3, #1
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	f7fb fcfc 	bl	8001b30 <LCD_PutIntF>

		j+=25;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	3319      	adds	r3, #25
 800613c:	617b      	str	r3, [r7, #20]
		i=indentAlignment;
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	b298      	uxth	r0, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	b299      	uxth	r1, r3
 800614a:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <drawSystemInfoMenu+0x604>)
 800614c:	4a44      	ldr	r2, [pc, #272]	; (8006260 <drawSystemInfoMenu+0x624>)
 800614e:	f7fb fc51 	bl	80019f4 <LCD_PutStr>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	4413      	add	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 800615c:	4b3b      	ldr	r3, [pc, #236]	; (800624c <drawSystemInfoMenu+0x610>)
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	4a3b      	ldr	r2, [pc, #236]	; (8006250 <drawSystemInfoMenu+0x614>)
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800616e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006172:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006176:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800617a:	ee17 3a90 	vmov	r3, s15
 800617e:	613b      	str	r3, [r7, #16]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	b298      	uxth	r0, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	b299      	uxth	r1, r3
 8006188:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <drawSystemInfoMenu+0x604>)
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2301      	movs	r3, #1
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	f7fb fcce 	bl	8001b30 <LCD_PutIntF>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	4413      	add	r3, r2
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4413      	add	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	b298      	uxth	r0, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	b299      	uxth	r1, r3
 80061aa:	4b25      	ldr	r3, [pc, #148]	; (8006240 <drawSystemInfoMenu+0x604>)
 80061ac:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <drawSystemInfoMenu+0x628>)
 80061ae:	f7fb fc21 	bl	80019f4 <LCD_PutStr>
 80061b2:	4603      	mov	r3, r0
 80061b4:	461a      	mov	r2, r3
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
		if(ZION.zionSwitch ==1){
 80061bc:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <drawSystemInfoMenu+0x62c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d108      	bne.n	80061d6 <drawSystemInfoMenu+0x59a>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	b298      	uxth	r0, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	b299      	uxth	r1, r3
 80061cc:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <drawSystemInfoMenu+0x604>)
 80061ce:	4a27      	ldr	r2, [pc, #156]	; (800626c <drawSystemInfoMenu+0x630>)
 80061d0:	f7fb fc10 	bl	80019f4 <LCD_PutStr>
 80061d4:	e007      	b.n	80061e6 <drawSystemInfoMenu+0x5aa>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	b298      	uxth	r0, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	b299      	uxth	r1, r3
 80061de:	4b18      	ldr	r3, [pc, #96]	; (8006240 <drawSystemInfoMenu+0x604>)
 80061e0:	4a23      	ldr	r2, [pc, #140]	; (8006270 <drawSystemInfoMenu+0x634>)
 80061e2:	f7fb fc07 	bl	80019f4 <LCD_PutStr>
		}



		i=200;
 80061e6:	23c8      	movs	r3, #200	; 0xc8
 80061e8:	61bb      	str	r3, [r7, #24]
		j=15;
 80061ea:	230f      	movs	r3, #15
 80061ec:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	b298      	uxth	r0, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	b299      	uxth	r1, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f7fb fd49 	bl	8001c94 <drawUpDownArrow>
		i=180;
 8006202:	23b4      	movs	r3, #180	; 0xb4
 8006204:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	b298      	uxth	r0, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	b299      	uxth	r1, r3
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	b29a      	uxth	r2, r3
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	b29b      	uxth	r3, r3
 8006216:	f7fb fd3d 	bl	8001c94 <drawUpDownArrow>
		i=220;
 800621a:	23dc      	movs	r3, #220	; 0xdc
 800621c:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	b298      	uxth	r0, r3
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	b299      	uxth	r1, r3
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	b29a      	uxth	r2, r3
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	b29b      	uxth	r3, r3
 800622e:	f7fb fd31 	bl	8001c94 <drawUpDownArrow>

		break;
 8006232:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8006234:	f7fa fc44 	bl	8000ac0 <SMLCD_Flush>
}
 8006238:	bf00      	nop
 800623a:	3738      	adds	r7, #56	; 0x38
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	0801b2c8 	.word	0x0801b2c8
 8006244:	0801a95c 	.word	0x0801a95c
 8006248:	0801a974 	.word	0x0801a974
 800624c:	200000d4 	.word	0x200000d4
 8006250:	2003119c 	.word	0x2003119c
 8006254:	0801a984 	.word	0x0801a984
 8006258:	0801a990 	.word	0x0801a990
 800625c:	0801a99c 	.word	0x0801a99c
 8006260:	0801a924 	.word	0x0801a924
 8006264:	0801a9a8 	.word	0x0801a9a8
 8006268:	20003328 	.word	0x20003328
 800626c:	0801a9b8 	.word	0x0801a9b8
 8006270:	0801a9c0 	.word	0x0801a9c0

08006274 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	460b      	mov	r3, r1
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	72fb      	strb	r3, [r7, #11]
	int i,j;
		//int adjacentSpacing = 20;
		//int indentAlignment=50;


		LCD_Clear();
 8006282:	f7fa fdd9 	bl	8000e38 <LCD_Clear>
		getLatestADC();
 8006286:	f000 f937 	bl	80064f8 <getLatestADC>
		drawMenuHeader();
 800628a:	f000 f89d 	bl	80063c8 <drawMenuHeader>
		i  = 135;
 800628e:	2387      	movs	r3, #135	; 0x87
 8006290:	61bb      	str	r3, [r7, #24]
		j = 24;
 8006292:	2318      	movs	r3, #24
 8006294:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	b299      	uxth	r1, r3
 800629a:	4b42      	ldr	r3, [pc, #264]	; (80063a4 <drawBootMenu+0x130>)
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	3b02      	subs	r3, #2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3303      	adds	r3, #3
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2002      	movs	r0, #2
 80062ac:	f7fb f854 	bl	8001358 <LCD_FillRect>

//add your project definition here. example is ATLAS below. ATLAS is defined as finding zion information of 1 in the device header.
		int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 80062b0:	4b3d      	ldr	r3, [pc, #244]	; (80063a8 <drawBootMenu+0x134>)
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d007      	beq.n	80062c8 <drawBootMenu+0x54>
 80062b8:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <drawBootMenu+0x134>)
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d003      	beq.n	80062c8 <drawBootMenu+0x54>
 80062c0:	4b39      	ldr	r3, [pc, #228]	; (80063a8 <drawBootMenu+0x134>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <drawBootMenu+0x58>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <drawBootMenu+0x5a>
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
		if(VSYS_ADC_VAL > VSYS_FLT){
 80062d0:	4b36      	ldr	r3, [pc, #216]	; (80063ac <drawBootMenu+0x138>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a36      	ldr	r2, [pc, #216]	; (80063b0 <drawBootMenu+0x13c>)
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	edd3 7a00 	vldr	s15, [r3]
 80062de:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80062e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ea:	dd25      	ble.n	8006338 <drawBootMenu+0xc4>
			if(ZION.zionFinished){
 80062ec:	4b2e      	ldr	r3, [pc, #184]	; (80063a8 <drawBootMenu+0x134>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d016      	beq.n	8006322 <drawBootMenu+0xae>
				//add an additional if/else if for the new project and call your method.
				if(weAreAtlas){
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <drawBootMenu+0x98>
					j = atlasBootMenuBootModes(indicator, previousMenu, menu, button);
 80062fa:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <drawBootMenu+0x140>)
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f00b fbde 	bl	8011ac4 <atlasBootMenuBootModes>
 8006308:	61f8      	str	r0, [r7, #28]
 800630a:	e031      	b.n	8006370 <drawBootMenu+0xfc>
				}
				else{
					j = defaultBootMenuBootModes(indicator, previousMenu, menu, button,1);
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <drawBootMenu+0x140>)
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	7afb      	ldrb	r3, [r7, #11]
 8006312:	2201      	movs	r2, #1
 8006314:	9200      	str	r2, [sp, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f00d ff19 	bl	8014150 <defaultBootMenuBootModes>
 800631e:	61f8      	str	r0, [r7, #28]
 8006320:	e026      	b.n	8006370 <drawBootMenu+0xfc>
				}
			}
			else{
				j = defaultBootMenuBootModes(indicator, previousMenu, menu, button,0);
 8006322:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <drawBootMenu+0x140>)
 8006324:	6819      	ldr	r1, [r3, #0]
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	2200      	movs	r2, #0
 800632a:	9200      	str	r2, [sp, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f00d ff0e 	bl	8014150 <defaultBootMenuBootModes>
 8006334:	61f8      	str	r0, [r7, #28]
 8006336:	e01b      	b.n	8006370 <drawBootMenu+0xfc>
			}
		}
		else{
			j=110;
 8006338:	236e      	movs	r3, #110	; 0x6e
 800633a:	61fb      	str	r3, [r7, #28]
			i=120;
 800633c:	2378      	movs	r3, #120	; 0x78
 800633e:	61bb      	str	r3, [r7, #24]
			bootButtons.bootMode=0;
 8006340:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <drawBootMenu+0x144>)
 8006342:	2200      	movs	r2, #0
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	b298      	uxth	r0, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	b299      	uxth	r1, r3
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <drawBootMenu+0x148>)
 8006350:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <drawBootMenu+0x14c>)
 8006352:	f7fb fb4f 	bl	80019f4 <LCD_PutStr>
			j+=14;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	330e      	adds	r3, #14
 800635a:	61fb      	str	r3, [r7, #28]
			i=75;
 800635c:	234b      	movs	r3, #75	; 0x4b
 800635e:	61bb      	str	r3, [r7, #24]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	b298      	uxth	r0, r3
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	b299      	uxth	r1, r3
 8006368:	4b14      	ldr	r3, [pc, #80]	; (80063bc <drawBootMenu+0x148>)
 800636a:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <drawBootMenu+0x150>)
 800636c:	f7fb fb42 	bl	80019f4 <LCD_PutStr>
		}
		previousMenu=menu;
 8006370:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <drawBootMenu+0x140>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6013      	str	r3, [r2, #0]
		i=25;
 8006376:	2319      	movs	r3, #25
 8006378:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(i, j, i + 12, j + 10);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	b298      	uxth	r0, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	b299      	uxth	r1, r3
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	b29b      	uxth	r3, r3
 8006386:	330c      	adds	r3, #12
 8006388:	b29a      	uxth	r2, r3
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	b29b      	uxth	r3, r3
 800638e:	330a      	adds	r3, #10
 8006390:	b29b      	uxth	r3, r3
 8006392:	f7fa ffe1 	bl	8001358 <LCD_FillRect>
		SMLCD_Flush();
 8006396:	f7fa fb93 	bl	8000ac0 <SMLCD_Flush>
}
 800639a:	bf00      	nop
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20028b62 	.word	0x20028b62
 80063a8:	20003328 	.word	0x20003328
 80063ac:	200000d4 	.word	0x200000d4
 80063b0:	2003119c 	.word	0x2003119c
 80063b4:	20003428 	.word	0x20003428
 80063b8:	20003360 	.word	0x20003360
 80063bc:	0801b2c8 	.word	0x0801b2c8
 80063c0:	0801a9cc 	.word	0x0801a9cc
 80063c4:	0801a9e4 	.word	0x0801a9e4

080063c8 <drawMenuHeader>:

void drawMenuHeader(){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 80063ce:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <drawMenuHeader+0x104>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80063d4:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <drawMenuHeader+0x108>)
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	4b3d      	ldr	r3, [pc, #244]	; (80064d4 <drawMenuHeader+0x10c>)
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2100      	movs	r1, #0
 80063e6:	2000      	movs	r0, #0
 80063e8:	f7fa ff74 	bl	80012d4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80063ec:	4b38      	ldr	r3, [pc, #224]	; (80064d0 <drawMenuHeader+0x108>)
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	3b03      	subs	r3, #3
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <drawMenuHeader+0x10c>)
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	3b03      	subs	r3, #3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2102      	movs	r1, #2
 80063fe:	2002      	movs	r0, #2
 8006400:	f7fa ff68 	bl	80012d4 <LCD_Rect>

	// RTC :)
	i  = 10;
 8006404:	230a      	movs	r3, #10
 8006406:	60fb      	str	r3, [r7, #12]
	j  = 10;
 8006408:	230a      	movs	r3, #10
 800640a:	60bb      	str	r3, [r7, #8]
	printFaults(i,j);
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f8a0 	bl	8006554 <printFaults>
	i=275;
 8006414:	f240 1313 	movw	r3, #275	; 0x113
 8006418:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	b298      	uxth	r0, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	b299      	uxth	r1, r3
 8006422:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <drawMenuHeader+0x110>)
 8006424:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <drawMenuHeader+0x114>)
 8006426:	f7fb fae5 	bl	80019f4 <LCD_PutStr>
 800642a:	4603      	mov	r3, r0
 800642c:	461a      	mov	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
	int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8006434:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <drawMenuHeader+0x118>)
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d007      	beq.n	800644c <drawMenuHeader+0x84>
 800643c:	4b28      	ldr	r3, [pc, #160]	; (80064e0 <drawMenuHeader+0x118>)
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b01      	cmp	r3, #1
 8006442:	d003      	beq.n	800644c <drawMenuHeader+0x84>
 8006444:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <drawMenuHeader+0x118>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <drawMenuHeader+0x88>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <drawMenuHeader+0x8a>
 8006450:	2300      	movs	r3, #0
 8006452:	607b      	str	r3, [r7, #4]
	if(VSYS_ADC_VAL >VSYS_FLT){
 8006454:	4b23      	ldr	r3, [pc, #140]	; (80064e4 <drawMenuHeader+0x11c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <drawMenuHeader+0x120>)
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	edd3 7a00 	vldr	s15, [r3]
 8006462:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8006466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646e:	dd15      	ble.n	800649c <drawMenuHeader+0xd4>
		if(ZION.SOC_EEPROM_Detected){
 8006470:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <drawMenuHeader+0x118>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00c      	beq.n	8006492 <drawMenuHeader+0xca>
			//Add an if/else if for your project name and call the method
			if(weAreAtlas){
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <drawMenuHeader+0xc0>
				atlasMainMenuBootModes(i,j);
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f00b fabd 	bl	8011a00 <atlasMainMenuBootModes>
 8006486:	e017      	b.n	80064b8 <drawMenuHeader+0xf0>
			}
			else{
				defaultMainMenuBootModes(i,j);
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f00d fe2c 	bl	80140e8 <defaultMainMenuBootModes>
 8006490:	e012      	b.n	80064b8 <drawMenuHeader+0xf0>
			}
		}
		else{
			defaultMainMenuBootModes(i,j);
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f00d fe27 	bl	80140e8 <defaultMainMenuBootModes>
 800649a:	e00d      	b.n	80064b8 <drawMenuHeader+0xf0>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	b298      	uxth	r0, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	b299      	uxth	r1, r3
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <drawMenuHeader+0x110>)
 80064a6:	4a11      	ldr	r2, [pc, #68]	; (80064ec <drawMenuHeader+0x124>)
 80064a8:	f7fb faa4 	bl	80019f4 <LCD_PutStr>
		bootButtons.bootMode=0;
 80064ac:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <drawMenuHeader+0x128>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	629a      	str	r2, [r3, #40]	; 0x28
		checkedEEPROM=0;
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <drawMenuHeader+0x12c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
	}

	i  = 135;
 80064b8:	2387      	movs	r3, #135	; 0x87
 80064ba:	60fb      	str	r3, [r7, #12]
	j += 14;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	330e      	adds	r3, #14
 80064c0:	60bb      	str	r3, [r7, #8]


}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20028b60 	.word	0x20028b60
 80064d0:	20028b62 	.word	0x20028b62
 80064d4:	20028b64 	.word	0x20028b64
 80064d8:	0801b2c8 	.word	0x0801b2c8
 80064dc:	0801a764 	.word	0x0801a764
 80064e0:	20003328 	.word	0x20003328
 80064e4:	200000d4 	.word	0x200000d4
 80064e8:	2003119c 	.word	0x2003119c
 80064ec:	0801a76c 	.word	0x0801a76c
 80064f0:	20003360 	.word	0x20003360
 80064f4:	20003430 	.word	0x20003430

080064f8 <getLatestADC>:

void getLatestADC(){
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <getLatestADC+0x54>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01e      	beq.n	8006544 <getLatestADC+0x4c>
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <getLatestADC+0x54>)
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01a      	beq.n	8006544 <getLatestADC+0x4c>
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <getLatestADC+0x54>)
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 8006516:	f7fd fced 	bl	8003ef4 <getADCValues>
 800651a:	4603      	mov	r3, r0
 800651c:	603b      	str	r3, [r7, #0]
		  for(i=0;i<21;i++){
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	e00c      	b.n	800653e <getLatestADC+0x46>
	  		  displayAdcValues[i]=*(adcValuePointer+i);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	4413      	add	r3, r2
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4908      	ldr	r1, [pc, #32]	; (8006550 <getLatestADC+0x58>)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	601a      	str	r2, [r3, #0]
		  for(i=0;i<21;i++){
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3301      	adds	r3, #1
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b14      	cmp	r3, #20
 8006542:	ddef      	ble.n	8006524 <getLatestADC+0x2c>
		  }
	 }
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20003324 	.word	0x20003324
 8006550:	2003119c 	.word	0x2003119c

08006554 <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
	int x = i;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	617b      	str	r3, [r7, #20]
	int y = j;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	613b      	str	r3, [r7, #16]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	b298      	uxth	r0, r3
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	b299      	uxth	r1, r3
 800656e:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <printFaults+0x74>)
 8006570:	4a16      	ldr	r2, [pc, #88]	; (80065cc <printFaults+0x78>)
 8006572:	f7fb fa3f 	bl	80019f4 <LCD_PutStr>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	4413      	add	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
	int weAreAtlas = (ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS);
 8006580:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <printFaults+0x7c>)
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d007      	beq.n	8006598 <printFaults+0x44>
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <printFaults+0x7c>)
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	2b01      	cmp	r3, #1
 800658e:	d003      	beq.n	8006598 <printFaults+0x44>
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <printFaults+0x7c>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <printFaults+0x48>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <printFaults+0x4a>
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
	//Add an if/else if for your project name and call the method
	if(weAreAtlas){
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <printFaults+0x5e>
		x = atlasHeaderFaults(x,y);
 80065a6:	6939      	ldr	r1, [r7, #16]
 80065a8:	6978      	ldr	r0, [r7, #20]
 80065aa:	f00b ffcb 	bl	8012544 <atlasHeaderFaults>
 80065ae:	6178      	str	r0, [r7, #20]
 80065b0:	e004      	b.n	80065bc <printFaults+0x68>
	}
	else{
		x = defaultHeaderFaults(x,y);
 80065b2:	6939      	ldr	r1, [r7, #16]
 80065b4:	6978      	ldr	r0, [r7, #20]
 80065b6:	f00e f879 	bl	80146ac <defaultHeaderFaults>
 80065ba:	6178      	str	r0, [r7, #20]
	}
	return x;
 80065bc:	697b      	ldr	r3, [r7, #20]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	0801b2c8 	.word	0x0801b2c8
 80065cc:	0801a798 	.word	0x0801a798
 80065d0:	20003328 	.word	0x20003328

080065d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <HAL_MspInit+0x4c>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	4a10      	ldr	r2, [pc, #64]	; (8006620 <HAL_MspInit+0x4c>)
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6413      	str	r3, [r2, #64]	; 0x40
 80065e6:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <HAL_MspInit+0x4c>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <HAL_MspInit+0x4c>)
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <HAL_MspInit+0x4c>)
 80065f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065fc:	6453      	str	r3, [r2, #68]	; 0x44
 80065fe:	4b08      	ldr	r3, [pc, #32]	; (8006620 <HAL_MspInit+0x4c>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800660a:	2200      	movs	r2, #0
 800660c:	210f      	movs	r1, #15
 800660e:	f06f 0001 	mvn.w	r0, #1
 8006612:	f002 f9d7 	bl	80089c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023800 	.word	0x40023800

08006624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b094      	sub	sp, #80	; 0x50
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800662c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	605a      	str	r2, [r3, #4]
 8006636:	609a      	str	r2, [r3, #8]
 8006638:	60da      	str	r2, [r3, #12]
 800663a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a91      	ldr	r2, [pc, #580]	; (8006888 <HAL_ADC_MspInit+0x264>)
 8006642:	4293      	cmp	r3, r2
 8006644:	f040 808c 	bne.w	8006760 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006648:	4b90      	ldr	r3, [pc, #576]	; (800688c <HAL_ADC_MspInit+0x268>)
 800664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664c:	4a8f      	ldr	r2, [pc, #572]	; (800688c <HAL_ADC_MspInit+0x268>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006652:	6453      	str	r3, [r2, #68]	; 0x44
 8006654:	4b8d      	ldr	r3, [pc, #564]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006660:	4b8a      	ldr	r3, [pc, #552]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	4a89      	ldr	r2, [pc, #548]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006666:	f043 0304 	orr.w	r3, r3, #4
 800666a:	6313      	str	r3, [r2, #48]	; 0x30
 800666c:	4b87      	ldr	r3, [pc, #540]	; (800688c <HAL_ADC_MspInit+0x268>)
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006678:	4b84      	ldr	r3, [pc, #528]	; (800688c <HAL_ADC_MspInit+0x268>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a83      	ldr	r2, [pc, #524]	; (800688c <HAL_ADC_MspInit+0x268>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
 8006684:	4b81      	ldr	r3, [pc, #516]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006690:	4b7e      	ldr	r3, [pc, #504]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	4a7d      	ldr	r2, [pc, #500]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006696:	f043 0302 	orr.w	r3, r3, #2
 800669a:	6313      	str	r3, [r2, #48]	; 0x30
 800669c:	4b7b      	ldr	r3, [pc, #492]	; (800688c <HAL_ADC_MspInit+0x268>)
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80066a8:	230f      	movs	r3, #15
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066ac:	2303      	movs	r3, #3
 80066ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066b8:	4619      	mov	r1, r3
 80066ba:	4875      	ldr	r0, [pc, #468]	; (8006890 <HAL_ADC_MspInit+0x26c>)
 80066bc:	f002 fdb6 	bl	800922c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 80066c0:	23f8      	movs	r3, #248	; 0xf8
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066c4:	2303      	movs	r3, #3
 80066c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066d0:	4619      	mov	r1, r3
 80066d2:	4870      	ldr	r0, [pc, #448]	; (8006894 <HAL_ADC_MspInit+0x270>)
 80066d4:	f002 fdaa 	bl	800922c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80066d8:	2303      	movs	r3, #3
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066dc:	2303      	movs	r3, #3
 80066de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066e8:	4619      	mov	r1, r3
 80066ea:	486b      	ldr	r0, [pc, #428]	; (8006898 <HAL_ADC_MspInit+0x274>)
 80066ec:	f002 fd9e 	bl	800922c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80066f0:	4b6a      	ldr	r3, [pc, #424]	; (800689c <HAL_ADC_MspInit+0x278>)
 80066f2:	4a6b      	ldr	r2, [pc, #428]	; (80068a0 <HAL_ADC_MspInit+0x27c>)
 80066f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80066f6:	4b69      	ldr	r3, [pc, #420]	; (800689c <HAL_ADC_MspInit+0x278>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066fc:	4b67      	ldr	r3, [pc, #412]	; (800689c <HAL_ADC_MspInit+0x278>)
 80066fe:	2200      	movs	r2, #0
 8006700:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006702:	4b66      	ldr	r3, [pc, #408]	; (800689c <HAL_ADC_MspInit+0x278>)
 8006704:	2200      	movs	r2, #0
 8006706:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006708:	4b64      	ldr	r3, [pc, #400]	; (800689c <HAL_ADC_MspInit+0x278>)
 800670a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800670e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006710:	4b62      	ldr	r3, [pc, #392]	; (800689c <HAL_ADC_MspInit+0x278>)
 8006712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006716:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006718:	4b60      	ldr	r3, [pc, #384]	; (800689c <HAL_ADC_MspInit+0x278>)
 800671a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800671e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006720:	4b5e      	ldr	r3, [pc, #376]	; (800689c <HAL_ADC_MspInit+0x278>)
 8006722:	2200      	movs	r2, #0
 8006724:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006726:	4b5d      	ldr	r3, [pc, #372]	; (800689c <HAL_ADC_MspInit+0x278>)
 8006728:	2200      	movs	r2, #0
 800672a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800672c:	4b5b      	ldr	r3, [pc, #364]	; (800689c <HAL_ADC_MspInit+0x278>)
 800672e:	2200      	movs	r2, #0
 8006730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006732:	485a      	ldr	r0, [pc, #360]	; (800689c <HAL_ADC_MspInit+0x278>)
 8006734:	f002 f970 	bl	8008a18 <HAL_DMA_Init>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 800673e:	f7fe fdd5 	bl	80052ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a55      	ldr	r2, [pc, #340]	; (800689c <HAL_ADC_MspInit+0x278>)
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
 8006748:	4a54      	ldr	r2, [pc, #336]	; (800689c <HAL_ADC_MspInit+0x278>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800674e:	2200      	movs	r2, #0
 8006750:	2105      	movs	r1, #5
 8006752:	2012      	movs	r0, #18
 8006754:	f002 f936 	bl	80089c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006758:	2012      	movs	r0, #18
 800675a:	f002 f94f 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800675e:	e13a      	b.n	80069d6 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a4f      	ldr	r2, [pc, #316]	; (80068a4 <HAL_ADC_MspInit+0x280>)
 8006766:	4293      	cmp	r3, r2
 8006768:	f040 80a2 	bne.w	80068b0 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800676c:	4b47      	ldr	r3, [pc, #284]	; (800688c <HAL_ADC_MspInit+0x268>)
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	4a46      	ldr	r2, [pc, #280]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006776:	6453      	str	r3, [r2, #68]	; 0x44
 8006778:	4b44      	ldr	r3, [pc, #272]	; (800688c <HAL_ADC_MspInit+0x268>)
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006784:	4b41      	ldr	r3, [pc, #260]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	4a40      	ldr	r2, [pc, #256]	; (800688c <HAL_ADC_MspInit+0x268>)
 800678a:	f043 0304 	orr.w	r3, r3, #4
 800678e:	6313      	str	r3, [r2, #48]	; 0x30
 8006790:	4b3e      	ldr	r3, [pc, #248]	; (800688c <HAL_ADC_MspInit+0x268>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800679c:	4b3b      	ldr	r3, [pc, #236]	; (800688c <HAL_ADC_MspInit+0x268>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	4a3a      	ldr	r2, [pc, #232]	; (800688c <HAL_ADC_MspInit+0x268>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6313      	str	r3, [r2, #48]	; 0x30
 80067a8:	4b38      	ldr	r3, [pc, #224]	; (800688c <HAL_ADC_MspInit+0x268>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b4:	4b35      	ldr	r3, [pc, #212]	; (800688c <HAL_ADC_MspInit+0x268>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	4a34      	ldr	r2, [pc, #208]	; (800688c <HAL_ADC_MspInit+0x268>)
 80067ba:	f043 0302 	orr.w	r3, r3, #2
 80067be:	6313      	str	r3, [r2, #48]	; 0x30
 80067c0:	4b32      	ldr	r3, [pc, #200]	; (800688c <HAL_ADC_MspInit+0x268>)
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 80067cc:	233f      	movs	r3, #63	; 0x3f
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067d0:	2303      	movs	r3, #3
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067dc:	4619      	mov	r1, r3
 80067de:	482c      	ldr	r0, [pc, #176]	; (8006890 <HAL_ADC_MspInit+0x26c>)
 80067e0:	f002 fd24 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 80067e4:	237b      	movs	r3, #123	; 0x7b
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067e8:	2303      	movs	r3, #3
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067f4:	4619      	mov	r1, r3
 80067f6:	4827      	ldr	r0, [pc, #156]	; (8006894 <HAL_ADC_MspInit+0x270>)
 80067f8:	f002 fd18 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 80067fc:	2302      	movs	r3, #2
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006800:	2303      	movs	r3, #3
 8006802:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006804:	2300      	movs	r3, #0
 8006806:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8006808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800680c:	4619      	mov	r1, r3
 800680e:	4822      	ldr	r0, [pc, #136]	; (8006898 <HAL_ADC_MspInit+0x274>)
 8006810:	f002 fd0c 	bl	800922c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006814:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006816:	4a25      	ldr	r2, [pc, #148]	; (80068ac <HAL_ADC_MspInit+0x288>)
 8006818:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800681a:	4b23      	ldr	r3, [pc, #140]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 800681c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006820:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006824:	2200      	movs	r2, #0
 8006826:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006828:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 800682a:	2200      	movs	r2, #0
 800682c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800682e:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006834:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006836:	4b1c      	ldr	r3, [pc, #112]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800683c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800683e:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006844:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006848:	2200      	movs	r2, #0
 800684a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800684c:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 800684e:	2200      	movs	r2, #0
 8006850:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006854:	2200      	movs	r2, #0
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006858:	4813      	ldr	r0, [pc, #76]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 800685a:	f002 f8dd 	bl	8008a18 <HAL_DMA_Init>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8006864:	f7fe fd42 	bl	80052ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
 800686e:	4a0e      	ldr	r2, [pc, #56]	; (80068a8 <HAL_ADC_MspInit+0x284>)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8006874:	2200      	movs	r2, #0
 8006876:	2105      	movs	r1, #5
 8006878:	2012      	movs	r0, #18
 800687a:	f002 f8a3 	bl	80089c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800687e:	2012      	movs	r0, #18
 8006880:	f002 f8bc 	bl	80089fc <HAL_NVIC_EnableIRQ>
}
 8006884:	e0a7      	b.n	80069d6 <HAL_ADC_MspInit+0x3b2>
 8006886:	bf00      	nop
 8006888:	40012000 	.word	0x40012000
 800688c:	40023800 	.word	0x40023800
 8006890:	40020800 	.word	0x40020800
 8006894:	40020000 	.word	0x40020000
 8006898:	40020400 	.word	0x40020400
 800689c:	2002c0c0 	.word	0x2002c0c0
 80068a0:	40026410 	.word	0x40026410
 80068a4:	40012100 	.word	0x40012100
 80068a8:	200310d4 	.word	0x200310d4
 80068ac:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a4a      	ldr	r2, [pc, #296]	; (80069e0 <HAL_ADC_MspInit+0x3bc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	f040 808d 	bne.w	80069d6 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80068bc:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	4a48      	ldr	r2, [pc, #288]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068c6:	6453      	str	r3, [r2, #68]	; 0x44
 80068c8:	4b46      	ldr	r3, [pc, #280]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80068d4:	4b43      	ldr	r3, [pc, #268]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	4a42      	ldr	r2, [pc, #264]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068da:	f043 0320 	orr.w	r3, r3, #32
 80068de:	6313      	str	r3, [r2, #48]	; 0x30
 80068e0:	4b40      	ldr	r3, [pc, #256]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ec:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068f2:	f043 0304 	orr.w	r3, r3, #4
 80068f6:	6313      	str	r3, [r2, #48]	; 0x30
 80068f8:	4b3a      	ldr	r3, [pc, #232]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006904:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	4a36      	ldr	r2, [pc, #216]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	6313      	str	r3, [r2, #48]	; 0x30
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_ADC_MspInit+0x3c0>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 800691c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006922:	2303      	movs	r3, #3
 8006924:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006926:	2300      	movs	r3, #0
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800692a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800692e:	4619      	mov	r1, r3
 8006930:	482d      	ldr	r0, [pc, #180]	; (80069e8 <HAL_ADC_MspInit+0x3c4>)
 8006932:	f002 fc7b 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8006936:	230f      	movs	r3, #15
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800693a:	2303      	movs	r3, #3
 800693c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006946:	4619      	mov	r1, r3
 8006948:	4828      	ldr	r0, [pc, #160]	; (80069ec <HAL_ADC_MspInit+0x3c8>)
 800694a:	f002 fc6f 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 800694e:	230c      	movs	r3, #12
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006952:	2303      	movs	r3, #3
 8006954:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006956:	2300      	movs	r3, #0
 8006958:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800695a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800695e:	4619      	mov	r1, r3
 8006960:	4823      	ldr	r0, [pc, #140]	; (80069f0 <HAL_ADC_MspInit+0x3cc>)
 8006962:	f002 fc63 	bl	800922c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006966:	4b23      	ldr	r3, [pc, #140]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 8006968:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <HAL_ADC_MspInit+0x3d4>)
 800696a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800696c:	4b21      	ldr	r3, [pc, #132]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 800696e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006972:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006974:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 8006976:	2200      	movs	r2, #0
 8006978:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800697a:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 800697c:	2200      	movs	r2, #0
 800697e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 8006982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006986:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 800698a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800698e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006990:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 8006992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006996:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006998:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 800699a:	2200      	movs	r2, #0
 800699c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069a4:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80069aa:	4812      	ldr	r0, [pc, #72]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 80069ac:	f002 f834 	bl	8008a18 <HAL_DMA_Init>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_ADC_MspInit+0x396>
      Error_Handler();
 80069b6:	f7fe fc99 	bl	80052ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
 80069c0:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <HAL_ADC_MspInit+0x3d0>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80069c6:	2200      	movs	r2, #0
 80069c8:	2105      	movs	r1, #5
 80069ca:	2012      	movs	r0, #18
 80069cc:	f001 fffa 	bl	80089c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80069d0:	2012      	movs	r0, #18
 80069d2:	f002 f813 	bl	80089fc <HAL_NVIC_EnableIRQ>
}
 80069d6:	bf00      	nop
 80069d8:	3750      	adds	r7, #80	; 0x50
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40012200 	.word	0x40012200
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40021400 	.word	0x40021400
 80069ec:	40020800 	.word	0x40020800
 80069f0:	40020000 	.word	0x40020000
 80069f4:	200292e0 	.word	0x200292e0
 80069f8:	40026428 	.word	0x40026428

080069fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b090      	sub	sp, #64	; 0x40
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6c      	ldr	r2, [pc, #432]	; (8006bcc <HAL_I2C_MspInit+0x1d0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d129      	bne.n	8006a72 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a1e:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	4a6b      	ldr	r2, [pc, #428]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	6313      	str	r3, [r2, #48]	; 0x30
 8006a2a:	4b69      	ldr	r3, [pc, #420]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8006a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a3c:	2312      	movs	r3, #18
 8006a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a40:	2301      	movs	r3, #1
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a44:	2303      	movs	r3, #3
 8006a46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006a48:	2304      	movs	r3, #4
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a50:	4619      	mov	r1, r3
 8006a52:	4860      	ldr	r0, [pc, #384]	; (8006bd4 <HAL_I2C_MspInit+0x1d8>)
 8006a54:	f002 fbea 	bl	800922c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a58:	4b5d      	ldr	r3, [pc, #372]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	4a5c      	ldr	r2, [pc, #368]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a62:	6413      	str	r3, [r2, #64]	; 0x40
 8006a64:	4b5a      	ldr	r3, [pc, #360]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006a70:	e0a7      	b.n	8006bc2 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a58      	ldr	r2, [pc, #352]	; (8006bd8 <HAL_I2C_MspInit+0x1dc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d128      	bne.n	8006ace <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a7c:	4b54      	ldr	r3, [pc, #336]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	4a53      	ldr	r2, [pc, #332]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a82:	f043 0320 	orr.w	r3, r3, #32
 8006a86:	6313      	str	r3, [r2, #48]	; 0x30
 8006a88:	4b51      	ldr	r3, [pc, #324]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8006a94:	2303      	movs	r3, #3
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a98:	2312      	movs	r3, #18
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aac:	4619      	mov	r1, r3
 8006aae:	484b      	ldr	r0, [pc, #300]	; (8006bdc <HAL_I2C_MspInit+0x1e0>)
 8006ab0:	f002 fbbc 	bl	800922c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006ab4:	4b46      	ldr	r3, [pc, #280]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	4a45      	ldr	r2, [pc, #276]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006abe:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac0:	4b43      	ldr	r3, [pc, #268]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	69fb      	ldr	r3, [r7, #28]
}
 8006acc:	e079      	b.n	8006bc2 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a43      	ldr	r2, [pc, #268]	; (8006be0 <HAL_I2C_MspInit+0x1e4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d146      	bne.n	8006b66 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ad8:	4b3d      	ldr	r3, [pc, #244]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	4a3c      	ldr	r2, [pc, #240]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006ade:	f043 0304 	orr.w	r3, r3, #4
 8006ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae4:	4b3a      	ldr	r3, [pc, #232]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af0:	4b37      	ldr	r3, [pc, #220]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6313      	str	r3, [r2, #48]	; 0x30
 8006afc:	4b34      	ldr	r3, [pc, #208]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8006b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b0e:	2312      	movs	r3, #18
 8006b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b12:	2301      	movs	r3, #1
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b16:	2303      	movs	r3, #3
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8006b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b22:	4619      	mov	r1, r3
 8006b24:	482f      	ldr	r0, [pc, #188]	; (8006be4 <HAL_I2C_MspInit+0x1e8>)
 8006b26:	f002 fb81 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8006b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b30:	2312      	movs	r3, #18
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b34:	2301      	movs	r3, #1
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8006b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b44:	4619      	mov	r1, r3
 8006b46:	4828      	ldr	r0, [pc, #160]	; (8006be8 <HAL_I2C_MspInit+0x1ec>)
 8006b48:	f002 fb70 	bl	800922c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006b52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b56:	6413      	str	r3, [r2, #64]	; 0x40
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
}
 8006b64:	e02d      	b.n	8006bc2 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a20      	ldr	r2, [pc, #128]	; (8006bec <HAL_I2C_MspInit+0x1f0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d128      	bne.n	8006bc2 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b70:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006b76:	f043 0320 	orr.w	r3, r3, #32
 8006b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7c:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8006b88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b8e:	2312      	movs	r3, #18
 8006b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b92:	2301      	movs	r3, #1
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b96:	2303      	movs	r3, #3
 8006b98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	480d      	ldr	r0, [pc, #52]	; (8006bdc <HAL_I2C_MspInit+0x1e0>)
 8006ba6:	f002 fb41 	bl	800922c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb6:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <HAL_I2C_MspInit+0x1d4>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
}
 8006bc2:	bf00      	nop
 8006bc4:	3740      	adds	r7, #64	; 0x40
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40005400 	.word	0x40005400
 8006bd0:	40023800 	.word	0x40023800
 8006bd4:	40020400 	.word	0x40020400
 8006bd8:	40005800 	.word	0x40005800
 8006bdc:	40021400 	.word	0x40021400
 8006be0:	40005c00 	.word	0x40005c00
 8006be4:	40020800 	.word	0x40020800
 8006be8:	40020000 	.word	0x40020000
 8006bec:	40006000 	.word	0x40006000

08006bf0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a07      	ldr	r2, [pc, #28]	; (8006c1c <HAL_RTC_MspInit+0x2c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d105      	bne.n	8006c0e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <HAL_RTC_MspInit+0x30>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	4a06      	ldr	r2, [pc, #24]	; (8006c20 <HAL_RTC_MspInit+0x30>)
 8006c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40002800 	.word	0x40002800
 8006c20:	40023800 	.word	0x40023800

08006c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c2c:	f107 031c 	add.w	r3, r7, #28
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	605a      	str	r2, [r3, #4]
 8006c36:	609a      	str	r2, [r3, #8]
 8006c38:	60da      	str	r2, [r3, #12]
 8006c3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a40      	ldr	r2, [pc, #256]	; (8006d44 <HAL_SPI_MspInit+0x120>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d130      	bne.n	8006ca8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006c46:	4b40      	ldr	r3, [pc, #256]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c50:	6453      	str	r3, [r2, #68]	; 0x44
 8006c52:	4b3d      	ldr	r3, [pc, #244]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c5e:	4b3a      	ldr	r3, [pc, #232]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	4a39      	ldr	r2, [pc, #228]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006c64:	f043 0310 	orr.w	r3, r3, #16
 8006c68:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6a:	4b37      	ldr	r3, [pc, #220]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8006c76:	2364      	movs	r3, #100	; 0x64
 8006c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c82:	2303      	movs	r3, #3
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006c86:	2305      	movs	r3, #5
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c8a:	f107 031c 	add.w	r3, r7, #28
 8006c8e:	4619      	mov	r1, r3
 8006c90:	482e      	ldr	r0, [pc, #184]	; (8006d4c <HAL_SPI_MspInit+0x128>)
 8006c92:	f002 facb 	bl	800922c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2105      	movs	r1, #5
 8006c9a:	2054      	movs	r0, #84	; 0x54
 8006c9c:	f001 fe92 	bl	80089c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8006ca0:	2054      	movs	r0, #84	; 0x54
 8006ca2:	f001 feab 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006ca6:	e049      	b.n	8006d3c <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <HAL_SPI_MspInit+0x12c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d144      	bne.n	8006d3c <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	4a24      	ldr	r2, [pc, #144]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cca:	4b1f      	ldr	r3, [pc, #124]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ce2:	4b19      	ldr	r3, [pc, #100]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006ce8:	f043 0320 	orr.w	r3, r3, #32
 8006cec:	6313      	str	r3, [r2, #48]	; 0x30
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <HAL_SPI_MspInit+0x124>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8006cfa:	23e0      	movs	r3, #224	; 0xe0
 8006cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d06:	2303      	movs	r3, #3
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006d0a:	2305      	movs	r3, #5
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006d0e:	f107 031c 	add.w	r3, r7, #28
 8006d12:	4619      	mov	r1, r3
 8006d14:	480f      	ldr	r0, [pc, #60]	; (8006d54 <HAL_SPI_MspInit+0x130>)
 8006d16:	f002 fa89 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8006d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d20:	2302      	movs	r3, #2
 8006d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006d2c:	2305      	movs	r3, #5
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8006d30:	f107 031c 	add.w	r3, r7, #28
 8006d34:	4619      	mov	r1, r3
 8006d36:	4808      	ldr	r0, [pc, #32]	; (8006d58 <HAL_SPI_MspInit+0x134>)
 8006d38:	f002 fa78 	bl	800922c <HAL_GPIO_Init>
}
 8006d3c:	bf00      	nop
 8006d3e:	3730      	adds	r7, #48	; 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40013400 	.word	0x40013400
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	40015000 	.word	0x40015000
 8006d54:	40021c00 	.word	0x40021c00
 8006d58:	40021400 	.word	0x40021400

08006d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <HAL_TIM_Base_MspInit+0x5c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10c      	bne.n	8006d88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <HAL_TIM_Base_MspInit+0x60>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <HAL_TIM_Base_MspInit+0x60>)
 8006d74:	f043 0304 	orr.w	r3, r3, #4
 8006d78:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <HAL_TIM_Base_MspInit+0x60>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006d86:	e010      	b.n	8006daa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a0c      	ldr	r2, [pc, #48]	; (8006dc0 <HAL_TIM_Base_MspInit+0x64>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10b      	bne.n	8006daa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <HAL_TIM_Base_MspInit+0x60>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <HAL_TIM_Base_MspInit+0x60>)
 8006d98:	f043 0308 	orr.w	r3, r3, #8
 8006d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_TIM_Base_MspInit+0x60>)
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40000800 	.word	0x40000800
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	40000c00 	.word	0x40000c00

08006dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	; 0x28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dcc:	f107 0314 	add.w	r3, r7, #20
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	609a      	str	r2, [r3, #8]
 8006dd8:	60da      	str	r2, [r3, #12]
 8006dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <HAL_TIM_MspPostInit+0xa8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d11c      	bne.n	8006e20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <HAL_TIM_MspPostInit+0xac>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <HAL_TIM_MspPostInit+0xac>)
 8006dec:	f043 0302 	orr.w	r3, r3, #2
 8006df0:	6313      	str	r3, [r2, #48]	; 0x30
 8006df2:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <HAL_TIM_MspPostInit+0xac>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e02:	2302      	movs	r3, #2
 8006e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8006e12:	f107 0314 	add.w	r3, r7, #20
 8006e16:	4619      	mov	r1, r3
 8006e18:	4816      	ldr	r0, [pc, #88]	; (8006e74 <HAL_TIM_MspPostInit+0xb0>)
 8006e1a:	f002 fa07 	bl	800922c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006e1e:	e021      	b.n	8006e64 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_TIM_MspPostInit+0xb4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d11c      	bne.n	8006e64 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e2a:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <HAL_TIM_MspPostInit+0xac>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <HAL_TIM_MspPostInit+0xac>)
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	6313      	str	r3, [r2, #48]	; 0x30
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <HAL_TIM_MspPostInit+0xac>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8006e42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e50:	2300      	movs	r3, #0
 8006e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006e54:	2302      	movs	r3, #2
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4807      	ldr	r0, [pc, #28]	; (8006e7c <HAL_TIM_MspPostInit+0xb8>)
 8006e60:	f002 f9e4 	bl	800922c <HAL_GPIO_Init>
}
 8006e64:	bf00      	nop
 8006e66:	3728      	adds	r7, #40	; 0x28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40020400 	.word	0x40020400
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40021c00 	.word	0x40021c00

08006e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	; 0x38
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a9b      	ldr	r2, [pc, #620]	; (800710c <HAL_UART_MspInit+0x28c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d158      	bne.n	8006f54 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006ea2:	4b9b      	ldr	r3, [pc, #620]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	4a9a      	ldr	r2, [pc, #616]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eac:	6413      	str	r3, [r2, #64]	; 0x40
 8006eae:	4b98      	ldr	r3, [pc, #608]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eb6:	623b      	str	r3, [r7, #32]
 8006eb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eba:	4b95      	ldr	r3, [pc, #596]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	4a94      	ldr	r2, [pc, #592]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec6:	4b92      	ldr	r3, [pc, #584]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8006ed2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eec:	4619      	mov	r1, r3
 8006eee:	4889      	ldr	r0, [pc, #548]	; (8007114 <HAL_UART_MspInit+0x294>)
 8006ef0:	f002 f99c 	bl	800922c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006ef4:	4b88      	ldr	r3, [pc, #544]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006ef6:	4a89      	ldr	r2, [pc, #548]	; (800711c <HAL_UART_MspInit+0x29c>)
 8006ef8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006efa:	4b87      	ldr	r3, [pc, #540]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006efc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f00:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f02:	4b85      	ldr	r3, [pc, #532]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f08:	4b83      	ldr	r3, [pc, #524]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f0e:	4b82      	ldr	r3, [pc, #520]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f14:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f16:	4b80      	ldr	r3, [pc, #512]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f1c:	4b7e      	ldr	r3, [pc, #504]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8006f22:	4b7d      	ldr	r3, [pc, #500]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f28:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f30:	4b79      	ldr	r3, [pc, #484]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006f36:	4878      	ldr	r0, [pc, #480]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f38:	f001 fd6e 	bl	8008a18 <HAL_DMA_Init>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8006f42:	f7fe f9d3 	bl	80052ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a73      	ldr	r2, [pc, #460]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006f4c:	4a72      	ldr	r2, [pc, #456]	; (8007118 <HAL_UART_MspInit+0x298>)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8006f52:	e0d6      	b.n	8007102 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART5)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a71      	ldr	r2, [pc, #452]	; (8007120 <HAL_UART_MspInit+0x2a0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d174      	bne.n	8007048 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	4a6b      	ldr	r2, [pc, #428]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f68:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6a:	4b69      	ldr	r3, [pc, #420]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f76:	4b66      	ldr	r3, [pc, #408]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	4a65      	ldr	r2, [pc, #404]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f7c:	f043 0304 	orr.w	r3, r3, #4
 8006f80:	6313      	str	r3, [r2, #48]	; 0x30
 8006f82:	4b63      	ldr	r3, [pc, #396]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f8e:	4b60      	ldr	r3, [pc, #384]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	4a5f      	ldr	r2, [pc, #380]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f94:	f043 0308 	orr.w	r3, r3, #8
 8006f98:	6313      	str	r3, [r2, #48]	; 0x30
 8006f9a:	4b5d      	ldr	r3, [pc, #372]	; (8007110 <HAL_UART_MspInit+0x290>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8006fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fac:	2302      	movs	r3, #2
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006fb8:	2308      	movs	r3, #8
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4854      	ldr	r0, [pc, #336]	; (8007114 <HAL_UART_MspInit+0x294>)
 8006fc4:	f002 f932 	bl	800922c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8006fc8:	2304      	movs	r3, #4
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006fd8:	2308      	movs	r3, #8
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8006fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4850      	ldr	r0, [pc, #320]	; (8007124 <HAL_UART_MspInit+0x2a4>)
 8006fe4:	f002 f922 	bl	800922c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006fe8:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8006fea:	4a50      	ldr	r2, [pc, #320]	; (800712c <HAL_UART_MspInit+0x2ac>)
 8006fec:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006fee:	4b4e      	ldr	r3, [pc, #312]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8006ff0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ff4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ff6:	4b4c      	ldr	r3, [pc, #304]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ffc:	4b4a      	ldr	r3, [pc, #296]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007002:	4b49      	ldr	r3, [pc, #292]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8007004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007008:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800700a:	4b47      	ldr	r3, [pc, #284]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 800700c:	2200      	movs	r2, #0
 800700e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007010:	4b45      	ldr	r3, [pc, #276]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8007012:	2200      	movs	r2, #0
 8007014:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007016:	4b44      	ldr	r3, [pc, #272]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8007018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800701c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800701e:	4b42      	ldr	r3, [pc, #264]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8007020:	2200      	movs	r2, #0
 8007022:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007024:	4b40      	ldr	r3, [pc, #256]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8007026:	2200      	movs	r2, #0
 8007028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800702a:	483f      	ldr	r0, [pc, #252]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 800702c:	f001 fcf4 	bl	8008a18 <HAL_DMA_Init>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8007036:	f7fe f959 	bl	80052ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a3a      	ldr	r2, [pc, #232]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 800703e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007040:	4a39      	ldr	r2, [pc, #228]	; (8007128 <HAL_UART_MspInit+0x2a8>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007046:	e05c      	b.n	8007102 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART7)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a38      	ldr	r2, [pc, #224]	; (8007130 <HAL_UART_MspInit+0x2b0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d157      	bne.n	8007102 <HAL_UART_MspInit+0x282>
    __HAL_RCC_UART7_CLK_ENABLE();
 8007052:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <HAL_UART_MspInit+0x290>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a2e      	ldr	r2, [pc, #184]	; (8007110 <HAL_UART_MspInit+0x290>)
 8007058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b2c      	ldr	r3, [pc, #176]	; (8007110 <HAL_UART_MspInit+0x290>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800706a:	4b29      	ldr	r3, [pc, #164]	; (8007110 <HAL_UART_MspInit+0x290>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	4a28      	ldr	r2, [pc, #160]	; (8007110 <HAL_UART_MspInit+0x290>)
 8007070:	f043 0310 	orr.w	r3, r3, #16
 8007074:	6313      	str	r3, [r2, #48]	; 0x30
 8007076:	4b26      	ldr	r3, [pc, #152]	; (8007110 <HAL_UART_MspInit+0x290>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8007082:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007088:	2302      	movs	r3, #2
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708c:	2300      	movs	r3, #0
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007090:	2303      	movs	r3, #3
 8007092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007094:	2308      	movs	r3, #8
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800709c:	4619      	mov	r1, r3
 800709e:	4825      	ldr	r0, [pc, #148]	; (8007134 <HAL_UART_MspInit+0x2b4>)
 80070a0:	f002 f8c4 	bl	800922c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80070a4:	4b24      	ldr	r3, [pc, #144]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070a6:	4a25      	ldr	r2, [pc, #148]	; (800713c <HAL_UART_MspInit+0x2bc>)
 80070a8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80070aa:	4b23      	ldr	r3, [pc, #140]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070ac:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80070b0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070b2:	4b21      	ldr	r3, [pc, #132]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070b8:	4b1f      	ldr	r3, [pc, #124]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070be:	4b1e      	ldr	r3, [pc, #120]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070c4:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070c6:	4b1c      	ldr	r3, [pc, #112]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070cc:	4b1a      	ldr	r3, [pc, #104]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80070d2:	4b19      	ldr	r3, [pc, #100]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070d8:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070da:	4b17      	ldr	r3, [pc, #92]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070dc:	2200      	movs	r2, #0
 80070de:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070e0:	4b15      	ldr	r3, [pc, #84]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80070e6:	4814      	ldr	r0, [pc, #80]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070e8:	f001 fc96 	bl	8008a18 <HAL_DMA_Init>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_UART_MspInit+0x276>
      Error_Handler();
 80070f2:	f7fe f8fb 	bl	80052ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a0f      	ldr	r2, [pc, #60]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80070fc:	4a0e      	ldr	r2, [pc, #56]	; (8007138 <HAL_UART_MspInit+0x2b8>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007102:	bf00      	nop
 8007104:	3738      	adds	r7, #56	; 0x38
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40004c00 	.word	0x40004c00
 8007110:	40023800 	.word	0x40023800
 8007114:	40020800 	.word	0x40020800
 8007118:	20028bcc 	.word	0x20028bcc
 800711c:	40026040 	.word	0x40026040
 8007120:	40005000 	.word	0x40005000
 8007124:	40020c00 	.word	0x40020c00
 8007128:	20031134 	.word	0x20031134
 800712c:	40026010 	.word	0x40026010
 8007130:	40007800 	.word	0x40007800
 8007134:	40021000 	.word	0x40021000
 8007138:	2002bf48 	.word	0x2002bf48
 800713c:	40026058 	.word	0x40026058

08007140 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007148:	f107 0314 	add.w	r3, r7, #20
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007160:	d134      	bne.n	80071cc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	6313      	str	r3, [r2, #48]	; 0x30
 800716e:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800717a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800717e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007180:	2302      	movs	r3, #2
 8007182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	2300      	movs	r3, #0
 8007186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007188:	2303      	movs	r3, #3
 800718a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800718c:	230a      	movs	r3, #10
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4619      	mov	r1, r3
 8007196:	4810      	ldr	r0, [pc, #64]	; (80071d8 <HAL_PCD_MspInit+0x98>)
 8007198:	f002 f848 	bl	800922c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800719c:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 80071a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a6:	6353      	str	r3, [r2, #52]	; 0x34
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 80071ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071be:	6453      	str	r3, [r2, #68]	; 0x44
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <HAL_PCD_MspInit+0x94>)
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80071cc:	bf00      	nop
 80071ce:	3728      	adds	r7, #40	; 0x28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40023800 	.word	0x40023800
 80071d8:	40020000 	.word	0x40020000

080071dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	; 0x30
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80071ec:	2200      	movs	r2, #0
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	2036      	movs	r0, #54	; 0x36
 80071f2:	f001 fbe7 	bl	80089c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80071f6:	2036      	movs	r0, #54	; 0x36
 80071f8:	f001 fc00 	bl	80089fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80071fc:	4b1f      	ldr	r3, [pc, #124]	; (800727c <HAL_InitTick+0xa0>)
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_InitTick+0xa0>)
 8007202:	f043 0310 	orr.w	r3, r3, #16
 8007206:	6413      	str	r3, [r2, #64]	; 0x40
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <HAL_InitTick+0xa0>)
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007214:	f107 0210 	add.w	r2, r7, #16
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f003 ff84 	bl	800b12c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007224:	f003 ff5a 	bl	800b0dc <HAL_RCC_GetPCLK1Freq>
 8007228:	4603      	mov	r3, r0
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	4a13      	ldr	r2, [pc, #76]	; (8007280 <HAL_InitTick+0xa4>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	0c9b      	lsrs	r3, r3, #18
 8007238:	3b01      	subs	r3, #1
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800723c:	4b11      	ldr	r3, [pc, #68]	; (8007284 <HAL_InitTick+0xa8>)
 800723e:	4a12      	ldr	r2, [pc, #72]	; (8007288 <HAL_InitTick+0xac>)
 8007240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_InitTick+0xa8>)
 8007244:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007248:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800724a:	4a0e      	ldr	r2, [pc, #56]	; (8007284 <HAL_InitTick+0xa8>)
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <HAL_InitTick+0xa8>)
 8007252:	2200      	movs	r2, #0
 8007254:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <HAL_InitTick+0xa8>)
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800725c:	4809      	ldr	r0, [pc, #36]	; (8007284 <HAL_InitTick+0xa8>)
 800725e:	f005 f899 	bl	800c394 <HAL_TIM_Base_Init>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007268:	4806      	ldr	r0, [pc, #24]	; (8007284 <HAL_InitTick+0xa8>)
 800726a:	f005 f8bf 	bl	800c3ec <HAL_TIM_Base_Start_IT>
 800726e:	4603      	mov	r3, r0
 8007270:	e000      	b.n	8007274 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
}
 8007274:	4618      	mov	r0, r3
 8007276:	3730      	adds	r7, #48	; 0x30
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40023800 	.word	0x40023800
 8007280:	431bde83 	.word	0x431bde83
 8007284:	200311f0 	.word	0x200311f0
 8007288:	40001000 	.word	0x40001000

0800728c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007290:	e7fe      	b.n	8007290 <NMI_Handler+0x4>

08007292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007292:	b480      	push	{r7}
 8007294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007296:	e7fe      	b.n	8007296 <HardFault_Handler+0x4>

08007298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800729c:	e7fe      	b.n	800729c <MemManage_Handler+0x4>

0800729e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800729e:	b480      	push	{r7}
 80072a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072a2:	e7fe      	b.n	80072a2 <BusFault_Handler+0x4>

080072a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072a8:	e7fe      	b.n	80072a8 <UsageFault_Handler+0x4>

080072aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072ae:	bf00      	nop
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 80072be:	f000 fced 	bl	8007c9c <HAL_GetTick>
 80072c2:	4603      	mov	r3, r0
 80072c4:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <EXTI4_IRQHandler+0x50>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80072d0:	2010      	movs	r0, #16
 80072d2:	f002 f9a3 	bl	800961c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <EXTI4_IRQHandler+0x54>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <EXTI4_IRQHandler+0x58>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	dd07      	ble.n	80072f4 <EXTI4_IRQHandler+0x3c>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b96      	cmp	r3, #150	; 0x96
 80072e8:	dd04      	ble.n	80072f4 <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 80072ea:	4b09      	ldr	r3, [pc, #36]	; (8007310 <EXTI4_IRQHandler+0x58>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <EXTI4_IRQHandler+0x54>)
 80072f2:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 80072f4:	f000 fcd2 	bl	8007c9c <HAL_GetTick>
 80072f8:	4603      	mov	r3, r0
 80072fa:	461a      	mov	r2, r3
 80072fc:	4b02      	ldr	r3, [pc, #8]	; (8007308 <EXTI4_IRQHandler+0x50>)
 80072fe:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20003434 	.word	0x20003434
 800730c:	200000b8 	.word	0x200000b8
 8007310:	20000138 	.word	0x20000138

08007314 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007318:	4802      	ldr	r0, [pc, #8]	; (8007324 <DMA1_Stream0_IRQHandler+0x10>)
 800731a:	f001 fd1d 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20031134 	.word	0x20031134

08007328 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800732c:	4802      	ldr	r0, [pc, #8]	; (8007338 <DMA1_Stream2_IRQHandler+0x10>)
 800732e:	f001 fd13 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007332:	bf00      	nop
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20028bcc 	.word	0x20028bcc

0800733c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8007340:	4802      	ldr	r0, [pc, #8]	; (800734c <DMA1_Stream3_IRQHandler+0x10>)
 8007342:	f001 fd09 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007346:	bf00      	nop
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	2002bf48 	.word	0x2002bf48

08007350 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8007354:	4805      	ldr	r0, [pc, #20]	; (800736c <ADC_IRQHandler+0x1c>)
 8007356:	f000 fd15 	bl	8007d84 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <ADC_IRQHandler+0x20>)
 800735c:	f000 fd12 	bl	8007d84 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8007360:	4804      	ldr	r0, [pc, #16]	; (8007374 <ADC_IRQHandler+0x24>)
 8007362:	f000 fd0f 	bl	8007d84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	2002bf00 	.word	0x2002bf00
 8007370:	20028dfc 	.word	0x20028dfc
 8007374:	2002bfac 	.word	0x2002bfac

08007378 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 800737e:	f000 fc8d 	bl	8007c9c <HAL_GetTick>
 8007382:	4603      	mov	r3, r0
 8007384:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 8007386:	4b2c      	ldr	r3, [pc, #176]	; (8007438 <EXTI9_5_IRQHandler+0xc0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	603b      	str	r3, [r7, #0]
	//buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
	//buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
	//buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 8007390:	4b2a      	ldr	r3, [pc, #168]	; (800743c <EXTI9_5_IRQHandler+0xc4>)
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00f      	beq.n	80073bc <EXTI9_5_IRQHandler+0x44>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b96      	cmp	r3, #150	; 0x96
 80073a0:	dd0c      	ble.n	80073bc <EXTI9_5_IRQHandler+0x44>
		if(inputButtonSet > buttonPriority.up){
 80073a2:	4b27      	ldr	r3, [pc, #156]	; (8007440 <EXTI9_5_IRQHandler+0xc8>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	4b26      	ldr	r3, [pc, #152]	; (8007444 <EXTI9_5_IRQHandler+0xcc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	dd30      	ble.n	8007412 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 80073b0:	4b24      	ldr	r3, [pc, #144]	; (8007444 <EXTI9_5_IRQHandler+0xcc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	4b22      	ldr	r3, [pc, #136]	; (8007440 <EXTI9_5_IRQHandler+0xc8>)
 80073b8:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 80073ba:	e02a      	b.n	8007412 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 80073bc:	4b1f      	ldr	r3, [pc, #124]	; (800743c <EXTI9_5_IRQHandler+0xc4>)
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00f      	beq.n	80073e8 <EXTI9_5_IRQHandler+0x70>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b96      	cmp	r3, #150	; 0x96
 80073cc:	dd0c      	ble.n	80073e8 <EXTI9_5_IRQHandler+0x70>
		if(inputButtonSet > buttonPriority.sel){
 80073ce:	4b1c      	ldr	r3, [pc, #112]	; (8007440 <EXTI9_5_IRQHandler+0xc8>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <EXTI9_5_IRQHandler+0xcc>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	429a      	cmp	r2, r3
 80073da:	dd1a      	ble.n	8007412 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <EXTI9_5_IRQHandler+0xcc>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <EXTI9_5_IRQHandler+0xc8>)
 80073e4:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 80073e6:	e014      	b.n	8007412 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <EXTI9_5_IRQHandler+0xc4>)
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00e      	beq.n	8007412 <EXTI9_5_IRQHandler+0x9a>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b96      	cmp	r3, #150	; 0x96
 80073f8:	dd0b      	ble.n	8007412 <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 80073fa:	4b11      	ldr	r3, [pc, #68]	; (8007440 <EXTI9_5_IRQHandler+0xc8>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <EXTI9_5_IRQHandler+0xcc>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	dd04      	ble.n	8007412 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 8007408:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <EXTI9_5_IRQHandler+0xcc>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	b2da      	uxtb	r2, r3
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <EXTI9_5_IRQHandler+0xc8>)
 8007410:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007412:	2020      	movs	r0, #32
 8007414:	f002 f902 	bl	800961c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007418:	2040      	movs	r0, #64	; 0x40
 800741a:	f002 f8ff 	bl	800961c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800741e:	2080      	movs	r0, #128	; 0x80
 8007420:	f002 f8fc 	bl	800961c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 8007424:	f000 fc3a 	bl	8007c9c <HAL_GetTick>
 8007428:	4603      	mov	r3, r0
 800742a:	461a      	mov	r2, r3
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <EXTI9_5_IRQHandler+0xc0>)
 800742e:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20003434 	.word	0x20003434
 800743c:	40013c00 	.word	0x40013c00
 8007440:	200000b8 	.word	0x200000b8
 8007444:	20000138 	.word	0x20000138

08007448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800744c:	4802      	ldr	r0, [pc, #8]	; (8007458 <TIM6_DAC_IRQHandler+0x10>)
 800744e:	f005 f82c 	bl	800c4aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007452:	bf00      	nop
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200311f0 	.word	0x200311f0

0800745c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007460:	4805      	ldr	r0, [pc, #20]	; (8007478 <DMA2_Stream0_IRQHandler+0x1c>)
 8007462:	f001 fc79 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 8007466:	4805      	ldr	r0, [pc, #20]	; (800747c <DMA2_Stream0_IRQHandler+0x20>)
 8007468:	f000 febc 	bl	80081e4 <HAL_ADC_Stop_DMA>
  adcStates.adcBank1Finished=1;
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <DMA2_Stream0_IRQHandler+0x24>)
 800746e:	2201      	movs	r2, #1
 8007470:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	2002c0c0 	.word	0x2002c0c0
 800747c:	2002bf00 	.word	0x2002bf00
 8007480:	20003324 	.word	0x20003324

08007484 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007488:	4805      	ldr	r0, [pc, #20]	; (80074a0 <DMA2_Stream1_IRQHandler+0x1c>)
 800748a:	f001 fc65 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 800748e:	4805      	ldr	r0, [pc, #20]	; (80074a4 <DMA2_Stream1_IRQHandler+0x20>)
 8007490:	f000 fea8 	bl	80081e4 <HAL_ADC_Stop_DMA>
  adcStates.adcBank3Finished=1;
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <DMA2_Stream1_IRQHandler+0x24>)
 8007496:	2201      	movs	r2, #1
 8007498:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800749a:	bf00      	nop
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200292e0 	.word	0x200292e0
 80074a4:	2002bfac 	.word	0x2002bfac
 80074a8:	20003324 	.word	0x20003324

080074ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <DMA2_Stream2_IRQHandler+0x1c>)
 80074b2:	f001 fc51 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 80074b6:	4805      	ldr	r0, [pc, #20]	; (80074cc <DMA2_Stream2_IRQHandler+0x20>)
 80074b8:	f000 fe94 	bl	80081e4 <HAL_ADC_Stop_DMA>
  adcStates.adcBank2Finished=1;
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <DMA2_Stream2_IRQHandler+0x24>)
 80074be:	2201      	movs	r2, #1
 80074c0:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80074c2:	bf00      	nop
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200310d4 	.word	0x200310d4
 80074cc:	20028dfc 	.word	0x20028dfc
 80074d0:	20003324 	.word	0x20003324

080074d4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <SPI4_IRQHandler+0x10>)
 80074da:	f004 fd1f 	bl	800bf1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20028b68 	.word	0x20028b68

080074e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
	return 1;
 80074ec:	2301      	movs	r3, #1
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <_kill>:

int _kill(int pid, int sig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007502:	f00e fb2d 	bl	8015b60 <__errno>
 8007506:	4603      	mov	r3, r0
 8007508:	2216      	movs	r2, #22
 800750a:	601a      	str	r2, [r3, #0]
	return -1;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <_exit>:

void _exit (int status)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007520:	f04f 31ff 	mov.w	r1, #4294967295
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ffe7 	bl	80074f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800752a:	e7fe      	b.n	800752a <_exit+0x12>

0800752c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e00a      	b.n	8007554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800753e:	f3af 8000 	nop.w
 8007542:	4601      	mov	r1, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	60ba      	str	r2, [r7, #8]
 800754a:	b2ca      	uxtb	r2, r1
 800754c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	3301      	adds	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	dbf0      	blt.n	800753e <_read+0x12>
	}

return len;
 800755c:	687b      	ldr	r3, [r7, #4]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	e009      	b.n	800758c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	60ba      	str	r2, [r7, #8]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f7fb ffdf 	bl	8003544 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3301      	adds	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	dbf1      	blt.n	8007578 <_write+0x12>
	}
	return len;
 8007594:	687b      	ldr	r3, [r7, #4]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <_close>:

int _close(int file)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
	return -1;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075c6:	605a      	str	r2, [r3, #4]
	return 0;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <_isatty>:

int _isatty(int file)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
	return 1;
 80075de:	2301      	movs	r3, #1
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
	return 0;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007610:	4a14      	ldr	r2, [pc, #80]	; (8007664 <_sbrk+0x5c>)
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <_sbrk+0x60>)
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800761c:	4b13      	ldr	r3, [pc, #76]	; (800766c <_sbrk+0x64>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <_sbrk+0x64>)
 8007626:	4a12      	ldr	r2, [pc, #72]	; (8007670 <_sbrk+0x68>)
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <_sbrk+0x64>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4413      	add	r3, r2
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	429a      	cmp	r2, r3
 8007636:	d207      	bcs.n	8007648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007638:	f00e fa92 	bl	8015b60 <__errno>
 800763c:	4603      	mov	r3, r0
 800763e:	220c      	movs	r2, #12
 8007640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007642:	f04f 33ff 	mov.w	r3, #4294967295
 8007646:	e009      	b.n	800765c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <_sbrk+0x64>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800764e:	4b07      	ldr	r3, [pc, #28]	; (800766c <_sbrk+0x64>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	4a05      	ldr	r2, [pc, #20]	; (800766c <_sbrk+0x64>)
 8007658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20080000 	.word	0x20080000
 8007668:	00000400 	.word	0x00000400
 800766c:	20003438 	.word	0x20003438
 8007670:	20031288 	.word	0x20031288

08007674 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007678:	4b08      	ldr	r3, [pc, #32]	; (800769c <SystemInit+0x28>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <SystemInit+0x28>)
 8007680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <SystemInit+0x28>)
 800768a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800768e:	609a      	str	r2, [r3, #8]
#endif
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	e000ed00 	.word	0xe000ed00

080076a0 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 80076a4:	220c      	movs	r2, #12
 80076a6:	2100      	movs	r1, #0
 80076a8:	4814      	ldr	r0, [pc, #80]	; (80076fc <zionEEPROMPresence+0x5c>)
 80076aa:	f00e fa91 	bl	8015bd0 <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 80076ae:	2364      	movs	r3, #100	; 0x64
 80076b0:	2202      	movs	r2, #2
 80076b2:	21a6      	movs	r1, #166	; 0xa6
 80076b4:	4812      	ldr	r0, [pc, #72]	; (8007700 <zionEEPROMPresence+0x60>)
 80076b6:	f002 fb69 	bl	8009d8c <HAL_I2C_IsDeviceReady>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 80076c0:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <zionEEPROMPresence+0x5c>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 80076c6:	2364      	movs	r3, #100	; 0x64
 80076c8:	2202      	movs	r2, #2
 80076ca:	21a8      	movs	r1, #168	; 0xa8
 80076cc:	480c      	ldr	r0, [pc, #48]	; (8007700 <zionEEPROMPresence+0x60>)
 80076ce:	f002 fb5d 	bl	8009d8c <HAL_I2C_IsDeviceReady>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 80076d8:	4b08      	ldr	r3, [pc, #32]	; (80076fc <zionEEPROMPresence+0x5c>)
 80076da:	2201      	movs	r2, #1
 80076dc:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 80076de:	2364      	movs	r3, #100	; 0x64
 80076e0:	2202      	movs	r2, #2
 80076e2:	21aa      	movs	r1, #170	; 0xaa
 80076e4:	4806      	ldr	r0, [pc, #24]	; (8007700 <zionEEPROMPresence+0x60>)
 80076e6:	f002 fb51 	bl	8009d8c <HAL_I2C_IsDeviceReady>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <zionEEPROMPresence+0x5c>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 80076f6:	4b01      	ldr	r3, [pc, #4]	; (80076fc <zionEEPROMPresence+0x5c>)
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	2000343c 	.word	0x2000343c
 8007700:	20028c78 	.word	0x20028c78

08007704 <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af04      	add	r7, sp, #16
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	72fb      	strb	r3, [r7, #11]
 8007712:	4613      	mov	r3, r2
 8007714:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	b299      	uxth	r1, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	b29b      	uxth	r3, r3
 800771e:	8b3a      	ldrh	r2, [r7, #24]
 8007720:	8938      	ldrh	r0, [r7, #8]
 8007722:	9202      	str	r2, [sp, #8]
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	2302      	movs	r3, #2
 800772c:	4602      	mov	r2, r0
 800772e:	4803      	ldr	r0, [pc, #12]	; (800773c <readDataFromEEPROM+0x38>)
 8007730:	f002 fa12 	bl	8009b58 <HAL_I2C_Mem_Read>
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20028c78 	.word	0x20028c78

08007740 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	b0a7      	sub	sp, #156	; 0x9c
 8007744:	af02      	add	r7, sp, #8
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
 800774a:	466b      	mov	r3, sp
 800774c:	461e      	mov	r6, r3
	int foundTheEnd = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 800775a:	2364      	movs	r3, #100	; 0x64
 800775c:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 800775e:	2306      	movs	r3, #6
 8007760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 8007764:	2300      	movs	r3, #0
 8007766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 800776a:	2300      	movs	r3, #0
 800776c:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 800776e:	2300      	movs	r3, #0
 8007770:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8007776:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007778:	1e63      	subs	r3, r4, #1
 800777a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800777c:	4623      	mov	r3, r4
 800777e:	4618      	mov	r0, r3
 8007780:	f04f 0100 	mov.w	r1, #0
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	00cb      	lsls	r3, r1, #3
 800778e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007792:	00c2      	lsls	r2, r0, #3
 8007794:	4623      	mov	r3, r4
 8007796:	4618      	mov	r0, r3
 8007798:	f04f 0100 	mov.w	r1, #0
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	00cb      	lsls	r3, r1, #3
 80077a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80077aa:	00c2      	lsls	r2, r0, #3
 80077ac:	4623      	mov	r3, r4
 80077ae:	3307      	adds	r3, #7
 80077b0:	08db      	lsrs	r3, r3, #3
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	ebad 0d03 	sub.w	sp, sp, r3
 80077b8:	ab02      	add	r3, sp, #8
 80077ba:	3300      	adds	r3, #0
 80077bc:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 80077be:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80077c0:	1e6b      	subs	r3, r5, #1
 80077c2:	667b      	str	r3, [r7, #100]	; 0x64
 80077c4:	462b      	mov	r3, r5
 80077c6:	4618      	mov	r0, r3
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	00cb      	lsls	r3, r1, #3
 80077d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80077da:	00c2      	lsls	r2, r0, #3
 80077dc:	462b      	mov	r3, r5
 80077de:	4618      	mov	r0, r3
 80077e0:	f04f 0100 	mov.w	r1, #0
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	00cb      	lsls	r3, r1, #3
 80077ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80077f2:	00c2      	lsls	r2, r0, #3
 80077f4:	462b      	mov	r3, r5
 80077f6:	3307      	adds	r3, #7
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	ebad 0d03 	sub.w	sp, sp, r3
 8007800:	ab02      	add	r3, sp, #8
 8007802:	3300      	adds	r3, #0
 8007804:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8007806:	f107 0308 	add.w	r3, r7, #8
 800780a:	2250      	movs	r2, #80	; 0x50
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f00e f9de 	bl	8015bd0 <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 8007814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007816:	462a      	mov	r2, r5
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f00e f9d8 	bl	8015bd0 <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8007820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007822:	4622      	mov	r2, r4
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f00e f9d2 	bl	8015bd0 <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 800782c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800782e:	79f9      	ldrb	r1, [r7, #7]
 8007830:	2364      	movs	r3, #100	; 0x64
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4623      	mov	r3, r4
 8007836:	2200      	movs	r2, #0
 8007838:	f7ff ff64 	bl	8007704 <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 800783c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2bff      	cmp	r3, #255	; 0xff
 8007842:	f040 811b 	bne.w	8007a7c <parseZionEEPROM+0x33c>
		foundTheEnd=1;
 8007846:	2301      	movs	r3, #1
 8007848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 800784c:	f06f 0301 	mvn.w	r3, #1
 8007850:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 8007852:	e113      	b.n	8007a7c <parseZionEEPROM+0x33c>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 8007854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007856:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007858:	fb93 f2f2 	sdiv	r2, r3, r2
 800785c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800785e:	fb01 f202 	mul.w	r2, r1, r2
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2da      	uxtb	r2, r3
 800786e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007870:	2b00      	cmp	r3, #0
 8007872:	bfcc      	ite	gt
 8007874:	2301      	movgt	r3, #1
 8007876:	2300      	movle	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	4013      	ands	r3, r2
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d025      	beq.n	80078ce <parseZionEEPROM+0x18e>
			for(x=0;x<size;x++){
 8007882:	2300      	movs	r3, #0
 8007884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007888:	e00f      	b.n	80078aa <parseZionEEPROM+0x16a>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 800788a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800788c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007890:	4413      	add	r3, r2
 8007892:	7819      	ldrb	r1, [r3, #0]
 8007894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800789a:	4413      	add	r3, r2
 800789c:	460a      	mov	r2, r1
 800789e:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 80078a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078a4:	3301      	adds	r3, #1
 80078a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80078ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b0:	429a      	cmp	r2, r3
 80078b2:	dbea      	blt.n	800788a <parseZionEEPROM+0x14a>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 80078b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80078b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	79f9      	ldrb	r1, [r7, #7]
 80078bc:	2364      	movs	r3, #100	; 0x64
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4623      	mov	r3, r4
 80078c2:	f7ff ff1f 	bl	8007704 <readDataFromEEPROM>
			indexSubtractor+=size;
 80078c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80078c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ca:	4413      	add	r3, r2
 80078cc:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 80078ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2bff      	cmp	r3, #255	; 0xff
 80078d4:	d116      	bne.n	8007904 <parseZionEEPROM+0x1c4>
 80078d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	d112      	bne.n	8007904 <parseZionEEPROM+0x1c4>
 80078de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e0:	789b      	ldrb	r3, [r3, #2]
 80078e2:	2bff      	cmp	r3, #255	; 0xff
 80078e4:	d10e      	bne.n	8007904 <parseZionEEPROM+0x1c4>
 80078e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e8:	78db      	ldrb	r3, [r3, #3]
 80078ea:	2bff      	cmp	r3, #255	; 0xff
 80078ec:	d10a      	bne.n	8007904 <parseZionEEPROM+0x1c4>
 80078ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	2bff      	cmp	r3, #255	; 0xff
 80078f4:	d106      	bne.n	8007904 <parseZionEEPROM+0x1c4>
			previousByteOfHeader[0]=-1;
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 80078fc:	2301      	movs	r3, #1
 80078fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007902:	e0b8      	b.n	8007a76 <parseZionEEPROM+0x336>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 8007904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800790c:	5cd3      	ldrb	r3, [r2, r3]
 800790e:	2b5a      	cmp	r3, #90	; 0x5a
 8007910:	d023      	beq.n	800795a <parseZionEEPROM+0x21a>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007916:	fb93 f2f2 	sdiv	r2, r3, r2
 800791a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800791c:	fb01 f202 	mul.w	r2, r1, r2
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007924:	5cd3      	ldrb	r3, [r2, r3]
 8007926:	2b5a      	cmp	r3, #90	; 0x5a
 8007928:	d104      	bne.n	8007934 <parseZionEEPROM+0x1f4>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3313      	adds	r3, #19
 800792e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007930:	429a      	cmp	r2, r3
 8007932:	dd12      	ble.n	800795a <parseZionEEPROM+0x21a>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007938:	fb93 f2f2 	sdiv	r2, r3, r2
 800793c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800793e:	fb01 f202 	mul.w	r2, r1, r2
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007946:	5cd3      	ldrb	r3, [r2, r3]
 8007948:	2b5a      	cmp	r3, #90	; 0x5a
 800794a:	f040 8094 	bne.w	8007a76 <parseZionEEPROM+0x336>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3313      	adds	r3, #19
 8007952:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007954:	429a      	cmp	r2, r3
 8007956:	f300 808e 	bgt.w	8007a76 <parseZionEEPROM+0x336>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007960:	4313      	orrs	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf0c      	ite	eq
 8007966:	2301      	moveq	r3, #1
 8007968:	2300      	movne	r3, #0
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800796e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007970:	1acb      	subs	r3, r1, r3
 8007972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007974:	5ccb      	ldrb	r3, [r1, r3]
 8007976:	2b5a      	cmp	r3, #90	; 0x5a
 8007978:	bf0c      	ite	eq
 800797a:	2301      	moveq	r3, #1
 800797c:	2300      	movne	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4013      	ands	r3, r2
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <parseZionEEPROM+0x25a>
				previousByteOfHeader[0] = index;
 8007988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800798a:	60bb      	str	r3, [r7, #8]
				if(index==0){
 800798c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800798e:	2b00      	cmp	r3, #0
 8007990:	d171      	bne.n	8007a76 <parseZionEEPROM+0x336>
					zeroWas5A=1;
 8007992:	2301      	movs	r3, #1
 8007994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007998:	e06d      	b.n	8007a76 <parseZionEEPROM+0x336>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 800799a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d015      	beq.n	80079cc <parseZionEEPROM+0x28c>
				previousByteOfHeader[counter]=index;
 80079a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80079aa:	4413      	add	r3, r2
 80079ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ae:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 80079b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079b6:	2b13      	cmp	r3, #19
 80079b8:	d102      	bne.n	80079c0 <parseZionEEPROM+0x280>
					foundTheEnd=1;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 80079c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079c4:	3301      	adds	r3, #1
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079ca:	e054      	b.n	8007a76 <parseZionEEPROM+0x336>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 80079cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079d4:	5cd3      	ldrb	r3, [r2, r3]
 80079d6:	2b45      	cmp	r3, #69	; 0x45
 80079d8:	d102      	bne.n	80079e0 <parseZionEEPROM+0x2a0>
					previousByteOfHeader[1] = index;
 80079da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e04a      	b.n	8007a76 <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 80079e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079e8:	5cd3      	ldrb	r3, [r2, r3]
 80079ea:	2b46      	cmp	r3, #70	; 0x46
 80079ec:	d107      	bne.n	80079fe <parseZionEEPROM+0x2be>
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f2:	3b01      	subs	r3, #1
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d102      	bne.n	80079fe <parseZionEEPROM+0x2be>
					previousByteOfHeader[2] = index;
 80079f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	e03b      	b.n	8007a76 <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 80079fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d107      	bne.n	8007a1c <parseZionEEPROM+0x2dc>
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a10:	3b01      	subs	r3, #1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d102      	bne.n	8007a1c <parseZionEEPROM+0x2dc>
					previousByteOfHeader[3] = index;
 8007a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e02c      	b.n	8007a76 <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8007a1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a24:	5cd3      	ldrb	r3, [r2, r3]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d107      	bne.n	8007a3a <parseZionEEPROM+0x2fa>
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d102      	bne.n	8007a3a <parseZionEEPROM+0x2fa>
					previousByteOfHeader[4] = index;
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e01d      	b.n	8007a76 <parseZionEEPROM+0x336>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8007a3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a42:	5cd3      	ldrb	r3, [r2, r3]
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d109      	bne.n	8007a5c <parseZionEEPROM+0x31c>
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d104      	bne.n	8007a5c <parseZionEEPROM+0x31c>
					previousByteOfHeader[5] = index;
 8007a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a54:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 8007a56:	2301      	movs	r3, #1
 8007a58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a5a:	e00c      	b.n	8007a76 <parseZionEEPROM+0x336>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8007a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <parseZionEEPROM+0x336>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	2250      	movs	r2, #80	; 0x50
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f00e f8b0 	bl	8015bd0 <memset>
					zeroWas5A=0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 8007a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a78:	3301      	adds	r3, #1
 8007a7a:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 8007a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f43f aee7 	beq.w	8007854 <parseZionEEPROM+0x114>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f2c0 8085 	blt.w	8007b98 <parseZionEEPROM+0x458>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 8007a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a92:	fb93 f2f2 	sdiv	r2, r3, r2
 8007a96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007a98:	fb01 f202 	mul.w	r2, r1, r2
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8007aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aa2:	3b04      	subs	r3, #4
 8007aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	db50      	blt.n	8007b4c <parseZionEEPROM+0x40c>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8007aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aac:	1e5a      	subs	r2, r3, #1
 8007aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007aba:	e01c      	b.n	8007af6 <parseZionEEPROM+0x3b6>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 8007abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007ac8:	4413      	add	r3, r2
 8007aca:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007ace:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ad0:	fb93 f2f2 	sdiv	r2, r3, r2
 8007ad4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007ad6:	fb01 f202 	mul.w	r2, r1, r2
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ade:	5cd3      	ldrb	r3, [r2, r3]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4a48      	ldr	r2, [pc, #288]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8007aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af0:	3301      	adds	r3, #1
 8007af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007af6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007afc:	429a      	cmp	r2, r3
 8007afe:	dbdd      	blt.n	8007abc <parseZionEEPROM+0x37c>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8007b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b06:	e01c      	b.n	8007b42 <parseZionEEPROM+0x402>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8007b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007b14:	4413      	add	r3, r2
 8007b16:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007b1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b1c:	fb93 f2f2 	sdiv	r2, r3, r2
 8007b20:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007b22:	fb01 f202 	mul.w	r2, r1, r2
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b2a:	5cd3      	ldrb	r3, [r2, r3]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4a35      	ldr	r2, [pc, #212]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 8007b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	ddde      	ble.n	8007b08 <parseZionEEPROM+0x3c8>
 8007b4a:	e052      	b.n	8007bf2 <parseZionEEPROM+0x4b2>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b52:	e01c      	b.n	8007b8e <parseZionEEPROM+0x44e>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8007b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b58:	3310      	adds	r3, #16
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007b60:	4413      	add	r3, r2
 8007b62:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8007b66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b68:	fb93 f2f2 	sdiv	r2, r3, r2
 8007b6c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007b6e:	fb01 f202 	mul.w	r2, r1, r2
 8007b72:	1a9b      	subs	r3, r3, r2
 8007b74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b76:	5cd3      	ldrb	r3, [r2, r3]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4a22      	ldr	r2, [pc, #136]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b88:	3301      	adds	r3, #1
 8007b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	ddde      	ble.n	8007b54 <parseZionEEPROM+0x414>
 8007b96:	e02c      	b.n	8007bf2 <parseZionEEPROM+0x4b2>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d114      	bne.n	8007bca <parseZionEEPROM+0x48a>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ba6:	e00b      	b.n	8007bc0 <parseZionEEPROM+0x480>
				deviceHeaderBytes[x] = -2;
 8007ba8:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bae:	f06f 0101 	mvn.w	r1, #1
 8007bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	ddef      	ble.n	8007ba8 <parseZionEEPROM+0x468>
 8007bc8:	e013      	b.n	8007bf2 <parseZionEEPROM+0x4b2>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bd0:	e00b      	b.n	8007bea <parseZionEEPROM+0x4aa>
				deviceHeaderBytes[x] = -1;
 8007bd2:	4a0c      	ldr	r2, [pc, #48]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8007bdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8007be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007be4:	3301      	adds	r3, #1
 8007be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	ddef      	ble.n	8007bd2 <parseZionEEPROM+0x492>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4a03      	ldr	r2, [pc, #12]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007bf6:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <parseZionEEPROM+0x4c4>)
 8007bfa:	46b5      	mov	sp, r6
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3794      	adds	r7, #148	; 0x94
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c04:	20003448 	.word	0x20003448

08007c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c0e:	e003      	b.n	8007c18 <LoopCopyDataInit>

08007c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c16:	3104      	adds	r1, #4

08007c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c18:	480b      	ldr	r0, [pc, #44]	; (8007c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c1a:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c20:	d3f6      	bcc.n	8007c10 <CopyDataInit>
  ldr  r2, =_sbss
 8007c22:	4a0b      	ldr	r2, [pc, #44]	; (8007c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c24:	e002      	b.n	8007c2c <LoopFillZerobss>

08007c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c28:	f842 3b04 	str.w	r3, [r2], #4

08007c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c30:	d3f9      	bcc.n	8007c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c32:	f7ff fd1f 	bl	8007674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c36:	f00d ff99 	bl	8015b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c3a:	f7fa fac3 	bl	80021c4 <main>
  bx  lr    
 8007c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c40:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007c44:	0801cafc 	.word	0x0801cafc
  ldr  r0, =_sdata
 8007c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c4c:	20000428 	.word	0x20000428
  ldr  r2, =_sbss
 8007c50:	20000428 	.word	0x20000428
  ldr  r3, = _ebss
 8007c54:	20031284 	.word	0x20031284

08007c58 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c58:	e7fe      	b.n	8007c58 <CAN1_RX0_IRQHandler>

08007c5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c5e:	2003      	movs	r0, #3
 8007c60:	f000 fea5 	bl	80089ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c64:	2000      	movs	r0, #0
 8007c66:	f7ff fab9 	bl	80071dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007c6a:	f7fe fcb3 	bl	80065d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <HAL_IncTick+0x20>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <HAL_IncTick+0x24>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4413      	add	r3, r2
 8007c84:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <HAL_IncTick+0x24>)
 8007c86:	6013      	str	r3, [r2, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20000150 	.word	0x20000150
 8007c98:	20031230 	.word	0x20031230

08007c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8007ca0:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <HAL_GetTick+0x14>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20031230 	.word	0x20031230

08007cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cbc:	f7ff ffee 	bl	8007c9c <HAL_GetTick>
 8007cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d005      	beq.n	8007cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <HAL_Delay+0x44>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007cda:	bf00      	nop
 8007cdc:	f7ff ffde 	bl	8007c9c <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d8f7      	bhi.n	8007cdc <HAL_Delay+0x28>
  {
  }
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000150 	.word	0x20000150

08007cfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e031      	b.n	8007d76 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fe fc82 	bl	8006624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d116      	bne.n	8007d68 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d3e:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <HAL_ADC_Init+0x84>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	f043 0202 	orr.w	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fbfc 	bl	8008548 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f023 0303 	bic.w	r3, r3, #3
 8007d5e:	f043 0201 	orr.w	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
 8007d66:	e001      	b.n	8007d6c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	ffffeefd 	.word	0xffffeefd

08007d84 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	2300      	movs	r3, #0
 8007d92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	bf0c      	ite	eq
 8007da2:	2301      	moveq	r3, #1
 8007da4:	2300      	movne	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d049      	beq.n	8007e5a <HAL_ADC_IRQHandler+0xd6>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d046      	beq.n	8007e5a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d12b      	bne.n	8007e4a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d127      	bne.n	8007e4a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d119      	bne.n	8007e4a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0220 	bic.w	r2, r2, #32
 8007e24:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f043 0201 	orr.w	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fc fc8c 	bl	8004768 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0212 	mvn.w	r2, #18
 8007e58:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	bf0c      	ite	eq
 8007e68:	2301      	moveq	r3, #1
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	bf0c      	ite	eq
 8007e7e:	2301      	moveq	r3, #1
 8007e80:	2300      	movne	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d057      	beq.n	8007f3c <HAL_ADC_IRQHandler+0x1b8>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d054      	beq.n	8007f3c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d139      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d12b      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d124      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11d      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d119      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d105      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	f043 0201 	orr.w	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc87 	bl	8008840 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f06f 020c 	mvn.w	r2, #12
 8007f3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d017      	beq.n	8007f9e <HAL_ADC_IRQHandler+0x21a>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d014      	beq.n	8007f9e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10d      	bne.n	8007f9e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f97c 	bl	800828c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0201 	mvn.w	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc2:	bf0c      	ite	eq
 8007fc4:	2301      	moveq	r3, #1
 8007fc6:	2300      	movne	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d015      	beq.n	8007ffe <HAL_ADC_IRQHandler+0x27a>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d012      	beq.n	8007ffe <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	f043 0202 	orr.w	r2, r3, #2
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0220 	mvn.w	r2, #32
 8007fec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f956 	bl	80082a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f06f 0220 	mvn.w	r2, #32
 8007ffc:	601a      	str	r2, [r3, #0]
  }
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_ADC_Start_DMA+0x1e>
 8008022:	2302      	movs	r3, #2
 8008024:	e0c7      	b.n	80081b6 <HAL_ADC_Start_DMA+0x1ae>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d018      	beq.n	800806e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800804c:	4b5c      	ldr	r3, [pc, #368]	; (80081c0 <HAL_ADC_Start_DMA+0x1b8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a5c      	ldr	r2, [pc, #368]	; (80081c4 <HAL_ADC_Start_DMA+0x1bc>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	0c9a      	lsrs	r2, r3, #18
 8008058:	4613      	mov	r3, r2
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	4413      	add	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008060:	e002      	b.n	8008068 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	3b01      	subs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f9      	bne.n	8008062 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b01      	cmp	r3, #1
 800807a:	f040 809b 	bne.w	80081b4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008082:	4b51      	ldr	r3, [pc, #324]	; (80081c8 <HAL_ADC_Start_DMA+0x1c0>)
 8008084:	4013      	ands	r3, r2
 8008086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008098:	2b00      	cmp	r3, #0
 800809a:	d007      	beq.n	80080ac <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b8:	d106      	bne.n	80080c8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	f023 0206 	bic.w	r2, r3, #6
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
 80080c6:	e002      	b.n	80080ce <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <HAL_ADC_Start_DMA+0x1c4>)
 80080dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	4a3b      	ldr	r2, [pc, #236]	; (80081d0 <HAL_ADC_Start_DMA+0x1c8>)
 80080e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	4a3a      	ldr	r2, [pc, #232]	; (80081d4 <HAL_ADC_Start_DMA+0x1cc>)
 80080ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80080f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008106:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008116:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	334c      	adds	r3, #76	; 0x4c
 8008122:	4619      	mov	r1, r3
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f000 fd24 	bl	8008b74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800812c:	4b2a      	ldr	r3, [pc, #168]	; (80081d8 <HAL_ADC_Start_DMA+0x1d0>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10f      	bne.n	8008158 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d136      	bne.n	80081b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008154:	609a      	str	r2, [r3, #8]
 8008156:	e02d      	b.n	80081b4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1f      	ldr	r2, [pc, #124]	; (80081dc <HAL_ADC_Start_DMA+0x1d4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d10e      	bne.n	8008180 <HAL_ADC_Start_DMA+0x178>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d107      	bne.n	8008180 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800817e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008180:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <HAL_ADC_Start_DMA+0x1d0>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2b00      	cmp	r3, #0
 800818a:	d113      	bne.n	80081b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a13      	ldr	r2, [pc, #76]	; (80081e0 <HAL_ADC_Start_DMA+0x1d8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d10e      	bne.n	80081b4 <HAL_ADC_Start_DMA+0x1ac>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d107      	bne.n	80081b4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80081b2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000148 	.word	0x20000148
 80081c4:	431bde83 	.word	0x431bde83
 80081c8:	fffff8fe 	.word	0xfffff8fe
 80081cc:	0800873d 	.word	0x0800873d
 80081d0:	080087f7 	.word	0x080087f7
 80081d4:	08008813 	.word	0x08008813
 80081d8:	40012300 	.word	0x40012300
 80081dc:	40012000 	.word	0x40012000
 80081e0:	40012200 	.word	0x40012200

080081e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_ADC_Stop_DMA+0x1a>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e036      	b.n	800826c <HAL_ADC_Stop_DMA+0x88>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d11e      	bne.n	8008262 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008232:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fcfb 	bl	8008c34 <HAL_DMA_Abort>
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008250:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008256:	4b07      	ldr	r3, [pc, #28]	; (8008274 <HAL_ADC_Stop_DMA+0x90>)
 8008258:	4013      	ands	r3, r2
 800825a:	f043 0201 	orr.w	r2, r3, #1
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	ffffeefe 	.word	0xffffeefe

08008278 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x1c>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e12a      	b.n	8008526 <HAL_ADC_ConfigChannel+0x272>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b09      	cmp	r3, #9
 80082de:	d93a      	bls.n	8008356 <HAL_ADC_ConfigChannel+0xa2>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e8:	d035      	beq.n	8008356 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68d9      	ldr	r1, [r3, #12]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	461a      	mov	r2, r3
 80082f8:	4613      	mov	r3, r2
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4413      	add	r3, r2
 80082fe:	3b1e      	subs	r3, #30
 8008300:	2207      	movs	r2, #7
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	43da      	mvns	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	400a      	ands	r2, r1
 800830e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a87      	ldr	r2, [pc, #540]	; (8008534 <HAL_ADC_ConfigChannel+0x280>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d10a      	bne.n	8008330 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68d9      	ldr	r1, [r3, #12]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	061a      	lsls	r2, r3, #24
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800832e:	e035      	b.n	800839c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68d9      	ldr	r1, [r3, #12]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	4618      	mov	r0, r3
 8008342:	4603      	mov	r3, r0
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	4403      	add	r3, r0
 8008348:	3b1e      	subs	r3, #30
 800834a:	409a      	lsls	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008354:	e022      	b.n	800839c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6919      	ldr	r1, [r3, #16]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	4613      	mov	r3, r2
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	4413      	add	r3, r2
 800836a:	2207      	movs	r2, #7
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	43da      	mvns	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	400a      	ands	r2, r1
 8008378:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6919      	ldr	r1, [r3, #16]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	4618      	mov	r0, r3
 800838c:	4603      	mov	r3, r0
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	4403      	add	r3, r0
 8008392:	409a      	lsls	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b06      	cmp	r3, #6
 80083a2:	d824      	bhi.n	80083ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	3b05      	subs	r3, #5
 80083b6:	221f      	movs	r2, #31
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	43da      	mvns	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	400a      	ands	r2, r1
 80083c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	4618      	mov	r0, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	3b05      	subs	r3, #5
 80083e0:	fa00 f203 	lsl.w	r2, r0, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	635a      	str	r2, [r3, #52]	; 0x34
 80083ec:	e04c      	b.n	8008488 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b0c      	cmp	r3, #12
 80083f4:	d824      	bhi.n	8008440 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	3b23      	subs	r3, #35	; 0x23
 8008408:	221f      	movs	r2, #31
 800840a:	fa02 f303 	lsl.w	r3, r2, r3
 800840e:	43da      	mvns	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	400a      	ands	r2, r1
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	4618      	mov	r0, r3
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	3b23      	subs	r3, #35	; 0x23
 8008432:	fa00 f203 	lsl.w	r2, r0, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
 800843e:	e023      	b.n	8008488 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	3b41      	subs	r3, #65	; 0x41
 8008452:	221f      	movs	r2, #31
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	43da      	mvns	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	400a      	ands	r2, r1
 8008460:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	b29b      	uxth	r3, r3
 800846e:	4618      	mov	r0, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	3b41      	subs	r3, #65	; 0x41
 800847c:	fa00 f203 	lsl.w	r2, r0, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a2a      	ldr	r2, [pc, #168]	; (8008538 <HAL_ADC_ConfigChannel+0x284>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d10a      	bne.n	80084a8 <HAL_ADC_ConfigChannel+0x1f4>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800849a:	d105      	bne.n	80084a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800849c:	4b27      	ldr	r3, [pc, #156]	; (800853c <HAL_ADC_ConfigChannel+0x288>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4a26      	ldr	r2, [pc, #152]	; (800853c <HAL_ADC_ConfigChannel+0x288>)
 80084a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80084a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <HAL_ADC_ConfigChannel+0x284>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d109      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x212>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b12      	cmp	r3, #18
 80084b8:	d105      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80084ba:	4b20      	ldr	r3, [pc, #128]	; (800853c <HAL_ADC_ConfigChannel+0x288>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	4a1f      	ldr	r2, [pc, #124]	; (800853c <HAL_ADC_ConfigChannel+0x288>)
 80084c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <HAL_ADC_ConfigChannel+0x284>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d125      	bne.n	800851c <HAL_ADC_ConfigChannel+0x268>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a17      	ldr	r2, [pc, #92]	; (8008534 <HAL_ADC_ConfigChannel+0x280>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d003      	beq.n	80084e2 <HAL_ADC_ConfigChannel+0x22e>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b11      	cmp	r3, #17
 80084e0:	d11c      	bne.n	800851c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80084e2:	4b16      	ldr	r3, [pc, #88]	; (800853c <HAL_ADC_ConfigChannel+0x288>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	4a15      	ldr	r2, [pc, #84]	; (800853c <HAL_ADC_ConfigChannel+0x288>)
 80084e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a10      	ldr	r2, [pc, #64]	; (8008534 <HAL_ADC_ConfigChannel+0x280>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d111      	bne.n	800851c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <HAL_ADC_ConfigChannel+0x28c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a11      	ldr	r2, [pc, #68]	; (8008544 <HAL_ADC_ConfigChannel+0x290>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	0c9a      	lsrs	r2, r3, #18
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800850e:	e002      	b.n	8008516 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3b01      	subs	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f9      	bne.n	8008510 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	10000012 	.word	0x10000012
 8008538:	40012000 	.word	0x40012000
 800853c:	40012300 	.word	0x40012300
 8008540:	20000148 	.word	0x20000148
 8008544:	431bde83 	.word	0x431bde83

08008548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008550:	4b78      	ldr	r3, [pc, #480]	; (8008734 <ADC_Init+0x1ec>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a77      	ldr	r2, [pc, #476]	; (8008734 <ADC_Init+0x1ec>)
 8008556:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800855a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800855c:	4b75      	ldr	r3, [pc, #468]	; (8008734 <ADC_Init+0x1ec>)
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4973      	ldr	r1, [pc, #460]	; (8008734 <ADC_Init+0x1ec>)
 8008566:	4313      	orrs	r3, r2
 8008568:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6859      	ldr	r1, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	021a      	lsls	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800859c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6859      	ldr	r1, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6899      	ldr	r1, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d6:	4a58      	ldr	r2, [pc, #352]	; (8008738 <ADC_Init+0x1f0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d022      	beq.n	8008622 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6899      	ldr	r1, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800860c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6899      	ldr	r1, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	430a      	orrs	r2, r1
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	e00f      	b.n	8008642 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008640:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0202 	bic.w	r2, r2, #2
 8008650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6899      	ldr	r1, [r3, #8]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	005a      	lsls	r2, r3, #1
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01b      	beq.n	80086a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800868e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6859      	ldr	r1, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	3b01      	subs	r3, #1
 800869c:	035a      	lsls	r2, r3, #13
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	e007      	b.n	80086b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80086c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	051a      	lsls	r2, r3, #20
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80086ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6899      	ldr	r1, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086fa:	025a      	lsls	r2, r3, #9
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6899      	ldr	r1, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	029a      	lsls	r2, r3, #10
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	40012300 	.word	0x40012300
 8008738:	0f000001 	.word	0x0f000001

0800873c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008752:	2b00      	cmp	r3, #0
 8008754:	d13c      	bne.n	80087d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d12b      	bne.n	80087c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008774:	2b00      	cmp	r3, #0
 8008776:	d127      	bne.n	80087c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008782:	2b00      	cmp	r3, #0
 8008784:	d006      	beq.n	8008794 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008790:	2b00      	cmp	r3, #0
 8008792:	d119      	bne.n	80087c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0220 	bic.w	r2, r2, #32
 80087a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	f043 0201 	orr.w	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7fb ffcd 	bl	8004768 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80087ce:	e00e      	b.n	80087ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7ff fd5f 	bl	80082a0 <HAL_ADC_ErrorCallback>
}
 80087e2:	e004      	b.n	80087ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fd37 	bl	8008278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2240      	movs	r2, #64	; 0x40
 8008824:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	f043 0204 	orr.w	r2, r3, #4
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f7ff fd34 	bl	80082a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008864:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <__NVIC_SetPriorityGrouping+0x40>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008870:	4013      	ands	r3, r2
 8008872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <__NVIC_SetPriorityGrouping+0x44>)
 800887e:	4313      	orrs	r3, r2
 8008880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008882:	4a04      	ldr	r2, [pc, #16]	; (8008894 <__NVIC_SetPriorityGrouping+0x40>)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	60d3      	str	r3, [r2, #12]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	e000ed00 	.word	0xe000ed00
 8008898:	05fa0000 	.word	0x05fa0000

0800889c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <__NVIC_GetPriorityGrouping+0x18>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	f003 0307 	and.w	r3, r3, #7
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	e000ed00 	.word	0xe000ed00

080088b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	db0b      	blt.n	80088e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	f003 021f 	and.w	r2, r3, #31
 80088d0:	4907      	ldr	r1, [pc, #28]	; (80088f0 <__NVIC_EnableIRQ+0x38>)
 80088d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	2001      	movs	r0, #1
 80088da:	fa00 f202 	lsl.w	r2, r0, r2
 80088de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e100 	.word	0xe000e100

080088f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	6039      	str	r1, [r7, #0]
 80088fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008904:	2b00      	cmp	r3, #0
 8008906:	db0a      	blt.n	800891e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	b2da      	uxtb	r2, r3
 800890c:	490c      	ldr	r1, [pc, #48]	; (8008940 <__NVIC_SetPriority+0x4c>)
 800890e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008912:	0112      	lsls	r2, r2, #4
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	440b      	add	r3, r1
 8008918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800891c:	e00a      	b.n	8008934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4908      	ldr	r1, [pc, #32]	; (8008944 <__NVIC_SetPriority+0x50>)
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	f003 030f 	and.w	r3, r3, #15
 800892a:	3b04      	subs	r3, #4
 800892c:	0112      	lsls	r2, r2, #4
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	440b      	add	r3, r1
 8008932:	761a      	strb	r2, [r3, #24]
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	e000e100 	.word	0xe000e100
 8008944:	e000ed00 	.word	0xe000ed00

08008948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008948:	b480      	push	{r7}
 800894a:	b089      	sub	sp, #36	; 0x24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f1c3 0307 	rsb	r3, r3, #7
 8008962:	2b04      	cmp	r3, #4
 8008964:	bf28      	it	cs
 8008966:	2304      	movcs	r3, #4
 8008968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3304      	adds	r3, #4
 800896e:	2b06      	cmp	r3, #6
 8008970:	d902      	bls.n	8008978 <NVIC_EncodePriority+0x30>
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	3b03      	subs	r3, #3
 8008976:	e000      	b.n	800897a <NVIC_EncodePriority+0x32>
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	fa02 f303 	lsl.w	r3, r2, r3
 8008986:	43da      	mvns	r2, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	401a      	ands	r2, r3
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008990:	f04f 31ff 	mov.w	r1, #4294967295
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	43d9      	mvns	r1, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089a0:	4313      	orrs	r3, r2
         );
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3724      	adds	r7, #36	; 0x24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff ff4c 	bl	8008854 <__NVIC_SetPriorityGrouping>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80089d2:	2300      	movs	r3, #0
 80089d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089d6:	f7ff ff61 	bl	800889c <__NVIC_GetPriorityGrouping>
 80089da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	6978      	ldr	r0, [r7, #20]
 80089e2:	f7ff ffb1 	bl	8008948 <NVIC_EncodePriority>
 80089e6:	4602      	mov	r2, r0
 80089e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ff80 	bl	80088f4 <__NVIC_SetPriority>
}
 80089f4:	bf00      	nop
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff ff54 	bl	80088b8 <__NVIC_EnableIRQ>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008a24:	f7ff f93a 	bl	8007c9c <HAL_GetTick>
 8008a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e099      	b.n	8008b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0201 	bic.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a54:	e00f      	b.n	8008a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a56:	f7ff f921 	bl	8007c9c <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b05      	cmp	r3, #5
 8008a62:	d908      	bls.n	8008a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e078      	b.n	8008b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e8      	bne.n	8008a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4b38      	ldr	r3, [pc, #224]	; (8008b70 <HAL_DMA_Init+0x158>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d107      	bne.n	8008ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f023 0307 	bic.w	r3, r3, #7
 8008af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d117      	bne.n	8008b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb09 	bl	8009134 <DMA_CheckFifoParam>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d008      	beq.n	8008b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2240      	movs	r2, #64	; 0x40
 8008b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008b36:	2301      	movs	r3, #1
 8008b38:	e016      	b.n	8008b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fac0 	bl	80090c8 <DMA_CalcBaseAndBitshift>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b50:	223f      	movs	r2, #63	; 0x3f
 8008b52:	409a      	lsls	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	e010803f 	.word	0xe010803f

08008b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_DMA_Start_IT+0x26>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e048      	b.n	8008c2c <HAL_DMA_Start_IT+0xb8>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d137      	bne.n	8008c1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fa52 	bl	800906c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bcc:	223f      	movs	r2, #63	; 0x3f
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0216 	orr.w	r2, r2, #22
 8008be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695a      	ldr	r2, [r3, #20]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bf2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d007      	beq.n	8008c0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0208 	orr.w	r2, r2, #8
 8008c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0201 	orr.w	r2, r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	e005      	b.n	8008c2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008c26:	2302      	movs	r3, #2
 8008c28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008c42:	f7ff f82b 	bl	8007c9c <HAL_GetTick>
 8008c46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d008      	beq.n	8008c66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2280      	movs	r2, #128	; 0x80
 8008c58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e052      	b.n	8008d0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0216 	bic.w	r2, r2, #22
 8008c74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <HAL_DMA_Abort+0x62>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0208 	bic.w	r2, r2, #8
 8008ca4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cb6:	e013      	b.n	8008ce0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008cb8:	f7fe fff0 	bl	8007c9c <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b05      	cmp	r3, #5
 8008cc4:	d90c      	bls.n	8008ce0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e015      	b.n	8008d0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e4      	bne.n	8008cb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf2:	223f      	movs	r2, #63	; 0x3f
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d004      	beq.n	8008d32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2280      	movs	r2, #128	; 0x80
 8008d2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e00c      	b.n	8008d4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2205      	movs	r2, #5
 8008d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008d64:	4b92      	ldr	r3, [pc, #584]	; (8008fb0 <HAL_DMA_IRQHandler+0x258>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a92      	ldr	r2, [pc, #584]	; (8008fb4 <HAL_DMA_IRQHandler+0x25c>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	0a9b      	lsrs	r3, r3, #10
 8008d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d82:	2208      	movs	r2, #8
 8008d84:	409a      	lsls	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01a      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d013      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0204 	bic.w	r2, r2, #4
 8008daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db0:	2208      	movs	r2, #8
 8008db2:	409a      	lsls	r2, r3
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbc:	f043 0201 	orr.w	r2, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc8:	2201      	movs	r2, #1
 8008dca:	409a      	lsls	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d012      	beq.n	8008dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00b      	beq.n	8008dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de6:	2201      	movs	r2, #1
 8008de8:	409a      	lsls	r2, r3
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df2:	f043 0202 	orr.w	r2, r3, #2
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfe:	2204      	movs	r2, #4
 8008e00:	409a      	lsls	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4013      	ands	r3, r2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d012      	beq.n	8008e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	409a      	lsls	r2, r3
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e28:	f043 0204 	orr.w	r2, r3, #4
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e34:	2210      	movs	r2, #16
 8008e36:	409a      	lsls	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d043      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d03c      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e52:	2210      	movs	r2, #16
 8008e54:	409a      	lsls	r2, r3
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d018      	beq.n	8008e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d108      	bne.n	8008e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d024      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
 8008e86:	e01f      	b.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
 8008e98:	e016      	b.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d107      	bne.n	8008eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0208 	bic.w	r2, r2, #8
 8008eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ecc:	2220      	movs	r2, #32
 8008ece:	409a      	lsls	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 808e 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0310 	and.w	r3, r3, #16
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8086 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eee:	2220      	movs	r2, #32
 8008ef0:	409a      	lsls	r2, r3
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	d136      	bne.n	8008f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0216 	bic.w	r2, r2, #22
 8008f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	695a      	ldr	r2, [r3, #20]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <HAL_DMA_IRQHandler+0x1da>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0208 	bic.w	r2, r2, #8
 8008f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f46:	223f      	movs	r2, #63	; 0x3f
 8008f48:	409a      	lsls	r2, r3
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d07d      	beq.n	8009062 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
        }
        return;
 8008f6e:	e078      	b.n	8009062 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d01c      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d030      	beq.n	8008ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
 8008f9c:	e02b      	b.n	8008ff6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d027      	beq.n	8008ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
 8008fae:	e022      	b.n	8008ff6 <HAL_DMA_IRQHandler+0x29e>
 8008fb0:	20000148 	.word	0x20000148
 8008fb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10f      	bne.n	8008fe6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0210 	bic.w	r2, r2, #16
 8008fd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d032      	beq.n	8009064 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d022      	beq.n	8009050 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2205      	movs	r2, #5
 800900e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0201 	bic.w	r2, r2, #1
 8009020:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	3301      	adds	r3, #1
 8009026:	60bb      	str	r3, [r7, #8]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	429a      	cmp	r2, r3
 800902c:	d307      	bcc.n	800903e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f2      	bne.n	8009022 <HAL_DMA_IRQHandler+0x2ca>
 800903c:	e000      	b.n	8009040 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800903e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
 8009060:	e000      	b.n	8009064 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009062:	bf00      	nop
    }
  }
}
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop

0800906c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	2b40      	cmp	r3, #64	; 0x40
 8009098:	d108      	bne.n	80090ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80090aa:	e007      	b.n	80090bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	60da      	str	r2, [r3, #12]
}
 80090bc:	bf00      	nop
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	3b10      	subs	r3, #16
 80090d8:	4a13      	ldr	r2, [pc, #76]	; (8009128 <DMA_CalcBaseAndBitshift+0x60>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	091b      	lsrs	r3, r3, #4
 80090e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80090e2:	4a12      	ldr	r2, [pc, #72]	; (800912c <DMA_CalcBaseAndBitshift+0x64>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d908      	bls.n	8009108 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <DMA_CalcBaseAndBitshift+0x68>)
 80090fe:	4013      	ands	r3, r2
 8009100:	1d1a      	adds	r2, r3, #4
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	659a      	str	r2, [r3, #88]	; 0x58
 8009106:	e006      	b.n	8009116 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <DMA_CalcBaseAndBitshift+0x68>)
 8009110:	4013      	ands	r3, r2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	aaaaaaab 	.word	0xaaaaaaab
 800912c:	0801b950 	.word	0x0801b950
 8009130:	fffffc00 	.word	0xfffffc00

08009134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d11f      	bne.n	800918e <DMA_CheckFifoParam+0x5a>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b03      	cmp	r3, #3
 8009152:	d856      	bhi.n	8009202 <DMA_CheckFifoParam+0xce>
 8009154:	a201      	add	r2, pc, #4	; (adr r2, 800915c <DMA_CheckFifoParam+0x28>)
 8009156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915a:	bf00      	nop
 800915c:	0800916d 	.word	0x0800916d
 8009160:	0800917f 	.word	0x0800917f
 8009164:	0800916d 	.word	0x0800916d
 8009168:	08009203 	.word	0x08009203
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d046      	beq.n	8009206 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800917c:	e043      	b.n	8009206 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009186:	d140      	bne.n	800920a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800918c:	e03d      	b.n	800920a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009196:	d121      	bne.n	80091dc <DMA_CheckFifoParam+0xa8>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b03      	cmp	r3, #3
 800919c:	d837      	bhi.n	800920e <DMA_CheckFifoParam+0xda>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <DMA_CheckFifoParam+0x70>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091b5 	.word	0x080091b5
 80091a8:	080091bb 	.word	0x080091bb
 80091ac:	080091b5 	.word	0x080091b5
 80091b0:	080091cd 	.word	0x080091cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73fb      	strb	r3, [r7, #15]
      break;
 80091b8:	e030      	b.n	800921c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d025      	beq.n	8009212 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091ca:	e022      	b.n	8009212 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091d4:	d11f      	bne.n	8009216 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80091da:	e01c      	b.n	8009216 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d903      	bls.n	80091ea <DMA_CheckFifoParam+0xb6>
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d003      	beq.n	80091f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80091e8:	e018      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	73fb      	strb	r3, [r7, #15]
      break;
 80091ee:	e015      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009200:	e00b      	b.n	800921a <DMA_CheckFifoParam+0xe6>
      break;
 8009202:	bf00      	nop
 8009204:	e00a      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      break;
 8009206:	bf00      	nop
 8009208:	e008      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      break;
 800920a:	bf00      	nop
 800920c:	e006      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      break;
 800920e:	bf00      	nop
 8009210:	e004      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      break;
 8009212:	bf00      	nop
 8009214:	e002      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      break;   
 8009216:	bf00      	nop
 8009218:	e000      	b.n	800921c <DMA_CheckFifoParam+0xe8>
      break;
 800921a:	bf00      	nop
    }
  } 
  
  return status; 
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800922c:	b480      	push	{r7}
 800922e:	b089      	sub	sp, #36	; 0x24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e175      	b.n	8009538 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800924c:	2201      	movs	r2, #1
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	fa02 f303 	lsl.w	r3, r2, r3
 8009254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4013      	ands	r3, r2
 800925e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	429a      	cmp	r2, r3
 8009266:	f040 8164 	bne.w	8009532 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d00b      	beq.n	800928a <HAL_GPIO_Init+0x5e>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d007      	beq.n	800928a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800927e:	2b11      	cmp	r3, #17
 8009280:	d003      	beq.n	800928a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b12      	cmp	r3, #18
 8009288:	d130      	bne.n	80092ec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	2203      	movs	r2, #3
 8009296:	fa02 f303 	lsl.w	r3, r2, r3
 800929a:	43db      	mvns	r3, r3
 800929c:	69ba      	ldr	r2, [r7, #24]
 800929e:	4013      	ands	r3, r2
 80092a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	fa02 f303 	lsl.w	r3, r2, r3
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092c0:	2201      	movs	r2, #1
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	4013      	ands	r3, r2
 80092ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	091b      	lsrs	r3, r3, #4
 80092d6:	f003 0201 	and.w	r2, r3, #1
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	2203      	movs	r2, #3
 80092f8:	fa02 f303 	lsl.w	r3, r2, r3
 80092fc:	43db      	mvns	r3, r3
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	4013      	ands	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	4313      	orrs	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d003      	beq.n	800932c <HAL_GPIO_Init+0x100>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b12      	cmp	r3, #18
 800932a:	d123      	bne.n	8009374 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	08da      	lsrs	r2, r3, #3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3208      	adds	r2, #8
 8009334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	220f      	movs	r2, #15
 8009344:	fa02 f303 	lsl.w	r3, r2, r3
 8009348:	43db      	mvns	r3, r3
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	4013      	ands	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	691a      	ldr	r2, [r3, #16]
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	fa02 f303 	lsl.w	r3, r2, r3
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	4313      	orrs	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	08da      	lsrs	r2, r3, #3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3208      	adds	r2, #8
 800936e:	69b9      	ldr	r1, [r7, #24]
 8009370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	2203      	movs	r2, #3
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	43db      	mvns	r3, r3
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	4013      	ands	r3, r2
 800938a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f003 0203 	and.w	r2, r3, #3
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	fa02 f303 	lsl.w	r3, r2, r3
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	4313      	orrs	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80be 	beq.w	8009532 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093b6:	4b66      	ldr	r3, [pc, #408]	; (8009550 <HAL_GPIO_Init+0x324>)
 80093b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ba:	4a65      	ldr	r2, [pc, #404]	; (8009550 <HAL_GPIO_Init+0x324>)
 80093bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093c0:	6453      	str	r3, [r2, #68]	; 0x44
 80093c2:	4b63      	ldr	r3, [pc, #396]	; (8009550 <HAL_GPIO_Init+0x324>)
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80093ce:	4a61      	ldr	r2, [pc, #388]	; (8009554 <HAL_GPIO_Init+0x328>)
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	089b      	lsrs	r3, r3, #2
 80093d4:	3302      	adds	r3, #2
 80093d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	220f      	movs	r2, #15
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43db      	mvns	r3, r3
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	4013      	ands	r3, r2
 80093f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a58      	ldr	r2, [pc, #352]	; (8009558 <HAL_GPIO_Init+0x32c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d037      	beq.n	800946a <HAL_GPIO_Init+0x23e>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a57      	ldr	r2, [pc, #348]	; (800955c <HAL_GPIO_Init+0x330>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d031      	beq.n	8009466 <HAL_GPIO_Init+0x23a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a56      	ldr	r2, [pc, #344]	; (8009560 <HAL_GPIO_Init+0x334>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d02b      	beq.n	8009462 <HAL_GPIO_Init+0x236>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a55      	ldr	r2, [pc, #340]	; (8009564 <HAL_GPIO_Init+0x338>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d025      	beq.n	800945e <HAL_GPIO_Init+0x232>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a54      	ldr	r2, [pc, #336]	; (8009568 <HAL_GPIO_Init+0x33c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d01f      	beq.n	800945a <HAL_GPIO_Init+0x22e>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a53      	ldr	r2, [pc, #332]	; (800956c <HAL_GPIO_Init+0x340>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d019      	beq.n	8009456 <HAL_GPIO_Init+0x22a>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a52      	ldr	r2, [pc, #328]	; (8009570 <HAL_GPIO_Init+0x344>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d013      	beq.n	8009452 <HAL_GPIO_Init+0x226>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a51      	ldr	r2, [pc, #324]	; (8009574 <HAL_GPIO_Init+0x348>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00d      	beq.n	800944e <HAL_GPIO_Init+0x222>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a50      	ldr	r2, [pc, #320]	; (8009578 <HAL_GPIO_Init+0x34c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d007      	beq.n	800944a <HAL_GPIO_Init+0x21e>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a4f      	ldr	r2, [pc, #316]	; (800957c <HAL_GPIO_Init+0x350>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d101      	bne.n	8009446 <HAL_GPIO_Init+0x21a>
 8009442:	2309      	movs	r3, #9
 8009444:	e012      	b.n	800946c <HAL_GPIO_Init+0x240>
 8009446:	230a      	movs	r3, #10
 8009448:	e010      	b.n	800946c <HAL_GPIO_Init+0x240>
 800944a:	2308      	movs	r3, #8
 800944c:	e00e      	b.n	800946c <HAL_GPIO_Init+0x240>
 800944e:	2307      	movs	r3, #7
 8009450:	e00c      	b.n	800946c <HAL_GPIO_Init+0x240>
 8009452:	2306      	movs	r3, #6
 8009454:	e00a      	b.n	800946c <HAL_GPIO_Init+0x240>
 8009456:	2305      	movs	r3, #5
 8009458:	e008      	b.n	800946c <HAL_GPIO_Init+0x240>
 800945a:	2304      	movs	r3, #4
 800945c:	e006      	b.n	800946c <HAL_GPIO_Init+0x240>
 800945e:	2303      	movs	r3, #3
 8009460:	e004      	b.n	800946c <HAL_GPIO_Init+0x240>
 8009462:	2302      	movs	r3, #2
 8009464:	e002      	b.n	800946c <HAL_GPIO_Init+0x240>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <HAL_GPIO_Init+0x240>
 800946a:	2300      	movs	r3, #0
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	f002 0203 	and.w	r2, r2, #3
 8009472:	0092      	lsls	r2, r2, #2
 8009474:	4093      	lsls	r3, r2
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	4313      	orrs	r3, r2
 800947a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800947c:	4935      	ldr	r1, [pc, #212]	; (8009554 <HAL_GPIO_Init+0x328>)
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	089b      	lsrs	r3, r3, #2
 8009482:	3302      	adds	r3, #2
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800948a:	4b3d      	ldr	r3, [pc, #244]	; (8009580 <HAL_GPIO_Init+0x354>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	43db      	mvns	r3, r3
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	4013      	ands	r3, r2
 8009498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80094ae:	4a34      	ldr	r2, [pc, #208]	; (8009580 <HAL_GPIO_Init+0x354>)
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80094b4:	4b32      	ldr	r3, [pc, #200]	; (8009580 <HAL_GPIO_Init+0x354>)
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	43db      	mvns	r3, r3
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	4013      	ands	r3, r2
 80094c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80094d8:	4a29      	ldr	r2, [pc, #164]	; (8009580 <HAL_GPIO_Init+0x354>)
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80094de:	4b28      	ldr	r3, [pc, #160]	; (8009580 <HAL_GPIO_Init+0x354>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	43db      	mvns	r3, r3
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	4013      	ands	r3, r2
 80094ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009502:	4a1f      	ldr	r2, [pc, #124]	; (8009580 <HAL_GPIO_Init+0x354>)
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009508:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <HAL_GPIO_Init+0x354>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	43db      	mvns	r3, r3
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	4013      	ands	r3, r2
 8009516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	4313      	orrs	r3, r2
 800952a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800952c:	4a14      	ldr	r2, [pc, #80]	; (8009580 <HAL_GPIO_Init+0x354>)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	3301      	adds	r3, #1
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	2b0f      	cmp	r3, #15
 800953c:	f67f ae86 	bls.w	800924c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	3724      	adds	r7, #36	; 0x24
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	40023800 	.word	0x40023800
 8009554:	40013800 	.word	0x40013800
 8009558:	40020000 	.word	0x40020000
 800955c:	40020400 	.word	0x40020400
 8009560:	40020800 	.word	0x40020800
 8009564:	40020c00 	.word	0x40020c00
 8009568:	40021000 	.word	0x40021000
 800956c:	40021400 	.word	0x40021400
 8009570:	40021800 	.word	0x40021800
 8009574:	40021c00 	.word	0x40021c00
 8009578:	40022000 	.word	0x40022000
 800957c:	40022400 	.word	0x40022400
 8009580:	40013c00 	.word	0x40013c00

08009584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	691a      	ldr	r2, [r3, #16]
 8009594:	887b      	ldrh	r3, [r7, #2]
 8009596:	4013      	ands	r3, r2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800959c:	2301      	movs	r3, #1
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e001      	b.n	80095a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	807b      	strh	r3, [r7, #2]
 80095c0:	4613      	mov	r3, r2
 80095c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095ca:	887a      	ldrh	r2, [r7, #2]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80095d0:	e003      	b.n	80095da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80095d2:	887b      	ldrh	r3, [r7, #2]
 80095d4:	041a      	lsls	r2, r3, #16
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	619a      	str	r2, [r3, #24]
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	695a      	ldr	r2, [r3, #20]
 80095f6:	887b      	ldrh	r3, [r7, #2]
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80095fe:	887b      	ldrh	r3, [r7, #2]
 8009600:	041a      	lsls	r2, r3, #16
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009606:	e002      	b.n	800960e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009608:	887a      	ldrh	r2, [r7, #2]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	619a      	str	r2, [r3, #24]
}
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009626:	4b08      	ldr	r3, [pc, #32]	; (8009648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009628:	695a      	ldr	r2, [r3, #20]
 800962a:	88fb      	ldrh	r3, [r7, #6]
 800962c:	4013      	ands	r3, r2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009632:	4a05      	ldr	r2, [pc, #20]	; (8009648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009638:	88fb      	ldrh	r3, [r7, #6]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f806 	bl	800964c <HAL_GPIO_EXTI_Callback>
  }
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	40013c00 	.word	0x40013c00

0800964c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
	...

08009664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e07f      	b.n	8009776 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d106      	bne.n	8009690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7fd f9b6 	bl	80069fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2224      	movs	r2, #36	; 0x24
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0201 	bic.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d107      	bne.n	80096de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689a      	ldr	r2, [r3, #8]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096da:	609a      	str	r2, [r3, #8]
 80096dc:	e006      	b.n	80096ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80096ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d104      	bne.n	80096fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6859      	ldr	r1, [r3, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <HAL_I2C_Init+0x11c>)
 800970a:	430b      	orrs	r3, r1
 800970c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800971c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691a      	ldr	r2, [r3, #16]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	ea42 0103 	orr.w	r1, r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	021a      	lsls	r2, r3, #8
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	69d9      	ldr	r1, [r3, #28]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a1a      	ldr	r2, [r3, #32]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0201 	orr.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2220      	movs	r2, #32
 8009762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	02008000 	.word	0x02008000

08009784 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af02      	add	r7, sp, #8
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	607a      	str	r2, [r7, #4]
 800978e:	461a      	mov	r2, r3
 8009790:	460b      	mov	r3, r1
 8009792:	817b      	strh	r3, [r7, #10]
 8009794:	4613      	mov	r3, r2
 8009796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	f040 80da 	bne.w	800995a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_I2C_Master_Transmit+0x30>
 80097b0:	2302      	movs	r3, #2
 80097b2:	e0d3      	b.n	800995c <HAL_I2C_Master_Transmit+0x1d8>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80097bc:	f7fe fa6e 	bl	8007c9c <HAL_GetTick>
 80097c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2319      	movs	r3, #25
 80097c8:	2201      	movs	r2, #1
 80097ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fc5c 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e0be      	b.n	800995c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2221      	movs	r2, #33	; 0x21
 80097e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2210      	movs	r2, #16
 80097ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	893a      	ldrh	r2, [r7, #8]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980a:	b29b      	uxth	r3, r3
 800980c:	2bff      	cmp	r3, #255	; 0xff
 800980e:	d90e      	bls.n	800982e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	22ff      	movs	r2, #255	; 0xff
 8009814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800981a:	b2da      	uxtb	r2, r3
 800981c:	8979      	ldrh	r1, [r7, #10]
 800981e:	4b51      	ldr	r3, [pc, #324]	; (8009964 <HAL_I2C_Master_Transmit+0x1e0>)
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fdbe 	bl	800a3a8 <I2C_TransferConfig>
 800982c:	e06c      	b.n	8009908 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009832:	b29a      	uxth	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983c:	b2da      	uxtb	r2, r3
 800983e:	8979      	ldrh	r1, [r7, #10]
 8009840:	4b48      	ldr	r3, [pc, #288]	; (8009964 <HAL_I2C_Master_Transmit+0x1e0>)
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 fdad 	bl	800a3a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800984e:	e05b      	b.n	8009908 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	6a39      	ldr	r1, [r7, #32]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fc59 	bl	800a10c <I2C_WaitOnTXISFlagUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e07b      	b.n	800995c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	781a      	ldrb	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009898:	b29b      	uxth	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d034      	beq.n	8009908 <HAL_I2C_Master_Transmit+0x184>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d130      	bne.n	8009908 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	2200      	movs	r2, #0
 80098ae:	2180      	movs	r1, #128	; 0x80
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fbeb 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e04d      	b.n	800995c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	2bff      	cmp	r3, #255	; 0xff
 80098c8:	d90e      	bls.n	80098e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	22ff      	movs	r2, #255	; 0xff
 80098ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	8979      	ldrh	r1, [r7, #10]
 80098d8:	2300      	movs	r3, #0
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 fd61 	bl	800a3a8 <I2C_TransferConfig>
 80098e6:	e00f      	b.n	8009908 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	8979      	ldrh	r1, [r7, #10]
 80098fa:	2300      	movs	r3, #0
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fd50 	bl	800a3a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d19e      	bne.n	8009850 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	6a39      	ldr	r1, [r7, #32]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 fc38 	bl	800a18c <I2C_WaitOnSTOPFlagUntilTimeout>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e01a      	b.n	800995c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2220      	movs	r2, #32
 800992c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6859      	ldr	r1, [r3, #4]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <HAL_I2C_Master_Transmit+0x1e4>)
 800993a:	400b      	ands	r3, r1
 800993c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2220      	movs	r2, #32
 8009942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	e000      	b.n	800995c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800995a:	2302      	movs	r3, #2
  }
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	80002000 	.word	0x80002000
 8009968:	fe00e800 	.word	0xfe00e800

0800996c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b088      	sub	sp, #32
 8009970:	af02      	add	r7, sp, #8
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	461a      	mov	r2, r3
 8009978:	460b      	mov	r3, r1
 800997a:	817b      	strh	r3, [r7, #10]
 800997c:	4613      	mov	r3, r2
 800997e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b20      	cmp	r3, #32
 800998a:	f040 80db 	bne.w	8009b44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009994:	2b01      	cmp	r3, #1
 8009996:	d101      	bne.n	800999c <HAL_I2C_Master_Receive+0x30>
 8009998:	2302      	movs	r3, #2
 800999a:	e0d4      	b.n	8009b46 <HAL_I2C_Master_Receive+0x1da>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80099a4:	f7fe f97a 	bl	8007c9c <HAL_GetTick>
 80099a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2319      	movs	r3, #25
 80099b0:	2201      	movs	r2, #1
 80099b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 fb68 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e0bf      	b.n	8009b46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2222      	movs	r2, #34	; 0x22
 80099ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2210      	movs	r2, #16
 80099d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	893a      	ldrh	r2, [r7, #8]
 80099e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2bff      	cmp	r3, #255	; 0xff
 80099f6:	d90e      	bls.n	8009a16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	22ff      	movs	r2, #255	; 0xff
 80099fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	8979      	ldrh	r1, [r7, #10]
 8009a06:	4b52      	ldr	r3, [pc, #328]	; (8009b50 <HAL_I2C_Master_Receive+0x1e4>)
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fcca 	bl	800a3a8 <I2C_TransferConfig>
 8009a14:	e06d      	b.n	8009af2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	8979      	ldrh	r1, [r7, #10]
 8009a28:	4b49      	ldr	r3, [pc, #292]	; (8009b50 <HAL_I2C_Master_Receive+0x1e4>)
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 fcb9 	bl	800a3a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009a36:	e05c      	b.n	8009af2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	6a39      	ldr	r1, [r7, #32]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 fbe1 	bl	800a204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e07c      	b.n	8009b46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	3b01      	subs	r3, #1
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d034      	beq.n	8009af2 <HAL_I2C_Master_Receive+0x186>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d130      	bne.n	8009af2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2200      	movs	r2, #0
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 faf6 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e04d      	b.n	8009b46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	2bff      	cmp	r3, #255	; 0xff
 8009ab2:	d90e      	bls.n	8009ad2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	22ff      	movs	r2, #255	; 0xff
 8009ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	8979      	ldrh	r1, [r7, #10]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fc6c 	bl	800a3a8 <I2C_TransferConfig>
 8009ad0:	e00f      	b.n	8009af2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	8979      	ldrh	r1, [r7, #10]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fc5b 	bl	800a3a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d19d      	bne.n	8009a38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	6a39      	ldr	r1, [r7, #32]
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 fb43 	bl	800a18c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e01a      	b.n	8009b46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2220      	movs	r2, #32
 8009b16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <HAL_I2C_Master_Receive+0x1e8>)
 8009b24:	400b      	ands	r3, r1
 8009b26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e000      	b.n	8009b46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009b44:	2302      	movs	r3, #2
  }
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	80002400 	.word	0x80002400
 8009b54:	fe00e800 	.word	0xfe00e800

08009b58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	461a      	mov	r2, r3
 8009b66:	4603      	mov	r3, r0
 8009b68:	817b      	strh	r3, [r7, #10]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	813b      	strh	r3, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	f040 80fd 	bne.w	8009d7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <HAL_I2C_Mem_Read+0x34>
 8009b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d105      	bne.n	8009b98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0f1      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d101      	bne.n	8009ba6 <HAL_I2C_Mem_Read+0x4e>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	e0ea      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009bae:	f7fe f875 	bl	8007c9c <HAL_GetTick>
 8009bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	2319      	movs	r3, #25
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fa63 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e0d5      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2222      	movs	r2, #34	; 0x22
 8009bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2240      	movs	r2, #64	; 0x40
 8009bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a3a      	ldr	r2, [r7, #32]
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bf8:	88f8      	ldrh	r0, [r7, #6]
 8009bfa:	893a      	ldrh	r2, [r7, #8]
 8009bfc:	8979      	ldrh	r1, [r7, #10]
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	4603      	mov	r3, r0
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f9c7 	bl	8009f9c <I2C_RequestMemoryRead>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e0ad      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	2bff      	cmp	r3, #255	; 0xff
 8009c28:	d90e      	bls.n	8009c48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	8979      	ldrh	r1, [r7, #10]
 8009c38:	4b52      	ldr	r3, [pc, #328]	; (8009d84 <HAL_I2C_Mem_Read+0x22c>)
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fbb1 	bl	800a3a8 <I2C_TransferConfig>
 8009c46:	e00f      	b.n	8009c68 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	8979      	ldrh	r1, [r7, #10]
 8009c5a:	4b4a      	ldr	r3, [pc, #296]	; (8009d84 <HAL_I2C_Mem_Read+0x22c>)
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fba0 	bl	800a3a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2104      	movs	r1, #4
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 fa0a 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e07c      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d034      	beq.n	8009d28 <HAL_I2C_Mem_Read+0x1d0>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d130      	bne.n	8009d28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2180      	movs	r1, #128	; 0x80
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f9db 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e04d      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	2bff      	cmp	r3, #255	; 0xff
 8009ce8:	d90e      	bls.n	8009d08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	22ff      	movs	r2, #255	; 0xff
 8009cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	8979      	ldrh	r1, [r7, #10]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 fb51 	bl	800a3a8 <I2C_TransferConfig>
 8009d06:	e00f      	b.n	8009d28 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	8979      	ldrh	r1, [r7, #10]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 fb40 	bl	800a3a8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d19a      	bne.n	8009c68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 fa28 	bl	800a18c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e01a      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6859      	ldr	r1, [r3, #4]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <HAL_I2C_Mem_Read+0x230>)
 8009d5a:	400b      	ands	r3, r1
 8009d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2220      	movs	r2, #32
 8009d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	e000      	b.n	8009d7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009d7a:	2302      	movs	r3, #2
  }
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	80002400 	.word	0x80002400
 8009d88:	fe00e800 	.word	0xfe00e800

08009d8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	f040 80ef 	bne.w	8009f8c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dbc:	d101      	bne.n	8009dc2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e0e5      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_I2C_IsDeviceReady+0x44>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e0de      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2224      	movs	r2, #36	; 0x24
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d105      	bne.n	8009dfa <HAL_I2C_IsDeviceReady+0x6e>
 8009dee:	897b      	ldrh	r3, [r7, #10]
 8009df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009df4:	4b68      	ldr	r3, [pc, #416]	; (8009f98 <HAL_I2C_IsDeviceReady+0x20c>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	e004      	b.n	8009e04 <HAL_I2C_IsDeviceReady+0x78>
 8009dfa:	897b      	ldrh	r3, [r7, #10]
 8009dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e00:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8009e0a:	f7fd ff47 	bl	8007c9c <HAL_GetTick>
 8009e0e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	bf0c      	ite	eq
 8009e1e:	2301      	moveq	r3, #1
 8009e20:	2300      	movne	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	f003 0310 	and.w	r3, r3, #16
 8009e30:	2b10      	cmp	r3, #16
 8009e32:	bf0c      	ite	eq
 8009e34:	2301      	moveq	r3, #1
 8009e36:	2300      	movne	r3, #0
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009e3c:	e034      	b.n	8009ea8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d01a      	beq.n	8009e7c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e46:	f7fd ff29 	bl	8007c9c <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d302      	bcc.n	8009e5c <HAL_I2C_IsDeviceReady+0xd0>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10f      	bne.n	8009e7c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e68:	f043 0220 	orr.w	r2, r3, #32
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e088      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	bf0c      	ite	eq
 8009e8a:	2301      	moveq	r3, #1
 8009e8c:	2300      	movne	r3, #0
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	bf0c      	ite	eq
 8009ea0:	2301      	moveq	r3, #1
 8009ea2:	2300      	movne	r3, #0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8009ea8:	7ffb      	ldrb	r3, [r7, #31]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d102      	bne.n	8009eb4 <HAL_I2C_IsDeviceReady+0x128>
 8009eae:	7fbb      	ldrb	r3, [r7, #30]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0c4      	beq.n	8009e3e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f003 0310 	and.w	r3, r3, #16
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d01a      	beq.n	8009ef8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2120      	movs	r1, #32
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f8dd 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e058      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e04a      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	2120      	movs	r1, #32
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 f8c2 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e03d      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2210      	movs	r2, #16
 8009f18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d118      	bne.n	8009f5c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f38:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2200      	movs	r2, #0
 8009f42:	2120      	movs	r1, #32
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f8a1 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e01c      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	f63f af3d 	bhi.w	8009de6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8009f8c:	2302      	movs	r3, #2
  }
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	02002000 	.word	0x02002000

08009f9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	817b      	strh	r3, [r7, #10]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	813b      	strh	r3, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	8979      	ldrh	r1, [r7, #10]
 8009fbc:	4b20      	ldr	r3, [pc, #128]	; (800a040 <I2C_RequestMemoryRead+0xa4>)
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 f9f0 	bl	800a3a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	69b9      	ldr	r1, [r7, #24]
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 f89d 	bl	800a10c <I2C_WaitOnTXISFlagUntilTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e02c      	b.n	800a036 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fdc:	88fb      	ldrh	r3, [r7, #6]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d105      	bne.n	8009fee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fe2:	893b      	ldrh	r3, [r7, #8]
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	629a      	str	r2, [r3, #40]	; 0x28
 8009fec:	e015      	b.n	800a01a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009fee:	893b      	ldrh	r3, [r7, #8]
 8009ff0:	0a1b      	lsrs	r3, r3, #8
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ffc:	69fa      	ldr	r2, [r7, #28]
 8009ffe:	69b9      	ldr	r1, [r7, #24]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f883 	bl	800a10c <I2C_WaitOnTXISFlagUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e012      	b.n	800a036 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a010:	893b      	ldrh	r3, [r7, #8]
 800a012:	b2da      	uxtb	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	2200      	movs	r2, #0
 800a022:	2140      	movs	r1, #64	; 0x40
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 f831 	bl	800a08c <I2C_WaitOnFlagUntilTimeout>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	80002000 	.word	0x80002000

0800a044 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b02      	cmp	r3, #2
 800a058:	d103      	bne.n	800a062 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2200      	movs	r2, #0
 800a060:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d007      	beq.n	800a080 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	699a      	ldr	r2, [r3, #24]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0201 	orr.w	r2, r2, #1
 800a07e:	619a      	str	r2, [r3, #24]
  }
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	4613      	mov	r3, r2
 800a09a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a09c:	e022      	b.n	800a0e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a4:	d01e      	beq.n	800a0e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0a6:	f7fd fdf9 	bl	8007c9c <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d302      	bcc.n	800a0bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d113      	bne.n	800a0e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c0:	f043 0220 	orr.w	r2, r3, #32
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e00f      	b.n	800a104 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	bf0c      	ite	eq
 800a0f4:	2301      	moveq	r3, #1
 800a0f6:	2300      	movne	r3, #0
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d0cd      	beq.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a118:	e02c      	b.n	800a174 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 f8dc 	bl	800a2dc <I2C_IsAcknowledgeFailed>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e02a      	b.n	800a184 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d01e      	beq.n	800a174 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a136:	f7fd fdb1 	bl	8007c9c <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	429a      	cmp	r2, r3
 800a144:	d302      	bcc.n	800a14c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d113      	bne.n	800a174 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a150:	f043 0220 	orr.w	r2, r3, #32
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e007      	b.n	800a184 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d1cb      	bne.n	800a11a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a198:	e028      	b.n	800a1ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68b9      	ldr	r1, [r7, #8]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 f89c 	bl	800a2dc <I2C_IsAcknowledgeFailed>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e026      	b.n	800a1fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ae:	f7fd fd75 	bl	8007c9c <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d302      	bcc.n	800a1c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d113      	bne.n	800a1ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c8:	f043 0220 	orr.w	r2, r3, #32
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e007      	b.n	800a1fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d1cf      	bne.n	800a19a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a210:	e055      	b.n	800a2be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	68b9      	ldr	r1, [r7, #8]
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 f860 	bl	800a2dc <I2C_IsAcknowledgeFailed>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e053      	b.n	800a2ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b20      	cmp	r3, #32
 800a232:	d129      	bne.n	800a288 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	f003 0304 	and.w	r3, r3, #4
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d105      	bne.n	800a24e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	e03f      	b.n	800a2ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2220      	movs	r2, #32
 800a254:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6859      	ldr	r1, [r3, #4]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	4b1d      	ldr	r3, [pc, #116]	; (800a2d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a262:	400b      	ands	r3, r1
 800a264:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2220      	movs	r2, #32
 800a270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e022      	b.n	800a2ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a288:	f7fd fd08 	bl	8007c9c <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d302      	bcc.n	800a29e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10f      	bne.n	800a2be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a2:	f043 0220 	orr.w	r2, r3, #32
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e007      	b.n	800a2ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d1a2      	bne.n	800a212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	fe00e800 	.word	0xfe00e800

0800a2dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d151      	bne.n	800a39a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2f6:	e022      	b.n	800a33e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fe:	d01e      	beq.n	800a33e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a300:	f7fd fccc 	bl	8007c9c <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <I2C_IsAcknowledgeFailed+0x3a>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d113      	bne.n	800a33e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31a:	f043 0220 	orr.w	r2, r3, #32
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e02e      	b.n	800a39c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	f003 0320 	and.w	r3, r3, #32
 800a348:	2b20      	cmp	r3, #32
 800a34a:	d1d5      	bne.n	800a2f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2210      	movs	r2, #16
 800a352:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2220      	movs	r2, #32
 800a35a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fe71 	bl	800a044 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6859      	ldr	r1, [r3, #4]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a36e:	400b      	ands	r3, r1
 800a370:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a376:	f043 0204 	orr.w	r2, r3, #4
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	fe00e800 	.word	0xfe00e800

0800a3a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	607b      	str	r3, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	817b      	strh	r3, [r7, #10]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	0d5b      	lsrs	r3, r3, #21
 800a3c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a3c8:	4b0d      	ldr	r3, [pc, #52]	; (800a400 <I2C_TransferConfig+0x58>)
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	43db      	mvns	r3, r3
 800a3ce:	ea02 0103 	and.w	r1, r2, r3
 800a3d2:	897b      	ldrh	r3, [r7, #10]
 800a3d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a3d8:	7a7b      	ldrb	r3, [r7, #9]
 800a3da:	041b      	lsls	r3, r3, #16
 800a3dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a3f2:	bf00      	nop
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	03ff63ff 	.word	0x03ff63ff

0800a404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b20      	cmp	r3, #32
 800a418:	d138      	bne.n	800a48c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a420:	2b01      	cmp	r3, #1
 800a422:	d101      	bne.n	800a428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a424:	2302      	movs	r3, #2
 800a426:	e032      	b.n	800a48e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2224      	movs	r2, #36	; 0x24
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0201 	bic.w	r2, r2, #1
 800a446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6819      	ldr	r1, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0201 	orr.w	r2, r2, #1
 800a476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e000      	b.n	800a48e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a48c:	2302      	movs	r3, #2
  }
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d139      	bne.n	800a524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	e033      	b.n	800a526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2224      	movs	r2, #36	; 0x24
 800a4ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0201 	bic.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a4ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f042 0201 	orr.w	r2, r2, #1
 800a50e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e000      	b.n	800a526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a524:	2302      	movs	r3, #2
  }
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a540:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a546:	6453      	str	r3, [r2, #68]	; 0x44
 800a548:	4b08      	ldr	r3, [pc, #32]	; (800a56c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	4905      	ldr	r1, [pc, #20]	; (800a570 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	604b      	str	r3, [r1, #4]
}
 800a560:	bf00      	nop
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	40023800 	.word	0x40023800
 800a570:	40013800 	.word	0x40013800

0800a574 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a576:	b08f      	sub	sp, #60	; 0x3c
 800a578:	af0a      	add	r7, sp, #40	; 0x28
 800a57a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e116      	b.n	800a7b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7fc fdcd 	bl	8007140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f003 fd73 	bl	800e0b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	603b      	str	r3, [r7, #0]
 800a5d0:	687e      	ldr	r6, [r7, #4]
 800a5d2:	466d      	mov	r5, sp
 800a5d4:	f106 0410 	add.w	r4, r6, #16
 800a5d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a5da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a5dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a5de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a5e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a5e4:	e885 0003 	stmia.w	r5, {r0, r1}
 800a5e8:	1d33      	adds	r3, r6, #4
 800a5ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5ec:	6838      	ldr	r0, [r7, #0]
 800a5ee:	f003 fd07 	bl	800e000 <USB_CoreInit>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0d7      	b.n	800a7b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2100      	movs	r1, #0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f003 fd61 	bl	800e0d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
 800a614:	e04a      	b.n	800a6ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a616:	7bfa      	ldrb	r2, [r7, #15]
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	4613      	mov	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	440b      	add	r3, r1
 800a624:	333d      	adds	r3, #61	; 0x3d
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a62a:	7bfa      	ldrb	r2, [r7, #15]
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	4613      	mov	r3, r2
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	1a9b      	subs	r3, r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	440b      	add	r3, r1
 800a638:	333c      	adds	r3, #60	; 0x3c
 800a63a:	7bfa      	ldrb	r2, [r7, #15]
 800a63c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a63e:	7bfa      	ldrb	r2, [r7, #15]
 800a640:	7bfb      	ldrb	r3, [r7, #15]
 800a642:	b298      	uxth	r0, r3
 800a644:	6879      	ldr	r1, [r7, #4]
 800a646:	4613      	mov	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	1a9b      	subs	r3, r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	440b      	add	r3, r1
 800a650:	3342      	adds	r3, #66	; 0x42
 800a652:	4602      	mov	r2, r0
 800a654:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a656:	7bfa      	ldrb	r2, [r7, #15]
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	4613      	mov	r3, r2
 800a65c:	00db      	lsls	r3, r3, #3
 800a65e:	1a9b      	subs	r3, r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	333f      	adds	r3, #63	; 0x3f
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a66a:	7bfa      	ldrb	r2, [r7, #15]
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	4613      	mov	r3, r2
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	1a9b      	subs	r3, r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	440b      	add	r3, r1
 800a678:	3344      	adds	r3, #68	; 0x44
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a67e:	7bfa      	ldrb	r2, [r7, #15]
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	1a9b      	subs	r3, r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	3348      	adds	r3, #72	; 0x48
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a692:	7bfa      	ldrb	r2, [r7, #15]
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	4613      	mov	r3, r2
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	440b      	add	r3, r1
 800a6a0:	3350      	adds	r3, #80	; 0x50
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	73fb      	strb	r3, [r7, #15]
 800a6ac:	7bfa      	ldrb	r2, [r7, #15]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3af      	bcc.n	800a616 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
 800a6ba:	e044      	b.n	800a746 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a6bc:	7bfa      	ldrb	r2, [r7, #15]
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a6d2:	7bfa      	ldrb	r2, [r7, #15]
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	1a9b      	subs	r3, r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a6e4:	7bfa      	ldrb	r2, [r7, #15]
 800a6e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a6e8:	7bfa      	ldrb	r2, [r7, #15]
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	1a9b      	subs	r3, r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	440b      	add	r3, r1
 800a6f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a6fe:	7bfa      	ldrb	r2, [r7, #15]
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a714:	7bfa      	ldrb	r2, [r7, #15]
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4613      	mov	r3, r2
 800a71a:	00db      	lsls	r3, r3, #3
 800a71c:	1a9b      	subs	r3, r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	440b      	add	r3, r1
 800a722:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a72a:	7bfa      	ldrb	r2, [r7, #15]
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	1a9b      	subs	r3, r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	3301      	adds	r3, #1
 800a744:	73fb      	strb	r3, [r7, #15]
 800a746:	7bfa      	ldrb	r2, [r7, #15]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d3b5      	bcc.n	800a6bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	687e      	ldr	r6, [r7, #4]
 800a758:	466d      	mov	r5, sp
 800a75a:	f106 0410 	add.w	r4, r6, #16
 800a75e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a76a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a76e:	1d33      	adds	r3, r6, #4
 800a770:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a772:	6838      	ldr	r0, [r7, #0]
 800a774:	f003 fcd8 	bl	800e128 <USB_DevInit>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e014      	b.n	800a7b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d102      	bne.n	800a7a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f80a 	bl	800a7bc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f003 fe8a 	bl	800e4c6 <USB_DevDisconnect>

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <HAL_PCDEx_ActivateLPM+0x44>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	10000003 	.word	0x10000003

0800a804 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a804:	b480      	push	{r7}
 800a806:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a04      	ldr	r2, [pc, #16]	; (800a820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a80e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a812:	6013      	str	r3, [r2, #0]
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	40007000 	.word	0x40007000

0800a824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a82c:	2300      	movs	r3, #0
 800a82e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e29b      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 8087 	beq.w	800a956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a848:	4b96      	ldr	r3, [pc, #600]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f003 030c 	and.w	r3, r3, #12
 800a850:	2b04      	cmp	r3, #4
 800a852:	d00c      	beq.n	800a86e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a854:	4b93      	ldr	r3, [pc, #588]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f003 030c 	and.w	r3, r3, #12
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d112      	bne.n	800a886 <HAL_RCC_OscConfig+0x62>
 800a860:	4b90      	ldr	r3, [pc, #576]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a86c:	d10b      	bne.n	800a886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a86e:	4b8d      	ldr	r3, [pc, #564]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d06c      	beq.n	800a954 <HAL_RCC_OscConfig+0x130>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d168      	bne.n	800a954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e275      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a88e:	d106      	bne.n	800a89e <HAL_RCC_OscConfig+0x7a>
 800a890:	4b84      	ldr	r3, [pc, #528]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a83      	ldr	r2, [pc, #524]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	e02e      	b.n	800a8fc <HAL_RCC_OscConfig+0xd8>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10c      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x9c>
 800a8a6:	4b7f      	ldr	r3, [pc, #508]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a7e      	ldr	r2, [pc, #504]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	4b7c      	ldr	r3, [pc, #496]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a7b      	ldr	r2, [pc, #492]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	e01d      	b.n	800a8fc <HAL_RCC_OscConfig+0xd8>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8c8:	d10c      	bne.n	800a8e4 <HAL_RCC_OscConfig+0xc0>
 800a8ca:	4b76      	ldr	r3, [pc, #472]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a75      	ldr	r2, [pc, #468]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4b73      	ldr	r3, [pc, #460]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a72      	ldr	r2, [pc, #456]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	e00b      	b.n	800a8fc <HAL_RCC_OscConfig+0xd8>
 800a8e4:	4b6f      	ldr	r3, [pc, #444]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a6e      	ldr	r2, [pc, #440]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	4b6c      	ldr	r3, [pc, #432]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a6b      	ldr	r2, [pc, #428]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a8f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d013      	beq.n	800a92c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a904:	f7fd f9ca 	bl	8007c9c <HAL_GetTick>
 800a908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a90c:	f7fd f9c6 	bl	8007c9c <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b64      	cmp	r3, #100	; 0x64
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e229      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a91e:	4b61      	ldr	r3, [pc, #388]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f0      	beq.n	800a90c <HAL_RCC_OscConfig+0xe8>
 800a92a:	e014      	b.n	800a956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92c:	f7fd f9b6 	bl	8007c9c <HAL_GetTick>
 800a930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a932:	e008      	b.n	800a946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a934:	f7fd f9b2 	bl	8007c9c <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	2b64      	cmp	r3, #100	; 0x64
 800a940:	d901      	bls.n	800a946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e215      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a946:	4b57      	ldr	r3, [pc, #348]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f0      	bne.n	800a934 <HAL_RCC_OscConfig+0x110>
 800a952:	e000      	b.n	800a956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d069      	beq.n	800aa36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a962:	4b50      	ldr	r3, [pc, #320]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 030c 	and.w	r3, r3, #12
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a96e:	4b4d      	ldr	r3, [pc, #308]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f003 030c 	and.w	r3, r3, #12
 800a976:	2b08      	cmp	r3, #8
 800a978:	d11c      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x190>
 800a97a:	4b4a      	ldr	r3, [pc, #296]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d116      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a986:	4b47      	ldr	r3, [pc, #284]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <HAL_RCC_OscConfig+0x17a>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d001      	beq.n	800a99e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e1e9      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a99e:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	493d      	ldr	r1, [pc, #244]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9b2:	e040      	b.n	800aa36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d023      	beq.n	800aa04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9bc:	4b39      	ldr	r3, [pc, #228]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a38      	ldr	r2, [pc, #224]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c8:	f7fd f968 	bl	8007c9c <HAL_GetTick>
 800a9cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d0:	f7fd f964 	bl	8007c9c <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e1c7      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9e2:	4b30      	ldr	r3, [pc, #192]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0f0      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9ee:	4b2d      	ldr	r3, [pc, #180]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4929      	ldr	r1, [pc, #164]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	600b      	str	r3, [r1, #0]
 800aa02:	e018      	b.n	800aa36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa04:	4b27      	ldr	r3, [pc, #156]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a26      	ldr	r2, [pc, #152]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa10:	f7fd f944 	bl	8007c9c <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa18:	f7fd f940 	bl	8007c9c <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e1a3      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2a:	4b1e      	ldr	r3, [pc, #120]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f0      	bne.n	800aa18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d038      	beq.n	800aab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d019      	beq.n	800aa7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa4a:	4b16      	ldr	r3, [pc, #88]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa4e:	4a15      	ldr	r2, [pc, #84]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa56:	f7fd f921 	bl	8007c9c <HAL_GetTick>
 800aa5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa5c:	e008      	b.n	800aa70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa5e:	f7fd f91d 	bl	8007c9c <HAL_GetTick>
 800aa62:	4602      	mov	r2, r0
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d901      	bls.n	800aa70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e180      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa70:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0f0      	beq.n	800aa5e <HAL_RCC_OscConfig+0x23a>
 800aa7c:	e01a      	b.n	800aab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7e:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa82:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <HAL_RCC_OscConfig+0x280>)
 800aa84:	f023 0301 	bic.w	r3, r3, #1
 800aa88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa8a:	f7fd f907 	bl	8007c9c <HAL_GetTick>
 800aa8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa90:	e00a      	b.n	800aaa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa92:	f7fd f903 	bl	8007c9c <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d903      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e166      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
 800aaa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaa8:	4b92      	ldr	r3, [pc, #584]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800aaaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1ee      	bne.n	800aa92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 80a4 	beq.w	800ac0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aac2:	4b8c      	ldr	r3, [pc, #560]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10d      	bne.n	800aaea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800aace:	4b89      	ldr	r3, [pc, #548]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	4a88      	ldr	r2, [pc, #544]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800aad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aad8:	6413      	str	r3, [r2, #64]	; 0x40
 800aada:	4b86      	ldr	r3, [pc, #536]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aae2:	60bb      	str	r3, [r7, #8]
 800aae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aae6:	2301      	movs	r3, #1
 800aae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aaea:	4b83      	ldr	r3, [pc, #524]	; (800acf8 <HAL_RCC_OscConfig+0x4d4>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d118      	bne.n	800ab28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800aaf6:	4b80      	ldr	r3, [pc, #512]	; (800acf8 <HAL_RCC_OscConfig+0x4d4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a7f      	ldr	r2, [pc, #508]	; (800acf8 <HAL_RCC_OscConfig+0x4d4>)
 800aafc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab02:	f7fd f8cb 	bl	8007c9c <HAL_GetTick>
 800ab06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab08:	e008      	b.n	800ab1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab0a:	f7fd f8c7 	bl	8007c9c <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b64      	cmp	r3, #100	; 0x64
 800ab16:	d901      	bls.n	800ab1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e12a      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab1c:	4b76      	ldr	r3, [pc, #472]	; (800acf8 <HAL_RCC_OscConfig+0x4d4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0f0      	beq.n	800ab0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d106      	bne.n	800ab3e <HAL_RCC_OscConfig+0x31a>
 800ab30:	4b70      	ldr	r3, [pc, #448]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab34:	4a6f      	ldr	r2, [pc, #444]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab3c:	e02d      	b.n	800ab9a <HAL_RCC_OscConfig+0x376>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d10c      	bne.n	800ab60 <HAL_RCC_OscConfig+0x33c>
 800ab46:	4b6b      	ldr	r3, [pc, #428]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4a:	4a6a      	ldr	r2, [pc, #424]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab4c:	f023 0301 	bic.w	r3, r3, #1
 800ab50:	6713      	str	r3, [r2, #112]	; 0x70
 800ab52:	4b68      	ldr	r3, [pc, #416]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab56:	4a67      	ldr	r2, [pc, #412]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab58:	f023 0304 	bic.w	r3, r3, #4
 800ab5c:	6713      	str	r3, [r2, #112]	; 0x70
 800ab5e:	e01c      	b.n	800ab9a <HAL_RCC_OscConfig+0x376>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	2b05      	cmp	r3, #5
 800ab66:	d10c      	bne.n	800ab82 <HAL_RCC_OscConfig+0x35e>
 800ab68:	4b62      	ldr	r3, [pc, #392]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6c:	4a61      	ldr	r2, [pc, #388]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab6e:	f043 0304 	orr.w	r3, r3, #4
 800ab72:	6713      	str	r3, [r2, #112]	; 0x70
 800ab74:	4b5f      	ldr	r3, [pc, #380]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	4a5e      	ldr	r2, [pc, #376]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab7a:	f043 0301 	orr.w	r3, r3, #1
 800ab7e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab80:	e00b      	b.n	800ab9a <HAL_RCC_OscConfig+0x376>
 800ab82:	4b5c      	ldr	r3, [pc, #368]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab86:	4a5b      	ldr	r2, [pc, #364]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	6713      	str	r3, [r2, #112]	; 0x70
 800ab8e:	4b59      	ldr	r3, [pc, #356]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab92:	4a58      	ldr	r2, [pc, #352]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ab94:	f023 0304 	bic.w	r3, r3, #4
 800ab98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d015      	beq.n	800abce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aba2:	f7fd f87b 	bl	8007c9c <HAL_GetTick>
 800aba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba8:	e00a      	b.n	800abc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abaa:	f7fd f877 	bl	8007c9c <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb8:	4293      	cmp	r3, r2
 800abba:	d901      	bls.n	800abc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e0d8      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc0:	4b4c      	ldr	r3, [pc, #304]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800abc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc4:	f003 0302 	and.w	r3, r3, #2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0ee      	beq.n	800abaa <HAL_RCC_OscConfig+0x386>
 800abcc:	e014      	b.n	800abf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abce:	f7fd f865 	bl	8007c9c <HAL_GetTick>
 800abd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abd4:	e00a      	b.n	800abec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abd6:	f7fd f861 	bl	8007c9c <HAL_GetTick>
 800abda:	4602      	mov	r2, r0
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d901      	bls.n	800abec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e0c2      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abec:	4b41      	ldr	r3, [pc, #260]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800abee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf0:	f003 0302 	and.w	r3, r3, #2
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1ee      	bne.n	800abd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d105      	bne.n	800ac0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abfe:	4b3d      	ldr	r3, [pc, #244]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac02:	4a3c      	ldr	r2, [pc, #240]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 80ae 	beq.w	800ad70 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac14:	4b37      	ldr	r3, [pc, #220]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f003 030c 	and.w	r3, r3, #12
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d06d      	beq.n	800acfc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d14b      	bne.n	800acc0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac28:	4b32      	ldr	r3, [pc, #200]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a31      	ldr	r2, [pc, #196]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac34:	f7fd f832 	bl	8007c9c <HAL_GetTick>
 800ac38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac3a:	e008      	b.n	800ac4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac3c:	f7fd f82e 	bl	8007c9c <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d901      	bls.n	800ac4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e091      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac4e:	4b29      	ldr	r3, [pc, #164]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1f0      	bne.n	800ac3c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	69da      	ldr	r2, [r3, #28]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	431a      	orrs	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	019b      	lsls	r3, r3, #6
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	3b01      	subs	r3, #1
 800ac74:	041b      	lsls	r3, r3, #16
 800ac76:	431a      	orrs	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	061b      	lsls	r3, r3, #24
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac84:	071b      	lsls	r3, r3, #28
 800ac86:	491b      	ldr	r1, [pc, #108]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac8c:	4b19      	ldr	r3, [pc, #100]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a18      	ldr	r2, [pc, #96]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ac92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac98:	f7fd f800 	bl	8007c9c <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aca0:	f7fc fffc 	bl	8007c9c <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d901      	bls.n	800acb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e05f      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acb2:	4b10      	ldr	r3, [pc, #64]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0f0      	beq.n	800aca0 <HAL_RCC_OscConfig+0x47c>
 800acbe:	e057      	b.n	800ad70 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acc0:	4b0c      	ldr	r3, [pc, #48]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a0b      	ldr	r2, [pc, #44]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800acc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800accc:	f7fc ffe6 	bl	8007c9c <HAL_GetTick>
 800acd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acd2:	e008      	b.n	800ace6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acd4:	f7fc ffe2 	bl	8007c9c <HAL_GetTick>
 800acd8:	4602      	mov	r2, r0
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d901      	bls.n	800ace6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e045      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ace6:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <HAL_RCC_OscConfig+0x4d0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1f0      	bne.n	800acd4 <HAL_RCC_OscConfig+0x4b0>
 800acf2:	e03d      	b.n	800ad70 <HAL_RCC_OscConfig+0x54c>
 800acf4:	40023800 	.word	0x40023800
 800acf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800acfc:	4b1f      	ldr	r3, [pc, #124]	; (800ad7c <HAL_RCC_OscConfig+0x558>)
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d030      	beq.n	800ad6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d129      	bne.n	800ad6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d122      	bne.n	800ad6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d119      	bne.n	800ad6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	3b01      	subs	r3, #1
 800ad46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d10f      	bne.n	800ad6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d107      	bne.n	800ad6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad66:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d001      	beq.n	800ad70 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	40023800 	.word	0x40023800

0800ad80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e0d0      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad98:	4b6a      	ldr	r3, [pc, #424]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 030f 	and.w	r3, r3, #15
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d910      	bls.n	800adc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ada6:	4b67      	ldr	r3, [pc, #412]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f023 020f 	bic.w	r2, r3, #15
 800adae:	4965      	ldr	r1, [pc, #404]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adb6:	4b63      	ldr	r3, [pc, #396]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 030f 	and.w	r3, r3, #15
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d001      	beq.n	800adc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e0b8      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d020      	beq.n	800ae16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d005      	beq.n	800adec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ade0:	4b59      	ldr	r3, [pc, #356]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	4a58      	ldr	r2, [pc, #352]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ade6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800adea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0308 	and.w	r3, r3, #8
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adf8:	4b53      	ldr	r3, [pc, #332]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	4a52      	ldr	r2, [pc, #328]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800adfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae04:	4b50      	ldr	r3, [pc, #320]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	494d      	ldr	r1, [pc, #308]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d040      	beq.n	800aea4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d107      	bne.n	800ae3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae2a:	4b47      	ldr	r3, [pc, #284]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d115      	bne.n	800ae62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e07f      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d107      	bne.n	800ae52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae42:	4b41      	ldr	r3, [pc, #260]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e073      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae52:	4b3d      	ldr	r3, [pc, #244]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0302 	and.w	r3, r3, #2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e06b      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae62:	4b39      	ldr	r3, [pc, #228]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f023 0203 	bic.w	r2, r3, #3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	4936      	ldr	r1, [pc, #216]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae74:	f7fc ff12 	bl	8007c9c <HAL_GetTick>
 800ae78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae7a:	e00a      	b.n	800ae92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae7c:	f7fc ff0e 	bl	8007c9c <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d901      	bls.n	800ae92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e053      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae92:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f003 020c 	and.w	r2, r3, #12
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d1eb      	bne.n	800ae7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aea4:	4b27      	ldr	r3, [pc, #156]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 030f 	and.w	r3, r3, #15
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d210      	bcs.n	800aed4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeb2:	4b24      	ldr	r3, [pc, #144]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f023 020f 	bic.w	r2, r3, #15
 800aeba:	4922      	ldr	r1, [pc, #136]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aec2:	4b20      	ldr	r3, [pc, #128]	; (800af44 <HAL_RCC_ClockConfig+0x1c4>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d001      	beq.n	800aed4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e032      	b.n	800af3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0304 	and.w	r3, r3, #4
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d008      	beq.n	800aef2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aee0:	4b19      	ldr	r3, [pc, #100]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	4916      	ldr	r1, [pc, #88]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0308 	and.w	r3, r3, #8
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d009      	beq.n	800af12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aefe:	4b12      	ldr	r3, [pc, #72]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	490e      	ldr	r1, [pc, #56]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800af0e:	4313      	orrs	r3, r2
 800af10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af12:	f000 f821 	bl	800af58 <HAL_RCC_GetSysClockFreq>
 800af16:	4602      	mov	r2, r0
 800af18:	4b0b      	ldr	r3, [pc, #44]	; (800af48 <HAL_RCC_ClockConfig+0x1c8>)
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	091b      	lsrs	r3, r3, #4
 800af1e:	f003 030f 	and.w	r3, r3, #15
 800af22:	490a      	ldr	r1, [pc, #40]	; (800af4c <HAL_RCC_ClockConfig+0x1cc>)
 800af24:	5ccb      	ldrb	r3, [r1, r3]
 800af26:	fa22 f303 	lsr.w	r3, r2, r3
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <HAL_RCC_ClockConfig+0x1d0>)
 800af2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af2e:	4b09      	ldr	r3, [pc, #36]	; (800af54 <HAL_RCC_ClockConfig+0x1d4>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f7fc f952 	bl	80071dc <HAL_InitTick>

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	40023c00 	.word	0x40023c00
 800af48:	40023800 	.word	0x40023800
 800af4c:	0801b938 	.word	0x0801b938
 800af50:	20000148 	.word	0x20000148
 800af54:	2000014c 	.word	0x2000014c

0800af58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af58:	b5b0      	push	{r4, r5, r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800af5e:	2100      	movs	r1, #0
 800af60:	6079      	str	r1, [r7, #4]
 800af62:	2100      	movs	r1, #0
 800af64:	60f9      	str	r1, [r7, #12]
 800af66:	2100      	movs	r1, #0
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800af6a:	2100      	movs	r1, #0
 800af6c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af6e:	4952      	ldr	r1, [pc, #328]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800af70:	6889      	ldr	r1, [r1, #8]
 800af72:	f001 010c 	and.w	r1, r1, #12
 800af76:	2908      	cmp	r1, #8
 800af78:	d00d      	beq.n	800af96 <HAL_RCC_GetSysClockFreq+0x3e>
 800af7a:	2908      	cmp	r1, #8
 800af7c:	f200 8094 	bhi.w	800b0a8 <HAL_RCC_GetSysClockFreq+0x150>
 800af80:	2900      	cmp	r1, #0
 800af82:	d002      	beq.n	800af8a <HAL_RCC_GetSysClockFreq+0x32>
 800af84:	2904      	cmp	r1, #4
 800af86:	d003      	beq.n	800af90 <HAL_RCC_GetSysClockFreq+0x38>
 800af88:	e08e      	b.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af8a:	4b4c      	ldr	r3, [pc, #304]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x164>)
 800af8c:	60bb      	str	r3, [r7, #8]
      break;
 800af8e:	e08e      	b.n	800b0ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af90:	4b4b      	ldr	r3, [pc, #300]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x168>)
 800af92:	60bb      	str	r3, [r7, #8]
      break;
 800af94:	e08b      	b.n	800b0ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af96:	4948      	ldr	r1, [pc, #288]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800af98:	6849      	ldr	r1, [r1, #4]
 800af9a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800af9e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800afa0:	4945      	ldr	r1, [pc, #276]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800afa2:	6849      	ldr	r1, [r1, #4]
 800afa4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800afa8:	2900      	cmp	r1, #0
 800afaa:	d024      	beq.n	800aff6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afac:	4942      	ldr	r1, [pc, #264]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800afae:	6849      	ldr	r1, [r1, #4]
 800afb0:	0989      	lsrs	r1, r1, #6
 800afb2:	4608      	mov	r0, r1
 800afb4:	f04f 0100 	mov.w	r1, #0
 800afb8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800afbc:	f04f 0500 	mov.w	r5, #0
 800afc0:	ea00 0204 	and.w	r2, r0, r4
 800afc4:	ea01 0305 	and.w	r3, r1, r5
 800afc8:	493d      	ldr	r1, [pc, #244]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x168>)
 800afca:	fb01 f003 	mul.w	r0, r1, r3
 800afce:	2100      	movs	r1, #0
 800afd0:	fb01 f102 	mul.w	r1, r1, r2
 800afd4:	1844      	adds	r4, r0, r1
 800afd6:	493a      	ldr	r1, [pc, #232]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x168>)
 800afd8:	fba2 0101 	umull	r0, r1, r2, r1
 800afdc:	1863      	adds	r3, r4, r1
 800afde:	4619      	mov	r1, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	f7f5 fb3e 	bl	8000668 <__aeabi_uldivmod>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4613      	mov	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e04a      	b.n	800b08c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aff6:	4b30      	ldr	r3, [pc, #192]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	099b      	lsrs	r3, r3, #6
 800affc:	461a      	mov	r2, r3
 800affe:	f04f 0300 	mov.w	r3, #0
 800b002:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b006:	f04f 0100 	mov.w	r1, #0
 800b00a:	ea02 0400 	and.w	r4, r2, r0
 800b00e:	ea03 0501 	and.w	r5, r3, r1
 800b012:	4620      	mov	r0, r4
 800b014:	4629      	mov	r1, r5
 800b016:	f04f 0200 	mov.w	r2, #0
 800b01a:	f04f 0300 	mov.w	r3, #0
 800b01e:	014b      	lsls	r3, r1, #5
 800b020:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b024:	0142      	lsls	r2, r0, #5
 800b026:	4610      	mov	r0, r2
 800b028:	4619      	mov	r1, r3
 800b02a:	1b00      	subs	r0, r0, r4
 800b02c:	eb61 0105 	sbc.w	r1, r1, r5
 800b030:	f04f 0200 	mov.w	r2, #0
 800b034:	f04f 0300 	mov.w	r3, #0
 800b038:	018b      	lsls	r3, r1, #6
 800b03a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b03e:	0182      	lsls	r2, r0, #6
 800b040:	1a12      	subs	r2, r2, r0
 800b042:	eb63 0301 	sbc.w	r3, r3, r1
 800b046:	f04f 0000 	mov.w	r0, #0
 800b04a:	f04f 0100 	mov.w	r1, #0
 800b04e:	00d9      	lsls	r1, r3, #3
 800b050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b054:	00d0      	lsls	r0, r2, #3
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	1912      	adds	r2, r2, r4
 800b05c:	eb45 0303 	adc.w	r3, r5, r3
 800b060:	f04f 0000 	mov.w	r0, #0
 800b064:	f04f 0100 	mov.w	r1, #0
 800b068:	0299      	lsls	r1, r3, #10
 800b06a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b06e:	0290      	lsls	r0, r2, #10
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4610      	mov	r0, r2
 800b076:	4619      	mov	r1, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f04f 0300 	mov.w	r3, #0
 800b080:	f7f5 faf2 	bl	8000668 <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4613      	mov	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	0c1b      	lsrs	r3, r3, #16
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	3301      	adds	r3, #1
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a4:	60bb      	str	r3, [r7, #8]
      break;
 800b0a6:	e002      	b.n	800b0ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b0a8:	4b04      	ldr	r3, [pc, #16]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x164>)
 800b0aa:	60bb      	str	r3, [r7, #8]
      break;
 800b0ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bdb0      	pop	{r4, r5, r7, pc}
 800b0b8:	40023800 	.word	0x40023800
 800b0bc:	00f42400 	.word	0x00f42400
 800b0c0:	017d7840 	.word	0x017d7840

0800b0c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b0c8:	4b03      	ldr	r3, [pc, #12]	; (800b0d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	20000148 	.word	0x20000148

0800b0dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b0e0:	f7ff fff0 	bl	800b0c4 <HAL_RCC_GetHCLKFreq>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	0a9b      	lsrs	r3, r3, #10
 800b0ec:	f003 0307 	and.w	r3, r3, #7
 800b0f0:	4903      	ldr	r1, [pc, #12]	; (800b100 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0f2:	5ccb      	ldrb	r3, [r1, r3]
 800b0f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	40023800 	.word	0x40023800
 800b100:	0801b948 	.word	0x0801b948

0800b104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b108:	f7ff ffdc 	bl	800b0c4 <HAL_RCC_GetHCLKFreq>
 800b10c:	4602      	mov	r2, r0
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	0b5b      	lsrs	r3, r3, #13
 800b114:	f003 0307 	and.w	r3, r3, #7
 800b118:	4903      	ldr	r1, [pc, #12]	; (800b128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b11a:	5ccb      	ldrb	r3, [r1, r3]
 800b11c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b120:	4618      	mov	r0, r3
 800b122:	bd80      	pop	{r7, pc}
 800b124:	40023800 	.word	0x40023800
 800b128:	0801b948 	.word	0x0801b948

0800b12c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	220f      	movs	r2, #15
 800b13a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b13c:	4b12      	ldr	r3, [pc, #72]	; (800b188 <HAL_RCC_GetClockConfig+0x5c>)
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f003 0203 	and.w	r2, r3, #3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b148:	4b0f      	ldr	r3, [pc, #60]	; (800b188 <HAL_RCC_GetClockConfig+0x5c>)
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b154:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <HAL_RCC_GetClockConfig+0x5c>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b160:	4b09      	ldr	r3, [pc, #36]	; (800b188 <HAL_RCC_GetClockConfig+0x5c>)
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	08db      	lsrs	r3, r3, #3
 800b166:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b16e:	4b07      	ldr	r3, [pc, #28]	; (800b18c <HAL_RCC_GetClockConfig+0x60>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 020f 	and.w	r2, r3, #15
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	601a      	str	r2, [r3, #0]
}
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	40023800 	.word	0x40023800
 800b18c:	40023c00 	.word	0x40023c00

0800b190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d012      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b1b8:	4b69      	ldr	r3, [pc, #420]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	4a68      	ldr	r2, [pc, #416]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b1c2:	6093      	str	r3, [r2, #8]
 800b1c4:	4b66      	ldr	r3, [pc, #408]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1cc:	4964      	ldr	r1, [pc, #400]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d017      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b1ea:	4b5d      	ldr	r3, [pc, #372]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f8:	4959      	ldr	r1, [pc, #356]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b208:	d101      	bne.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b20a:	2301      	movs	r3, #1
 800b20c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b216:	2301      	movs	r3, #1
 800b218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d017      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b226:	4b4e      	ldr	r3, [pc, #312]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b22c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b234:	494a      	ldr	r1, [pc, #296]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b236:	4313      	orrs	r3, r2
 800b238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b244:	d101      	bne.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b246:	2301      	movs	r3, #1
 800b248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b252:	2301      	movs	r3, #1
 800b254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b262:	2301      	movs	r3, #1
 800b264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 808b 	beq.w	800b38a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b274:	4b3a      	ldr	r3, [pc, #232]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	4a39      	ldr	r2, [pc, #228]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b27a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b27e:	6413      	str	r3, [r2, #64]	; 0x40
 800b280:	4b37      	ldr	r3, [pc, #220]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b288:	60bb      	str	r3, [r7, #8]
 800b28a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b28c:	4b35      	ldr	r3, [pc, #212]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a34      	ldr	r2, [pc, #208]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b298:	f7fc fd00 	bl	8007c9c <HAL_GetTick>
 800b29c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b29e:	e008      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2a0:	f7fc fcfc 	bl	8007c9c <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b64      	cmp	r3, #100	; 0x64
 800b2ac:	d901      	bls.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e38d      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b2b2:	4b2c      	ldr	r3, [pc, #176]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0f0      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b2be:	4b28      	ldr	r3, [pc, #160]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d035      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d02e      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2dc:	4b20      	ldr	r3, [pc, #128]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b2e6:	4b1e      	ldr	r3, [pc, #120]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ea:	4a1d      	ldr	r2, [pc, #116]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	4a1a      	ldr	r2, [pc, #104]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b2fe:	4a18      	ldr	r2, [pc, #96]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b304:	4b16      	ldr	r3, [pc, #88]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d114      	bne.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b310:	f7fc fcc4 	bl	8007c9c <HAL_GetTick>
 800b314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b316:	e00a      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b318:	f7fc fcc0 	bl	8007c9c <HAL_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	f241 3288 	movw	r2, #5000	; 0x1388
 800b326:	4293      	cmp	r3, r2
 800b328:	d901      	bls.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e34f      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b32e:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0ee      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b346:	d111      	bne.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b354:	4b04      	ldr	r3, [pc, #16]	; (800b368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b356:	400b      	ands	r3, r1
 800b358:	4901      	ldr	r1, [pc, #4]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b35a:	4313      	orrs	r3, r2
 800b35c:	608b      	str	r3, [r1, #8]
 800b35e:	e00b      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b360:	40023800 	.word	0x40023800
 800b364:	40007000 	.word	0x40007000
 800b368:	0ffffcff 	.word	0x0ffffcff
 800b36c:	4bb3      	ldr	r3, [pc, #716]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	4ab2      	ldr	r2, [pc, #712]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b376:	6093      	str	r3, [r2, #8]
 800b378:	4bb0      	ldr	r3, [pc, #704]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b37a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b384:	49ad      	ldr	r1, [pc, #692]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b386:	4313      	orrs	r3, r2
 800b388:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0310 	and.w	r3, r3, #16
 800b392:	2b00      	cmp	r3, #0
 800b394:	d010      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b396:	4ba9      	ldr	r3, [pc, #676]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b39c:	4aa7      	ldr	r2, [pc, #668]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b39e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b3a6:	4ba5      	ldr	r3, [pc, #660]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b3a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b0:	49a2      	ldr	r1, [pc, #648]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00a      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b3c4:	4b9d      	ldr	r3, [pc, #628]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d2:	499a      	ldr	r1, [pc, #616]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00a      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b3e6:	4b95      	ldr	r3, [pc, #596]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3f4:	4991      	ldr	r1, [pc, #580]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00a      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b408:	4b8c      	ldr	r3, [pc, #560]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b40e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b416:	4989      	ldr	r1, [pc, #548]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b42a:	4b84      	ldr	r3, [pc, #528]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b438:	4980      	ldr	r1, [pc, #512]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00a      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b44c:	4b7b      	ldr	r3, [pc, #492]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b452:	f023 0203 	bic.w	r2, r3, #3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45a:	4978      	ldr	r1, [pc, #480]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b46e:	4b73      	ldr	r3, [pc, #460]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b474:	f023 020c 	bic.w	r2, r3, #12
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b47c:	496f      	ldr	r1, [pc, #444]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00a      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b490:	4b6a      	ldr	r3, [pc, #424]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b49e:	4967      	ldr	r1, [pc, #412]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00a      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b4b2:	4b62      	ldr	r3, [pc, #392]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c0:	495e      	ldr	r1, [pc, #376]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00a      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b4d4:	4b59      	ldr	r3, [pc, #356]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e2:	4956      	ldr	r1, [pc, #344]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b4f6:	4b51      	ldr	r3, [pc, #324]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b504:	494d      	ldr	r1, [pc, #308]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b506:	4313      	orrs	r3, r2
 800b508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00a      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b518:	4b48      	ldr	r3, [pc, #288]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b526:	4945      	ldr	r1, [pc, #276]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b528:	4313      	orrs	r3, r2
 800b52a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00a      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b53a:	4b40      	ldr	r3, [pc, #256]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b548:	493c      	ldr	r1, [pc, #240]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00a      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b55c:	4b37      	ldr	r3, [pc, #220]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b562:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b56a:	4934      	ldr	r1, [pc, #208]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b56c:	4313      	orrs	r3, r2
 800b56e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d011      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b57e:	4b2f      	ldr	r3, [pc, #188]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b58c:	492b      	ldr	r1, [pc, #172]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b59c:	d101      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0308 	and.w	r3, r3, #8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5be:	4b1f      	ldr	r3, [pc, #124]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5cc:	491b      	ldr	r1, [pc, #108]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b5e0:	4b16      	ldr	r3, [pc, #88]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f0:	4912      	ldr	r1, [pc, #72]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00b      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b604:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b60a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b614:	4909      	ldr	r1, [pc, #36]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b616:	4313      	orrs	r3, r2
 800b618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00f      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b628:	4b04      	ldr	r3, [pc, #16]	; (800b63c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b62e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b638:	e002      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b63a:	bf00      	nop
 800b63c:	40023800 	.word	0x40023800
 800b640:	4985      	ldr	r1, [pc, #532]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b642:	4313      	orrs	r3, r2
 800b644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00b      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b654:	4b80      	ldr	r3, [pc, #512]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b65a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b664:	497c      	ldr	r1, [pc, #496]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b666:	4313      	orrs	r3, r2
 800b668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d005      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b67a:	f040 80d6 	bne.w	800b82a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b67e:	4b76      	ldr	r3, [pc, #472]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a75      	ldr	r2, [pc, #468]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b684:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b68a:	f7fc fb07 	bl	8007c9c <HAL_GetTick>
 800b68e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b690:	e008      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b692:	f7fc fb03 	bl	8007c9c <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b64      	cmp	r3, #100	; 0x64
 800b69e:	d901      	bls.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e194      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b6a4:	4b6c      	ldr	r3, [pc, #432]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f0      	bne.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d021      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d11d      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b6c4:	4b64      	ldr	r3, [pc, #400]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b6c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6ca:	0c1b      	lsrs	r3, r3, #16
 800b6cc:	f003 0303 	and.w	r3, r3, #3
 800b6d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b6d2:	4b61      	ldr	r3, [pc, #388]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6d8:	0e1b      	lsrs	r3, r3, #24
 800b6da:	f003 030f 	and.w	r3, r3, #15
 800b6de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	019a      	lsls	r2, r3, #6
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	041b      	lsls	r3, r3, #16
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	061b      	lsls	r3, r3, #24
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	071b      	lsls	r3, r3, #28
 800b6f8:	4957      	ldr	r1, [pc, #348]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b714:	d00a      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d02e      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b72a:	d129      	bne.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b72c:	4b4a      	ldr	r3, [pc, #296]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b732:	0c1b      	lsrs	r3, r3, #16
 800b734:	f003 0303 	and.w	r3, r3, #3
 800b738:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b73a:	4b47      	ldr	r3, [pc, #284]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b740:	0f1b      	lsrs	r3, r3, #28
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	019a      	lsls	r2, r3, #6
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	041b      	lsls	r3, r3, #16
 800b752:	431a      	orrs	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	061b      	lsls	r3, r3, #24
 800b75a:	431a      	orrs	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	071b      	lsls	r3, r3, #28
 800b760:	493d      	ldr	r1, [pc, #244]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b762:	4313      	orrs	r3, r2
 800b764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b768:	4b3b      	ldr	r3, [pc, #236]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b76e:	f023 021f 	bic.w	r2, r3, #31
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	3b01      	subs	r3, #1
 800b778:	4937      	ldr	r1, [pc, #220]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d01d      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b78c:	4b32      	ldr	r3, [pc, #200]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b792:	0e1b      	lsrs	r3, r3, #24
 800b794:	f003 030f 	and.w	r3, r3, #15
 800b798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b79a:	4b2f      	ldr	r3, [pc, #188]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7a0:	0f1b      	lsrs	r3, r3, #28
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	019a      	lsls	r2, r3, #6
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	041b      	lsls	r3, r3, #16
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	061b      	lsls	r3, r3, #24
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	071b      	lsls	r3, r3, #28
 800b7c0:	4925      	ldr	r1, [pc, #148]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d011      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	019a      	lsls	r2, r3, #6
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	061b      	lsls	r3, r3, #24
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	071b      	lsls	r3, r3, #28
 800b7f0:	4919      	ldr	r1, [pc, #100]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b7f8:	4b17      	ldr	r3, [pc, #92]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a16      	ldr	r2, [pc, #88]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b804:	f7fc fa4a 	bl	8007c9c <HAL_GetTick>
 800b808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b80a:	e008      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b80c:	f7fc fa46 	bl	8007c9c <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	2b64      	cmp	r3, #100	; 0x64
 800b818:	d901      	bls.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e0d7      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b81e:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d0f0      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	f040 80cd 	bne.w	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b832:	4b09      	ldr	r3, [pc, #36]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a08      	ldr	r2, [pc, #32]	; (800b858 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b83e:	f7fc fa2d 	bl	8007c9c <HAL_GetTick>
 800b842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b844:	e00a      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b846:	f7fc fa29 	bl	8007c9c <HAL_GetTick>
 800b84a:	4602      	mov	r2, r0
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	2b64      	cmp	r3, #100	; 0x64
 800b852:	d903      	bls.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b854:	2303      	movs	r3, #3
 800b856:	e0ba      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b858:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b85c:	4b5e      	ldr	r3, [pc, #376]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b868:	d0ed      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b872:	2b00      	cmp	r3, #0
 800b874:	d003      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d009      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b886:	2b00      	cmp	r3, #0
 800b888:	d02e      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d12a      	bne.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b892:	4b51      	ldr	r3, [pc, #324]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b898:	0c1b      	lsrs	r3, r3, #16
 800b89a:	f003 0303 	and.w	r3, r3, #3
 800b89e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b8a0:	4b4d      	ldr	r3, [pc, #308]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a6:	0f1b      	lsrs	r3, r3, #28
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	019a      	lsls	r2, r3, #6
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	041b      	lsls	r3, r3, #16
 800b8b8:	431a      	orrs	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	061b      	lsls	r3, r3, #24
 800b8c0:	431a      	orrs	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	071b      	lsls	r3, r3, #28
 800b8c6:	4944      	ldr	r1, [pc, #272]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b8ce:	4b42      	ldr	r3, [pc, #264]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	021b      	lsls	r3, r3, #8
 800b8e0:	493d      	ldr	r1, [pc, #244]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d022      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8fc:	d11d      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b8fe:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b904:	0e1b      	lsrs	r3, r3, #24
 800b906:	f003 030f 	and.w	r3, r3, #15
 800b90a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b90c:	4b32      	ldr	r3, [pc, #200]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b912:	0f1b      	lsrs	r3, r3, #28
 800b914:	f003 0307 	and.w	r3, r3, #7
 800b918:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	019a      	lsls	r2, r3, #6
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	431a      	orrs	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	061b      	lsls	r3, r3, #24
 800b92c:	431a      	orrs	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	071b      	lsls	r3, r3, #28
 800b932:	4929      	ldr	r1, [pc, #164]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b934:	4313      	orrs	r3, r2
 800b936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 0308 	and.w	r3, r3, #8
 800b942:	2b00      	cmp	r3, #0
 800b944:	d028      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b946:	4b24      	ldr	r3, [pc, #144]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b94c:	0e1b      	lsrs	r3, r3, #24
 800b94e:	f003 030f 	and.w	r3, r3, #15
 800b952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b954:	4b20      	ldr	r3, [pc, #128]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b95a:	0c1b      	lsrs	r3, r3, #16
 800b95c:	f003 0303 	and.w	r3, r3, #3
 800b960:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	019a      	lsls	r2, r3, #6
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	041b      	lsls	r3, r3, #16
 800b96c:	431a      	orrs	r2, r3
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	061b      	lsls	r3, r3, #24
 800b972:	431a      	orrs	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	071b      	lsls	r3, r3, #28
 800b97a:	4917      	ldr	r1, [pc, #92]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b982:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b990:	4911      	ldr	r1, [pc, #68]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b992:	4313      	orrs	r3, r2
 800b994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b998:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a0e      	ldr	r2, [pc, #56]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b99e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9a4:	f7fc f97a 	bl	8007c9c <HAL_GetTick>
 800b9a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b9aa:	e008      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b9ac:	f7fc f976 	bl	8007c9c <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	2b64      	cmp	r3, #100	; 0x64
 800b9b8:	d901      	bls.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e007      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b9be:	4b06      	ldr	r3, [pc, #24]	; (800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ca:	d1ef      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3720      	adds	r7, #32
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	40023800 	.word	0x40023800

0800b9dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e06b      	b.n	800bac6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	7f5b      	ldrb	r3, [r3, #29]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d105      	bne.n	800ba04 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7fb f8f6 	bl	8006bf0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	22ca      	movs	r2, #202	; 0xca
 800ba10:	625a      	str	r2, [r3, #36]	; 0x24
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2253      	movs	r2, #83	; 0x53
 800ba18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f85a 	bl	800bad4 <RTC_EnterInitMode>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d008      	beq.n	800ba38 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	22ff      	movs	r2, #255	; 0xff
 800ba2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2204      	movs	r2, #4
 800ba32:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e046      	b.n	800bac6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6899      	ldr	r1, [r3, #8]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	4b23      	ldr	r3, [pc, #140]	; (800bad0 <HAL_RTC_Init+0xf4>)
 800ba44:	400b      	ands	r3, r1
 800ba46:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6899      	ldr	r1, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	68d2      	ldr	r2, [r2, #12]
 800ba6e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6919      	ldr	r1, [r3, #16]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	041a      	lsls	r2, r3, #16
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba92:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f022 0208 	bic.w	r2, r2, #8
 800baa2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	699a      	ldr	r2, [r3, #24]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	22ff      	movs	r2, #255	; 0xff
 800babc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bac4:	2300      	movs	r3, #0
  }
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	ff8fffbf 	.word	0xff8fffbf

0800bad4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baea:	2b00      	cmp	r3, #0
 800baec:	d119      	bne.n	800bb22 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f04f 32ff 	mov.w	r2, #4294967295
 800baf6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800baf8:	f7fc f8d0 	bl	8007c9c <HAL_GetTick>
 800bafc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bafe:	e009      	b.n	800bb14 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bb00:	f7fc f8cc 	bl	8007c9c <HAL_GetTick>
 800bb04:	4602      	mov	r2, r0
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb0e:	d901      	bls.n	800bb14 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	e007      	b.n	800bb24 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0ee      	beq.n	800bb00 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e084      	b.n	800bc48 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d106      	bne.n	800bb5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7fb f863 	bl	8006c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2202      	movs	r2, #2
 800bb62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb7e:	d902      	bls.n	800bb86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e002      	b.n	800bb8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb94:	d007      	beq.n	800bba6 <HAL_SPI_Init+0x7a>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb9e:	d002      	beq.n	800bba6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10b      	bne.n	800bbc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bbb6:	d903      	bls.n	800bbc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	631a      	str	r2, [r3, #48]	; 0x30
 800bbbe:	e002      	b.n	800bbc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	ea42 0103 	orr.w	r1, r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	0c1b      	lsrs	r3, r3, #16
 800bc06:	f003 0204 	and.w	r2, r3, #4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	ea42 0103 	orr.w	r1, r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	430a      	orrs	r2, r1
 800bc26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	69da      	ldr	r2, [r3, #28]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	603b      	str	r3, [r7, #0]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d101      	bne.n	800bc72 <HAL_SPI_Transmit+0x22>
 800bc6e:	2302      	movs	r3, #2
 800bc70:	e150      	b.n	800bf14 <HAL_SPI_Transmit+0x2c4>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc7a:	f7fc f80f 	bl	8007c9c <HAL_GetTick>
 800bc7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bc80:	88fb      	ldrh	r3, [r7, #6]
 800bc82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d002      	beq.n	800bc96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bc90:	2302      	movs	r3, #2
 800bc92:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc94:	e135      	b.n	800bf02 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <HAL_SPI_Transmit+0x52>
 800bc9c:	88fb      	ldrh	r3, [r7, #6]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bca6:	e12c      	b.n	800bf02 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	88fa      	ldrh	r2, [r7, #6]
 800bcc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	88fa      	ldrh	r2, [r7, #6]
 800bcc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf2:	d107      	bne.n	800bd04 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0e:	2b40      	cmp	r3, #64	; 0x40
 800bd10:	d007      	beq.n	800bd22 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd2a:	d94b      	bls.n	800bdc4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <HAL_SPI_Transmit+0xea>
 800bd34:	8afb      	ldrh	r3, [r7, #22]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d13e      	bne.n	800bdb8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	881a      	ldrh	r2, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4a:	1c9a      	adds	r2, r3, #2
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	3b01      	subs	r3, #1
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bd5e:	e02b      	b.n	800bdb8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	f003 0302 	and.w	r3, r3, #2
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d112      	bne.n	800bd94 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd72:	881a      	ldrh	r2, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7e:	1c9a      	adds	r2, r3, #2
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd92:	e011      	b.n	800bdb8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd94:	f7fb ff82 	bl	8007c9c <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d803      	bhi.n	800bdac <HAL_SPI_Transmit+0x15c>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdaa:	d102      	bne.n	800bdb2 <HAL_SPI_Transmit+0x162>
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d102      	bne.n	800bdb8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bdb6:	e0a4      	b.n	800bf02 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1ce      	bne.n	800bd60 <HAL_SPI_Transmit+0x110>
 800bdc2:	e07c      	b.n	800bebe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <HAL_SPI_Transmit+0x182>
 800bdcc:	8afb      	ldrh	r3, [r7, #22]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d170      	bne.n	800beb4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d912      	bls.n	800be02 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde0:	881a      	ldrh	r2, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdec:	1c9a      	adds	r2, r3, #2
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	3b02      	subs	r3, #2
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be00:	e058      	b.n	800beb4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	330c      	adds	r3, #12
 800be0c:	7812      	ldrb	r2, [r2, #0]
 800be0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be1e:	b29b      	uxth	r3, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	b29a      	uxth	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800be28:	e044      	b.n	800beb4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f003 0302 	and.w	r3, r3, #2
 800be34:	2b02      	cmp	r3, #2
 800be36:	d12b      	bne.n	800be90 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d912      	bls.n	800be68 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	881a      	ldrh	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be52:	1c9a      	adds	r2, r3, #2
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	3b02      	subs	r3, #2
 800be60:	b29a      	uxth	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be66:	e025      	b.n	800beb4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	330c      	adds	r3, #12
 800be72:	7812      	ldrb	r2, [r2, #0]
 800be74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be84:	b29b      	uxth	r3, r3
 800be86:	3b01      	subs	r3, #1
 800be88:	b29a      	uxth	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be8e:	e011      	b.n	800beb4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be90:	f7fb ff04 	bl	8007c9c <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d803      	bhi.n	800bea8 <HAL_SPI_Transmit+0x258>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea6:	d102      	bne.n	800beae <HAL_SPI_Transmit+0x25e>
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d102      	bne.n	800beb4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800beb2:	e026      	b.n	800bf02 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beb8:	b29b      	uxth	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1b5      	bne.n	800be2a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 fa20 	bl	800c308 <SPI_EndRxTxTransaction>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d002      	beq.n	800bed4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2220      	movs	r2, #32
 800bed2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bedc:	2300      	movs	r3, #0
 800bede:	613b      	str	r3, [r7, #16]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	613b      	str	r3, [r7, #16]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	613b      	str	r3, [r7, #16]
 800bef0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	77fb      	strb	r3, [r7, #31]
 800befe:	e000      	b.n	800bf02 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800bf00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bf12:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	099b      	lsrs	r3, r3, #6
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10f      	bne.n	800bf60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	099b      	lsrs	r3, r3, #6
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d004      	beq.n	800bf60 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	4798      	blx	r3
    return;
 800bf5e:	e0d7      	b.n	800c110 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	085b      	lsrs	r3, r3, #1
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00a      	beq.n	800bf82 <HAL_SPI_IRQHandler+0x66>
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	09db      	lsrs	r3, r3, #7
 800bf70:	f003 0301 	and.w	r3, r3, #1
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d004      	beq.n	800bf82 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	4798      	blx	r3
    return;
 800bf80:	e0c6      	b.n	800c110 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	095b      	lsrs	r3, r3, #5
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10c      	bne.n	800bfa8 <HAL_SPI_IRQHandler+0x8c>
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	099b      	lsrs	r3, r3, #6
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <HAL_SPI_IRQHandler+0x8c>
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	0a1b      	lsrs	r3, r3, #8
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 80b4 	beq.w	800c110 <HAL_SPI_IRQHandler+0x1f4>
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	095b      	lsrs	r3, r3, #5
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 80ad 	beq.w	800c110 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	099b      	lsrs	r3, r3, #6
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d023      	beq.n	800c00a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d011      	beq.n	800bff2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfd2:	f043 0204 	orr.w	r2, r3, #4
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	e00b      	b.n	800c00a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	613b      	str	r3, [r7, #16]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	613b      	str	r3, [r7, #16]
 800c006:	693b      	ldr	r3, [r7, #16]
        return;
 800c008:	e082      	b.n	800c110 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	095b      	lsrs	r3, r3, #5
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	2b00      	cmp	r3, #0
 800c014:	d014      	beq.n	800c040 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c01a:	f043 0201 	orr.w	r2, r3, #1
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c03c:	601a      	str	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	0a1b      	lsrs	r3, r3, #8
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00c      	beq.n	800c066 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c050:	f043 0208 	orr.w	r2, r3, #8
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c058:	2300      	movs	r3, #0
 800c05a:	60bb      	str	r3, [r7, #8]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	60bb      	str	r3, [r7, #8]
 800c064:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d04f      	beq.n	800c10e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c07c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	f003 0302 	and.w	r3, r3, #2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d104      	bne.n	800c09a <HAL_SPI_IRQHandler+0x17e>
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d034      	beq.n	800c104 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f022 0203 	bic.w	r2, r2, #3
 800c0a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d011      	beq.n	800c0d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0b6:	4a18      	ldr	r2, [pc, #96]	; (800c118 <HAL_SPI_IRQHandler+0x1fc>)
 800c0b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fc fe28 	bl	8008d14 <HAL_DMA_Abort_IT>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d005      	beq.n	800c0d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d016      	beq.n	800c10c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e2:	4a0d      	ldr	r2, [pc, #52]	; (800c118 <HAL_SPI_IRQHandler+0x1fc>)
 800c0e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fc fe12 	bl	8008d14 <HAL_DMA_Abort_IT>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c102:	e003      	b.n	800c10c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f809 	bl	800c11c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c10a:	e000      	b.n	800c10e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c10c:	bf00      	nop
    return;
 800c10e:	bf00      	nop
  }
}
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	0800c131 	.word	0x0800c131

0800c11c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff ffe5 	bl	800c11c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	603b      	str	r3, [r7, #0]
 800c166:	4613      	mov	r3, r2
 800c168:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c16a:	e04c      	b.n	800c206 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c172:	d048      	beq.n	800c206 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c174:	f7fb fd92 	bl	8007c9c <HAL_GetTick>
 800c178:	4602      	mov	r2, r0
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	1ad3      	subs	r3, r2, r3
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	429a      	cmp	r2, r3
 800c182:	d902      	bls.n	800c18a <SPI_WaitFlagStateUntilTimeout+0x30>
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d13d      	bne.n	800c206 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1a2:	d111      	bne.n	800c1c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ac:	d004      	beq.n	800c1b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b6:	d107      	bne.n	800c1c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1d0:	d10f      	bne.n	800c1f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	e00f      	b.n	800c226 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	4013      	ands	r3, r2
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	429a      	cmp	r2, r3
 800c214:	bf0c      	ite	eq
 800c216:	2301      	moveq	r3, #1
 800c218:	2300      	movne	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	461a      	mov	r2, r3
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	429a      	cmp	r2, r3
 800c222:	d1a3      	bne.n	800c16c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b084      	sub	sp, #16
 800c232:	af00      	add	r7, sp, #0
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
 800c23a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800c23c:	e057      	b.n	800c2ee <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c244:	d106      	bne.n	800c254 <SPI_WaitFifoStateUntilTimeout+0x26>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d103      	bne.n	800c254 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	330c      	adds	r3, #12
 800c252:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25a:	d048      	beq.n	800c2ee <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c25c:	f7fb fd1e 	bl	8007c9c <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d902      	bls.n	800c272 <SPI_WaitFifoStateUntilTimeout+0x44>
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d13d      	bne.n	800c2ee <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	685a      	ldr	r2, [r3, #4]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c28a:	d111      	bne.n	800c2b0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c294:	d004      	beq.n	800c2a0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c29e:	d107      	bne.n	800c2b0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2b8:	d10f      	bne.n	800c2da <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e008      	b.n	800c300 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d19f      	bne.n	800c23e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af02      	add	r7, sp, #8
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7ff ff84 	bl	800c22e <SPI_WaitFifoStateUntilTimeout>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d007      	beq.n	800c33c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c330:	f043 0220 	orr.w	r2, r3, #32
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e027      	b.n	800c38c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2200      	movs	r2, #0
 800c344:	2180      	movs	r1, #128	; 0x80
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff ff07 	bl	800c15a <SPI_WaitFlagStateUntilTimeout>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d007      	beq.n	800c362 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c356:	f043 0220 	orr.w	r2, r3, #32
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e014      	b.n	800c38c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2200      	movs	r2, #0
 800c36a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7ff ff5d 	bl	800c22e <SPI_WaitFifoStateUntilTimeout>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d007      	beq.n	800c38a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c37e:	f043 0220 	orr.w	r2, r3, #32
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e000      	b.n	800c38c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e01d      	b.n	800c3e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7fa fcce 	bl	8006d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f000 fb8e 	bl	800caf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68da      	ldr	r2, [r3, #12]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689a      	ldr	r2, [r3, #8]
 800c40a:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <HAL_TIM_Base_Start_IT+0x50>)
 800c40c:	4013      	ands	r3, r2
 800c40e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b06      	cmp	r3, #6
 800c414:	d00b      	beq.n	800c42e <HAL_TIM_Base_Start_IT+0x42>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c41c:	d007      	beq.n	800c42e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f042 0201 	orr.w	r2, r2, #1
 800c42c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	00010007 	.word	0x00010007

0800c440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e01d      	b.n	800c48e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f815 	bl	800c496 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f000 fb38 	bl	800caf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c496:	b480      	push	{r7}
 800c498:	b083      	sub	sp, #12
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c49e:	bf00      	nop
 800c4a0:	370c      	adds	r7, #12
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d122      	bne.n	800c506 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d11b      	bne.n	800c506 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f06f 0202 	mvn.w	r2, #2
 800c4d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	f003 0303 	and.w	r3, r3, #3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 fae3 	bl	800cab8 <HAL_TIM_IC_CaptureCallback>
 800c4f2:	e005      	b.n	800c500 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fad5 	bl	800caa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fae6 	bl	800cacc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	2b04      	cmp	r3, #4
 800c512:	d122      	bne.n	800c55a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	f003 0304 	and.w	r3, r3, #4
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d11b      	bne.n	800c55a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f06f 0204 	mvn.w	r2, #4
 800c52a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fab9 	bl	800cab8 <HAL_TIM_IC_CaptureCallback>
 800c546:	e005      	b.n	800c554 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 faab 	bl	800caa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fabc 	bl	800cacc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	f003 0308 	and.w	r3, r3, #8
 800c564:	2b08      	cmp	r3, #8
 800c566:	d122      	bne.n	800c5ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	f003 0308 	and.w	r3, r3, #8
 800c572:	2b08      	cmp	r3, #8
 800c574:	d11b      	bne.n	800c5ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f06f 0208 	mvn.w	r2, #8
 800c57e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2204      	movs	r2, #4
 800c584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	f003 0303 	and.w	r3, r3, #3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fa8f 	bl	800cab8 <HAL_TIM_IC_CaptureCallback>
 800c59a:	e005      	b.n	800c5a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa81 	bl	800caa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fa92 	bl	800cacc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	f003 0310 	and.w	r3, r3, #16
 800c5b8:	2b10      	cmp	r3, #16
 800c5ba:	d122      	bne.n	800c602 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	f003 0310 	and.w	r3, r3, #16
 800c5c6:	2b10      	cmp	r3, #16
 800c5c8:	d11b      	bne.n	800c602 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f06f 0210 	mvn.w	r2, #16
 800c5d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2208      	movs	r2, #8
 800c5d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fa65 	bl	800cab8 <HAL_TIM_IC_CaptureCallback>
 800c5ee:	e005      	b.n	800c5fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fa57 	bl	800caa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa68 	bl	800cacc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d10e      	bne.n	800c62e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d107      	bne.n	800c62e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f06f 0201 	mvn.w	r2, #1
 800c626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7f8 fe4d 	bl	80052c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c638:	2b80      	cmp	r3, #128	; 0x80
 800c63a:	d10e      	bne.n	800c65a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c646:	2b80      	cmp	r3, #128	; 0x80
 800c648:	d107      	bne.n	800c65a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fe7d 	bl	800d354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c668:	d10e      	bne.n	800c688 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c674:	2b80      	cmp	r3, #128	; 0x80
 800c676:	d107      	bne.n	800c688 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fe70 	bl	800d368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c692:	2b40      	cmp	r3, #64	; 0x40
 800c694:	d10e      	bne.n	800c6b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a0:	2b40      	cmp	r3, #64	; 0x40
 800c6a2:	d107      	bne.n	800c6b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c6ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa16 	bl	800cae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	f003 0320 	and.w	r3, r3, #32
 800c6be:	2b20      	cmp	r3, #32
 800c6c0:	d10e      	bne.n	800c6e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	f003 0320 	and.w	r3, r3, #32
 800c6cc:	2b20      	cmp	r3, #32
 800c6ce:	d107      	bne.n	800c6e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f06f 0220 	mvn.w	r2, #32
 800c6d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fe30 	bl	800d340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d101      	bne.n	800c702 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c6fe:	2302      	movs	r3, #2
 800c700:	e105      	b.n	800c90e <HAL_TIM_PWM_ConfigChannel+0x226>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2202      	movs	r2, #2
 800c70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b14      	cmp	r3, #20
 800c716:	f200 80f0 	bhi.w	800c8fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800c71a:	a201      	add	r2, pc, #4	; (adr r2, 800c720 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c720:	0800c775 	.word	0x0800c775
 800c724:	0800c8fb 	.word	0x0800c8fb
 800c728:	0800c8fb 	.word	0x0800c8fb
 800c72c:	0800c8fb 	.word	0x0800c8fb
 800c730:	0800c7b5 	.word	0x0800c7b5
 800c734:	0800c8fb 	.word	0x0800c8fb
 800c738:	0800c8fb 	.word	0x0800c8fb
 800c73c:	0800c8fb 	.word	0x0800c8fb
 800c740:	0800c7f7 	.word	0x0800c7f7
 800c744:	0800c8fb 	.word	0x0800c8fb
 800c748:	0800c8fb 	.word	0x0800c8fb
 800c74c:	0800c8fb 	.word	0x0800c8fb
 800c750:	0800c837 	.word	0x0800c837
 800c754:	0800c8fb 	.word	0x0800c8fb
 800c758:	0800c8fb 	.word	0x0800c8fb
 800c75c:	0800c8fb 	.word	0x0800c8fb
 800c760:	0800c879 	.word	0x0800c879
 800c764:	0800c8fb 	.word	0x0800c8fb
 800c768:	0800c8fb 	.word	0x0800c8fb
 800c76c:	0800c8fb 	.word	0x0800c8fb
 800c770:	0800c8b9 	.word	0x0800c8b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68b9      	ldr	r1, [r7, #8]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fa5a 	bl	800cc34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	699a      	ldr	r2, [r3, #24]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0208 	orr.w	r2, r2, #8
 800c78e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	699a      	ldr	r2, [r3, #24]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 0204 	bic.w	r2, r2, #4
 800c79e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6999      	ldr	r1, [r3, #24]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	691a      	ldr	r2, [r3, #16]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	619a      	str	r2, [r3, #24]
      break;
 800c7b2:	e0a3      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68b9      	ldr	r1, [r7, #8]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 faac 	bl	800cd18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	699a      	ldr	r2, [r3, #24]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	699a      	ldr	r2, [r3, #24]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6999      	ldr	r1, [r3, #24]
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	021a      	lsls	r2, r3, #8
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	430a      	orrs	r2, r1
 800c7f2:	619a      	str	r2, [r3, #24]
      break;
 800c7f4:	e082      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68b9      	ldr	r1, [r7, #8]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fb03 	bl	800ce08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	69da      	ldr	r2, [r3, #28]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f042 0208 	orr.w	r2, r2, #8
 800c810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69da      	ldr	r2, [r3, #28]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f022 0204 	bic.w	r2, r2, #4
 800c820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69d9      	ldr	r1, [r3, #28]
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	691a      	ldr	r2, [r3, #16]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	430a      	orrs	r2, r1
 800c832:	61da      	str	r2, [r3, #28]
      break;
 800c834:	e062      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68b9      	ldr	r1, [r7, #8]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 fb59 	bl	800cef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69da      	ldr	r2, [r3, #28]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	69da      	ldr	r2, [r3, #28]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	69d9      	ldr	r1, [r3, #28]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	021a      	lsls	r2, r3, #8
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	430a      	orrs	r2, r1
 800c874:	61da      	str	r2, [r3, #28]
      break;
 800c876:	e041      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68b9      	ldr	r1, [r7, #8]
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 fb90 	bl	800cfa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f042 0208 	orr.w	r2, r2, #8
 800c892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f022 0204 	bic.w	r2, r2, #4
 800c8a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	691a      	ldr	r2, [r3, #16]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c8b6:	e021      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fbc2 	bl	800d048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	021a      	lsls	r2, r3, #8
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c8f8:	e000      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c8fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop

0800c918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_TIM_ConfigClockSource+0x18>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e0b3      	b.n	800ca98 <HAL_TIM_ConfigClockSource+0x180>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	4b55      	ldr	r3, [pc, #340]	; (800caa0 <HAL_TIM_ConfigClockSource+0x188>)
 800c94c:	4013      	ands	r3, r2
 800c94e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c956:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c968:	d03e      	beq.n	800c9e8 <HAL_TIM_ConfigClockSource+0xd0>
 800c96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c96e:	f200 8087 	bhi.w	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c976:	f000 8085 	beq.w	800ca84 <HAL_TIM_ConfigClockSource+0x16c>
 800c97a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c97e:	d87f      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c980:	2b70      	cmp	r3, #112	; 0x70
 800c982:	d01a      	beq.n	800c9ba <HAL_TIM_ConfigClockSource+0xa2>
 800c984:	2b70      	cmp	r3, #112	; 0x70
 800c986:	d87b      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c988:	2b60      	cmp	r3, #96	; 0x60
 800c98a:	d050      	beq.n	800ca2e <HAL_TIM_ConfigClockSource+0x116>
 800c98c:	2b60      	cmp	r3, #96	; 0x60
 800c98e:	d877      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c990:	2b50      	cmp	r3, #80	; 0x50
 800c992:	d03c      	beq.n	800ca0e <HAL_TIM_ConfigClockSource+0xf6>
 800c994:	2b50      	cmp	r3, #80	; 0x50
 800c996:	d873      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	d058      	beq.n	800ca4e <HAL_TIM_ConfigClockSource+0x136>
 800c99c:	2b40      	cmp	r3, #64	; 0x40
 800c99e:	d86f      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c9a0:	2b30      	cmp	r3, #48	; 0x30
 800c9a2:	d064      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x156>
 800c9a4:	2b30      	cmp	r3, #48	; 0x30
 800c9a6:	d86b      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	d060      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x156>
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	d867      	bhi.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d05c      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x156>
 800c9b4:	2b10      	cmp	r3, #16
 800c9b6:	d05a      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c9b8:	e062      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	6899      	ldr	r1, [r3, #8]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f000 fc0b 	bl	800d1e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	609a      	str	r2, [r3, #8]
      break;
 800c9e6:	e04e      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6818      	ldr	r0, [r3, #0]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	6899      	ldr	r1, [r3, #8]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f000 fbf4 	bl	800d1e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689a      	ldr	r2, [r3, #8]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca0a:	609a      	str	r2, [r3, #8]
      break;
 800ca0c:	e03b      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	6859      	ldr	r1, [r3, #4]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f000 fb68 	bl	800d0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2150      	movs	r1, #80	; 0x50
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 fbc1 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800ca2c:	e02b      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	6859      	ldr	r1, [r3, #4]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f000 fb87 	bl	800d14e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2160      	movs	r1, #96	; 0x60
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fbb1 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800ca4c:	e01b      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	6859      	ldr	r1, [r3, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f000 fb48 	bl	800d0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2140      	movs	r1, #64	; 0x40
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fba1 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800ca6c:	e00b      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4619      	mov	r1, r3
 800ca78:	4610      	mov	r0, r2
 800ca7a:	f000 fb98 	bl	800d1ae <TIM_ITRx_SetConfig>
      break;
 800ca7e:	e002      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ca80:	bf00      	nop
 800ca82:	e000      	b.n	800ca86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ca84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	fffeff88 	.word	0xfffeff88

0800caa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a40      	ldr	r2, [pc, #256]	; (800cc08 <TIM_Base_SetConfig+0x114>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d013      	beq.n	800cb34 <TIM_Base_SetConfig+0x40>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb12:	d00f      	beq.n	800cb34 <TIM_Base_SetConfig+0x40>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a3d      	ldr	r2, [pc, #244]	; (800cc0c <TIM_Base_SetConfig+0x118>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d00b      	beq.n	800cb34 <TIM_Base_SetConfig+0x40>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a3c      	ldr	r2, [pc, #240]	; (800cc10 <TIM_Base_SetConfig+0x11c>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d007      	beq.n	800cb34 <TIM_Base_SetConfig+0x40>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a3b      	ldr	r2, [pc, #236]	; (800cc14 <TIM_Base_SetConfig+0x120>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d003      	beq.n	800cb34 <TIM_Base_SetConfig+0x40>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a3a      	ldr	r2, [pc, #232]	; (800cc18 <TIM_Base_SetConfig+0x124>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d108      	bne.n	800cb46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a2f      	ldr	r2, [pc, #188]	; (800cc08 <TIM_Base_SetConfig+0x114>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d02b      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb54:	d027      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a2c      	ldr	r2, [pc, #176]	; (800cc0c <TIM_Base_SetConfig+0x118>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d023      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a2b      	ldr	r2, [pc, #172]	; (800cc10 <TIM_Base_SetConfig+0x11c>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d01f      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a2a      	ldr	r2, [pc, #168]	; (800cc14 <TIM_Base_SetConfig+0x120>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d01b      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a29      	ldr	r2, [pc, #164]	; (800cc18 <TIM_Base_SetConfig+0x124>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d017      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a28      	ldr	r2, [pc, #160]	; (800cc1c <TIM_Base_SetConfig+0x128>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d013      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a27      	ldr	r2, [pc, #156]	; (800cc20 <TIM_Base_SetConfig+0x12c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d00f      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a26      	ldr	r2, [pc, #152]	; (800cc24 <TIM_Base_SetConfig+0x130>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00b      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a25      	ldr	r2, [pc, #148]	; (800cc28 <TIM_Base_SetConfig+0x134>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d007      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a24      	ldr	r2, [pc, #144]	; (800cc2c <TIM_Base_SetConfig+0x138>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d003      	beq.n	800cba6 <TIM_Base_SetConfig+0xb2>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a23      	ldr	r2, [pc, #140]	; (800cc30 <TIM_Base_SetConfig+0x13c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d108      	bne.n	800cbb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	689a      	ldr	r2, [r3, #8]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a0a      	ldr	r2, [pc, #40]	; (800cc08 <TIM_Base_SetConfig+0x114>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d003      	beq.n	800cbec <TIM_Base_SetConfig+0xf8>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a0c      	ldr	r2, [pc, #48]	; (800cc18 <TIM_Base_SetConfig+0x124>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d103      	bne.n	800cbf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	691a      	ldr	r2, [r3, #16]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	615a      	str	r2, [r3, #20]
}
 800cbfa:	bf00      	nop
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	40010000 	.word	0x40010000
 800cc0c:	40000400 	.word	0x40000400
 800cc10:	40000800 	.word	0x40000800
 800cc14:	40000c00 	.word	0x40000c00
 800cc18:	40010400 	.word	0x40010400
 800cc1c:	40014000 	.word	0x40014000
 800cc20:	40014400 	.word	0x40014400
 800cc24:	40014800 	.word	0x40014800
 800cc28:	40001800 	.word	0x40001800
 800cc2c:	40001c00 	.word	0x40001c00
 800cc30:	40002000 	.word	0x40002000

0800cc34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	f023 0201 	bic.w	r2, r3, #1
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	4b2b      	ldr	r3, [pc, #172]	; (800cd0c <TIM_OC1_SetConfig+0xd8>)
 800cc60:	4013      	ands	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f023 0303 	bic.w	r3, r3, #3
 800cc6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f023 0302 	bic.w	r3, r3, #2
 800cc7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a21      	ldr	r2, [pc, #132]	; (800cd10 <TIM_OC1_SetConfig+0xdc>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d003      	beq.n	800cc98 <TIM_OC1_SetConfig+0x64>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a20      	ldr	r2, [pc, #128]	; (800cd14 <TIM_OC1_SetConfig+0xe0>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d10c      	bne.n	800ccb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	f023 0308 	bic.w	r3, r3, #8
 800cc9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f023 0304 	bic.w	r3, r3, #4
 800ccb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a16      	ldr	r2, [pc, #88]	; (800cd10 <TIM_OC1_SetConfig+0xdc>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d003      	beq.n	800ccc2 <TIM_OC1_SetConfig+0x8e>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a15      	ldr	r2, [pc, #84]	; (800cd14 <TIM_OC1_SetConfig+0xe0>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d111      	bne.n	800cce6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	4313      	orrs	r3, r2
 800cce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	621a      	str	r2, [r3, #32]
}
 800cd00:	bf00      	nop
 800cd02:	371c      	adds	r7, #28
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	fffeff8f 	.word	0xfffeff8f
 800cd10:	40010000 	.word	0x40010000
 800cd14:	40010400 	.word	0x40010400

0800cd18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a1b      	ldr	r3, [r3, #32]
 800cd26:	f023 0210 	bic.w	r2, r3, #16
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	4b2e      	ldr	r3, [pc, #184]	; (800cdfc <TIM_OC2_SetConfig+0xe4>)
 800cd44:	4013      	ands	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	021b      	lsls	r3, r3, #8
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f023 0320 	bic.w	r3, r3, #32
 800cd62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a23      	ldr	r2, [pc, #140]	; (800ce00 <TIM_OC2_SetConfig+0xe8>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d003      	beq.n	800cd80 <TIM_OC2_SetConfig+0x68>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a22      	ldr	r2, [pc, #136]	; (800ce04 <TIM_OC2_SetConfig+0xec>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d10d      	bne.n	800cd9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	011b      	lsls	r3, r3, #4
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a18      	ldr	r2, [pc, #96]	; (800ce00 <TIM_OC2_SetConfig+0xe8>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d003      	beq.n	800cdac <TIM_OC2_SetConfig+0x94>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a17      	ldr	r2, [pc, #92]	; (800ce04 <TIM_OC2_SetConfig+0xec>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d113      	bne.n	800cdd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	621a      	str	r2, [r3, #32]
}
 800cdee:	bf00      	nop
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	feff8fff 	.word	0xfeff8fff
 800ce00:	40010000 	.word	0x40010000
 800ce04:	40010400 	.word	0x40010400

0800ce08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b087      	sub	sp, #28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	4b2d      	ldr	r3, [pc, #180]	; (800cee8 <TIM_OC3_SetConfig+0xe0>)
 800ce34:	4013      	ands	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f023 0303 	bic.w	r3, r3, #3
 800ce3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	021b      	lsls	r3, r3, #8
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a22      	ldr	r2, [pc, #136]	; (800ceec <TIM_OC3_SetConfig+0xe4>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d003      	beq.n	800ce6e <TIM_OC3_SetConfig+0x66>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a21      	ldr	r2, [pc, #132]	; (800cef0 <TIM_OC3_SetConfig+0xe8>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d10d      	bne.n	800ce8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	021b      	lsls	r3, r3, #8
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a17      	ldr	r2, [pc, #92]	; (800ceec <TIM_OC3_SetConfig+0xe4>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d003      	beq.n	800ce9a <TIM_OC3_SetConfig+0x92>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a16      	ldr	r2, [pc, #88]	; (800cef0 <TIM_OC3_SetConfig+0xe8>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d113      	bne.n	800cec2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	695b      	ldr	r3, [r3, #20]
 800ceae:	011b      	lsls	r3, r3, #4
 800ceb0:	693a      	ldr	r2, [r7, #16]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	011b      	lsls	r3, r3, #4
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	685a      	ldr	r2, [r3, #4]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	621a      	str	r2, [r3, #32]
}
 800cedc:	bf00      	nop
 800cede:	371c      	adds	r7, #28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr
 800cee8:	fffeff8f 	.word	0xfffeff8f
 800ceec:	40010000 	.word	0x40010000
 800cef0:	40010400 	.word	0x40010400

0800cef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b087      	sub	sp, #28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf1c:	68fa      	ldr	r2, [r7, #12]
 800cf1e:	4b1e      	ldr	r3, [pc, #120]	; (800cf98 <TIM_OC4_SetConfig+0xa4>)
 800cf20:	4013      	ands	r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	021b      	lsls	r3, r3, #8
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	031b      	lsls	r3, r3, #12
 800cf46:	693a      	ldr	r2, [r7, #16]
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4a13      	ldr	r2, [pc, #76]	; (800cf9c <TIM_OC4_SetConfig+0xa8>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d003      	beq.n	800cf5c <TIM_OC4_SetConfig+0x68>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a12      	ldr	r2, [pc, #72]	; (800cfa0 <TIM_OC4_SetConfig+0xac>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d109      	bne.n	800cf70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	695b      	ldr	r3, [r3, #20]
 800cf68:	019b      	lsls	r3, r3, #6
 800cf6a:	697a      	ldr	r2, [r7, #20]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	621a      	str	r2, [r3, #32]
}
 800cf8a:	bf00      	nop
 800cf8c:	371c      	adds	r7, #28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	feff8fff 	.word	0xfeff8fff
 800cf9c:	40010000 	.word	0x40010000
 800cfa0:	40010400 	.word	0x40010400

0800cfa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	4b1b      	ldr	r3, [pc, #108]	; (800d03c <TIM_OC5_SetConfig+0x98>)
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cfe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	041b      	lsls	r3, r3, #16
 800cfec:	693a      	ldr	r2, [r7, #16]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a12      	ldr	r2, [pc, #72]	; (800d040 <TIM_OC5_SetConfig+0x9c>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d003      	beq.n	800d002 <TIM_OC5_SetConfig+0x5e>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a11      	ldr	r2, [pc, #68]	; (800d044 <TIM_OC5_SetConfig+0xa0>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d109      	bne.n	800d016 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d008:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	021b      	lsls	r3, r3, #8
 800d010:	697a      	ldr	r2, [r7, #20]
 800d012:	4313      	orrs	r3, r2
 800d014:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	697a      	ldr	r2, [r7, #20]
 800d01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	621a      	str	r2, [r3, #32]
}
 800d030:	bf00      	nop
 800d032:	371c      	adds	r7, #28
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	fffeff8f 	.word	0xfffeff8f
 800d040:	40010000 	.word	0x40010000
 800d044:	40010400 	.word	0x40010400

0800d048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d048:	b480      	push	{r7}
 800d04a:	b087      	sub	sp, #28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a1b      	ldr	r3, [r3, #32]
 800d056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	4b1c      	ldr	r3, [pc, #112]	; (800d0e4 <TIM_OC6_SetConfig+0x9c>)
 800d074:	4013      	ands	r3, r2
 800d076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	021b      	lsls	r3, r3, #8
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4313      	orrs	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d08a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	051b      	lsls	r3, r3, #20
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	4313      	orrs	r3, r2
 800d096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a13      	ldr	r2, [pc, #76]	; (800d0e8 <TIM_OC6_SetConfig+0xa0>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d003      	beq.n	800d0a8 <TIM_OC6_SetConfig+0x60>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a12      	ldr	r2, [pc, #72]	; (800d0ec <TIM_OC6_SetConfig+0xa4>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d109      	bne.n	800d0bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	695b      	ldr	r3, [r3, #20]
 800d0b4:	029b      	lsls	r3, r3, #10
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	621a      	str	r2, [r3, #32]
}
 800d0d6:	bf00      	nop
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	feff8fff 	.word	0xfeff8fff
 800d0e8:	40010000 	.word	0x40010000
 800d0ec:	40010400 	.word	0x40010400

0800d0f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6a1b      	ldr	r3, [r3, #32]
 800d100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	f023 0201 	bic.w	r2, r3, #1
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d11a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	011b      	lsls	r3, r3, #4
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	4313      	orrs	r3, r2
 800d124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f023 030a 	bic.w	r3, r3, #10
 800d12c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	4313      	orrs	r3, r2
 800d134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	621a      	str	r2, [r3, #32]
}
 800d142:	bf00      	nop
 800d144:	371c      	adds	r7, #28
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d14e:	b480      	push	{r7}
 800d150:	b087      	sub	sp, #28
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f023 0210 	bic.w	r2, r3, #16
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a1b      	ldr	r3, [r3, #32]
 800d170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	031b      	lsls	r3, r3, #12
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d18a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	4313      	orrs	r3, r2
 800d194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	621a      	str	r2, [r3, #32]
}
 800d1a2:	bf00      	nop
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	f043 0307 	orr.w	r3, r3, #7
 800d1d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	609a      	str	r2, [r3, #8]
}
 800d1d8:	bf00      	nop
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b087      	sub	sp, #28
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	021a      	lsls	r2, r3, #8
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	431a      	orrs	r2, r3
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	4313      	orrs	r3, r2
 800d210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	609a      	str	r2, [r3, #8]
}
 800d218:	bf00      	nop
 800d21a:	371c      	adds	r7, #28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d234:	2b01      	cmp	r3, #1
 800d236:	d101      	bne.n	800d23c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d238:	2302      	movs	r3, #2
 800d23a:	e06d      	b.n	800d318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a30      	ldr	r2, [pc, #192]	; (800d324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d004      	beq.n	800d270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a2f      	ldr	r2, [pc, #188]	; (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d108      	bne.n	800d282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a20      	ldr	r2, [pc, #128]	; (800d324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d022      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ae:	d01d      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a1d      	ldr	r2, [pc, #116]	; (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d018      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a1c      	ldr	r2, [pc, #112]	; (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d013      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a1a      	ldr	r2, [pc, #104]	; (800d334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00e      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a15      	ldr	r2, [pc, #84]	; (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d009      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a16      	ldr	r2, [pc, #88]	; (800d338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d004      	beq.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a15      	ldr	r2, [pc, #84]	; (800d33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d10c      	bne.n	800d306 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	40010000 	.word	0x40010000
 800d328:	40010400 	.word	0x40010400
 800d32c:	40000400 	.word	0x40000400
 800d330:	40000800 	.word	0x40000800
 800d334:	40000c00 	.word	0x40000c00
 800d338:	40014000 	.word	0x40014000
 800d33c:	40001800 	.word	0x40001800

0800d340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e040      	b.n	800d410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f9 fd6e 	bl	8006e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2224      	movs	r2, #36	; 0x24
 800d3a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f022 0201 	bic.w	r2, r2, #1
 800d3b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f960 	bl	800d680 <UART_SetConfig>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d101      	bne.n	800d3ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e022      	b.n	800d410 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 fc00 	bl	800dbd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685a      	ldr	r2, [r3, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	689a      	ldr	r2, [r3, #8]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f042 0201 	orr.w	r2, r2, #1
 800d406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 fc87 	bl	800dd1c <UART_CheckIdleState>
 800d40e:	4603      	mov	r3, r0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af02      	add	r7, sp, #8
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	603b      	str	r3, [r7, #0]
 800d424:	4613      	mov	r3, r2
 800d426:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d42c:	2b20      	cmp	r3, #32
 800d42e:	d17f      	bne.n	800d530 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d002      	beq.n	800d43c <HAL_UART_Transmit+0x24>
 800d436:	88fb      	ldrh	r3, [r7, #6]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e078      	b.n	800d532 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d446:	2b01      	cmp	r3, #1
 800d448:	d101      	bne.n	800d44e <HAL_UART_Transmit+0x36>
 800d44a:	2302      	movs	r3, #2
 800d44c:	e071      	b.n	800d532 <HAL_UART_Transmit+0x11a>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2221      	movs	r2, #33	; 0x21
 800d460:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800d462:	f7fa fc1b 	bl	8007c9c <HAL_GetTick>
 800d466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	88fa      	ldrh	r2, [r7, #6]
 800d46c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	88fa      	ldrh	r2, [r7, #6]
 800d474:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d480:	d108      	bne.n	800d494 <HAL_UART_Transmit+0x7c>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d104      	bne.n	800d494 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	61bb      	str	r3, [r7, #24]
 800d492:	e003      	b.n	800d49c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800d4a4:	e02c      	b.n	800d500 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2180      	movs	r1, #128	; 0x80
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f000 fc78 	bl	800dda6 <UART_WaitOnFlagUntilTimeout>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	e038      	b.n	800d532 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10b      	bne.n	800d4de <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	3302      	adds	r3, #2
 800d4da:	61bb      	str	r3, [r7, #24]
 800d4dc:	e007      	b.n	800d4ee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	781a      	ldrb	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d506:	b29b      	uxth	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1cc      	bne.n	800d4a6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	2200      	movs	r2, #0
 800d514:	2140      	movs	r1, #64	; 0x40
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f000 fc45 	bl	800dda6 <UART_WaitOnFlagUntilTimeout>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e005      	b.n	800d532 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2220      	movs	r2, #32
 800d52a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800d52c:	2300      	movs	r3, #0
 800d52e:	e000      	b.n	800d532 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800d530:	2302      	movs	r3, #2
  }
}
 800d532:	4618      	mov	r0, r3
 800d534:	3720      	adds	r7, #32
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	4613      	mov	r3, r2
 800d548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d54e:	2b20      	cmp	r3, #32
 800d550:	d16c      	bne.n	800d62c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <HAL_UART_Receive_DMA+0x22>
 800d558:	88fb      	ldrh	r3, [r7, #6]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d101      	bne.n	800d562 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e065      	b.n	800d62e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d101      	bne.n	800d570 <HAL_UART_Receive_DMA+0x34>
 800d56c:	2302      	movs	r3, #2
 800d56e:	e05e      	b.n	800d62e <HAL_UART_Receive_DMA+0xf2>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	88fa      	ldrh	r2, [r7, #6]
 800d582:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2222      	movs	r2, #34	; 0x22
 800d590:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d596:	2b00      	cmp	r3, #0
 800d598:	d02a      	beq.n	800d5f0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d59e:	4a26      	ldr	r2, [pc, #152]	; (800d638 <HAL_UART_Receive_DMA+0xfc>)
 800d5a0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a6:	4a25      	ldr	r2, [pc, #148]	; (800d63c <HAL_UART_Receive_DMA+0x100>)
 800d5a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ae:	4a24      	ldr	r2, [pc, #144]	; (800d640 <HAL_UART_Receive_DMA+0x104>)
 800d5b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3324      	adds	r3, #36	; 0x24
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	f7fb fad1 	bl	8008b74 <HAL_DMA_Start_IT>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2210      	movs	r2, #16
 800d5dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2220      	movs	r2, #32
 800d5ea:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e01e      	b.n	800d62e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d606:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689a      	ldr	r2, [r3, #8]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f042 0201 	orr.w	r2, r2, #1
 800d616:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689a      	ldr	r2, [r3, #8]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d626:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	e000      	b.n	800d62e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800d62c:	2302      	movs	r3, #2
  }
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	0800df07 	.word	0x0800df07
 800d63c:	0800df6b 	.word	0x0800df6b
 800d640:	0800df87 	.word	0x0800df87

0800d644 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d674:	bf00      	nop
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d688:	2300      	movs	r3, #0
 800d68a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d68c:	2300      	movs	r3, #0
 800d68e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	689a      	ldr	r2, [r3, #8]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	431a      	orrs	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	695b      	ldr	r3, [r3, #20]
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	4ba7      	ldr	r3, [pc, #668]	; (800d94c <UART_SetConfig+0x2cc>)
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	6812      	ldr	r2, [r2, #0]
 800d6b6:	6939      	ldr	r1, [r7, #16]
 800d6b8:	430b      	orrs	r3, r1
 800d6ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a1b      	ldr	r3, [r3, #32]
 800d6dc:	693a      	ldr	r2, [r7, #16]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a95      	ldr	r2, [pc, #596]	; (800d950 <UART_SetConfig+0x2d0>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d120      	bne.n	800d742 <UART_SetConfig+0xc2>
 800d700:	4b94      	ldr	r3, [pc, #592]	; (800d954 <UART_SetConfig+0x2d4>)
 800d702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d706:	f003 0303 	and.w	r3, r3, #3
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d816      	bhi.n	800d73c <UART_SetConfig+0xbc>
 800d70e:	a201      	add	r2, pc, #4	; (adr r2, 800d714 <UART_SetConfig+0x94>)
 800d710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d714:	0800d725 	.word	0x0800d725
 800d718:	0800d731 	.word	0x0800d731
 800d71c:	0800d72b 	.word	0x0800d72b
 800d720:	0800d737 	.word	0x0800d737
 800d724:	2301      	movs	r3, #1
 800d726:	77fb      	strb	r3, [r7, #31]
 800d728:	e14f      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d72a:	2302      	movs	r3, #2
 800d72c:	77fb      	strb	r3, [r7, #31]
 800d72e:	e14c      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d730:	2304      	movs	r3, #4
 800d732:	77fb      	strb	r3, [r7, #31]
 800d734:	e149      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d736:	2308      	movs	r3, #8
 800d738:	77fb      	strb	r3, [r7, #31]
 800d73a:	e146      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d73c:	2310      	movs	r3, #16
 800d73e:	77fb      	strb	r3, [r7, #31]
 800d740:	e143      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a84      	ldr	r2, [pc, #528]	; (800d958 <UART_SetConfig+0x2d8>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d132      	bne.n	800d7b2 <UART_SetConfig+0x132>
 800d74c:	4b81      	ldr	r3, [pc, #516]	; (800d954 <UART_SetConfig+0x2d4>)
 800d74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d752:	f003 030c 	and.w	r3, r3, #12
 800d756:	2b0c      	cmp	r3, #12
 800d758:	d828      	bhi.n	800d7ac <UART_SetConfig+0x12c>
 800d75a:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <UART_SetConfig+0xe0>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d795 	.word	0x0800d795
 800d764:	0800d7ad 	.word	0x0800d7ad
 800d768:	0800d7ad 	.word	0x0800d7ad
 800d76c:	0800d7ad 	.word	0x0800d7ad
 800d770:	0800d7a1 	.word	0x0800d7a1
 800d774:	0800d7ad 	.word	0x0800d7ad
 800d778:	0800d7ad 	.word	0x0800d7ad
 800d77c:	0800d7ad 	.word	0x0800d7ad
 800d780:	0800d79b 	.word	0x0800d79b
 800d784:	0800d7ad 	.word	0x0800d7ad
 800d788:	0800d7ad 	.word	0x0800d7ad
 800d78c:	0800d7ad 	.word	0x0800d7ad
 800d790:	0800d7a7 	.word	0x0800d7a7
 800d794:	2300      	movs	r3, #0
 800d796:	77fb      	strb	r3, [r7, #31]
 800d798:	e117      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d79a:	2302      	movs	r3, #2
 800d79c:	77fb      	strb	r3, [r7, #31]
 800d79e:	e114      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	77fb      	strb	r3, [r7, #31]
 800d7a4:	e111      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7a6:	2308      	movs	r3, #8
 800d7a8:	77fb      	strb	r3, [r7, #31]
 800d7aa:	e10e      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	77fb      	strb	r3, [r7, #31]
 800d7b0:	e10b      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a69      	ldr	r2, [pc, #420]	; (800d95c <UART_SetConfig+0x2dc>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d120      	bne.n	800d7fe <UART_SetConfig+0x17e>
 800d7bc:	4b65      	ldr	r3, [pc, #404]	; (800d954 <UART_SetConfig+0x2d4>)
 800d7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d7c6:	2b30      	cmp	r3, #48	; 0x30
 800d7c8:	d013      	beq.n	800d7f2 <UART_SetConfig+0x172>
 800d7ca:	2b30      	cmp	r3, #48	; 0x30
 800d7cc:	d814      	bhi.n	800d7f8 <UART_SetConfig+0x178>
 800d7ce:	2b20      	cmp	r3, #32
 800d7d0:	d009      	beq.n	800d7e6 <UART_SetConfig+0x166>
 800d7d2:	2b20      	cmp	r3, #32
 800d7d4:	d810      	bhi.n	800d7f8 <UART_SetConfig+0x178>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <UART_SetConfig+0x160>
 800d7da:	2b10      	cmp	r3, #16
 800d7dc:	d006      	beq.n	800d7ec <UART_SetConfig+0x16c>
 800d7de:	e00b      	b.n	800d7f8 <UART_SetConfig+0x178>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	77fb      	strb	r3, [r7, #31]
 800d7e4:	e0f1      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	77fb      	strb	r3, [r7, #31]
 800d7ea:	e0ee      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7ec:	2304      	movs	r3, #4
 800d7ee:	77fb      	strb	r3, [r7, #31]
 800d7f0:	e0eb      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7f2:	2308      	movs	r3, #8
 800d7f4:	77fb      	strb	r3, [r7, #31]
 800d7f6:	e0e8      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7f8:	2310      	movs	r3, #16
 800d7fa:	77fb      	strb	r3, [r7, #31]
 800d7fc:	e0e5      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a57      	ldr	r2, [pc, #348]	; (800d960 <UART_SetConfig+0x2e0>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d120      	bne.n	800d84a <UART_SetConfig+0x1ca>
 800d808:	4b52      	ldr	r3, [pc, #328]	; (800d954 <UART_SetConfig+0x2d4>)
 800d80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d812:	2bc0      	cmp	r3, #192	; 0xc0
 800d814:	d013      	beq.n	800d83e <UART_SetConfig+0x1be>
 800d816:	2bc0      	cmp	r3, #192	; 0xc0
 800d818:	d814      	bhi.n	800d844 <UART_SetConfig+0x1c4>
 800d81a:	2b80      	cmp	r3, #128	; 0x80
 800d81c:	d009      	beq.n	800d832 <UART_SetConfig+0x1b2>
 800d81e:	2b80      	cmp	r3, #128	; 0x80
 800d820:	d810      	bhi.n	800d844 <UART_SetConfig+0x1c4>
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <UART_SetConfig+0x1ac>
 800d826:	2b40      	cmp	r3, #64	; 0x40
 800d828:	d006      	beq.n	800d838 <UART_SetConfig+0x1b8>
 800d82a:	e00b      	b.n	800d844 <UART_SetConfig+0x1c4>
 800d82c:	2300      	movs	r3, #0
 800d82e:	77fb      	strb	r3, [r7, #31]
 800d830:	e0cb      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d832:	2302      	movs	r3, #2
 800d834:	77fb      	strb	r3, [r7, #31]
 800d836:	e0c8      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d838:	2304      	movs	r3, #4
 800d83a:	77fb      	strb	r3, [r7, #31]
 800d83c:	e0c5      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d83e:	2308      	movs	r3, #8
 800d840:	77fb      	strb	r3, [r7, #31]
 800d842:	e0c2      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d844:	2310      	movs	r3, #16
 800d846:	77fb      	strb	r3, [r7, #31]
 800d848:	e0bf      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a45      	ldr	r2, [pc, #276]	; (800d964 <UART_SetConfig+0x2e4>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d125      	bne.n	800d8a0 <UART_SetConfig+0x220>
 800d854:	4b3f      	ldr	r3, [pc, #252]	; (800d954 <UART_SetConfig+0x2d4>)
 800d856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d862:	d017      	beq.n	800d894 <UART_SetConfig+0x214>
 800d864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d868:	d817      	bhi.n	800d89a <UART_SetConfig+0x21a>
 800d86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d86e:	d00b      	beq.n	800d888 <UART_SetConfig+0x208>
 800d870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d874:	d811      	bhi.n	800d89a <UART_SetConfig+0x21a>
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <UART_SetConfig+0x202>
 800d87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d87e:	d006      	beq.n	800d88e <UART_SetConfig+0x20e>
 800d880:	e00b      	b.n	800d89a <UART_SetConfig+0x21a>
 800d882:	2300      	movs	r3, #0
 800d884:	77fb      	strb	r3, [r7, #31]
 800d886:	e0a0      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d888:	2302      	movs	r3, #2
 800d88a:	77fb      	strb	r3, [r7, #31]
 800d88c:	e09d      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d88e:	2304      	movs	r3, #4
 800d890:	77fb      	strb	r3, [r7, #31]
 800d892:	e09a      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d894:	2308      	movs	r3, #8
 800d896:	77fb      	strb	r3, [r7, #31]
 800d898:	e097      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d89a:	2310      	movs	r3, #16
 800d89c:	77fb      	strb	r3, [r7, #31]
 800d89e:	e094      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a30      	ldr	r2, [pc, #192]	; (800d968 <UART_SetConfig+0x2e8>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d125      	bne.n	800d8f6 <UART_SetConfig+0x276>
 800d8aa:	4b2a      	ldr	r3, [pc, #168]	; (800d954 <UART_SetConfig+0x2d4>)
 800d8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d8b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8b8:	d017      	beq.n	800d8ea <UART_SetConfig+0x26a>
 800d8ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8be:	d817      	bhi.n	800d8f0 <UART_SetConfig+0x270>
 800d8c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8c4:	d00b      	beq.n	800d8de <UART_SetConfig+0x25e>
 800d8c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8ca:	d811      	bhi.n	800d8f0 <UART_SetConfig+0x270>
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d003      	beq.n	800d8d8 <UART_SetConfig+0x258>
 800d8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8d4:	d006      	beq.n	800d8e4 <UART_SetConfig+0x264>
 800d8d6:	e00b      	b.n	800d8f0 <UART_SetConfig+0x270>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	77fb      	strb	r3, [r7, #31]
 800d8dc:	e075      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d8de:	2302      	movs	r3, #2
 800d8e0:	77fb      	strb	r3, [r7, #31]
 800d8e2:	e072      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	77fb      	strb	r3, [r7, #31]
 800d8e8:	e06f      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d8ea:	2308      	movs	r3, #8
 800d8ec:	77fb      	strb	r3, [r7, #31]
 800d8ee:	e06c      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d8f0:	2310      	movs	r3, #16
 800d8f2:	77fb      	strb	r3, [r7, #31]
 800d8f4:	e069      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a1c      	ldr	r2, [pc, #112]	; (800d96c <UART_SetConfig+0x2ec>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d137      	bne.n	800d970 <UART_SetConfig+0x2f0>
 800d900:	4b14      	ldr	r3, [pc, #80]	; (800d954 <UART_SetConfig+0x2d4>)
 800d902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d906:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d90a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d90e:	d017      	beq.n	800d940 <UART_SetConfig+0x2c0>
 800d910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d914:	d817      	bhi.n	800d946 <UART_SetConfig+0x2c6>
 800d916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d91a:	d00b      	beq.n	800d934 <UART_SetConfig+0x2b4>
 800d91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d920:	d811      	bhi.n	800d946 <UART_SetConfig+0x2c6>
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <UART_SetConfig+0x2ae>
 800d926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d92a:	d006      	beq.n	800d93a <UART_SetConfig+0x2ba>
 800d92c:	e00b      	b.n	800d946 <UART_SetConfig+0x2c6>
 800d92e:	2300      	movs	r3, #0
 800d930:	77fb      	strb	r3, [r7, #31]
 800d932:	e04a      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d934:	2302      	movs	r3, #2
 800d936:	77fb      	strb	r3, [r7, #31]
 800d938:	e047      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d93a:	2304      	movs	r3, #4
 800d93c:	77fb      	strb	r3, [r7, #31]
 800d93e:	e044      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d940:	2308      	movs	r3, #8
 800d942:	77fb      	strb	r3, [r7, #31]
 800d944:	e041      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d946:	2310      	movs	r3, #16
 800d948:	77fb      	strb	r3, [r7, #31]
 800d94a:	e03e      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d94c:	efff69f3 	.word	0xefff69f3
 800d950:	40011000 	.word	0x40011000
 800d954:	40023800 	.word	0x40023800
 800d958:	40004400 	.word	0x40004400
 800d95c:	40004800 	.word	0x40004800
 800d960:	40004c00 	.word	0x40004c00
 800d964:	40005000 	.word	0x40005000
 800d968:	40011400 	.word	0x40011400
 800d96c:	40007800 	.word	0x40007800
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a94      	ldr	r2, [pc, #592]	; (800dbc8 <UART_SetConfig+0x548>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d125      	bne.n	800d9c6 <UART_SetConfig+0x346>
 800d97a:	4b94      	ldr	r3, [pc, #592]	; (800dbcc <UART_SetConfig+0x54c>)
 800d97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d988:	d017      	beq.n	800d9ba <UART_SetConfig+0x33a>
 800d98a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d98e:	d817      	bhi.n	800d9c0 <UART_SetConfig+0x340>
 800d990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d994:	d00b      	beq.n	800d9ae <UART_SetConfig+0x32e>
 800d996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d99a:	d811      	bhi.n	800d9c0 <UART_SetConfig+0x340>
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d003      	beq.n	800d9a8 <UART_SetConfig+0x328>
 800d9a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9a4:	d006      	beq.n	800d9b4 <UART_SetConfig+0x334>
 800d9a6:	e00b      	b.n	800d9c0 <UART_SetConfig+0x340>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	77fb      	strb	r3, [r7, #31]
 800d9ac:	e00d      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	77fb      	strb	r3, [r7, #31]
 800d9b2:	e00a      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d9b4:	2304      	movs	r3, #4
 800d9b6:	77fb      	strb	r3, [r7, #31]
 800d9b8:	e007      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d9ba:	2308      	movs	r3, #8
 800d9bc:	77fb      	strb	r3, [r7, #31]
 800d9be:	e004      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d9c0:	2310      	movs	r3, #16
 800d9c2:	77fb      	strb	r3, [r7, #31]
 800d9c4:	e001      	b.n	800d9ca <UART_SetConfig+0x34a>
 800d9c6:	2310      	movs	r3, #16
 800d9c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9d2:	d17f      	bne.n	800dad4 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800d9d4:	7ffb      	ldrb	r3, [r7, #31]
 800d9d6:	2b08      	cmp	r3, #8
 800d9d8:	d85c      	bhi.n	800da94 <UART_SetConfig+0x414>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <UART_SetConfig+0x360>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800da05 	.word	0x0800da05
 800d9e4:	0800da25 	.word	0x0800da25
 800d9e8:	0800da45 	.word	0x0800da45
 800d9ec:	0800da95 	.word	0x0800da95
 800d9f0:	0800da5d 	.word	0x0800da5d
 800d9f4:	0800da95 	.word	0x0800da95
 800d9f8:	0800da95 	.word	0x0800da95
 800d9fc:	0800da95 	.word	0x0800da95
 800da00:	0800da7d 	.word	0x0800da7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da04:	f7fd fb6a 	bl	800b0dc <HAL_RCC_GetPCLK1Freq>
 800da08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	005a      	lsls	r2, r3, #1
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	085b      	lsrs	r3, r3, #1
 800da14:	441a      	add	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da1e:	b29b      	uxth	r3, r3
 800da20:	61bb      	str	r3, [r7, #24]
        break;
 800da22:	e03a      	b.n	800da9a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da24:	f7fd fb6e 	bl	800b104 <HAL_RCC_GetPCLK2Freq>
 800da28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	005a      	lsls	r2, r3, #1
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	085b      	lsrs	r3, r3, #1
 800da34:	441a      	add	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3e:	b29b      	uxth	r3, r3
 800da40:	61bb      	str	r3, [r7, #24]
        break;
 800da42:	e02a      	b.n	800da9a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	085a      	lsrs	r2, r3, #1
 800da4a:	4b61      	ldr	r3, [pc, #388]	; (800dbd0 <UART_SetConfig+0x550>)
 800da4c:	4413      	add	r3, r2
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	6852      	ldr	r2, [r2, #4]
 800da52:	fbb3 f3f2 	udiv	r3, r3, r2
 800da56:	b29b      	uxth	r3, r3
 800da58:	61bb      	str	r3, [r7, #24]
        break;
 800da5a:	e01e      	b.n	800da9a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da5c:	f7fd fa7c 	bl	800af58 <HAL_RCC_GetSysClockFreq>
 800da60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	005a      	lsls	r2, r3, #1
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	085b      	lsrs	r3, r3, #1
 800da6c:	441a      	add	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	fbb2 f3f3 	udiv	r3, r2, r3
 800da76:	b29b      	uxth	r3, r3
 800da78:	61bb      	str	r3, [r7, #24]
        break;
 800da7a:	e00e      	b.n	800da9a <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	085b      	lsrs	r3, r3, #1
 800da82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8e:	b29b      	uxth	r3, r3
 800da90:	61bb      	str	r3, [r7, #24]
        break;
 800da92:	e002      	b.n	800da9a <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	75fb      	strb	r3, [r7, #23]
        break;
 800da98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	2b0f      	cmp	r3, #15
 800da9e:	d916      	bls.n	800dace <UART_SetConfig+0x44e>
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daa6:	d212      	bcs.n	800dace <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	b29b      	uxth	r3, r3
 800daac:	f023 030f 	bic.w	r3, r3, #15
 800dab0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	085b      	lsrs	r3, r3, #1
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	f003 0307 	and.w	r3, r3, #7
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	897b      	ldrh	r3, [r7, #10]
 800dac0:	4313      	orrs	r3, r2
 800dac2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	897a      	ldrh	r2, [r7, #10]
 800daca:	60da      	str	r2, [r3, #12]
 800dacc:	e070      	b.n	800dbb0 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	75fb      	strb	r3, [r7, #23]
 800dad2:	e06d      	b.n	800dbb0 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800dad4:	7ffb      	ldrb	r3, [r7, #31]
 800dad6:	2b08      	cmp	r3, #8
 800dad8:	d859      	bhi.n	800db8e <UART_SetConfig+0x50e>
 800dada:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <UART_SetConfig+0x460>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800db05 	.word	0x0800db05
 800dae4:	0800db23 	.word	0x0800db23
 800dae8:	0800db41 	.word	0x0800db41
 800daec:	0800db8f 	.word	0x0800db8f
 800daf0:	0800db59 	.word	0x0800db59
 800daf4:	0800db8f 	.word	0x0800db8f
 800daf8:	0800db8f 	.word	0x0800db8f
 800dafc:	0800db8f 	.word	0x0800db8f
 800db00:	0800db77 	.word	0x0800db77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db04:	f7fd faea 	bl	800b0dc <HAL_RCC_GetPCLK1Freq>
 800db08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	085a      	lsrs	r2, r3, #1
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	441a      	add	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	fbb2 f3f3 	udiv	r3, r2, r3
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	61bb      	str	r3, [r7, #24]
        break;
 800db20:	e038      	b.n	800db94 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db22:	f7fd faef 	bl	800b104 <HAL_RCC_GetPCLK2Freq>
 800db26:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	085a      	lsrs	r2, r3, #1
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	441a      	add	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	fbb2 f3f3 	udiv	r3, r2, r3
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	61bb      	str	r3, [r7, #24]
        break;
 800db3e:	e029      	b.n	800db94 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	085a      	lsrs	r2, r3, #1
 800db46:	4b23      	ldr	r3, [pc, #140]	; (800dbd4 <UART_SetConfig+0x554>)
 800db48:	4413      	add	r3, r2
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	6852      	ldr	r2, [r2, #4]
 800db4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db52:	b29b      	uxth	r3, r3
 800db54:	61bb      	str	r3, [r7, #24]
        break;
 800db56:	e01d      	b.n	800db94 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db58:	f7fd f9fe 	bl	800af58 <HAL_RCC_GetSysClockFreq>
 800db5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	085a      	lsrs	r2, r3, #1
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	441a      	add	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db70:	b29b      	uxth	r3, r3
 800db72:	61bb      	str	r3, [r7, #24]
        break;
 800db74:	e00e      	b.n	800db94 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	085b      	lsrs	r3, r3, #1
 800db7c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	fbb2 f3f3 	udiv	r3, r2, r3
 800db88:	b29b      	uxth	r3, r3
 800db8a:	61bb      	str	r3, [r7, #24]
        break;
 800db8c:	e002      	b.n	800db94 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	75fb      	strb	r3, [r7, #23]
        break;
 800db92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	2b0f      	cmp	r3, #15
 800db98:	d908      	bls.n	800dbac <UART_SetConfig+0x52c>
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba0:	d204      	bcs.n	800dbac <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	69ba      	ldr	r2, [r7, #24]
 800dba8:	60da      	str	r2, [r3, #12]
 800dbaa:	e001      	b.n	800dbb0 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	40007c00 	.word	0x40007c00
 800dbcc:	40023800 	.word	0x40023800
 800dbd0:	01e84800 	.word	0x01e84800
 800dbd4:	00f42400 	.word	0x00f42400

0800dbd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe4:	f003 0301 	and.w	r3, r3, #1
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00a      	beq.n	800dc02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	430a      	orrs	r2, r1
 800dc00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00a      	beq.n	800dc24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	430a      	orrs	r2, r1
 800dc22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00a      	beq.n	800dc46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	430a      	orrs	r2, r1
 800dc44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	f003 0308 	and.w	r3, r3, #8
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	430a      	orrs	r2, r1
 800dc66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00a      	beq.n	800dc8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	430a      	orrs	r2, r1
 800dc88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00a      	beq.n	800dcac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d01a      	beq.n	800dcee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcd6:	d10a      	bne.n	800dcee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	430a      	orrs	r2, r1
 800dcec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	430a      	orrs	r2, r1
 800dd0e:	605a      	str	r2, [r3, #4]
  }
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800dd2a:	f7f9 ffb7 	bl	8007c9c <HAL_GetTick>
 800dd2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f003 0308 	and.w	r3, r3, #8
 800dd3a:	2b08      	cmp	r3, #8
 800dd3c:	d10e      	bne.n	800dd5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f82a 	bl	800dda6 <UART_WaitOnFlagUntilTimeout>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e020      	b.n	800dd9e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 0304 	and.w	r3, r3, #4
 800dd66:	2b04      	cmp	r3, #4
 800dd68:	d10e      	bne.n	800dd88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f814 	bl	800dda6 <UART_WaitOnFlagUntilTimeout>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd84:	2303      	movs	r3, #3
 800dd86:	e00a      	b.n	800dd9e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2220      	movs	r2, #32
 800dd8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2220      	movs	r2, #32
 800dd92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	603b      	str	r3, [r7, #0]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddb6:	e05d      	b.n	800de74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddbe:	d059      	beq.n	800de74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddc0:	f7f9 ff6c 	bl	8007c9c <HAL_GetTick>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	69ba      	ldr	r2, [r7, #24]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d302      	bcc.n	800ddd6 <UART_WaitOnFlagUntilTimeout+0x30>
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d11b      	bne.n	800de0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dde4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f022 0201 	bic.w	r2, r2, #1
 800ddf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2220      	movs	r2, #32
 800ddfa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2220      	movs	r2, #32
 800de00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e042      	b.n	800de94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d02b      	beq.n	800de74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	69db      	ldr	r3, [r3, #28]
 800de22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de2a:	d123      	bne.n	800de74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800de44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	689a      	ldr	r2, [r3, #8]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f022 0201 	bic.w	r2, r2, #1
 800de54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2220      	movs	r2, #32
 800de5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2220      	movs	r2, #32
 800de60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2220      	movs	r2, #32
 800de66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e00f      	b.n	800de94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	69da      	ldr	r2, [r3, #28]
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	4013      	ands	r3, r2
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	429a      	cmp	r2, r3
 800de82:	bf0c      	ite	eq
 800de84:	2301      	moveq	r3, #1
 800de86:	2300      	movne	r3, #0
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	461a      	mov	r2, r3
 800de8c:	79fb      	ldrb	r3, [r7, #7]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d092      	beq.n	800ddb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800deb2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2220      	movs	r2, #32
 800deb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b083      	sub	sp, #12
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dedc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 0201 	bic.w	r2, r2, #1
 800deec:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2220      	movs	r2, #32
 800def2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	661a      	str	r2, [r3, #96]	; 0x60
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b084      	sub	sp, #16
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df12:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	69db      	ldr	r3, [r3, #28]
 800df18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df1c:	d01e      	beq.n	800df5c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df34:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	689a      	ldr	r2, [r3, #8]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f022 0201 	bic.w	r2, r2, #1
 800df44:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df54:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2220      	movs	r2, #32
 800df5a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f7ff fb71 	bl	800d644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df62:	bf00      	nop
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f7ff fb6d 	bl	800d658 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df7e:	bf00      	nop
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b086      	sub	sp, #24
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df92:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfaa:	2b80      	cmp	r3, #128	; 0x80
 800dfac:	d109      	bne.n	800dfc2 <UART_DMAError+0x3c>
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	2b21      	cmp	r3, #33	; 0x21
 800dfb2:	d106      	bne.n	800dfc2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800dfbc:	6978      	ldr	r0, [r7, #20]
 800dfbe:	f7ff ff6d 	bl	800de9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfcc:	2b40      	cmp	r3, #64	; 0x40
 800dfce:	d109      	bne.n	800dfe4 <UART_DMAError+0x5e>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2b22      	cmp	r3, #34	; 0x22
 800dfd4:	d106      	bne.n	800dfe4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800dfde:	6978      	ldr	r0, [r7, #20]
 800dfe0:	f7ff ff71 	bl	800dec6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfe8:	f043 0210 	orr.w	r2, r3, #16
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dff0:	6978      	ldr	r0, [r7, #20]
 800dff2:	f7ff fb3b 	bl	800d66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
	...

0800e000 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e000:	b084      	sub	sp, #16
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	f107 001c 	add.w	r0, r7, #28
 800e00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	2b01      	cmp	r3, #1
 800e016:	d120      	bne.n	800e05a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e01c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	4b20      	ldr	r3, [pc, #128]	; (800e0ac <USB_CoreInit+0xac>)
 800e02a:	4013      	ands	r3, r2
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d105      	bne.n	800e04e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fa52 	bl	800e4f8 <USB_CoreReset>
 800e054:	4603      	mov	r3, r0
 800e056:	73fb      	strb	r3, [r7, #15]
 800e058:	e010      	b.n	800e07c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fa46 	bl	800e4f8 <USB_CoreReset>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d10b      	bne.n	800e09a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	f043 0206 	orr.w	r2, r3, #6
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f043 0220 	orr.w	r2, r3, #32
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0a6:	b004      	add	sp, #16
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	ffbdffbf 	.word	0xffbdffbf

0800e0b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	f023 0201 	bic.w	r2, r3, #1
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	370c      	adds	r7, #12
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e0ea:	78fb      	ldrb	r3, [r7, #3]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d106      	bne.n	800e0fe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	60da      	str	r2, [r3, #12]
 800e0fc:	e00b      	b.n	800e116 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e0fe:	78fb      	ldrb	r3, [r7, #3]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	60da      	str	r2, [r3, #12]
 800e110:	e001      	b.n	800e116 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e003      	b.n	800e11e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e116:	2032      	movs	r0, #50	; 0x32
 800e118:	f7f9 fdcc 	bl	8007cb4 <HAL_Delay>

  return HAL_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e128:	b084      	sub	sp, #16
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b086      	sub	sp, #24
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e142:	2300      	movs	r3, #0
 800e144:	613b      	str	r3, [r7, #16]
 800e146:	e009      	b.n	800e15c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	3340      	adds	r3, #64	; 0x40
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	2200      	movs	r2, #0
 800e154:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	3301      	adds	r3, #1
 800e15a:	613b      	str	r3, [r7, #16]
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	2b0e      	cmp	r3, #14
 800e160:	d9f2      	bls.n	800e148 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e164:	2b00      	cmp	r3, #0
 800e166:	d11c      	bne.n	800e1a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e176:	f043 0302 	orr.w	r3, r3, #2
 800e17a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	601a      	str	r2, [r3, #0]
 800e1a0:	e005      	b.n	800e1ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	680b      	ldr	r3, [r1, #0]
 800e1cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d10c      	bne.n	800e1ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d104      	bne.n	800e1e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1da:	2100      	movs	r1, #0
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f959 	bl	800e494 <USB_SetDevSpeed>
 800e1e2:	e018      	b.n	800e216 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e1e4:	2101      	movs	r1, #1
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f954 	bl	800e494 <USB_SetDevSpeed>
 800e1ec:	e013      	b.n	800e216 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d10c      	bne.n	800e20e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d104      	bne.n	800e204 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 f949 	bl	800e494 <USB_SetDevSpeed>
 800e202:	e008      	b.n	800e216 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e204:	2101      	movs	r1, #1
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f944 	bl	800e494 <USB_SetDevSpeed>
 800e20c:	e003      	b.n	800e216 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e20e:	2103      	movs	r1, #3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f93f 	bl	800e494 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e216:	2110      	movs	r1, #16
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 f8f3 	bl	800e404 <USB_FlushTxFifo>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 f911 	bl	800e450 <USB_FlushRxFifo>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e23e:	461a      	mov	r2, r3
 800e240:	2300      	movs	r3, #0
 800e242:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e24a:	461a      	mov	r2, r3
 800e24c:	2300      	movs	r3, #0
 800e24e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e256:	461a      	mov	r2, r3
 800e258:	2300      	movs	r3, #0
 800e25a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e25c:	2300      	movs	r3, #0
 800e25e:	613b      	str	r3, [r7, #16]
 800e260:	e043      	b.n	800e2ea <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	015a      	lsls	r2, r3, #5
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4413      	add	r3, r2
 800e26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e278:	d118      	bne.n	800e2ac <USB_DevInit+0x184>
    {
      if (i == 0U)
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	015a      	lsls	r2, r3, #5
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4413      	add	r3, r2
 800e288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e28c:	461a      	mov	r2, r3
 800e28e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	e013      	b.n	800e2be <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	e008      	b.n	800e2be <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	015a      	lsls	r2, r3, #5
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	015a      	lsls	r2, r3, #5
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	015a      	lsls	r2, r3, #5
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2dc:	461a      	mov	r2, r3
 800e2de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e2e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	613b      	str	r3, [r7, #16]
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d3b7      	bcc.n	800e262 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	e043      	b.n	800e380 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e30a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e30e:	d118      	bne.n	800e342 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d10a      	bne.n	800e32c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	015a      	lsls	r2, r3, #5
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	4413      	add	r3, r2
 800e31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e322:	461a      	mov	r2, r3
 800e324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	e013      	b.n	800e354 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	015a      	lsls	r2, r3, #5
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	4413      	add	r3, r2
 800e334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e338:	461a      	mov	r2, r3
 800e33a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	e008      	b.n	800e354 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	015a      	lsls	r2, r3, #5
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	4413      	add	r3, r2
 800e34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e34e:	461a      	mov	r2, r3
 800e350:	2300      	movs	r3, #0
 800e352:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	015a      	lsls	r2, r3, #5
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e360:	461a      	mov	r2, r3
 800e362:	2300      	movs	r3, #0
 800e364:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	015a      	lsls	r2, r3, #5
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	4413      	add	r3, r2
 800e36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e372:	461a      	mov	r2, r3
 800e374:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e378:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	3301      	adds	r3, #1
 800e37e:	613b      	str	r3, [r7, #16]
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	429a      	cmp	r2, r3
 800e386:	d3b7      	bcc.n	800e2f8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	68fa      	ldr	r2, [r7, #12]
 800e392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e39a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e3a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d105      	bne.n	800e3bc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	f043 0210 	orr.w	r2, r3, #16
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	699a      	ldr	r2, [r3, #24]
 800e3c0:	4b0e      	ldr	r3, [pc, #56]	; (800e3fc <USB_DevInit+0x2d4>)
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d005      	beq.n	800e3da <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	f043 0208 	orr.w	r2, r3, #8
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d105      	bne.n	800e3ec <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	699a      	ldr	r2, [r3, #24]
 800e3e4:	4b06      	ldr	r3, [pc, #24]	; (800e400 <USB_DevInit+0x2d8>)
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3718      	adds	r7, #24
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3f8:	b004      	add	sp, #16
 800e3fa:	4770      	bx	lr
 800e3fc:	803c3800 	.word	0x803c3800
 800e400:	40000004 	.word	0x40000004

0800e404 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e40e:	2300      	movs	r3, #0
 800e410:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	019b      	lsls	r3, r3, #6
 800e416:	f043 0220 	orr.w	r2, r3, #32
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	4a09      	ldr	r2, [pc, #36]	; (800e44c <USB_FlushTxFifo+0x48>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d901      	bls.n	800e430 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e006      	b.n	800e43e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	f003 0320 	and.w	r3, r3, #32
 800e438:	2b20      	cmp	r3, #32
 800e43a:	d0f0      	beq.n	800e41e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	00030d40 	.word	0x00030d40

0800e450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e458:	2300      	movs	r3, #0
 800e45a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2210      	movs	r2, #16
 800e460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3301      	adds	r3, #1
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	4a09      	ldr	r2, [pc, #36]	; (800e490 <USB_FlushRxFifo+0x40>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d901      	bls.n	800e474 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e470:	2303      	movs	r3, #3
 800e472:	e006      	b.n	800e482 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	f003 0310 	and.w	r3, r3, #16
 800e47c:	2b10      	cmp	r3, #16
 800e47e:	d0f0      	beq.n	800e462 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	00030d40 	.word	0x00030d40

0800e494 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	460b      	mov	r3, r1
 800e49e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	78fb      	ldrb	r3, [r7, #3]
 800e4ae:	68f9      	ldr	r1, [r7, #12]
 800e4b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b084      	sub	sp, #16
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4e0:	f043 0302 	orr.w	r3, r3, #2
 800e4e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e4e6:	2003      	movs	r0, #3
 800e4e8:	f7f9 fbe4 	bl	8007cb4 <HAL_Delay>

  return HAL_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3301      	adds	r3, #1
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	4a13      	ldr	r2, [pc, #76]	; (800e55c <USB_CoreReset+0x64>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d901      	bls.n	800e516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e512:	2303      	movs	r3, #3
 800e514:	e01b      	b.n	800e54e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	691b      	ldr	r3, [r3, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	daf2      	bge.n	800e504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e51e:	2300      	movs	r3, #0
 800e520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	691b      	ldr	r3, [r3, #16]
 800e526:	f043 0201 	orr.w	r2, r3, #1
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3301      	adds	r3, #1
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4a09      	ldr	r2, [pc, #36]	; (800e55c <USB_CoreReset+0x64>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d901      	bls.n	800e540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e53c:	2303      	movs	r3, #3
 800e53e:	e006      	b.n	800e54e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d0f0      	beq.n	800e52e <USB_CoreReset+0x36>

  return HAL_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	00030d40 	.word	0x00030d40

0800e560 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e560:	b480      	push	{r7}
 800e562:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e564:	bf00      	nop
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
	...

0800e570 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e576:	f3ef 8305 	mrs	r3, IPSR
 800e57a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e57c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d10f      	bne.n	800e5a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e582:	f3ef 8310 	mrs	r3, PRIMASK
 800e586:	607b      	str	r3, [r7, #4]
  return(result);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d105      	bne.n	800e59a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e58e:	f3ef 8311 	mrs	r3, BASEPRI
 800e592:	603b      	str	r3, [r7, #0]
  return(result);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d007      	beq.n	800e5aa <osKernelInitialize+0x3a>
 800e59a:	4b0e      	ldr	r3, [pc, #56]	; (800e5d4 <osKernelInitialize+0x64>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d103      	bne.n	800e5aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e5a2:	f06f 0305 	mvn.w	r3, #5
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	e00c      	b.n	800e5c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e5aa:	4b0a      	ldr	r3, [pc, #40]	; (800e5d4 <osKernelInitialize+0x64>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d105      	bne.n	800e5be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e5b2:	4b08      	ldr	r3, [pc, #32]	; (800e5d4 <osKernelInitialize+0x64>)
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	e002      	b.n	800e5c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e5be:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3714      	adds	r7, #20
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	2000345c 	.word	0x2000345c

0800e5d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5de:	f3ef 8305 	mrs	r3, IPSR
 800e5e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e5e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10f      	bne.n	800e60a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ea:	f3ef 8310 	mrs	r3, PRIMASK
 800e5ee:	607b      	str	r3, [r7, #4]
  return(result);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d105      	bne.n	800e602 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5f6:	f3ef 8311 	mrs	r3, BASEPRI
 800e5fa:	603b      	str	r3, [r7, #0]
  return(result);
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d007      	beq.n	800e612 <osKernelStart+0x3a>
 800e602:	4b0f      	ldr	r3, [pc, #60]	; (800e640 <osKernelStart+0x68>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b02      	cmp	r3, #2
 800e608:	d103      	bne.n	800e612 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e60a:	f06f 0305 	mvn.w	r3, #5
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	e010      	b.n	800e634 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e612:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <osKernelStart+0x68>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b01      	cmp	r3, #1
 800e618:	d109      	bne.n	800e62e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e61a:	f7ff ffa1 	bl	800e560 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e61e:	4b08      	ldr	r3, [pc, #32]	; (800e640 <osKernelStart+0x68>)
 800e620:	2202      	movs	r2, #2
 800e622:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e624:	f001 fa9e 	bl	800fb64 <vTaskStartScheduler>
      stat = osOK;
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	e002      	b.n	800e634 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e62e:	f04f 33ff 	mov.w	r3, #4294967295
 800e632:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e634:	68fb      	ldr	r3, [r7, #12]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	2000345c 	.word	0x2000345c

0800e644 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e644:	b580      	push	{r7, lr}
 800e646:	b090      	sub	sp, #64	; 0x40
 800e648:	af04      	add	r7, sp, #16
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e650:	2300      	movs	r3, #0
 800e652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e654:	f3ef 8305 	mrs	r3, IPSR
 800e658:	61fb      	str	r3, [r7, #28]
  return(result);
 800e65a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f040 808f 	bne.w	800e780 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e662:	f3ef 8310 	mrs	r3, PRIMASK
 800e666:	61bb      	str	r3, [r7, #24]
  return(result);
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d105      	bne.n	800e67a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e66e:	f3ef 8311 	mrs	r3, BASEPRI
 800e672:	617b      	str	r3, [r7, #20]
  return(result);
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d003      	beq.n	800e682 <osThreadNew+0x3e>
 800e67a:	4b44      	ldr	r3, [pc, #272]	; (800e78c <osThreadNew+0x148>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d07e      	beq.n	800e780 <osThreadNew+0x13c>
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d07b      	beq.n	800e780 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e688:	2380      	movs	r3, #128	; 0x80
 800e68a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e68c:	2318      	movs	r3, #24
 800e68e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e690:	2300      	movs	r3, #0
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e694:	f04f 33ff 	mov.w	r3, #4294967295
 800e698:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d045      	beq.n	800e72c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <osThreadNew+0x6a>
        name = attr->name;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d008      	beq.n	800e6d4 <osThreadNew+0x90>
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c4:	2b38      	cmp	r3, #56	; 0x38
 800e6c6:	d805      	bhi.n	800e6d4 <osThreadNew+0x90>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	f003 0301 	and.w	r3, r3, #1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <osThreadNew+0x94>
        return (NULL);
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e054      	b.n	800e782 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d003      	beq.n	800e6e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	089b      	lsrs	r3, r3, #2
 800e6e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00e      	beq.n	800e70e <osThreadNew+0xca>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	2b5b      	cmp	r3, #91	; 0x5b
 800e6f6:	d90a      	bls.n	800e70e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d006      	beq.n	800e70e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d002      	beq.n	800e70e <osThreadNew+0xca>
        mem = 1;
 800e708:	2301      	movs	r3, #1
 800e70a:	623b      	str	r3, [r7, #32]
 800e70c:	e010      	b.n	800e730 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10c      	bne.n	800e730 <osThreadNew+0xec>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d108      	bne.n	800e730 <osThreadNew+0xec>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d104      	bne.n	800e730 <osThreadNew+0xec>
          mem = 0;
 800e726:	2300      	movs	r3, #0
 800e728:	623b      	str	r3, [r7, #32]
 800e72a:	e001      	b.n	800e730 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d110      	bne.n	800e758 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e73e:	9202      	str	r2, [sp, #8]
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 ffb5 	bl	800f6bc <xTaskCreateStatic>
 800e752:	4603      	mov	r3, r0
 800e754:	613b      	str	r3, [r7, #16]
 800e756:	e013      	b.n	800e780 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d110      	bne.n	800e780 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e760:	b29a      	uxth	r2, r3
 800e762:	f107 0310 	add.w	r3, r7, #16
 800e766:	9301      	str	r3, [sp, #4]
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f001 f806 	bl	800f782 <xTaskCreate>
 800e776:	4603      	mov	r3, r0
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d001      	beq.n	800e780 <osThreadNew+0x13c>
          hTask = NULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e780:	693b      	ldr	r3, [r7, #16]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3730      	adds	r7, #48	; 0x30
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	2000345c 	.word	0x2000345c

0800e790 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800e790:	b580      	push	{r7, lr}
 800e792:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800e794:	2000      	movs	r0, #0
 800e796:	f001 f93b 	bl	800fa10 <vTaskDelete>
#endif
  for (;;);
 800e79a:	e7fe      	b.n	800e79a <osThreadExit+0xa>

0800e79c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7a4:	f3ef 8305 	mrs	r3, IPSR
 800e7a8:	613b      	str	r3, [r7, #16]
  return(result);
 800e7aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10f      	bne.n	800e7d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e7b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d105      	bne.n	800e7c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7bc:	f3ef 8311 	mrs	r3, BASEPRI
 800e7c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d007      	beq.n	800e7d8 <osDelay+0x3c>
 800e7c8:	4b0a      	ldr	r3, [pc, #40]	; (800e7f4 <osDelay+0x58>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	d103      	bne.n	800e7d8 <osDelay+0x3c>
    stat = osErrorISR;
 800e7d0:	f06f 0305 	mvn.w	r3, #5
 800e7d4:	617b      	str	r3, [r7, #20]
 800e7d6:	e007      	b.n	800e7e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d002      	beq.n	800e7e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 f988 	bl	800faf8 <vTaskDelay>
    }
  }

  return (stat);
 800e7e8:	697b      	ldr	r3, [r7, #20]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3718      	adds	r7, #24
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	2000345c 	.word	0x2000345c

0800e7f8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b088      	sub	sp, #32
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e800:	2300      	movs	r3, #0
 800e802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e804:	f3ef 8305 	mrs	r3, IPSR
 800e808:	617b      	str	r3, [r7, #20]
  return(result);
 800e80a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d13d      	bne.n	800e88c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e810:	f3ef 8310 	mrs	r3, PRIMASK
 800e814:	613b      	str	r3, [r7, #16]
  return(result);
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d105      	bne.n	800e828 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e81c:	f3ef 8311 	mrs	r3, BASEPRI
 800e820:	60fb      	str	r3, [r7, #12]
  return(result);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d003      	beq.n	800e830 <osEventFlagsNew+0x38>
 800e828:	4b1b      	ldr	r3, [pc, #108]	; (800e898 <osEventFlagsNew+0xa0>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	d02d      	beq.n	800e88c <osEventFlagsNew+0x94>
    mem = -1;
 800e830:	f04f 33ff 	mov.w	r3, #4294967295
 800e834:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d015      	beq.n	800e868 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	689b      	ldr	r3, [r3, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d006      	beq.n	800e852 <osEventFlagsNew+0x5a>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	2b1f      	cmp	r3, #31
 800e84a:	d902      	bls.n	800e852 <osEventFlagsNew+0x5a>
        mem = 1;
 800e84c:	2301      	movs	r3, #1
 800e84e:	61bb      	str	r3, [r7, #24]
 800e850:	e00c      	b.n	800e86c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d108      	bne.n	800e86c <osEventFlagsNew+0x74>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d104      	bne.n	800e86c <osEventFlagsNew+0x74>
          mem = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	61bb      	str	r3, [r7, #24]
 800e866:	e001      	b.n	800e86c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d106      	bne.n	800e880 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	4618      	mov	r0, r3
 800e878:	f000 f888 	bl	800e98c <xEventGroupCreateStatic>
 800e87c:	61f8      	str	r0, [r7, #28]
 800e87e:	e005      	b.n	800e88c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d102      	bne.n	800e88c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800e886:	f000 f8bc 	bl	800ea02 <xEventGroupCreate>
 800e88a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e88c:	69fb      	ldr	r3, [r7, #28]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3720      	adds	r7, #32
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	2000345c 	.word	0x2000345c

0800e89c <osEventFlagsClear>:
  }

  return (rflags);
}

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b088      	sub	sp, #32
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d004      	beq.n	800e8ba <osEventFlagsClear+0x1e>
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800e8ba:	f06f 0303 	mvn.w	r3, #3
 800e8be:	61fb      	str	r3, [r7, #28]
 800e8c0:	e029      	b.n	800e916 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8c2:	f3ef 8305 	mrs	r3, IPSR
 800e8c6:	617b      	str	r3, [r7, #20]
  return(result);
 800e8c8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10f      	bne.n	800e8ee <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e8d2:	613b      	str	r3, [r7, #16]
  return(result);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d105      	bne.n	800e8e6 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8da:	f3ef 8311 	mrs	r3, BASEPRI
 800e8de:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d012      	beq.n	800e90c <osEventFlagsClear+0x70>
 800e8e6:	4b0e      	ldr	r3, [pc, #56]	; (800e920 <osEventFlagsClear+0x84>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d10e      	bne.n	800e90c <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800e8ee:	69b8      	ldr	r0, [r7, #24]
 800e8f0:	f000 f8f2 	bl	800ead8 <xEventGroupGetBitsFromISR>
 800e8f4:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	69b8      	ldr	r0, [r7, #24]
 800e8fa:	f000 f8d9 	bl	800eab0 <xEventGroupClearBitsFromISR>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d108      	bne.n	800e916 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 800e904:	f06f 0302 	mvn.w	r3, #2
 800e908:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800e90a:	e004      	b.n	800e916 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800e90c:	6839      	ldr	r1, [r7, #0]
 800e90e:	69b8      	ldr	r0, [r7, #24]
 800e910:	f000 f891 	bl	800ea36 <xEventGroupClearBits>
 800e914:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800e916:	69fb      	ldr	r3, [r7, #28]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3720      	adds	r7, #32
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	2000345c 	.word	0x2000345c

0800e924 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	4a07      	ldr	r2, [pc, #28]	; (800e950 <vApplicationGetIdleTaskMemory+0x2c>)
 800e934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	4a06      	ldr	r2, [pc, #24]	; (800e954 <vApplicationGetIdleTaskMemory+0x30>)
 800e93a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2280      	movs	r2, #128	; 0x80
 800e940:	601a      	str	r2, [r3, #0]
}
 800e942:	bf00      	nop
 800e944:	3714      	adds	r7, #20
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	20003460 	.word	0x20003460
 800e954:	200034bc 	.word	0x200034bc

0800e958 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4a07      	ldr	r2, [pc, #28]	; (800e984 <vApplicationGetTimerTaskMemory+0x2c>)
 800e968:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	4a06      	ldr	r2, [pc, #24]	; (800e988 <vApplicationGetTimerTaskMemory+0x30>)
 800e96e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e976:	601a      	str	r2, [r3, #0]
}
 800e978:	bf00      	nop
 800e97a:	3714      	adds	r7, #20
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr
 800e984:	200036bc 	.word	0x200036bc
 800e988:	20003718 	.word	0x20003718

0800e98c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b086      	sub	sp, #24
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d10c      	bne.n	800e9b4 <xEventGroupCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	b672      	cpsid	i
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	b662      	cpsie	i
 800e9ae:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e9b0:	bf00      	nop
 800e9b2:	e7fe      	b.n	800e9b2 <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e9b4:	2320      	movs	r3, #32
 800e9b6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b20      	cmp	r3, #32
 800e9bc:	d00c      	beq.n	800e9d8 <xEventGroupCreateStatic+0x4c>
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c2:	b672      	cpsid	i
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	b662      	cpsie	i
 800e9d2:	60fb      	str	r3, [r7, #12]
}
 800e9d4:	bf00      	nop
 800e9d6:	e7fe      	b.n	800e9d6 <xEventGroupCreateStatic+0x4a>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00a      	beq.n	800e9f8 <xEventGroupCreateStatic+0x6c>
		{
			pxEventBits->uxEventBits = 0;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 f8a6 	bl	800eb3e <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e9f8:	697b      	ldr	r3, [r7, #20]
	}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b082      	sub	sp, #8
 800ea06:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ea08:	2020      	movs	r0, #32
 800ea0a:	f002 fcbb 	bl	8011384 <pvPortMalloc>
 800ea0e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00a      	beq.n	800ea2c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3304      	adds	r3, #4
 800ea20:	4618      	mov	r0, r3
 800ea22:	f000 f88c 	bl	800eb3e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ea2c:	687b      	ldr	r3, [r7, #4]
	}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b086      	sub	sp, #24
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10c      	bne.n	800ea64 <xEventGroupClearBits+0x2e>
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4e:	b672      	cpsid	i
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	b662      	cpsie	i
 800ea5e:	60fb      	str	r3, [r7, #12]
}
 800ea60:	bf00      	nop
 800ea62:	e7fe      	b.n	800ea62 <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00c      	beq.n	800ea88 <xEventGroupClearBits+0x52>
	__asm volatile
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	b672      	cpsid	i
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	b662      	cpsie	i
 800ea82:	60bb      	str	r3, [r7, #8]
}
 800ea84:	bf00      	nop
 800ea86:	e7fe      	b.n	800ea86 <xEventGroupClearBits+0x50>

	taskENTER_CRITICAL();
 800ea88:	f002 fb50 	bl	801112c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	43db      	mvns	r3, r3
 800ea9a:	401a      	ands	r2, r3
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800eaa0:	f002 fb78 	bl	8011194 <vPortExitCritical>

	return uxReturn;
 800eaa4:	693b      	ldr	r3, [r7, #16]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3718      	adds	r7, #24
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
	...

0800eab0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800eaba:	2300      	movs	r3, #0
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	6879      	ldr	r1, [r7, #4]
 800eac0:	4804      	ldr	r0, [pc, #16]	; (800ead4 <xEventGroupClearBitsFromISR+0x24>)
 800eac2:	f002 fa05 	bl	8010ed0 <xTimerPendFunctionCallFromISR>
 800eac6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800eac8:	68fb      	ldr	r3, [r7, #12]
	}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	0800eb25 	.word	0x0800eb25

0800ead8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800ead8:	b480      	push	{r7}
 800eada:	b089      	sub	sp, #36	; 0x24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eae4:	f3ef 8211 	mrs	r2, BASEPRI
 800eae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaec:	b672      	cpsid	i
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	b662      	cpsie	i
 800eafc:	60fa      	str	r2, [r7, #12]
 800eafe:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eb00:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb02:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	617b      	str	r3, [r7, #20]
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eb14:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800eb16:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3724      	adds	r7, #36	; 0x24
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7ff ff80 	bl	800ea36 <xEventGroupClearBits>
}
 800eb36:	bf00      	nop
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b083      	sub	sp, #12
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f103 0208 	add.w	r2, r3, #8
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f04f 32ff 	mov.w	r2, #4294967295
 800eb56:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f103 0208 	add.w	r2, r3, #8
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f103 0208 	add.w	r2, r3, #8
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb72:	bf00      	nop
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr

0800eb7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb7e:	b480      	push	{r7}
 800eb80:	b083      	sub	sp, #12
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	683a      	ldr	r2, [r7, #0]
 800ebc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	601a      	str	r2, [r3, #0]
}
 800ebd4:	bf00      	nop
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf6:	d103      	bne.n	800ec00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	60fb      	str	r3, [r7, #12]
 800ebfe:	e00c      	b.n	800ec1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3308      	adds	r3, #8
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e002      	b.n	800ec0e <vListInsert+0x2e>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d2f6      	bcs.n	800ec08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	601a      	str	r2, [r3, #0]
}
 800ec46:	bf00      	nop
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr

0800ec52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec52:	b480      	push	{r7}
 800ec54:	b085      	sub	sp, #20
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	6892      	ldr	r2, [r2, #8]
 800ec68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	6852      	ldr	r2, [r2, #4]
 800ec72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d103      	bne.n	800ec86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	689a      	ldr	r2, [r3, #8]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	1e5a      	subs	r2, r3, #1
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
	...

0800eca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10c      	bne.n	800ecd6 <xQueueGenericReset+0x2e>
	__asm volatile
 800ecbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc0:	b672      	cpsid	i
 800ecc2:	f383 8811 	msr	BASEPRI, r3
 800ecc6:	f3bf 8f6f 	isb	sy
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	b662      	cpsie	i
 800ecd0:	60bb      	str	r3, [r7, #8]
}
 800ecd2:	bf00      	nop
 800ecd4:	e7fe      	b.n	800ecd4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ecd6:	f002 fa29 	bl	801112c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece2:	68f9      	ldr	r1, [r7, #12]
 800ece4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ece6:	fb01 f303 	mul.w	r3, r1, r3
 800ecea:	441a      	add	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed06:	3b01      	subs	r3, #1
 800ed08:	68f9      	ldr	r1, [r7, #12]
 800ed0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed0c:	fb01 f303 	mul.w	r3, r1, r3
 800ed10:	441a      	add	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	22ff      	movs	r2, #255	; 0xff
 800ed1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	22ff      	movs	r2, #255	; 0xff
 800ed22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d114      	bne.n	800ed56 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d01a      	beq.n	800ed6a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	3310      	adds	r3, #16
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f001 f9ab 	bl	8010094 <xTaskRemoveFromEventList>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d012      	beq.n	800ed6a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ed44:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <xQueueGenericReset+0xd0>)
 800ed46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	f3bf 8f6f 	isb	sy
 800ed54:	e009      	b.n	800ed6a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3310      	adds	r3, #16
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff feef 	bl	800eb3e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	3324      	adds	r3, #36	; 0x24
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff feea 	bl	800eb3e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed6a:	f002 fa13 	bl	8011194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed6e:	2301      	movs	r3, #1
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	e000ed04 	.word	0xe000ed04

0800ed7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08e      	sub	sp, #56	; 0x38
 800ed80:	af02      	add	r7, sp, #8
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10c      	bne.n	800edaa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	b672      	cpsid	i
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	b662      	cpsie	i
 800eda4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eda6:	bf00      	nop
 800eda8:	e7fe      	b.n	800eda8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10c      	bne.n	800edca <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	b672      	cpsid	i
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	b662      	cpsie	i
 800edc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800edc6:	bf00      	nop
 800edc8:	e7fe      	b.n	800edc8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <xQueueGenericCreateStatic+0x5a>
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <xQueueGenericCreateStatic+0x5e>
 800edd6:	2301      	movs	r3, #1
 800edd8:	e000      	b.n	800eddc <xQueueGenericCreateStatic+0x60>
 800edda:	2300      	movs	r3, #0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10c      	bne.n	800edfa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	b672      	cpsid	i
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	b662      	cpsie	i
 800edf4:	623b      	str	r3, [r7, #32]
}
 800edf6:	bf00      	nop
 800edf8:	e7fe      	b.n	800edf8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d102      	bne.n	800ee06 <xQueueGenericCreateStatic+0x8a>
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <xQueueGenericCreateStatic+0x8e>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e000      	b.n	800ee0c <xQueueGenericCreateStatic+0x90>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d10c      	bne.n	800ee2a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee14:	b672      	cpsid	i
 800ee16:	f383 8811 	msr	BASEPRI, r3
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	b662      	cpsie	i
 800ee24:	61fb      	str	r3, [r7, #28]
}
 800ee26:	bf00      	nop
 800ee28:	e7fe      	b.n	800ee28 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee2a:	2350      	movs	r3, #80	; 0x50
 800ee2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	2b50      	cmp	r3, #80	; 0x50
 800ee32:	d00c      	beq.n	800ee4e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	b672      	cpsid	i
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	b662      	cpsie	i
 800ee48:	61bb      	str	r3, [r7, #24]
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00d      	beq.n	800ee76 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ee5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f000 f805 	bl	800ee80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3730      	adds	r7, #48	; 0x30
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d103      	bne.n	800ee9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	e002      	b.n	800eea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eeae:	2101      	movs	r1, #1
 800eeb0:	69b8      	ldr	r0, [r7, #24]
 800eeb2:	f7ff fef9 	bl	800eca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	78fa      	ldrb	r2, [r7, #3]
 800eeba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eebe:	bf00      	nop
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
	...

0800eec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b08e      	sub	sp, #56	; 0x38
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eed6:	2300      	movs	r3, #0
 800eed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d10c      	bne.n	800eefe <xQueueGenericSend+0x36>
	__asm volatile
 800eee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee8:	b672      	cpsid	i
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	b662      	cpsie	i
 800eef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eefa:	bf00      	nop
 800eefc:	e7fe      	b.n	800eefc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d103      	bne.n	800ef0c <xQueueGenericSend+0x44>
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <xQueueGenericSend+0x48>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e000      	b.n	800ef12 <xQueueGenericSend+0x4a>
 800ef10:	2300      	movs	r3, #0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d10c      	bne.n	800ef30 <xQueueGenericSend+0x68>
	__asm volatile
 800ef16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1a:	b672      	cpsid	i
 800ef1c:	f383 8811 	msr	BASEPRI, r3
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	b662      	cpsie	i
 800ef2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef2c:	bf00      	nop
 800ef2e:	e7fe      	b.n	800ef2e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d103      	bne.n	800ef3e <xQueueGenericSend+0x76>
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d101      	bne.n	800ef42 <xQueueGenericSend+0x7a>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e000      	b.n	800ef44 <xQueueGenericSend+0x7c>
 800ef42:	2300      	movs	r3, #0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10c      	bne.n	800ef62 <xQueueGenericSend+0x9a>
	__asm volatile
 800ef48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4c:	b672      	cpsid	i
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	b662      	cpsie	i
 800ef5c:	623b      	str	r3, [r7, #32]
}
 800ef5e:	bf00      	nop
 800ef60:	e7fe      	b.n	800ef60 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef62:	f001 fa5d 	bl	8010420 <xTaskGetSchedulerState>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d102      	bne.n	800ef72 <xQueueGenericSend+0xaa>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d101      	bne.n	800ef76 <xQueueGenericSend+0xae>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e000      	b.n	800ef78 <xQueueGenericSend+0xb0>
 800ef76:	2300      	movs	r3, #0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10c      	bne.n	800ef96 <xQueueGenericSend+0xce>
	__asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	b672      	cpsid	i
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	b662      	cpsie	i
 800ef90:	61fb      	str	r3, [r7, #28]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef96:	f002 f8c9 	bl	801112c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d302      	bcc.n	800efac <xQueueGenericSend+0xe4>
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d129      	bne.n	800f000 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	68b9      	ldr	r1, [r7, #8]
 800efb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efb2:	f000 fa15 	bl	800f3e0 <prvCopyDataToQueue>
 800efb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d010      	beq.n	800efe2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc2:	3324      	adds	r3, #36	; 0x24
 800efc4:	4618      	mov	r0, r3
 800efc6:	f001 f865 	bl	8010094 <xTaskRemoveFromEventList>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d013      	beq.n	800eff8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800efd0:	4b3f      	ldr	r3, [pc, #252]	; (800f0d0 <xQueueGenericSend+0x208>)
 800efd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	e00a      	b.n	800eff8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800efe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d007      	beq.n	800eff8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800efe8:	4b39      	ldr	r3, [pc, #228]	; (800f0d0 <xQueueGenericSend+0x208>)
 800efea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efee:	601a      	str	r2, [r3, #0]
 800eff0:	f3bf 8f4f 	dsb	sy
 800eff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eff8:	f002 f8cc 	bl	8011194 <vPortExitCritical>
				return pdPASS;
 800effc:	2301      	movs	r3, #1
 800effe:	e063      	b.n	800f0c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d103      	bne.n	800f00e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f006:	f002 f8c5 	bl	8011194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f00a:	2300      	movs	r3, #0
 800f00c:	e05c      	b.n	800f0c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f010:	2b00      	cmp	r3, #0
 800f012:	d106      	bne.n	800f022 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f014:	f107 0314 	add.w	r3, r7, #20
 800f018:	4618      	mov	r0, r3
 800f01a:	f001 f8a1 	bl	8010160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f01e:	2301      	movs	r3, #1
 800f020:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f022:	f002 f8b7 	bl	8011194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f026:	f000 fe07 	bl	800fc38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f02a:	f002 f87f 	bl	801112c <vPortEnterCritical>
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f034:	b25b      	sxtb	r3, r3
 800f036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03a:	d103      	bne.n	800f044 <xQueueGenericSend+0x17c>
 800f03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f04a:	b25b      	sxtb	r3, r3
 800f04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f050:	d103      	bne.n	800f05a <xQueueGenericSend+0x192>
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	2200      	movs	r2, #0
 800f056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f05a:	f002 f89b 	bl	8011194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f05e:	1d3a      	adds	r2, r7, #4
 800f060:	f107 0314 	add.w	r3, r7, #20
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f001 f890 	bl	801018c <xTaskCheckForTimeOut>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d124      	bne.n	800f0bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f074:	f000 faac 	bl	800f5d0 <prvIsQueueFull>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d018      	beq.n	800f0b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f080:	3310      	adds	r3, #16
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	4611      	mov	r1, r2
 800f086:	4618      	mov	r0, r3
 800f088:	f000 ffb0 	bl	800ffec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f08e:	f000 fa37 	bl	800f500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f092:	f000 fddf 	bl	800fc54 <xTaskResumeAll>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f47f af7c 	bne.w	800ef96 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f09e:	4b0c      	ldr	r3, [pc, #48]	; (800f0d0 <xQueueGenericSend+0x208>)
 800f0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	e772      	b.n	800ef96 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f0b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0b2:	f000 fa25 	bl	800f500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0b6:	f000 fdcd 	bl	800fc54 <xTaskResumeAll>
 800f0ba:	e76c      	b.n	800ef96 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0be:	f000 fa1f 	bl	800f500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0c2:	f000 fdc7 	bl	800fc54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3738      	adds	r7, #56	; 0x38
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	e000ed04 	.word	0xe000ed04

0800f0d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b08e      	sub	sp, #56	; 0x38
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10c      	bne.n	800f106 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f0:	b672      	cpsid	i
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	b662      	cpsie	i
 800f100:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f102:	bf00      	nop
 800f104:	e7fe      	b.n	800f104 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d103      	bne.n	800f114 <xQueueGenericSendFromISR+0x40>
 800f10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f110:	2b00      	cmp	r3, #0
 800f112:	d101      	bne.n	800f118 <xQueueGenericSendFromISR+0x44>
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <xQueueGenericSendFromISR+0x46>
 800f118:	2300      	movs	r3, #0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10c      	bne.n	800f138 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f122:	b672      	cpsid	i
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	b662      	cpsie	i
 800f132:	623b      	str	r3, [r7, #32]
}
 800f134:	bf00      	nop
 800f136:	e7fe      	b.n	800f136 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d103      	bne.n	800f146 <xQueueGenericSendFromISR+0x72>
 800f13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f142:	2b01      	cmp	r3, #1
 800f144:	d101      	bne.n	800f14a <xQueueGenericSendFromISR+0x76>
 800f146:	2301      	movs	r3, #1
 800f148:	e000      	b.n	800f14c <xQueueGenericSendFromISR+0x78>
 800f14a:	2300      	movs	r3, #0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10c      	bne.n	800f16a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f154:	b672      	cpsid	i
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	b662      	cpsie	i
 800f164:	61fb      	str	r3, [r7, #28]
}
 800f166:	bf00      	nop
 800f168:	e7fe      	b.n	800f168 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f16a:	f002 f8c7 	bl	80112fc <vPortValidateInterruptPriority>
	__asm volatile
 800f16e:	f3ef 8211 	mrs	r2, BASEPRI
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	b672      	cpsid	i
 800f178:	f383 8811 	msr	BASEPRI, r3
 800f17c:	f3bf 8f6f 	isb	sy
 800f180:	f3bf 8f4f 	dsb	sy
 800f184:	b662      	cpsie	i
 800f186:	61ba      	str	r2, [r7, #24]
 800f188:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f18a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f18c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f196:	429a      	cmp	r2, r3
 800f198:	d302      	bcc.n	800f1a0 <xQueueGenericSendFromISR+0xcc>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d12c      	bne.n	800f1fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	68b9      	ldr	r1, [r7, #8]
 800f1ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1b0:	f000 f916 	bl	800f3e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f1b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1bc:	d112      	bne.n	800f1e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d016      	beq.n	800f1f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c8:	3324      	adds	r3, #36	; 0x24
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f000 ff62 	bl	8010094 <xTaskRemoveFromEventList>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00e      	beq.n	800f1f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00b      	beq.n	800f1f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	601a      	str	r2, [r3, #0]
 800f1e2:	e007      	b.n	800f1f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f1e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	b25a      	sxtb	r2, r3
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f1f8:	e001      	b.n	800f1fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f383 8811 	msr	BASEPRI, r3
}
 800f208:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3738      	adds	r7, #56	; 0x38
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b08c      	sub	sp, #48	; 0x30
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f220:	2300      	movs	r3, #0
 800f222:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d10c      	bne.n	800f248 <xQueueReceive+0x34>
	__asm volatile
 800f22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f232:	b672      	cpsid	i
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	b662      	cpsie	i
 800f242:	623b      	str	r3, [r7, #32]
}
 800f244:	bf00      	nop
 800f246:	e7fe      	b.n	800f246 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d103      	bne.n	800f256 <xQueueReceive+0x42>
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f252:	2b00      	cmp	r3, #0
 800f254:	d101      	bne.n	800f25a <xQueueReceive+0x46>
 800f256:	2301      	movs	r3, #1
 800f258:	e000      	b.n	800f25c <xQueueReceive+0x48>
 800f25a:	2300      	movs	r3, #0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d10c      	bne.n	800f27a <xQueueReceive+0x66>
	__asm volatile
 800f260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f264:	b672      	cpsid	i
 800f266:	f383 8811 	msr	BASEPRI, r3
 800f26a:	f3bf 8f6f 	isb	sy
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	b662      	cpsie	i
 800f274:	61fb      	str	r3, [r7, #28]
}
 800f276:	bf00      	nop
 800f278:	e7fe      	b.n	800f278 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f27a:	f001 f8d1 	bl	8010420 <xTaskGetSchedulerState>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d102      	bne.n	800f28a <xQueueReceive+0x76>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d101      	bne.n	800f28e <xQueueReceive+0x7a>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e000      	b.n	800f290 <xQueueReceive+0x7c>
 800f28e:	2300      	movs	r3, #0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10c      	bne.n	800f2ae <xQueueReceive+0x9a>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f298:	b672      	cpsid	i
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	b662      	cpsie	i
 800f2a8:	61bb      	str	r3, [r7, #24]
}
 800f2aa:	bf00      	nop
 800f2ac:	e7fe      	b.n	800f2ac <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2ae:	f001 ff3d 	bl	801112c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d01f      	beq.n	800f2fe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2c2:	f000 f8f7 	bl	800f4b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	1e5a      	subs	r2, r3, #1
 800f2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00f      	beq.n	800f2f6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d8:	3310      	adds	r3, #16
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 feda 	bl	8010094 <xTaskRemoveFromEventList>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d007      	beq.n	800f2f6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2e6:	4b3d      	ldr	r3, [pc, #244]	; (800f3dc <xQueueReceive+0x1c8>)
 800f2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	f3bf 8f4f 	dsb	sy
 800f2f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2f6:	f001 ff4d 	bl	8011194 <vPortExitCritical>
				return pdPASS;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e069      	b.n	800f3d2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d103      	bne.n	800f30c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f304:	f001 ff46 	bl	8011194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f308:	2300      	movs	r3, #0
 800f30a:	e062      	b.n	800f3d2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f312:	f107 0310 	add.w	r3, r7, #16
 800f316:	4618      	mov	r0, r3
 800f318:	f000 ff22 	bl	8010160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f31c:	2301      	movs	r3, #1
 800f31e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f320:	f001 ff38 	bl	8011194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f324:	f000 fc88 	bl	800fc38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f328:	f001 ff00 	bl	801112c <vPortEnterCritical>
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f332:	b25b      	sxtb	r3, r3
 800f334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f338:	d103      	bne.n	800f342 <xQueueReceive+0x12e>
 800f33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33c:	2200      	movs	r2, #0
 800f33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f348:	b25b      	sxtb	r3, r3
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34e:	d103      	bne.n	800f358 <xQueueReceive+0x144>
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f358:	f001 ff1c 	bl	8011194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f35c:	1d3a      	adds	r2, r7, #4
 800f35e:	f107 0310 	add.w	r3, r7, #16
 800f362:	4611      	mov	r1, r2
 800f364:	4618      	mov	r0, r3
 800f366:	f000 ff11 	bl	801018c <xTaskCheckForTimeOut>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d123      	bne.n	800f3b8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f372:	f000 f917 	bl	800f5a4 <prvIsQueueEmpty>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d017      	beq.n	800f3ac <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	3324      	adds	r3, #36	; 0x24
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	4611      	mov	r1, r2
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fe31 	bl	800ffec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f38c:	f000 f8b8 	bl	800f500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f390:	f000 fc60 	bl	800fc54 <xTaskResumeAll>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d189      	bne.n	800f2ae <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f39a:	4b10      	ldr	r3, [pc, #64]	; (800f3dc <xQueueReceive+0x1c8>)
 800f39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3a0:	601a      	str	r2, [r3, #0]
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	e780      	b.n	800f2ae <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ae:	f000 f8a7 	bl	800f500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3b2:	f000 fc4f 	bl	800fc54 <xTaskResumeAll>
 800f3b6:	e77a      	b.n	800f2ae <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ba:	f000 f8a1 	bl	800f500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3be:	f000 fc49 	bl	800fc54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3c4:	f000 f8ee 	bl	800f5a4 <prvIsQueueEmpty>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f43f af6f 	beq.w	800f2ae <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3730      	adds	r7, #48	; 0x30
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	e000ed04 	.word	0xe000ed04

0800f3e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b086      	sub	sp, #24
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10d      	bne.n	800f41a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d14d      	bne.n	800f4a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f001 f826 	bl	801045c <xTaskPriorityDisinherit>
 800f410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	609a      	str	r2, [r3, #8]
 800f418:	e043      	b.n	800f4a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d119      	bne.n	800f454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6858      	ldr	r0, [r3, #4]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f428:	461a      	mov	r2, r3
 800f42a:	68b9      	ldr	r1, [r7, #8]
 800f42c:	f006 fbc2 	bl	8015bb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f438:	441a      	add	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	429a      	cmp	r2, r3
 800f448:	d32b      	bcc.n	800f4a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	605a      	str	r2, [r3, #4]
 800f452:	e026      	b.n	800f4a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	68d8      	ldr	r0, [r3, #12]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f45c:	461a      	mov	r2, r3
 800f45e:	68b9      	ldr	r1, [r7, #8]
 800f460:	f006 fba8 	bl	8015bb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	68da      	ldr	r2, [r3, #12]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46c:	425b      	negs	r3, r3
 800f46e:	441a      	add	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	68da      	ldr	r2, [r3, #12]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d207      	bcs.n	800f490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	689a      	ldr	r2, [r3, #8]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f488:	425b      	negs	r3, r3
 800f48a:	441a      	add	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d105      	bne.n	800f4a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d002      	beq.n	800f4a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f4aa:	697b      	ldr	r3, [r7, #20]
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3718      	adds	r7, #24
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d018      	beq.n	800f4f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68da      	ldr	r2, [r3, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ce:	441a      	add	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	68da      	ldr	r2, [r3, #12]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d303      	bcc.n	800f4e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68d9      	ldr	r1, [r3, #12]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6838      	ldr	r0, [r7, #0]
 800f4f4:	f006 fb5e 	bl	8015bb4 <memcpy>
	}
}
 800f4f8:	bf00      	nop
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f508:	f001 fe10 	bl	801112c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f514:	e011      	b.n	800f53a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d012      	beq.n	800f544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	3324      	adds	r3, #36	; 0x24
 800f522:	4618      	mov	r0, r3
 800f524:	f000 fdb6 	bl	8010094 <xTaskRemoveFromEventList>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d001      	beq.n	800f532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f52e:	f000 fe93 	bl	8010258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	3b01      	subs	r3, #1
 800f536:	b2db      	uxtb	r3, r3
 800f538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	dce9      	bgt.n	800f516 <prvUnlockQueue+0x16>
 800f542:	e000      	b.n	800f546 <prvUnlockQueue+0x46>
					break;
 800f544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	22ff      	movs	r2, #255	; 0xff
 800f54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f54e:	f001 fe21 	bl	8011194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f552:	f001 fdeb 	bl	801112c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f55c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f55e:	e011      	b.n	800f584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d012      	beq.n	800f58e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3310      	adds	r3, #16
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 fd91 	bl	8010094 <xTaskRemoveFromEventList>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f578:	f000 fe6e 	bl	8010258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
 800f57e:	3b01      	subs	r3, #1
 800f580:	b2db      	uxtb	r3, r3
 800f582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	dce9      	bgt.n	800f560 <prvUnlockQueue+0x60>
 800f58c:	e000      	b.n	800f590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f58e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	22ff      	movs	r2, #255	; 0xff
 800f594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f598:	f001 fdfc 	bl	8011194 <vPortExitCritical>
}
 800f59c:	bf00      	nop
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5ac:	f001 fdbe 	bl	801112c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	e001      	b.n	800f5c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5c2:	f001 fde7 	bl	8011194 <vPortExitCritical>

	return xReturn;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5d8:	f001 fda8 	bl	801112c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d102      	bne.n	800f5ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	60fb      	str	r3, [r7, #12]
 800f5ec:	e001      	b.n	800f5f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5f2:	f001 fdcf 	bl	8011194 <vPortExitCritical>

	return xReturn;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f60a:	2300      	movs	r3, #0
 800f60c:	60fb      	str	r3, [r7, #12]
 800f60e:	e014      	b.n	800f63a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f610:	4a0f      	ldr	r2, [pc, #60]	; (800f650 <vQueueAddToRegistry+0x50>)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10b      	bne.n	800f634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f61c:	490c      	ldr	r1, [pc, #48]	; (800f650 <vQueueAddToRegistry+0x50>)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f626:	4a0a      	ldr	r2, [pc, #40]	; (800f650 <vQueueAddToRegistry+0x50>)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	4413      	add	r3, r2
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f632:	e006      	b.n	800f642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	3301      	adds	r3, #1
 800f638:	60fb      	str	r3, [r7, #12]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2b07      	cmp	r3, #7
 800f63e:	d9e7      	bls.n	800f610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f640:	bf00      	nop
 800f642:	bf00      	nop
 800f644:	3714      	adds	r7, #20
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	20031234 	.word	0x20031234

0800f654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f664:	f001 fd62 	bl	801112c <vPortEnterCritical>
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f66e:	b25b      	sxtb	r3, r3
 800f670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f674:	d103      	bne.n	800f67e <vQueueWaitForMessageRestricted+0x2a>
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2200      	movs	r2, #0
 800f67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f684:	b25b      	sxtb	r3, r3
 800f686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68a:	d103      	bne.n	800f694 <vQueueWaitForMessageRestricted+0x40>
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	2200      	movs	r2, #0
 800f690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f694:	f001 fd7e 	bl	8011194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d106      	bne.n	800f6ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	3324      	adds	r3, #36	; 0x24
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	68b9      	ldr	r1, [r7, #8]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 fcc5 	bl	8010038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f6ae:	6978      	ldr	r0, [r7, #20]
 800f6b0:	f7ff ff26 	bl	800f500 <prvUnlockQueue>
	}
 800f6b4:	bf00      	nop
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08e      	sub	sp, #56	; 0x38
 800f6c0:	af04      	add	r7, sp, #16
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10c      	bne.n	800f6ea <xTaskCreateStatic+0x2e>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d4:	b672      	cpsid	i
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	b662      	cpsie	i
 800f6e4:	623b      	str	r3, [r7, #32]
}
 800f6e6:	bf00      	nop
 800f6e8:	e7fe      	b.n	800f6e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d10c      	bne.n	800f70a <xTaskCreateStatic+0x4e>
	__asm volatile
 800f6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f4:	b672      	cpsid	i
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	b662      	cpsie	i
 800f704:	61fb      	str	r3, [r7, #28]
}
 800f706:	bf00      	nop
 800f708:	e7fe      	b.n	800f708 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f70a:	235c      	movs	r3, #92	; 0x5c
 800f70c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	2b5c      	cmp	r3, #92	; 0x5c
 800f712:	d00c      	beq.n	800f72e <xTaskCreateStatic+0x72>
	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f718:	b672      	cpsid	i
 800f71a:	f383 8811 	msr	BASEPRI, r3
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	b662      	cpsie	i
 800f728:	61bb      	str	r3, [r7, #24]
}
 800f72a:	bf00      	nop
 800f72c:	e7fe      	b.n	800f72c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f72e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f732:	2b00      	cmp	r3, #0
 800f734:	d01e      	beq.n	800f774 <xTaskCreateStatic+0xb8>
 800f736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d01b      	beq.n	800f774 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f744:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	2202      	movs	r2, #2
 800f74a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f74e:	2300      	movs	r3, #0
 800f750:	9303      	str	r3, [sp, #12]
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f754:	9302      	str	r3, [sp, #8]
 800f756:	f107 0314 	add.w	r3, r7, #20
 800f75a:	9301      	str	r3, [sp, #4]
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	68b9      	ldr	r1, [r7, #8]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f000 f850 	bl	800f80c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f76e:	f000 f8df 	bl	800f930 <prvAddNewTaskToReadyList>
 800f772:	e001      	b.n	800f778 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f774:	2300      	movs	r3, #0
 800f776:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f778:	697b      	ldr	r3, [r7, #20]
	}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3728      	adds	r7, #40	; 0x28
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f782:	b580      	push	{r7, lr}
 800f784:	b08c      	sub	sp, #48	; 0x30
 800f786:	af04      	add	r7, sp, #16
 800f788:	60f8      	str	r0, [r7, #12]
 800f78a:	60b9      	str	r1, [r7, #8]
 800f78c:	603b      	str	r3, [r7, #0]
 800f78e:	4613      	mov	r3, r2
 800f790:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f792:	88fb      	ldrh	r3, [r7, #6]
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4618      	mov	r0, r3
 800f798:	f001 fdf4 	bl	8011384 <pvPortMalloc>
 800f79c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00e      	beq.n	800f7c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7a4:	205c      	movs	r0, #92	; 0x5c
 800f7a6:	f001 fded 	bl	8011384 <pvPortMalloc>
 800f7aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d003      	beq.n	800f7ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	697a      	ldr	r2, [r7, #20]
 800f7b6:	631a      	str	r2, [r3, #48]	; 0x30
 800f7b8:	e005      	b.n	800f7c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f7ba:	6978      	ldr	r0, [r7, #20]
 800f7bc:	f001 feac 	bl	8011518 <vPortFree>
 800f7c0:	e001      	b.n	800f7c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d017      	beq.n	800f7fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7d4:	88fa      	ldrh	r2, [r7, #6]
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9303      	str	r3, [sp, #12]
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	9302      	str	r3, [sp, #8]
 800f7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e0:	9301      	str	r3, [sp, #4]
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f000 f80e 	bl	800f80c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7f0:	69f8      	ldr	r0, [r7, #28]
 800f7f2:	f000 f89d 	bl	800f930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	61bb      	str	r3, [r7, #24]
 800f7fa:	e002      	b.n	800f802 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f800:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f802:	69bb      	ldr	r3, [r7, #24]
	}
 800f804:	4618      	mov	r0, r3
 800f806:	3720      	adds	r7, #32
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b088      	sub	sp, #32
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
 800f818:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	461a      	mov	r2, r3
 800f824:	21a5      	movs	r1, #165	; 0xa5
 800f826:	f006 f9d3 	bl	8015bd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f834:	440b      	add	r3, r1
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	f023 0307 	bic.w	r3, r3, #7
 800f842:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	f003 0307 	and.w	r3, r3, #7
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00c      	beq.n	800f868 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	b672      	cpsid	i
 800f854:	f383 8811 	msr	BASEPRI, r3
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	b662      	cpsie	i
 800f862:	617b      	str	r3, [r7, #20]
}
 800f864:	bf00      	nop
 800f866:	e7fe      	b.n	800f866 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d01f      	beq.n	800f8ae <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f86e:	2300      	movs	r3, #0
 800f870:	61fb      	str	r3, [r7, #28]
 800f872:	e012      	b.n	800f89a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f874:	68ba      	ldr	r2, [r7, #8]
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	4413      	add	r3, r2
 800f87a:	7819      	ldrb	r1, [r3, #0]
 800f87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	4413      	add	r3, r2
 800f882:	3334      	adds	r3, #52	; 0x34
 800f884:	460a      	mov	r2, r1
 800f886:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f888:	68ba      	ldr	r2, [r7, #8]
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d006      	beq.n	800f8a2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	3301      	adds	r3, #1
 800f898:	61fb      	str	r3, [r7, #28]
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	2b0f      	cmp	r3, #15
 800f89e:	d9e9      	bls.n	800f874 <prvInitialiseNewTask+0x68>
 800f8a0:	e000      	b.n	800f8a4 <prvInitialiseNewTask+0x98>
			{
				break;
 800f8a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8ac:	e003      	b.n	800f8b6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	2b37      	cmp	r3, #55	; 0x37
 800f8ba:	d901      	bls.n	800f8c0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8bc:	2337      	movs	r3, #55	; 0x37
 800f8be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff f951 	bl	800eb7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8de:	3318      	adds	r3, #24
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff f94c 	bl	800eb7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fe:	2200      	movs	r2, #0
 800f900:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	68f9      	ldr	r1, [r7, #12]
 800f90e:	69b8      	ldr	r0, [r7, #24]
 800f910:	f001 fafe 	bl	8010f10 <pxPortInitialiseStack>
 800f914:	4602      	mov	r2, r0
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f926:	bf00      	nop
 800f928:	3720      	adds	r7, #32
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
	...

0800f930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f938:	f001 fbf8 	bl	801112c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f93c:	4b2d      	ldr	r3, [pc, #180]	; (800f9f4 <prvAddNewTaskToReadyList+0xc4>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3301      	adds	r3, #1
 800f942:	4a2c      	ldr	r2, [pc, #176]	; (800f9f4 <prvAddNewTaskToReadyList+0xc4>)
 800f944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f946:	4b2c      	ldr	r3, [pc, #176]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d109      	bne.n	800f962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f94e:	4a2a      	ldr	r2, [pc, #168]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f954:	4b27      	ldr	r3, [pc, #156]	; (800f9f4 <prvAddNewTaskToReadyList+0xc4>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d110      	bne.n	800f97e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f95c:	f000 fca0 	bl	80102a0 <prvInitialiseTaskLists>
 800f960:	e00d      	b.n	800f97e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f962:	4b26      	ldr	r3, [pc, #152]	; (800f9fc <prvAddNewTaskToReadyList+0xcc>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d109      	bne.n	800f97e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f96a:	4b23      	ldr	r3, [pc, #140]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	429a      	cmp	r2, r3
 800f976:	d802      	bhi.n	800f97e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f978:	4a1f      	ldr	r2, [pc, #124]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f97e:	4b20      	ldr	r3, [pc, #128]	; (800fa00 <prvAddNewTaskToReadyList+0xd0>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	4a1e      	ldr	r2, [pc, #120]	; (800fa00 <prvAddNewTaskToReadyList+0xd0>)
 800f986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f988:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <prvAddNewTaskToReadyList+0xd0>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f994:	4b1b      	ldr	r3, [pc, #108]	; (800fa04 <prvAddNewTaskToReadyList+0xd4>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d903      	bls.n	800f9a4 <prvAddNewTaskToReadyList+0x74>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a0:	4a18      	ldr	r2, [pc, #96]	; (800fa04 <prvAddNewTaskToReadyList+0xd4>)
 800f9a2:	6013      	str	r3, [r2, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4a15      	ldr	r2, [pc, #84]	; (800fa08 <prvAddNewTaskToReadyList+0xd8>)
 800f9b2:	441a      	add	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	f7ff f8ec 	bl	800eb98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9c0:	f001 fbe8 	bl	8011194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9c4:	4b0d      	ldr	r3, [pc, #52]	; (800f9fc <prvAddNewTaskToReadyList+0xcc>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00e      	beq.n	800f9ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9cc:	4b0a      	ldr	r3, [pc, #40]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d207      	bcs.n	800f9ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9da:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <prvAddNewTaskToReadyList+0xdc>)
 800f9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9ea:	bf00      	nop
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	20003fec 	.word	0x20003fec
 800f9f8:	20003b18 	.word	0x20003b18
 800f9fc:	20003ff8 	.word	0x20003ff8
 800fa00:	20004008 	.word	0x20004008
 800fa04:	20003ff4 	.word	0x20003ff4
 800fa08:	20003b1c 	.word	0x20003b1c
 800fa0c:	e000ed04 	.word	0xe000ed04

0800fa10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fa18:	f001 fb88 	bl	801112c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d102      	bne.n	800fa28 <vTaskDelete+0x18>
 800fa22:	4b2d      	ldr	r3, [pc, #180]	; (800fad8 <vTaskDelete+0xc8>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	e000      	b.n	800fa2a <vTaskDelete+0x1a>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff f90e 	bl	800ec52 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d004      	beq.n	800fa48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3318      	adds	r3, #24
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7ff f905 	bl	800ec52 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fa48:	4b24      	ldr	r3, [pc, #144]	; (800fadc <vTaskDelete+0xcc>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	4a23      	ldr	r2, [pc, #140]	; (800fadc <vTaskDelete+0xcc>)
 800fa50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fa52:	4b21      	ldr	r3, [pc, #132]	; (800fad8 <vTaskDelete+0xc8>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d10b      	bne.n	800fa74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	3304      	adds	r3, #4
 800fa60:	4619      	mov	r1, r3
 800fa62:	481f      	ldr	r0, [pc, #124]	; (800fae0 <vTaskDelete+0xd0>)
 800fa64:	f7ff f898 	bl	800eb98 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fa68:	4b1e      	ldr	r3, [pc, #120]	; (800fae4 <vTaskDelete+0xd4>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	4a1d      	ldr	r2, [pc, #116]	; (800fae4 <vTaskDelete+0xd4>)
 800fa70:	6013      	str	r3, [r2, #0]
 800fa72:	e009      	b.n	800fa88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800fa74:	4b1c      	ldr	r3, [pc, #112]	; (800fae8 <vTaskDelete+0xd8>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	4a1b      	ldr	r2, [pc, #108]	; (800fae8 <vTaskDelete+0xd8>)
 800fa7c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f000 fc7c 	bl	801037c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800fa84:	f000 fcac 	bl	80103e0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800fa88:	f001 fb84 	bl	8011194 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800fa8c:	4b17      	ldr	r3, [pc, #92]	; (800faec <vTaskDelete+0xdc>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d01d      	beq.n	800fad0 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800fa94:	4b10      	ldr	r3, [pc, #64]	; (800fad8 <vTaskDelete+0xc8>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d118      	bne.n	800fad0 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800fa9e:	4b14      	ldr	r3, [pc, #80]	; (800faf0 <vTaskDelete+0xe0>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00c      	beq.n	800fac0 <vTaskDelete+0xb0>
	__asm volatile
 800faa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faaa:	b672      	cpsid	i
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	b662      	cpsie	i
 800faba:	60bb      	str	r3, [r7, #8]
}
 800fabc:	bf00      	nop
 800fabe:	e7fe      	b.n	800fabe <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800fac0:	4b0c      	ldr	r3, [pc, #48]	; (800faf4 <vTaskDelete+0xe4>)
 800fac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fad0:	bf00      	nop
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	20003b18 	.word	0x20003b18
 800fadc:	20004008 	.word	0x20004008
 800fae0:	20003fc0 	.word	0x20003fc0
 800fae4:	20003fd4 	.word	0x20003fd4
 800fae8:	20003fec 	.word	0x20003fec
 800faec:	20003ff8 	.word	0x20003ff8
 800faf0:	20004014 	.word	0x20004014
 800faf4:	e000ed04 	.word	0xe000ed04

0800faf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fb00:	2300      	movs	r3, #0
 800fb02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d019      	beq.n	800fb3e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fb0a:	4b14      	ldr	r3, [pc, #80]	; (800fb5c <vTaskDelay+0x64>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00c      	beq.n	800fb2c <vTaskDelay+0x34>
	__asm volatile
 800fb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb16:	b672      	cpsid	i
 800fb18:	f383 8811 	msr	BASEPRI, r3
 800fb1c:	f3bf 8f6f 	isb	sy
 800fb20:	f3bf 8f4f 	dsb	sy
 800fb24:	b662      	cpsie	i
 800fb26:	60bb      	str	r3, [r7, #8]
}
 800fb28:	bf00      	nop
 800fb2a:	e7fe      	b.n	800fb2a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800fb2c:	f000 f884 	bl	800fc38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fb30:	2100      	movs	r1, #0
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 fe1c 	bl	8010770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fb38:	f000 f88c 	bl	800fc54 <xTaskResumeAll>
 800fb3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d107      	bne.n	800fb54 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fb44:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <vTaskDelay+0x68>)
 800fb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb4a:	601a      	str	r2, [r3, #0]
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb54:	bf00      	nop
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20004014 	.word	0x20004014
 800fb60:	e000ed04 	.word	0xe000ed04

0800fb64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b08a      	sub	sp, #40	; 0x28
 800fb68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fb72:	463a      	mov	r2, r7
 800fb74:	1d39      	adds	r1, r7, #4
 800fb76:	f107 0308 	add.w	r3, r7, #8
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fe fed2 	bl	800e924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fb80:	6839      	ldr	r1, [r7, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68ba      	ldr	r2, [r7, #8]
 800fb86:	9202      	str	r2, [sp, #8]
 800fb88:	9301      	str	r3, [sp, #4]
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	460a      	mov	r2, r1
 800fb92:	4923      	ldr	r1, [pc, #140]	; (800fc20 <vTaskStartScheduler+0xbc>)
 800fb94:	4823      	ldr	r0, [pc, #140]	; (800fc24 <vTaskStartScheduler+0xc0>)
 800fb96:	f7ff fd91 	bl	800f6bc <xTaskCreateStatic>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4a22      	ldr	r2, [pc, #136]	; (800fc28 <vTaskStartScheduler+0xc4>)
 800fb9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fba0:	4b21      	ldr	r3, [pc, #132]	; (800fc28 <vTaskStartScheduler+0xc4>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d002      	beq.n	800fbae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	617b      	str	r3, [r7, #20]
 800fbac:	e001      	b.n	800fbb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d102      	bne.n	800fbbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fbb8:	f000 fe2e 	bl	8010818 <xTimerCreateTimerTask>
 800fbbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d118      	bne.n	800fbf6 <vTaskStartScheduler+0x92>
	__asm volatile
 800fbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc8:	b672      	cpsid	i
 800fbca:	f383 8811 	msr	BASEPRI, r3
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	b662      	cpsie	i
 800fbd8:	613b      	str	r3, [r7, #16]
}
 800fbda:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fbdc:	4b13      	ldr	r3, [pc, #76]	; (800fc2c <vTaskStartScheduler+0xc8>)
 800fbde:	f04f 32ff 	mov.w	r2, #4294967295
 800fbe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fbe4:	4b12      	ldr	r3, [pc, #72]	; (800fc30 <vTaskStartScheduler+0xcc>)
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fbea:	4b12      	ldr	r3, [pc, #72]	; (800fc34 <vTaskStartScheduler+0xd0>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fbf0:	f001 fa1e 	bl	8011030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fbf4:	e010      	b.n	800fc18 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbfc:	d10c      	bne.n	800fc18 <vTaskStartScheduler+0xb4>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc02:	b672      	cpsid	i
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	b662      	cpsie	i
 800fc12:	60fb      	str	r3, [r7, #12]
}
 800fc14:	bf00      	nop
 800fc16:	e7fe      	b.n	800fc16 <vTaskStartScheduler+0xb2>
}
 800fc18:	bf00      	nop
 800fc1a:	3718      	adds	r7, #24
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	0801aa08 	.word	0x0801aa08
 800fc24:	08010271 	.word	0x08010271
 800fc28:	20004010 	.word	0x20004010
 800fc2c:	2000400c 	.word	0x2000400c
 800fc30:	20003ff8 	.word	0x20003ff8
 800fc34:	20003ff0 	.word	0x20003ff0

0800fc38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fc38:	b480      	push	{r7}
 800fc3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fc3c:	4b04      	ldr	r3, [pc, #16]	; (800fc50 <vTaskSuspendAll+0x18>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	3301      	adds	r3, #1
 800fc42:	4a03      	ldr	r2, [pc, #12]	; (800fc50 <vTaskSuspendAll+0x18>)
 800fc44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fc46:	bf00      	nop
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr
 800fc50:	20004014 	.word	0x20004014

0800fc54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fc62:	4b43      	ldr	r3, [pc, #268]	; (800fd70 <xTaskResumeAll+0x11c>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d10c      	bne.n	800fc84 <xTaskResumeAll+0x30>
	__asm volatile
 800fc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6e:	b672      	cpsid	i
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	b662      	cpsie	i
 800fc7e:	603b      	str	r3, [r7, #0]
}
 800fc80:	bf00      	nop
 800fc82:	e7fe      	b.n	800fc82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fc84:	f001 fa52 	bl	801112c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fc88:	4b39      	ldr	r3, [pc, #228]	; (800fd70 <xTaskResumeAll+0x11c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	4a38      	ldr	r2, [pc, #224]	; (800fd70 <xTaskResumeAll+0x11c>)
 800fc90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc92:	4b37      	ldr	r3, [pc, #220]	; (800fd70 <xTaskResumeAll+0x11c>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d162      	bne.n	800fd60 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc9a:	4b36      	ldr	r3, [pc, #216]	; (800fd74 <xTaskResumeAll+0x120>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d05e      	beq.n	800fd60 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fca2:	e02f      	b.n	800fd04 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fca4:	4b34      	ldr	r3, [pc, #208]	; (800fd78 <xTaskResumeAll+0x124>)
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3318      	adds	r3, #24
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe ffce 	bl	800ec52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	3304      	adds	r3, #4
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fe ffc9 	bl	800ec52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc4:	4b2d      	ldr	r3, [pc, #180]	; (800fd7c <xTaskResumeAll+0x128>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d903      	bls.n	800fcd4 <xTaskResumeAll+0x80>
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd0:	4a2a      	ldr	r2, [pc, #168]	; (800fd7c <xTaskResumeAll+0x128>)
 800fcd2:	6013      	str	r3, [r2, #0]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcd8:	4613      	mov	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	4413      	add	r3, r2
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	4a27      	ldr	r2, [pc, #156]	; (800fd80 <xTaskResumeAll+0x12c>)
 800fce2:	441a      	add	r2, r3
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	3304      	adds	r3, #4
 800fce8:	4619      	mov	r1, r3
 800fcea:	4610      	mov	r0, r2
 800fcec:	f7fe ff54 	bl	800eb98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf4:	4b23      	ldr	r3, [pc, #140]	; (800fd84 <xTaskResumeAll+0x130>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d302      	bcc.n	800fd04 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800fcfe:	4b22      	ldr	r3, [pc, #136]	; (800fd88 <xTaskResumeAll+0x134>)
 800fd00:	2201      	movs	r2, #1
 800fd02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd04:	4b1c      	ldr	r3, [pc, #112]	; (800fd78 <xTaskResumeAll+0x124>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1cb      	bne.n	800fca4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fd12:	f000 fb65 	bl	80103e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fd16:	4b1d      	ldr	r3, [pc, #116]	; (800fd8c <xTaskResumeAll+0x138>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d010      	beq.n	800fd44 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fd22:	f000 f847 	bl	800fdb4 <xTaskIncrementTick>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d002      	beq.n	800fd32 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800fd2c:	4b16      	ldr	r3, [pc, #88]	; (800fd88 <xTaskResumeAll+0x134>)
 800fd2e:	2201      	movs	r2, #1
 800fd30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3b01      	subs	r3, #1
 800fd36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1f1      	bne.n	800fd22 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fd3e:	4b13      	ldr	r3, [pc, #76]	; (800fd8c <xTaskResumeAll+0x138>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fd44:	4b10      	ldr	r3, [pc, #64]	; (800fd88 <xTaskResumeAll+0x134>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d009      	beq.n	800fd60 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fd50:	4b0f      	ldr	r3, [pc, #60]	; (800fd90 <xTaskResumeAll+0x13c>)
 800fd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd60:	f001 fa18 	bl	8011194 <vPortExitCritical>

	return xAlreadyYielded;
 800fd64:	68bb      	ldr	r3, [r7, #8]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	20004014 	.word	0x20004014
 800fd74:	20003fec 	.word	0x20003fec
 800fd78:	20003fac 	.word	0x20003fac
 800fd7c:	20003ff4 	.word	0x20003ff4
 800fd80:	20003b1c 	.word	0x20003b1c
 800fd84:	20003b18 	.word	0x20003b18
 800fd88:	20004000 	.word	0x20004000
 800fd8c:	20003ffc 	.word	0x20003ffc
 800fd90:	e000ed04 	.word	0xe000ed04

0800fd94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd9a:	4b05      	ldr	r3, [pc, #20]	; (800fdb0 <xTaskGetTickCount+0x1c>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fda0:	687b      	ldr	r3, [r7, #4]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	370c      	adds	r7, #12
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	20003ff0 	.word	0x20003ff0

0800fdb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdbe:	4b50      	ldr	r3, [pc, #320]	; (800ff00 <xTaskIncrementTick+0x14c>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f040 808b 	bne.w	800fede <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fdc8:	4b4e      	ldr	r3, [pc, #312]	; (800ff04 <xTaskIncrementTick+0x150>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fdd0:	4a4c      	ldr	r2, [pc, #304]	; (800ff04 <xTaskIncrementTick+0x150>)
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d122      	bne.n	800fe22 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fddc:	4b4a      	ldr	r3, [pc, #296]	; (800ff08 <xTaskIncrementTick+0x154>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d00c      	beq.n	800fe00 <xTaskIncrementTick+0x4c>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdea:	b672      	cpsid	i
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	b662      	cpsie	i
 800fdfa:	603b      	str	r3, [r7, #0]
}
 800fdfc:	bf00      	nop
 800fdfe:	e7fe      	b.n	800fdfe <xTaskIncrementTick+0x4a>
 800fe00:	4b41      	ldr	r3, [pc, #260]	; (800ff08 <xTaskIncrementTick+0x154>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	60fb      	str	r3, [r7, #12]
 800fe06:	4b41      	ldr	r3, [pc, #260]	; (800ff0c <xTaskIncrementTick+0x158>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a3f      	ldr	r2, [pc, #252]	; (800ff08 <xTaskIncrementTick+0x154>)
 800fe0c:	6013      	str	r3, [r2, #0]
 800fe0e:	4a3f      	ldr	r2, [pc, #252]	; (800ff0c <xTaskIncrementTick+0x158>)
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	4b3e      	ldr	r3, [pc, #248]	; (800ff10 <xTaskIncrementTick+0x15c>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	4a3d      	ldr	r2, [pc, #244]	; (800ff10 <xTaskIncrementTick+0x15c>)
 800fe1c:	6013      	str	r3, [r2, #0]
 800fe1e:	f000 fadf 	bl	80103e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe22:	4b3c      	ldr	r3, [pc, #240]	; (800ff14 <xTaskIncrementTick+0x160>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	693a      	ldr	r2, [r7, #16]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d349      	bcc.n	800fec0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe2c:	4b36      	ldr	r3, [pc, #216]	; (800ff08 <xTaskIncrementTick+0x154>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d104      	bne.n	800fe40 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe36:	4b37      	ldr	r3, [pc, #220]	; (800ff14 <xTaskIncrementTick+0x160>)
 800fe38:	f04f 32ff 	mov.w	r2, #4294967295
 800fe3c:	601a      	str	r2, [r3, #0]
					break;
 800fe3e:	e03f      	b.n	800fec0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe40:	4b31      	ldr	r3, [pc, #196]	; (800ff08 <xTaskIncrementTick+0x154>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fe50:	693a      	ldr	r2, [r7, #16]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d203      	bcs.n	800fe60 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fe58:	4a2e      	ldr	r2, [pc, #184]	; (800ff14 <xTaskIncrementTick+0x160>)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fe5e:	e02f      	b.n	800fec0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	3304      	adds	r3, #4
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fe fef4 	bl	800ec52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d004      	beq.n	800fe7c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	3318      	adds	r3, #24
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fe feeb 	bl	800ec52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe80:	4b25      	ldr	r3, [pc, #148]	; (800ff18 <xTaskIncrementTick+0x164>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d903      	bls.n	800fe90 <xTaskIncrementTick+0xdc>
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8c:	4a22      	ldr	r2, [pc, #136]	; (800ff18 <xTaskIncrementTick+0x164>)
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe94:	4613      	mov	r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4413      	add	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4a1f      	ldr	r2, [pc, #124]	; (800ff1c <xTaskIncrementTick+0x168>)
 800fe9e:	441a      	add	r2, r3
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	3304      	adds	r3, #4
 800fea4:	4619      	mov	r1, r3
 800fea6:	4610      	mov	r0, r2
 800fea8:	f7fe fe76 	bl	800eb98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb0:	4b1b      	ldr	r3, [pc, #108]	; (800ff20 <xTaskIncrementTick+0x16c>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d3b8      	bcc.n	800fe2c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800feba:	2301      	movs	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800febe:	e7b5      	b.n	800fe2c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fec0:	4b17      	ldr	r3, [pc, #92]	; (800ff20 <xTaskIncrementTick+0x16c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec6:	4915      	ldr	r1, [pc, #84]	; (800ff1c <xTaskIncrementTick+0x168>)
 800fec8:	4613      	mov	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	4413      	add	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	440b      	add	r3, r1
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d907      	bls.n	800fee8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fed8:	2301      	movs	r3, #1
 800feda:	617b      	str	r3, [r7, #20]
 800fedc:	e004      	b.n	800fee8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fede:	4b11      	ldr	r3, [pc, #68]	; (800ff24 <xTaskIncrementTick+0x170>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3301      	adds	r3, #1
 800fee4:	4a0f      	ldr	r2, [pc, #60]	; (800ff24 <xTaskIncrementTick+0x170>)
 800fee6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fee8:	4b0f      	ldr	r3, [pc, #60]	; (800ff28 <xTaskIncrementTick+0x174>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d001      	beq.n	800fef4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800fef0:	2301      	movs	r3, #1
 800fef2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fef4:	697b      	ldr	r3, [r7, #20]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3718      	adds	r7, #24
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20004014 	.word	0x20004014
 800ff04:	20003ff0 	.word	0x20003ff0
 800ff08:	20003fa4 	.word	0x20003fa4
 800ff0c:	20003fa8 	.word	0x20003fa8
 800ff10:	20004004 	.word	0x20004004
 800ff14:	2000400c 	.word	0x2000400c
 800ff18:	20003ff4 	.word	0x20003ff4
 800ff1c:	20003b1c 	.word	0x20003b1c
 800ff20:	20003b18 	.word	0x20003b18
 800ff24:	20003ffc 	.word	0x20003ffc
 800ff28:	20004000 	.word	0x20004000

0800ff2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b085      	sub	sp, #20
 800ff30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ff32:	4b29      	ldr	r3, [pc, #164]	; (800ffd8 <vTaskSwitchContext+0xac>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d003      	beq.n	800ff42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ff3a:	4b28      	ldr	r3, [pc, #160]	; (800ffdc <vTaskSwitchContext+0xb0>)
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ff40:	e043      	b.n	800ffca <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800ff42:	4b26      	ldr	r3, [pc, #152]	; (800ffdc <vTaskSwitchContext+0xb0>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff48:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <vTaskSwitchContext+0xb4>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	60fb      	str	r3, [r7, #12]
 800ff4e:	e012      	b.n	800ff76 <vTaskSwitchContext+0x4a>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10c      	bne.n	800ff70 <vTaskSwitchContext+0x44>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5a:	b672      	cpsid	i
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	b662      	cpsie	i
 800ff6a:	607b      	str	r3, [r7, #4]
}
 800ff6c:	bf00      	nop
 800ff6e:	e7fe      	b.n	800ff6e <vTaskSwitchContext+0x42>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	3b01      	subs	r3, #1
 800ff74:	60fb      	str	r3, [r7, #12]
 800ff76:	491b      	ldr	r1, [pc, #108]	; (800ffe4 <vTaskSwitchContext+0xb8>)
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	4413      	add	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	440b      	add	r3, r1
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d0e2      	beq.n	800ff50 <vTaskSwitchContext+0x24>
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	4413      	add	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4a13      	ldr	r2, [pc, #76]	; (800ffe4 <vTaskSwitchContext+0xb8>)
 800ff96:	4413      	add	r3, r2
 800ff98:	60bb      	str	r3, [r7, #8]
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	605a      	str	r2, [r3, #4]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3308      	adds	r3, #8
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d104      	bne.n	800ffba <vTaskSwitchContext+0x8e>
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	685a      	ldr	r2, [r3, #4]
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	605a      	str	r2, [r3, #4]
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	4a09      	ldr	r2, [pc, #36]	; (800ffe8 <vTaskSwitchContext+0xbc>)
 800ffc2:	6013      	str	r3, [r2, #0]
 800ffc4:	4a06      	ldr	r2, [pc, #24]	; (800ffe0 <vTaskSwitchContext+0xb4>)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6013      	str	r3, [r2, #0]
}
 800ffca:	bf00      	nop
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	20004014 	.word	0x20004014
 800ffdc:	20004000 	.word	0x20004000
 800ffe0:	20003ff4 	.word	0x20003ff4
 800ffe4:	20003b1c 	.word	0x20003b1c
 800ffe8:	20003b18 	.word	0x20003b18

0800ffec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10c      	bne.n	8010016 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010000:	b672      	cpsid	i
 8010002:	f383 8811 	msr	BASEPRI, r3
 8010006:	f3bf 8f6f 	isb	sy
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	b662      	cpsie	i
 8010010:	60fb      	str	r3, [r7, #12]
}
 8010012:	bf00      	nop
 8010014:	e7fe      	b.n	8010014 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010016:	4b07      	ldr	r3, [pc, #28]	; (8010034 <vTaskPlaceOnEventList+0x48>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3318      	adds	r3, #24
 801001c:	4619      	mov	r1, r3
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7fe fdde 	bl	800ebe0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010024:	2101      	movs	r1, #1
 8010026:	6838      	ldr	r0, [r7, #0]
 8010028:	f000 fba2 	bl	8010770 <prvAddCurrentTaskToDelayedList>
}
 801002c:	bf00      	nop
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	20003b18 	.word	0x20003b18

08010038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10c      	bne.n	8010064 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 801004a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004e:	b672      	cpsid	i
 8010050:	f383 8811 	msr	BASEPRI, r3
 8010054:	f3bf 8f6f 	isb	sy
 8010058:	f3bf 8f4f 	dsb	sy
 801005c:	b662      	cpsie	i
 801005e:	617b      	str	r3, [r7, #20]
}
 8010060:	bf00      	nop
 8010062:	e7fe      	b.n	8010062 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010064:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <vTaskPlaceOnEventListRestricted+0x58>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	3318      	adds	r3, #24
 801006a:	4619      	mov	r1, r3
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f7fe fd93 	bl	800eb98 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8010078:	f04f 33ff 	mov.w	r3, #4294967295
 801007c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801007e:	6879      	ldr	r1, [r7, #4]
 8010080:	68b8      	ldr	r0, [r7, #8]
 8010082:	f000 fb75 	bl	8010770 <prvAddCurrentTaskToDelayedList>
	}
 8010086:	bf00      	nop
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	20003b18 	.word	0x20003b18

08010094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10c      	bne.n	80100c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ae:	b672      	cpsid	i
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	b662      	cpsie	i
 80100be:	60fb      	str	r3, [r7, #12]
}
 80100c0:	bf00      	nop
 80100c2:	e7fe      	b.n	80100c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	3318      	adds	r3, #24
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe fdc2 	bl	800ec52 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100ce:	4b1e      	ldr	r3, [pc, #120]	; (8010148 <xTaskRemoveFromEventList+0xb4>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d11d      	bne.n	8010112 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	3304      	adds	r3, #4
 80100da:	4618      	mov	r0, r3
 80100dc:	f7fe fdb9 	bl	800ec52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e4:	4b19      	ldr	r3, [pc, #100]	; (801014c <xTaskRemoveFromEventList+0xb8>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d903      	bls.n	80100f4 <xTaskRemoveFromEventList+0x60>
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f0:	4a16      	ldr	r2, [pc, #88]	; (801014c <xTaskRemoveFromEventList+0xb8>)
 80100f2:	6013      	str	r3, [r2, #0]
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100f8:	4613      	mov	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4413      	add	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4a13      	ldr	r2, [pc, #76]	; (8010150 <xTaskRemoveFromEventList+0xbc>)
 8010102:	441a      	add	r2, r3
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	3304      	adds	r3, #4
 8010108:	4619      	mov	r1, r3
 801010a:	4610      	mov	r0, r2
 801010c:	f7fe fd44 	bl	800eb98 <vListInsertEnd>
 8010110:	e005      	b.n	801011e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	3318      	adds	r3, #24
 8010116:	4619      	mov	r1, r3
 8010118:	480e      	ldr	r0, [pc, #56]	; (8010154 <xTaskRemoveFromEventList+0xc0>)
 801011a:	f7fe fd3d 	bl	800eb98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010122:	4b0d      	ldr	r3, [pc, #52]	; (8010158 <xTaskRemoveFromEventList+0xc4>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010128:	429a      	cmp	r2, r3
 801012a:	d905      	bls.n	8010138 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801012c:	2301      	movs	r3, #1
 801012e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010130:	4b0a      	ldr	r3, [pc, #40]	; (801015c <xTaskRemoveFromEventList+0xc8>)
 8010132:	2201      	movs	r2, #1
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	e001      	b.n	801013c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010138:	2300      	movs	r3, #0
 801013a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801013c:	697b      	ldr	r3, [r7, #20]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	20004014 	.word	0x20004014
 801014c:	20003ff4 	.word	0x20003ff4
 8010150:	20003b1c 	.word	0x20003b1c
 8010154:	20003fac 	.word	0x20003fac
 8010158:	20003b18 	.word	0x20003b18
 801015c:	20004000 	.word	0x20004000

08010160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010168:	4b06      	ldr	r3, [pc, #24]	; (8010184 <vTaskInternalSetTimeOutState+0x24>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010170:	4b05      	ldr	r3, [pc, #20]	; (8010188 <vTaskInternalSetTimeOutState+0x28>)
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	605a      	str	r2, [r3, #4]
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	20004004 	.word	0x20004004
 8010188:	20003ff0 	.word	0x20003ff0

0801018c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10c      	bne.n	80101b6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a0:	b672      	cpsid	i
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	b662      	cpsie	i
 80101b0:	613b      	str	r3, [r7, #16]
}
 80101b2:	bf00      	nop
 80101b4:	e7fe      	b.n	80101b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d10c      	bne.n	80101d6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80101bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c0:	b672      	cpsid	i
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	b662      	cpsie	i
 80101d0:	60fb      	str	r3, [r7, #12]
}
 80101d2:	bf00      	nop
 80101d4:	e7fe      	b.n	80101d4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80101d6:	f000 ffa9 	bl	801112c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80101da:	4b1d      	ldr	r3, [pc, #116]	; (8010250 <xTaskCheckForTimeOut+0xc4>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	69ba      	ldr	r2, [r7, #24]
 80101e6:	1ad3      	subs	r3, r2, r3
 80101e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f2:	d102      	bne.n	80101fa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80101f4:	2300      	movs	r3, #0
 80101f6:	61fb      	str	r3, [r7, #28]
 80101f8:	e023      	b.n	8010242 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	4b15      	ldr	r3, [pc, #84]	; (8010254 <xTaskCheckForTimeOut+0xc8>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	429a      	cmp	r2, r3
 8010204:	d007      	beq.n	8010216 <xTaskCheckForTimeOut+0x8a>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	69ba      	ldr	r2, [r7, #24]
 801020c:	429a      	cmp	r2, r3
 801020e:	d302      	bcc.n	8010216 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010210:	2301      	movs	r3, #1
 8010212:	61fb      	str	r3, [r7, #28]
 8010214:	e015      	b.n	8010242 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	697a      	ldr	r2, [r7, #20]
 801021c:	429a      	cmp	r2, r3
 801021e:	d20b      	bcs.n	8010238 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	1ad2      	subs	r2, r2, r3
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7ff ff97 	bl	8010160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010232:	2300      	movs	r3, #0
 8010234:	61fb      	str	r3, [r7, #28]
 8010236:	e004      	b.n	8010242 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	2200      	movs	r2, #0
 801023c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801023e:	2301      	movs	r3, #1
 8010240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010242:	f000 ffa7 	bl	8011194 <vPortExitCritical>

	return xReturn;
 8010246:	69fb      	ldr	r3, [r7, #28]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3720      	adds	r7, #32
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20003ff0 	.word	0x20003ff0
 8010254:	20004004 	.word	0x20004004

08010258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010258:	b480      	push	{r7}
 801025a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801025c:	4b03      	ldr	r3, [pc, #12]	; (801026c <vTaskMissedYield+0x14>)
 801025e:	2201      	movs	r2, #1
 8010260:	601a      	str	r2, [r3, #0]
}
 8010262:	bf00      	nop
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	20004000 	.word	0x20004000

08010270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010278:	f000 f852 	bl	8010320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801027c:	4b06      	ldr	r3, [pc, #24]	; (8010298 <prvIdleTask+0x28>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d9f9      	bls.n	8010278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010284:	4b05      	ldr	r3, [pc, #20]	; (801029c <prvIdleTask+0x2c>)
 8010286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010294:	e7f0      	b.n	8010278 <prvIdleTask+0x8>
 8010296:	bf00      	nop
 8010298:	20003b1c 	.word	0x20003b1c
 801029c:	e000ed04 	.word	0xe000ed04

080102a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102a6:	2300      	movs	r3, #0
 80102a8:	607b      	str	r3, [r7, #4]
 80102aa:	e00c      	b.n	80102c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	4613      	mov	r3, r2
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	4413      	add	r3, r2
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	4a12      	ldr	r2, [pc, #72]	; (8010300 <prvInitialiseTaskLists+0x60>)
 80102b8:	4413      	add	r3, r2
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fe fc3f 	bl	800eb3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	3301      	adds	r3, #1
 80102c4:	607b      	str	r3, [r7, #4]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b37      	cmp	r3, #55	; 0x37
 80102ca:	d9ef      	bls.n	80102ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80102cc:	480d      	ldr	r0, [pc, #52]	; (8010304 <prvInitialiseTaskLists+0x64>)
 80102ce:	f7fe fc36 	bl	800eb3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80102d2:	480d      	ldr	r0, [pc, #52]	; (8010308 <prvInitialiseTaskLists+0x68>)
 80102d4:	f7fe fc33 	bl	800eb3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80102d8:	480c      	ldr	r0, [pc, #48]	; (801030c <prvInitialiseTaskLists+0x6c>)
 80102da:	f7fe fc30 	bl	800eb3e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80102de:	480c      	ldr	r0, [pc, #48]	; (8010310 <prvInitialiseTaskLists+0x70>)
 80102e0:	f7fe fc2d 	bl	800eb3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80102e4:	480b      	ldr	r0, [pc, #44]	; (8010314 <prvInitialiseTaskLists+0x74>)
 80102e6:	f7fe fc2a 	bl	800eb3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80102ea:	4b0b      	ldr	r3, [pc, #44]	; (8010318 <prvInitialiseTaskLists+0x78>)
 80102ec:	4a05      	ldr	r2, [pc, #20]	; (8010304 <prvInitialiseTaskLists+0x64>)
 80102ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80102f0:	4b0a      	ldr	r3, [pc, #40]	; (801031c <prvInitialiseTaskLists+0x7c>)
 80102f2:	4a05      	ldr	r2, [pc, #20]	; (8010308 <prvInitialiseTaskLists+0x68>)
 80102f4:	601a      	str	r2, [r3, #0]
}
 80102f6:	bf00      	nop
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	20003b1c 	.word	0x20003b1c
 8010304:	20003f7c 	.word	0x20003f7c
 8010308:	20003f90 	.word	0x20003f90
 801030c:	20003fac 	.word	0x20003fac
 8010310:	20003fc0 	.word	0x20003fc0
 8010314:	20003fd8 	.word	0x20003fd8
 8010318:	20003fa4 	.word	0x20003fa4
 801031c:	20003fa8 	.word	0x20003fa8

08010320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010326:	e019      	b.n	801035c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010328:	f000 ff00 	bl	801112c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801032c:	4b10      	ldr	r3, [pc, #64]	; (8010370 <prvCheckTasksWaitingTermination+0x50>)
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	3304      	adds	r3, #4
 8010338:	4618      	mov	r0, r3
 801033a:	f7fe fc8a 	bl	800ec52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801033e:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <prvCheckTasksWaitingTermination+0x54>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3b01      	subs	r3, #1
 8010344:	4a0b      	ldr	r2, [pc, #44]	; (8010374 <prvCheckTasksWaitingTermination+0x54>)
 8010346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010348:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <prvCheckTasksWaitingTermination+0x58>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3b01      	subs	r3, #1
 801034e:	4a0a      	ldr	r2, [pc, #40]	; (8010378 <prvCheckTasksWaitingTermination+0x58>)
 8010350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010352:	f000 ff1f 	bl	8011194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f810 	bl	801037c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801035c:	4b06      	ldr	r3, [pc, #24]	; (8010378 <prvCheckTasksWaitingTermination+0x58>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d1e1      	bne.n	8010328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010364:	bf00      	nop
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	20003fc0 	.word	0x20003fc0
 8010374:	20003fec 	.word	0x20003fec
 8010378:	20003fd4 	.word	0x20003fd4

0801037c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801038a:	2b00      	cmp	r3, #0
 801038c:	d108      	bne.n	80103a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010392:	4618      	mov	r0, r3
 8010394:	f001 f8c0 	bl	8011518 <vPortFree>
				vPortFree( pxTCB );
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f001 f8bd 	bl	8011518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801039e:	e01a      	b.n	80103d6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d103      	bne.n	80103b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f001 f8b4 	bl	8011518 <vPortFree>
	}
 80103b0:	e011      	b.n	80103d6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d00c      	beq.n	80103d6 <prvDeleteTCB+0x5a>
	__asm volatile
 80103bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c0:	b672      	cpsid	i
 80103c2:	f383 8811 	msr	BASEPRI, r3
 80103c6:	f3bf 8f6f 	isb	sy
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	b662      	cpsie	i
 80103d0:	60fb      	str	r3, [r7, #12]
}
 80103d2:	bf00      	nop
 80103d4:	e7fe      	b.n	80103d4 <prvDeleteTCB+0x58>
	}
 80103d6:	bf00      	nop
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103e6:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <prvResetNextTaskUnblockTime+0x38>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d104      	bne.n	80103fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80103f0:	4b0a      	ldr	r3, [pc, #40]	; (801041c <prvResetNextTaskUnblockTime+0x3c>)
 80103f2:	f04f 32ff 	mov.w	r2, #4294967295
 80103f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80103f8:	e008      	b.n	801040c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103fa:	4b07      	ldr	r3, [pc, #28]	; (8010418 <prvResetNextTaskUnblockTime+0x38>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4a04      	ldr	r2, [pc, #16]	; (801041c <prvResetNextTaskUnblockTime+0x3c>)
 801040a:	6013      	str	r3, [r2, #0]
}
 801040c:	bf00      	nop
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	20003fa4 	.word	0x20003fa4
 801041c:	2000400c 	.word	0x2000400c

08010420 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010426:	4b0b      	ldr	r3, [pc, #44]	; (8010454 <xTaskGetSchedulerState+0x34>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d102      	bne.n	8010434 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801042e:	2301      	movs	r3, #1
 8010430:	607b      	str	r3, [r7, #4]
 8010432:	e008      	b.n	8010446 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010434:	4b08      	ldr	r3, [pc, #32]	; (8010458 <xTaskGetSchedulerState+0x38>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d102      	bne.n	8010442 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801043c:	2302      	movs	r3, #2
 801043e:	607b      	str	r3, [r7, #4]
 8010440:	e001      	b.n	8010446 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010442:	2300      	movs	r3, #0
 8010444:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010446:	687b      	ldr	r3, [r7, #4]
	}
 8010448:	4618      	mov	r0, r3
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr
 8010454:	20003ff8 	.word	0x20003ff8
 8010458:	20004014 	.word	0x20004014

0801045c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801045c:	b580      	push	{r7, lr}
 801045e:	b086      	sub	sp, #24
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010468:	2300      	movs	r3, #0
 801046a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d05a      	beq.n	8010528 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010472:	4b30      	ldr	r3, [pc, #192]	; (8010534 <xTaskPriorityDisinherit+0xd8>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	693a      	ldr	r2, [r7, #16]
 8010478:	429a      	cmp	r2, r3
 801047a:	d00c      	beq.n	8010496 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010480:	b672      	cpsid	i
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	b662      	cpsie	i
 8010490:	60fb      	str	r3, [r7, #12]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801049a:	2b00      	cmp	r3, #0
 801049c:	d10c      	bne.n	80104b8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a2:	b672      	cpsid	i
 80104a4:	f383 8811 	msr	BASEPRI, r3
 80104a8:	f3bf 8f6f 	isb	sy
 80104ac:	f3bf 8f4f 	dsb	sy
 80104b0:	b662      	cpsie	i
 80104b2:	60bb      	str	r3, [r7, #8]
}
 80104b4:	bf00      	nop
 80104b6:	e7fe      	b.n	80104b6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104bc:	1e5a      	subs	r2, r3, #1
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d02c      	beq.n	8010528 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d128      	bne.n	8010528 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	3304      	adds	r3, #4
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fe fbb9 	bl	800ec52 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104f8:	4b0f      	ldr	r3, [pc, #60]	; (8010538 <xTaskPriorityDisinherit+0xdc>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d903      	bls.n	8010508 <xTaskPriorityDisinherit+0xac>
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010504:	4a0c      	ldr	r2, [pc, #48]	; (8010538 <xTaskPriorityDisinherit+0xdc>)
 8010506:	6013      	str	r3, [r2, #0]
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801050c:	4613      	mov	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4413      	add	r3, r2
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4a09      	ldr	r2, [pc, #36]	; (801053c <xTaskPriorityDisinherit+0xe0>)
 8010516:	441a      	add	r2, r3
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	3304      	adds	r3, #4
 801051c:	4619      	mov	r1, r3
 801051e:	4610      	mov	r0, r2
 8010520:	f7fe fb3a 	bl	800eb98 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010524:	2301      	movs	r3, #1
 8010526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010528:	697b      	ldr	r3, [r7, #20]
	}
 801052a:	4618      	mov	r0, r3
 801052c:	3718      	adds	r7, #24
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	20003b18 	.word	0x20003b18
 8010538:	20003ff4 	.word	0x20003ff4
 801053c:	20003b1c 	.word	0x20003b1c

08010540 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
 801054c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801054e:	f000 fded 	bl	801112c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010552:	4b26      	ldr	r3, [pc, #152]	; (80105ec <xTaskNotifyWait+0xac>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b02      	cmp	r3, #2
 801055e:	d01a      	beq.n	8010596 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010560:	4b22      	ldr	r3, [pc, #136]	; (80105ec <xTaskNotifyWait+0xac>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	43d2      	mvns	r2, r2
 801056a:	400a      	ands	r2, r1
 801056c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801056e:	4b1f      	ldr	r3, [pc, #124]	; (80105ec <xTaskNotifyWait+0xac>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00b      	beq.n	8010596 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801057e:	2101      	movs	r1, #1
 8010580:	6838      	ldr	r0, [r7, #0]
 8010582:	f000 f8f5 	bl	8010770 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010586:	4b1a      	ldr	r3, [pc, #104]	; (80105f0 <xTaskNotifyWait+0xb0>)
 8010588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801058c:	601a      	str	r2, [r3, #0]
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010596:	f000 fdfd 	bl	8011194 <vPortExitCritical>

		taskENTER_CRITICAL();
 801059a:	f000 fdc7 	bl	801112c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d004      	beq.n	80105ae <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80105a4:	4b11      	ldr	r3, [pc, #68]	; (80105ec <xTaskNotifyWait+0xac>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80105ae:	4b0f      	ldr	r3, [pc, #60]	; (80105ec <xTaskNotifyWait+0xac>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	d002      	beq.n	80105c2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80105bc:	2300      	movs	r3, #0
 80105be:	617b      	str	r3, [r7, #20]
 80105c0:	e008      	b.n	80105d4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80105c2:	4b0a      	ldr	r3, [pc, #40]	; (80105ec <xTaskNotifyWait+0xac>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80105c8:	68ba      	ldr	r2, [r7, #8]
 80105ca:	43d2      	mvns	r2, r2
 80105cc:	400a      	ands	r2, r1
 80105ce:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80105d0:	2301      	movs	r3, #1
 80105d2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105d4:	4b05      	ldr	r3, [pc, #20]	; (80105ec <xTaskNotifyWait+0xac>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80105de:	f000 fdd9 	bl	8011194 <vPortExitCritical>

		return xReturn;
 80105e2:	697b      	ldr	r3, [r7, #20]
	}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3718      	adds	r7, #24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	20003b18 	.word	0x20003b18
 80105f0:	e000ed04 	.word	0xe000ed04

080105f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b08a      	sub	sp, #40	; 0x28
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	603b      	str	r3, [r7, #0]
 8010600:	4613      	mov	r3, r2
 8010602:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010604:	2301      	movs	r3, #1
 8010606:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d10c      	bne.n	8010628 <xTaskGenericNotify+0x34>
	__asm volatile
 801060e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010612:	b672      	cpsid	i
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	b662      	cpsie	i
 8010622:	61bb      	str	r3, [r7, #24]
}
 8010624:	bf00      	nop
 8010626:	e7fe      	b.n	8010626 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801062c:	f000 fd7e 	bl	801112c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d003      	beq.n	801063e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010636:	6a3b      	ldr	r3, [r7, #32]
 8010638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010644:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010646:	6a3b      	ldr	r3, [r7, #32]
 8010648:	2202      	movs	r2, #2
 801064a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801064e:	79fb      	ldrb	r3, [r7, #7]
 8010650:	2b04      	cmp	r3, #4
 8010652:	d828      	bhi.n	80106a6 <xTaskGenericNotify+0xb2>
 8010654:	a201      	add	r2, pc, #4	; (adr r2, 801065c <xTaskGenericNotify+0x68>)
 8010656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801065a:	bf00      	nop
 801065c:	080106cb 	.word	0x080106cb
 8010660:	08010671 	.word	0x08010671
 8010664:	0801067f 	.word	0x0801067f
 8010668:	0801068b 	.word	0x0801068b
 801066c:	08010693 	.word	0x08010693
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010670:	6a3b      	ldr	r3, [r7, #32]
 8010672:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	431a      	orrs	r2, r3
 8010678:	6a3b      	ldr	r3, [r7, #32]
 801067a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801067c:	e028      	b.n	80106d0 <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010682:	1c5a      	adds	r2, r3, #1
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010688:	e022      	b.n	80106d0 <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010690:	e01e      	b.n	80106d0 <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010692:	7ffb      	ldrb	r3, [r7, #31]
 8010694:	2b02      	cmp	r3, #2
 8010696:	d003      	beq.n	80106a0 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010698:	6a3b      	ldr	r3, [r7, #32]
 801069a:	68ba      	ldr	r2, [r7, #8]
 801069c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801069e:	e017      	b.n	80106d0 <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 80106a0:	2300      	movs	r3, #0
 80106a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80106a4:	e014      	b.n	80106d0 <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ae:	d00e      	beq.n	80106ce <xTaskGenericNotify+0xda>
	__asm volatile
 80106b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b4:	b672      	cpsid	i
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	b662      	cpsie	i
 80106c4:	617b      	str	r3, [r7, #20]
}
 80106c6:	bf00      	nop
 80106c8:	e7fe      	b.n	80106c8 <xTaskGenericNotify+0xd4>
					break;
 80106ca:	bf00      	nop
 80106cc:	e000      	b.n	80106d0 <xTaskGenericNotify+0xdc>

					break;
 80106ce:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80106d0:	7ffb      	ldrb	r3, [r7, #31]
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d13c      	bne.n	8010750 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	3304      	adds	r3, #4
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fe fab9 	bl	800ec52 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80106e0:	6a3b      	ldr	r3, [r7, #32]
 80106e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106e4:	4b1e      	ldr	r3, [pc, #120]	; (8010760 <xTaskGenericNotify+0x16c>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d903      	bls.n	80106f4 <xTaskGenericNotify+0x100>
 80106ec:	6a3b      	ldr	r3, [r7, #32]
 80106ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f0:	4a1b      	ldr	r2, [pc, #108]	; (8010760 <xTaskGenericNotify+0x16c>)
 80106f2:	6013      	str	r3, [r2, #0]
 80106f4:	6a3b      	ldr	r3, [r7, #32]
 80106f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f8:	4613      	mov	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	4413      	add	r3, r2
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	4a18      	ldr	r2, [pc, #96]	; (8010764 <xTaskGenericNotify+0x170>)
 8010702:	441a      	add	r2, r3
 8010704:	6a3b      	ldr	r3, [r7, #32]
 8010706:	3304      	adds	r3, #4
 8010708:	4619      	mov	r1, r3
 801070a:	4610      	mov	r0, r2
 801070c:	f7fe fa44 	bl	800eb98 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010710:	6a3b      	ldr	r3, [r7, #32]
 8010712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00c      	beq.n	8010732 <xTaskGenericNotify+0x13e>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	b672      	cpsid	i
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	b662      	cpsie	i
 801072c:	613b      	str	r3, [r7, #16]
}
 801072e:	bf00      	nop
 8010730:	e7fe      	b.n	8010730 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010732:	6a3b      	ldr	r3, [r7, #32]
 8010734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010736:	4b0c      	ldr	r3, [pc, #48]	; (8010768 <xTaskGenericNotify+0x174>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073c:	429a      	cmp	r2, r3
 801073e:	d907      	bls.n	8010750 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <xTaskGenericNotify+0x178>)
 8010742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010746:	601a      	str	r2, [r3, #0]
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010750:	f000 fd20 	bl	8011194 <vPortExitCritical>

		return xReturn;
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010756:	4618      	mov	r0, r3
 8010758:	3728      	adds	r7, #40	; 0x28
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20003ff4 	.word	0x20003ff4
 8010764:	20003b1c 	.word	0x20003b1c
 8010768:	20003b18 	.word	0x20003b18
 801076c:	e000ed04 	.word	0xe000ed04

08010770 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801077a:	4b21      	ldr	r3, [pc, #132]	; (8010800 <prvAddCurrentTaskToDelayedList+0x90>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010780:	4b20      	ldr	r3, [pc, #128]	; (8010804 <prvAddCurrentTaskToDelayedList+0x94>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3304      	adds	r3, #4
 8010786:	4618      	mov	r0, r3
 8010788:	f7fe fa63 	bl	800ec52 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010792:	d10a      	bne.n	80107aa <prvAddCurrentTaskToDelayedList+0x3a>
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d007      	beq.n	80107aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801079a:	4b1a      	ldr	r3, [pc, #104]	; (8010804 <prvAddCurrentTaskToDelayedList+0x94>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3304      	adds	r3, #4
 80107a0:	4619      	mov	r1, r3
 80107a2:	4819      	ldr	r0, [pc, #100]	; (8010808 <prvAddCurrentTaskToDelayedList+0x98>)
 80107a4:	f7fe f9f8 	bl	800eb98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107a8:	e026      	b.n	80107f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4413      	add	r3, r2
 80107b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107b2:	4b14      	ldr	r3, [pc, #80]	; (8010804 <prvAddCurrentTaskToDelayedList+0x94>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d209      	bcs.n	80107d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107c2:	4b12      	ldr	r3, [pc, #72]	; (801080c <prvAddCurrentTaskToDelayedList+0x9c>)
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	4b0f      	ldr	r3, [pc, #60]	; (8010804 <prvAddCurrentTaskToDelayedList+0x94>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3304      	adds	r3, #4
 80107cc:	4619      	mov	r1, r3
 80107ce:	4610      	mov	r0, r2
 80107d0:	f7fe fa06 	bl	800ebe0 <vListInsert>
}
 80107d4:	e010      	b.n	80107f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107d6:	4b0e      	ldr	r3, [pc, #56]	; (8010810 <prvAddCurrentTaskToDelayedList+0xa0>)
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	4b0a      	ldr	r3, [pc, #40]	; (8010804 <prvAddCurrentTaskToDelayedList+0x94>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3304      	adds	r3, #4
 80107e0:	4619      	mov	r1, r3
 80107e2:	4610      	mov	r0, r2
 80107e4:	f7fe f9fc 	bl	800ebe0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80107e8:	4b0a      	ldr	r3, [pc, #40]	; (8010814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d202      	bcs.n	80107f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80107f2:	4a08      	ldr	r2, [pc, #32]	; (8010814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	6013      	str	r3, [r2, #0]
}
 80107f8:	bf00      	nop
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	20003ff0 	.word	0x20003ff0
 8010804:	20003b18 	.word	0x20003b18
 8010808:	20003fd8 	.word	0x20003fd8
 801080c:	20003fa8 	.word	0x20003fa8
 8010810:	20003fa4 	.word	0x20003fa4
 8010814:	2000400c 	.word	0x2000400c

08010818 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b08a      	sub	sp, #40	; 0x28
 801081c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801081e:	2300      	movs	r3, #0
 8010820:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010822:	f000 fb15 	bl	8010e50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010826:	4b1d      	ldr	r3, [pc, #116]	; (801089c <xTimerCreateTimerTask+0x84>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d021      	beq.n	8010872 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801082e:	2300      	movs	r3, #0
 8010830:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010832:	2300      	movs	r3, #0
 8010834:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010836:	1d3a      	adds	r2, r7, #4
 8010838:	f107 0108 	add.w	r1, r7, #8
 801083c:	f107 030c 	add.w	r3, r7, #12
 8010840:	4618      	mov	r0, r3
 8010842:	f7fe f889 	bl	800e958 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	9202      	str	r2, [sp, #8]
 801084e:	9301      	str	r3, [sp, #4]
 8010850:	2302      	movs	r3, #2
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	2300      	movs	r3, #0
 8010856:	460a      	mov	r2, r1
 8010858:	4911      	ldr	r1, [pc, #68]	; (80108a0 <xTimerCreateTimerTask+0x88>)
 801085a:	4812      	ldr	r0, [pc, #72]	; (80108a4 <xTimerCreateTimerTask+0x8c>)
 801085c:	f7fe ff2e 	bl	800f6bc <xTaskCreateStatic>
 8010860:	4603      	mov	r3, r0
 8010862:	4a11      	ldr	r2, [pc, #68]	; (80108a8 <xTimerCreateTimerTask+0x90>)
 8010864:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010866:	4b10      	ldr	r3, [pc, #64]	; (80108a8 <xTimerCreateTimerTask+0x90>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801086e:	2301      	movs	r3, #1
 8010870:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d10c      	bne.n	8010892 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8010878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087c:	b672      	cpsid	i
 801087e:	f383 8811 	msr	BASEPRI, r3
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	f3bf 8f4f 	dsb	sy
 801088a:	b662      	cpsie	i
 801088c:	613b      	str	r3, [r7, #16]
}
 801088e:	bf00      	nop
 8010890:	e7fe      	b.n	8010890 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010892:	697b      	ldr	r3, [r7, #20]
}
 8010894:	4618      	mov	r0, r3
 8010896:	3718      	adds	r7, #24
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	20004048 	.word	0x20004048
 80108a0:	0801aa10 	.word	0x0801aa10
 80108a4:	080109e9 	.word	0x080109e9
 80108a8:	2000404c 	.word	0x2000404c

080108ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b08a      	sub	sp, #40	; 0x28
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
 80108b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80108ba:	2300      	movs	r3, #0
 80108bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d10c      	bne.n	80108de <xTimerGenericCommand+0x32>
	__asm volatile
 80108c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c8:	b672      	cpsid	i
 80108ca:	f383 8811 	msr	BASEPRI, r3
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f3bf 8f4f 	dsb	sy
 80108d6:	b662      	cpsie	i
 80108d8:	623b      	str	r3, [r7, #32]
}
 80108da:	bf00      	nop
 80108dc:	e7fe      	b.n	80108dc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80108de:	4b1a      	ldr	r3, [pc, #104]	; (8010948 <xTimerGenericCommand+0x9c>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d02a      	beq.n	801093c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2b05      	cmp	r3, #5
 80108f6:	dc18      	bgt.n	801092a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80108f8:	f7ff fd92 	bl	8010420 <xTaskGetSchedulerState>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b02      	cmp	r3, #2
 8010900:	d109      	bne.n	8010916 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010902:	4b11      	ldr	r3, [pc, #68]	; (8010948 <xTimerGenericCommand+0x9c>)
 8010904:	6818      	ldr	r0, [r3, #0]
 8010906:	f107 0110 	add.w	r1, r7, #16
 801090a:	2300      	movs	r3, #0
 801090c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801090e:	f7fe fadb 	bl	800eec8 <xQueueGenericSend>
 8010912:	6278      	str	r0, [r7, #36]	; 0x24
 8010914:	e012      	b.n	801093c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010916:	4b0c      	ldr	r3, [pc, #48]	; (8010948 <xTimerGenericCommand+0x9c>)
 8010918:	6818      	ldr	r0, [r3, #0]
 801091a:	f107 0110 	add.w	r1, r7, #16
 801091e:	2300      	movs	r3, #0
 8010920:	2200      	movs	r2, #0
 8010922:	f7fe fad1 	bl	800eec8 <xQueueGenericSend>
 8010926:	6278      	str	r0, [r7, #36]	; 0x24
 8010928:	e008      	b.n	801093c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801092a:	4b07      	ldr	r3, [pc, #28]	; (8010948 <xTimerGenericCommand+0x9c>)
 801092c:	6818      	ldr	r0, [r3, #0]
 801092e:	f107 0110 	add.w	r1, r7, #16
 8010932:	2300      	movs	r3, #0
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	f7fe fbcd 	bl	800f0d4 <xQueueGenericSendFromISR>
 801093a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801093e:	4618      	mov	r0, r3
 8010940:	3728      	adds	r7, #40	; 0x28
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20004048 	.word	0x20004048

0801094c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b088      	sub	sp, #32
 8010950:	af02      	add	r7, sp, #8
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010956:	4b23      	ldr	r3, [pc, #140]	; (80109e4 <prvProcessExpiredTimer+0x98>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	3304      	adds	r3, #4
 8010964:	4618      	mov	r0, r3
 8010966:	f7fe f974 	bl	800ec52 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010970:	f003 0304 	and.w	r3, r3, #4
 8010974:	2b00      	cmp	r3, #0
 8010976:	d024      	beq.n	80109c2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	699a      	ldr	r2, [r3, #24]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	18d1      	adds	r1, r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	683a      	ldr	r2, [r7, #0]
 8010984:	6978      	ldr	r0, [r7, #20]
 8010986:	f000 f8d3 	bl	8010b30 <prvInsertTimerInActiveList>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d021      	beq.n	80109d4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010990:	2300      	movs	r3, #0
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	2300      	movs	r3, #0
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	2100      	movs	r1, #0
 801099a:	6978      	ldr	r0, [r7, #20]
 801099c:	f7ff ff86 	bl	80108ac <xTimerGenericCommand>
 80109a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d115      	bne.n	80109d4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80109a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ac:	b672      	cpsid	i
 80109ae:	f383 8811 	msr	BASEPRI, r3
 80109b2:	f3bf 8f6f 	isb	sy
 80109b6:	f3bf 8f4f 	dsb	sy
 80109ba:	b662      	cpsie	i
 80109bc:	60fb      	str	r3, [r7, #12]
}
 80109be:	bf00      	nop
 80109c0:	e7fe      	b.n	80109c0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109c8:	f023 0301 	bic.w	r3, r3, #1
 80109cc:	b2da      	uxtb	r2, r3
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	6a1b      	ldr	r3, [r3, #32]
 80109d8:	6978      	ldr	r0, [r7, #20]
 80109da:	4798      	blx	r3
}
 80109dc:	bf00      	nop
 80109de:	3718      	adds	r7, #24
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	20004040 	.word	0x20004040

080109e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109f0:	f107 0308 	add.w	r3, r7, #8
 80109f4:	4618      	mov	r0, r3
 80109f6:	f000 f857 	bl	8010aa8 <prvGetNextExpireTime>
 80109fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	4619      	mov	r1, r3
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f000 f803 	bl	8010a0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a06:	f000 f8d5 	bl	8010bb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a0a:	e7f1      	b.n	80109f0 <prvTimerTask+0x8>

08010a0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a16:	f7ff f90f 	bl	800fc38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a1a:	f107 0308 	add.w	r3, r7, #8
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f000 f866 	bl	8010af0 <prvSampleTimeNow>
 8010a24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d130      	bne.n	8010a8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10a      	bne.n	8010a48 <prvProcessTimerOrBlockTask+0x3c>
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d806      	bhi.n	8010a48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a3a:	f7ff f90b 	bl	800fc54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a3e:	68f9      	ldr	r1, [r7, #12]
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff ff83 	bl	801094c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a46:	e024      	b.n	8010a92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d008      	beq.n	8010a60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a4e:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <prvProcessTimerOrBlockTask+0x90>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d101      	bne.n	8010a5c <prvProcessTimerOrBlockTask+0x50>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e000      	b.n	8010a5e <prvProcessTimerOrBlockTask+0x52>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a60:	4b0f      	ldr	r3, [pc, #60]	; (8010aa0 <prvProcessTimerOrBlockTask+0x94>)
 8010a62:	6818      	ldr	r0, [r3, #0]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	f7fe fdf1 	bl	800f654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a72:	f7ff f8ef 	bl	800fc54 <xTaskResumeAll>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10a      	bne.n	8010a92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a7c:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <prvProcessTimerOrBlockTask+0x98>)
 8010a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a82:	601a      	str	r2, [r3, #0]
 8010a84:	f3bf 8f4f 	dsb	sy
 8010a88:	f3bf 8f6f 	isb	sy
}
 8010a8c:	e001      	b.n	8010a92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010a8e:	f7ff f8e1 	bl	800fc54 <xTaskResumeAll>
}
 8010a92:	bf00      	nop
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20004044 	.word	0x20004044
 8010aa0:	20004048 	.word	0x20004048
 8010aa4:	e000ed04 	.word	0xe000ed04

08010aa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ab0:	4b0e      	ldr	r3, [pc, #56]	; (8010aec <prvGetNextExpireTime+0x44>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d101      	bne.n	8010abe <prvGetNextExpireTime+0x16>
 8010aba:	2201      	movs	r2, #1
 8010abc:	e000      	b.n	8010ac0 <prvGetNextExpireTime+0x18>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d105      	bne.n	8010ad8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010acc:	4b07      	ldr	r3, [pc, #28]	; (8010aec <prvGetNextExpireTime+0x44>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	60fb      	str	r3, [r7, #12]
 8010ad6:	e001      	b.n	8010adc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010adc:	68fb      	ldr	r3, [r7, #12]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr
 8010aea:	bf00      	nop
 8010aec:	20004040 	.word	0x20004040

08010af0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010af8:	f7ff f94c 	bl	800fd94 <xTaskGetTickCount>
 8010afc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010afe:	4b0b      	ldr	r3, [pc, #44]	; (8010b2c <prvSampleTimeNow+0x3c>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d205      	bcs.n	8010b14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b08:	f000 f93c 	bl	8010d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	601a      	str	r2, [r3, #0]
 8010b12:	e002      	b.n	8010b1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b1a:	4a04      	ldr	r2, [pc, #16]	; (8010b2c <prvSampleTimeNow+0x3c>)
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b20:	68fb      	ldr	r3, [r7, #12]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	20004050 	.word	0x20004050

08010b30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
 8010b3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b4e:	68ba      	ldr	r2, [r7, #8]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d812      	bhi.n	8010b7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	1ad2      	subs	r2, r2, r3
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d302      	bcc.n	8010b6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b64:	2301      	movs	r3, #1
 8010b66:	617b      	str	r3, [r7, #20]
 8010b68:	e01b      	b.n	8010ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b6a:	4b10      	ldr	r3, [pc, #64]	; (8010bac <prvInsertTimerInActiveList+0x7c>)
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	3304      	adds	r3, #4
 8010b72:	4619      	mov	r1, r3
 8010b74:	4610      	mov	r0, r2
 8010b76:	f7fe f833 	bl	800ebe0 <vListInsert>
 8010b7a:	e012      	b.n	8010ba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d206      	bcs.n	8010b92 <prvInsertTimerInActiveList+0x62>
 8010b84:	68ba      	ldr	r2, [r7, #8]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d302      	bcc.n	8010b92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	617b      	str	r3, [r7, #20]
 8010b90:	e007      	b.n	8010ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b92:	4b07      	ldr	r3, [pc, #28]	; (8010bb0 <prvInsertTimerInActiveList+0x80>)
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	3304      	adds	r3, #4
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	f7fe f81f 	bl	800ebe0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010ba2:	697b      	ldr	r3, [r7, #20]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20004044 	.word	0x20004044
 8010bb0:	20004040 	.word	0x20004040

08010bb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b08e      	sub	sp, #56	; 0x38
 8010bb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bba:	e0d0      	b.n	8010d5e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	da1a      	bge.n	8010bf8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010bc2:	1d3b      	adds	r3, r7, #4
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10c      	bne.n	8010be8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8010bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd2:	b672      	cpsid	i
 8010bd4:	f383 8811 	msr	BASEPRI, r3
 8010bd8:	f3bf 8f6f 	isb	sy
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	b662      	cpsie	i
 8010be2:	61fb      	str	r3, [r7, #28]
}
 8010be4:	bf00      	nop
 8010be6:	e7fe      	b.n	8010be6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bee:	6850      	ldr	r0, [r2, #4]
 8010bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bf2:	6892      	ldr	r2, [r2, #8]
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f2c0 80ae 	blt.w	8010d5c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d004      	beq.n	8010c16 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	3304      	adds	r3, #4
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe f81e 	bl	800ec52 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c16:	463b      	mov	r3, r7
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff ff69 	bl	8010af0 <prvSampleTimeNow>
 8010c1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2b09      	cmp	r3, #9
 8010c24:	f200 809b 	bhi.w	8010d5e <prvProcessReceivedCommands+0x1aa>
 8010c28:	a201      	add	r2, pc, #4	; (adr r2, 8010c30 <prvProcessReceivedCommands+0x7c>)
 8010c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2e:	bf00      	nop
 8010c30:	08010c59 	.word	0x08010c59
 8010c34:	08010c59 	.word	0x08010c59
 8010c38:	08010c59 	.word	0x08010c59
 8010c3c:	08010cd1 	.word	0x08010cd1
 8010c40:	08010ce5 	.word	0x08010ce5
 8010c44:	08010d33 	.word	0x08010d33
 8010c48:	08010c59 	.word	0x08010c59
 8010c4c:	08010c59 	.word	0x08010c59
 8010c50:	08010cd1 	.word	0x08010cd1
 8010c54:	08010ce5 	.word	0x08010ce5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c5e:	f043 0301 	orr.w	r3, r3, #1
 8010c62:	b2da      	uxtb	r2, r3
 8010c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c6a:	68ba      	ldr	r2, [r7, #8]
 8010c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c6e:	699b      	ldr	r3, [r3, #24]
 8010c70:	18d1      	adds	r1, r2, r3
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c78:	f7ff ff5a 	bl	8010b30 <prvInsertTimerInActiveList>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d06d      	beq.n	8010d5e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c84:	6a1b      	ldr	r3, [r3, #32]
 8010c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c90:	f003 0304 	and.w	r3, r3, #4
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d062      	beq.n	8010d5e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010c98:	68ba      	ldr	r2, [r7, #8]
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	441a      	add	r2, r3
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010caa:	f7ff fdff 	bl	80108ac <xTimerGenericCommand>
 8010cae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d153      	bne.n	8010d5e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cba:	b672      	cpsid	i
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	b662      	cpsie	i
 8010cca:	61bb      	str	r3, [r7, #24]
}
 8010ccc:	bf00      	nop
 8010cce:	e7fe      	b.n	8010cce <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cd6:	f023 0301 	bic.w	r3, r3, #1
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ce2:	e03c      	b.n	8010d5e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cea:	f043 0301 	orr.w	r3, r3, #1
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	699b      	ldr	r3, [r3, #24]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d10c      	bne.n	8010d1e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	b672      	cpsid	i
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	b662      	cpsie	i
 8010d18:	617b      	str	r3, [r7, #20]
}
 8010d1a:	bf00      	nop
 8010d1c:	e7fe      	b.n	8010d1c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	699a      	ldr	r2, [r3, #24]
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	18d1      	adds	r1, r2, r3
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d2c:	f7ff ff00 	bl	8010b30 <prvInsertTimerInActiveList>
					break;
 8010d30:	e015      	b.n	8010d5e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d38:	f003 0302 	and.w	r3, r3, #2
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d103      	bne.n	8010d48 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d42:	f000 fbe9 	bl	8011518 <vPortFree>
 8010d46:	e00a      	b.n	8010d5e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d4e:	f023 0301 	bic.w	r3, r3, #1
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d5a:	e000      	b.n	8010d5e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d5e:	4b08      	ldr	r3, [pc, #32]	; (8010d80 <prvProcessReceivedCommands+0x1cc>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	1d39      	adds	r1, r7, #4
 8010d64:	2200      	movs	r2, #0
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fe fa54 	bl	800f214 <xQueueReceive>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f47f af24 	bne.w	8010bbc <prvProcessReceivedCommands+0x8>
	}
}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	3730      	adds	r7, #48	; 0x30
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	20004048 	.word	0x20004048

08010d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d8a:	e04a      	b.n	8010e22 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d8c:	4b2e      	ldr	r3, [pc, #184]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d96:	4b2c      	ldr	r3, [pc, #176]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	3304      	adds	r3, #4
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fd ff54 	bl	800ec52 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	6a1b      	ldr	r3, [r3, #32]
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d030      	beq.n	8010e22 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	699b      	ldr	r3, [r3, #24]
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d90e      	bls.n	8010df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dde:	4b1a      	ldr	r3, [pc, #104]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3304      	adds	r3, #4
 8010de6:	4619      	mov	r1, r3
 8010de8:	4610      	mov	r0, r2
 8010dea:	f7fd fef9 	bl	800ebe0 <vListInsert>
 8010dee:	e018      	b.n	8010e22 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010df0:	2300      	movs	r3, #0
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	2300      	movs	r3, #0
 8010df6:	693a      	ldr	r2, [r7, #16]
 8010df8:	2100      	movs	r1, #0
 8010dfa:	68f8      	ldr	r0, [r7, #12]
 8010dfc:	f7ff fd56 	bl	80108ac <xTimerGenericCommand>
 8010e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10c      	bne.n	8010e22 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0c:	b672      	cpsid	i
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	b662      	cpsie	i
 8010e1c:	603b      	str	r3, [r7, #0]
}
 8010e1e:	bf00      	nop
 8010e20:	e7fe      	b.n	8010e20 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e22:	4b09      	ldr	r3, [pc, #36]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d1af      	bne.n	8010d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e2c:	4b06      	ldr	r3, [pc, #24]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e32:	4b06      	ldr	r3, [pc, #24]	; (8010e4c <prvSwitchTimerLists+0xc8>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a04      	ldr	r2, [pc, #16]	; (8010e48 <prvSwitchTimerLists+0xc4>)
 8010e38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e3a:	4a04      	ldr	r2, [pc, #16]	; (8010e4c <prvSwitchTimerLists+0xc8>)
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	6013      	str	r3, [r2, #0]
}
 8010e40:	bf00      	nop
 8010e42:	3718      	adds	r7, #24
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	20004040 	.word	0x20004040
 8010e4c:	20004044 	.word	0x20004044

08010e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e56:	f000 f969 	bl	801112c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e5a:	4b15      	ldr	r3, [pc, #84]	; (8010eb0 <prvCheckForValidListAndQueue+0x60>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d120      	bne.n	8010ea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e62:	4814      	ldr	r0, [pc, #80]	; (8010eb4 <prvCheckForValidListAndQueue+0x64>)
 8010e64:	f7fd fe6b 	bl	800eb3e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e68:	4813      	ldr	r0, [pc, #76]	; (8010eb8 <prvCheckForValidListAndQueue+0x68>)
 8010e6a:	f7fd fe68 	bl	800eb3e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e6e:	4b13      	ldr	r3, [pc, #76]	; (8010ebc <prvCheckForValidListAndQueue+0x6c>)
 8010e70:	4a10      	ldr	r2, [pc, #64]	; (8010eb4 <prvCheckForValidListAndQueue+0x64>)
 8010e72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e74:	4b12      	ldr	r3, [pc, #72]	; (8010ec0 <prvCheckForValidListAndQueue+0x70>)
 8010e76:	4a10      	ldr	r2, [pc, #64]	; (8010eb8 <prvCheckForValidListAndQueue+0x68>)
 8010e78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	4b11      	ldr	r3, [pc, #68]	; (8010ec4 <prvCheckForValidListAndQueue+0x74>)
 8010e80:	4a11      	ldr	r2, [pc, #68]	; (8010ec8 <prvCheckForValidListAndQueue+0x78>)
 8010e82:	2110      	movs	r1, #16
 8010e84:	200a      	movs	r0, #10
 8010e86:	f7fd ff79 	bl	800ed7c <xQueueGenericCreateStatic>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	4a08      	ldr	r2, [pc, #32]	; (8010eb0 <prvCheckForValidListAndQueue+0x60>)
 8010e8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e90:	4b07      	ldr	r3, [pc, #28]	; (8010eb0 <prvCheckForValidListAndQueue+0x60>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d005      	beq.n	8010ea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e98:	4b05      	ldr	r3, [pc, #20]	; (8010eb0 <prvCheckForValidListAndQueue+0x60>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	490b      	ldr	r1, [pc, #44]	; (8010ecc <prvCheckForValidListAndQueue+0x7c>)
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe fbae 	bl	800f600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ea4:	f000 f976 	bl	8011194 <vPortExitCritical>
}
 8010ea8:	bf00      	nop
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	20004048 	.word	0x20004048
 8010eb4:	20004018 	.word	0x20004018
 8010eb8:	2000402c 	.word	0x2000402c
 8010ebc:	20004040 	.word	0x20004040
 8010ec0:	20004044 	.word	0x20004044
 8010ec4:	200040f4 	.word	0x200040f4
 8010ec8:	20004054 	.word	0x20004054
 8010ecc:	0801aa18 	.word	0x0801aa18

08010ed0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b08a      	sub	sp, #40	; 0x28
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010ede:	f06f 0301 	mvn.w	r3, #1
 8010ee2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ef0:	4b06      	ldr	r3, [pc, #24]	; (8010f0c <xTimerPendFunctionCallFromISR+0x3c>)
 8010ef2:	6818      	ldr	r0, [r3, #0]
 8010ef4:	f107 0114 	add.w	r1, r7, #20
 8010ef8:	2300      	movs	r3, #0
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	f7fe f8ea 	bl	800f0d4 <xQueueGenericSendFromISR>
 8010f00:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3728      	adds	r7, #40	; 0x28
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20004048 	.word	0x20004048

08010f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f10:	b480      	push	{r7}
 8010f12:	b085      	sub	sp, #20
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3b04      	subs	r3, #4
 8010f20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	3b04      	subs	r3, #4
 8010f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	f023 0201 	bic.w	r2, r3, #1
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	3b04      	subs	r3, #4
 8010f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f40:	4a0c      	ldr	r2, [pc, #48]	; (8010f74 <pxPortInitialiseStack+0x64>)
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3b14      	subs	r3, #20
 8010f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	3b04      	subs	r3, #4
 8010f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f06f 0202 	mvn.w	r2, #2
 8010f5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	3b20      	subs	r3, #32
 8010f64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f66:	68fb      	ldr	r3, [r7, #12]
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3714      	adds	r7, #20
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	08010f79 	.word	0x08010f79

08010f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f82:	4b14      	ldr	r3, [pc, #80]	; (8010fd4 <prvTaskExitError+0x5c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f8a:	d00c      	beq.n	8010fa6 <prvTaskExitError+0x2e>
	__asm volatile
 8010f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f90:	b672      	cpsid	i
 8010f92:	f383 8811 	msr	BASEPRI, r3
 8010f96:	f3bf 8f6f 	isb	sy
 8010f9a:	f3bf 8f4f 	dsb	sy
 8010f9e:	b662      	cpsie	i
 8010fa0:	60fb      	str	r3, [r7, #12]
}
 8010fa2:	bf00      	nop
 8010fa4:	e7fe      	b.n	8010fa4 <prvTaskExitError+0x2c>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	b672      	cpsid	i
 8010fac:	f383 8811 	msr	BASEPRI, r3
 8010fb0:	f3bf 8f6f 	isb	sy
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	b662      	cpsie	i
 8010fba:	60bb      	str	r3, [r7, #8]
}
 8010fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010fbe:	bf00      	nop
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d0fc      	beq.n	8010fc0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010fc6:	bf00      	nop
 8010fc8:	bf00      	nop
 8010fca:	3714      	adds	r7, #20
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr
 8010fd4:	20000154 	.word	0x20000154
	...

08010fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010fe0:	4b07      	ldr	r3, [pc, #28]	; (8011000 <pxCurrentTCBConst2>)
 8010fe2:	6819      	ldr	r1, [r3, #0]
 8010fe4:	6808      	ldr	r0, [r1, #0]
 8010fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fea:	f380 8809 	msr	PSP, r0
 8010fee:	f3bf 8f6f 	isb	sy
 8010ff2:	f04f 0000 	mov.w	r0, #0
 8010ff6:	f380 8811 	msr	BASEPRI, r0
 8010ffa:	4770      	bx	lr
 8010ffc:	f3af 8000 	nop.w

08011000 <pxCurrentTCBConst2>:
 8011000:	20003b18 	.word	0x20003b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011004:	bf00      	nop
 8011006:	bf00      	nop

08011008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011008:	4808      	ldr	r0, [pc, #32]	; (801102c <prvPortStartFirstTask+0x24>)
 801100a:	6800      	ldr	r0, [r0, #0]
 801100c:	6800      	ldr	r0, [r0, #0]
 801100e:	f380 8808 	msr	MSP, r0
 8011012:	f04f 0000 	mov.w	r0, #0
 8011016:	f380 8814 	msr	CONTROL, r0
 801101a:	b662      	cpsie	i
 801101c:	b661      	cpsie	f
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	df00      	svc	0
 8011028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801102a:	bf00      	nop
 801102c:	e000ed08 	.word	0xe000ed08

08011030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011036:	4b37      	ldr	r3, [pc, #220]	; (8011114 <xPortStartScheduler+0xe4>)
 8011038:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	b2db      	uxtb	r3, r3
 8011040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	22ff      	movs	r2, #255	; 0xff
 8011046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	b2db      	uxtb	r3, r3
 801104e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011050:	78fb      	ldrb	r3, [r7, #3]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b2f      	ldr	r3, [pc, #188]	; (8011118 <xPortStartScheduler+0xe8>)
 801105c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801105e:	4b2f      	ldr	r3, [pc, #188]	; (801111c <xPortStartScheduler+0xec>)
 8011060:	2207      	movs	r2, #7
 8011062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011064:	e009      	b.n	801107a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011066:	4b2d      	ldr	r3, [pc, #180]	; (801111c <xPortStartScheduler+0xec>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	3b01      	subs	r3, #1
 801106c:	4a2b      	ldr	r2, [pc, #172]	; (801111c <xPortStartScheduler+0xec>)
 801106e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011070:	78fb      	ldrb	r3, [r7, #3]
 8011072:	b2db      	uxtb	r3, r3
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	b2db      	uxtb	r3, r3
 8011078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801107a:	78fb      	ldrb	r3, [r7, #3]
 801107c:	b2db      	uxtb	r3, r3
 801107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011082:	2b80      	cmp	r3, #128	; 0x80
 8011084:	d0ef      	beq.n	8011066 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011086:	4b25      	ldr	r3, [pc, #148]	; (801111c <xPortStartScheduler+0xec>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f1c3 0307 	rsb	r3, r3, #7
 801108e:	2b04      	cmp	r3, #4
 8011090:	d00c      	beq.n	80110ac <xPortStartScheduler+0x7c>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011096:	b672      	cpsid	i
 8011098:	f383 8811 	msr	BASEPRI, r3
 801109c:	f3bf 8f6f 	isb	sy
 80110a0:	f3bf 8f4f 	dsb	sy
 80110a4:	b662      	cpsie	i
 80110a6:	60bb      	str	r3, [r7, #8]
}
 80110a8:	bf00      	nop
 80110aa:	e7fe      	b.n	80110aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80110ac:	4b1b      	ldr	r3, [pc, #108]	; (801111c <xPortStartScheduler+0xec>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	021b      	lsls	r3, r3, #8
 80110b2:	4a1a      	ldr	r2, [pc, #104]	; (801111c <xPortStartScheduler+0xec>)
 80110b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80110b6:	4b19      	ldr	r3, [pc, #100]	; (801111c <xPortStartScheduler+0xec>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80110be:	4a17      	ldr	r2, [pc, #92]	; (801111c <xPortStartScheduler+0xec>)
 80110c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	b2da      	uxtb	r2, r3
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80110ca:	4b15      	ldr	r3, [pc, #84]	; (8011120 <xPortStartScheduler+0xf0>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	4a14      	ldr	r2, [pc, #80]	; (8011120 <xPortStartScheduler+0xf0>)
 80110d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80110d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80110d6:	4b12      	ldr	r3, [pc, #72]	; (8011120 <xPortStartScheduler+0xf0>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a11      	ldr	r2, [pc, #68]	; (8011120 <xPortStartScheduler+0xf0>)
 80110dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80110e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80110e2:	f000 f8dd 	bl	80112a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80110e6:	4b0f      	ldr	r3, [pc, #60]	; (8011124 <xPortStartScheduler+0xf4>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80110ec:	f000 f8fc 	bl	80112e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80110f0:	4b0d      	ldr	r3, [pc, #52]	; (8011128 <xPortStartScheduler+0xf8>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a0c      	ldr	r2, [pc, #48]	; (8011128 <xPortStartScheduler+0xf8>)
 80110f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80110fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80110fc:	f7ff ff84 	bl	8011008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011100:	f7fe ff14 	bl	800ff2c <vTaskSwitchContext>
	prvTaskExitError();
 8011104:	f7ff ff38 	bl	8010f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	e000e400 	.word	0xe000e400
 8011118:	20004144 	.word	0x20004144
 801111c:	20004148 	.word	0x20004148
 8011120:	e000ed20 	.word	0xe000ed20
 8011124:	20000154 	.word	0x20000154
 8011128:	e000ef34 	.word	0xe000ef34

0801112c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
	__asm volatile
 8011132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011136:	b672      	cpsid	i
 8011138:	f383 8811 	msr	BASEPRI, r3
 801113c:	f3bf 8f6f 	isb	sy
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	b662      	cpsie	i
 8011146:	607b      	str	r3, [r7, #4]
}
 8011148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801114a:	4b10      	ldr	r3, [pc, #64]	; (801118c <vPortEnterCritical+0x60>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	3301      	adds	r3, #1
 8011150:	4a0e      	ldr	r2, [pc, #56]	; (801118c <vPortEnterCritical+0x60>)
 8011152:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011154:	4b0d      	ldr	r3, [pc, #52]	; (801118c <vPortEnterCritical+0x60>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b01      	cmp	r3, #1
 801115a:	d111      	bne.n	8011180 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801115c:	4b0c      	ldr	r3, [pc, #48]	; (8011190 <vPortEnterCritical+0x64>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	b2db      	uxtb	r3, r3
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00c      	beq.n	8011180 <vPortEnterCritical+0x54>
	__asm volatile
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	b672      	cpsid	i
 801116c:	f383 8811 	msr	BASEPRI, r3
 8011170:	f3bf 8f6f 	isb	sy
 8011174:	f3bf 8f4f 	dsb	sy
 8011178:	b662      	cpsie	i
 801117a:	603b      	str	r3, [r7, #0]
}
 801117c:	bf00      	nop
 801117e:	e7fe      	b.n	801117e <vPortEnterCritical+0x52>
	}
}
 8011180:	bf00      	nop
 8011182:	370c      	adds	r7, #12
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr
 801118c:	20000154 	.word	0x20000154
 8011190:	e000ed04 	.word	0xe000ed04

08011194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801119a:	4b13      	ldr	r3, [pc, #76]	; (80111e8 <vPortExitCritical+0x54>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10c      	bne.n	80111bc <vPortExitCritical+0x28>
	__asm volatile
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	b672      	cpsid	i
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	b662      	cpsie	i
 80111b6:	607b      	str	r3, [r7, #4]
}
 80111b8:	bf00      	nop
 80111ba:	e7fe      	b.n	80111ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80111bc:	4b0a      	ldr	r3, [pc, #40]	; (80111e8 <vPortExitCritical+0x54>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	3b01      	subs	r3, #1
 80111c2:	4a09      	ldr	r2, [pc, #36]	; (80111e8 <vPortExitCritical+0x54>)
 80111c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80111c6:	4b08      	ldr	r3, [pc, #32]	; (80111e8 <vPortExitCritical+0x54>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d105      	bne.n	80111da <vPortExitCritical+0x46>
 80111ce:	2300      	movs	r3, #0
 80111d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	f383 8811 	msr	BASEPRI, r3
}
 80111d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80111da:	bf00      	nop
 80111dc:	370c      	adds	r7, #12
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	20000154 	.word	0x20000154
 80111ec:	00000000 	.word	0x00000000

080111f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80111f0:	f3ef 8009 	mrs	r0, PSP
 80111f4:	f3bf 8f6f 	isb	sy
 80111f8:	4b15      	ldr	r3, [pc, #84]	; (8011250 <pxCurrentTCBConst>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	f01e 0f10 	tst.w	lr, #16
 8011200:	bf08      	it	eq
 8011202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120a:	6010      	str	r0, [r2, #0]
 801120c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011214:	b672      	cpsid	i
 8011216:	f380 8811 	msr	BASEPRI, r0
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	f3bf 8f6f 	isb	sy
 8011222:	b662      	cpsie	i
 8011224:	f7fe fe82 	bl	800ff2c <vTaskSwitchContext>
 8011228:	f04f 0000 	mov.w	r0, #0
 801122c:	f380 8811 	msr	BASEPRI, r0
 8011230:	bc09      	pop	{r0, r3}
 8011232:	6819      	ldr	r1, [r3, #0]
 8011234:	6808      	ldr	r0, [r1, #0]
 8011236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801123a:	f01e 0f10 	tst.w	lr, #16
 801123e:	bf08      	it	eq
 8011240:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011244:	f380 8809 	msr	PSP, r0
 8011248:	f3bf 8f6f 	isb	sy
 801124c:	4770      	bx	lr
 801124e:	bf00      	nop

08011250 <pxCurrentTCBConst>:
 8011250:	20003b18 	.word	0x20003b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011254:	bf00      	nop
 8011256:	bf00      	nop

08011258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
	__asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011262:	b672      	cpsid	i
 8011264:	f383 8811 	msr	BASEPRI, r3
 8011268:	f3bf 8f6f 	isb	sy
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	b662      	cpsie	i
 8011272:	607b      	str	r3, [r7, #4]
}
 8011274:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011276:	f7fe fd9d 	bl	800fdb4 <xTaskIncrementTick>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d003      	beq.n	8011288 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011280:	4b06      	ldr	r3, [pc, #24]	; (801129c <SysTick_Handler+0x44>)
 8011282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011286:	601a      	str	r2, [r3, #0]
 8011288:	2300      	movs	r3, #0
 801128a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	f383 8811 	msr	BASEPRI, r3
}
 8011292:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011294:	bf00      	nop
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	e000ed04 	.word	0xe000ed04

080112a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80112a0:	b480      	push	{r7}
 80112a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112a4:	4b0b      	ldr	r3, [pc, #44]	; (80112d4 <vPortSetupTimerInterrupt+0x34>)
 80112a6:	2200      	movs	r2, #0
 80112a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112aa:	4b0b      	ldr	r3, [pc, #44]	; (80112d8 <vPortSetupTimerInterrupt+0x38>)
 80112ac:	2200      	movs	r2, #0
 80112ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80112b0:	4b0a      	ldr	r3, [pc, #40]	; (80112dc <vPortSetupTimerInterrupt+0x3c>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4a0a      	ldr	r2, [pc, #40]	; (80112e0 <vPortSetupTimerInterrupt+0x40>)
 80112b6:	fba2 2303 	umull	r2, r3, r2, r3
 80112ba:	099b      	lsrs	r3, r3, #6
 80112bc:	4a09      	ldr	r2, [pc, #36]	; (80112e4 <vPortSetupTimerInterrupt+0x44>)
 80112be:	3b01      	subs	r3, #1
 80112c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80112c2:	4b04      	ldr	r3, [pc, #16]	; (80112d4 <vPortSetupTimerInterrupt+0x34>)
 80112c4:	2207      	movs	r2, #7
 80112c6:	601a      	str	r2, [r3, #0]
}
 80112c8:	bf00      	nop
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	e000e010 	.word	0xe000e010
 80112d8:	e000e018 	.word	0xe000e018
 80112dc:	20000148 	.word	0x20000148
 80112e0:	10624dd3 	.word	0x10624dd3
 80112e4:	e000e014 	.word	0xe000e014

080112e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80112e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80112f8 <vPortEnableVFP+0x10>
 80112ec:	6801      	ldr	r1, [r0, #0]
 80112ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80112f2:	6001      	str	r1, [r0, #0]
 80112f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80112f6:	bf00      	nop
 80112f8:	e000ed88 	.word	0xe000ed88

080112fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011302:	f3ef 8305 	mrs	r3, IPSR
 8011306:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2b0f      	cmp	r3, #15
 801130c:	d916      	bls.n	801133c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801130e:	4a19      	ldr	r2, [pc, #100]	; (8011374 <vPortValidateInterruptPriority+0x78>)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	4413      	add	r3, r2
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011318:	4b17      	ldr	r3, [pc, #92]	; (8011378 <vPortValidateInterruptPriority+0x7c>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	7afa      	ldrb	r2, [r7, #11]
 801131e:	429a      	cmp	r2, r3
 8011320:	d20c      	bcs.n	801133c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011326:	b672      	cpsid	i
 8011328:	f383 8811 	msr	BASEPRI, r3
 801132c:	f3bf 8f6f 	isb	sy
 8011330:	f3bf 8f4f 	dsb	sy
 8011334:	b662      	cpsie	i
 8011336:	607b      	str	r3, [r7, #4]
}
 8011338:	bf00      	nop
 801133a:	e7fe      	b.n	801133a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801133c:	4b0f      	ldr	r3, [pc, #60]	; (801137c <vPortValidateInterruptPriority+0x80>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011344:	4b0e      	ldr	r3, [pc, #56]	; (8011380 <vPortValidateInterruptPriority+0x84>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	429a      	cmp	r2, r3
 801134a:	d90c      	bls.n	8011366 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801134c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011350:	b672      	cpsid	i
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	b662      	cpsie	i
 8011360:	603b      	str	r3, [r7, #0]
}
 8011362:	bf00      	nop
 8011364:	e7fe      	b.n	8011364 <vPortValidateInterruptPriority+0x68>
	}
 8011366:	bf00      	nop
 8011368:	3714      	adds	r7, #20
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	e000e3f0 	.word	0xe000e3f0
 8011378:	20004144 	.word	0x20004144
 801137c:	e000ed0c 	.word	0xe000ed0c
 8011380:	20004148 	.word	0x20004148

08011384 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b08a      	sub	sp, #40	; 0x28
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801138c:	2300      	movs	r3, #0
 801138e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011390:	f7fe fc52 	bl	800fc38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011394:	4b5b      	ldr	r3, [pc, #364]	; (8011504 <pvPortMalloc+0x180>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d101      	bne.n	80113a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801139c:	f000 f91a 	bl	80115d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80113a0:	4b59      	ldr	r3, [pc, #356]	; (8011508 <pvPortMalloc+0x184>)
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4013      	ands	r3, r2
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f040 8092 	bne.w	80114d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d01f      	beq.n	80113f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80113b4:	2208      	movs	r2, #8
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	4413      	add	r3, r2
 80113ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f003 0307 	and.w	r3, r3, #7
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d016      	beq.n	80113f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f023 0307 	bic.w	r3, r3, #7
 80113cc:	3308      	adds	r3, #8
 80113ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f003 0307 	and.w	r3, r3, #7
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00c      	beq.n	80113f4 <pvPortMalloc+0x70>
	__asm volatile
 80113da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113de:	b672      	cpsid	i
 80113e0:	f383 8811 	msr	BASEPRI, r3
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	f3bf 8f4f 	dsb	sy
 80113ec:	b662      	cpsie	i
 80113ee:	617b      	str	r3, [r7, #20]
}
 80113f0:	bf00      	nop
 80113f2:	e7fe      	b.n	80113f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d06b      	beq.n	80114d2 <pvPortMalloc+0x14e>
 80113fa:	4b44      	ldr	r3, [pc, #272]	; (801150c <pvPortMalloc+0x188>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	429a      	cmp	r2, r3
 8011402:	d866      	bhi.n	80114d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011404:	4b42      	ldr	r3, [pc, #264]	; (8011510 <pvPortMalloc+0x18c>)
 8011406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011408:	4b41      	ldr	r3, [pc, #260]	; (8011510 <pvPortMalloc+0x18c>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801140e:	e004      	b.n	801141a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	429a      	cmp	r2, r3
 8011422:	d903      	bls.n	801142c <pvPortMalloc+0xa8>
 8011424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1f1      	bne.n	8011410 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801142c:	4b35      	ldr	r3, [pc, #212]	; (8011504 <pvPortMalloc+0x180>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011432:	429a      	cmp	r2, r3
 8011434:	d04d      	beq.n	80114d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2208      	movs	r2, #8
 801143c:	4413      	add	r3, r2
 801143e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144a:	685a      	ldr	r2, [r3, #4]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	1ad2      	subs	r2, r2, r3
 8011450:	2308      	movs	r3, #8
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	429a      	cmp	r2, r3
 8011456:	d921      	bls.n	801149c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	4413      	add	r3, r2
 801145e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	f003 0307 	and.w	r3, r3, #7
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00c      	beq.n	8011484 <pvPortMalloc+0x100>
	__asm volatile
 801146a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801146e:	b672      	cpsid	i
 8011470:	f383 8811 	msr	BASEPRI, r3
 8011474:	f3bf 8f6f 	isb	sy
 8011478:	f3bf 8f4f 	dsb	sy
 801147c:	b662      	cpsie	i
 801147e:	613b      	str	r3, [r7, #16]
}
 8011480:	bf00      	nop
 8011482:	e7fe      	b.n	8011482 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011486:	685a      	ldr	r2, [r3, #4]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	1ad2      	subs	r2, r2, r3
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011496:	69b8      	ldr	r0, [r7, #24]
 8011498:	f000 f900 	bl	801169c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801149c:	4b1b      	ldr	r3, [pc, #108]	; (801150c <pvPortMalloc+0x188>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	4a19      	ldr	r2, [pc, #100]	; (801150c <pvPortMalloc+0x188>)
 80114a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114aa:	4b18      	ldr	r3, [pc, #96]	; (801150c <pvPortMalloc+0x188>)
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	4b19      	ldr	r3, [pc, #100]	; (8011514 <pvPortMalloc+0x190>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d203      	bcs.n	80114be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80114b6:	4b15      	ldr	r3, [pc, #84]	; (801150c <pvPortMalloc+0x188>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4a16      	ldr	r2, [pc, #88]	; (8011514 <pvPortMalloc+0x190>)
 80114bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c0:	685a      	ldr	r2, [r3, #4]
 80114c2:	4b11      	ldr	r3, [pc, #68]	; (8011508 <pvPortMalloc+0x184>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	431a      	orrs	r2, r3
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	2200      	movs	r2, #0
 80114d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80114d2:	f7fe fbbf 	bl	800fc54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	f003 0307 	and.w	r3, r3, #7
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00c      	beq.n	80114fa <pvPortMalloc+0x176>
	__asm volatile
 80114e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e4:	b672      	cpsid	i
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	b662      	cpsie	i
 80114f4:	60fb      	str	r3, [r7, #12]
}
 80114f6:	bf00      	nop
 80114f8:	e7fe      	b.n	80114f8 <pvPortMalloc+0x174>
	return pvReturn;
 80114fa:	69fb      	ldr	r3, [r7, #28]
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3728      	adds	r7, #40	; 0x28
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	20028b44 	.word	0x20028b44
 8011508:	20028b50 	.word	0x20028b50
 801150c:	20028b48 	.word	0x20028b48
 8011510:	20028b3c 	.word	0x20028b3c
 8011514:	20028b4c 	.word	0x20028b4c

08011518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d04c      	beq.n	80115c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801152a:	2308      	movs	r3, #8
 801152c:	425b      	negs	r3, r3
 801152e:	697a      	ldr	r2, [r7, #20]
 8011530:	4413      	add	r3, r2
 8011532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	685a      	ldr	r2, [r3, #4]
 801153c:	4b23      	ldr	r3, [pc, #140]	; (80115cc <vPortFree+0xb4>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4013      	ands	r3, r2
 8011542:	2b00      	cmp	r3, #0
 8011544:	d10c      	bne.n	8011560 <vPortFree+0x48>
	__asm volatile
 8011546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154a:	b672      	cpsid	i
 801154c:	f383 8811 	msr	BASEPRI, r3
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	b662      	cpsie	i
 801155a:	60fb      	str	r3, [r7, #12]
}
 801155c:	bf00      	nop
 801155e:	e7fe      	b.n	801155e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00c      	beq.n	8011582 <vPortFree+0x6a>
	__asm volatile
 8011568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156c:	b672      	cpsid	i
 801156e:	f383 8811 	msr	BASEPRI, r3
 8011572:	f3bf 8f6f 	isb	sy
 8011576:	f3bf 8f4f 	dsb	sy
 801157a:	b662      	cpsie	i
 801157c:	60bb      	str	r3, [r7, #8]
}
 801157e:	bf00      	nop
 8011580:	e7fe      	b.n	8011580 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	685a      	ldr	r2, [r3, #4]
 8011586:	4b11      	ldr	r3, [pc, #68]	; (80115cc <vPortFree+0xb4>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4013      	ands	r3, r2
 801158c:	2b00      	cmp	r3, #0
 801158e:	d019      	beq.n	80115c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d115      	bne.n	80115c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	4b0b      	ldr	r3, [pc, #44]	; (80115cc <vPortFree+0xb4>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	43db      	mvns	r3, r3
 80115a2:	401a      	ands	r2, r3
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80115a8:	f7fe fb46 	bl	800fc38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	685a      	ldr	r2, [r3, #4]
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <vPortFree+0xb8>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4413      	add	r3, r2
 80115b6:	4a06      	ldr	r2, [pc, #24]	; (80115d0 <vPortFree+0xb8>)
 80115b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80115ba:	6938      	ldr	r0, [r7, #16]
 80115bc:	f000 f86e 	bl	801169c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80115c0:	f7fe fb48 	bl	800fc54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80115c4:	bf00      	nop
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	20028b50 	.word	0x20028b50
 80115d0:	20028b48 	.word	0x20028b48

080115d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80115da:	4b29      	ldr	r3, [pc, #164]	; (8011680 <prvHeapInit+0xac>)
 80115dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80115de:	4b29      	ldr	r3, [pc, #164]	; (8011684 <prvHeapInit+0xb0>)
 80115e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f003 0307 	and.w	r3, r3, #7
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00c      	beq.n	8011606 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	3307      	adds	r3, #7
 80115f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f023 0307 	bic.w	r3, r3, #7
 80115f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80115fa:	68ba      	ldr	r2, [r7, #8]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	1ad3      	subs	r3, r2, r3
 8011600:	4a20      	ldr	r2, [pc, #128]	; (8011684 <prvHeapInit+0xb0>)
 8011602:	4413      	add	r3, r2
 8011604:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801160a:	4a1f      	ldr	r2, [pc, #124]	; (8011688 <prvHeapInit+0xb4>)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011610:	4b1d      	ldr	r3, [pc, #116]	; (8011688 <prvHeapInit+0xb4>)
 8011612:	2200      	movs	r2, #0
 8011614:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	68ba      	ldr	r2, [r7, #8]
 801161a:	4413      	add	r3, r2
 801161c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801161e:	2208      	movs	r2, #8
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	1a9b      	subs	r3, r3, r2
 8011624:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f023 0307 	bic.w	r3, r3, #7
 801162c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	4a16      	ldr	r2, [pc, #88]	; (801168c <prvHeapInit+0xb8>)
 8011632:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011634:	4b15      	ldr	r3, [pc, #84]	; (801168c <prvHeapInit+0xb8>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2200      	movs	r2, #0
 801163a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801163c:	4b13      	ldr	r3, [pc, #76]	; (801168c <prvHeapInit+0xb8>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2200      	movs	r2, #0
 8011642:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	1ad2      	subs	r2, r2, r3
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011652:	4b0e      	ldr	r3, [pc, #56]	; (801168c <prvHeapInit+0xb8>)
 8011654:	681a      	ldr	r2, [r3, #0]
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	4a0c      	ldr	r2, [pc, #48]	; (8011690 <prvHeapInit+0xbc>)
 8011660:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	4a0b      	ldr	r2, [pc, #44]	; (8011694 <prvHeapInit+0xc0>)
 8011668:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801166a:	4b0b      	ldr	r3, [pc, #44]	; (8011698 <prvHeapInit+0xc4>)
 801166c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011670:	601a      	str	r2, [r3, #0]
}
 8011672:	bf00      	nop
 8011674:	3714      	adds	r7, #20
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	000249f0 	.word	0x000249f0
 8011684:	2000414c 	.word	0x2000414c
 8011688:	20028b3c 	.word	0x20028b3c
 801168c:	20028b44 	.word	0x20028b44
 8011690:	20028b4c 	.word	0x20028b4c
 8011694:	20028b48 	.word	0x20028b48
 8011698:	20028b50 	.word	0x20028b50

0801169c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80116a4:	4b28      	ldr	r3, [pc, #160]	; (8011748 <prvInsertBlockIntoFreeList+0xac>)
 80116a6:	60fb      	str	r3, [r7, #12]
 80116a8:	e002      	b.n	80116b0 <prvInsertBlockIntoFreeList+0x14>
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	60fb      	str	r3, [r7, #12]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d8f7      	bhi.n	80116aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	68ba      	ldr	r2, [r7, #8]
 80116c4:	4413      	add	r3, r2
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d108      	bne.n	80116de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	685a      	ldr	r2, [r3, #4]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	441a      	add	r2, r3
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	68ba      	ldr	r2, [r7, #8]
 80116e8:	441a      	add	r2, r3
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d118      	bne.n	8011724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	4b15      	ldr	r3, [pc, #84]	; (801174c <prvInsertBlockIntoFreeList+0xb0>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d00d      	beq.n	801171a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685a      	ldr	r2, [r3, #4]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	441a      	add	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	601a      	str	r2, [r3, #0]
 8011718:	e008      	b.n	801172c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801171a:	4b0c      	ldr	r3, [pc, #48]	; (801174c <prvInsertBlockIntoFreeList+0xb0>)
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	601a      	str	r2, [r3, #0]
 8011722:	e003      	b.n	801172c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	429a      	cmp	r2, r3
 8011732:	d002      	beq.n	801173a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801173a:	bf00      	nop
 801173c:	3714      	adds	r7, #20
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr
 8011746:	bf00      	nop
 8011748:	20028b3c 	.word	0x20028b3c
 801174c:	20028b44 	.word	0x20028b44

08011750 <atlasMainMenuFaultLedLabels>:
//Draws the labels for the Fault LEDs listed on the main menu display. Based off of the contents of the
//LED_FAULT_LBL defined in the project .h file.

//For new project, adjust name of #defines from Atlas to project name (i.e ATLAS_LED1 --> <ProjectName>_LED1) and add an additional
//ZION eeprom check in the drawMainMenu method in menu.c
void atlasMainMenuFaultLedLabels(){
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
	int i,j;
	int ledFaultAlign=scr_width-90;
 8011756:	4b93      	ldr	r3, [pc, #588]	; (80119a4 <atlasMainMenuFaultLedLabels+0x254>)
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	3b5a      	subs	r3, #90	; 0x5a
 801175c:	617b      	str	r3, [r7, #20]
	int verticalSpacing=22;
 801175e:	2316      	movs	r3, #22
 8011760:	613b      	str	r3, [r7, #16]
	int horizontalSpacing=20;
 8011762:	2314      	movs	r3, #20
 8011764:	60fb      	str	r3, [r7, #12]
	i  = ledFaultAlign;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	60bb      	str	r3, [r7, #8]
	j  = 3;
 801176a:	2303      	movs	r3, #3
 801176c:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	b298      	uxth	r0, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	b29b      	uxth	r3, r3
 8011776:	3b02      	subs	r3, #2
 8011778:	b299      	uxth	r1, r3
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	b29b      	uxth	r3, r3
 801177e:	330c      	adds	r3, #12
 8011780:	b29a      	uxth	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	b29b      	uxth	r3, r3
 8011786:	3308      	adds	r3, #8
 8011788:	b29b      	uxth	r3, r3
 801178a:	f7ef fde5 	bl	8001358 <LCD_FillRect>
	i+=20;
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	3314      	adds	r3, #20
 8011792:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED1_FAULT_LBL, fnt7x10);
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	b298      	uxth	r0, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	b299      	uxth	r1, r3
 801179c:	4b82      	ldr	r3, [pc, #520]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 801179e:	4a83      	ldr	r2, [pc, #524]	; (80119ac <atlasMainMenuFaultLedLabels+0x25c>)
 80117a0:	f7f0 f928 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	4413      	add	r3, r2
 80117aa:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	b298      	uxth	r0, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	3b02      	subs	r3, #2
 80117ba:	b299      	uxth	r1, r3
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	b29b      	uxth	r3, r3
 80117c0:	330c      	adds	r3, #12
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	3308      	adds	r3, #8
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	f7ef fdc4 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80117d0:	68ba      	ldr	r2, [r7, #8]
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	4413      	add	r3, r2
 80117d6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED2_FAULT_LBL, fnt7x10);
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	b298      	uxth	r0, r3
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	b299      	uxth	r1, r3
 80117e0:	4b71      	ldr	r3, [pc, #452]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 80117e2:	4a73      	ldr	r2, [pc, #460]	; (80119b0 <atlasMainMenuFaultLedLabels+0x260>)
 80117e4:	f7f0 f906 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	4413      	add	r3, r2
 80117f2:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	b298      	uxth	r0, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	3b02      	subs	r3, #2
 80117fe:	b299      	uxth	r1, r3
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	b29b      	uxth	r3, r3
 8011804:	330c      	adds	r3, #12
 8011806:	b29a      	uxth	r2, r3
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	b29b      	uxth	r3, r3
 801180c:	3308      	adds	r3, #8
 801180e:	b29b      	uxth	r3, r3
 8011810:	f7ef fda2 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	4413      	add	r3, r2
 801181a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED3_FAULT_LBL, fnt7x10);
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	b298      	uxth	r0, r3
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	b299      	uxth	r1, r3
 8011824:	4b60      	ldr	r3, [pc, #384]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 8011826:	4a63      	ldr	r2, [pc, #396]	; (80119b4 <atlasMainMenuFaultLedLabels+0x264>)
 8011828:	f7f0 f8e4 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	4413      	add	r3, r2
 8011832:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	b298      	uxth	r0, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	b29b      	uxth	r3, r3
 8011840:	3b02      	subs	r3, #2
 8011842:	b299      	uxth	r1, r3
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	b29b      	uxth	r3, r3
 8011848:	330c      	adds	r3, #12
 801184a:	b29a      	uxth	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	b29b      	uxth	r3, r3
 8011850:	3308      	adds	r3, #8
 8011852:	b29b      	uxth	r3, r3
 8011854:	f7ef fd80 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	4413      	add	r3, r2
 801185e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED4_FAULT_LBL, fnt7x10);
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	b298      	uxth	r0, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	b299      	uxth	r1, r3
 8011868:	4b4f      	ldr	r3, [pc, #316]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 801186a:	4a53      	ldr	r2, [pc, #332]	; (80119b8 <atlasMainMenuFaultLedLabels+0x268>)
 801186c:	f7f0 f8c2 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	4413      	add	r3, r2
 801187a:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	b298      	uxth	r0, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	b29b      	uxth	r3, r3
 8011884:	3b02      	subs	r3, #2
 8011886:	b299      	uxth	r1, r3
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	b29b      	uxth	r3, r3
 801188c:	330c      	adds	r3, #12
 801188e:	b29a      	uxth	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	b29b      	uxth	r3, r3
 8011894:	3308      	adds	r3, #8
 8011896:	b29b      	uxth	r3, r3
 8011898:	f7ef fd5e 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801189c:	68ba      	ldr	r2, [r7, #8]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	4413      	add	r3, r2
 80118a2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED5_FAULT_LBL, fnt7x10);
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	b298      	uxth	r0, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	b299      	uxth	r1, r3
 80118ac:	4b3e      	ldr	r3, [pc, #248]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 80118ae:	4a43      	ldr	r2, [pc, #268]	; (80119bc <atlasMainMenuFaultLedLabels+0x26c>)
 80118b0:	f7f0 f8a0 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	4413      	add	r3, r2
 80118ba:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	b298      	uxth	r0, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	3b02      	subs	r3, #2
 80118ca:	b299      	uxth	r1, r3
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	330c      	adds	r3, #12
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	3308      	adds	r3, #8
 80118da:	b29b      	uxth	r3, r3
 80118dc:	f7ef fd3c 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80118e0:	68ba      	ldr	r2, [r7, #8]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	4413      	add	r3, r2
 80118e6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED6_FAULT_LBL, fnt7x10);
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	b298      	uxth	r0, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	b299      	uxth	r1, r3
 80118f0:	4b2d      	ldr	r3, [pc, #180]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 80118f2:	4a33      	ldr	r2, [pc, #204]	; (80119c0 <atlasMainMenuFaultLedLabels+0x270>)
 80118f4:	f7f0 f87e 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	4413      	add	r3, r2
 8011902:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	b298      	uxth	r0, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	b29b      	uxth	r3, r3
 801190c:	3b02      	subs	r3, #2
 801190e:	b299      	uxth	r1, r3
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	b29b      	uxth	r3, r3
 8011914:	330c      	adds	r3, #12
 8011916:	b29a      	uxth	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	b29b      	uxth	r3, r3
 801191c:	3308      	adds	r3, #8
 801191e:	b29b      	uxth	r3, r3
 8011920:	f7ef fd1a 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	4413      	add	r3, r2
 801192a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED7_FAULT_LBL, fnt7x10);
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	b298      	uxth	r0, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	b299      	uxth	r1, r3
 8011934:	4b1c      	ldr	r3, [pc, #112]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 8011936:	4a23      	ldr	r2, [pc, #140]	; (80119c4 <atlasMainMenuFaultLedLabels+0x274>)
 8011938:	f7f0 f85c 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	4413      	add	r3, r2
 8011942:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	b298      	uxth	r0, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	b29b      	uxth	r3, r3
 8011950:	3b02      	subs	r3, #2
 8011952:	b299      	uxth	r1, r3
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	b29b      	uxth	r3, r3
 8011958:	330c      	adds	r3, #12
 801195a:	b29a      	uxth	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	b29b      	uxth	r3, r3
 8011960:	3308      	adds	r3, #8
 8011962:	b29b      	uxth	r3, r3
 8011964:	f7ef fcf8 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8011968:	68ba      	ldr	r2, [r7, #8]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	4413      	add	r3, r2
 801196e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED8_FAULT_LBL, fnt7x10);
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	b298      	uxth	r0, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	b299      	uxth	r1, r3
 8011978:	4b0b      	ldr	r3, [pc, #44]	; (80119a8 <atlasMainMenuFaultLedLabels+0x258>)
 801197a:	4a13      	ldr	r2, [pc, #76]	; (80119c8 <atlasMainMenuFaultLedLabels+0x278>)
 801197c:	f7f0 f83a 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	4413      	add	r3, r2
 801198a:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	b298      	uxth	r0, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	b29b      	uxth	r3, r3
 8011994:	3b02      	subs	r3, #2
 8011996:	b299      	uxth	r1, r3
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	b29b      	uxth	r3, r3
 801199c:	330c      	adds	r3, #12
 801199e:	b29a      	uxth	r2, r3
 80119a0:	e014      	b.n	80119cc <atlasMainMenuFaultLedLabels+0x27c>
 80119a2:	bf00      	nop
 80119a4:	20028b62 	.word	0x20028b62
 80119a8:	0801b958 	.word	0x0801b958
 80119ac:	0801aa20 	.word	0x0801aa20
 80119b0:	0801aa2c 	.word	0x0801aa2c
 80119b4:	0801aa38 	.word	0x0801aa38
 80119b8:	0801aa44 	.word	0x0801aa44
 80119bc:	0801aa50 	.word	0x0801aa50
 80119c0:	0801aa5c 	.word	0x0801aa5c
 80119c4:	0801aa64 	.word	0x0801aa64
 80119c8:	0801aa6c 	.word	0x0801aa6c
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	3308      	adds	r3, #8
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	f7ef fcc0 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	4413      	add	r3, r2
 80119de:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, ATLAS_LED9_FAULT_LBL, fnt7x10);
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	b298      	uxth	r0, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	b299      	uxth	r1, r3
 80119e8:	4b03      	ldr	r3, [pc, #12]	; (80119f8 <atlasMainMenuFaultLedLabels+0x2a8>)
 80119ea:	4a04      	ldr	r2, [pc, #16]	; (80119fc <atlasMainMenuFaultLedLabels+0x2ac>)
 80119ec:	f7f0 f802 	bl	80019f4 <LCD_PutStr>
}
 80119f0:	bf00      	nop
 80119f2:	3718      	adds	r7, #24
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}
 80119f8:	0801b958 	.word	0x0801b958
 80119fc:	0801aa74 	.word	0x0801aa74

08011a00 <atlasMainMenuBootModes>:
//Draws Boot state in the main menu header. Based off of
//the ATLAS_MODEs defined in the project .h file.

//For new project, adjust name of #defines from Atlas to project name (i.e ATLAS_MAIN --> <ProjectName>_MAIN) and add an additional
//ZION eeprom check in the drawMainMenu method in menu.c
void atlasMainMenuBootModes(int i, int j){
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
	switch(bootButtons.bootMode){
 8011a0a:	4b26      	ldr	r3, [pc, #152]	; (8011aa4 <atlasMainMenuBootModes+0xa4>)
 8011a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a0e:	2b05      	cmp	r3, #5
 8011a10:	d844      	bhi.n	8011a9c <atlasMainMenuBootModes+0x9c>
 8011a12:	a201      	add	r2, pc, #4	; (adr r2, 8011a18 <atlasMainMenuBootModes+0x18>)
 8011a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a18:	08011a31 	.word	0x08011a31
 8011a1c:	08011a43 	.word	0x08011a43
 8011a20:	08011a55 	.word	0x08011a55
 8011a24:	08011a67 	.word	0x08011a67
 8011a28:	08011a8b 	.word	0x08011a8b
 8011a2c:	08011a79 	.word	0x08011a79
	case UNINITIALIZED:
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	b298      	uxth	r0, r3
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	b299      	uxth	r1, r3
 8011a38:	4b1b      	ldr	r3, [pc, #108]	; (8011aa8 <atlasMainMenuBootModes+0xa8>)
 8011a3a:	4a1c      	ldr	r2, [pc, #112]	; (8011aac <atlasMainMenuBootModes+0xac>)
 8011a3c:	f7ef ffda 	bl	80019f4 <LCD_PutStr>
		break;
 8011a40:	e02c      	b.n	8011a9c <atlasMainMenuBootModes+0x9c>
	case STANDARD:
		LCD_PutStr(i, j, ATLAS_MAIN_STD_MODE, fnt7x10);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	b298      	uxth	r0, r3
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	b299      	uxth	r1, r3
 8011a4a:	4b17      	ldr	r3, [pc, #92]	; (8011aa8 <atlasMainMenuBootModes+0xa8>)
 8011a4c:	4a18      	ldr	r2, [pc, #96]	; (8011ab0 <atlasMainMenuBootModes+0xb0>)
 8011a4e:	f7ef ffd1 	bl	80019f4 <LCD_PutStr>
		break;
 8011a52:	e023      	b.n	8011a9c <atlasMainMenuBootModes+0x9c>
	case UEFI:
		LCD_PutStr(i, j, ATLAS_MAIN_UEFI_MODE, fnt7x10);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	b298      	uxth	r0, r3
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	b299      	uxth	r1, r3
 8011a5c:	4b12      	ldr	r3, [pc, #72]	; (8011aa8 <atlasMainMenuBootModes+0xa8>)
 8011a5e:	4a15      	ldr	r2, [pc, #84]	; (8011ab4 <atlasMainMenuBootModes+0xb4>)
 8011a60:	f7ef ffc8 	bl	80019f4 <LCD_PutStr>
		break;
 8011a64:	e01a      	b.n	8011a9c <atlasMainMenuBootModes+0x9c>
	case EDL:
		LCD_PutStr(i, j, ATLAS_MAIN_EDL_MODE, fnt7x10);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	b298      	uxth	r0, r3
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	b299      	uxth	r1, r3
 8011a6e:	4b0e      	ldr	r3, [pc, #56]	; (8011aa8 <atlasMainMenuBootModes+0xa8>)
 8011a70:	4a11      	ldr	r2, [pc, #68]	; (8011ab8 <atlasMainMenuBootModes+0xb8>)
 8011a72:	f7ef ffbf 	bl	80019f4 <LCD_PutStr>
		break;
 8011a76:	e011      	b.n	8011a9c <atlasMainMenuBootModes+0x9c>
	case MASS_STORAGE:
		LCD_PutStr(i, j, ATLAS_MAIN_MASS_STORAGE_MODE, fnt7x10);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	b298      	uxth	r0, r3
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	b299      	uxth	r1, r3
 8011a80:	4b09      	ldr	r3, [pc, #36]	; (8011aa8 <atlasMainMenuBootModes+0xa8>)
 8011a82:	4a0e      	ldr	r2, [pc, #56]	; (8011abc <atlasMainMenuBootModes+0xbc>)
 8011a84:	f7ef ffb6 	bl	80019f4 <LCD_PutStr>
		break;
 8011a88:	e008      	b.n	8011a9c <atlasMainMenuBootModes+0x9c>
	case RECOVERY:
		LCD_PutStr(i, j, ATLAS_MAIN_RECOVERY_MODE, fnt7x10);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	b298      	uxth	r0, r3
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	b299      	uxth	r1, r3
 8011a92:	4b05      	ldr	r3, [pc, #20]	; (8011aa8 <atlasMainMenuBootModes+0xa8>)
 8011a94:	4a0a      	ldr	r2, [pc, #40]	; (8011ac0 <atlasMainMenuBootModes+0xc0>)
 8011a96:	f7ef ffad 	bl	80019f4 <LCD_PutStr>
		break;
 8011a9a:	bf00      	nop
	}
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	20003360 	.word	0x20003360
 8011aa8:	0801b958 	.word	0x0801b958
 8011aac:	0801aa80 	.word	0x0801aa80
 8011ab0:	0801aa84 	.word	0x0801aa84
 8011ab4:	0801aa88 	.word	0x0801aa88
 8011ab8:	0801aa90 	.word	0x0801aa90
 8011abc:	0801aa94 	.word	0x0801aa94
 8011ac0:	0801aa9c 	.word	0x0801aa9c

08011ac4 <atlasBootMenuBootModes>:
//boot process has been finished.
//Based off of the ATLAS_MODEs defined in the project .h file.

//For new project, adjust name of #defines from Atlas to project name (i.e ATLAS_MAIN --> <ProjectName>_MAIN) and add an additional
//ZION eeprom check in the drawMainMenu method in menu.c
int atlasBootMenuBootModes(int indicator, int previousMenu, int menu, int button){
 8011ac4:	b590      	push	{r4, r7, lr}
 8011ac6:	b08d      	sub	sp, #52	; 0x34
 8011ac8:	af02      	add	r7, sp, #8
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	603b      	str	r3, [r7, #0]
	int j=45;
 8011ad2:	232d      	movs	r3, #45	; 0x2d
 8011ad4:	627b      	str	r3, [r7, #36]	; 0x24
	int i=5;
 8011ad6:	2305      	movs	r3, #5
 8011ad8:	61fb      	str	r3, [r7, #28]
	int bootModeSeparation = 20;
 8011ada:	2314      	movs	r3, #20
 8011adc:	61bb      	str	r3, [r7, #24]
	int arrowLocationAdjustment = 17;
 8011ade:	2311      	movs	r3, #17
 8011ae0:	617b      	str	r3, [r7, #20]
	int indentAlignment=50;
 8011ae2:	2332      	movs	r3, #50	; 0x32
 8011ae4:	613b      	str	r3, [r7, #16]
	LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	b298      	uxth	r0, r3
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	b299      	uxth	r1, r3
 8011aee:	4b9d      	ldr	r3, [pc, #628]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011af0:	4a9d      	ldr	r2, [pc, #628]	; (8011d68 <atlasBootMenuBootModes+0x2a4>)
 8011af2:	f7ef ff7f 	bl	80019f4 <LCD_PutStr>
	j+=30;
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	331e      	adds	r3, #30
 8011afa:	627b      	str	r3, [r7, #36]	; 0x24
	i=42;
 8011afc:	232a      	movs	r3, #42	; 0x2a
 8011afe:	61fb      	str	r3, [r7, #28]
	LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	b298      	uxth	r0, r3
 8011b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b06:	b299      	uxth	r1, r3
 8011b08:	4b96      	ldr	r3, [pc, #600]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011b0a:	4a98      	ldr	r2, [pc, #608]	; (8011d6c <atlasBootMenuBootModes+0x2a8>)
 8011b0c:	f7ef ff72 	bl	80019f4 <LCD_PutStr>
	i=indentAlignment;
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	61fb      	str	r3, [r7, #28]
	j+=bootModeSeparation;
 8011b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	4413      	add	r3, r2
 8011b1a:	627b      	str	r3, [r7, #36]	; 0x24
	LCD_PutStr(i, j, ATLAS_BOOT_STD_MODE, fnt7x10);
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	b298      	uxth	r0, r3
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	b299      	uxth	r1, r3
 8011b24:	4b8f      	ldr	r3, [pc, #572]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011b26:	4a92      	ldr	r2, [pc, #584]	; (8011d70 <atlasBootMenuBootModes+0x2ac>)
 8011b28:	f7ef ff64 	bl	80019f4 <LCD_PutStr>
	j+=bootModeSeparation;
 8011b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	4413      	add	r3, r2
 8011b32:	627b      	str	r3, [r7, #36]	; 0x24
	LCD_PutStr(i, j, ATLAS_BOOT_EDL_MODE, fnt7x10);
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	b298      	uxth	r0, r3
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	b299      	uxth	r1, r3
 8011b3c:	4b89      	ldr	r3, [pc, #548]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011b3e:	4a8d      	ldr	r2, [pc, #564]	; (8011d74 <atlasBootMenuBootModes+0x2b0>)
 8011b40:	f7ef ff58 	bl	80019f4 <LCD_PutStr>
	j+=bootModeSeparation;
 8011b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	4413      	add	r3, r2
 8011b4a:	627b      	str	r3, [r7, #36]	; 0x24
	LCD_PutStr(i, j, ATLAS_BOOT_RECOVERY_MODE, fnt7x10);
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	b298      	uxth	r0, r3
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	b299      	uxth	r1, r3
 8011b54:	4b83      	ldr	r3, [pc, #524]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011b56:	4a88      	ldr	r2, [pc, #544]	; (8011d78 <atlasBootMenuBootModes+0x2b4>)
 8011b58:	f7ef ff4c 	bl	80019f4 <LCD_PutStr>
	j+=bootModeSeparation;
 8011b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	4413      	add	r3, r2
 8011b62:	627b      	str	r3, [r7, #36]	; 0x24
	LCD_PutStr(i, j, ATLAS_BOOT_MASS_STORAGE_MODE, fnt7x10);
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	b298      	uxth	r0, r3
 8011b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6a:	b299      	uxth	r1, r3
 8011b6c:	4b7d      	ldr	r3, [pc, #500]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011b6e:	4a83      	ldr	r2, [pc, #524]	; (8011d7c <atlasBootMenuBootModes+0x2b8>)
 8011b70:	f7ef ff40 	bl	80019f4 <LCD_PutStr>
	j+=bootModeSeparation;
 8011b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	4413      	add	r3, r2
 8011b7a:	627b      	str	r3, [r7, #36]	; 0x24
	LCD_PutStr(i, j, ATLAS_BOOT_UEFI_MODE, fnt7x10);
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	b298      	uxth	r0, r3
 8011b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b82:	b299      	uxth	r1, r3
 8011b84:	4b77      	ldr	r3, [pc, #476]	; (8011d64 <atlasBootMenuBootModes+0x2a0>)
 8011b86:	4a7e      	ldr	r2, [pc, #504]	; (8011d80 <atlasBootMenuBootModes+0x2bc>)
 8011b88:	f7ef ff34 	bl	80019f4 <LCD_PutStr>
	i-= arrowLocationAdjustment;
 8011b8c:	69fa      	ldr	r2, [r7, #28]
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	61fb      	str	r3, [r7, #28]
	if(setIndicator==0){
 8011b94:	4b7b      	ldr	r3, [pc, #492]	; (8011d84 <atlasBootMenuBootModes+0x2c0>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f040 8132 	bne.w	8011e02 <atlasBootMenuBootModes+0x33e>
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	2b04      	cmp	r3, #4
 8011ba4:	f200 812a 	bhi.w	8011dfc <atlasBootMenuBootModes+0x338>
 8011ba8:	a201      	add	r2, pc, #4	; (adr r2, 8011bb0 <atlasBootMenuBootModes+0xec>)
 8011baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bae:	bf00      	nop
 8011bb0:	08011bc5 	.word	0x08011bc5
 8011bb4:	08011c2d 	.word	0x08011c2d
 8011bb8:	08011c95 	.word	0x08011c95
 8011bbc:	08011cfd 	.word	0x08011cfd
 8011bc0:	08011d95 	.word	0x08011d95
		switch(indicator){
		case FIRST:
		{
			j=95;
 8011bc4:	235f      	movs	r3, #95	; 0x5f
 8011bc6:	627b      	str	r3, [r7, #36]	; 0x24
			if((button == SEL) & (previousMenu == menu)){
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	2b04      	cmp	r3, #4
 8011bcc:	bf0c      	ite	eq
 8011bce:	2301      	moveq	r3, #1
 8011bd0:	2300      	movne	r3, #0
 8011bd2:	b2da      	uxtb	r2, r3
 8011bd4:	68b9      	ldr	r1, [r7, #8]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4299      	cmp	r1, r3
 8011bda:	bf0c      	ite	eq
 8011bdc:	2301      	moveq	r3, #1
 8011bde:	2300      	movne	r3, #0
 8011be0:	b2db      	uxtb	r3, r3
 8011be2:	4013      	ands	r3, r2
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	f000 8206 	beq.w	8011ff8 <atlasBootMenuBootModes+0x534>
				i=140;
 8011bec:	238c      	movs	r3, #140	; 0x8c
 8011bee:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	b298      	uxth	r0, r3
 8011bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	3305      	adds	r3, #5
 8011bfa:	b299      	uxth	r1, r3
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	2203      	movs	r2, #3
 8011c00:	f7f0 f848 	bl	8001c94 <drawUpDownArrow>
				bootButtons.btn0=1;
 8011c04:	4b60      	ldr	r3, [pc, #384]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011c06:	2201      	movs	r2, #1
 8011c08:	605a      	str	r2, [r3, #4]
				bootButtons.bootModeSet=1;
 8011c0a:	4b5f      	ldr	r3, [pc, #380]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	601a      	str	r2, [r3, #0]
				setIndicator=1;
 8011c10:	4b5c      	ldr	r3, [pc, #368]	; (8011d84 <atlasBootMenuBootModes+0x2c0>)
 8011c12:	2201      	movs	r2, #1
 8011c14:	601a      	str	r2, [r3, #0]
				timeNow = (HAL_GetTick()/1000);
 8011c16:	f7f6 f841 	bl	8007c9c <HAL_GetTick>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	4a5b      	ldr	r2, [pc, #364]	; (8011d8c <atlasBootMenuBootModes+0x2c8>)
 8011c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8011c22:	099b      	lsrs	r3, r3, #6
 8011c24:	461a      	mov	r2, r3
 8011c26:	4b5a      	ldr	r3, [pc, #360]	; (8011d90 <atlasBootMenuBootModes+0x2cc>)
 8011c28:	601a      	str	r2, [r3, #0]
			}

			break;
 8011c2a:	e1e5      	b.n	8011ff8 <atlasBootMenuBootModes+0x534>
		}
		case SECOND:
		{
			j=115;
 8011c2c:	2373      	movs	r3, #115	; 0x73
 8011c2e:	627b      	str	r3, [r7, #36]	; 0x24
			if((button == SEL) & (previousMenu == menu)){
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	2b04      	cmp	r3, #4
 8011c34:	bf0c      	ite	eq
 8011c36:	2301      	moveq	r3, #1
 8011c38:	2300      	movne	r3, #0
 8011c3a:	b2da      	uxtb	r2, r3
 8011c3c:	68b9      	ldr	r1, [r7, #8]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4299      	cmp	r1, r3
 8011c42:	bf0c      	ite	eq
 8011c44:	2301      	moveq	r3, #1
 8011c46:	2300      	movne	r3, #0
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f000 81d4 	beq.w	8011ffc <atlasBootMenuBootModes+0x538>
				i=220;
 8011c54:	23dc      	movs	r3, #220	; 0xdc
 8011c56:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	b298      	uxth	r0, r3
 8011c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	3305      	adds	r3, #5
 8011c62:	b299      	uxth	r1, r3
 8011c64:	2303      	movs	r3, #3
 8011c66:	2203      	movs	r2, #3
 8011c68:	f7f0 f814 	bl	8001c94 <drawUpDownArrow>
				bootButtons.edl_sw=1;
 8011c6c:	4b46      	ldr	r3, [pc, #280]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011c6e:	2201      	movs	r2, #1
 8011c70:	61da      	str	r2, [r3, #28]
				bootButtons.bootModeSet=1;
 8011c72:	4b45      	ldr	r3, [pc, #276]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011c74:	2201      	movs	r2, #1
 8011c76:	601a      	str	r2, [r3, #0]
				setIndicator=2;
 8011c78:	4b42      	ldr	r3, [pc, #264]	; (8011d84 <atlasBootMenuBootModes+0x2c0>)
 8011c7a:	2202      	movs	r2, #2
 8011c7c:	601a      	str	r2, [r3, #0]
				timeNow = (HAL_GetTick()/1000);
 8011c7e:	f7f6 f80d 	bl	8007c9c <HAL_GetTick>
 8011c82:	4603      	mov	r3, r0
 8011c84:	4a41      	ldr	r2, [pc, #260]	; (8011d8c <atlasBootMenuBootModes+0x2c8>)
 8011c86:	fba2 2303 	umull	r2, r3, r2, r3
 8011c8a:	099b      	lsrs	r3, r3, #6
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	4b40      	ldr	r3, [pc, #256]	; (8011d90 <atlasBootMenuBootModes+0x2cc>)
 8011c90:	601a      	str	r2, [r3, #0]
			}

			break;
 8011c92:	e1b3      	b.n	8011ffc <atlasBootMenuBootModes+0x538>
		}
		case THIRD:
		{
			j=135;
 8011c94:	2387      	movs	r3, #135	; 0x87
 8011c96:	627b      	str	r3, [r7, #36]	; 0x24
			if((button == SEL) & (previousMenu == menu)){
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	2b04      	cmp	r3, #4
 8011c9c:	bf0c      	ite	eq
 8011c9e:	2301      	moveq	r3, #1
 8011ca0:	2300      	movne	r3, #0
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	68b9      	ldr	r1, [r7, #8]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4299      	cmp	r1, r3
 8011caa:	bf0c      	ite	eq
 8011cac:	2301      	moveq	r3, #1
 8011cae:	2300      	movne	r3, #0
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	4013      	ands	r3, r2
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 81a2 	beq.w	8012000 <atlasBootMenuBootModes+0x53c>
				i=130;
 8011cbc:	2382      	movs	r3, #130	; 0x82
 8011cbe:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8011cc0:	69fb      	ldr	r3, [r7, #28]
 8011cc2:	b298      	uxth	r0, r3
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	3305      	adds	r3, #5
 8011cca:	b299      	uxth	r1, r3
 8011ccc:	2303      	movs	r3, #3
 8011cce:	2203      	movs	r2, #3
 8011cd0:	f7ef ffe0 	bl	8001c94 <drawUpDownArrow>
				bootButtons.btn1=1;
 8011cd4:	4b2c      	ldr	r3, [pc, #176]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	609a      	str	r2, [r3, #8]
				bootButtons.bootModeSet=1;
 8011cda:	4b2b      	ldr	r3, [pc, #172]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011cdc:	2201      	movs	r2, #1
 8011cde:	601a      	str	r2, [r3, #0]
				setIndicator=3;
 8011ce0:	4b28      	ldr	r3, [pc, #160]	; (8011d84 <atlasBootMenuBootModes+0x2c0>)
 8011ce2:	2203      	movs	r2, #3
 8011ce4:	601a      	str	r2, [r3, #0]
				timeNow = (HAL_GetTick()/1000);
 8011ce6:	f7f5 ffd9 	bl	8007c9c <HAL_GetTick>
 8011cea:	4603      	mov	r3, r0
 8011cec:	4a27      	ldr	r2, [pc, #156]	; (8011d8c <atlasBootMenuBootModes+0x2c8>)
 8011cee:	fba2 2303 	umull	r2, r3, r2, r3
 8011cf2:	099b      	lsrs	r3, r3, #6
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	4b26      	ldr	r3, [pc, #152]	; (8011d90 <atlasBootMenuBootModes+0x2cc>)
 8011cf8:	601a      	str	r2, [r3, #0]
			}

			break;
 8011cfa:	e181      	b.n	8012000 <atlasBootMenuBootModes+0x53c>
		}
		case FOURTH:
		{
			j=155;
 8011cfc:	239b      	movs	r3, #155	; 0x9b
 8011cfe:	627b      	str	r3, [r7, #36]	; 0x24
			if((button == SEL) & (previousMenu == menu)){
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	2b04      	cmp	r3, #4
 8011d04:	bf0c      	ite	eq
 8011d06:	2301      	moveq	r3, #1
 8011d08:	2300      	movne	r3, #0
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	68b9      	ldr	r1, [r7, #8]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4299      	cmp	r1, r3
 8011d12:	bf0c      	ite	eq
 8011d14:	2301      	moveq	r3, #1
 8011d16:	2300      	movne	r3, #0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	4013      	ands	r3, r2
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f000 8170 	beq.w	8012004 <atlasBootMenuBootModes+0x540>
				i=160;
 8011d24:	23a0      	movs	r3, #160	; 0xa0
 8011d26:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	b298      	uxth	r0, r3
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	3305      	adds	r3, #5
 8011d32:	b299      	uxth	r1, r3
 8011d34:	2303      	movs	r3, #3
 8011d36:	2203      	movs	r2, #3
 8011d38:	f7ef ffac 	bl	8001c94 <drawUpDownArrow>
				bootButtons.btn2=1;
 8011d3c:	4b12      	ldr	r3, [pc, #72]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011d3e:	2201      	movs	r2, #1
 8011d40:	60da      	str	r2, [r3, #12]
				bootButtons.bootModeSet=1;
 8011d42:	4b11      	ldr	r3, [pc, #68]	; (8011d88 <atlasBootMenuBootModes+0x2c4>)
 8011d44:	2201      	movs	r2, #1
 8011d46:	601a      	str	r2, [r3, #0]
				setIndicator=4;
 8011d48:	4b0e      	ldr	r3, [pc, #56]	; (8011d84 <atlasBootMenuBootModes+0x2c0>)
 8011d4a:	2204      	movs	r2, #4
 8011d4c:	601a      	str	r2, [r3, #0]
				timeNow = (HAL_GetTick()/1000);
 8011d4e:	f7f5 ffa5 	bl	8007c9c <HAL_GetTick>
 8011d52:	4603      	mov	r3, r0
 8011d54:	4a0d      	ldr	r2, [pc, #52]	; (8011d8c <atlasBootMenuBootModes+0x2c8>)
 8011d56:	fba2 2303 	umull	r2, r3, r2, r3
 8011d5a:	099b      	lsrs	r3, r3, #6
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	4b0c      	ldr	r3, [pc, #48]	; (8011d90 <atlasBootMenuBootModes+0x2cc>)
 8011d60:	601a      	str	r2, [r3, #0]
			}

			break;
 8011d62:	e14f      	b.n	8012004 <atlasBootMenuBootModes+0x540>
 8011d64:	0801b958 	.word	0x0801b958
 8011d68:	0801aaa0 	.word	0x0801aaa0
 8011d6c:	0801aad0 	.word	0x0801aad0
 8011d70:	0801aaec 	.word	0x0801aaec
 8011d74:	0801aaf8 	.word	0x0801aaf8
 8011d78:	0801ab0c 	.word	0x0801ab0c
 8011d7c:	0801ab18 	.word	0x0801ab18
 8011d80:	0801aa88 	.word	0x0801aa88
 8011d84:	2000342c 	.word	0x2000342c
 8011d88:	20003360 	.word	0x20003360
 8011d8c:	10624dd3 	.word	0x10624dd3
 8011d90:	20028b54 	.word	0x20028b54
		}
		case FIFTH:
		{
			j=175;
 8011d94:	23af      	movs	r3, #175	; 0xaf
 8011d96:	627b      	str	r3, [r7, #36]	; 0x24
			if((button == SEL) & (previousMenu == menu)){
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	2b04      	cmp	r3, #4
 8011d9c:	bf0c      	ite	eq
 8011d9e:	2301      	moveq	r3, #1
 8011da0:	2300      	movne	r3, #0
 8011da2:	b2da      	uxtb	r2, r3
 8011da4:	68b9      	ldr	r1, [r7, #8]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	4299      	cmp	r1, r3
 8011daa:	bf0c      	ite	eq
 8011dac:	2301      	moveq	r3, #1
 8011dae:	2300      	movne	r3, #0
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	4013      	ands	r3, r2
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f000 8126 	beq.w	8012008 <atlasBootMenuBootModes+0x544>
				i=100;
 8011dbc:	2364      	movs	r3, #100	; 0x64
 8011dbe:	61fb      	str	r3, [r7, #28]
				drawUpDownArrow(i, j+5, 3, 3);
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	b298      	uxth	r0, r3
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	3305      	adds	r3, #5
 8011dca:	b299      	uxth	r1, r3
 8011dcc:	2303      	movs	r3, #3
 8011dce:	2203      	movs	r2, #3
 8011dd0:	f7ef ff60 	bl	8001c94 <drawUpDownArrow>
				bootButtons.btn3=1;
 8011dd4:	4b94      	ldr	r3, [pc, #592]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011dd6:	2201      	movs	r2, #1
 8011dd8:	611a      	str	r2, [r3, #16]
				bootButtons.bootModeSet=1;
 8011dda:	4b93      	ldr	r3, [pc, #588]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011ddc:	2201      	movs	r2, #1
 8011dde:	601a      	str	r2, [r3, #0]
				setIndicator=5;
 8011de0:	4b92      	ldr	r3, [pc, #584]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011de2:	2205      	movs	r2, #5
 8011de4:	601a      	str	r2, [r3, #0]
				timeNow = (HAL_GetTick()/1000);
 8011de6:	f7f5 ff59 	bl	8007c9c <HAL_GetTick>
 8011dea:	4603      	mov	r3, r0
 8011dec:	4a90      	ldr	r2, [pc, #576]	; (8012030 <atlasBootMenuBootModes+0x56c>)
 8011dee:	fba2 2303 	umull	r2, r3, r2, r3
 8011df2:	099b      	lsrs	r3, r3, #6
 8011df4:	461a      	mov	r2, r3
 8011df6:	4b8f      	ldr	r3, [pc, #572]	; (8012034 <atlasBootMenuBootModes+0x570>)
 8011df8:	601a      	str	r2, [r3, #0]
			}

			break;
 8011dfa:	e105      	b.n	8012008 <atlasBootMenuBootModes+0x544>
		}
		default:
		{
			j=95;
 8011dfc:	235f      	movs	r3, #95	; 0x5f
 8011dfe:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8011e00:	e10d      	b.n	801201e <atlasBootMenuBootModes+0x55a>
		}
		}
	}

	else{
		i = 230;
 8011e02:	23e6      	movs	r3, #230	; 0xe6
 8011e04:	61fb      	str	r3, [r7, #28]
		j = 120;
 8011e06:	2378      	movs	r3, #120	; 0x78
 8011e08:	627b      	str	r3, [r7, #36]	; 0x24
		int timeLeft=0;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	623b      	str	r3, [r7, #32]
		//add a small countdown so that people don't get too bored. The times below are captured experimentally based off TRIDENT
		//booting to OS is simplier/quicker as we don't need to hold other buttons until the system recognizes what happened.
		if(bootButtons.bootMode==0){
 8011e0e:	4b86      	ldr	r3, [pc, #536]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d11f      	bne.n	8011e56 <atlasBootMenuBootModes+0x392>
			if(setIndicator==FIRST){
 8011e16:	4b85      	ldr	r3, [pc, #532]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d10d      	bne.n	8011e3a <atlasBootMenuBootModes+0x376>
				timeLeft = (timeNow+2)- (HAL_GetTick()/1000);
 8011e1e:	4b85      	ldr	r3, [pc, #532]	; (8012034 <atlasBootMenuBootModes+0x570>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	461c      	mov	r4, r3
 8011e24:	f7f5 ff3a 	bl	8007c9c <HAL_GetTick>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	4a81      	ldr	r2, [pc, #516]	; (8012030 <atlasBootMenuBootModes+0x56c>)
 8011e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8011e30:	099b      	lsrs	r3, r3, #6
 8011e32:	1ae3      	subs	r3, r4, r3
 8011e34:	3302      	adds	r3, #2
 8011e36:	623b      	str	r3, [r7, #32]
 8011e38:	e02c      	b.n	8011e94 <atlasBootMenuBootModes+0x3d0>
			}
			else{
				timeLeft = (timeNow+6)- (HAL_GetTick()/1000);
 8011e3a:	4b7e      	ldr	r3, [pc, #504]	; (8012034 <atlasBootMenuBootModes+0x570>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	461c      	mov	r4, r3
 8011e40:	f7f5 ff2c 	bl	8007c9c <HAL_GetTick>
 8011e44:	4603      	mov	r3, r0
 8011e46:	4a7a      	ldr	r2, [pc, #488]	; (8012030 <atlasBootMenuBootModes+0x56c>)
 8011e48:	fba2 2303 	umull	r2, r3, r2, r3
 8011e4c:	099b      	lsrs	r3, r3, #6
 8011e4e:	1ae3      	subs	r3, r4, r3
 8011e50:	3306      	adds	r3, #6
 8011e52:	623b      	str	r3, [r7, #32]
 8011e54:	e01e      	b.n	8011e94 <atlasBootMenuBootModes+0x3d0>
			}
		}
		else{
			if(setIndicator==FIRST){
 8011e56:	4b75      	ldr	r3, [pc, #468]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b01      	cmp	r3, #1
 8011e5c:	d10d      	bne.n	8011e7a <atlasBootMenuBootModes+0x3b6>
				timeLeft = (timeNow+15)- (HAL_GetTick()/1000);
 8011e5e:	4b75      	ldr	r3, [pc, #468]	; (8012034 <atlasBootMenuBootModes+0x570>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	461c      	mov	r4, r3
 8011e64:	f7f5 ff1a 	bl	8007c9c <HAL_GetTick>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	4a71      	ldr	r2, [pc, #452]	; (8012030 <atlasBootMenuBootModes+0x56c>)
 8011e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8011e70:	099b      	lsrs	r3, r3, #6
 8011e72:	1ae3      	subs	r3, r4, r3
 8011e74:	330f      	adds	r3, #15
 8011e76:	623b      	str	r3, [r7, #32]
 8011e78:	e00c      	b.n	8011e94 <atlasBootMenuBootModes+0x3d0>
			}
			else{
				timeLeft = (timeNow+19)- (HAL_GetTick()/1000);
 8011e7a:	4b6e      	ldr	r3, [pc, #440]	; (8012034 <atlasBootMenuBootModes+0x570>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	461c      	mov	r4, r3
 8011e80:	f7f5 ff0c 	bl	8007c9c <HAL_GetTick>
 8011e84:	4603      	mov	r3, r0
 8011e86:	4a6a      	ldr	r2, [pc, #424]	; (8012030 <atlasBootMenuBootModes+0x56c>)
 8011e88:	fba2 2303 	umull	r2, r3, r2, r3
 8011e8c:	099b      	lsrs	r3, r3, #6
 8011e8e:	1ae3      	subs	r3, r4, r3
 8011e90:	3313      	adds	r3, #19
 8011e92:	623b      	str	r3, [r7, #32]
			}
		}
		i+=LCD_PutIntF(i, j, timeLeft, 0, fnt_dig_big);;
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	b298      	uxth	r0, r3
 8011e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9a:	b299      	uxth	r1, r3
 8011e9c:	4b66      	ldr	r3, [pc, #408]	; (8012038 <atlasBootMenuBootModes+0x574>)
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	6a3a      	ldr	r2, [r7, #32]
 8011ea4:	f7ef fe44 	bl	8001b30 <LCD_PutIntF>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	4413      	add	r3, r2
 8011eb0:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, " SECS LEFT", fnt7x10);
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	b298      	uxth	r0, r3
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb8:	b299      	uxth	r1, r3
 8011eba:	4b60      	ldr	r3, [pc, #384]	; (801203c <atlasBootMenuBootModes+0x578>)
 8011ebc:	4a60      	ldr	r2, [pc, #384]	; (8012040 <atlasBootMenuBootModes+0x57c>)
 8011ebe:	f7ef fd99 	bl	80019f4 <LCD_PutStr>
		switch(setIndicator){
 8011ec2:	4b5a      	ldr	r3, [pc, #360]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	2b04      	cmp	r3, #4
 8011eca:	f200 808a 	bhi.w	8011fe2 <atlasBootMenuBootModes+0x51e>
 8011ece:	a201      	add	r2, pc, #4	; (adr r2, 8011ed4 <atlasBootMenuBootModes+0x410>)
 8011ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ed4:	08011ee9 	.word	0x08011ee9
 8011ed8:	08011f1b 	.word	0x08011f1b
 8011edc:	08011f4d 	.word	0x08011f4d
 8011ee0:	08011f7f 	.word	0x08011f7f
 8011ee4:	08011fb1 	.word	0x08011fb1
		//draw an arrow pointing at the boot option called until the modeClear flag is set by the bootButtons task.
		case FIRST:
		{
			j=95;
 8011ee8:	235f      	movs	r3, #95	; 0x5f
 8011eea:	627b      	str	r3, [r7, #36]	; 0x24
			i=140;
 8011eec:	238c      	movs	r3, #140	; 0x8c
 8011eee:	61fb      	str	r3, [r7, #28]
			drawUpDownArrow(i, j+5, 3, 3);
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	b298      	uxth	r0, r3
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	3305      	adds	r3, #5
 8011efa:	b299      	uxth	r1, r3
 8011efc:	2303      	movs	r3, #3
 8011efe:	2203      	movs	r2, #3
 8011f00:	f7ef fec8 	bl	8001c94 <drawUpDownArrow>
			if(bootButtons.modeClear){
 8011f04:	4b48      	ldr	r3, [pc, #288]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d07f      	beq.n	801200c <atlasBootMenuBootModes+0x548>
				setIndicator=0;
 8011f0c:	4b47      	ldr	r3, [pc, #284]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	601a      	str	r2, [r3, #0]
				bootButtons.modeClear=0;
 8011f12:	4b45      	ldr	r3, [pc, #276]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f14:	2200      	movs	r2, #0
 8011f16:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8011f18:	e078      	b.n	801200c <atlasBootMenuBootModes+0x548>
		}
		case SECOND:
		{
			j=115;
 8011f1a:	2373      	movs	r3, #115	; 0x73
 8011f1c:	627b      	str	r3, [r7, #36]	; 0x24
			i=220;
 8011f1e:	23dc      	movs	r3, #220	; 0xdc
 8011f20:	61fb      	str	r3, [r7, #28]
			drawUpDownArrow(i, j+5, 3, 3);
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	b298      	uxth	r0, r3
 8011f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	3305      	adds	r3, #5
 8011f2c:	b299      	uxth	r1, r3
 8011f2e:	2303      	movs	r3, #3
 8011f30:	2203      	movs	r2, #3
 8011f32:	f7ef feaf 	bl	8001c94 <drawUpDownArrow>
			if(bootButtons.modeClear){
 8011f36:	4b3c      	ldr	r3, [pc, #240]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d068      	beq.n	8012010 <atlasBootMenuBootModes+0x54c>
				setIndicator=0;
 8011f3e:	4b3b      	ldr	r3, [pc, #236]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011f40:	2200      	movs	r2, #0
 8011f42:	601a      	str	r2, [r3, #0]
				bootButtons.modeClear=0;
 8011f44:	4b38      	ldr	r3, [pc, #224]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8011f4a:	e061      	b.n	8012010 <atlasBootMenuBootModes+0x54c>
		}
		case THIRD:
		{
			j=135;
 8011f4c:	2387      	movs	r3, #135	; 0x87
 8011f4e:	627b      	str	r3, [r7, #36]	; 0x24
			i=130;
 8011f50:	2382      	movs	r3, #130	; 0x82
 8011f52:	61fb      	str	r3, [r7, #28]
			drawUpDownArrow(i, j+5, 3, 3);
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	b298      	uxth	r0, r3
 8011f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	3305      	adds	r3, #5
 8011f5e:	b299      	uxth	r1, r3
 8011f60:	2303      	movs	r3, #3
 8011f62:	2203      	movs	r2, #3
 8011f64:	f7ef fe96 	bl	8001c94 <drawUpDownArrow>
			if(bootButtons.modeClear){
 8011f68:	4b2f      	ldr	r3, [pc, #188]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d051      	beq.n	8012014 <atlasBootMenuBootModes+0x550>
				setIndicator=0;
 8011f70:	4b2e      	ldr	r3, [pc, #184]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	601a      	str	r2, [r3, #0]
				bootButtons.modeClear=0;
 8011f76:	4b2c      	ldr	r3, [pc, #176]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f78:	2200      	movs	r2, #0
 8011f7a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8011f7c:	e04a      	b.n	8012014 <atlasBootMenuBootModes+0x550>
		}
		case FOURTH:
		{
			j=155;
 8011f7e:	239b      	movs	r3, #155	; 0x9b
 8011f80:	627b      	str	r3, [r7, #36]	; 0x24
			i=160;
 8011f82:	23a0      	movs	r3, #160	; 0xa0
 8011f84:	61fb      	str	r3, [r7, #28]
			drawUpDownArrow(i, j+5, 3, 3);
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	b298      	uxth	r0, r3
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	3305      	adds	r3, #5
 8011f90:	b299      	uxth	r1, r3
 8011f92:	2303      	movs	r3, #3
 8011f94:	2203      	movs	r2, #3
 8011f96:	f7ef fe7d 	bl	8001c94 <drawUpDownArrow>
			if(bootButtons.modeClear){
 8011f9a:	4b23      	ldr	r3, [pc, #140]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d03a      	beq.n	8012018 <atlasBootMenuBootModes+0x554>
				setIndicator=0;
 8011fa2:	4b22      	ldr	r3, [pc, #136]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	601a      	str	r2, [r3, #0]
				bootButtons.modeClear=0;
 8011fa8:	4b1f      	ldr	r3, [pc, #124]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011faa:	2200      	movs	r2, #0
 8011fac:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8011fae:	e033      	b.n	8012018 <atlasBootMenuBootModes+0x554>
		}
		case FIFTH:
		{
			j=175;
 8011fb0:	23af      	movs	r3, #175	; 0xaf
 8011fb2:	627b      	str	r3, [r7, #36]	; 0x24
			i=100;
 8011fb4:	2364      	movs	r3, #100	; 0x64
 8011fb6:	61fb      	str	r3, [r7, #28]
			drawUpDownArrow(i, j+5, 3, 3);
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	b298      	uxth	r0, r3
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	3305      	adds	r3, #5
 8011fc2:	b299      	uxth	r1, r3
 8011fc4:	2303      	movs	r3, #3
 8011fc6:	2203      	movs	r2, #3
 8011fc8:	f7ef fe64 	bl	8001c94 <drawUpDownArrow>
			if(bootButtons.modeClear){
 8011fcc:	4b16      	ldr	r3, [pc, #88]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d023      	beq.n	801201c <atlasBootMenuBootModes+0x558>
				setIndicator=0;
 8011fd4:	4b15      	ldr	r3, [pc, #84]	; (801202c <atlasBootMenuBootModes+0x568>)
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	601a      	str	r2, [r3, #0]
				bootButtons.modeClear=0;
 8011fda:	4b13      	ldr	r3, [pc, #76]	; (8012028 <atlasBootMenuBootModes+0x564>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8011fe0:	e01c      	b.n	801201c <atlasBootMenuBootModes+0x558>
		}
		default:
		{
			drawUpDownArrow(i, j+5, 3, 3);
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	b298      	uxth	r0, r3
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	3305      	adds	r3, #5
 8011fec:	b299      	uxth	r1, r3
 8011fee:	2303      	movs	r3, #3
 8011ff0:	2203      	movs	r2, #3
 8011ff2:	f7ef fe4f 	bl	8001c94 <drawUpDownArrow>
			break;
 8011ff6:	e012      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8011ff8:	bf00      	nop
 8011ffa:	e010      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8011ffc:	bf00      	nop
 8011ffe:	e00e      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8012000:	bf00      	nop
 8012002:	e00c      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8012004:	bf00      	nop
 8012006:	e00a      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8012008:	bf00      	nop
 801200a:	e008      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 801200c:	bf00      	nop
 801200e:	e006      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8012010:	bf00      	nop
 8012012:	e004      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8012014:	bf00      	nop
 8012016:	e002      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 8012018:	bf00      	nop
 801201a:	e000      	b.n	801201e <atlasBootMenuBootModes+0x55a>
			break;
 801201c:	bf00      	nop
		}
		}
	}
	return j;
 801201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012020:	4618      	mov	r0, r3
 8012022:	372c      	adds	r7, #44	; 0x2c
 8012024:	46bd      	mov	sp, r7
 8012026:	bd90      	pop	{r4, r7, pc}
 8012028:	20003360 	.word	0x20003360
 801202c:	2000342c 	.word	0x2000342c
 8012030:	10624dd3 	.word	0x10624dd3
 8012034:	20028b54 	.word	0x20028b54
 8012038:	0801bd18 	.word	0x0801bd18
 801203c:	0801b958 	.word	0x0801b958
 8012040:	0801ab28 	.word	0x0801ab28

08012044 <atlasSystemInfoSoc>:


//draw the name for the project soc board and its fab version. Used for the System Info page. Uses the ATLAS_SOC_BOARD definiton in the project
//.h file.
void atlasSystemInfoSoc(int i, int j){
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
	i+=LCD_PutStr(i, j, ATLAS_SOC_BOARD, fnt7x10);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	b298      	uxth	r0, r3
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	b299      	uxth	r1, r3
 8012056:	4b25      	ldr	r3, [pc, #148]	; (80120ec <atlasSystemInfoSoc+0xa8>)
 8012058:	4a25      	ldr	r2, [pc, #148]	; (80120f0 <atlasSystemInfoSoc+0xac>)
 801205a:	f7ef fccb 	bl	80019f4 <LCD_PutStr>
 801205e:	4603      	mov	r3, r0
 8012060:	461a      	mov	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4413      	add	r3, r2
 8012066:	607b      	str	r3, [r7, #4]
	switch(ZION.SOC_BoardFab){
 8012068:	4b22      	ldr	r3, [pc, #136]	; (80120f4 <atlasSystemInfoSoc+0xb0>)
 801206a:	699b      	ldr	r3, [r3, #24]
 801206c:	3b01      	subs	r3, #1
 801206e:	2b03      	cmp	r3, #3
 8012070:	d82e      	bhi.n	80120d0 <atlasSystemInfoSoc+0x8c>
 8012072:	a201      	add	r2, pc, #4	; (adr r2, 8012078 <atlasSystemInfoSoc+0x34>)
 8012074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012078:	08012089 	.word	0x08012089
 801207c:	0801209b 	.word	0x0801209b
 8012080:	080120ad 	.word	0x080120ad
 8012084:	080120bf 	.word	0x080120bf
	case 1:{
		LCD_PutStr(i, j, "FAB A", fnt7x10);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	b298      	uxth	r0, r3
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	b299      	uxth	r1, r3
 8012090:	4b16      	ldr	r3, [pc, #88]	; (80120ec <atlasSystemInfoSoc+0xa8>)
 8012092:	4a19      	ldr	r2, [pc, #100]	; (80120f8 <atlasSystemInfoSoc+0xb4>)
 8012094:	f7ef fcae 	bl	80019f4 <LCD_PutStr>
		break;
 8012098:	e023      	b.n	80120e2 <atlasSystemInfoSoc+0x9e>
	}
	case 2:{
		LCD_PutStr(i, j, "FAB B", fnt7x10);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	b298      	uxth	r0, r3
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	b299      	uxth	r1, r3
 80120a2:	4b12      	ldr	r3, [pc, #72]	; (80120ec <atlasSystemInfoSoc+0xa8>)
 80120a4:	4a15      	ldr	r2, [pc, #84]	; (80120fc <atlasSystemInfoSoc+0xb8>)
 80120a6:	f7ef fca5 	bl	80019f4 <LCD_PutStr>
		break;
 80120aa:	e01a      	b.n	80120e2 <atlasSystemInfoSoc+0x9e>
	}
	case 3:{
		LCD_PutStr(i, j, "FAB C", fnt7x10);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	b298      	uxth	r0, r3
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	b299      	uxth	r1, r3
 80120b4:	4b0d      	ldr	r3, [pc, #52]	; (80120ec <atlasSystemInfoSoc+0xa8>)
 80120b6:	4a12      	ldr	r2, [pc, #72]	; (8012100 <atlasSystemInfoSoc+0xbc>)
 80120b8:	f7ef fc9c 	bl	80019f4 <LCD_PutStr>
		break;
 80120bc:	e011      	b.n	80120e2 <atlasSystemInfoSoc+0x9e>
	}
	case 4:{
		LCD_PutStr(i, j, "FAB D", fnt7x10);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	b298      	uxth	r0, r3
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	b299      	uxth	r1, r3
 80120c6:	4b09      	ldr	r3, [pc, #36]	; (80120ec <atlasSystemInfoSoc+0xa8>)
 80120c8:	4a0e      	ldr	r2, [pc, #56]	; (8012104 <atlasSystemInfoSoc+0xc0>)
 80120ca:	f7ef fc93 	bl	80019f4 <LCD_PutStr>
		break;
 80120ce:	e008      	b.n	80120e2 <atlasSystemInfoSoc+0x9e>
	}
	default:{
		LCD_PutStr(i, j, "FAB NA", fnt7x10);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	b298      	uxth	r0, r3
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	b299      	uxth	r1, r3
 80120d8:	4b04      	ldr	r3, [pc, #16]	; (80120ec <atlasSystemInfoSoc+0xa8>)
 80120da:	4a0b      	ldr	r2, [pc, #44]	; (8012108 <atlasSystemInfoSoc+0xc4>)
 80120dc:	f7ef fc8a 	bl	80019f4 <LCD_PutStr>
		break;
 80120e0:	bf00      	nop
	}
	}
}
 80120e2:	bf00      	nop
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	0801b958 	.word	0x0801b958
 80120f0:	0801ab34 	.word	0x0801ab34
 80120f4:	20003328 	.word	0x20003328
 80120f8:	0801ab40 	.word	0x0801ab40
 80120fc:	0801ab48 	.word	0x0801ab48
 8012100:	0801ab50 	.word	0x0801ab50
 8012104:	0801ab58 	.word	0x0801ab58
 8012108:	0801ab60 	.word	0x0801ab60

0801210c <atlasSystemInfoAsic>:

//draw the name for the project asic board and its fab version. Used for the System Info page. Uses the ATLAS_ASIC_BOARD definition in the project
//.h file.
void atlasSystemInfoAsic(int i, int j){
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
	i+=LCD_PutStr(i, j, ATLAS_ASIC_BOARD, fnt7x10);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	b298      	uxth	r0, r3
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	b299      	uxth	r1, r3
 801211e:	4b25      	ldr	r3, [pc, #148]	; (80121b4 <atlasSystemInfoAsic+0xa8>)
 8012120:	4a25      	ldr	r2, [pc, #148]	; (80121b8 <atlasSystemInfoAsic+0xac>)
 8012122:	f7ef fc67 	bl	80019f4 <LCD_PutStr>
 8012126:	4603      	mov	r3, r0
 8012128:	461a      	mov	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4413      	add	r3, r2
 801212e:	607b      	str	r3, [r7, #4]
	switch(ZION.ASIC_BoardFab){
 8012130:	4b22      	ldr	r3, [pc, #136]	; (80121bc <atlasSystemInfoAsic+0xb0>)
 8012132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012134:	3b01      	subs	r3, #1
 8012136:	2b03      	cmp	r3, #3
 8012138:	d82e      	bhi.n	8012198 <atlasSystemInfoAsic+0x8c>
 801213a:	a201      	add	r2, pc, #4	; (adr r2, 8012140 <atlasSystemInfoAsic+0x34>)
 801213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012140:	08012151 	.word	0x08012151
 8012144:	08012163 	.word	0x08012163
 8012148:	08012175 	.word	0x08012175
 801214c:	08012187 	.word	0x08012187
	case 1:{
		LCD_PutStr(i, j, "FAB A", fnt7x10);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	b298      	uxth	r0, r3
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	b299      	uxth	r1, r3
 8012158:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <atlasSystemInfoAsic+0xa8>)
 801215a:	4a19      	ldr	r2, [pc, #100]	; (80121c0 <atlasSystemInfoAsic+0xb4>)
 801215c:	f7ef fc4a 	bl	80019f4 <LCD_PutStr>
		break;
 8012160:	e023      	b.n	80121aa <atlasSystemInfoAsic+0x9e>
	}
	case 2:{
		LCD_PutStr(i, j, "FAB B", fnt7x10);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	b298      	uxth	r0, r3
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	b299      	uxth	r1, r3
 801216a:	4b12      	ldr	r3, [pc, #72]	; (80121b4 <atlasSystemInfoAsic+0xa8>)
 801216c:	4a15      	ldr	r2, [pc, #84]	; (80121c4 <atlasSystemInfoAsic+0xb8>)
 801216e:	f7ef fc41 	bl	80019f4 <LCD_PutStr>
		break;
 8012172:	e01a      	b.n	80121aa <atlasSystemInfoAsic+0x9e>
	}
	case 3:{
		LCD_PutStr(i, j, "FAB C", fnt7x10);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	b298      	uxth	r0, r3
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	b299      	uxth	r1, r3
 801217c:	4b0d      	ldr	r3, [pc, #52]	; (80121b4 <atlasSystemInfoAsic+0xa8>)
 801217e:	4a12      	ldr	r2, [pc, #72]	; (80121c8 <atlasSystemInfoAsic+0xbc>)
 8012180:	f7ef fc38 	bl	80019f4 <LCD_PutStr>
		break;
 8012184:	e011      	b.n	80121aa <atlasSystemInfoAsic+0x9e>
	}
	case 4:{
		LCD_PutStr(i, j, "FAB D", fnt7x10);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	b298      	uxth	r0, r3
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	b299      	uxth	r1, r3
 801218e:	4b09      	ldr	r3, [pc, #36]	; (80121b4 <atlasSystemInfoAsic+0xa8>)
 8012190:	4a0e      	ldr	r2, [pc, #56]	; (80121cc <atlasSystemInfoAsic+0xc0>)
 8012192:	f7ef fc2f 	bl	80019f4 <LCD_PutStr>
		break;
 8012196:	e008      	b.n	80121aa <atlasSystemInfoAsic+0x9e>
	}
	default:{
		LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	b298      	uxth	r0, r3
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	b299      	uxth	r1, r3
 80121a0:	4b04      	ldr	r3, [pc, #16]	; (80121b4 <atlasSystemInfoAsic+0xa8>)
 80121a2:	4a0b      	ldr	r2, [pc, #44]	; (80121d0 <atlasSystemInfoAsic+0xc4>)
 80121a4:	f7ef fc26 	bl	80019f4 <LCD_PutStr>
		break;
 80121a8:	bf00      	nop
	}
	}
}
 80121aa:	bf00      	nop
 80121ac:	3708      	adds	r7, #8
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	0801b958 	.word	0x0801b958
 80121b8:	0801ab68 	.word	0x0801ab68
 80121bc:	20003328 	.word	0x20003328
 80121c0:	0801ab40 	.word	0x0801ab40
 80121c4:	0801ab48 	.word	0x0801ab48
 80121c8:	0801ab50 	.word	0x0801ab50
 80121cc:	0801ab58 	.word	0x0801ab58
 80121d0:	0801ab60 	.word	0x0801ab60

080121d4 <atlasSystemInfoDisplay>:
//draw the name for the project Display board and its fab version. Used for the System Info page. Uses the ATLAS_DISPLAY_BOARD definition in the project
//.h file.
void atlasSystemInfoDisplay(int i, int j){
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
	i+=LCD_PutStr(i, j, ATLAS_DISPLAY_BOARD, fnt7x10);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	b298      	uxth	r0, r3
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	b299      	uxth	r1, r3
 80121e6:	4b25      	ldr	r3, [pc, #148]	; (801227c <atlasSystemInfoDisplay+0xa8>)
 80121e8:	4a25      	ldr	r2, [pc, #148]	; (8012280 <atlasSystemInfoDisplay+0xac>)
 80121ea:	f7ef fc03 	bl	80019f4 <LCD_PutStr>
 80121ee:	4603      	mov	r3, r0
 80121f0:	461a      	mov	r2, r3
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4413      	add	r3, r2
 80121f6:	607b      	str	r3, [r7, #4]
	switch(ZION.DISPLAY_BoardFab){
 80121f8:	4b22      	ldr	r3, [pc, #136]	; (8012284 <atlasSystemInfoDisplay+0xb0>)
 80121fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121fc:	3b01      	subs	r3, #1
 80121fe:	2b03      	cmp	r3, #3
 8012200:	d82e      	bhi.n	8012260 <atlasSystemInfoDisplay+0x8c>
 8012202:	a201      	add	r2, pc, #4	; (adr r2, 8012208 <atlasSystemInfoDisplay+0x34>)
 8012204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012208:	08012219 	.word	0x08012219
 801220c:	0801222b 	.word	0x0801222b
 8012210:	0801223d 	.word	0x0801223d
 8012214:	0801224f 	.word	0x0801224f
	case 1:{
		LCD_PutStr(i, j, "FAB A", fnt7x10);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	b298      	uxth	r0, r3
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	b299      	uxth	r1, r3
 8012220:	4b16      	ldr	r3, [pc, #88]	; (801227c <atlasSystemInfoDisplay+0xa8>)
 8012222:	4a19      	ldr	r2, [pc, #100]	; (8012288 <atlasSystemInfoDisplay+0xb4>)
 8012224:	f7ef fbe6 	bl	80019f4 <LCD_PutStr>
		break;
 8012228:	e023      	b.n	8012272 <atlasSystemInfoDisplay+0x9e>
	}
	case 2:{
		LCD_PutStr(i, j, "FAB B", fnt7x10);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	b298      	uxth	r0, r3
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	b299      	uxth	r1, r3
 8012232:	4b12      	ldr	r3, [pc, #72]	; (801227c <atlasSystemInfoDisplay+0xa8>)
 8012234:	4a15      	ldr	r2, [pc, #84]	; (801228c <atlasSystemInfoDisplay+0xb8>)
 8012236:	f7ef fbdd 	bl	80019f4 <LCD_PutStr>
		break;
 801223a:	e01a      	b.n	8012272 <atlasSystemInfoDisplay+0x9e>
	}
	case 3:{
		LCD_PutStr(i, j, "FAB C", fnt7x10);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	b298      	uxth	r0, r3
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	b299      	uxth	r1, r3
 8012244:	4b0d      	ldr	r3, [pc, #52]	; (801227c <atlasSystemInfoDisplay+0xa8>)
 8012246:	4a12      	ldr	r2, [pc, #72]	; (8012290 <atlasSystemInfoDisplay+0xbc>)
 8012248:	f7ef fbd4 	bl	80019f4 <LCD_PutStr>
		break;
 801224c:	e011      	b.n	8012272 <atlasSystemInfoDisplay+0x9e>
	}
	case 4:{
		LCD_PutStr(i, j, "FAB D", fnt7x10);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	b298      	uxth	r0, r3
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	b299      	uxth	r1, r3
 8012256:	4b09      	ldr	r3, [pc, #36]	; (801227c <atlasSystemInfoDisplay+0xa8>)
 8012258:	4a0e      	ldr	r2, [pc, #56]	; (8012294 <atlasSystemInfoDisplay+0xc0>)
 801225a:	f7ef fbcb 	bl	80019f4 <LCD_PutStr>
		break;
 801225e:	e008      	b.n	8012272 <atlasSystemInfoDisplay+0x9e>
	}
	default:{
		LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	b298      	uxth	r0, r3
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	b299      	uxth	r1, r3
 8012268:	4b04      	ldr	r3, [pc, #16]	; (801227c <atlasSystemInfoDisplay+0xa8>)
 801226a:	4a0b      	ldr	r2, [pc, #44]	; (8012298 <atlasSystemInfoDisplay+0xc4>)
 801226c:	f7ef fbc2 	bl	80019f4 <LCD_PutStr>
		break;
 8012270:	bf00      	nop
	}
	}
}
 8012272:	bf00      	nop
 8012274:	3708      	adds	r7, #8
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	0801b958 	.word	0x0801b958
 8012280:	0801ab70 	.word	0x0801ab70
 8012284:	20003328 	.word	0x20003328
 8012288:	0801ab40 	.word	0x0801ab40
 801228c:	0801ab48 	.word	0x0801ab48
 8012290:	0801ab50 	.word	0x0801ab50
 8012294:	0801ab58 	.word	0x0801ab58
 8012298:	0801ab60 	.word	0x0801ab60

0801229c <atlasSystemInfoPV>:
//draw the name for the project other board PV and its state of presence. Used for the System Info page. Uses the ATLAS_PV_PRSNT definition in the project
//.h file.
void atlasSystemInfoPV(int i, int j){
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 80122a6:	2314      	movs	r3, #20
 80122a8:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 80122aa:	4b17      	ldr	r3, [pc, #92]	; (8012308 <atlasSystemInfoPV+0x6c>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	4413      	add	r3, r2
 80122b2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "PV: ", fnt7x10);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	b298      	uxth	r0, r3
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	b299      	uxth	r1, r3
 80122bc:	4b13      	ldr	r3, [pc, #76]	; (801230c <atlasSystemInfoPV+0x70>)
 80122be:	4a14      	ldr	r2, [pc, #80]	; (8012310 <atlasSystemInfoPV+0x74>)
 80122c0:	f7ef fb98 	bl	80019f4 <LCD_PutStr>
 80122c4:	4603      	mov	r3, r0
 80122c6:	461a      	mov	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	4413      	add	r3, r2
 80122cc:	607b      	str	r3, [r7, #4]
	if(ATLAS_PV_PRSNT){
 80122ce:	4b11      	ldr	r3, [pc, #68]	; (8012314 <atlasSystemInfoPV+0x78>)
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	461a      	mov	r2, r3
 80122d4:	4b10      	ldr	r3, [pc, #64]	; (8012318 <atlasSystemInfoPV+0x7c>)
 80122d6:	5c9b      	ldrb	r3, [r3, r2]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d008      	beq.n	80122ee <atlasSystemInfoPV+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	b298      	uxth	r0, r3
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	b299      	uxth	r1, r3
 80122e4:	4b09      	ldr	r3, [pc, #36]	; (801230c <atlasSystemInfoPV+0x70>)
 80122e6:	4a0d      	ldr	r2, [pc, #52]	; (801231c <atlasSystemInfoPV+0x80>)
 80122e8:	f7ef fb84 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 80122ec:	e007      	b.n	80122fe <atlasSystemInfoPV+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	b298      	uxth	r0, r3
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	b299      	uxth	r1, r3
 80122f6:	4b05      	ldr	r3, [pc, #20]	; (801230c <atlasSystemInfoPV+0x70>)
 80122f8:	4a09      	ldr	r2, [pc, #36]	; (8012320 <atlasSystemInfoPV+0x84>)
 80122fa:	f7ef fb7b 	bl	80019f4 <LCD_PutStr>
}
 80122fe:	bf00      	nop
 8012300:	3710      	adds	r7, #16
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	200001d4 	.word	0x200001d4
 801230c:	0801b958 	.word	0x0801b958
 8012310:	0801ab78 	.word	0x0801ab78
 8012314:	20000168 	.word	0x20000168
 8012318:	20028df0 	.word	0x20028df0
 801231c:	0801ab80 	.word	0x0801ab80
 8012320:	0801ab8c 	.word	0x0801ab8c

08012324 <atlasSystemInfoWIFI>:
//draw the name for the project other board WIFI and its state of presence. Used for the System Info page. Uses the ATLAS_WIFI_PRSNT definition in the project
//.h file.
void atlasSystemInfoWIFI(int i, int j){
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 801232e:	2314      	movs	r3, #20
 8012330:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 8012332:	4b17      	ldr	r3, [pc, #92]	; (8012390 <atlasSystemInfoWIFI+0x6c>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	68fa      	ldr	r2, [r7, #12]
 8012338:	4413      	add	r3, r2
 801233a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "WIFI: ", fnt7x10);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	b298      	uxth	r0, r3
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	b299      	uxth	r1, r3
 8012344:	4b13      	ldr	r3, [pc, #76]	; (8012394 <atlasSystemInfoWIFI+0x70>)
 8012346:	4a14      	ldr	r2, [pc, #80]	; (8012398 <atlasSystemInfoWIFI+0x74>)
 8012348:	f7ef fb54 	bl	80019f4 <LCD_PutStr>
 801234c:	4603      	mov	r3, r0
 801234e:	461a      	mov	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	4413      	add	r3, r2
 8012354:	607b      	str	r3, [r7, #4]
	if(ATLAS_WIFI_PRSNT){
 8012356:	4b11      	ldr	r3, [pc, #68]	; (801239c <atlasSystemInfoWIFI+0x78>)
 8012358:	785b      	ldrb	r3, [r3, #1]
 801235a:	461a      	mov	r2, r3
 801235c:	4b10      	ldr	r3, [pc, #64]	; (80123a0 <atlasSystemInfoWIFI+0x7c>)
 801235e:	5c9b      	ldrb	r3, [r3, r2]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d008      	beq.n	8012376 <atlasSystemInfoWIFI+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	b298      	uxth	r0, r3
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	b299      	uxth	r1, r3
 801236c:	4b09      	ldr	r3, [pc, #36]	; (8012394 <atlasSystemInfoWIFI+0x70>)
 801236e:	4a0d      	ldr	r2, [pc, #52]	; (80123a4 <atlasSystemInfoWIFI+0x80>)
 8012370:	f7ef fb40 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 8012374:	e007      	b.n	8012386 <atlasSystemInfoWIFI+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	b298      	uxth	r0, r3
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	b299      	uxth	r1, r3
 801237e:	4b05      	ldr	r3, [pc, #20]	; (8012394 <atlasSystemInfoWIFI+0x70>)
 8012380:	4a09      	ldr	r2, [pc, #36]	; (80123a8 <atlasSystemInfoWIFI+0x84>)
 8012382:	f7ef fb37 	bl	80019f4 <LCD_PutStr>
}
 8012386:	bf00      	nop
 8012388:	3710      	adds	r7, #16
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	200001d4 	.word	0x200001d4
 8012394:	0801b958 	.word	0x0801b958
 8012398:	0801ab9c 	.word	0x0801ab9c
 801239c:	20000168 	.word	0x20000168
 80123a0:	20028df0 	.word	0x20028df0
 80123a4:	0801ab80 	.word	0x0801ab80
 80123a8:	0801ab8c 	.word	0x0801ab8c

080123ac <atlasSystemInfoWIGIG>:

//draw the name for the project other board WIGIG and its state of presence. Used for the System Info page. Uses the ATLAS_WIGIG_PRSNT definition in the project
//.h file.
void atlasSystemInfoWIGIG(int i, int j){
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 80123b6:	2314      	movs	r3, #20
 80123b8:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 80123ba:	4b17      	ldr	r3, [pc, #92]	; (8012418 <atlasSystemInfoWIGIG+0x6c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	4413      	add	r3, r2
 80123c2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "WIGIG: ", fnt7x10);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	b298      	uxth	r0, r3
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	b299      	uxth	r1, r3
 80123cc:	4b13      	ldr	r3, [pc, #76]	; (801241c <atlasSystemInfoWIGIG+0x70>)
 80123ce:	4a14      	ldr	r2, [pc, #80]	; (8012420 <atlasSystemInfoWIGIG+0x74>)
 80123d0:	f7ef fb10 	bl	80019f4 <LCD_PutStr>
 80123d4:	4603      	mov	r3, r0
 80123d6:	461a      	mov	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	4413      	add	r3, r2
 80123dc:	607b      	str	r3, [r7, #4]
	if(ATLAS_WIGIG_PRSNT){
 80123de:	4b11      	ldr	r3, [pc, #68]	; (8012424 <atlasSystemInfoWIGIG+0x78>)
 80123e0:	789b      	ldrb	r3, [r3, #2]
 80123e2:	461a      	mov	r2, r3
 80123e4:	4b10      	ldr	r3, [pc, #64]	; (8012428 <atlasSystemInfoWIGIG+0x7c>)
 80123e6:	5c9b      	ldrb	r3, [r3, r2]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d008      	beq.n	80123fe <atlasSystemInfoWIGIG+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	b298      	uxth	r0, r3
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	b299      	uxth	r1, r3
 80123f4:	4b09      	ldr	r3, [pc, #36]	; (801241c <atlasSystemInfoWIGIG+0x70>)
 80123f6:	4a0d      	ldr	r2, [pc, #52]	; (801242c <atlasSystemInfoWIGIG+0x80>)
 80123f8:	f7ef fafc 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 80123fc:	e007      	b.n	801240e <atlasSystemInfoWIGIG+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	b298      	uxth	r0, r3
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	b299      	uxth	r1, r3
 8012406:	4b05      	ldr	r3, [pc, #20]	; (801241c <atlasSystemInfoWIGIG+0x70>)
 8012408:	4a09      	ldr	r2, [pc, #36]	; (8012430 <atlasSystemInfoWIGIG+0x84>)
 801240a:	f7ef faf3 	bl	80019f4 <LCD_PutStr>
}
 801240e:	bf00      	nop
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	200001d4 	.word	0x200001d4
 801241c:	0801b958 	.word	0x0801b958
 8012420:	0801aba4 	.word	0x0801aba4
 8012424:	20000168 	.word	0x20000168
 8012428:	20028df0 	.word	0x20028df0
 801242c:	0801ab80 	.word	0x0801ab80
 8012430:	0801ab8c 	.word	0x0801ab8c

08012434 <atlasSystemInfoCODEC>:
//draw the name for the project other board CODEC and its state of presence. Used for the System Info page. Uses the ATLAS_CODEC_PRSNT definition in the project
//.h file.
void atlasSystemInfoCODEC(int i, int j){
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 801243e:	2314      	movs	r3, #20
 8012440:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 8012442:	4b17      	ldr	r3, [pc, #92]	; (80124a0 <atlasSystemInfoCODEC+0x6c>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	4413      	add	r3, r2
 801244a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "CODEC: ", fnt7x10);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	b298      	uxth	r0, r3
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	b299      	uxth	r1, r3
 8012454:	4b13      	ldr	r3, [pc, #76]	; (80124a4 <atlasSystemInfoCODEC+0x70>)
 8012456:	4a14      	ldr	r2, [pc, #80]	; (80124a8 <atlasSystemInfoCODEC+0x74>)
 8012458:	f7ef facc 	bl	80019f4 <LCD_PutStr>
 801245c:	4603      	mov	r3, r0
 801245e:	461a      	mov	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4413      	add	r3, r2
 8012464:	607b      	str	r3, [r7, #4]
	if(ATLAS_CODEC_PRSNT){
 8012466:	4b11      	ldr	r3, [pc, #68]	; (80124ac <atlasSystemInfoCODEC+0x78>)
 8012468:	78db      	ldrb	r3, [r3, #3]
 801246a:	461a      	mov	r2, r3
 801246c:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <atlasSystemInfoCODEC+0x7c>)
 801246e:	5c9b      	ldrb	r3, [r3, r2]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d008      	beq.n	8012486 <atlasSystemInfoCODEC+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	b298      	uxth	r0, r3
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	b299      	uxth	r1, r3
 801247c:	4b09      	ldr	r3, [pc, #36]	; (80124a4 <atlasSystemInfoCODEC+0x70>)
 801247e:	4a0d      	ldr	r2, [pc, #52]	; (80124b4 <atlasSystemInfoCODEC+0x80>)
 8012480:	f7ef fab8 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 8012484:	e007      	b.n	8012496 <atlasSystemInfoCODEC+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	b298      	uxth	r0, r3
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	b299      	uxth	r1, r3
 801248e:	4b05      	ldr	r3, [pc, #20]	; (80124a4 <atlasSystemInfoCODEC+0x70>)
 8012490:	4a09      	ldr	r2, [pc, #36]	; (80124b8 <atlasSystemInfoCODEC+0x84>)
 8012492:	f7ef faaf 	bl	80019f4 <LCD_PutStr>
}
 8012496:	bf00      	nop
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	200001d4 	.word	0x200001d4
 80124a4:	0801b958 	.word	0x0801b958
 80124a8:	0801abac 	.word	0x0801abac
 80124ac:	20000168 	.word	0x20000168
 80124b0:	20028df0 	.word	0x20028df0
 80124b4:	0801ab80 	.word	0x0801ab80
 80124b8:	0801ab8c 	.word	0x0801ab8c

080124bc <atlasSystemInfoRF>:
//draw the name for the project other board RF and its state of presence. Used for the System Info page. Uses the ATLAS_RF_PRSNT definition in the project
//.h file.
void atlasSystemInfoRF(int i, int j){
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
	int indentAlignment=20;
 80124c6:	2314      	movs	r3, #20
 80124c8:	60fb      	str	r3, [r7, #12]
	i=otherBoardAlignment+indentAlignment;
 80124ca:	4b17      	ldr	r3, [pc, #92]	; (8012528 <atlasSystemInfoRF+0x6c>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	4413      	add	r3, r2
 80124d2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutStr(i, j, "RF: ", fnt7x10);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	b298      	uxth	r0, r3
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	b299      	uxth	r1, r3
 80124dc:	4b13      	ldr	r3, [pc, #76]	; (801252c <atlasSystemInfoRF+0x70>)
 80124de:	4a14      	ldr	r2, [pc, #80]	; (8012530 <atlasSystemInfoRF+0x74>)
 80124e0:	f7ef fa88 	bl	80019f4 <LCD_PutStr>
 80124e4:	4603      	mov	r3, r0
 80124e6:	461a      	mov	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4413      	add	r3, r2
 80124ec:	607b      	str	r3, [r7, #4]
	if(ATLAS_RF_PRSNT){
 80124ee:	4b11      	ldr	r3, [pc, #68]	; (8012534 <atlasSystemInfoRF+0x78>)
 80124f0:	791b      	ldrb	r3, [r3, #4]
 80124f2:	461a      	mov	r2, r3
 80124f4:	4b10      	ldr	r3, [pc, #64]	; (8012538 <atlasSystemInfoRF+0x7c>)
 80124f6:	5c9b      	ldrb	r3, [r3, r2]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d008      	beq.n	801250e <atlasSystemInfoRF+0x52>
		LCD_PutStr(i, j, "Detected", fnt7x10);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	b298      	uxth	r0, r3
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	b299      	uxth	r1, r3
 8012504:	4b09      	ldr	r3, [pc, #36]	; (801252c <atlasSystemInfoRF+0x70>)
 8012506:	4a0d      	ldr	r2, [pc, #52]	; (801253c <atlasSystemInfoRF+0x80>)
 8012508:	f7ef fa74 	bl	80019f4 <LCD_PutStr>
	}
	else{
		LCD_PutStr(i, j, "Not detected", fnt7x10);
	}
}
 801250c:	e007      	b.n	801251e <atlasSystemInfoRF+0x62>
		LCD_PutStr(i, j, "Not detected", fnt7x10);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	b298      	uxth	r0, r3
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	b299      	uxth	r1, r3
 8012516:	4b05      	ldr	r3, [pc, #20]	; (801252c <atlasSystemInfoRF+0x70>)
 8012518:	4a09      	ldr	r2, [pc, #36]	; (8012540 <atlasSystemInfoRF+0x84>)
 801251a:	f7ef fa6b 	bl	80019f4 <LCD_PutStr>
}
 801251e:	bf00      	nop
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	200001d4 	.word	0x200001d4
 801252c:	0801b958 	.word	0x0801b958
 8012530:	0801abb4 	.word	0x0801abb4
 8012534:	20000168 	.word	0x20000168
 8012538:	20028df0 	.word	0x20028df0
 801253c:	0801ab80 	.word	0x0801ab80
 8012540:	0801ab8c 	.word	0x0801ab8c

08012544 <atlasHeaderFaults>:

//faults shown in the top margin for all menus. Needs to be relatively tiny (<12 characters)
int atlasHeaderFaults(int i, int j){
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
	int x = i;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	60fb      	str	r3, [r7, #12]
	int y = j;
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	60bb      	str	r3, [r7, #8]
	if(errorLED.vsysPMIFault){
 8012556:	4b63      	ldr	r3, [pc, #396]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 8012558:	785b      	ldrb	r3, [r3, #1]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00d      	beq.n	801257a <atlasHeaderFaults+0x36>
		x += LCD_PutStr(x, y, ATLAS_HEADER1_FAULT_LBL, fnt7x10);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	b298      	uxth	r0, r3
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	b299      	uxth	r1, r3
 8012566:	4b60      	ldr	r3, [pc, #384]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 8012568:	4a60      	ldr	r2, [pc, #384]	; (80126ec <atlasHeaderFaults+0x1a8>)
 801256a:	f7ef fa43 	bl	80019f4 <LCD_PutStr>
 801256e:	4603      	mov	r3, r0
 8012570:	461a      	mov	r2, r3
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	4413      	add	r3, r2
 8012576:	60fb      	str	r3, [r7, #12]
 8012578:	e0ae      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.zionFault){
 801257a:	4b5a      	ldr	r3, [pc, #360]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d00d      	beq.n	801259e <atlasHeaderFaults+0x5a>
		x += LCD_PutStr(x, y, ATLAS_HEADER2_FAULT_LBL, fnt7x10);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	b298      	uxth	r0, r3
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	b299      	uxth	r1, r3
 801258a:	4b57      	ldr	r3, [pc, #348]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 801258c:	4a58      	ldr	r2, [pc, #352]	; (80126f0 <atlasHeaderFaults+0x1ac>)
 801258e:	f7ef fa31 	bl	80019f4 <LCD_PutStr>
 8012592:	4603      	mov	r3, r0
 8012594:	461a      	mov	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	4413      	add	r3, r2
 801259a:	60fb      	str	r3, [r7, #12]
 801259c:	e09c      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault3){
 801259e:	4b51      	ldr	r3, [pc, #324]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 80125a0:	789b      	ldrb	r3, [r3, #2]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00d      	beq.n	80125c2 <atlasHeaderFaults+0x7e>
		x += LCD_PutStr(x, y, ATLAS_HEADER3_FAULT_LBL, fnt7x10);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	b298      	uxth	r0, r3
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	b299      	uxth	r1, r3
 80125ae:	4b4e      	ldr	r3, [pc, #312]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 80125b0:	4a50      	ldr	r2, [pc, #320]	; (80126f4 <atlasHeaderFaults+0x1b0>)
 80125b2:	f7ef fa1f 	bl	80019f4 <LCD_PutStr>
 80125b6:	4603      	mov	r3, r0
 80125b8:	461a      	mov	r2, r3
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	4413      	add	r3, r2
 80125be:	60fb      	str	r3, [r7, #12]
 80125c0:	e08a      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault4){
 80125c2:	4b48      	ldr	r3, [pc, #288]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 80125c4:	78db      	ldrb	r3, [r3, #3]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00d      	beq.n	80125e6 <atlasHeaderFaults+0xa2>
		x += LCD_PutStr(x, y, ATLAS_HEADER4_FAULT_LBL, fnt7x10);
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	b298      	uxth	r0, r3
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	b299      	uxth	r1, r3
 80125d2:	4b45      	ldr	r3, [pc, #276]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 80125d4:	4a48      	ldr	r2, [pc, #288]	; (80126f8 <atlasHeaderFaults+0x1b4>)
 80125d6:	f7ef fa0d 	bl	80019f4 <LCD_PutStr>
 80125da:	4603      	mov	r3, r0
 80125dc:	461a      	mov	r2, r3
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	4413      	add	r3, r2
 80125e2:	60fb      	str	r3, [r7, #12]
 80125e4:	e078      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault5){
 80125e6:	4b3f      	ldr	r3, [pc, #252]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 80125e8:	791b      	ldrb	r3, [r3, #4]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d00d      	beq.n	801260a <atlasHeaderFaults+0xc6>
		x += LCD_PutStr(x, y, ATLAS_HEADER5_FAULT_LBL, fnt7x10);
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	b298      	uxth	r0, r3
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	b299      	uxth	r1, r3
 80125f6:	4b3c      	ldr	r3, [pc, #240]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 80125f8:	4a40      	ldr	r2, [pc, #256]	; (80126fc <atlasHeaderFaults+0x1b8>)
 80125fa:	f7ef f9fb 	bl	80019f4 <LCD_PutStr>
 80125fe:	4603      	mov	r3, r0
 8012600:	461a      	mov	r2, r3
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	4413      	add	r3, r2
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	e066      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault6){
 801260a:	4b36      	ldr	r3, [pc, #216]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 801260c:	795b      	ldrb	r3, [r3, #5]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d00d      	beq.n	801262e <atlasHeaderFaults+0xea>
		x += LCD_PutStr(x, y, ATLAS_HEADER6_FAULT_LBL, fnt7x10);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	b298      	uxth	r0, r3
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	b299      	uxth	r1, r3
 801261a:	4b33      	ldr	r3, [pc, #204]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 801261c:	4a38      	ldr	r2, [pc, #224]	; (8012700 <atlasHeaderFaults+0x1bc>)
 801261e:	f7ef f9e9 	bl	80019f4 <LCD_PutStr>
 8012622:	4603      	mov	r3, r0
 8012624:	461a      	mov	r2, r3
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	4413      	add	r3, r2
 801262a:	60fb      	str	r3, [r7, #12]
 801262c:	e054      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault7){
 801262e:	4b2d      	ldr	r3, [pc, #180]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 8012630:	799b      	ldrb	r3, [r3, #6]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00d      	beq.n	8012652 <atlasHeaderFaults+0x10e>
		x += LCD_PutStr(x, y, ATLAS_HEADER7_FAULT_LBL, fnt7x10);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	b298      	uxth	r0, r3
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	b299      	uxth	r1, r3
 801263e:	4b2a      	ldr	r3, [pc, #168]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 8012640:	4a30      	ldr	r2, [pc, #192]	; (8012704 <atlasHeaderFaults+0x1c0>)
 8012642:	f7ef f9d7 	bl	80019f4 <LCD_PutStr>
 8012646:	4603      	mov	r3, r0
 8012648:	461a      	mov	r2, r3
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	4413      	add	r3, r2
 801264e:	60fb      	str	r3, [r7, #12]
 8012650:	e042      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault8){
 8012652:	4b24      	ldr	r3, [pc, #144]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 8012654:	7adb      	ldrb	r3, [r3, #11]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00d      	beq.n	8012676 <atlasHeaderFaults+0x132>
		x += LCD_PutStr(x, y, ATLAS_HEADER8_FAULT_LBL, fnt7x10);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	b298      	uxth	r0, r3
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	b299      	uxth	r1, r3
 8012662:	4b21      	ldr	r3, [pc, #132]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 8012664:	4a28      	ldr	r2, [pc, #160]	; (8012708 <atlasHeaderFaults+0x1c4>)
 8012666:	f7ef f9c5 	bl	80019f4 <LCD_PutStr>
 801266a:	4603      	mov	r3, r0
 801266c:	461a      	mov	r2, r3
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	4413      	add	r3, r2
 8012672:	60fb      	str	r3, [r7, #12]
 8012674:	e030      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.fault9){
 8012676:	4b1b      	ldr	r3, [pc, #108]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 8012678:	7b1b      	ldrb	r3, [r3, #12]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00d      	beq.n	801269a <atlasHeaderFaults+0x156>
		x += LCD_PutStr(x, y, ATLAS_HEADER9_FAULT_LBL, fnt7x10);
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	b298      	uxth	r0, r3
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	b299      	uxth	r1, r3
 8012686:	4b18      	ldr	r3, [pc, #96]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 8012688:	4a20      	ldr	r2, [pc, #128]	; (801270c <atlasHeaderFaults+0x1c8>)
 801268a:	f7ef f9b3 	bl	80019f4 <LCD_PutStr>
 801268e:	4603      	mov	r3, r0
 8012690:	461a      	mov	r2, r3
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	4413      	add	r3, r2
 8012696:	60fb      	str	r3, [r7, #12]
 8012698:	e01e      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else if(errorLED.ledDriver){
 801269a:	4b12      	ldr	r3, [pc, #72]	; (80126e4 <atlasHeaderFaults+0x1a0>)
 801269c:	7b5b      	ldrb	r3, [r3, #13]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d00d      	beq.n	80126be <atlasHeaderFaults+0x17a>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	b298      	uxth	r0, r3
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	b299      	uxth	r1, r3
 80126aa:	4b0f      	ldr	r3, [pc, #60]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 80126ac:	4a18      	ldr	r2, [pc, #96]	; (8012710 <atlasHeaderFaults+0x1cc>)
 80126ae:	f7ef f9a1 	bl	80019f4 <LCD_PutStr>
 80126b2:	4603      	mov	r3, r0
 80126b4:	461a      	mov	r2, r3
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	4413      	add	r3, r2
 80126ba:	60fb      	str	r3, [r7, #12]
 80126bc:	e00c      	b.n	80126d8 <atlasHeaderFaults+0x194>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	b298      	uxth	r0, r3
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	b299      	uxth	r1, r3
 80126c6:	4b08      	ldr	r3, [pc, #32]	; (80126e8 <atlasHeaderFaults+0x1a4>)
 80126c8:	4a12      	ldr	r2, [pc, #72]	; (8012714 <atlasHeaderFaults+0x1d0>)
 80126ca:	f7ef f993 	bl	80019f4 <LCD_PutStr>
 80126ce:	4603      	mov	r3, r0
 80126d0:	461a      	mov	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	4413      	add	r3, r2
 80126d6:	60fb      	str	r3, [r7, #12]
	}
	return x;
 80126d8:	68fb      	ldr	r3, [r7, #12]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	2000338c 	.word	0x2000338c
 80126e8:	0801b958 	.word	0x0801b958
 80126ec:	0801abbc 	.word	0x0801abbc
 80126f0:	0801abc4 	.word	0x0801abc4
 80126f4:	0801aa38 	.word	0x0801aa38
 80126f8:	0801aa44 	.word	0x0801aa44
 80126fc:	0801aa50 	.word	0x0801aa50
 8012700:	0801aa5c 	.word	0x0801aa5c
 8012704:	0801aa64 	.word	0x0801aa64
 8012708:	0801aa6c 	.word	0x0801aa6c
 801270c:	0801aa74 	.word	0x0801aa74
 8012710:	0801abcc 	.word	0x0801abcc
 8012714:	0801abd4 	.word	0x0801abd4

08012718 <atlasStatusADCsAndGPIOs>:

//draws the ADC and GPIO states in the status menu. Uses definitions from the project .h file to label each gpio/adc. alignment variables
//are used to adjust values if menus start looking awry
void atlasStatusADCsAndGPIOs(){
 8012718:	b580      	push	{r7, lr}
 801271a:	b08a      	sub	sp, #40	; 0x28
 801271c:	af02      	add	r7, sp, #8
	int inputGpioAlignment=245;
 801271e:	23f5      	movs	r3, #245	; 0xf5
 8012720:	61fb      	str	r3, [r7, #28]
	int adjacentSpacing = 20;
 8012722:	2314      	movs	r3, #20
 8012724:	61bb      	str	r3, [r7, #24]
	int firstADCAlignment = 5;
 8012726:	2305      	movs	r3, #5
 8012728:	617b      	str	r3, [r7, #20]
	int secondADCAlignment = 120;
 801272a:	2378      	movs	r3, #120	; 0x78
 801272c:	613b      	str	r3, [r7, #16]
	int secondInputGpioAlignment=329;
 801272e:	f240 1349 	movw	r3, #329	; 0x149
 8012732:	60fb      	str	r3, [r7, #12]
	int i=firstADCAlignment;
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	60bb      	str	r3, [r7, #8]
	int j=95;
 8012738:	235f      	movs	r3, #95	; 0x5f
 801273a:	607b      	str	r3, [r7, #4]
	int convertedFloat;
	i+= LCD_PutStr(i, j, ATLAS_AI0, fnt7x10);
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	b298      	uxth	r0, r3
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	b299      	uxth	r1, r3
 8012744:	4ba3      	ldr	r3, [pc, #652]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012746:	4aa4      	ldr	r2, [pc, #656]	; (80129d8 <atlasStatusADCsAndGPIOs+0x2c0>)
 8012748:	f7ef f954 	bl	80019f4 <LCD_PutStr>
 801274c:	4603      	mov	r3, r0
 801274e:	461a      	mov	r2, r3
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	4413      	add	r3, r2
 8012754:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VSYS;
 8012756:	4ba1      	ldr	r3, [pc, #644]	; (80129dc <atlasStatusADCsAndGPIOs+0x2c4>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4aa1      	ldr	r2, [pc, #644]	; (80129e0 <atlasStatusADCsAndGPIOs+0x2c8>)
 801275c:	009b      	lsls	r3, r3, #2
 801275e:	4413      	add	r3, r2
 8012760:	edd3 7a00 	vldr	s15, [r3]
 8012764:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80129e4 <atlasStatusADCsAndGPIOs+0x2cc>
 8012768:	ee67 7a87 	vmul.f32	s15, s15, s14
 801276c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012770:	ee17 3a90 	vmov	r3, s15
 8012774:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	b298      	uxth	r0, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	b299      	uxth	r1, r3
 801277e:	4b95      	ldr	r3, [pc, #596]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012780:	9300      	str	r3, [sp, #0]
 8012782:	2303      	movs	r3, #3
 8012784:	683a      	ldr	r2, [r7, #0]
 8012786:	f7ef f9d3 	bl	8001b30 <LCD_PutIntF>
 801278a:	4603      	mov	r3, r0
 801278c:	461a      	mov	r2, r3
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	4413      	add	r3, r2
 8012792:	68ba      	ldr	r2, [r7, #8]
 8012794:	4413      	add	r3, r2
 8012796:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI9, fnt7x10);
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	b298      	uxth	r0, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	b299      	uxth	r1, r3
 80127a4:	4b8b      	ldr	r3, [pc, #556]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 80127a6:	4a90      	ldr	r2, [pc, #576]	; (80129e8 <atlasStatusADCsAndGPIOs+0x2d0>)
 80127a8:	f7ef f924 	bl	80019f4 <LCD_PutStr>
 80127ac:	4603      	mov	r3, r0
 80127ae:	461a      	mov	r2, r3
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	4413      	add	r3, r2
 80127b4:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDD_MM;
 80127b6:	4b89      	ldr	r3, [pc, #548]	; (80129dc <atlasStatusADCsAndGPIOs+0x2c4>)
 80127b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ba:	4a89      	ldr	r2, [pc, #548]	; (80129e0 <atlasStatusADCsAndGPIOs+0x2c8>)
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	4413      	add	r3, r2
 80127c0:	edd3 7a00 	vldr	s15, [r3]
 80127c4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80129e4 <atlasStatusADCsAndGPIOs+0x2cc>
 80127c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127d0:	ee17 3a90 	vmov	r3, s15
 80127d4:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	b298      	uxth	r0, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	b299      	uxth	r1, r3
 80127de:	4b7d      	ldr	r3, [pc, #500]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 80127e0:	9300      	str	r3, [sp, #0]
 80127e2:	2303      	movs	r3, #3
 80127e4:	683a      	ldr	r2, [r7, #0]
 80127e6:	f7ef f9a3 	bl	8001b30 <LCD_PutIntF>
 80127ea:	4603      	mov	r3, r0
 80127ec:	461a      	mov	r2, r3
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	4413      	add	r3, r2
 80127f2:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN0, fnt7x10);
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	b298      	uxth	r0, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	b299      	uxth	r1, r3
 8012800:	4b74      	ldr	r3, [pc, #464]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012802:	4a7a      	ldr	r2, [pc, #488]	; (80129ec <atlasStatusADCsAndGPIOs+0x2d4>)
 8012804:	f7ef f8f6 	bl	80019f4 <LCD_PutStr>
 8012808:	4603      	mov	r3, r0
 801280a:	461a      	mov	r2, r3
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	4413      	add	r3, r2
 8012810:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_PV_PRSNT, fnt7x10)+adjacentSpacing;
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	b298      	uxth	r0, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	b299      	uxth	r1, r3
 801281a:	4b75      	ldr	r3, [pc, #468]	; (80129f0 <atlasStatusADCsAndGPIOs+0x2d8>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	461a      	mov	r2, r3
 8012820:	4b74      	ldr	r3, [pc, #464]	; (80129f4 <atlasStatusADCsAndGPIOs+0x2dc>)
 8012822:	5c9b      	ldrb	r3, [r3, r2]
 8012824:	461a      	mov	r2, r3
 8012826:	4b6b      	ldr	r3, [pc, #428]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012828:	f7ef f91c 	bl	8001a64 <LCD_PutInt>
 801282c:	4603      	mov	r3, r0
 801282e:	461a      	mov	r2, r3
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	4413      	add	r3, r2
 8012834:	68ba      	ldr	r2, [r7, #8]
 8012836:	4413      	add	r3, r2
 8012838:	60bb      	str	r3, [r7, #8]
	i=secondInputGpioAlignment;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN9, fnt7x10);
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	b298      	uxth	r0, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	b299      	uxth	r1, r3
 8012846:	4b63      	ldr	r3, [pc, #396]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012848:	4a6b      	ldr	r2, [pc, #428]	; (80129f8 <atlasStatusADCsAndGPIOs+0x2e0>)
 801284a:	f7ef f8d3 	bl	80019f4 <LCD_PutStr>
 801284e:	4603      	mov	r3, r0
 8012850:	461a      	mov	r2, r3
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	4413      	add	r3, r2
 8012856:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_IN9_GPIO, fnt7x10);
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	b298      	uxth	r0, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	b299      	uxth	r1, r3
 8012860:	4b63      	ldr	r3, [pc, #396]	; (80129f0 <atlasStatusADCsAndGPIOs+0x2d8>)
 8012862:	7a5b      	ldrb	r3, [r3, #9]
 8012864:	461a      	mov	r2, r3
 8012866:	4b63      	ldr	r3, [pc, #396]	; (80129f4 <atlasStatusADCsAndGPIOs+0x2dc>)
 8012868:	5c9b      	ldrb	r3, [r3, r2]
 801286a:	461a      	mov	r2, r3
 801286c:	4b59      	ldr	r3, [pc, #356]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 801286e:	f7ef f8f9 	bl	8001a64 <LCD_PutInt>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	4413      	add	r3, r2
 801287a:	60bb      	str	r3, [r7, #8]


	i=firstADCAlignment;
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	330f      	adds	r3, #15
 8012884:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI1, fnt7x10);
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	b298      	uxth	r0, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	b299      	uxth	r1, r3
 801288e:	4b51      	ldr	r3, [pc, #324]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012890:	4a5a      	ldr	r2, [pc, #360]	; (80129fc <atlasStatusADCsAndGPIOs+0x2e4>)
 8012892:	f7ef f8af 	bl	80019f4 <LCD_PutStr>
 8012896:	4603      	mov	r3, r0
 8012898:	461a      	mov	r2, r3
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	4413      	add	r3, r2
 801289e:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VREG_BOB;
 80128a0:	4b4e      	ldr	r3, [pc, #312]	; (80129dc <atlasStatusADCsAndGPIOs+0x2c4>)
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	4a4e      	ldr	r2, [pc, #312]	; (80129e0 <atlasStatusADCsAndGPIOs+0x2c8>)
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	edd3 7a00 	vldr	s15, [r3]
 80128ae:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80129e4 <atlasStatusADCsAndGPIOs+0x2cc>
 80128b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128ba:	ee17 3a90 	vmov	r3, s15
 80128be:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	b298      	uxth	r0, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	b299      	uxth	r1, r3
 80128c8:	4b42      	ldr	r3, [pc, #264]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	2303      	movs	r3, #3
 80128ce:	683a      	ldr	r2, [r7, #0]
 80128d0:	f7ef f92e 	bl	8001b30 <LCD_PutIntF>
 80128d4:	4603      	mov	r3, r0
 80128d6:	461a      	mov	r2, r3
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	4413      	add	r3, r2
 80128dc:	68ba      	ldr	r2, [r7, #8]
 80128de:	4413      	add	r3, r2
 80128e0:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI10, fnt7x10);
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	b298      	uxth	r0, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	b299      	uxth	r1, r3
 80128ee:	4b39      	ldr	r3, [pc, #228]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 80128f0:	4a43      	ldr	r2, [pc, #268]	; (8012a00 <atlasStatusADCsAndGPIOs+0x2e8>)
 80128f2:	f7ef f87f 	bl	80019f4 <LCD_PutStr>
 80128f6:	4603      	mov	r3, r0
 80128f8:	461a      	mov	r2, r3
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	4413      	add	r3, r2
 80128fe:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_SSC_CX;
 8012900:	4b36      	ldr	r3, [pc, #216]	; (80129dc <atlasStatusADCsAndGPIOs+0x2c4>)
 8012902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012904:	4a36      	ldr	r2, [pc, #216]	; (80129e0 <atlasStatusADCsAndGPIOs+0x2c8>)
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	4413      	add	r3, r2
 801290a:	edd3 7a00 	vldr	s15, [r3]
 801290e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80129e4 <atlasStatusADCsAndGPIOs+0x2cc>
 8012912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801291a:	ee17 3a90 	vmov	r3, s15
 801291e:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	b298      	uxth	r0, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	b299      	uxth	r1, r3
 8012928:	4b2a      	ldr	r3, [pc, #168]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 801292a:	9300      	str	r3, [sp, #0]
 801292c:	2303      	movs	r3, #3
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	f7ef f8fe 	bl	8001b30 <LCD_PutIntF>
 8012934:	4603      	mov	r3, r0
 8012936:	461a      	mov	r2, r3
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	4413      	add	r3, r2
 801293c:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN1, fnt7x10);
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	b298      	uxth	r0, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	b299      	uxth	r1, r3
 801294a:	4b22      	ldr	r3, [pc, #136]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 801294c:	4a2d      	ldr	r2, [pc, #180]	; (8012a04 <atlasStatusADCsAndGPIOs+0x2ec>)
 801294e:	f7ef f851 	bl	80019f4 <LCD_PutStr>
 8012952:	4603      	mov	r3, r0
 8012954:	461a      	mov	r2, r3
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	4413      	add	r3, r2
 801295a:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_WIFI_PRSNT, fnt7x10)+adjacentSpacing;
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	b298      	uxth	r0, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	b299      	uxth	r1, r3
 8012964:	4b22      	ldr	r3, [pc, #136]	; (80129f0 <atlasStatusADCsAndGPIOs+0x2d8>)
 8012966:	785b      	ldrb	r3, [r3, #1]
 8012968:	461a      	mov	r2, r3
 801296a:	4b22      	ldr	r3, [pc, #136]	; (80129f4 <atlasStatusADCsAndGPIOs+0x2dc>)
 801296c:	5c9b      	ldrb	r3, [r3, r2]
 801296e:	461a      	mov	r2, r3
 8012970:	4b18      	ldr	r3, [pc, #96]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012972:	f7ef f877 	bl	8001a64 <LCD_PutInt>
 8012976:	4603      	mov	r3, r0
 8012978:	461a      	mov	r2, r3
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	4413      	add	r3, r2
 801297e:	68ba      	ldr	r2, [r7, #8]
 8012980:	4413      	add	r3, r2
 8012982:	60bb      	str	r3, [r7, #8]
	i=secondInputGpioAlignment;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN10, fnt7x10);
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	b298      	uxth	r0, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	b299      	uxth	r1, r3
 8012990:	4b10      	ldr	r3, [pc, #64]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 8012992:	4a1d      	ldr	r2, [pc, #116]	; (8012a08 <atlasStatusADCsAndGPIOs+0x2f0>)
 8012994:	f7ef f82e 	bl	80019f4 <LCD_PutStr>
 8012998:	4603      	mov	r3, r0
 801299a:	461a      	mov	r2, r3
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	4413      	add	r3, r2
 80129a0:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_IN10_GPIO, fnt7x10);
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	b298      	uxth	r0, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	b299      	uxth	r1, r3
 80129aa:	4b11      	ldr	r3, [pc, #68]	; (80129f0 <atlasStatusADCsAndGPIOs+0x2d8>)
 80129ac:	7a9b      	ldrb	r3, [r3, #10]
 80129ae:	461a      	mov	r2, r3
 80129b0:	4b10      	ldr	r3, [pc, #64]	; (80129f4 <atlasStatusADCsAndGPIOs+0x2dc>)
 80129b2:	5c9b      	ldrb	r3, [r3, r2]
 80129b4:	461a      	mov	r2, r3
 80129b6:	4b07      	ldr	r3, [pc, #28]	; (80129d4 <atlasStatusADCsAndGPIOs+0x2bc>)
 80129b8:	f7ef f854 	bl	8001a64 <LCD_PutInt>
 80129bc:	4603      	mov	r3, r0
 80129be:	461a      	mov	r2, r3
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	4413      	add	r3, r2
 80129c4:	60bb      	str	r3, [r7, #8]

	i=firstADCAlignment;
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	60bb      	str	r3, [r7, #8]
	j+=15;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	330f      	adds	r3, #15
 80129ce:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI2, fnt7x10);
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	e01b      	b.n	8012a0c <atlasStatusADCsAndGPIOs+0x2f4>
 80129d4:	0801b958 	.word	0x0801b958
 80129d8:	0801abdc 	.word	0x0801abdc
 80129dc:	20000174 	.word	0x20000174
 80129e0:	2003119c 	.word	0x2003119c
 80129e4:	447a0000 	.word	0x447a0000
 80129e8:	0801abe4 	.word	0x0801abe4
 80129ec:	0801ab78 	.word	0x0801ab78
 80129f0:	20000168 	.word	0x20000168
 80129f4:	20028df0 	.word	0x20028df0
 80129f8:	0801abec 	.word	0x0801abec
 80129fc:	0801abf4 	.word	0x0801abf4
 8012a00:	0801ac00 	.word	0x0801ac00
 8012a04:	0801ab9c 	.word	0x0801ab9c
 8012a08:	0801ac08 	.word	0x0801ac08
 8012a0c:	b298      	uxth	r0, r3
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	b299      	uxth	r1, r3
 8012a12:	4ba6      	ldr	r3, [pc, #664]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012a14:	4aa6      	ldr	r2, [pc, #664]	; (8012cb0 <atlasStatusADCsAndGPIOs+0x598>)
 8012a16:	f7ee ffed 	bl	80019f4 <LCD_PutStr>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	4413      	add	r3, r2
 8012a22:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S5A;
 8012a24:	4ba3      	ldr	r3, [pc, #652]	; (8012cb4 <atlasStatusADCsAndGPIOs+0x59c>)
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	4aa3      	ldr	r2, [pc, #652]	; (8012cb8 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	4413      	add	r3, r2
 8012a2e:	edd3 7a00 	vldr	s15, [r3]
 8012a32:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8012cbc <atlasStatusADCsAndGPIOs+0x5a4>
 8012a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a3e:	ee17 3a90 	vmov	r3, s15
 8012a42:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	b298      	uxth	r0, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	b299      	uxth	r1, r3
 8012a4c:	4b97      	ldr	r3, [pc, #604]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	2303      	movs	r3, #3
 8012a52:	683a      	ldr	r2, [r7, #0]
 8012a54:	f7ef f86c 	bl	8001b30 <LCD_PutIntF>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	69bb      	ldr	r3, [r7, #24]
 8012a5e:	4413      	add	r3, r2
 8012a60:	68ba      	ldr	r2, [r7, #8]
 8012a62:	4413      	add	r3, r2
 8012a64:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI11, fnt7x10);
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	b298      	uxth	r0, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	b299      	uxth	r1, r3
 8012a72:	4b8e      	ldr	r3, [pc, #568]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012a74:	4a92      	ldr	r2, [pc, #584]	; (8012cc0 <atlasStatusADCsAndGPIOs+0x5a8>)
 8012a76:	f7ee ffbd 	bl	80019f4 <LCD_PutStr>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	4413      	add	r3, r2
 8012a82:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_PHY_1P2;
 8012a84:	4b8b      	ldr	r3, [pc, #556]	; (8012cb4 <atlasStatusADCsAndGPIOs+0x59c>)
 8012a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a88:	4a8b      	ldr	r2, [pc, #556]	; (8012cb8 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	edd3 7a00 	vldr	s15, [r3]
 8012a92:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012cbc <atlasStatusADCsAndGPIOs+0x5a4>
 8012a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a9e:	ee17 3a90 	vmov	r3, s15
 8012aa2:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	b298      	uxth	r0, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	b299      	uxth	r1, r3
 8012aac:	4b7f      	ldr	r3, [pc, #508]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	2303      	movs	r3, #3
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	f7ef f83c 	bl	8001b30 <LCD_PutIntF>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	461a      	mov	r2, r3
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	4413      	add	r3, r2
 8012ac0:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN2, fnt7x10);
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	b298      	uxth	r0, r3
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	b299      	uxth	r1, r3
 8012ace:	4b77      	ldr	r3, [pc, #476]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012ad0:	4a7c      	ldr	r2, [pc, #496]	; (8012cc4 <atlasStatusADCsAndGPIOs+0x5ac>)
 8012ad2:	f7ee ff8f 	bl	80019f4 <LCD_PutStr>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	461a      	mov	r2, r3
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	4413      	add	r3, r2
 8012ade:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_WIGIG_PRSNT, fnt7x10)+adjacentSpacing;
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	b298      	uxth	r0, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	b299      	uxth	r1, r3
 8012ae8:	4b77      	ldr	r3, [pc, #476]	; (8012cc8 <atlasStatusADCsAndGPIOs+0x5b0>)
 8012aea:	789b      	ldrb	r3, [r3, #2]
 8012aec:	461a      	mov	r2, r3
 8012aee:	4b77      	ldr	r3, [pc, #476]	; (8012ccc <atlasStatusADCsAndGPIOs+0x5b4>)
 8012af0:	5c9b      	ldrb	r3, [r3, r2]
 8012af2:	461a      	mov	r2, r3
 8012af4:	4b6d      	ldr	r3, [pc, #436]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012af6:	f7ee ffb5 	bl	8001a64 <LCD_PutInt>
 8012afa:	4603      	mov	r3, r0
 8012afc:	461a      	mov	r2, r3
 8012afe:	69bb      	ldr	r3, [r7, #24]
 8012b00:	4413      	add	r3, r2
 8012b02:	68ba      	ldr	r2, [r7, #8]
 8012b04:	4413      	add	r3, r2
 8012b06:	60bb      	str	r3, [r7, #8]
	i=secondInputGpioAlignment;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN11, fnt7x10);
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	b298      	uxth	r0, r3
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	b299      	uxth	r1, r3
 8012b14:	4b65      	ldr	r3, [pc, #404]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012b16:	4a6e      	ldr	r2, [pc, #440]	; (8012cd0 <atlasStatusADCsAndGPIOs+0x5b8>)
 8012b18:	f7ee ff6c 	bl	80019f4 <LCD_PutStr>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	461a      	mov	r2, r3
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	4413      	add	r3, r2
 8012b24:	60bb      	str	r3, [r7, #8]
	i+=LCD_PutInt(i,j,ATLAS_IN11_GPIO, fnt7x10);
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	b298      	uxth	r0, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	b299      	uxth	r1, r3
 8012b2e:	4b66      	ldr	r3, [pc, #408]	; (8012cc8 <atlasStatusADCsAndGPIOs+0x5b0>)
 8012b30:	7adb      	ldrb	r3, [r3, #11]
 8012b32:	461a      	mov	r2, r3
 8012b34:	4b65      	ldr	r3, [pc, #404]	; (8012ccc <atlasStatusADCsAndGPIOs+0x5b4>)
 8012b36:	5c9b      	ldrb	r3, [r3, r2]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	4b5c      	ldr	r3, [pc, #368]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012b3c:	f7ee ff92 	bl	8001a64 <LCD_PutInt>
 8012b40:	4603      	mov	r3, r0
 8012b42:	461a      	mov	r2, r3
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	4413      	add	r3, r2
 8012b48:	60bb      	str	r3, [r7, #8]

	i=firstADCAlignment;
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	330f      	adds	r3, #15
 8012b52:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI3, fnt7x10);
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	b298      	uxth	r0, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	b299      	uxth	r1, r3
 8012b5c:	4b53      	ldr	r3, [pc, #332]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012b5e:	4a5d      	ldr	r2, [pc, #372]	; (8012cd4 <atlasStatusADCsAndGPIOs+0x5bc>)
 8012b60:	f7ee ff48 	bl	80019f4 <LCD_PutStr>
 8012b64:	4603      	mov	r3, r0
 8012b66:	461a      	mov	r2, r3
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S6C;
 8012b6e:	4b51      	ldr	r3, [pc, #324]	; (8012cb4 <atlasStatusADCsAndGPIOs+0x59c>)
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	4a51      	ldr	r2, [pc, #324]	; (8012cb8 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	4413      	add	r3, r2
 8012b78:	edd3 7a00 	vldr	s15, [r3]
 8012b7c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8012cbc <atlasStatusADCsAndGPIOs+0x5a4>
 8012b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b88:	ee17 3a90 	vmov	r3, s15
 8012b8c:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	b298      	uxth	r0, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	b299      	uxth	r1, r3
 8012b96:	4b45      	ldr	r3, [pc, #276]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012b98:	9300      	str	r3, [sp, #0]
 8012b9a:	2303      	movs	r3, #3
 8012b9c:	683a      	ldr	r2, [r7, #0]
 8012b9e:	f7ee ffc7 	bl	8001b30 <LCD_PutIntF>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	4413      	add	r3, r2
 8012baa:	68ba      	ldr	r2, [r7, #8]
 8012bac:	4413      	add	r3, r2
 8012bae:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI12, fnt7x10);
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	b298      	uxth	r0, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	b299      	uxth	r1, r3
 8012bbc:	4b3b      	ldr	r3, [pc, #236]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012bbe:	4a46      	ldr	r2, [pc, #280]	; (8012cd8 <atlasStatusADCsAndGPIOs+0x5c0>)
 8012bc0:	f7ee ff18 	bl	80019f4 <LCD_PutStr>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	4413      	add	r3, r2
 8012bcc:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_CORE_PCIE;
 8012bce:	4b39      	ldr	r3, [pc, #228]	; (8012cb4 <atlasStatusADCsAndGPIOs+0x59c>)
 8012bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bd2:	4a39      	ldr	r2, [pc, #228]	; (8012cb8 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	edd3 7a00 	vldr	s15, [r3]
 8012bdc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012cbc <atlasStatusADCsAndGPIOs+0x5a4>
 8012be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012be8:	ee17 3a90 	vmov	r3, s15
 8012bec:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	b298      	uxth	r0, r3
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	b299      	uxth	r1, r3
 8012bf6:	4b2d      	ldr	r3, [pc, #180]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	2303      	movs	r3, #3
 8012bfc:	683a      	ldr	r2, [r7, #0]
 8012bfe:	f7ee ff97 	bl	8001b30 <LCD_PutIntF>
 8012c02:	4603      	mov	r3, r0
 8012c04:	461a      	mov	r2, r3
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	4413      	add	r3, r2
 8012c0a:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012c0c:	69fb      	ldr	r3, [r7, #28]
 8012c0e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN3, fnt7x10);
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	b298      	uxth	r0, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	b299      	uxth	r1, r3
 8012c18:	4b24      	ldr	r3, [pc, #144]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012c1a:	4a30      	ldr	r2, [pc, #192]	; (8012cdc <atlasStatusADCsAndGPIOs+0x5c4>)
 8012c1c:	f7ee feea 	bl	80019f4 <LCD_PutStr>
 8012c20:	4603      	mov	r3, r0
 8012c22:	461a      	mov	r2, r3
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	4413      	add	r3, r2
 8012c28:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_CODEC_PRSNT, fnt7x10);
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	b298      	uxth	r0, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	b299      	uxth	r1, r3
 8012c32:	4b25      	ldr	r3, [pc, #148]	; (8012cc8 <atlasStatusADCsAndGPIOs+0x5b0>)
 8012c34:	78db      	ldrb	r3, [r3, #3]
 8012c36:	461a      	mov	r2, r3
 8012c38:	4b24      	ldr	r3, [pc, #144]	; (8012ccc <atlasStatusADCsAndGPIOs+0x5b4>)
 8012c3a:	5c9b      	ldrb	r3, [r3, r2]
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	4b1b      	ldr	r3, [pc, #108]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012c40:	f7ee ff10 	bl	8001a64 <LCD_PutInt>


	i=firstADCAlignment;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	330f      	adds	r3, #15
 8012c4c:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI4, fnt7x10);
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	b298      	uxth	r0, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	b299      	uxth	r1, r3
 8012c56:	4b15      	ldr	r3, [pc, #84]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012c58:	4a21      	ldr	r2, [pc, #132]	; (8012ce0 <atlasStatusADCsAndGPIOs+0x5c8>)
 8012c5a:	f7ee fecb 	bl	80019f4 <LCD_PutStr>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	461a      	mov	r2, r3
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	4413      	add	r3, r2
 8012c66:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S4E;
 8012c68:	4b12      	ldr	r3, [pc, #72]	; (8012cb4 <atlasStatusADCsAndGPIOs+0x59c>)
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	4a12      	ldr	r2, [pc, #72]	; (8012cb8 <atlasStatusADCsAndGPIOs+0x5a0>)
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	4413      	add	r3, r2
 8012c72:	edd3 7a00 	vldr	s15, [r3]
 8012c76:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8012cbc <atlasStatusADCsAndGPIOs+0x5a4>
 8012c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c82:	ee17 3a90 	vmov	r3, s15
 8012c86:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	b298      	uxth	r0, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	b299      	uxth	r1, r3
 8012c90:	4b06      	ldr	r3, [pc, #24]	; (8012cac <atlasStatusADCsAndGPIOs+0x594>)
 8012c92:	9300      	str	r3, [sp, #0]
 8012c94:	2303      	movs	r3, #3
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	f7ee ff4a 	bl	8001b30 <LCD_PutIntF>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	69bb      	ldr	r3, [r7, #24]
 8012ca2:	4413      	add	r3, r2
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	e01c      	b.n	8012ce4 <atlasStatusADCsAndGPIOs+0x5cc>
 8012caa:	bf00      	nop
 8012cac:	0801b958 	.word	0x0801b958
 8012cb0:	0801ac10 	.word	0x0801ac10
 8012cb4:	20000174 	.word	0x20000174
 8012cb8:	2003119c 	.word	0x2003119c
 8012cbc:	447a0000 	.word	0x447a0000
 8012cc0:	0801ac18 	.word	0x0801ac18
 8012cc4:	0801aba4 	.word	0x0801aba4
 8012cc8:	20000168 	.word	0x20000168
 8012ccc:	20028df0 	.word	0x20028df0
 8012cd0:	0801ac24 	.word	0x0801ac24
 8012cd4:	0801ac2c 	.word	0x0801ac2c
 8012cd8:	0801ac34 	.word	0x0801ac34
 8012cdc:	0801abac 	.word	0x0801abac
 8012ce0:	0801ac40 	.word	0x0801ac40
 8012ce4:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI13, fnt7x10);
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	b298      	uxth	r0, r3
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	b299      	uxth	r1, r3
 8012cf2:	4ba4      	ldr	r3, [pc, #656]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012cf4:	4aa4      	ldr	r2, [pc, #656]	; (8012f88 <atlasStatusADCsAndGPIOs+0x870>)
 8012cf6:	f7ee fe7d 	bl	80019f4 <LCD_PutStr>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	4413      	add	r3, r2
 8012d02:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_CORE_USB;
 8012d04:	4ba1      	ldr	r3, [pc, #644]	; (8012f8c <atlasStatusADCsAndGPIOs+0x874>)
 8012d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d08:	4aa1      	ldr	r2, [pc, #644]	; (8012f90 <atlasStatusADCsAndGPIOs+0x878>)
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	4413      	add	r3, r2
 8012d0e:	edd3 7a00 	vldr	s15, [r3]
 8012d12:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8012f94 <atlasStatusADCsAndGPIOs+0x87c>
 8012d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d1e:	ee17 3a90 	vmov	r3, s15
 8012d22:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	b298      	uxth	r0, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	b299      	uxth	r1, r3
 8012d2c:	4b95      	ldr	r3, [pc, #596]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	2303      	movs	r3, #3
 8012d32:	683a      	ldr	r2, [r7, #0]
 8012d34:	f7ee fefc 	bl	8001b30 <LCD_PutIntF>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	4413      	add	r3, r2
 8012d40:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN4, fnt7x10);
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	b298      	uxth	r0, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	b299      	uxth	r1, r3
 8012d4e:	4b8d      	ldr	r3, [pc, #564]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012d50:	4a91      	ldr	r2, [pc, #580]	; (8012f98 <atlasStatusADCsAndGPIOs+0x880>)
 8012d52:	f7ee fe4f 	bl	80019f4 <LCD_PutStr>
 8012d56:	4603      	mov	r3, r0
 8012d58:	461a      	mov	r2, r3
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_RF_PRSNT, fnt7x10);
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	b298      	uxth	r0, r3
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	b299      	uxth	r1, r3
 8012d68:	4b8c      	ldr	r3, [pc, #560]	; (8012f9c <atlasStatusADCsAndGPIOs+0x884>)
 8012d6a:	791b      	ldrb	r3, [r3, #4]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	4b8c      	ldr	r3, [pc, #560]	; (8012fa0 <atlasStatusADCsAndGPIOs+0x888>)
 8012d70:	5c9b      	ldrb	r3, [r3, r2]
 8012d72:	461a      	mov	r2, r3
 8012d74:	4b83      	ldr	r3, [pc, #524]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012d76:	f7ee fe75 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	330f      	adds	r3, #15
 8012d82:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI5, fnt7x10);
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	b298      	uxth	r0, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	b299      	uxth	r1, r3
 8012d8c:	4b7d      	ldr	r3, [pc, #500]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012d8e:	4a85      	ldr	r2, [pc, #532]	; (8012fa4 <atlasStatusADCsAndGPIOs+0x88c>)
 8012d90:	f7ee fe30 	bl	80019f4 <LCD_PutStr>
 8012d94:	4603      	mov	r3, r0
 8012d96:	461a      	mov	r2, r3
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDDMX;
 8012d9e:	4b7b      	ldr	r3, [pc, #492]	; (8012f8c <atlasStatusADCsAndGPIOs+0x874>)
 8012da0:	695b      	ldr	r3, [r3, #20]
 8012da2:	4a7b      	ldr	r2, [pc, #492]	; (8012f90 <atlasStatusADCsAndGPIOs+0x878>)
 8012da4:	009b      	lsls	r3, r3, #2
 8012da6:	4413      	add	r3, r2
 8012da8:	edd3 7a00 	vldr	s15, [r3]
 8012dac:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8012f94 <atlasStatusADCsAndGPIOs+0x87c>
 8012db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012db8:	ee17 3a90 	vmov	r3, s15
 8012dbc:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	b298      	uxth	r0, r3
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	b299      	uxth	r1, r3
 8012dc6:	4b6f      	ldr	r3, [pc, #444]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	2303      	movs	r3, #3
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	f7ee feaf 	bl	8001b30 <LCD_PutIntF>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	4413      	add	r3, r2
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	4413      	add	r3, r2
 8012dde:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI14, fnt7x10);
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	b298      	uxth	r0, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	b299      	uxth	r1, r3
 8012dec:	4b65      	ldr	r3, [pc, #404]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012dee:	4a6e      	ldr	r2, [pc, #440]	; (8012fa8 <atlasStatusADCsAndGPIOs+0x890>)
 8012df0:	f7ee fe00 	bl	80019f4 <LCD_PutStr>
 8012df4:	4603      	mov	r3, r0
 8012df6:	461a      	mov	r2, r3
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_S5E;
 8012dfe:	4b63      	ldr	r3, [pc, #396]	; (8012f8c <atlasStatusADCsAndGPIOs+0x874>)
 8012e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e02:	4a63      	ldr	r2, [pc, #396]	; (8012f90 <atlasStatusADCsAndGPIOs+0x878>)
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4413      	add	r3, r2
 8012e08:	edd3 7a00 	vldr	s15, [r3]
 8012e0c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8012f94 <atlasStatusADCsAndGPIOs+0x87c>
 8012e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e18:	ee17 3a90 	vmov	r3, s15
 8012e1c:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	b298      	uxth	r0, r3
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	b299      	uxth	r1, r3
 8012e26:	4b57      	ldr	r3, [pc, #348]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	683a      	ldr	r2, [r7, #0]
 8012e2e:	f7ee fe7f 	bl	8001b30 <LCD_PutIntF>
 8012e32:	4603      	mov	r3, r0
 8012e34:	461a      	mov	r2, r3
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	4413      	add	r3, r2
 8012e3a:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN5, fnt7x10);
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	b298      	uxth	r0, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	b299      	uxth	r1, r3
 8012e48:	4b4e      	ldr	r3, [pc, #312]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012e4a:	4a58      	ldr	r2, [pc, #352]	; (8012fac <atlasStatusADCsAndGPIOs+0x894>)
 8012e4c:	f7ee fdd2 	bl	80019f4 <LCD_PutStr>
 8012e50:	4603      	mov	r3, r0
 8012e52:	461a      	mov	r2, r3
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	4413      	add	r3, r2
 8012e58:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN5_GPIO, fnt7x10);
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	b298      	uxth	r0, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	b299      	uxth	r1, r3
 8012e62:	4b4e      	ldr	r3, [pc, #312]	; (8012f9c <atlasStatusADCsAndGPIOs+0x884>)
 8012e64:	795b      	ldrb	r3, [r3, #5]
 8012e66:	461a      	mov	r2, r3
 8012e68:	4b4d      	ldr	r3, [pc, #308]	; (8012fa0 <atlasStatusADCsAndGPIOs+0x888>)
 8012e6a:	5c9b      	ldrb	r3, [r3, r2]
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	4b45      	ldr	r3, [pc, #276]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012e70:	f7ee fdf8 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	330f      	adds	r3, #15
 8012e7c:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI6, fnt7x10);
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	b298      	uxth	r0, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	b299      	uxth	r1, r3
 8012e86:	4b3f      	ldr	r3, [pc, #252]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012e88:	4a49      	ldr	r2, [pc, #292]	; (8012fb0 <atlasStatusADCsAndGPIOs+0x898>)
 8012e8a:	f7ee fdb3 	bl	80019f4 <LCD_PutStr>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	461a      	mov	r2, r3
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	4413      	add	r3, r2
 8012e96:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_LPI_MX;
 8012e98:	4b3c      	ldr	r3, [pc, #240]	; (8012f8c <atlasStatusADCsAndGPIOs+0x874>)
 8012e9a:	699b      	ldr	r3, [r3, #24]
 8012e9c:	4a3c      	ldr	r2, [pc, #240]	; (8012f90 <atlasStatusADCsAndGPIOs+0x878>)
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	4413      	add	r3, r2
 8012ea2:	edd3 7a00 	vldr	s15, [r3]
 8012ea6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8012f94 <atlasStatusADCsAndGPIOs+0x87c>
 8012eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eb2:	ee17 3a90 	vmov	r3, s15
 8012eb6:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	b298      	uxth	r0, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	b299      	uxth	r1, r3
 8012ec0:	4b30      	ldr	r3, [pc, #192]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	2303      	movs	r3, #3
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	f7ee fe32 	bl	8001b30 <LCD_PutIntF>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	461a      	mov	r2, r3
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	60bb      	str	r3, [r7, #8]
	i=secondADCAlignment;
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_AI15, fnt7x10);
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	b298      	uxth	r0, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	b299      	uxth	r1, r3
 8012ee6:	4b27      	ldr	r3, [pc, #156]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012ee8:	4a32      	ldr	r2, [pc, #200]	; (8012fb4 <atlasStatusADCsAndGPIOs+0x89c>)
 8012eea:	f7ee fd83 	bl	80019f4 <LCD_PutStr>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_1P8;
 8012ef8:	4b24      	ldr	r3, [pc, #144]	; (8012f8c <atlasStatusADCsAndGPIOs+0x874>)
 8012efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012efc:	4a24      	ldr	r2, [pc, #144]	; (8012f90 <atlasStatusADCsAndGPIOs+0x878>)
 8012efe:	009b      	lsls	r3, r3, #2
 8012f00:	4413      	add	r3, r2
 8012f02:	edd3 7a00 	vldr	s15, [r3]
 8012f06:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8012f94 <atlasStatusADCsAndGPIOs+0x87c>
 8012f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f12:	ee17 3a90 	vmov	r3, s15
 8012f16:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	b298      	uxth	r0, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	b299      	uxth	r1, r3
 8012f20:	4b18      	ldr	r3, [pc, #96]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	2303      	movs	r3, #3
 8012f26:	683a      	ldr	r2, [r7, #0]
 8012f28:	f7ee fe02 	bl	8001b30 <LCD_PutIntF>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	461a      	mov	r2, r3
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	4413      	add	r3, r2
 8012f34:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN6, fnt7x10);
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	b298      	uxth	r0, r3
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	b299      	uxth	r1, r3
 8012f42:	4b10      	ldr	r3, [pc, #64]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012f44:	4a1c      	ldr	r2, [pc, #112]	; (8012fb8 <atlasStatusADCsAndGPIOs+0x8a0>)
 8012f46:	f7ee fd55 	bl	80019f4 <LCD_PutStr>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	4413      	add	r3, r2
 8012f52:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN6_GPIO, fnt7x10);
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	b298      	uxth	r0, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	b299      	uxth	r1, r3
 8012f5c:	4b0f      	ldr	r3, [pc, #60]	; (8012f9c <atlasStatusADCsAndGPIOs+0x884>)
 8012f5e:	799b      	ldrb	r3, [r3, #6]
 8012f60:	461a      	mov	r2, r3
 8012f62:	4b0f      	ldr	r3, [pc, #60]	; (8012fa0 <atlasStatusADCsAndGPIOs+0x888>)
 8012f64:	5c9b      	ldrb	r3, [r3, r2]
 8012f66:	461a      	mov	r2, r3
 8012f68:	4b06      	ldr	r3, [pc, #24]	; (8012f84 <atlasStatusADCsAndGPIOs+0x86c>)
 8012f6a:	f7ee fd7b 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	60bb      	str	r3, [r7, #8]
	j+=15;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	330f      	adds	r3, #15
 8012f76:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI7, fnt7x10);
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	b298      	uxth	r0, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	b299      	uxth	r1, r3
 8012f80:	e01c      	b.n	8012fbc <atlasStatusADCsAndGPIOs+0x8a4>
 8012f82:	bf00      	nop
 8012f84:	0801b958 	.word	0x0801b958
 8012f88:	0801ac48 	.word	0x0801ac48
 8012f8c:	20000174 	.word	0x20000174
 8012f90:	2003119c 	.word	0x2003119c
 8012f94:	447a0000 	.word	0x447a0000
 8012f98:	0801abb4 	.word	0x0801abb4
 8012f9c:	20000168 	.word	0x20000168
 8012fa0:	20028df0 	.word	0x20028df0
 8012fa4:	0801ac54 	.word	0x0801ac54
 8012fa8:	0801ac5c 	.word	0x0801ac5c
 8012fac:	0801ac64 	.word	0x0801ac64
 8012fb0:	0801ac6c 	.word	0x0801ac6c
 8012fb4:	0801ac74 	.word	0x0801ac74
 8012fb8:	0801ac7c 	.word	0x0801ac7c
 8012fbc:	4b5b      	ldr	r3, [pc, #364]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 8012fbe:	4a5c      	ldr	r2, [pc, #368]	; (8013130 <atlasStatusADCsAndGPIOs+0xa18>)
 8012fc0:	f7ee fd18 	bl	80019f4 <LCD_PutStr>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	4413      	add	r3, r2
 8012fcc:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDDA_EBI;
 8012fce:	4b59      	ldr	r3, [pc, #356]	; (8013134 <atlasStatusADCsAndGPIOs+0xa1c>)
 8012fd0:	69db      	ldr	r3, [r3, #28]
 8012fd2:	4a59      	ldr	r2, [pc, #356]	; (8013138 <atlasStatusADCsAndGPIOs+0xa20>)
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	4413      	add	r3, r2
 8012fd8:	edd3 7a00 	vldr	s15, [r3]
 8012fdc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 801313c <atlasStatusADCsAndGPIOs+0xa24>
 8012fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fe8:	ee17 3a90 	vmov	r3, s15
 8012fec:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	b298      	uxth	r0, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	b299      	uxth	r1, r3
 8012ff6:	4b4d      	ldr	r3, [pc, #308]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 8012ff8:	9300      	str	r3, [sp, #0]
 8012ffa:	2303      	movs	r3, #3
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	f7ee fd97 	bl	8001b30 <LCD_PutIntF>
 8013002:	4603      	mov	r3, r0
 8013004:	461a      	mov	r2, r3
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	4413      	add	r3, r2
 801300a:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN7, fnt7x10);
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	b298      	uxth	r0, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	b299      	uxth	r1, r3
 8013018:	4b44      	ldr	r3, [pc, #272]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 801301a:	4a49      	ldr	r2, [pc, #292]	; (8013140 <atlasStatusADCsAndGPIOs+0xa28>)
 801301c:	f7ee fcea 	bl	80019f4 <LCD_PutStr>
 8013020:	4603      	mov	r3, r0
 8013022:	461a      	mov	r2, r3
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	4413      	add	r3, r2
 8013028:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN7_GPIO, fnt7x10);
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	b298      	uxth	r0, r3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	b299      	uxth	r1, r3
 8013032:	4b44      	ldr	r3, [pc, #272]	; (8013144 <atlasStatusADCsAndGPIOs+0xa2c>)
 8013034:	79db      	ldrb	r3, [r3, #7]
 8013036:	461a      	mov	r2, r3
 8013038:	4b43      	ldr	r3, [pc, #268]	; (8013148 <atlasStatusADCsAndGPIOs+0xa30>)
 801303a:	5c9b      	ldrb	r3, [r3, r2]
 801303c:	461a      	mov	r2, r3
 801303e:	4b3b      	ldr	r3, [pc, #236]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 8013040:	f7ee fd10 	bl	8001a64 <LCD_PutInt>

	i=firstADCAlignment;
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	60bb      	str	r3, [r7, #8]
	j+=15;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	330f      	adds	r3, #15
 801304c:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_AI8, fnt7x10);
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	b298      	uxth	r0, r3
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	b299      	uxth	r1, r3
 8013056:	4b35      	ldr	r3, [pc, #212]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 8013058:	4a3c      	ldr	r2, [pc, #240]	; (801314c <atlasStatusADCsAndGPIOs+0xa34>)
 801305a:	f7ee fccb 	bl	80019f4 <LCD_PutStr>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	4413      	add	r3, r2
 8013066:	60bb      	str	r3, [r7, #8]
	convertedFloat = 1000 * ATLAS_VDD_CX;
 8013068:	4b32      	ldr	r3, [pc, #200]	; (8013134 <atlasStatusADCsAndGPIOs+0xa1c>)
 801306a:	6a1b      	ldr	r3, [r3, #32]
 801306c:	4a32      	ldr	r2, [pc, #200]	; (8013138 <atlasStatusADCsAndGPIOs+0xa20>)
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	4413      	add	r3, r2
 8013072:	edd3 7a00 	vldr	s15, [r3]
 8013076:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801313c <atlasStatusADCsAndGPIOs+0xa24>
 801307a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801307e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013082:	ee17 3a90 	vmov	r3, s15
 8013086:	603b      	str	r3, [r7, #0]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	b298      	uxth	r0, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	b299      	uxth	r1, r3
 8013090:	4b26      	ldr	r3, [pc, #152]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	2303      	movs	r3, #3
 8013096:	683a      	ldr	r2, [r7, #0]
 8013098:	f7ee fd4a 	bl	8001b30 <LCD_PutIntF>
 801309c:	4603      	mov	r3, r0
 801309e:	461a      	mov	r2, r3
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	4413      	add	r3, r2
 80130a4:	60bb      	str	r3, [r7, #8]
	i=inputGpioAlignment;
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, ATLAS_IN8, fnt7x10);
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	b298      	uxth	r0, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	b299      	uxth	r1, r3
 80130b2:	4b1e      	ldr	r3, [pc, #120]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 80130b4:	4a26      	ldr	r2, [pc, #152]	; (8013150 <atlasStatusADCsAndGPIOs+0xa38>)
 80130b6:	f7ee fc9d 	bl	80019f4 <LCD_PutStr>
 80130ba:	4603      	mov	r3, r0
 80130bc:	461a      	mov	r2, r3
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	4413      	add	r3, r2
 80130c2:	60bb      	str	r3, [r7, #8]
	LCD_PutInt(i,j,ATLAS_IN8_GPIO, fnt7x10);
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	b298      	uxth	r0, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	b299      	uxth	r1, r3
 80130cc:	4b1d      	ldr	r3, [pc, #116]	; (8013144 <atlasStatusADCsAndGPIOs+0xa2c>)
 80130ce:	7a1b      	ldrb	r3, [r3, #8]
 80130d0:	461a      	mov	r2, r3
 80130d2:	4b1d      	ldr	r3, [pc, #116]	; (8013148 <atlasStatusADCsAndGPIOs+0xa30>)
 80130d4:	5c9b      	ldrb	r3, [r3, r2]
 80130d6:	461a      	mov	r2, r3
 80130d8:	4b14      	ldr	r3, [pc, #80]	; (801312c <atlasStatusADCsAndGPIOs+0xa14>)
 80130da:	f7ee fcc3 	bl	8001a64 <LCD_PutInt>
	//horizontal divider
	j=65;
 80130de:	2341      	movs	r3, #65	; 0x41
 80130e0:	607b      	str	r3, [r7, #4]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	3b01      	subs	r3, #1
 80130e8:	b299      	uxth	r1, r3
 80130ea:	4b1a      	ldr	r3, [pc, #104]	; (8013154 <atlasStatusADCsAndGPIOs+0xa3c>)
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	3b02      	subs	r3, #2
 80130f0:	b29a      	uxth	r2, r3
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	3301      	adds	r3, #1
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	2002      	movs	r0, #2
 80130fc:	f7ee f92c 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 8013100:	23e6      	movs	r3, #230	; 0xe6
 8013102:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	b29b      	uxth	r3, r3
 8013108:	3b03      	subs	r3, #3
 801310a:	b298      	uxth	r0, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	b299      	uxth	r1, r3
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	b29b      	uxth	r3, r3
 8013114:	3303      	adds	r3, #3
 8013116:	b29a      	uxth	r2, r3
 8013118:	4b0f      	ldr	r3, [pc, #60]	; (8013158 <atlasStatusADCsAndGPIOs+0xa40>)
 801311a:	881b      	ldrh	r3, [r3, #0]
 801311c:	3b02      	subs	r3, #2
 801311e:	b29b      	uxth	r3, r3
 8013120:	f7ee f91a 	bl	8001358 <LCD_FillRect>
}
 8013124:	bf00      	nop
 8013126:	3720      	adds	r7, #32
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	0801b958 	.word	0x0801b958
 8013130:	0801ac84 	.word	0x0801ac84
 8013134:	20000174 	.word	0x20000174
 8013138:	2003119c 	.word	0x2003119c
 801313c:	447a0000 	.word	0x447a0000
 8013140:	0801ac90 	.word	0x0801ac90
 8013144:	20000168 	.word	0x20000168
 8013148:	20028df0 	.word	0x20028df0
 801314c:	0801ac98 	.word	0x0801ac98
 8013150:	0801aca0 	.word	0x0801aca0
 8013154:	20028b62 	.word	0x20028b62
 8013158:	20028b64 	.word	0x20028b64

0801315c <atlasStatusFaults>:

//prints the faults for the board under the status menu. Uses definitions from the Project .h file. Labels should be short (<10 char)
//and fault messages should be relatively short (<12 char)
void atlasStatusFaults(){
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
	int i=10;
 8013162:	230a      	movs	r3, #10
 8013164:	617b      	str	r3, [r7, #20]
	int j=95;
 8013166:	235f      	movs	r3, #95	; 0x5f
 8013168:	613b      	str	r3, [r7, #16]
	int daughterCardAlignment=240;
 801316a:	23f0      	movs	r3, #240	; 0xf0
 801316c:	60fb      	str	r3, [r7, #12]
	int faultVerticalSpacing = 15;
 801316e:	230f      	movs	r3, #15
 8013170:	60bb      	str	r3, [r7, #8]
	int faultHorizontalSpacing=10;
 8013172:	230a      	movs	r3, #10
 8013174:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, ATLAS_FAULT1_LBL, fnt7x10);
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	b298      	uxth	r0, r3
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	b299      	uxth	r1, r3
 801317e:	4b91      	ldr	r3, [pc, #580]	; (80133c4 <atlasStatusFaults+0x268>)
 8013180:	4a91      	ldr	r2, [pc, #580]	; (80133c8 <atlasStatusFaults+0x26c>)
 8013182:	f7ee fc37 	bl	80019f4 <LCD_PutStr>
 8013186:	4603      	mov	r3, r0
 8013188:	461a      	mov	r2, r3
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	4413      	add	r3, r2
 801318e:	617b      	str	r3, [r7, #20]
	if(errorLED.zionFault){
 8013190:	4b8e      	ldr	r3, [pc, #568]	; (80133cc <atlasStatusFaults+0x270>)
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d008      	beq.n	80131aa <atlasStatusFaults+0x4e>
		LCD_PutStr(i, j, ATLAS_FAULT1_TRIGGER_MSG, fnt7x10);
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	b298      	uxth	r0, r3
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	b299      	uxth	r1, r3
 80131a0:	4b88      	ldr	r3, [pc, #544]	; (80133c4 <atlasStatusFaults+0x268>)
 80131a2:	4a8b      	ldr	r2, [pc, #556]	; (80133d0 <atlasStatusFaults+0x274>)
 80131a4:	f7ee fc26 	bl	80019f4 <LCD_PutStr>
 80131a8:	e007      	b.n	80131ba <atlasStatusFaults+0x5e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	b298      	uxth	r0, r3
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	b299      	uxth	r1, r3
 80131b2:	4b84      	ldr	r3, [pc, #528]	; (80133c4 <atlasStatusFaults+0x268>)
 80131b4:	4a87      	ldr	r2, [pc, #540]	; (80133d4 <atlasStatusFaults+0x278>)
 80131b6:	f7ee fc1d 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	b298      	uxth	r0, r3
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	b299      	uxth	r1, r3
 80131c6:	4b7f      	ldr	r3, [pc, #508]	; (80133c4 <atlasStatusFaults+0x268>)
 80131c8:	4a83      	ldr	r2, [pc, #524]	; (80133d8 <atlasStatusFaults+0x27c>)
 80131ca:	f7ee fc13 	bl	80019f4 <LCD_PutStr>
 80131ce:	4603      	mov	r3, r0
 80131d0:	461a      	mov	r2, r3
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	4413      	add	r3, r2
 80131d6:	617b      	str	r3, [r7, #20]
	if(ZION.SOC_EEPROM_Detected){
 80131d8:	4b80      	ldr	r3, [pc, #512]	; (80133dc <atlasStatusFaults+0x280>)
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d008      	beq.n	80131f2 <atlasStatusFaults+0x96>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	b298      	uxth	r0, r3
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	b299      	uxth	r1, r3
 80131e8:	4b76      	ldr	r3, [pc, #472]	; (80133c4 <atlasStatusFaults+0x268>)
 80131ea:	4a7d      	ldr	r2, [pc, #500]	; (80133e0 <atlasStatusFaults+0x284>)
 80131ec:	f7ee fc02 	bl	80019f4 <LCD_PutStr>
 80131f0:	e007      	b.n	8013202 <atlasStatusFaults+0xa6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	b298      	uxth	r0, r3
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	b299      	uxth	r1, r3
 80131fa:	4b72      	ldr	r3, [pc, #456]	; (80133c4 <atlasStatusFaults+0x268>)
 80131fc:	4a79      	ldr	r2, [pc, #484]	; (80133e4 <atlasStatusFaults+0x288>)
 80131fe:	f7ee fbf9 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013206:	693a      	ldr	r2, [r7, #16]
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	4413      	add	r3, r2
 801320c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT2_LBL, fnt7x10);
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	b298      	uxth	r0, r3
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	b299      	uxth	r1, r3
 8013216:	4b6b      	ldr	r3, [pc, #428]	; (80133c4 <atlasStatusFaults+0x268>)
 8013218:	4a73      	ldr	r2, [pc, #460]	; (80133e8 <atlasStatusFaults+0x28c>)
 801321a:	f7ee fbeb 	bl	80019f4 <LCD_PutStr>
 801321e:	4603      	mov	r3, r0
 8013220:	461a      	mov	r2, r3
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	4413      	add	r3, r2
 8013226:	617b      	str	r3, [r7, #20]
	if(errorLED.vsysPMIFault){
 8013228:	4b68      	ldr	r3, [pc, #416]	; (80133cc <atlasStatusFaults+0x270>)
 801322a:	785b      	ldrb	r3, [r3, #1]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d008      	beq.n	8013242 <atlasStatusFaults+0xe6>
		LCD_PutStr(i, j, ATLAS_FAULT2_TRIGGER_MSG, fnt7x10);
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	b298      	uxth	r0, r3
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	b299      	uxth	r1, r3
 8013238:	4b62      	ldr	r3, [pc, #392]	; (80133c4 <atlasStatusFaults+0x268>)
 801323a:	4a6c      	ldr	r2, [pc, #432]	; (80133ec <atlasStatusFaults+0x290>)
 801323c:	f7ee fbda 	bl	80019f4 <LCD_PutStr>
 8013240:	e007      	b.n	8013252 <atlasStatusFaults+0xf6>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	b298      	uxth	r0, r3
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	b299      	uxth	r1, r3
 801324a:	4b5e      	ldr	r3, [pc, #376]	; (80133c4 <atlasStatusFaults+0x268>)
 801324c:	4a61      	ldr	r2, [pc, #388]	; (80133d4 <atlasStatusFaults+0x278>)
 801324e:	f7ee fbd1 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	b298      	uxth	r0, r3
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	b299      	uxth	r1, r3
 801325e:	4b59      	ldr	r3, [pc, #356]	; (80133c4 <atlasStatusFaults+0x268>)
 8013260:	4a63      	ldr	r2, [pc, #396]	; (80133f0 <atlasStatusFaults+0x294>)
 8013262:	f7ee fbc7 	bl	80019f4 <LCD_PutStr>
 8013266:	4603      	mov	r3, r0
 8013268:	461a      	mov	r2, r3
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	4413      	add	r3, r2
 801326e:	617b      	str	r3, [r7, #20]
	if(ZION.ASIC_EEPROM_Detected){
 8013270:	4b5a      	ldr	r3, [pc, #360]	; (80133dc <atlasStatusFaults+0x280>)
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d008      	beq.n	801328a <atlasStatusFaults+0x12e>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	b298      	uxth	r0, r3
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	b299      	uxth	r1, r3
 8013280:	4b50      	ldr	r3, [pc, #320]	; (80133c4 <atlasStatusFaults+0x268>)
 8013282:	4a57      	ldr	r2, [pc, #348]	; (80133e0 <atlasStatusFaults+0x284>)
 8013284:	f7ee fbb6 	bl	80019f4 <LCD_PutStr>
 8013288:	e007      	b.n	801329a <atlasStatusFaults+0x13e>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	b298      	uxth	r0, r3
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	b299      	uxth	r1, r3
 8013292:	4b4c      	ldr	r3, [pc, #304]	; (80133c4 <atlasStatusFaults+0x268>)
 8013294:	4a53      	ldr	r2, [pc, #332]	; (80133e4 <atlasStatusFaults+0x288>)
 8013296:	f7ee fbad 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 801329e:	693a      	ldr	r2, [r7, #16]
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	4413      	add	r3, r2
 80132a4:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT3_LBL, fnt7x10);
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	b298      	uxth	r0, r3
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	b299      	uxth	r1, r3
 80132ae:	4b45      	ldr	r3, [pc, #276]	; (80133c4 <atlasStatusFaults+0x268>)
 80132b0:	4a50      	ldr	r2, [pc, #320]	; (80133f4 <atlasStatusFaults+0x298>)
 80132b2:	f7ee fb9f 	bl	80019f4 <LCD_PutStr>
 80132b6:	4603      	mov	r3, r0
 80132b8:	461a      	mov	r2, r3
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	4413      	add	r3, r2
 80132be:	617b      	str	r3, [r7, #20]
	if(errorLED.fault3){
 80132c0:	4b42      	ldr	r3, [pc, #264]	; (80133cc <atlasStatusFaults+0x270>)
 80132c2:	789b      	ldrb	r3, [r3, #2]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d008      	beq.n	80132da <atlasStatusFaults+0x17e>
		LCD_PutStr(i, j, ATLAS_FAULT3_TRIGGER_MSG, fnt7x10);
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	b298      	uxth	r0, r3
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	b299      	uxth	r1, r3
 80132d0:	4b3c      	ldr	r3, [pc, #240]	; (80133c4 <atlasStatusFaults+0x268>)
 80132d2:	4a49      	ldr	r2, [pc, #292]	; (80133f8 <atlasStatusFaults+0x29c>)
 80132d4:	f7ee fb8e 	bl	80019f4 <LCD_PutStr>
 80132d8:	e007      	b.n	80132ea <atlasStatusFaults+0x18e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	b298      	uxth	r0, r3
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	b299      	uxth	r1, r3
 80132e2:	4b38      	ldr	r3, [pc, #224]	; (80133c4 <atlasStatusFaults+0x268>)
 80132e4:	4a3b      	ldr	r2, [pc, #236]	; (80133d4 <atlasStatusFaults+0x278>)
 80132e6:	f7ee fb85 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	b298      	uxth	r0, r3
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	b299      	uxth	r1, r3
 80132f6:	4b33      	ldr	r3, [pc, #204]	; (80133c4 <atlasStatusFaults+0x268>)
 80132f8:	4a40      	ldr	r2, [pc, #256]	; (80133fc <atlasStatusFaults+0x2a0>)
 80132fa:	f7ee fb7b 	bl	80019f4 <LCD_PutStr>
 80132fe:	4603      	mov	r3, r0
 8013300:	461a      	mov	r2, r3
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	4413      	add	r3, r2
 8013306:	617b      	str	r3, [r7, #20]
	if(ZION.DISPLAY_EEPROM_Detected){
 8013308:	4b34      	ldr	r3, [pc, #208]	; (80133dc <atlasStatusFaults+0x280>)
 801330a:	691b      	ldr	r3, [r3, #16]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d008      	beq.n	8013322 <atlasStatusFaults+0x1c6>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	b298      	uxth	r0, r3
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	b299      	uxth	r1, r3
 8013318:	4b2a      	ldr	r3, [pc, #168]	; (80133c4 <atlasStatusFaults+0x268>)
 801331a:	4a31      	ldr	r2, [pc, #196]	; (80133e0 <atlasStatusFaults+0x284>)
 801331c:	f7ee fb6a 	bl	80019f4 <LCD_PutStr>
 8013320:	e007      	b.n	8013332 <atlasStatusFaults+0x1d6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	b298      	uxth	r0, r3
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	b299      	uxth	r1, r3
 801332a:	4b26      	ldr	r3, [pc, #152]	; (80133c4 <atlasStatusFaults+0x268>)
 801332c:	4a2d      	ldr	r2, [pc, #180]	; (80133e4 <atlasStatusFaults+0x288>)
 801332e:	f7ee fb61 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013336:	693a      	ldr	r2, [r7, #16]
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	4413      	add	r3, r2
 801333c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT4_LBL, fnt7x10);
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	b298      	uxth	r0, r3
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	b299      	uxth	r1, r3
 8013346:	4b1f      	ldr	r3, [pc, #124]	; (80133c4 <atlasStatusFaults+0x268>)
 8013348:	4a2d      	ldr	r2, [pc, #180]	; (8013400 <atlasStatusFaults+0x2a4>)
 801334a:	f7ee fb53 	bl	80019f4 <LCD_PutStr>
 801334e:	4603      	mov	r3, r0
 8013350:	461a      	mov	r2, r3
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	4413      	add	r3, r2
 8013356:	617b      	str	r3, [r7, #20]
	if(errorLED.fault4){
 8013358:	4b1c      	ldr	r3, [pc, #112]	; (80133cc <atlasStatusFaults+0x270>)
 801335a:	78db      	ldrb	r3, [r3, #3]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d008      	beq.n	8013372 <atlasStatusFaults+0x216>
		LCD_PutStr(i, j, ATLAS_FAULT4_TRIGGER_MSG, fnt7x10);
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	b298      	uxth	r0, r3
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	b299      	uxth	r1, r3
 8013368:	4b16      	ldr	r3, [pc, #88]	; (80133c4 <atlasStatusFaults+0x268>)
 801336a:	4a26      	ldr	r2, [pc, #152]	; (8013404 <atlasStatusFaults+0x2a8>)
 801336c:	f7ee fb42 	bl	80019f4 <LCD_PutStr>
 8013370:	e007      	b.n	8013382 <atlasStatusFaults+0x226>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	b298      	uxth	r0, r3
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	b299      	uxth	r1, r3
 801337a:	4b12      	ldr	r3, [pc, #72]	; (80133c4 <atlasStatusFaults+0x268>)
 801337c:	4a15      	ldr	r2, [pc, #84]	; (80133d4 <atlasStatusFaults+0x278>)
 801337e:	f7ee fb39 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013386:	693a      	ldr	r2, [r7, #16]
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	4413      	add	r3, r2
 801338c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT5_LBL, fnt7x10);
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	b298      	uxth	r0, r3
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	b299      	uxth	r1, r3
 8013396:	4b0b      	ldr	r3, [pc, #44]	; (80133c4 <atlasStatusFaults+0x268>)
 8013398:	4a1b      	ldr	r2, [pc, #108]	; (8013408 <atlasStatusFaults+0x2ac>)
 801339a:	f7ee fb2b 	bl	80019f4 <LCD_PutStr>
 801339e:	4603      	mov	r3, r0
 80133a0:	461a      	mov	r2, r3
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	4413      	add	r3, r2
 80133a6:	617b      	str	r3, [r7, #20]
	if(errorLED.fault5){
 80133a8:	4b08      	ldr	r3, [pc, #32]	; (80133cc <atlasStatusFaults+0x270>)
 80133aa:	791b      	ldrb	r3, [r3, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d02f      	beq.n	8013410 <atlasStatusFaults+0x2b4>
		LCD_PutStr(i, j, ATLAS_FAULT5_TRIGGER_MSG, fnt7x10);
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	b298      	uxth	r0, r3
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	b299      	uxth	r1, r3
 80133b8:	4b02      	ldr	r3, [pc, #8]	; (80133c4 <atlasStatusFaults+0x268>)
 80133ba:	4a14      	ldr	r2, [pc, #80]	; (801340c <atlasStatusFaults+0x2b0>)
 80133bc:	f7ee fb1a 	bl	80019f4 <LCD_PutStr>
 80133c0:	e02e      	b.n	8013420 <atlasStatusFaults+0x2c4>
 80133c2:	bf00      	nop
 80133c4:	0801b958 	.word	0x0801b958
 80133c8:	0801aca8 	.word	0x0801aca8
 80133cc:	2000338c 	.word	0x2000338c
 80133d0:	0801acb4 	.word	0x0801acb4
 80133d4:	0801acc4 	.word	0x0801acc4
 80133d8:	0801accc 	.word	0x0801accc
 80133dc:	20003328 	.word	0x20003328
 80133e0:	0801ab80 	.word	0x0801ab80
 80133e4:	0801acd4 	.word	0x0801acd4
 80133e8:	0801ace0 	.word	0x0801ace0
 80133ec:	0801acec 	.word	0x0801acec
 80133f0:	0801acfc 	.word	0x0801acfc
 80133f4:	0801abf4 	.word	0x0801abf4
 80133f8:	0801ad04 	.word	0x0801ad04
 80133fc:	0801ad14 	.word	0x0801ad14
 8013400:	0801ad20 	.word	0x0801ad20
 8013404:	0801ad2c 	.word	0x0801ad2c
 8013408:	0801ad3c 	.word	0x0801ad3c
 801340c:	0801ad48 	.word	0x0801ad48
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	b298      	uxth	r0, r3
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	b299      	uxth	r1, r3
 8013418:	4b65      	ldr	r3, [pc, #404]	; (80135b0 <atlasStatusFaults+0x454>)
 801341a:	4a66      	ldr	r2, [pc, #408]	; (80135b4 <atlasStatusFaults+0x458>)
 801341c:	f7ee faea 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013424:	693a      	ldr	r2, [r7, #16]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	4413      	add	r3, r2
 801342a:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT6_LBL, fnt7x10);
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	b298      	uxth	r0, r3
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	b299      	uxth	r1, r3
 8013434:	4b5e      	ldr	r3, [pc, #376]	; (80135b0 <atlasStatusFaults+0x454>)
 8013436:	4a60      	ldr	r2, [pc, #384]	; (80135b8 <atlasStatusFaults+0x45c>)
 8013438:	f7ee fadc 	bl	80019f4 <LCD_PutStr>
 801343c:	4603      	mov	r3, r0
 801343e:	461a      	mov	r2, r3
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	4413      	add	r3, r2
 8013444:	617b      	str	r3, [r7, #20]
	if(errorLED.fault6){
 8013446:	4b5d      	ldr	r3, [pc, #372]	; (80135bc <atlasStatusFaults+0x460>)
 8013448:	795b      	ldrb	r3, [r3, #5]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d008      	beq.n	8013460 <atlasStatusFaults+0x304>
		LCD_PutStr(i, j, ATLAS_FAULT6_TRIGGER_MSG, fnt7x10);
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	b298      	uxth	r0, r3
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	b299      	uxth	r1, r3
 8013456:	4b56      	ldr	r3, [pc, #344]	; (80135b0 <atlasStatusFaults+0x454>)
 8013458:	4a59      	ldr	r2, [pc, #356]	; (80135c0 <atlasStatusFaults+0x464>)
 801345a:	f7ee facb 	bl	80019f4 <LCD_PutStr>
 801345e:	e007      	b.n	8013470 <atlasStatusFaults+0x314>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	b298      	uxth	r0, r3
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	b299      	uxth	r1, r3
 8013468:	4b51      	ldr	r3, [pc, #324]	; (80135b0 <atlasStatusFaults+0x454>)
 801346a:	4a52      	ldr	r2, [pc, #328]	; (80135b4 <atlasStatusFaults+0x458>)
 801346c:	f7ee fac2 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013474:	693a      	ldr	r2, [r7, #16]
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	4413      	add	r3, r2
 801347a:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT7_LBL, fnt7x10);
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	b298      	uxth	r0, r3
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	b299      	uxth	r1, r3
 8013484:	4b4a      	ldr	r3, [pc, #296]	; (80135b0 <atlasStatusFaults+0x454>)
 8013486:	4a4f      	ldr	r2, [pc, #316]	; (80135c4 <atlasStatusFaults+0x468>)
 8013488:	f7ee fab4 	bl	80019f4 <LCD_PutStr>
 801348c:	4603      	mov	r3, r0
 801348e:	461a      	mov	r2, r3
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	4413      	add	r3, r2
 8013494:	617b      	str	r3, [r7, #20]
	if(errorLED.fault7){
 8013496:	4b49      	ldr	r3, [pc, #292]	; (80135bc <atlasStatusFaults+0x460>)
 8013498:	799b      	ldrb	r3, [r3, #6]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d008      	beq.n	80134b0 <atlasStatusFaults+0x354>
		LCD_PutStr(i, j, ATLAS_FAULT7_TRIGGER_MSG, fnt7x10);
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	b298      	uxth	r0, r3
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	b299      	uxth	r1, r3
 80134a6:	4b42      	ldr	r3, [pc, #264]	; (80135b0 <atlasStatusFaults+0x454>)
 80134a8:	4a47      	ldr	r2, [pc, #284]	; (80135c8 <atlasStatusFaults+0x46c>)
 80134aa:	f7ee faa3 	bl	80019f4 <LCD_PutStr>
 80134ae:	e007      	b.n	80134c0 <atlasStatusFaults+0x364>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	b298      	uxth	r0, r3
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	b299      	uxth	r1, r3
 80134b8:	4b3d      	ldr	r3, [pc, #244]	; (80135b0 <atlasStatusFaults+0x454>)
 80134ba:	4a3e      	ldr	r2, [pc, #248]	; (80135b4 <atlasStatusFaults+0x458>)
 80134bc:	f7ee fa9a 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80134c4:	693a      	ldr	r2, [r7, #16]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	4413      	add	r3, r2
 80134ca:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT8_LBL, fnt7x10);
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	b298      	uxth	r0, r3
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	b299      	uxth	r1, r3
 80134d4:	4b36      	ldr	r3, [pc, #216]	; (80135b0 <atlasStatusFaults+0x454>)
 80134d6:	4a3d      	ldr	r2, [pc, #244]	; (80135cc <atlasStatusFaults+0x470>)
 80134d8:	f7ee fa8c 	bl	80019f4 <LCD_PutStr>
 80134dc:	4603      	mov	r3, r0
 80134de:	461a      	mov	r2, r3
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	4413      	add	r3, r2
 80134e4:	617b      	str	r3, [r7, #20]
	if(errorLED.fault8){
 80134e6:	4b35      	ldr	r3, [pc, #212]	; (80135bc <atlasStatusFaults+0x460>)
 80134e8:	7adb      	ldrb	r3, [r3, #11]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d008      	beq.n	8013500 <atlasStatusFaults+0x3a4>
		LCD_PutStr(i, j, ATLAS_FAULT8_TRIGGER_MSG, fnt7x10);
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	b298      	uxth	r0, r3
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	b299      	uxth	r1, r3
 80134f6:	4b2e      	ldr	r3, [pc, #184]	; (80135b0 <atlasStatusFaults+0x454>)
 80134f8:	4a31      	ldr	r2, [pc, #196]	; (80135c0 <atlasStatusFaults+0x464>)
 80134fa:	f7ee fa7b 	bl	80019f4 <LCD_PutStr>
 80134fe:	e007      	b.n	8013510 <atlasStatusFaults+0x3b4>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	b298      	uxth	r0, r3
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	b299      	uxth	r1, r3
 8013508:	4b29      	ldr	r3, [pc, #164]	; (80135b0 <atlasStatusFaults+0x454>)
 801350a:	4a2a      	ldr	r2, [pc, #168]	; (80135b4 <atlasStatusFaults+0x458>)
 801350c:	f7ee fa72 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8013514:	693a      	ldr	r2, [r7, #16]
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	4413      	add	r3, r2
 801351a:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, ATLAS_FAULT9_LBL, fnt7x10);
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	b298      	uxth	r0, r3
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	b299      	uxth	r1, r3
 8013524:	4b22      	ldr	r3, [pc, #136]	; (80135b0 <atlasStatusFaults+0x454>)
 8013526:	4a2a      	ldr	r2, [pc, #168]	; (80135d0 <atlasStatusFaults+0x474>)
 8013528:	f7ee fa64 	bl	80019f4 <LCD_PutStr>
 801352c:	4603      	mov	r3, r0
 801352e:	461a      	mov	r2, r3
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	4413      	add	r3, r2
 8013534:	617b      	str	r3, [r7, #20]
	if(errorLED.fault9){
 8013536:	4b21      	ldr	r3, [pc, #132]	; (80135bc <atlasStatusFaults+0x460>)
 8013538:	7b1b      	ldrb	r3, [r3, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d008      	beq.n	8013550 <atlasStatusFaults+0x3f4>
		LCD_PutStr(i, j, ATLAS_FAULT9_TRIGGER_MSG, fnt7x10);
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	b298      	uxth	r0, r3
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	b299      	uxth	r1, r3
 8013546:	4b1a      	ldr	r3, [pc, #104]	; (80135b0 <atlasStatusFaults+0x454>)
 8013548:	4a1f      	ldr	r2, [pc, #124]	; (80135c8 <atlasStatusFaults+0x46c>)
 801354a:	f7ee fa53 	bl	80019f4 <LCD_PutStr>
 801354e:	e007      	b.n	8013560 <atlasStatusFaults+0x404>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	b298      	uxth	r0, r3
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	b299      	uxth	r1, r3
 8013558:	4b15      	ldr	r3, [pc, #84]	; (80135b0 <atlasStatusFaults+0x454>)
 801355a:	4a16      	ldr	r2, [pc, #88]	; (80135b4 <atlasStatusFaults+0x458>)
 801355c:	f7ee fa4a 	bl	80019f4 <LCD_PutStr>
	}


	//horizontal divider
	j=65;
 8013560:	2341      	movs	r3, #65	; 0x41
 8013562:	613b      	str	r3, [r7, #16]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	b29b      	uxth	r3, r3
 8013568:	3b01      	subs	r3, #1
 801356a:	b299      	uxth	r1, r3
 801356c:	4b19      	ldr	r3, [pc, #100]	; (80135d4 <atlasStatusFaults+0x478>)
 801356e:	881b      	ldrh	r3, [r3, #0]
 8013570:	3b02      	subs	r3, #2
 8013572:	b29a      	uxth	r2, r3
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	b29b      	uxth	r3, r3
 8013578:	3301      	adds	r3, #1
 801357a:	b29b      	uxth	r3, r3
 801357c:	2002      	movs	r0, #2
 801357e:	f7ed feeb 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 8013582:	23e6      	movs	r3, #230	; 0xe6
 8013584:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	b29b      	uxth	r3, r3
 801358a:	3b03      	subs	r3, #3
 801358c:	b298      	uxth	r0, r3
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	b299      	uxth	r1, r3
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	b29b      	uxth	r3, r3
 8013596:	3303      	adds	r3, #3
 8013598:	b29a      	uxth	r2, r3
 801359a:	4b0f      	ldr	r3, [pc, #60]	; (80135d8 <atlasStatusFaults+0x47c>)
 801359c:	881b      	ldrh	r3, [r3, #0]
 801359e:	3b02      	subs	r3, #2
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	f7ed fed9 	bl	8001358 <LCD_FillRect>

}
 80135a6:	bf00      	nop
 80135a8:	3718      	adds	r7, #24
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}
 80135ae:	bf00      	nop
 80135b0:	0801b958 	.word	0x0801b958
 80135b4:	0801acc4 	.word	0x0801acc4
 80135b8:	0801ad58 	.word	0x0801ad58
 80135bc:	2000338c 	.word	0x2000338c
 80135c0:	0801ad64 	.word	0x0801ad64
 80135c4:	0801ad70 	.word	0x0801ad70
 80135c8:	0801ad7c 	.word	0x0801ad7c
 80135cc:	0801ad88 	.word	0x0801ad88
 80135d0:	0801ad94 	.word	0x0801ad94
 80135d4:	20028b62 	.word	0x20028b62
 80135d8:	20028b64 	.word	0x20028b64

080135dc <atlasBootButtons>:

//Boot button method for the bootButton Task. Defines what buttons/modes are available to the project board and what timings to follow.
//Two main modes -- system already turned on and in a mode, system not in a boot mode.

int atlasBootButtons(int pwrBtnReady){
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
	//only bother running if the power switch is enabled
	while((ATLAS_VSYS > VSYS_FLT)){
 80135e4:	bf00      	nop
 80135e6:	4ba9      	ldr	r3, [pc, #676]	; (801388c <atlasBootButtons+0x2b0>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	4aa9      	ldr	r2, [pc, #676]	; (8013890 <atlasBootButtons+0x2b4>)
 80135ec:	009b      	lsls	r3, r3, #2
 80135ee:	4413      	add	r3, r2
 80135f0:	edd3 7a00 	vldr	s15, [r3]
 80135f4:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80135f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80135fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013600:	f340 820f 	ble.w	8013a22 <atlasBootButtons+0x446>
		//if we are in a boot mode
	  if(bootButtons.bootMode !=0){
 8013604:	4ba3      	ldr	r3, [pc, #652]	; (8013894 <atlasBootButtons+0x2b8>)
 8013606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 80f6 	beq.w	80137fa <atlasBootButtons+0x21e>
		  bootButtons.modeClear=0;
 801360e:	4ba1      	ldr	r3, [pc, #644]	; (8013894 <atlasBootButtons+0x2b8>)
 8013610:	2200      	movs	r2, #0
 8013612:	625a      	str	r2, [r3, #36]	; 0x24
		  //set the button that we need for our boot mode
		  if(bootButtons.btn1){ //DPAD UP
 8013614:	4b9f      	ldr	r3, [pc, #636]	; (8013894 <atlasBootButtons+0x2b8>)
 8013616:	689b      	ldr	r3, [r3, #8]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d006      	beq.n	801362a <atlasBootButtons+0x4e>
			  ATLAS_DPAD_UP_ON;
 801361c:	2201      	movs	r2, #1
 801361e:	2108      	movs	r1, #8
 8013620:	489d      	ldr	r0, [pc, #628]	; (8013898 <atlasBootButtons+0x2bc>)
 8013622:	f7f5 ffc7 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013626:	2301      	movs	r3, #1
 8013628:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn2){ //DPAD RIGHT
 801362a:	4b9a      	ldr	r3, [pc, #616]	; (8013894 <atlasBootButtons+0x2b8>)
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d006      	beq.n	8013640 <atlasBootButtons+0x64>
			  ATLAS_DPAD_RIGHT_ON;
 8013632:	2201      	movs	r2, #1
 8013634:	2110      	movs	r1, #16
 8013636:	4898      	ldr	r0, [pc, #608]	; (8013898 <atlasBootButtons+0x2bc>)
 8013638:	f7f5 ffbc 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 801363c:	2301      	movs	r3, #1
 801363e:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn3){ //DPAD LEFT
 8013640:	4b94      	ldr	r3, [pc, #592]	; (8013894 <atlasBootButtons+0x2b8>)
 8013642:	691b      	ldr	r3, [r3, #16]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d006      	beq.n	8013656 <atlasBootButtons+0x7a>
			  ATLAS_DPAD_LEFT_ON;
 8013648:	2201      	movs	r2, #1
 801364a:	2120      	movs	r1, #32
 801364c:	4892      	ldr	r0, [pc, #584]	; (8013898 <atlasBootButtons+0x2bc>)
 801364e:	f7f5 ffb1 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013652:	2301      	movs	r3, #1
 8013654:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn4){ //DPAD DOWN
 8013656:	4b8f      	ldr	r3, [pc, #572]	; (8013894 <atlasBootButtons+0x2b8>)
 8013658:	695b      	ldr	r3, [r3, #20]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d007      	beq.n	801366e <atlasBootButtons+0x92>
			  ATLAS_DPAD_DOWN_ON;
 801365e:	2201      	movs	r2, #1
 8013660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013664:	488c      	ldr	r0, [pc, #560]	; (8013898 <atlasBootButtons+0x2bc>)
 8013666:	f7f5 ffa5 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 801366a:	2301      	movs	r3, #1
 801366c:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.btn5){
 801366e:	4b89      	ldr	r3, [pc, #548]	; (8013894 <atlasBootButtons+0x2b8>)
 8013670:	699b      	ldr	r3, [r3, #24]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d007      	beq.n	8013686 <atlasBootButtons+0xaa>
			  BTN5_ON;
 8013676:	2201      	movs	r2, #1
 8013678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801367c:	4886      	ldr	r0, [pc, #536]	; (8013898 <atlasBootButtons+0x2bc>)
 801367e:	f7f5 ff99 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013682:	2301      	movs	r3, #1
 8013684:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.edl_sw){
 8013686:	4b83      	ldr	r3, [pc, #524]	; (8013894 <atlasBootButtons+0x2b8>)
 8013688:	69db      	ldr	r3, [r3, #28]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d007      	beq.n	801369e <atlasBootButtons+0xc2>
			  ATLAS_EDL_ON;
 801368e:	2201      	movs	r2, #1
 8013690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013694:	4881      	ldr	r0, [pc, #516]	; (801389c <atlasBootButtons+0x2c0>)
 8013696:	f7f5 ff8d 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 801369a:	2301      	movs	r3, #1
 801369c:	607b      	str	r3, [r7, #4]
		  }
		  if(bootButtons.ex_sw){
 801369e:	4b7d      	ldr	r3, [pc, #500]	; (8013894 <atlasBootButtons+0x2b8>)
 80136a0:	6a1b      	ldr	r3, [r3, #32]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d007      	beq.n	80136b6 <atlasBootButtons+0xda>
			  EX_SW_ON;
 80136a6:	2201      	movs	r2, #1
 80136a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80136ac:	487b      	ldr	r0, [pc, #492]	; (801389c <atlasBootButtons+0x2c0>)
 80136ae:	f7f5 ff81 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80136b2:	2301      	movs	r3, #1
 80136b4:	607b      	str	r3, [r7, #4]
		  }
		  //hold down the power button for ~13 seconds to cycle the chip
		  ATLAS_PWR_ON;
 80136b6:	2201      	movs	r2, #1
 80136b8:	2104      	movs	r1, #4
 80136ba:	4877      	ldr	r0, [pc, #476]	; (8013898 <atlasBootButtons+0x2bc>)
 80136bc:	f7f5 ff7a 	bl	80095b4 <HAL_GPIO_WritePin>
		  //setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
		  for(int x = 0; x<130;x++){
 80136c0:	2300      	movs	r3, #0
 80136c2:	617b      	str	r3, [r7, #20]
 80136c4:	e005      	b.n	80136d2 <atlasBootButtons+0xf6>
			  HAL_Delay(100);
 80136c6:	2064      	movs	r0, #100	; 0x64
 80136c8:	f7f4 faf4 	bl	8007cb4 <HAL_Delay>
		  for(int x = 0; x<130;x++){
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	3301      	adds	r3, #1
 80136d0:	617b      	str	r3, [r7, #20]
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	2b81      	cmp	r3, #129	; 0x81
 80136d6:	ddf6      	ble.n	80136c6 <atlasBootButtons+0xea>
		  }
		  //remove power
		  ATLAS_PWR_OFF;
 80136d8:	2200      	movs	r2, #0
 80136da:	2104      	movs	r1, #4
 80136dc:	486e      	ldr	r0, [pc, #440]	; (8013898 <atlasBootButtons+0x2bc>)
 80136de:	f7f5 ff69 	bl	80095b4 <HAL_GPIO_WritePin>
		  //give the soc a second to fully shutdown
		  HAL_Delay(300);
 80136e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80136e6:	f7f4 fae5 	bl	8007cb4 <HAL_Delay>
		  //turn the soc back on
		  ATLAS_PWR_ON;
 80136ea:	2201      	movs	r2, #1
 80136ec:	2104      	movs	r1, #4
 80136ee:	486a      	ldr	r0, [pc, #424]	; (8013898 <atlasBootButtons+0x2bc>)
 80136f0:	f7f5 ff60 	bl	80095b4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80136f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80136f8:	f7f4 fadc 	bl	8007cb4 <HAL_Delay>
		  ATLAS_PWR_OFF;
 80136fc:	2200      	movs	r2, #0
 80136fe:	2104      	movs	r1, #4
 8013700:	4865      	ldr	r0, [pc, #404]	; (8013898 <atlasBootButtons+0x2bc>)
 8013702:	f7f5 ff57 	bl	80095b4 <HAL_GPIO_WritePin>
		  //setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
		  //wait four seconds while pressing the mode button for the soc to recognize the button press
		  if(pwrBtnReady){
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d00d      	beq.n	8013728 <atlasBootButtons+0x14c>
			  for(int x = 0; x<40;x++){
 801370c:	2300      	movs	r3, #0
 801370e:	613b      	str	r3, [r7, #16]
 8013710:	e005      	b.n	801371e <atlasBootButtons+0x142>
				  HAL_Delay(100);
 8013712:	2064      	movs	r0, #100	; 0x64
 8013714:	f7f4 face 	bl	8007cb4 <HAL_Delay>
			  for(int x = 0; x<40;x++){
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	3301      	adds	r3, #1
 801371c:	613b      	str	r3, [r7, #16]
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	2b27      	cmp	r3, #39	; 0x27
 8013722:	ddf6      	ble.n	8013712 <atlasBootButtons+0x136>
			  }
			  pwrBtnReady=0;
 8013724:	2300      	movs	r3, #0
 8013726:	607b      	str	r3, [r7, #4]
		  }
		  //turn off all our buttons
		  ATLAS_DPAD_UP_OFF;
 8013728:	2200      	movs	r2, #0
 801372a:	2108      	movs	r1, #8
 801372c:	485a      	ldr	r0, [pc, #360]	; (8013898 <atlasBootButtons+0x2bc>)
 801372e:	f7f5 ff41 	bl	80095b4 <HAL_GPIO_WritePin>
		  ATLAS_DPAD_RIGHT_OFF;
 8013732:	2200      	movs	r2, #0
 8013734:	2110      	movs	r1, #16
 8013736:	4858      	ldr	r0, [pc, #352]	; (8013898 <atlasBootButtons+0x2bc>)
 8013738:	f7f5 ff3c 	bl	80095b4 <HAL_GPIO_WritePin>
		  ATLAS_DPAD_LEFT_OFF;
 801373c:	2200      	movs	r2, #0
 801373e:	2120      	movs	r1, #32
 8013740:	4855      	ldr	r0, [pc, #340]	; (8013898 <atlasBootButtons+0x2bc>)
 8013742:	f7f5 ff37 	bl	80095b4 <HAL_GPIO_WritePin>
		  ATLAS_DPAD_DOWN_OFF;
 8013746:	2200      	movs	r2, #0
 8013748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801374c:	4852      	ldr	r0, [pc, #328]	; (8013898 <atlasBootButtons+0x2bc>)
 801374e:	f7f5 ff31 	bl	80095b4 <HAL_GPIO_WritePin>
		  BTN5_OFF;
 8013752:	2200      	movs	r2, #0
 8013754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013758:	484f      	ldr	r0, [pc, #316]	; (8013898 <atlasBootButtons+0x2bc>)
 801375a:	f7f5 ff2b 	bl	80095b4 <HAL_GPIO_WritePin>
		  ATLAS_EDL_OFF;
 801375e:	2200      	movs	r2, #0
 8013760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013764:	484d      	ldr	r0, [pc, #308]	; (801389c <atlasBootButtons+0x2c0>)
 8013766:	f7f5 ff25 	bl	80095b4 <HAL_GPIO_WritePin>
		  EX_SW_OFF;
 801376a:	2200      	movs	r2, #0
 801376c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013770:	484a      	ldr	r0, [pc, #296]	; (801389c <atlasBootButtons+0x2c0>)
 8013772:	f7f5 ff1f 	bl	80095b4 <HAL_GPIO_WritePin>
		  //set our bootMode based off the button pressed
		  if(bootButtons.btn1){
 8013776:	4b47      	ldr	r3, [pc, #284]	; (8013894 <atlasBootButtons+0x2b8>)
 8013778:	689b      	ldr	r3, [r3, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d003      	beq.n	8013786 <atlasBootButtons+0x1aa>
			  bootButtons.bootMode= RECOVERY;
 801377e:	4b45      	ldr	r3, [pc, #276]	; (8013894 <atlasBootButtons+0x2b8>)
 8013780:	2204      	movs	r2, #4
 8013782:	629a      	str	r2, [r3, #40]	; 0x28
 8013784:	e01a      	b.n	80137bc <atlasBootButtons+0x1e0>
			  //errorLEDState[RECOVERY_LED]=1;
		  }
		  else if(bootButtons.btn2){
 8013786:	4b43      	ldr	r3, [pc, #268]	; (8013894 <atlasBootButtons+0x2b8>)
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d003      	beq.n	8013796 <atlasBootButtons+0x1ba>
			  bootButtons.bootMode= MASS_STORAGE;
 801378e:	4b41      	ldr	r3, [pc, #260]	; (8013894 <atlasBootButtons+0x2b8>)
 8013790:	2205      	movs	r2, #5
 8013792:	629a      	str	r2, [r3, #40]	; 0x28
 8013794:	e012      	b.n	80137bc <atlasBootButtons+0x1e0>
			 // errorLEDState[MASS_STORAGE_LED]=1;
		  }
		  else if(bootButtons.btn3){
 8013796:	4b3f      	ldr	r3, [pc, #252]	; (8013894 <atlasBootButtons+0x2b8>)
 8013798:	691b      	ldr	r3, [r3, #16]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d003      	beq.n	80137a6 <atlasBootButtons+0x1ca>
			  bootButtons.bootMode= UEFI;
 801379e:	4b3d      	ldr	r3, [pc, #244]	; (8013894 <atlasBootButtons+0x2b8>)
 80137a0:	2202      	movs	r2, #2
 80137a2:	629a      	str	r2, [r3, #40]	; 0x28
 80137a4:	e00a      	b.n	80137bc <atlasBootButtons+0x1e0>
			  //errorLEDState[UEFI_LED]=1;
		  }
		  else if(bootButtons.edl_sw){
 80137a6:	4b3b      	ldr	r3, [pc, #236]	; (8013894 <atlasBootButtons+0x2b8>)
 80137a8:	69db      	ldr	r3, [r3, #28]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d003      	beq.n	80137b6 <atlasBootButtons+0x1da>
			  bootButtons.bootMode= EDL;
 80137ae:	4b39      	ldr	r3, [pc, #228]	; (8013894 <atlasBootButtons+0x2b8>)
 80137b0:	2203      	movs	r2, #3
 80137b2:	629a      	str	r2, [r3, #40]	; 0x28
 80137b4:	e002      	b.n	80137bc <atlasBootButtons+0x1e0>
			  //errorLEDState[EDL_LED]=1;
		  }
		  else{
			  bootButtons.bootMode=STANDARD;
 80137b6:	4b37      	ldr	r3, [pc, #220]	; (8013894 <atlasBootButtons+0x2b8>)
 80137b8:	2201      	movs	r2, #1
 80137ba:	629a      	str	r2, [r3, #40]	; 0x28
			  //errorLEDState[STANDARD_LED]=1;
		  }
		  //clear the bootButton variables and set the clear flag for the display menu.
		  bootButtons.btn0=0;
 80137bc:	4b35      	ldr	r3, [pc, #212]	; (8013894 <atlasBootButtons+0x2b8>)
 80137be:	2200      	movs	r2, #0
 80137c0:	605a      	str	r2, [r3, #4]
		  bootButtons.btn1=0;
 80137c2:	4b34      	ldr	r3, [pc, #208]	; (8013894 <atlasBootButtons+0x2b8>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	609a      	str	r2, [r3, #8]
		  bootButtons.btn2=0;
 80137c8:	4b32      	ldr	r3, [pc, #200]	; (8013894 <atlasBootButtons+0x2b8>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	60da      	str	r2, [r3, #12]
		  bootButtons.btn3=0;
 80137ce:	4b31      	ldr	r3, [pc, #196]	; (8013894 <atlasBootButtons+0x2b8>)
 80137d0:	2200      	movs	r2, #0
 80137d2:	611a      	str	r2, [r3, #16]
		  bootButtons.btn4=0;
 80137d4:	4b2f      	ldr	r3, [pc, #188]	; (8013894 <atlasBootButtons+0x2b8>)
 80137d6:	2200      	movs	r2, #0
 80137d8:	615a      	str	r2, [r3, #20]
		  bootButtons.btn5=0;
 80137da:	4b2e      	ldr	r3, [pc, #184]	; (8013894 <atlasBootButtons+0x2b8>)
 80137dc:	2200      	movs	r2, #0
 80137de:	619a      	str	r2, [r3, #24]
		  bootButtons.edl_sw=0;
 80137e0:	4b2c      	ldr	r3, [pc, #176]	; (8013894 <atlasBootButtons+0x2b8>)
 80137e2:	2200      	movs	r2, #0
 80137e4:	61da      	str	r2, [r3, #28]
		  bootButtons.ex_sw=0;
 80137e6:	4b2b      	ldr	r3, [pc, #172]	; (8013894 <atlasBootButtons+0x2b8>)
 80137e8:	2200      	movs	r2, #0
 80137ea:	621a      	str	r2, [r3, #32]
		  bootButtons.modeClear=1;
 80137ec:	4b29      	ldr	r3, [pc, #164]	; (8013894 <atlasBootButtons+0x2b8>)
 80137ee:	2201      	movs	r2, #1
 80137f0:	625a      	str	r2, [r3, #36]	; 0x24
		  bootButtons.bootModeSet=0;
 80137f2:	4b28      	ldr	r3, [pc, #160]	; (8013894 <atlasBootButtons+0x2b8>)
 80137f4:	2200      	movs	r2, #0
 80137f6:	601a      	str	r2, [r3, #0]
		  else if(!(bootButtons.ex_sw)){
			  EX_SW_OFF;
			  //osDelay(300);
		  }
	  }
	  break;
 80137f8:	e112      	b.n	8013a20 <atlasBootButtons+0x444>
		  bootButtons.modeClear=0;
 80137fa:	4b26      	ldr	r3, [pc, #152]	; (8013894 <atlasBootButtons+0x2b8>)
 80137fc:	2200      	movs	r2, #0
 80137fe:	625a      	str	r2, [r3, #36]	; 0x24
		  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8013800:	4b24      	ldr	r3, [pc, #144]	; (8013894 <atlasBootButtons+0x2b8>)
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d102      	bne.n	801380e <atlasBootButtons+0x232>
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d06d      	beq.n	80138ea <atlasBootButtons+0x30e>
			  ATLAS_PWR_ON;
 801380e:	2201      	movs	r2, #1
 8013810:	2104      	movs	r1, #4
 8013812:	4821      	ldr	r0, [pc, #132]	; (8013898 <atlasBootButtons+0x2bc>)
 8013814:	f7f5 fece 	bl	80095b4 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8013818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801381c:	f7f4 fa4a 	bl	8007cb4 <HAL_Delay>
			  ATLAS_PWR_OFF;
 8013820:	2200      	movs	r2, #0
 8013822:	2104      	movs	r1, #4
 8013824:	481c      	ldr	r0, [pc, #112]	; (8013898 <atlasBootButtons+0x2bc>)
 8013826:	f7f5 fec5 	bl	80095b4 <HAL_GPIO_WritePin>
			  if(pwrBtnReady){
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d00d      	beq.n	801384c <atlasBootButtons+0x270>
				  for(int x = 0; x<40;x++){
 8013830:	2300      	movs	r3, #0
 8013832:	60fb      	str	r3, [r7, #12]
 8013834:	e005      	b.n	8013842 <atlasBootButtons+0x266>
						  HAL_Delay(100);
 8013836:	2064      	movs	r0, #100	; 0x64
 8013838:	f7f4 fa3c 	bl	8007cb4 <HAL_Delay>
				  for(int x = 0; x<40;x++){
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	3301      	adds	r3, #1
 8013840:	60fb      	str	r3, [r7, #12]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2b27      	cmp	r3, #39	; 0x27
 8013846:	ddf6      	ble.n	8013836 <atlasBootButtons+0x25a>
					  pwrBtnReady=0;
 8013848:	2300      	movs	r3, #0
 801384a:	607b      	str	r3, [r7, #4]
			  if(bootButtons.btn0){
 801384c:	4b11      	ldr	r3, [pc, #68]	; (8013894 <atlasBootButtons+0x2b8>)
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d003      	beq.n	801385c <atlasBootButtons+0x280>
				  bootButtons.bootMode= STANDARD;
 8013854:	4b0f      	ldr	r3, [pc, #60]	; (8013894 <atlasBootButtons+0x2b8>)
 8013856:	2201      	movs	r2, #1
 8013858:	629a      	str	r2, [r3, #40]	; 0x28
 801385a:	e028      	b.n	80138ae <atlasBootButtons+0x2d2>
			  else if(bootButtons.btn1){
 801385c:	4b0d      	ldr	r3, [pc, #52]	; (8013894 <atlasBootButtons+0x2b8>)
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d003      	beq.n	801386c <atlasBootButtons+0x290>
				  bootButtons.bootMode= RECOVERY;
 8013864:	4b0b      	ldr	r3, [pc, #44]	; (8013894 <atlasBootButtons+0x2b8>)
 8013866:	2204      	movs	r2, #4
 8013868:	629a      	str	r2, [r3, #40]	; 0x28
 801386a:	e020      	b.n	80138ae <atlasBootButtons+0x2d2>
			  else if(bootButtons.btn2){
 801386c:	4b09      	ldr	r3, [pc, #36]	; (8013894 <atlasBootButtons+0x2b8>)
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d003      	beq.n	801387c <atlasBootButtons+0x2a0>
				  bootButtons.bootMode= MASS_STORAGE;
 8013874:	4b07      	ldr	r3, [pc, #28]	; (8013894 <atlasBootButtons+0x2b8>)
 8013876:	2205      	movs	r2, #5
 8013878:	629a      	str	r2, [r3, #40]	; 0x28
 801387a:	e018      	b.n	80138ae <atlasBootButtons+0x2d2>
			  else if(bootButtons.btn3){
 801387c:	4b05      	ldr	r3, [pc, #20]	; (8013894 <atlasBootButtons+0x2b8>)
 801387e:	691b      	ldr	r3, [r3, #16]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d00d      	beq.n	80138a0 <atlasBootButtons+0x2c4>
				  bootButtons.bootMode= UEFI;
 8013884:	4b03      	ldr	r3, [pc, #12]	; (8013894 <atlasBootButtons+0x2b8>)
 8013886:	2202      	movs	r2, #2
 8013888:	629a      	str	r2, [r3, #40]	; 0x28
 801388a:	e010      	b.n	80138ae <atlasBootButtons+0x2d2>
 801388c:	20000174 	.word	0x20000174
 8013890:	2003119c 	.word	0x2003119c
 8013894:	20003360 	.word	0x20003360
 8013898:	40021400 	.word	0x40021400
 801389c:	40020400 	.word	0x40020400
			  else if(bootButtons.edl_sw){
 80138a0:	4b62      	ldr	r3, [pc, #392]	; (8013a2c <atlasBootButtons+0x450>)
 80138a2:	69db      	ldr	r3, [r3, #28]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <atlasBootButtons+0x2d2>
				  bootButtons.bootMode= EDL;
 80138a8:	4b60      	ldr	r3, [pc, #384]	; (8013a2c <atlasBootButtons+0x450>)
 80138aa:	2203      	movs	r2, #3
 80138ac:	629a      	str	r2, [r3, #40]	; 0x28
			  bootButtons.btn0=0;
 80138ae:	4b5f      	ldr	r3, [pc, #380]	; (8013a2c <atlasBootButtons+0x450>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 80138b4:	4b5d      	ldr	r3, [pc, #372]	; (8013a2c <atlasBootButtons+0x450>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 80138ba:	4b5c      	ldr	r3, [pc, #368]	; (8013a2c <atlasBootButtons+0x450>)
 80138bc:	2200      	movs	r2, #0
 80138be:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 80138c0:	4b5a      	ldr	r3, [pc, #360]	; (8013a2c <atlasBootButtons+0x450>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 80138c6:	4b59      	ldr	r3, [pc, #356]	; (8013a2c <atlasBootButtons+0x450>)
 80138c8:	2200      	movs	r2, #0
 80138ca:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 80138cc:	4b57      	ldr	r3, [pc, #348]	; (8013a2c <atlasBootButtons+0x450>)
 80138ce:	2200      	movs	r2, #0
 80138d0:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 80138d2:	4b56      	ldr	r3, [pc, #344]	; (8013a2c <atlasBootButtons+0x450>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 80138d8:	4b54      	ldr	r3, [pc, #336]	; (8013a2c <atlasBootButtons+0x450>)
 80138da:	2200      	movs	r2, #0
 80138dc:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 80138de:	4b53      	ldr	r3, [pc, #332]	; (8013a2c <atlasBootButtons+0x450>)
 80138e0:	2201      	movs	r2, #1
 80138e2:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 80138e4:	4b51      	ldr	r3, [pc, #324]	; (8013a2c <atlasBootButtons+0x450>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	601a      	str	r2, [r3, #0]
		  if(bootButtons.btn1){ //DPAD UP
 80138ea:	4b50      	ldr	r3, [pc, #320]	; (8013a2c <atlasBootButtons+0x450>)
 80138ec:	689b      	ldr	r3, [r3, #8]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d007      	beq.n	8013902 <atlasBootButtons+0x326>
			  ATLAS_DPAD_UP_ON;
 80138f2:	2201      	movs	r2, #1
 80138f4:	2108      	movs	r1, #8
 80138f6:	484e      	ldr	r0, [pc, #312]	; (8013a30 <atlasBootButtons+0x454>)
 80138f8:	f7f5 fe5c 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80138fc:	2301      	movs	r3, #1
 80138fe:	607b      	str	r3, [r7, #4]
 8013900:	e008      	b.n	8013914 <atlasBootButtons+0x338>
		  else if(!(bootButtons.btn1)){ //DPAD UP
 8013902:	4b4a      	ldr	r3, [pc, #296]	; (8013a2c <atlasBootButtons+0x450>)
 8013904:	689b      	ldr	r3, [r3, #8]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d104      	bne.n	8013914 <atlasBootButtons+0x338>
			  ATLAS_DPAD_UP_OFF;
 801390a:	2200      	movs	r2, #0
 801390c:	2108      	movs	r1, #8
 801390e:	4848      	ldr	r0, [pc, #288]	; (8013a30 <atlasBootButtons+0x454>)
 8013910:	f7f5 fe50 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(bootButtons.btn2){ //DPAD RIGHT
 8013914:	4b45      	ldr	r3, [pc, #276]	; (8013a2c <atlasBootButtons+0x450>)
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d007      	beq.n	801392c <atlasBootButtons+0x350>
			  ATLAS_DPAD_RIGHT_ON;
 801391c:	2201      	movs	r2, #1
 801391e:	2110      	movs	r1, #16
 8013920:	4843      	ldr	r0, [pc, #268]	; (8013a30 <atlasBootButtons+0x454>)
 8013922:	f7f5 fe47 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013926:	2301      	movs	r3, #1
 8013928:	607b      	str	r3, [r7, #4]
 801392a:	e008      	b.n	801393e <atlasBootButtons+0x362>
		  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 801392c:	4b3f      	ldr	r3, [pc, #252]	; (8013a2c <atlasBootButtons+0x450>)
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d104      	bne.n	801393e <atlasBootButtons+0x362>
			  ATLAS_DPAD_RIGHT_OFF;
 8013934:	2200      	movs	r2, #0
 8013936:	2110      	movs	r1, #16
 8013938:	483d      	ldr	r0, [pc, #244]	; (8013a30 <atlasBootButtons+0x454>)
 801393a:	f7f5 fe3b 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(bootButtons.btn3){ //DPAD LEFT
 801393e:	4b3b      	ldr	r3, [pc, #236]	; (8013a2c <atlasBootButtons+0x450>)
 8013940:	691b      	ldr	r3, [r3, #16]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d007      	beq.n	8013956 <atlasBootButtons+0x37a>
			  ATLAS_DPAD_LEFT_ON;
 8013946:	2201      	movs	r2, #1
 8013948:	2120      	movs	r1, #32
 801394a:	4839      	ldr	r0, [pc, #228]	; (8013a30 <atlasBootButtons+0x454>)
 801394c:	f7f5 fe32 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013950:	2301      	movs	r3, #1
 8013952:	607b      	str	r3, [r7, #4]
 8013954:	e008      	b.n	8013968 <atlasBootButtons+0x38c>
		  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8013956:	4b35      	ldr	r3, [pc, #212]	; (8013a2c <atlasBootButtons+0x450>)
 8013958:	691b      	ldr	r3, [r3, #16]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d104      	bne.n	8013968 <atlasBootButtons+0x38c>
			  ATLAS_DPAD_LEFT_OFF;
 801395e:	2200      	movs	r2, #0
 8013960:	2120      	movs	r1, #32
 8013962:	4833      	ldr	r0, [pc, #204]	; (8013a30 <atlasBootButtons+0x454>)
 8013964:	f7f5 fe26 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(bootButtons.btn4){
 8013968:	4b30      	ldr	r3, [pc, #192]	; (8013a2c <atlasBootButtons+0x450>)
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d008      	beq.n	8013982 <atlasBootButtons+0x3a6>
			  ATLAS_DPAD_DOWN_ON;
 8013970:	2201      	movs	r2, #1
 8013972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013976:	482e      	ldr	r0, [pc, #184]	; (8013a30 <atlasBootButtons+0x454>)
 8013978:	f7f5 fe1c 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 801397c:	2301      	movs	r3, #1
 801397e:	607b      	str	r3, [r7, #4]
 8013980:	e009      	b.n	8013996 <atlasBootButtons+0x3ba>
		  else if(!(bootButtons.btn4)){
 8013982:	4b2a      	ldr	r3, [pc, #168]	; (8013a2c <atlasBootButtons+0x450>)
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d105      	bne.n	8013996 <atlasBootButtons+0x3ba>
			  ATLAS_DPAD_DOWN_OFF;
 801398a:	2200      	movs	r2, #0
 801398c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013990:	4827      	ldr	r0, [pc, #156]	; (8013a30 <atlasBootButtons+0x454>)
 8013992:	f7f5 fe0f 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(bootButtons.btn5){
 8013996:	4b25      	ldr	r3, [pc, #148]	; (8013a2c <atlasBootButtons+0x450>)
 8013998:	699b      	ldr	r3, [r3, #24]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d008      	beq.n	80139b0 <atlasBootButtons+0x3d4>
			  BTN5_ON;
 801399e:	2201      	movs	r2, #1
 80139a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80139a4:	4822      	ldr	r0, [pc, #136]	; (8013a30 <atlasBootButtons+0x454>)
 80139a6:	f7f5 fe05 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80139aa:	2301      	movs	r3, #1
 80139ac:	607b      	str	r3, [r7, #4]
 80139ae:	e009      	b.n	80139c4 <atlasBootButtons+0x3e8>
		  else if(!(bootButtons.btn5)){
 80139b0:	4b1e      	ldr	r3, [pc, #120]	; (8013a2c <atlasBootButtons+0x450>)
 80139b2:	699b      	ldr	r3, [r3, #24]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d105      	bne.n	80139c4 <atlasBootButtons+0x3e8>
			  BTN5_OFF;
 80139b8:	2200      	movs	r2, #0
 80139ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80139be:	481c      	ldr	r0, [pc, #112]	; (8013a30 <atlasBootButtons+0x454>)
 80139c0:	f7f5 fdf8 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(bootButtons.edl_sw){
 80139c4:	4b19      	ldr	r3, [pc, #100]	; (8013a2c <atlasBootButtons+0x450>)
 80139c6:	69db      	ldr	r3, [r3, #28]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d008      	beq.n	80139de <atlasBootButtons+0x402>
			  ATLAS_EDL_ON;
 80139cc:	2201      	movs	r2, #1
 80139ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80139d2:	4818      	ldr	r0, [pc, #96]	; (8013a34 <atlasBootButtons+0x458>)
 80139d4:	f7f5 fdee 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 80139d8:	2301      	movs	r3, #1
 80139da:	607b      	str	r3, [r7, #4]
 80139dc:	e009      	b.n	80139f2 <atlasBootButtons+0x416>
		  else if(!(bootButtons.edl_sw)){
 80139de:	4b13      	ldr	r3, [pc, #76]	; (8013a2c <atlasBootButtons+0x450>)
 80139e0:	69db      	ldr	r3, [r3, #28]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d105      	bne.n	80139f2 <atlasBootButtons+0x416>
			  ATLAS_EDL_OFF;
 80139e6:	2200      	movs	r2, #0
 80139e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80139ec:	4811      	ldr	r0, [pc, #68]	; (8013a34 <atlasBootButtons+0x458>)
 80139ee:	f7f5 fde1 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(bootButtons.ex_sw){
 80139f2:	4b0e      	ldr	r3, [pc, #56]	; (8013a2c <atlasBootButtons+0x450>)
 80139f4:	6a1b      	ldr	r3, [r3, #32]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d008      	beq.n	8013a0c <atlasBootButtons+0x430>
			  EX_SW_ON;
 80139fa:	2201      	movs	r2, #1
 80139fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013a00:	480c      	ldr	r0, [pc, #48]	; (8013a34 <atlasBootButtons+0x458>)
 8013a02:	f7f5 fdd7 	bl	80095b4 <HAL_GPIO_WritePin>
			  pwrBtnReady=1;
 8013a06:	2301      	movs	r3, #1
 8013a08:	607b      	str	r3, [r7, #4]
	  break;
 8013a0a:	e009      	b.n	8013a20 <atlasBootButtons+0x444>
		  else if(!(bootButtons.ex_sw)){
 8013a0c:	4b07      	ldr	r3, [pc, #28]	; (8013a2c <atlasBootButtons+0x450>)
 8013a0e:	6a1b      	ldr	r3, [r3, #32]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d105      	bne.n	8013a20 <atlasBootButtons+0x444>
			  EX_SW_OFF;
 8013a14:	2200      	movs	r2, #0
 8013a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013a1a:	4806      	ldr	r0, [pc, #24]	; (8013a34 <atlasBootButtons+0x458>)
 8013a1c:	f7f5 fdca 	bl	80095b4 <HAL_GPIO_WritePin>
	  break;
 8013a20:	bf00      	nop
	}
	return pwrBtnReady;
 8013a22:	687b      	ldr	r3, [r7, #4]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3718      	adds	r7, #24
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	20003360 	.word	0x20003360
 8013a30:	40021400 	.word	0x40021400
 8013a34:	40020400 	.word	0x40020400

08013a38 <atlasErrorLEDs>:

void atlasErrorLEDs(){
 8013a38:	b5b0      	push	{r4, r5, r7, lr}
 8013a3a:	b092      	sub	sp, #72	; 0x48
 8013a3c:	af02      	add	r7, sp, #8
	float *presentADCValues;
	// An array of voltage rails that are monitored for faults.  Each element maps to the apporpriate ADC channel for monitoring
		// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
		uint8_t monitor_rails[] = {VSYS, VREG_BOB, VREG_S5A, VREG_S6C};
 8013a3e:	4bb2      	ldr	r3, [pc, #712]	; (8013d08 <atlasErrorLEDs+0x2d0>)
 8013a40:	62bb      	str	r3, [r7, #40]	; 0x28

		// An array of falling edge fault thresholds for the voltage rails that are monitored for faults.  Size of the array and index for each fault should match the voltage name in monitor_rails[].
		double monitor_fault_thresholds[] = {VSYS_FLT, VREG_BOB_FLT, VREG_S5A_FLT, VREG_S6C_FLT};
 8013a42:	4bb2      	ldr	r3, [pc, #712]	; (8013d0c <atlasErrorLEDs+0x2d4>)
 8013a44:	f107 0408 	add.w	r4, r7, #8
 8013a48:	461d      	mov	r5, r3
 8013a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013a52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// An array of platform gpio inputs that are monitored for faults.  Each element maps to the appropriate STM GPIO input for monitoring
		// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h
		uint8_t monitor_gpio[] = {SOC_IN6, SOC_IN7, SOC_IN8, SOC_IN11};
 8013a56:	4bae      	ldr	r3, [pc, #696]	; (8013d10 <atlasErrorLEDs+0x2d8>)
 8013a58:	607b      	str	r3, [r7, #4]

		// An array of logic fault thresholds for the GPIO input rails that are monitored for faults.  The fault thresholds should match the mapping used in monitor_gpio[].
		uint8_t gpio_thresholds[] = {SOC_IN6_FLT, SOC_IN7_FLT, SOC_IN8_FLT, SOC_IN11_FLT};
 8013a5a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8013a5e:	603b      	str	r3, [r7, #0]

		uint8_t * errorLEDptr;
		  uint8_t R = false;
 8013a60:	2300      	movs	r3, #0
 8013a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  uint8_t G = false;
 8013a66:	2300      	movs	r3, #0
 8013a68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  uint8_t B = false;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  // Check that the ADC are available, and if they are, retrieve the last recorded ADC outputs.
		  if(adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8013a72:	4ba8      	ldr	r3, [pc, #672]	; (8013d14 <atlasErrorLEDs+0x2dc>)
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00b      	beq.n	8013a92 <atlasErrorLEDs+0x5a>
 8013a7a:	4ba6      	ldr	r3, [pc, #664]	; (8013d14 <atlasErrorLEDs+0x2dc>)
 8013a7c:	785b      	ldrb	r3, [r3, #1]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d007      	beq.n	8013a92 <atlasErrorLEDs+0x5a>
 8013a82:	4ba4      	ldr	r3, [pc, #656]	; (8013d14 <atlasErrorLEDs+0x2dc>)
 8013a84:	789b      	ldrb	r3, [r3, #2]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d003      	beq.n	8013a92 <atlasErrorLEDs+0x5a>
			  presentADCValues = getADCValues();
 8013a8a:	f7f0 fa33 	bl	8003ef4 <getADCValues>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }

		  // Iterate through all the ADC channels that are monitored for faults
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8013a92:	2300      	movs	r3, #0
 8013a94:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8013a98:	e049      	b.n	8013b2e <atlasErrorLEDs+0xf6>
		  {
			  // This switch statement maps the appropriate errorLED struct fault flag to the errorLEDptr so that we can clear or set it.
			  // To add more faults simply add more case statements.
			  // PLATFORM TEMPLATE: edit the switch statement labels to match the entries in monitor_rails[] array.
			  switch (monitor_rails[rail])
 8013a9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013a9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8013aa8:	2b03      	cmp	r3, #3
 8013aaa:	d817      	bhi.n	8013adc <atlasErrorLEDs+0xa4>
 8013aac:	a201      	add	r2, pc, #4	; (adr r2, 8013ab4 <atlasErrorLEDs+0x7c>)
 8013aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ab2:	bf00      	nop
 8013ab4:	08013ac5 	.word	0x08013ac5
 8013ab8:	08013acb 	.word	0x08013acb
 8013abc:	08013ad1 	.word	0x08013ad1
 8013ac0:	08013ad7 	.word	0x08013ad7
			  {
			  case VSYS:
				  errorLEDptr = &errorLED.vsysPMIFault;
 8013ac4:	4b94      	ldr	r3, [pc, #592]	; (8013d18 <atlasErrorLEDs+0x2e0>)
 8013ac6:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013ac8:	e009      	b.n	8013ade <atlasErrorLEDs+0xa6>
			  case VREG_BOB:
				  errorLEDptr = &errorLED.fault3;
 8013aca:	4b94      	ldr	r3, [pc, #592]	; (8013d1c <atlasErrorLEDs+0x2e4>)
 8013acc:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013ace:	e006      	b.n	8013ade <atlasErrorLEDs+0xa6>
			  case VREG_S5A:
				  errorLEDptr = &errorLED.fault4;
 8013ad0:	4b93      	ldr	r3, [pc, #588]	; (8013d20 <atlasErrorLEDs+0x2e8>)
 8013ad2:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013ad4:	e003      	b.n	8013ade <atlasErrorLEDs+0xa6>
			  case VREG_S6C:
				  errorLEDptr = &errorLED.fault5;
 8013ad6:	4b93      	ldr	r3, [pc, #588]	; (8013d24 <atlasErrorLEDs+0x2ec>)
 8013ad8:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013ada:	e000      	b.n	8013ade <atlasErrorLEDs+0xa6>
			  default:
				  break;
 8013adc:	bf00      	nop
			  }
			  // If the voltage level is above the low fault threshold then clear the fault flag.
			  if (*(presentADCValues+monitor_rails[rail]) > monitor_fault_thresholds[rail])
 8013ade:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013ae2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013ae6:	4413      	add	r3, r2
 8013ae8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8013aec:	009b      	lsls	r3, r3, #2
 8013aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013af0:	4413      	add	r3, r2
 8013af2:	edd3 7a00 	vldr	s15, [r3]
 8013af6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8013afa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013afe:	00db      	lsls	r3, r3, #3
 8013b00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013b04:	4413      	add	r3, r2
 8013b06:	3b38      	subs	r3, #56	; 0x38
 8013b08:	ed93 7b00 	vldr	d7, [r3]
 8013b0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b14:	dd03      	ble.n	8013b1e <atlasErrorLEDs+0xe6>
			  {
				  *errorLEDptr = false;
 8013b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b18:	2200      	movs	r2, #0
 8013b1a:	701a      	strb	r2, [r3, #0]
 8013b1c:	e002      	b.n	8013b24 <atlasErrorLEDs+0xec>
			  }
			  else
			  {
				  *errorLEDptr = true;
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	2201      	movs	r2, #1
 8013b22:	701a      	strb	r2, [r3, #0]
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8013b24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013b28:	3301      	adds	r3, #1
 8013b2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8013b2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013b32:	2b03      	cmp	r3, #3
 8013b34:	d9b1      	bls.n	8013a9a <atlasErrorLEDs+0x62>
			  }
		  }

		  // Check GPIO inputs for faults. Iterate through the inputs that are supposed to be monitored for faults.
		  for (uint8_t input = 0; input < sizeof(monitor_gpio)/sizeof(monitor_gpio[0]); input++)
 8013b36:	2300      	movs	r3, #0
 8013b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013b3c:	e050      	b.n	8013be0 <atlasErrorLEDs+0x1a8>
		  {
			  // This switch statement maps the appropriate errorLED struct fault flag to the errorLEDptr so that we can clear or set it.
			  // To add more faults simply add more case statements.  Remember there is a maximum number of faults that can be displayed.
			  // PLATFORM TEMPLATE: edit the switch statement labels to match the entries in monitor_gpio[] array.
			  switch (monitor_gpio[input])
 8013b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013b42:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013b46:	4413      	add	r3, r2
 8013b48:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8013b4c:	2b0b      	cmp	r3, #11
 8013b4e:	d827      	bhi.n	8013ba0 <atlasErrorLEDs+0x168>
 8013b50:	a201      	add	r2, pc, #4	; (adr r2, 8013b58 <atlasErrorLEDs+0x120>)
 8013b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b56:	bf00      	nop
 8013b58:	08013b89 	.word	0x08013b89
 8013b5c:	08013ba1 	.word	0x08013ba1
 8013b60:	08013ba1 	.word	0x08013ba1
 8013b64:	08013b8f 	.word	0x08013b8f
 8013b68:	08013ba1 	.word	0x08013ba1
 8013b6c:	08013ba1 	.word	0x08013ba1
 8013b70:	08013ba1 	.word	0x08013ba1
 8013b74:	08013ba1 	.word	0x08013ba1
 8013b78:	08013b95 	.word	0x08013b95
 8013b7c:	08013ba1 	.word	0x08013ba1
 8013b80:	08013ba1 	.word	0x08013ba1
 8013b84:	08013b9b 	.word	0x08013b9b
			  {
			  case SOC_IN0:
				  errorLEDptr = &errorLED.fault6;
 8013b88:	4b67      	ldr	r3, [pc, #412]	; (8013d28 <atlasErrorLEDs+0x2f0>)
 8013b8a:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013b8c:	e009      	b.n	8013ba2 <atlasErrorLEDs+0x16a>
			  case SOC_IN3:
				  errorLEDptr = &errorLED.fault7;
 8013b8e:	4b67      	ldr	r3, [pc, #412]	; (8013d2c <atlasErrorLEDs+0x2f4>)
 8013b90:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013b92:	e006      	b.n	8013ba2 <atlasErrorLEDs+0x16a>
			  case SOC_IN8:
				  errorLEDptr = &errorLED.fault8;
 8013b94:	4b66      	ldr	r3, [pc, #408]	; (8013d30 <atlasErrorLEDs+0x2f8>)
 8013b96:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013b98:	e003      	b.n	8013ba2 <atlasErrorLEDs+0x16a>
			  case SOC_IN11:
				  errorLEDptr = &errorLED.fault9;
 8013b9a:	4b66      	ldr	r3, [pc, #408]	; (8013d34 <atlasErrorLEDs+0x2fc>)
 8013b9c:	63bb      	str	r3, [r7, #56]	; 0x38
				  break;
 8013b9e:	e000      	b.n	8013ba2 <atlasErrorLEDs+0x16a>
			  default:
				  break;
 8013ba0:	bf00      	nop
			  }
			  // If the voltage level is above the low fault threshold then clear the fault flag.
			  if (gpioInputBuf[monitor_gpio[input]] == gpio_thresholds[input])
 8013ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ba6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013baa:	4413      	add	r3, r2
 8013bac:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	4b61      	ldr	r3, [pc, #388]	; (8013d38 <atlasErrorLEDs+0x300>)
 8013bb4:	5c9a      	ldrb	r2, [r3, r2]
 8013bb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013bba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013bbe:	440b      	add	r3, r1
 8013bc0:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d103      	bne.n	8013bd0 <atlasErrorLEDs+0x198>
			  {
				  *errorLEDptr = true;
 8013bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bca:	2201      	movs	r2, #1
 8013bcc:	701a      	strb	r2, [r3, #0]
 8013bce:	e002      	b.n	8013bd6 <atlasErrorLEDs+0x19e>
			  }
			  else
			  {
				  *errorLEDptr = false;
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	701a      	strb	r2, [r3, #0]
		  for (uint8_t input = 0; input < sizeof(monitor_gpio)/sizeof(monitor_gpio[0]); input++)
 8013bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013bda:	3301      	adds	r3, #1
 8013bdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013be4:	2b03      	cmp	r3, #3
 8013be6:	d9aa      	bls.n	8013b3e <atlasErrorLEDs+0x106>
//			  errorLED.vsysPMIFault=false;
//		  }
//		  else{
//			  errorLED.vsysPMIFault=true;
//		  }
		  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8013be8:	4b54      	ldr	r3, [pc, #336]	; (8013d3c <atlasErrorLEDs+0x304>)
 8013bea:	689b      	ldr	r3, [r3, #8]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d103      	bne.n	8013bf8 <atlasErrorLEDs+0x1c0>
 8013bf0:	4b52      	ldr	r3, [pc, #328]	; (8013d3c <atlasErrorLEDs+0x304>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d103      	bne.n	8013c00 <atlasErrorLEDs+0x1c8>
 8013bf8:	4b50      	ldr	r3, [pc, #320]	; (8013d3c <atlasErrorLEDs+0x304>)
 8013bfa:	699b      	ldr	r3, [r3, #24]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	da03      	bge.n	8013c08 <atlasErrorLEDs+0x1d0>
			  errorLED.zionFault=true;
 8013c00:	4b4f      	ldr	r3, [pc, #316]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c02:	2201      	movs	r2, #1
 8013c04:	701a      	strb	r2, [r3, #0]
 8013c06:	e002      	b.n	8013c0e <atlasErrorLEDs+0x1d6>
		  }
		  else{
			  errorLED.zionFault=false;
 8013c08:	4b4d      	ldr	r3, [pc, #308]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	701a      	strb	r2, [r3, #0]
		  }
		  //HAL_I2C_IsDeviceReady(&hi2c1, SOC_ADDRESS, 2, 100)
		  int i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8013c0e:	4b4d      	ldr	r3, [pc, #308]	; (8013d44 <atlasErrorLEDs+0x30c>)
 8013c10:	7818      	ldrb	r0, [r3, #0]
 8013c12:	4b4c      	ldr	r3, [pc, #304]	; (8013d44 <atlasErrorLEDs+0x30c>)
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	2301      	movs	r3, #1
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	21f0      	movs	r1, #240	; 0xf0
 8013c1e:	f7ef fef9 	bl	8003a14 <writeI2CRegister>
 8013c22:	62f8      	str	r0, [r7, #44]	; 0x2c

		  //only allow the error led write commands if the led driver responds.
		  if(i2cCheck == HAL_OK)
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f040 80fb 	bne.w	8013e22 <atlasErrorLEDs+0x3ea>
		  {
			  errorLED.ledDriver=false;
 8013c2c:	4b44      	ldr	r3, [pc, #272]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	735a      	strb	r2, [r3, #13]

			  switch(bootButtons.bootMode)
 8013c32:	4b45      	ldr	r3, [pc, #276]	; (8013d48 <atlasErrorLEDs+0x310>)
 8013c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c36:	2b05      	cmp	r3, #5
 8013c38:	f200 809b 	bhi.w	8013d72 <atlasErrorLEDs+0x33a>
 8013c3c:	a201      	add	r2, pc, #4	; (adr r2, 8013c44 <atlasErrorLEDs+0x20c>)
 8013c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c42:	bf00      	nop
 8013c44:	08013c5d 	.word	0x08013c5d
 8013c48:	08013c7d 	.word	0x08013c7d
 8013c4c:	08013c9d 	.word	0x08013c9d
 8013c50:	08013cc3 	.word	0x08013cc3
 8013c54:	08013d4d 	.word	0x08013d4d
 8013c58:	08013ce3 	.word	0x08013ce3
			  {
				case UNINITIALIZED:
					errorLED.standard_boot=false;
 8013c5c:	4b38      	ldr	r3, [pc, #224]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c5e:	2200      	movs	r2, #0
 8013c60:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013c62:	4b37      	ldr	r3, [pc, #220]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c64:	2200      	movs	r2, #0
 8013c66:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8013c68:	4b35      	ldr	r3, [pc, #212]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013c6e:	4b34      	ldr	r3, [pc, #208]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c70:	2200      	movs	r2, #0
 8013c72:	71da      	strb	r2, [r3, #7]
					R = false;
 8013c74:	2300      	movs	r3, #0
 8013c76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8013c7a:	e07a      	b.n	8013d72 <atlasErrorLEDs+0x33a>
				case STANDARD:
					errorLED.standard_boot=true;
 8013c7c:	4b30      	ldr	r3, [pc, #192]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c7e:	2201      	movs	r2, #1
 8013c80:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013c82:	4b2f      	ldr	r3, [pc, #188]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c84:	2200      	movs	r2, #0
 8013c86:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8013c88:	4b2d      	ldr	r3, [pc, #180]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013c8e:	4b2c      	ldr	r3, [pc, #176]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	71da      	strb	r2, [r3, #7]
					G = true;
 8013c94:	2301      	movs	r3, #1
 8013c96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8013c9a:	e06a      	b.n	8013d72 <atlasErrorLEDs+0x33a>
				case UEFI:
					errorLED.standard_boot=false;
 8013c9c:	4b28      	ldr	r3, [pc, #160]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=true;
 8013ca2:	4b27      	ldr	r3, [pc, #156]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8013ca8:	4b25      	ldr	r3, [pc, #148]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013cae:	4b24      	ldr	r3, [pc, #144]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	71da      	strb	r2, [r3, #7]
					G = true;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					B = true;
 8013cba:	2301      	movs	r3, #1
 8013cbc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					break;
 8013cc0:	e057      	b.n	8013d72 <atlasErrorLEDs+0x33a>
				case EDL:
					errorLED.standard_boot=false;
 8013cc2:	4b1f      	ldr	r3, [pc, #124]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013cc8:	4b1d      	ldr	r3, [pc, #116]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cca:	2200      	movs	r2, #0
 8013ccc:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=true;
 8013cce:	4b1c      	ldr	r3, [pc, #112]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013cd4:	4b1a      	ldr	r3, [pc, #104]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	71da      	strb	r2, [r3, #7]
					B = true;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					break;
 8013ce0:	e047      	b.n	8013d72 <atlasErrorLEDs+0x33a>
				case MASS_STORAGE:
					errorLED.standard_boot=true;
 8013ce2:	4b17      	ldr	r3, [pc, #92]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8013ce8:	4b15      	ldr	r3, [pc, #84]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cea:	2200      	movs	r2, #0
 8013cec:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=true;
 8013cee:	4b14      	ldr	r3, [pc, #80]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013cf4:	4b12      	ldr	r3, [pc, #72]	; (8013d40 <atlasErrorLEDs+0x308>)
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	71da      	strb	r2, [r3, #7]
					R = true;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					B = true;
 8013d00:	2301      	movs	r3, #1
 8013d02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					break;
 8013d06:	e034      	b.n	8013d72 <atlasErrorLEDs+0x33a>
 8013d08:	03020100 	.word	0x03020100
 8013d0c:	0801ada0 	.word	0x0801ada0
 8013d10:	0b080706 	.word	0x0b080706
 8013d14:	20003324 	.word	0x20003324
 8013d18:	2000338d 	.word	0x2000338d
 8013d1c:	2000338e 	.word	0x2000338e
 8013d20:	2000338f 	.word	0x2000338f
 8013d24:	20003390 	.word	0x20003390
 8013d28:	20003391 	.word	0x20003391
 8013d2c:	20003392 	.word	0x20003392
 8013d30:	20003397 	.word	0x20003397
 8013d34:	20003398 	.word	0x20003398
 8013d38:	20028df0 	.word	0x20028df0
 8013d3c:	20003328 	.word	0x20003328
 8013d40:	2000338c 	.word	0x2000338c
 8013d44:	20000158 	.word	0x20000158
 8013d48:	20003360 	.word	0x20003360
				case RECOVERY:
					errorLED.standard_boot=false;
 8013d4c:	4b38      	ldr	r3, [pc, #224]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013d4e:	2200      	movs	r2, #0
 8013d50:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=true;
 8013d52:	4b37      	ldr	r3, [pc, #220]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013d54:	2201      	movs	r2, #1
 8013d56:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=true;
 8013d58:	4b35      	ldr	r3, [pc, #212]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8013d5e:	4b34      	ldr	r3, [pc, #208]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013d60:	2200      	movs	r2, #0
 8013d62:	71da      	strb	r2, [r3, #7]
					R = true;
 8013d64:	2301      	movs	r3, #1
 8013d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					G = true;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8013d70:	bf00      	nop
			  }
			  setRGBLED(R,G,B);
 8013d72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d76:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8013d7a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7ef ff70 	bl	8003c64 <setRGBLED>
			  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8013d84:	4b2a      	ldr	r3, [pc, #168]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	4619      	mov	r1, r3
 8013d8a:	2000      	movs	r0, #0
 8013d8c:	f7ef ff96 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013d90:	2014      	movs	r0, #20
 8013d92:	f7f3 ff8f 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 8013d96:	4b26      	ldr	r3, [pc, #152]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013d98:	785b      	ldrb	r3, [r3, #1]
 8013d9a:	4619      	mov	r1, r3
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	f7ef ff8d 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013da2:	2014      	movs	r0, #20
 8013da4:	f7f3 ff86 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT3,errorLED.fault3);
 8013da8:	4b21      	ldr	r3, [pc, #132]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013daa:	789b      	ldrb	r3, [r3, #2]
 8013dac:	4619      	mov	r1, r3
 8013dae:	2002      	movs	r0, #2
 8013db0:	f7ef ff84 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013db4:	2014      	movs	r0, #20
 8013db6:	f7f3 ff7d 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT4,errorLED.fault4);
 8013dba:	4b1d      	ldr	r3, [pc, #116]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013dbc:	78db      	ldrb	r3, [r3, #3]
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	2003      	movs	r0, #3
 8013dc2:	f7ef ff7b 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013dc6:	2014      	movs	r0, #20
 8013dc8:	f7f3 ff74 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT5,errorLED.fault5);
 8013dcc:	4b18      	ldr	r3, [pc, #96]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013dce:	791b      	ldrb	r3, [r3, #4]
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	2004      	movs	r0, #4
 8013dd4:	f7ef ff72 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013dd8:	2014      	movs	r0, #20
 8013dda:	f7f3 ff6b 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT6,errorLED.fault6);
 8013dde:	4b14      	ldr	r3, [pc, #80]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013de0:	795b      	ldrb	r3, [r3, #5]
 8013de2:	4619      	mov	r1, r3
 8013de4:	2005      	movs	r0, #5
 8013de6:	f7ef ff69 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013dea:	2014      	movs	r0, #20
 8013dec:	f7f3 ff62 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT7,errorLED.fault7);
 8013df0:	4b0f      	ldr	r3, [pc, #60]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013df2:	799b      	ldrb	r3, [r3, #6]
 8013df4:	4619      	mov	r1, r3
 8013df6:	2006      	movs	r0, #6
 8013df8:	f7ef ff60 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013dfc:	2014      	movs	r0, #20
 8013dfe:	f7f3 ff59 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT8,errorLED.fault8);
 8013e02:	4b0b      	ldr	r3, [pc, #44]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013e04:	7adb      	ldrb	r3, [r3, #11]
 8013e06:	4619      	mov	r1, r3
 8013e08:	200a      	movs	r0, #10
 8013e0a:	f7ef ff57 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8013e0e:	2014      	movs	r0, #20
 8013e10:	f7f3 ff50 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT9,errorLED.fault9);
 8013e14:	4b06      	ldr	r3, [pc, #24]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013e16:	7b1b      	ldrb	r3, [r3, #12]
 8013e18:	4619      	mov	r1, r3
 8013e1a:	200b      	movs	r0, #11
 8013e1c:	f7ef ff4e 	bl	8003cbc <setErrorLED>
		  }
		  else{
			  errorLED.ledDriver = true;
		  }
}
 8013e20:	e002      	b.n	8013e28 <atlasErrorLEDs+0x3f0>
			  errorLED.ledDriver = true;
 8013e22:	4b03      	ldr	r3, [pc, #12]	; (8013e30 <atlasErrorLEDs+0x3f8>)
 8013e24:	2201      	movs	r2, #1
 8013e26:	735a      	strb	r2, [r3, #13]
}
 8013e28:	bf00      	nop
 8013e2a:	3740      	adds	r7, #64	; 0x40
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8013e30:	2000338c 	.word	0x2000338c

08013e34 <defaultMainMenuFaultLedLabels>:
#include "default.h"

int timeNow = 0;


void defaultMainMenuFaultLedLabels(){
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
	int i,j;
	int ledFaultAlign=scr_width-90;
 8013e3a:	4b93      	ldr	r3, [pc, #588]	; (8014088 <defaultMainMenuFaultLedLabels+0x254>)
 8013e3c:	881b      	ldrh	r3, [r3, #0]
 8013e3e:	3b5a      	subs	r3, #90	; 0x5a
 8013e40:	617b      	str	r3, [r7, #20]
	int verticalSpacing=22;
 8013e42:	2316      	movs	r3, #22
 8013e44:	613b      	str	r3, [r7, #16]
	int horizontalSpacing=20;
 8013e46:	2314      	movs	r3, #20
 8013e48:	60fb      	str	r3, [r7, #12]
	i  = ledFaultAlign;
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8013e4e:	2303      	movs	r3, #3
 8013e50:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	b298      	uxth	r0, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	3b02      	subs	r3, #2
 8013e5c:	b299      	uxth	r1, r3
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	330c      	adds	r3, #12
 8013e64:	b29a      	uxth	r2, r3
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	3308      	adds	r3, #8
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	f7ed fa73 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8013e72:	68ba      	ldr	r2, [r7, #8]
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	4413      	add	r3, r2
 8013e78:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED1_FAULT_LBL, fnt7x10);
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	b298      	uxth	r0, r3
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	b299      	uxth	r1, r3
 8013e82:	4b82      	ldr	r3, [pc, #520]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8013e84:	4a82      	ldr	r2, [pc, #520]	; (8014090 <defaultMainMenuFaultLedLabels+0x25c>)
 8013e86:	f7ed fdb5 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	4413      	add	r3, r2
 8013e90:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	b298      	uxth	r0, r3
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	3b02      	subs	r3, #2
 8013ea0:	b299      	uxth	r1, r3
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	330c      	adds	r3, #12
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	3308      	adds	r3, #8
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	f7ed fa51 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8013eb6:	68ba      	ldr	r2, [r7, #8]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	4413      	add	r3, r2
 8013ebc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED2_FAULT_LBL, fnt7x10);
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	b298      	uxth	r0, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	b299      	uxth	r1, r3
 8013ec6:	4b71      	ldr	r3, [pc, #452]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8013ec8:	4a72      	ldr	r2, [pc, #456]	; (8014094 <defaultMainMenuFaultLedLabels+0x260>)
 8013eca:	f7ed fd93 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	4413      	add	r3, r2
 8013ed8:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	b298      	uxth	r0, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	3b02      	subs	r3, #2
 8013ee4:	b299      	uxth	r1, r3
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	330c      	adds	r3, #12
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	3308      	adds	r3, #8
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	f7ed fa2f 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	4413      	add	r3, r2
 8013f00:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED3_FAULT_LBL, fnt7x10);
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	b298      	uxth	r0, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	b299      	uxth	r1, r3
 8013f0a:	4b60      	ldr	r3, [pc, #384]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8013f0c:	4a62      	ldr	r2, [pc, #392]	; (8014098 <defaultMainMenuFaultLedLabels+0x264>)
 8013f0e:	f7ed fd71 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	4413      	add	r3, r2
 8013f18:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	b298      	uxth	r0, r3
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	3b02      	subs	r3, #2
 8013f28:	b299      	uxth	r1, r3
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	330c      	adds	r3, #12
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	3308      	adds	r3, #8
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	f7ed fa0d 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	4413      	add	r3, r2
 8013f44:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED4_FAULT_LBL, fnt7x10);
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	b298      	uxth	r0, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	b299      	uxth	r1, r3
 8013f4e:	4b4f      	ldr	r3, [pc, #316]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8013f50:	4a52      	ldr	r2, [pc, #328]	; (801409c <defaultMainMenuFaultLedLabels+0x268>)
 8013f52:	f7ed fd4f 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	60bb      	str	r3, [r7, #8]
	j  += verticalSpacing;
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	4413      	add	r3, r2
 8013f60:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	b298      	uxth	r0, r3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	3b02      	subs	r3, #2
 8013f6c:	b299      	uxth	r1, r3
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	330c      	adds	r3, #12
 8013f74:	b29a      	uxth	r2, r3
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	3308      	adds	r3, #8
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	f7ed f9eb 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8013f82:	68ba      	ldr	r2, [r7, #8]
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	4413      	add	r3, r2
 8013f88:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED5_FAULT_LBL, fnt7x10);
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	b298      	uxth	r0, r3
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	b299      	uxth	r1, r3
 8013f92:	4b3e      	ldr	r3, [pc, #248]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8013f94:	4a42      	ldr	r2, [pc, #264]	; (80140a0 <defaultMainMenuFaultLedLabels+0x26c>)
 8013f96:	f7ed fd2d 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	b298      	uxth	r0, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	3b02      	subs	r3, #2
 8013fb0:	b299      	uxth	r1, r3
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	330c      	adds	r3, #12
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	3308      	adds	r3, #8
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	f7ed f9c9 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 8013fc6:	68ba      	ldr	r2, [r7, #8]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	4413      	add	r3, r2
 8013fcc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED6_FAULT_LBL, fnt7x10);
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	b298      	uxth	r0, r3
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	b299      	uxth	r1, r3
 8013fd6:	4b2d      	ldr	r3, [pc, #180]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8013fd8:	4a32      	ldr	r2, [pc, #200]	; (80140a4 <defaultMainMenuFaultLedLabels+0x270>)
 8013fda:	f7ed fd0b 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	4413      	add	r3, r2
 8013fe8:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	b298      	uxth	r0, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	3b02      	subs	r3, #2
 8013ff4:	b299      	uxth	r1, r3
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	330c      	adds	r3, #12
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	b29b      	uxth	r3, r3
 8014002:	3308      	adds	r3, #8
 8014004:	b29b      	uxth	r3, r3
 8014006:	f7ed f9a7 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	4413      	add	r3, r2
 8014010:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED7_FAULT_LBL, fnt7x10);
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	b298      	uxth	r0, r3
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	b299      	uxth	r1, r3
 801401a:	4b1c      	ldr	r3, [pc, #112]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 801401c:	4a22      	ldr	r2, [pc, #136]	; (80140a8 <defaultMainMenuFaultLedLabels+0x274>)
 801401e:	f7ed fce9 	bl	80019f4 <LCD_PutStr>
	j+=verticalSpacing;
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	4413      	add	r3, r2
 8014028:	607b      	str	r3, [r7, #4]
	i  = ledFaultAlign;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	b298      	uxth	r0, r3
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	b29b      	uxth	r3, r3
 8014036:	3b02      	subs	r3, #2
 8014038:	b299      	uxth	r1, r3
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	b29b      	uxth	r3, r3
 801403e:	330c      	adds	r3, #12
 8014040:	b29a      	uxth	r2, r3
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	b29b      	uxth	r3, r3
 8014046:	3308      	adds	r3, #8
 8014048:	b29b      	uxth	r3, r3
 801404a:	f7ed f985 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 801404e:	68ba      	ldr	r2, [r7, #8]
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	4413      	add	r3, r2
 8014054:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED8_FAULT_LBL, fnt7x10);
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	b298      	uxth	r0, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	b299      	uxth	r1, r3
 801405e:	4b0b      	ldr	r3, [pc, #44]	; (801408c <defaultMainMenuFaultLedLabels+0x258>)
 8014060:	4a12      	ldr	r2, [pc, #72]	; (80140ac <defaultMainMenuFaultLedLabels+0x278>)
 8014062:	f7ed fcc7 	bl	80019f4 <LCD_PutStr>
	i  = ledFaultAlign;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	60bb      	str	r3, [r7, #8]
	j  +=verticalSpacing;
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	4413      	add	r3, r2
 8014070:	607b      	str	r3, [r7, #4]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	b298      	uxth	r0, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	b29b      	uxth	r3, r3
 801407a:	3b02      	subs	r3, #2
 801407c:	b299      	uxth	r1, r3
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	b29b      	uxth	r3, r3
 8014082:	330c      	adds	r3, #12
 8014084:	e014      	b.n	80140b0 <defaultMainMenuFaultLedLabels+0x27c>
 8014086:	bf00      	nop
 8014088:	20028b62 	.word	0x20028b62
 801408c:	0801bfc8 	.word	0x0801bfc8
 8014090:	0801adc0 	.word	0x0801adc0
 8014094:	0801adcc 	.word	0x0801adcc
 8014098:	0801add8 	.word	0x0801add8
 801409c:	0801ade0 	.word	0x0801ade0
 80140a0:	0801ade8 	.word	0x0801ade8
 80140a4:	0801adf0 	.word	0x0801adf0
 80140a8:	0801adf8 	.word	0x0801adf8
 80140ac:	0801ae00 	.word	0x0801ae00
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	3308      	adds	r3, #8
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	f7ed f94d 	bl	8001358 <LCD_FillRect>
	i+=horizontalSpacing;
 80140be:	68ba      	ldr	r2, [r7, #8]
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	4413      	add	r3, r2
 80140c4:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, DEFAULT_LED9_FAULT_LBL, fnt7x10);
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	b298      	uxth	r0, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	b299      	uxth	r1, r3
 80140ce:	4b04      	ldr	r3, [pc, #16]	; (80140e0 <defaultMainMenuFaultLedLabels+0x2ac>)
 80140d0:	4a04      	ldr	r2, [pc, #16]	; (80140e4 <defaultMainMenuFaultLedLabels+0x2b0>)
 80140d2:	f7ed fc8f 	bl	80019f4 <LCD_PutStr>
}
 80140d6:	bf00      	nop
 80140d8:	3718      	adds	r7, #24
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	0801bfc8 	.word	0x0801bfc8
 80140e4:	0801ae08 	.word	0x0801ae08

080140e8 <defaultMainMenuBootModes>:
void defaultMainMenuBootModes(int i, int j){
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
	switch(bootButtons.bootMode){
 80140f2:	4b13      	ldr	r3, [pc, #76]	; (8014140 <defaultMainMenuBootModes+0x58>)
 80140f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d002      	beq.n	8014100 <defaultMainMenuBootModes+0x18>
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d009      	beq.n	8014112 <defaultMainMenuBootModes+0x2a>
 80140fe:	e011      	b.n	8014124 <defaultMainMenuBootModes+0x3c>
	case UNINITIALIZED:
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	b298      	uxth	r0, r3
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	b299      	uxth	r1, r3
 8014108:	4b0e      	ldr	r3, [pc, #56]	; (8014144 <defaultMainMenuBootModes+0x5c>)
 801410a:	4a0f      	ldr	r2, [pc, #60]	; (8014148 <defaultMainMenuBootModes+0x60>)
 801410c:	f7ed fc72 	bl	80019f4 <LCD_PutStr>
		break;
 8014110:	e011      	b.n	8014136 <defaultMainMenuBootModes+0x4e>
	case STANDARD:
		LCD_PutStr(i, j, "OS", fnt7x10);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	b298      	uxth	r0, r3
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	b299      	uxth	r1, r3
 801411a:	4b0a      	ldr	r3, [pc, #40]	; (8014144 <defaultMainMenuBootModes+0x5c>)
 801411c:	4a0b      	ldr	r2, [pc, #44]	; (801414c <defaultMainMenuBootModes+0x64>)
 801411e:	f7ed fc69 	bl	80019f4 <LCD_PutStr>
		break;
 8014122:	e008      	b.n	8014136 <defaultMainMenuBootModes+0x4e>
	default:
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	b298      	uxth	r0, r3
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	b299      	uxth	r1, r3
 801412c:	4b05      	ldr	r3, [pc, #20]	; (8014144 <defaultMainMenuBootModes+0x5c>)
 801412e:	4a06      	ldr	r2, [pc, #24]	; (8014148 <defaultMainMenuBootModes+0x60>)
 8014130:	f7ed fc60 	bl	80019f4 <LCD_PutStr>
		break;
 8014134:	bf00      	nop
	}
}
 8014136:	bf00      	nop
 8014138:	3708      	adds	r7, #8
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	20003360 	.word	0x20003360
 8014144:	0801bfc8 	.word	0x0801bfc8
 8014148:	0801ae10 	.word	0x0801ae10
 801414c:	0801ae14 	.word	0x0801ae14

08014150 <defaultBootMenuBootModes>:

int defaultBootMenuBootModes(int indicator, int previousMenu, int menu, int button,int eepromRead){
 8014150:	b590      	push	{r4, r7, lr}
 8014152:	b08b      	sub	sp, #44	; 0x2c
 8014154:	af02      	add	r7, sp, #8
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
 801415c:	603b      	str	r3, [r7, #0]
	int j=45;
 801415e:	232d      	movs	r3, #45	; 0x2d
 8014160:	61fb      	str	r3, [r7, #28]
	int i=5;
 8014162:	2305      	movs	r3, #5
 8014164:	617b      	str	r3, [r7, #20]
	int indentAlignment=50;
 8014166:	2332      	movs	r3, #50	; 0x32
 8014168:	613b      	str	r3, [r7, #16]
	if(eepromRead){
 801416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416c:	2b00      	cmp	r3, #0
 801416e:	f000 8119 	beq.w	80143a4 <defaultBootMenuBootModes+0x254>
		LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	b298      	uxth	r0, r3
 8014176:	69fb      	ldr	r3, [r7, #28]
 8014178:	b299      	uxth	r1, r3
 801417a:	4b80      	ldr	r3, [pc, #512]	; (801437c <defaultBootMenuBootModes+0x22c>)
 801417c:	4a80      	ldr	r2, [pc, #512]	; (8014380 <defaultBootMenuBootModes+0x230>)
 801417e:	f7ed fc39 	bl	80019f4 <LCD_PutStr>
		j+=30;
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	331e      	adds	r3, #30
 8014186:	61fb      	str	r3, [r7, #28]
		i=42;
 8014188:	232a      	movs	r3, #42	; 0x2a
 801418a:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	b298      	uxth	r0, r3
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	b299      	uxth	r1, r3
 8014194:	4b79      	ldr	r3, [pc, #484]	; (801437c <defaultBootMenuBootModes+0x22c>)
 8014196:	4a7b      	ldr	r2, [pc, #492]	; (8014384 <defaultBootMenuBootModes+0x234>)
 8014198:	f7ed fc2c 	bl	80019f4 <LCD_PutStr>
		i=indentAlignment;
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	617b      	str	r3, [r7, #20]
		j+=20;
 80141a0:	69fb      	ldr	r3, [r7, #28]
 80141a2:	3314      	adds	r3, #20
 80141a4:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	b298      	uxth	r0, r3
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	b299      	uxth	r1, r3
 80141ae:	4b73      	ldr	r3, [pc, #460]	; (801437c <defaultBootMenuBootModes+0x22c>)
 80141b0:	4a75      	ldr	r2, [pc, #468]	; (8014388 <defaultBootMenuBootModes+0x238>)
 80141b2:	f7ed fc1f 	bl	80019f4 <LCD_PutStr>
		if(setIndicator==0){
 80141b6:	4b75      	ldr	r3, [pc, #468]	; (801438c <defaultBootMenuBootModes+0x23c>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d16a      	bne.n	8014294 <defaultBootMenuBootModes+0x144>
			switch(indicator){
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d133      	bne.n	801422c <defaultBootMenuBootModes+0xdc>
			case FIRST:
			{
				j=95;
 80141c4:	235f      	movs	r3, #95	; 0x5f
 80141c6:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	2b04      	cmp	r3, #4
 80141cc:	bf0c      	ite	eq
 80141ce:	2301      	moveq	r3, #1
 80141d0:	2300      	movne	r3, #0
 80141d2:	b2da      	uxtb	r2, r3
 80141d4:	68b9      	ldr	r1, [r7, #8]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	4299      	cmp	r1, r3
 80141da:	bf0c      	ite	eq
 80141dc:	2301      	moveq	r3, #1
 80141de:	2300      	movne	r3, #0
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	4013      	ands	r3, r2
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f000 818b 	beq.w	8014502 <defaultBootMenuBootModes+0x3b2>
					i=140;
 80141ec:	238c      	movs	r3, #140	; 0x8c
 80141ee:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	b298      	uxth	r0, r3
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	3305      	adds	r3, #5
 80141fa:	b299      	uxth	r1, r3
 80141fc:	2303      	movs	r3, #3
 80141fe:	2203      	movs	r2, #3
 8014200:	f7ed fd48 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 8014204:	4b62      	ldr	r3, [pc, #392]	; (8014390 <defaultBootMenuBootModes+0x240>)
 8014206:	2201      	movs	r2, #1
 8014208:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 801420a:	4b61      	ldr	r3, [pc, #388]	; (8014390 <defaultBootMenuBootModes+0x240>)
 801420c:	2201      	movs	r2, #1
 801420e:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 8014210:	4b5e      	ldr	r3, [pc, #376]	; (801438c <defaultBootMenuBootModes+0x23c>)
 8014212:	2201      	movs	r2, #1
 8014214:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 8014216:	f7f3 fd41 	bl	8007c9c <HAL_GetTick>
 801421a:	4603      	mov	r3, r0
 801421c:	4a5d      	ldr	r2, [pc, #372]	; (8014394 <defaultBootMenuBootModes+0x244>)
 801421e:	fba2 2303 	umull	r2, r3, r2, r3
 8014222:	099b      	lsrs	r3, r3, #6
 8014224:	461a      	mov	r2, r3
 8014226:	4b5c      	ldr	r3, [pc, #368]	; (8014398 <defaultBootMenuBootModes+0x248>)
 8014228:	601a      	str	r2, [r3, #0]
				}
				break;
 801422a:	e16a      	b.n	8014502 <defaultBootMenuBootModes+0x3b2>
			}
			default:
			{
				j=95;
 801422c:	235f      	movs	r3, #95	; 0x5f
 801422e:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	2b04      	cmp	r3, #4
 8014234:	bf0c      	ite	eq
 8014236:	2301      	moveq	r3, #1
 8014238:	2300      	movne	r3, #0
 801423a:	b2da      	uxtb	r2, r3
 801423c:	68b9      	ldr	r1, [r7, #8]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4299      	cmp	r1, r3
 8014242:	bf0c      	ite	eq
 8014244:	2301      	moveq	r3, #1
 8014246:	2300      	movne	r3, #0
 8014248:	b2db      	uxtb	r3, r3
 801424a:	4013      	ands	r3, r2
 801424c:	b2db      	uxtb	r3, r3
 801424e:	2b00      	cmp	r3, #0
 8014250:	f000 8159 	beq.w	8014506 <defaultBootMenuBootModes+0x3b6>
					i=140;
 8014254:	238c      	movs	r3, #140	; 0x8c
 8014256:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	b298      	uxth	r0, r3
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	b29b      	uxth	r3, r3
 8014260:	3305      	adds	r3, #5
 8014262:	b299      	uxth	r1, r3
 8014264:	2303      	movs	r3, #3
 8014266:	2203      	movs	r2, #3
 8014268:	f7ed fd14 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 801426c:	4b48      	ldr	r3, [pc, #288]	; (8014390 <defaultBootMenuBootModes+0x240>)
 801426e:	2201      	movs	r2, #1
 8014270:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 8014272:	4b47      	ldr	r3, [pc, #284]	; (8014390 <defaultBootMenuBootModes+0x240>)
 8014274:	2201      	movs	r2, #1
 8014276:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 8014278:	4b44      	ldr	r3, [pc, #272]	; (801438c <defaultBootMenuBootModes+0x23c>)
 801427a:	2201      	movs	r2, #1
 801427c:	601a      	str	r2, [r3, #0]
					timeNow = (HAL_GetTick()/1000);
 801427e:	f7f3 fd0d 	bl	8007c9c <HAL_GetTick>
 8014282:	4603      	mov	r3, r0
 8014284:	4a43      	ldr	r2, [pc, #268]	; (8014394 <defaultBootMenuBootModes+0x244>)
 8014286:	fba2 2303 	umull	r2, r3, r2, r3
 801428a:	099b      	lsrs	r3, r3, #6
 801428c:	461a      	mov	r2, r3
 801428e:	4b42      	ldr	r3, [pc, #264]	; (8014398 <defaultBootMenuBootModes+0x248>)
 8014290:	601a      	str	r2, [r3, #0]
				}
				break;
 8014292:	e138      	b.n	8014506 <defaultBootMenuBootModes+0x3b6>
			}
			}
		}
		else{
			i = 230;
 8014294:	23e6      	movs	r3, #230	; 0xe6
 8014296:	617b      	str	r3, [r7, #20]
			j = 120;
 8014298:	2378      	movs	r3, #120	; 0x78
 801429a:	61fb      	str	r3, [r7, #28]
			int timeLeft=0;
 801429c:	2300      	movs	r3, #0
 801429e:	61bb      	str	r3, [r7, #24]
			if(bootButtons.bootMode==0){
 80142a0:	4b3b      	ldr	r3, [pc, #236]	; (8014390 <defaultBootMenuBootModes+0x240>)
 80142a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d10d      	bne.n	80142c4 <defaultBootMenuBootModes+0x174>
				timeLeft = (timeNow+2)- (HAL_GetTick()/1000);
 80142a8:	4b3b      	ldr	r3, [pc, #236]	; (8014398 <defaultBootMenuBootModes+0x248>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	461c      	mov	r4, r3
 80142ae:	f7f3 fcf5 	bl	8007c9c <HAL_GetTick>
 80142b2:	4603      	mov	r3, r0
 80142b4:	4a37      	ldr	r2, [pc, #220]	; (8014394 <defaultBootMenuBootModes+0x244>)
 80142b6:	fba2 2303 	umull	r2, r3, r2, r3
 80142ba:	099b      	lsrs	r3, r3, #6
 80142bc:	1ae3      	subs	r3, r4, r3
 80142be:	3302      	adds	r3, #2
 80142c0:	61bb      	str	r3, [r7, #24]
 80142c2:	e00c      	b.n	80142de <defaultBootMenuBootModes+0x18e>
			}
			else{
				timeLeft = (timeNow+15)- (HAL_GetTick()/1000);
 80142c4:	4b34      	ldr	r3, [pc, #208]	; (8014398 <defaultBootMenuBootModes+0x248>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	461c      	mov	r4, r3
 80142ca:	f7f3 fce7 	bl	8007c9c <HAL_GetTick>
 80142ce:	4603      	mov	r3, r0
 80142d0:	4a30      	ldr	r2, [pc, #192]	; (8014394 <defaultBootMenuBootModes+0x244>)
 80142d2:	fba2 2303 	umull	r2, r3, r2, r3
 80142d6:	099b      	lsrs	r3, r3, #6
 80142d8:	1ae3      	subs	r3, r4, r3
 80142da:	330f      	adds	r3, #15
 80142dc:	61bb      	str	r3, [r7, #24]
			}
			i+=LCD_PutIntF(i, j, timeLeft, 0, fnt_dig_big);;
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	b298      	uxth	r0, r3
 80142e2:	69fb      	ldr	r3, [r7, #28]
 80142e4:	b299      	uxth	r1, r3
 80142e6:	4b2d      	ldr	r3, [pc, #180]	; (801439c <defaultBootMenuBootModes+0x24c>)
 80142e8:	9300      	str	r3, [sp, #0]
 80142ea:	2300      	movs	r3, #0
 80142ec:	69ba      	ldr	r2, [r7, #24]
 80142ee:	f7ed fc1f 	bl	8001b30 <LCD_PutIntF>
 80142f2:	4603      	mov	r3, r0
 80142f4:	461a      	mov	r2, r3
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	4413      	add	r3, r2
 80142fa:	617b      	str	r3, [r7, #20]
			LCD_PutStr(i, j, " SECS LEFT", fnt7x10);
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	b298      	uxth	r0, r3
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	b299      	uxth	r1, r3
 8014304:	4b1d      	ldr	r3, [pc, #116]	; (801437c <defaultBootMenuBootModes+0x22c>)
 8014306:	4a26      	ldr	r2, [pc, #152]	; (80143a0 <defaultBootMenuBootModes+0x250>)
 8014308:	f7ed fb74 	bl	80019f4 <LCD_PutStr>
			switch(setIndicator){
 801430c:	4b1f      	ldr	r3, [pc, #124]	; (801438c <defaultBootMenuBootModes+0x23c>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b01      	cmp	r3, #1
 8014312:	d119      	bne.n	8014348 <defaultBootMenuBootModes+0x1f8>
			case FIRST:
			{
				j=95;
 8014314:	235f      	movs	r3, #95	; 0x5f
 8014316:	61fb      	str	r3, [r7, #28]
				i=140;
 8014318:	238c      	movs	r3, #140	; 0x8c
 801431a:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	b298      	uxth	r0, r3
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	b29b      	uxth	r3, r3
 8014324:	3305      	adds	r3, #5
 8014326:	b299      	uxth	r1, r3
 8014328:	2303      	movs	r3, #3
 801432a:	2203      	movs	r2, #3
 801432c:	f7ed fcb2 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 8014330:	4b17      	ldr	r3, [pc, #92]	; (8014390 <defaultBootMenuBootModes+0x240>)
 8014332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014334:	2b00      	cmp	r3, #0
 8014336:	f000 80e8 	beq.w	801450a <defaultBootMenuBootModes+0x3ba>
					setIndicator=0;
 801433a:	4b14      	ldr	r3, [pc, #80]	; (801438c <defaultBootMenuBootModes+0x23c>)
 801433c:	2200      	movs	r2, #0
 801433e:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 8014340:	4b13      	ldr	r3, [pc, #76]	; (8014390 <defaultBootMenuBootModes+0x240>)
 8014342:	2200      	movs	r2, #0
 8014344:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 8014346:	e0e0      	b.n	801450a <defaultBootMenuBootModes+0x3ba>
			}
			default:
			{
				j=95;
 8014348:	235f      	movs	r3, #95	; 0x5f
 801434a:	61fb      	str	r3, [r7, #28]
				i=140;
 801434c:	238c      	movs	r3, #140	; 0x8c
 801434e:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	b298      	uxth	r0, r3
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	b29b      	uxth	r3, r3
 8014358:	3305      	adds	r3, #5
 801435a:	b299      	uxth	r1, r3
 801435c:	2303      	movs	r3, #3
 801435e:	2203      	movs	r2, #3
 8014360:	f7ed fc98 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 8014364:	4b0a      	ldr	r3, [pc, #40]	; (8014390 <defaultBootMenuBootModes+0x240>)
 8014366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014368:	2b00      	cmp	r3, #0
 801436a:	f000 80d0 	beq.w	801450e <defaultBootMenuBootModes+0x3be>
					setIndicator=0;
 801436e:	4b07      	ldr	r3, [pc, #28]	; (801438c <defaultBootMenuBootModes+0x23c>)
 8014370:	2200      	movs	r2, #0
 8014372:	601a      	str	r2, [r3, #0]
					bootButtons.modeClear=0;
 8014374:	4b06      	ldr	r3, [pc, #24]	; (8014390 <defaultBootMenuBootModes+0x240>)
 8014376:	2200      	movs	r2, #0
 8014378:	625a      	str	r2, [r3, #36]	; 0x24
				}
				break;
 801437a:	e0c8      	b.n	801450e <defaultBootMenuBootModes+0x3be>
 801437c:	0801bfc8 	.word	0x0801bfc8
 8014380:	0801ae18 	.word	0x0801ae18
 8014384:	0801ae3c 	.word	0x0801ae3c
 8014388:	0801ae58 	.word	0x0801ae58
 801438c:	2000342c 	.word	0x2000342c
 8014390:	20003360 	.word	0x20003360
 8014394:	10624dd3 	.word	0x10624dd3
 8014398:	20028b54 	.word	0x20028b54
 801439c:	0801c388 	.word	0x0801c388
 80143a0:	0801ae64 	.word	0x0801ae64
			}
			}
		}
	}
	else{
		j=45;
 80143a4:	232d      	movs	r3, #45	; 0x2d
 80143a6:	61fb      	str	r3, [r7, #28]
		i=15;
 80143a8:	230f      	movs	r3, #15
 80143aa:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	b298      	uxth	r0, r3
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	b299      	uxth	r1, r3
 80143b4:	4b5d      	ldr	r3, [pc, #372]	; (801452c <defaultBootMenuBootModes+0x3dc>)
 80143b6:	4a5e      	ldr	r2, [pc, #376]	; (8014530 <defaultBootMenuBootModes+0x3e0>)
 80143b8:	f7ed fb1c 	bl	80019f4 <LCD_PutStr>
		j+=30;
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	331e      	adds	r3, #30
 80143c0:	61fb      	str	r3, [r7, #28]
		i=42;
 80143c2:	232a      	movs	r3, #42	; 0x2a
 80143c4:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	b298      	uxth	r0, r3
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	b299      	uxth	r1, r3
 80143ce:	4b57      	ldr	r3, [pc, #348]	; (801452c <defaultBootMenuBootModes+0x3dc>)
 80143d0:	4a58      	ldr	r2, [pc, #352]	; (8014534 <defaultBootMenuBootModes+0x3e4>)
 80143d2:	f7ed fb0f 	bl	80019f4 <LCD_PutStr>
		i=indentAlignment;
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	617b      	str	r3, [r7, #20]
		j+=20;
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	3314      	adds	r3, #20
 80143de:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	b298      	uxth	r0, r3
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	b299      	uxth	r1, r3
 80143e8:	4b50      	ldr	r3, [pc, #320]	; (801452c <defaultBootMenuBootModes+0x3dc>)
 80143ea:	4a53      	ldr	r2, [pc, #332]	; (8014538 <defaultBootMenuBootModes+0x3e8>)
 80143ec:	f7ed fb02 	bl	80019f4 <LCD_PutStr>
		if(setIndicator==0){
 80143f0:	4b52      	ldr	r3, [pc, #328]	; (801453c <defaultBootMenuBootModes+0x3ec>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d154      	bne.n	80144a2 <defaultBootMenuBootModes+0x352>
			switch(indicator){
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d128      	bne.n	8014450 <defaultBootMenuBootModes+0x300>
			case FIRST:
			{
				j=95;
 80143fe:	235f      	movs	r3, #95	; 0x5f
 8014400:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	2b04      	cmp	r3, #4
 8014406:	bf0c      	ite	eq
 8014408:	2301      	moveq	r3, #1
 801440a:	2300      	movne	r3, #0
 801440c:	b2da      	uxtb	r2, r3
 801440e:	68b9      	ldr	r1, [r7, #8]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	4299      	cmp	r1, r3
 8014414:	bf0c      	ite	eq
 8014416:	2301      	moveq	r3, #1
 8014418:	2300      	movne	r3, #0
 801441a:	b2db      	uxtb	r3, r3
 801441c:	4013      	ands	r3, r2
 801441e:	b2db      	uxtb	r3, r3
 8014420:	2b00      	cmp	r3, #0
 8014422:	d076      	beq.n	8014512 <defaultBootMenuBootModes+0x3c2>
					i=140;
 8014424:	238c      	movs	r3, #140	; 0x8c
 8014426:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	b298      	uxth	r0, r3
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	b29b      	uxth	r3, r3
 8014430:	3305      	adds	r3, #5
 8014432:	b299      	uxth	r1, r3
 8014434:	2303      	movs	r3, #3
 8014436:	2203      	movs	r2, #3
 8014438:	f7ed fc2c 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 801443c:	4b40      	ldr	r3, [pc, #256]	; (8014540 <defaultBootMenuBootModes+0x3f0>)
 801443e:	2201      	movs	r2, #1
 8014440:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 8014442:	4b3f      	ldr	r3, [pc, #252]	; (8014540 <defaultBootMenuBootModes+0x3f0>)
 8014444:	2201      	movs	r2, #1
 8014446:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 8014448:	4b3c      	ldr	r3, [pc, #240]	; (801453c <defaultBootMenuBootModes+0x3ec>)
 801444a:	2201      	movs	r2, #1
 801444c:	601a      	str	r2, [r3, #0]
				}
				break;
 801444e:	e060      	b.n	8014512 <defaultBootMenuBootModes+0x3c2>
			}
			default:
			{
				j=95;
 8014450:	235f      	movs	r3, #95	; 0x5f
 8014452:	61fb      	str	r3, [r7, #28]
				if((button == SEL) & (previousMenu == menu)){
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	2b04      	cmp	r3, #4
 8014458:	bf0c      	ite	eq
 801445a:	2301      	moveq	r3, #1
 801445c:	2300      	movne	r3, #0
 801445e:	b2da      	uxtb	r2, r3
 8014460:	68b9      	ldr	r1, [r7, #8]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	4299      	cmp	r1, r3
 8014466:	bf0c      	ite	eq
 8014468:	2301      	moveq	r3, #1
 801446a:	2300      	movne	r3, #0
 801446c:	b2db      	uxtb	r3, r3
 801446e:	4013      	ands	r3, r2
 8014470:	b2db      	uxtb	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d04f      	beq.n	8014516 <defaultBootMenuBootModes+0x3c6>
					i=140;
 8014476:	238c      	movs	r3, #140	; 0x8c
 8014478:	617b      	str	r3, [r7, #20]
					drawUpDownArrow(i, j+5, 3, 3);
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	b298      	uxth	r0, r3
 801447e:	69fb      	ldr	r3, [r7, #28]
 8014480:	b29b      	uxth	r3, r3
 8014482:	3305      	adds	r3, #5
 8014484:	b299      	uxth	r1, r3
 8014486:	2303      	movs	r3, #3
 8014488:	2203      	movs	r2, #3
 801448a:	f7ed fc03 	bl	8001c94 <drawUpDownArrow>
					bootButtons.btn0=1;
 801448e:	4b2c      	ldr	r3, [pc, #176]	; (8014540 <defaultBootMenuBootModes+0x3f0>)
 8014490:	2201      	movs	r2, #1
 8014492:	605a      	str	r2, [r3, #4]
					bootButtons.bootModeSet=1;
 8014494:	4b2a      	ldr	r3, [pc, #168]	; (8014540 <defaultBootMenuBootModes+0x3f0>)
 8014496:	2201      	movs	r2, #1
 8014498:	601a      	str	r2, [r3, #0]
					setIndicator=1;
 801449a:	4b28      	ldr	r3, [pc, #160]	; (801453c <defaultBootMenuBootModes+0x3ec>)
 801449c:	2201      	movs	r2, #1
 801449e:	601a      	str	r2, [r3, #0]
				}
				break;
 80144a0:	e039      	b.n	8014516 <defaultBootMenuBootModes+0x3c6>
			}
			}
		}
		else{
			switch(setIndicator){
 80144a2:	4b26      	ldr	r3, [pc, #152]	; (801453c <defaultBootMenuBootModes+0x3ec>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d115      	bne.n	80144d6 <defaultBootMenuBootModes+0x386>
			case FIRST:
			{
				j=95;
 80144aa:	235f      	movs	r3, #95	; 0x5f
 80144ac:	61fb      	str	r3, [r7, #28]
				i=140;
 80144ae:	238c      	movs	r3, #140	; 0x8c
 80144b0:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	b298      	uxth	r0, r3
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	3305      	adds	r3, #5
 80144bc:	b299      	uxth	r1, r3
 80144be:	2303      	movs	r3, #3
 80144c0:	2203      	movs	r2, #3
 80144c2:	f7ed fbe7 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 80144c6:	4b1e      	ldr	r3, [pc, #120]	; (8014540 <defaultBootMenuBootModes+0x3f0>)
 80144c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d025      	beq.n	801451a <defaultBootMenuBootModes+0x3ca>
					setIndicator=0;
 80144ce:	4b1b      	ldr	r3, [pc, #108]	; (801453c <defaultBootMenuBootModes+0x3ec>)
 80144d0:	2200      	movs	r2, #0
 80144d2:	601a      	str	r2, [r3, #0]
				}
				break;
 80144d4:	e021      	b.n	801451a <defaultBootMenuBootModes+0x3ca>
			}
			default:
			{
				j=95;
 80144d6:	235f      	movs	r3, #95	; 0x5f
 80144d8:	61fb      	str	r3, [r7, #28]
				i=140;
 80144da:	238c      	movs	r3, #140	; 0x8c
 80144dc:	617b      	str	r3, [r7, #20]
				drawUpDownArrow(i, j+5, 3, 3);
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	b298      	uxth	r0, r3
 80144e2:	69fb      	ldr	r3, [r7, #28]
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	3305      	adds	r3, #5
 80144e8:	b299      	uxth	r1, r3
 80144ea:	2303      	movs	r3, #3
 80144ec:	2203      	movs	r2, #3
 80144ee:	f7ed fbd1 	bl	8001c94 <drawUpDownArrow>
				if(bootButtons.modeClear){
 80144f2:	4b13      	ldr	r3, [pc, #76]	; (8014540 <defaultBootMenuBootModes+0x3f0>)
 80144f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d011      	beq.n	801451e <defaultBootMenuBootModes+0x3ce>
					setIndicator=0;
 80144fa:	4b10      	ldr	r3, [pc, #64]	; (801453c <defaultBootMenuBootModes+0x3ec>)
 80144fc:	2200      	movs	r2, #0
 80144fe:	601a      	str	r2, [r3, #0]
				}
				break;
 8014500:	e00d      	b.n	801451e <defaultBootMenuBootModes+0x3ce>
				break;
 8014502:	bf00      	nop
 8014504:	e00c      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 8014506:	bf00      	nop
 8014508:	e00a      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 801450a:	bf00      	nop
 801450c:	e008      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 801450e:	bf00      	nop
 8014510:	e006      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 8014512:	bf00      	nop
 8014514:	e004      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 8014516:	bf00      	nop
 8014518:	e002      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 801451a:	bf00      	nop
 801451c:	e000      	b.n	8014520 <defaultBootMenuBootModes+0x3d0>
				break;
 801451e:	bf00      	nop
			}
			}
		}
	}
	return j;
 8014520:	69fb      	ldr	r3, [r7, #28]
}
 8014522:	4618      	mov	r0, r3
 8014524:	3724      	adds	r7, #36	; 0x24
 8014526:	46bd      	mov	sp, r7
 8014528:	bd90      	pop	{r4, r7, pc}
 801452a:	bf00      	nop
 801452c:	0801bfc8 	.word	0x0801bfc8
 8014530:	0801ae70 	.word	0x0801ae70
 8014534:	0801ae3c 	.word	0x0801ae3c
 8014538:	0801ae58 	.word	0x0801ae58
 801453c:	2000342c 	.word	0x2000342c
 8014540:	20003360 	.word	0x20003360

08014544 <defaultSystemInfoSoc>:

void defaultSystemInfoSoc(int i, int j){
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	6039      	str	r1, [r7, #0]
	if(ZION.SOC_EEPROM_Detected){
 801454e:	4b16      	ldr	r3, [pc, #88]	; (80145a8 <defaultSystemInfoSoc+0x64>)
 8014550:	689b      	ldr	r3, [r3, #8]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d01b      	beq.n	801458e <defaultSystemInfoSoc+0x4a>
		if(ZION.SOC_BoardFab == -2){
 8014556:	4b14      	ldr	r3, [pc, #80]	; (80145a8 <defaultSystemInfoSoc+0x64>)
 8014558:	699b      	ldr	r3, [r3, #24]
 801455a:	f113 0f02 	cmn.w	r3, #2
 801455e:	d108      	bne.n	8014572 <defaultSystemInfoSoc+0x2e>
			LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	b298      	uxth	r0, r3
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	b299      	uxth	r1, r3
 8014568:	4b10      	ldr	r3, [pc, #64]	; (80145ac <defaultSystemInfoSoc+0x68>)
 801456a:	4a11      	ldr	r2, [pc, #68]	; (80145b0 <defaultSystemInfoSoc+0x6c>)
 801456c:	f7ed fa42 	bl	80019f4 <LCD_PutStr>
		}
	}
	else{
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
	}
}
 8014570:	e015      	b.n	801459e <defaultSystemInfoSoc+0x5a>
		else if(ZION.SOC_BoardFab ==-1){
 8014572:	4b0d      	ldr	r3, [pc, #52]	; (80145a8 <defaultSystemInfoSoc+0x64>)
 8014574:	699b      	ldr	r3, [r3, #24]
 8014576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801457a:	d110      	bne.n	801459e <defaultSystemInfoSoc+0x5a>
			LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	b298      	uxth	r0, r3
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	b299      	uxth	r1, r3
 8014584:	4b09      	ldr	r3, [pc, #36]	; (80145ac <defaultSystemInfoSoc+0x68>)
 8014586:	4a0b      	ldr	r2, [pc, #44]	; (80145b4 <defaultSystemInfoSoc+0x70>)
 8014588:	f7ed fa34 	bl	80019f4 <LCD_PutStr>
}
 801458c:	e007      	b.n	801459e <defaultSystemInfoSoc+0x5a>
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	b298      	uxth	r0, r3
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	b299      	uxth	r1, r3
 8014596:	4b05      	ldr	r3, [pc, #20]	; (80145ac <defaultSystemInfoSoc+0x68>)
 8014598:	4a07      	ldr	r2, [pc, #28]	; (80145b8 <defaultSystemInfoSoc+0x74>)
 801459a:	f7ed fa2b 	bl	80019f4 <LCD_PutStr>
}
 801459e:	bf00      	nop
 80145a0:	3708      	adds	r7, #8
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	20003328 	.word	0x20003328
 80145ac:	0801bfc8 	.word	0x0801bfc8
 80145b0:	0801ae9c 	.word	0x0801ae9c
 80145b4:	0801aeb4 	.word	0x0801aeb4
 80145b8:	0801aecc 	.word	0x0801aecc

080145bc <defaultSystemInfoAsic>:
void defaultSystemInfoAsic(int i, int j){
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
	if(ZION.ASIC_EEPROM_Detected){
 80145c6:	4b16      	ldr	r3, [pc, #88]	; (8014620 <defaultSystemInfoAsic+0x64>)
 80145c8:	68db      	ldr	r3, [r3, #12]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d01b      	beq.n	8014606 <defaultSystemInfoAsic+0x4a>
		if(ZION.ASIC_BoardFab == -2){
 80145ce:	4b14      	ldr	r3, [pc, #80]	; (8014620 <defaultSystemInfoAsic+0x64>)
 80145d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d2:	f113 0f02 	cmn.w	r3, #2
 80145d6:	d108      	bne.n	80145ea <defaultSystemInfoAsic+0x2e>
			LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	b298      	uxth	r0, r3
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	b299      	uxth	r1, r3
 80145e0:	4b10      	ldr	r3, [pc, #64]	; (8014624 <defaultSystemInfoAsic+0x68>)
 80145e2:	4a11      	ldr	r2, [pc, #68]	; (8014628 <defaultSystemInfoAsic+0x6c>)
 80145e4:	f7ed fa06 	bl	80019f4 <LCD_PutStr>
		}
	}
	else{
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
	}
}
 80145e8:	e015      	b.n	8014616 <defaultSystemInfoAsic+0x5a>
		else if(ZION.ASIC_BoardFab ==-1){
 80145ea:	4b0d      	ldr	r3, [pc, #52]	; (8014620 <defaultSystemInfoAsic+0x64>)
 80145ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f2:	d110      	bne.n	8014616 <defaultSystemInfoAsic+0x5a>
			LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	b298      	uxth	r0, r3
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	b299      	uxth	r1, r3
 80145fc:	4b09      	ldr	r3, [pc, #36]	; (8014624 <defaultSystemInfoAsic+0x68>)
 80145fe:	4a0b      	ldr	r2, [pc, #44]	; (801462c <defaultSystemInfoAsic+0x70>)
 8014600:	f7ed f9f8 	bl	80019f4 <LCD_PutStr>
}
 8014604:	e007      	b.n	8014616 <defaultSystemInfoAsic+0x5a>
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	b298      	uxth	r0, r3
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	b299      	uxth	r1, r3
 801460e:	4b05      	ldr	r3, [pc, #20]	; (8014624 <defaultSystemInfoAsic+0x68>)
 8014610:	4a07      	ldr	r2, [pc, #28]	; (8014630 <defaultSystemInfoAsic+0x74>)
 8014612:	f7ed f9ef 	bl	80019f4 <LCD_PutStr>
}
 8014616:	bf00      	nop
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	20003328 	.word	0x20003328
 8014624:	0801bfc8 	.word	0x0801bfc8
 8014628:	0801ae9c 	.word	0x0801ae9c
 801462c:	0801aeb4 	.word	0x0801aeb4
 8014630:	0801aecc 	.word	0x0801aecc

08014634 <defaultSystemInfoDisplay>:
void defaultSystemInfoDisplay(int i, int j){
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
	if(ZION.DISPLAY_EEPROM_Detected){
 801463e:	4b16      	ldr	r3, [pc, #88]	; (8014698 <defaultSystemInfoDisplay+0x64>)
 8014640:	691b      	ldr	r3, [r3, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d01b      	beq.n	801467e <defaultSystemInfoDisplay+0x4a>
		if(ZION.DISPLAY_BoardFab == -2){
 8014646:	4b14      	ldr	r3, [pc, #80]	; (8014698 <defaultSystemInfoDisplay+0x64>)
 8014648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801464a:	f113 0f02 	cmn.w	r3, #2
 801464e:	d108      	bne.n	8014662 <defaultSystemInfoDisplay+0x2e>
			LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	b298      	uxth	r0, r3
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	b299      	uxth	r1, r3
 8014658:	4b10      	ldr	r3, [pc, #64]	; (801469c <defaultSystemInfoDisplay+0x68>)
 801465a:	4a11      	ldr	r2, [pc, #68]	; (80146a0 <defaultSystemInfoDisplay+0x6c>)
 801465c:	f7ed f9ca 	bl	80019f4 <LCD_PutStr>
		}
	}
	else{
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
	}
}
 8014660:	e015      	b.n	801468e <defaultSystemInfoDisplay+0x5a>
		else if(ZION.DISPLAY_BoardFab ==-1){
 8014662:	4b0d      	ldr	r3, [pc, #52]	; (8014698 <defaultSystemInfoDisplay+0x64>)
 8014664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801466a:	d110      	bne.n	801468e <defaultSystemInfoDisplay+0x5a>
			LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	b298      	uxth	r0, r3
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	b299      	uxth	r1, r3
 8014674:	4b09      	ldr	r3, [pc, #36]	; (801469c <defaultSystemInfoDisplay+0x68>)
 8014676:	4a0b      	ldr	r2, [pc, #44]	; (80146a4 <defaultSystemInfoDisplay+0x70>)
 8014678:	f7ed f9bc 	bl	80019f4 <LCD_PutStr>
}
 801467c:	e007      	b.n	801468e <defaultSystemInfoDisplay+0x5a>
		LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	b298      	uxth	r0, r3
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	b299      	uxth	r1, r3
 8014686:	4b05      	ldr	r3, [pc, #20]	; (801469c <defaultSystemInfoDisplay+0x68>)
 8014688:	4a07      	ldr	r2, [pc, #28]	; (80146a8 <defaultSystemInfoDisplay+0x74>)
 801468a:	f7ed f9b3 	bl	80019f4 <LCD_PutStr>
}
 801468e:	bf00      	nop
 8014690:	3708      	adds	r7, #8
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20003328 	.word	0x20003328
 801469c:	0801bfc8 	.word	0x0801bfc8
 80146a0:	0801ae9c 	.word	0x0801ae9c
 80146a4:	0801aeb4 	.word	0x0801aeb4
 80146a8:	0801aecc 	.word	0x0801aecc

080146ac <defaultHeaderFaults>:
int defaultHeaderFaults(int i, int j){
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
	int x = i;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	60fb      	str	r3, [r7, #12]
	int y = j;
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	60bb      	str	r3, [r7, #8]
	if(errorLED.vsysPMIFault){
 80146be:	4b63      	ldr	r3, [pc, #396]	; (801484c <defaultHeaderFaults+0x1a0>)
 80146c0:	785b      	ldrb	r3, [r3, #1]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00d      	beq.n	80146e2 <defaultHeaderFaults+0x36>
		x += LCD_PutStr(x, y, DEFAULT_HEADER1_FAULT_LBL, fnt7x10);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	b298      	uxth	r0, r3
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	b299      	uxth	r1, r3
 80146ce:	4b60      	ldr	r3, [pc, #384]	; (8014850 <defaultHeaderFaults+0x1a4>)
 80146d0:	4a60      	ldr	r2, [pc, #384]	; (8014854 <defaultHeaderFaults+0x1a8>)
 80146d2:	f7ed f98f 	bl	80019f4 <LCD_PutStr>
 80146d6:	4603      	mov	r3, r0
 80146d8:	461a      	mov	r2, r3
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	4413      	add	r3, r2
 80146de:	60fb      	str	r3, [r7, #12]
 80146e0:	e0ae      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.zionFault){
 80146e2:	4b5a      	ldr	r3, [pc, #360]	; (801484c <defaultHeaderFaults+0x1a0>)
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d00d      	beq.n	8014706 <defaultHeaderFaults+0x5a>
		x += LCD_PutStr(x, y, DEFAULT_HEADER2_FAULT_LBL, fnt7x10);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	b298      	uxth	r0, r3
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	b299      	uxth	r1, r3
 80146f2:	4b57      	ldr	r3, [pc, #348]	; (8014850 <defaultHeaderFaults+0x1a4>)
 80146f4:	4a58      	ldr	r2, [pc, #352]	; (8014858 <defaultHeaderFaults+0x1ac>)
 80146f6:	f7ed f97d 	bl	80019f4 <LCD_PutStr>
 80146fa:	4603      	mov	r3, r0
 80146fc:	461a      	mov	r2, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	4413      	add	r3, r2
 8014702:	60fb      	str	r3, [r7, #12]
 8014704:	e09c      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault3){
 8014706:	4b51      	ldr	r3, [pc, #324]	; (801484c <defaultHeaderFaults+0x1a0>)
 8014708:	789b      	ldrb	r3, [r3, #2]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d00d      	beq.n	801472a <defaultHeaderFaults+0x7e>
		x += LCD_PutStr(x, y, DEFAULT_HEADER3_FAULT_LBL, fnt7x10);
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	b298      	uxth	r0, r3
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	b299      	uxth	r1, r3
 8014716:	4b4e      	ldr	r3, [pc, #312]	; (8014850 <defaultHeaderFaults+0x1a4>)
 8014718:	4a50      	ldr	r2, [pc, #320]	; (801485c <defaultHeaderFaults+0x1b0>)
 801471a:	f7ed f96b 	bl	80019f4 <LCD_PutStr>
 801471e:	4603      	mov	r3, r0
 8014720:	461a      	mov	r2, r3
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	4413      	add	r3, r2
 8014726:	60fb      	str	r3, [r7, #12]
 8014728:	e08a      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault4){
 801472a:	4b48      	ldr	r3, [pc, #288]	; (801484c <defaultHeaderFaults+0x1a0>)
 801472c:	78db      	ldrb	r3, [r3, #3]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d00d      	beq.n	801474e <defaultHeaderFaults+0xa2>
		x += LCD_PutStr(x, y, DEFAULT_HEADER4_FAULT_LBL, fnt7x10);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	b298      	uxth	r0, r3
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	b299      	uxth	r1, r3
 801473a:	4b45      	ldr	r3, [pc, #276]	; (8014850 <defaultHeaderFaults+0x1a4>)
 801473c:	4a48      	ldr	r2, [pc, #288]	; (8014860 <defaultHeaderFaults+0x1b4>)
 801473e:	f7ed f959 	bl	80019f4 <LCD_PutStr>
 8014742:	4603      	mov	r3, r0
 8014744:	461a      	mov	r2, r3
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	4413      	add	r3, r2
 801474a:	60fb      	str	r3, [r7, #12]
 801474c:	e078      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault5){
 801474e:	4b3f      	ldr	r3, [pc, #252]	; (801484c <defaultHeaderFaults+0x1a0>)
 8014750:	791b      	ldrb	r3, [r3, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d00d      	beq.n	8014772 <defaultHeaderFaults+0xc6>
		x += LCD_PutStr(x, y, DEFAULT_HEADER5_FAULT_LBL, fnt7x10);
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	b298      	uxth	r0, r3
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	b299      	uxth	r1, r3
 801475e:	4b3c      	ldr	r3, [pc, #240]	; (8014850 <defaultHeaderFaults+0x1a4>)
 8014760:	4a40      	ldr	r2, [pc, #256]	; (8014864 <defaultHeaderFaults+0x1b8>)
 8014762:	f7ed f947 	bl	80019f4 <LCD_PutStr>
 8014766:	4603      	mov	r3, r0
 8014768:	461a      	mov	r2, r3
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	4413      	add	r3, r2
 801476e:	60fb      	str	r3, [r7, #12]
 8014770:	e066      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault6){
 8014772:	4b36      	ldr	r3, [pc, #216]	; (801484c <defaultHeaderFaults+0x1a0>)
 8014774:	795b      	ldrb	r3, [r3, #5]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00d      	beq.n	8014796 <defaultHeaderFaults+0xea>
		x += LCD_PutStr(x, y, DEFAULT_HEADER6_FAULT_LBL, fnt7x10);
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	b298      	uxth	r0, r3
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	b299      	uxth	r1, r3
 8014782:	4b33      	ldr	r3, [pc, #204]	; (8014850 <defaultHeaderFaults+0x1a4>)
 8014784:	4a38      	ldr	r2, [pc, #224]	; (8014868 <defaultHeaderFaults+0x1bc>)
 8014786:	f7ed f935 	bl	80019f4 <LCD_PutStr>
 801478a:	4603      	mov	r3, r0
 801478c:	461a      	mov	r2, r3
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	4413      	add	r3, r2
 8014792:	60fb      	str	r3, [r7, #12]
 8014794:	e054      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault7){
 8014796:	4b2d      	ldr	r3, [pc, #180]	; (801484c <defaultHeaderFaults+0x1a0>)
 8014798:	799b      	ldrb	r3, [r3, #6]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d00d      	beq.n	80147ba <defaultHeaderFaults+0x10e>
		x += LCD_PutStr(x, y, DEFAULT_HEADER7_FAULT_LBL, fnt7x10);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	b298      	uxth	r0, r3
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	b299      	uxth	r1, r3
 80147a6:	4b2a      	ldr	r3, [pc, #168]	; (8014850 <defaultHeaderFaults+0x1a4>)
 80147a8:	4a30      	ldr	r2, [pc, #192]	; (801486c <defaultHeaderFaults+0x1c0>)
 80147aa:	f7ed f923 	bl	80019f4 <LCD_PutStr>
 80147ae:	4603      	mov	r3, r0
 80147b0:	461a      	mov	r2, r3
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	4413      	add	r3, r2
 80147b6:	60fb      	str	r3, [r7, #12]
 80147b8:	e042      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault8){
 80147ba:	4b24      	ldr	r3, [pc, #144]	; (801484c <defaultHeaderFaults+0x1a0>)
 80147bc:	7adb      	ldrb	r3, [r3, #11]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d00d      	beq.n	80147de <defaultHeaderFaults+0x132>
		x += LCD_PutStr(x, y, DEFAULT_HEADER8_FAULT_LBL, fnt7x10);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	b298      	uxth	r0, r3
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	b299      	uxth	r1, r3
 80147ca:	4b21      	ldr	r3, [pc, #132]	; (8014850 <defaultHeaderFaults+0x1a4>)
 80147cc:	4a28      	ldr	r2, [pc, #160]	; (8014870 <defaultHeaderFaults+0x1c4>)
 80147ce:	f7ed f911 	bl	80019f4 <LCD_PutStr>
 80147d2:	4603      	mov	r3, r0
 80147d4:	461a      	mov	r2, r3
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	4413      	add	r3, r2
 80147da:	60fb      	str	r3, [r7, #12]
 80147dc:	e030      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.fault9){
 80147de:	4b1b      	ldr	r3, [pc, #108]	; (801484c <defaultHeaderFaults+0x1a0>)
 80147e0:	7b1b      	ldrb	r3, [r3, #12]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d00d      	beq.n	8014802 <defaultHeaderFaults+0x156>
		x += LCD_PutStr(x, y, DEFAULT_HEADER9_FAULT_LBL, fnt7x10);
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	b298      	uxth	r0, r3
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	b299      	uxth	r1, r3
 80147ee:	4b18      	ldr	r3, [pc, #96]	; (8014850 <defaultHeaderFaults+0x1a4>)
 80147f0:	4a20      	ldr	r2, [pc, #128]	; (8014874 <defaultHeaderFaults+0x1c8>)
 80147f2:	f7ed f8ff 	bl	80019f4 <LCD_PutStr>
 80147f6:	4603      	mov	r3, r0
 80147f8:	461a      	mov	r2, r3
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	4413      	add	r3, r2
 80147fe:	60fb      	str	r3, [r7, #12]
 8014800:	e01e      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else if(errorLED.ledDriver){
 8014802:	4b12      	ldr	r3, [pc, #72]	; (801484c <defaultHeaderFaults+0x1a0>)
 8014804:	7b5b      	ldrb	r3, [r3, #13]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d00d      	beq.n	8014826 <defaultHeaderFaults+0x17a>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	b298      	uxth	r0, r3
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	b299      	uxth	r1, r3
 8014812:	4b0f      	ldr	r3, [pc, #60]	; (8014850 <defaultHeaderFaults+0x1a4>)
 8014814:	4a18      	ldr	r2, [pc, #96]	; (8014878 <defaultHeaderFaults+0x1cc>)
 8014816:	f7ed f8ed 	bl	80019f4 <LCD_PutStr>
 801481a:	4603      	mov	r3, r0
 801481c:	461a      	mov	r2, r3
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	4413      	add	r3, r2
 8014822:	60fb      	str	r3, [r7, #12]
 8014824:	e00c      	b.n	8014840 <defaultHeaderFaults+0x194>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	b298      	uxth	r0, r3
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	b299      	uxth	r1, r3
 801482e:	4b08      	ldr	r3, [pc, #32]	; (8014850 <defaultHeaderFaults+0x1a4>)
 8014830:	4a12      	ldr	r2, [pc, #72]	; (801487c <defaultHeaderFaults+0x1d0>)
 8014832:	f7ed f8df 	bl	80019f4 <LCD_PutStr>
 8014836:	4603      	mov	r3, r0
 8014838:	461a      	mov	r2, r3
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	4413      	add	r3, r2
 801483e:	60fb      	str	r3, [r7, #12]
	}
	return x;
 8014840:	68fb      	ldr	r3, [r7, #12]
}
 8014842:	4618      	mov	r0, r3
 8014844:	3710      	adds	r7, #16
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
 801484a:	bf00      	nop
 801484c:	2000338c 	.word	0x2000338c
 8014850:	0801bfc8 	.word	0x0801bfc8
 8014854:	0801aee0 	.word	0x0801aee0
 8014858:	0801aee8 	.word	0x0801aee8
 801485c:	0801add8 	.word	0x0801add8
 8014860:	0801ade0 	.word	0x0801ade0
 8014864:	0801ade8 	.word	0x0801ade8
 8014868:	0801adf0 	.word	0x0801adf0
 801486c:	0801adf8 	.word	0x0801adf8
 8014870:	0801ae00 	.word	0x0801ae00
 8014874:	0801ae08 	.word	0x0801ae08
 8014878:	0801aef0 	.word	0x0801aef0
 801487c:	0801aef8 	.word	0x0801aef8

08014880 <defaultStatusADCsAndGPIOs>:

void defaultStatusADCsAndGPIOs(){
 8014880:	b580      	push	{r7, lr}
 8014882:	b088      	sub	sp, #32
 8014884:	af02      	add	r7, sp, #8
	int inputGpioAlignment=245;
 8014886:	23f5      	movs	r3, #245	; 0xf5
 8014888:	617b      	str	r3, [r7, #20]
	int adjacentSpacing = 20;
 801488a:	2314      	movs	r3, #20
 801488c:	613b      	str	r3, [r7, #16]
	int i=10;
 801488e:	230a      	movs	r3, #10
 8014890:	60fb      	str	r3, [r7, #12]
	int j=95;
 8014892:	235f      	movs	r3, #95	; 0x5f
 8014894:	60bb      	str	r3, [r7, #8]
	int convertedFloat;
	i+= LCD_PutStr(i, j, DEFAULT_AI0, fnt7x10);
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	b298      	uxth	r0, r3
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	b299      	uxth	r1, r3
 801489e:	4ba5      	ldr	r3, [pc, #660]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 80148a0:	4aa5      	ldr	r2, [pc, #660]	; (8014b38 <defaultStatusADCsAndGPIOs+0x2b8>)
 80148a2:	f7ed f8a7 	bl	80019f4 <LCD_PutStr>
 80148a6:	4603      	mov	r3, r0
 80148a8:	461a      	mov	r2, r3
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	4413      	add	r3, r2
 80148ae:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_VSYS;
 80148b0:	4ba2      	ldr	r3, [pc, #648]	; (8014b3c <defaultStatusADCsAndGPIOs+0x2bc>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	4aa2      	ldr	r2, [pc, #648]	; (8014b40 <defaultStatusADCsAndGPIOs+0x2c0>)
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	4413      	add	r3, r2
 80148ba:	edd3 7a00 	vldr	s15, [r3]
 80148be:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8014b44 <defaultStatusADCsAndGPIOs+0x2c4>
 80148c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148ca:	ee17 3a90 	vmov	r3, s15
 80148ce:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	b298      	uxth	r0, r3
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	b299      	uxth	r1, r3
 80148d8:	4b96      	ldr	r3, [pc, #600]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 80148da:	9300      	str	r3, [sp, #0]
 80148dc:	2303      	movs	r3, #3
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	f7ed f926 	bl	8001b30 <LCD_PutIntF>
 80148e4:	4603      	mov	r3, r0
 80148e6:	461a      	mov	r2, r3
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	4413      	add	r3, r2
 80148ec:	68fa      	ldr	r2, [r7, #12]
 80148ee:	4413      	add	r3, r2
 80148f0:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI9, fnt7x10);
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	b298      	uxth	r0, r3
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	b299      	uxth	r1, r3
 80148fa:	4b8e      	ldr	r3, [pc, #568]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 80148fc:	4a92      	ldr	r2, [pc, #584]	; (8014b48 <defaultStatusADCsAndGPIOs+0x2c8>)
 80148fe:	f7ed f879 	bl	80019f4 <LCD_PutStr>
 8014902:	4603      	mov	r3, r0
 8014904:	461a      	mov	r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	4413      	add	r3, r2
 801490a:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI9_VAL;
 801490c:	4b8b      	ldr	r3, [pc, #556]	; (8014b3c <defaultStatusADCsAndGPIOs+0x2bc>)
 801490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014910:	4a8b      	ldr	r2, [pc, #556]	; (8014b40 <defaultStatusADCsAndGPIOs+0x2c0>)
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	4413      	add	r3, r2
 8014916:	edd3 7a00 	vldr	s15, [r3]
 801491a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014b44 <defaultStatusADCsAndGPIOs+0x2c4>
 801491e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014926:	ee17 3a90 	vmov	r3, s15
 801492a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	b298      	uxth	r0, r3
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	b299      	uxth	r1, r3
 8014934:	4b7f      	ldr	r3, [pc, #508]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014936:	9300      	str	r3, [sp, #0]
 8014938:	2303      	movs	r3, #3
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	f7ed f8f8 	bl	8001b30 <LCD_PutIntF>
 8014940:	4603      	mov	r3, r0
 8014942:	461a      	mov	r2, r3
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	4413      	add	r3, r2
 8014948:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN0, fnt7x10);
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	b298      	uxth	r0, r3
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	b299      	uxth	r1, r3
 8014956:	4b77      	ldr	r3, [pc, #476]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014958:	4a7c      	ldr	r2, [pc, #496]	; (8014b4c <defaultStatusADCsAndGPIOs+0x2cc>)
 801495a:	f7ed f84b 	bl	80019f4 <LCD_PutStr>
 801495e:	4603      	mov	r3, r0
 8014960:	461a      	mov	r2, r3
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	4413      	add	r3, r2
 8014966:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN0_GPIO, fnt7x10)+adjacentSpacing;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	b298      	uxth	r0, r3
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	b299      	uxth	r1, r3
 8014970:	4b77      	ldr	r3, [pc, #476]	; (8014b50 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	461a      	mov	r2, r3
 8014976:	4b77      	ldr	r3, [pc, #476]	; (8014b54 <defaultStatusADCsAndGPIOs+0x2d4>)
 8014978:	5c9b      	ldrb	r3, [r3, r2]
 801497a:	461a      	mov	r2, r3
 801497c:	4b6d      	ldr	r3, [pc, #436]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 801497e:	f7ed f871 	bl	8001a64 <LCD_PutInt>
 8014982:	4603      	mov	r3, r0
 8014984:	461a      	mov	r2, r3
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	4413      	add	r3, r2
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	4413      	add	r3, r2
 801498e:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN9, fnt7x10);
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	b298      	uxth	r0, r3
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	b299      	uxth	r1, r3
 8014998:	4b66      	ldr	r3, [pc, #408]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 801499a:	4a6f      	ldr	r2, [pc, #444]	; (8014b58 <defaultStatusADCsAndGPIOs+0x2d8>)
 801499c:	f7ed f82a 	bl	80019f4 <LCD_PutStr>
 80149a0:	4603      	mov	r3, r0
 80149a2:	461a      	mov	r2, r3
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	4413      	add	r3, r2
 80149a8:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN9_GPIO, fnt7x10);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	b298      	uxth	r0, r3
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	b299      	uxth	r1, r3
 80149b2:	4b67      	ldr	r3, [pc, #412]	; (8014b50 <defaultStatusADCsAndGPIOs+0x2d0>)
 80149b4:	7a5b      	ldrb	r3, [r3, #9]
 80149b6:	461a      	mov	r2, r3
 80149b8:	4b66      	ldr	r3, [pc, #408]	; (8014b54 <defaultStatusADCsAndGPIOs+0x2d4>)
 80149ba:	5c9b      	ldrb	r3, [r3, r2]
 80149bc:	461a      	mov	r2, r3
 80149be:	4b5d      	ldr	r3, [pc, #372]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 80149c0:	f7ed f850 	bl	8001a64 <LCD_PutInt>
 80149c4:	4603      	mov	r3, r0
 80149c6:	461a      	mov	r2, r3
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	4413      	add	r3, r2
 80149cc:	60fb      	str	r3, [r7, #12]


	i=10;
 80149ce:	230a      	movs	r3, #10
 80149d0:	60fb      	str	r3, [r7, #12]
	j+=15;
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	330f      	adds	r3, #15
 80149d6:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI1, fnt7x10);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	b298      	uxth	r0, r3
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	b299      	uxth	r1, r3
 80149e0:	4b54      	ldr	r3, [pc, #336]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 80149e2:	4a5e      	ldr	r2, [pc, #376]	; (8014b5c <defaultStatusADCsAndGPIOs+0x2dc>)
 80149e4:	f7ed f806 	bl	80019f4 <LCD_PutStr>
 80149e8:	4603      	mov	r3, r0
 80149ea:	461a      	mov	r2, r3
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	4413      	add	r3, r2
 80149f0:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI1_VAL;
 80149f2:	4b52      	ldr	r3, [pc, #328]	; (8014b3c <defaultStatusADCsAndGPIOs+0x2bc>)
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	4a52      	ldr	r2, [pc, #328]	; (8014b40 <defaultStatusADCsAndGPIOs+0x2c0>)
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	4413      	add	r3, r2
 80149fc:	edd3 7a00 	vldr	s15, [r3]
 8014a00:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8014b44 <defaultStatusADCsAndGPIOs+0x2c4>
 8014a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a0c:	ee17 3a90 	vmov	r3, s15
 8014a10:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	b298      	uxth	r0, r3
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	b299      	uxth	r1, r3
 8014a1a:	4b46      	ldr	r3, [pc, #280]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a1c:	9300      	str	r3, [sp, #0]
 8014a1e:	2303      	movs	r3, #3
 8014a20:	687a      	ldr	r2, [r7, #4]
 8014a22:	f7ed f885 	bl	8001b30 <LCD_PutIntF>
 8014a26:	4603      	mov	r3, r0
 8014a28:	461a      	mov	r2, r3
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	68fa      	ldr	r2, [r7, #12]
 8014a30:	4413      	add	r3, r2
 8014a32:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI10, fnt7x10);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	b298      	uxth	r0, r3
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	b299      	uxth	r1, r3
 8014a3c:	4b3d      	ldr	r3, [pc, #244]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a3e:	4a48      	ldr	r2, [pc, #288]	; (8014b60 <defaultStatusADCsAndGPIOs+0x2e0>)
 8014a40:	f7ec ffd8 	bl	80019f4 <LCD_PutStr>
 8014a44:	4603      	mov	r3, r0
 8014a46:	461a      	mov	r2, r3
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	4413      	add	r3, r2
 8014a4c:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI10_VAL;
 8014a4e:	4b3b      	ldr	r3, [pc, #236]	; (8014b3c <defaultStatusADCsAndGPIOs+0x2bc>)
 8014a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a52:	4a3b      	ldr	r2, [pc, #236]	; (8014b40 <defaultStatusADCsAndGPIOs+0x2c0>)
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	4413      	add	r3, r2
 8014a58:	edd3 7a00 	vldr	s15, [r3]
 8014a5c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8014b44 <defaultStatusADCsAndGPIOs+0x2c4>
 8014a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a68:	ee17 3a90 	vmov	r3, s15
 8014a6c:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	b298      	uxth	r0, r3
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	b299      	uxth	r1, r3
 8014a76:	4b2f      	ldr	r3, [pc, #188]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a78:	9300      	str	r3, [sp, #0]
 8014a7a:	2303      	movs	r3, #3
 8014a7c:	687a      	ldr	r2, [r7, #4]
 8014a7e:	f7ed f857 	bl	8001b30 <LCD_PutIntF>
 8014a82:	4603      	mov	r3, r0
 8014a84:	461a      	mov	r2, r3
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	4413      	add	r3, r2
 8014a8a:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN1, fnt7x10);
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	b298      	uxth	r0, r3
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	b299      	uxth	r1, r3
 8014a98:	4b26      	ldr	r3, [pc, #152]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014a9a:	4a32      	ldr	r2, [pc, #200]	; (8014b64 <defaultStatusADCsAndGPIOs+0x2e4>)
 8014a9c:	f7ec ffaa 	bl	80019f4 <LCD_PutStr>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN1_GPIO, fnt7x10)+adjacentSpacing;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	b298      	uxth	r0, r3
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	b299      	uxth	r1, r3
 8014ab2:	4b27      	ldr	r3, [pc, #156]	; (8014b50 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014ab4:	785b      	ldrb	r3, [r3, #1]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	4b26      	ldr	r3, [pc, #152]	; (8014b54 <defaultStatusADCsAndGPIOs+0x2d4>)
 8014aba:	5c9b      	ldrb	r3, [r3, r2]
 8014abc:	461a      	mov	r2, r3
 8014abe:	4b1d      	ldr	r3, [pc, #116]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014ac0:	f7ec ffd0 	bl	8001a64 <LCD_PutInt>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	4413      	add	r3, r2
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	4413      	add	r3, r2
 8014ad0:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN10, fnt7x10);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	b298      	uxth	r0, r3
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	b299      	uxth	r1, r3
 8014ada:	4b16      	ldr	r3, [pc, #88]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014adc:	4a22      	ldr	r2, [pc, #136]	; (8014b68 <defaultStatusADCsAndGPIOs+0x2e8>)
 8014ade:	f7ec ff89 	bl	80019f4 <LCD_PutStr>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	4413      	add	r3, r2
 8014aea:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN10_GPIO, fnt7x10);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	b298      	uxth	r0, r3
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	b299      	uxth	r1, r3
 8014af4:	4b16      	ldr	r3, [pc, #88]	; (8014b50 <defaultStatusADCsAndGPIOs+0x2d0>)
 8014af6:	7a9b      	ldrb	r3, [r3, #10]
 8014af8:	461a      	mov	r2, r3
 8014afa:	4b16      	ldr	r3, [pc, #88]	; (8014b54 <defaultStatusADCsAndGPIOs+0x2d4>)
 8014afc:	5c9b      	ldrb	r3, [r3, r2]
 8014afe:	461a      	mov	r2, r3
 8014b00:	4b0c      	ldr	r3, [pc, #48]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014b02:	f7ec ffaf 	bl	8001a64 <LCD_PutInt>
 8014b06:	4603      	mov	r3, r0
 8014b08:	461a      	mov	r2, r3
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	60fb      	str	r3, [r7, #12]

	i=10;
 8014b10:	230a      	movs	r3, #10
 8014b12:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	330f      	adds	r3, #15
 8014b18:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI2, fnt7x10);
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	b298      	uxth	r0, r3
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	b299      	uxth	r1, r3
 8014b22:	4b04      	ldr	r3, [pc, #16]	; (8014b34 <defaultStatusADCsAndGPIOs+0x2b4>)
 8014b24:	4a11      	ldr	r2, [pc, #68]	; (8014b6c <defaultStatusADCsAndGPIOs+0x2ec>)
 8014b26:	f7ec ff65 	bl	80019f4 <LCD_PutStr>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	4413      	add	r3, r2
 8014b32:	e01d      	b.n	8014b70 <defaultStatusADCsAndGPIOs+0x2f0>
 8014b34:	0801bfc8 	.word	0x0801bfc8
 8014b38:	0801af00 	.word	0x0801af00
 8014b3c:	200001f4 	.word	0x200001f4
 8014b40:	2003119c 	.word	0x2003119c
 8014b44:	447a0000 	.word	0x447a0000
 8014b48:	0801af08 	.word	0x0801af08
 8014b4c:	0801af10 	.word	0x0801af10
 8014b50:	200001e8 	.word	0x200001e8
 8014b54:	20028df0 	.word	0x20028df0
 8014b58:	0801af18 	.word	0x0801af18
 8014b5c:	0801af20 	.word	0x0801af20
 8014b60:	0801af28 	.word	0x0801af28
 8014b64:	0801af30 	.word	0x0801af30
 8014b68:	0801af38 	.word	0x0801af38
 8014b6c:	0801af40 	.word	0x0801af40
 8014b70:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI2_VAL;
 8014b72:	4ba6      	ldr	r3, [pc, #664]	; (8014e0c <defaultStatusADCsAndGPIOs+0x58c>)
 8014b74:	689b      	ldr	r3, [r3, #8]
 8014b76:	4aa6      	ldr	r2, [pc, #664]	; (8014e10 <defaultStatusADCsAndGPIOs+0x590>)
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	4413      	add	r3, r2
 8014b7c:	edd3 7a00 	vldr	s15, [r3]
 8014b80:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8014e14 <defaultStatusADCsAndGPIOs+0x594>
 8014b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b8c:	ee17 3a90 	vmov	r3, s15
 8014b90:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	b298      	uxth	r0, r3
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	b299      	uxth	r1, r3
 8014b9a:	4b9f      	ldr	r3, [pc, #636]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014b9c:	9300      	str	r3, [sp, #0]
 8014b9e:	2303      	movs	r3, #3
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	f7ec ffc5 	bl	8001b30 <LCD_PutIntF>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	461a      	mov	r2, r3
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	4413      	add	r3, r2
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI11, fnt7x10);
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	b298      	uxth	r0, r3
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	b299      	uxth	r1, r3
 8014bbc:	4b96      	ldr	r3, [pc, #600]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014bbe:	4a97      	ldr	r2, [pc, #604]	; (8014e1c <defaultStatusADCsAndGPIOs+0x59c>)
 8014bc0:	f7ec ff18 	bl	80019f4 <LCD_PutStr>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	4413      	add	r3, r2
 8014bcc:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI11_VAL;
 8014bce:	4b8f      	ldr	r3, [pc, #572]	; (8014e0c <defaultStatusADCsAndGPIOs+0x58c>)
 8014bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bd2:	4a8f      	ldr	r2, [pc, #572]	; (8014e10 <defaultStatusADCsAndGPIOs+0x590>)
 8014bd4:	009b      	lsls	r3, r3, #2
 8014bd6:	4413      	add	r3, r2
 8014bd8:	edd3 7a00 	vldr	s15, [r3]
 8014bdc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014e14 <defaultStatusADCsAndGPIOs+0x594>
 8014be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014be8:	ee17 3a90 	vmov	r3, s15
 8014bec:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	b298      	uxth	r0, r3
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	b299      	uxth	r1, r3
 8014bf6:	4b88      	ldr	r3, [pc, #544]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	2303      	movs	r3, #3
 8014bfc:	687a      	ldr	r2, [r7, #4]
 8014bfe:	f7ec ff97 	bl	8001b30 <LCD_PutIntF>
 8014c02:	4603      	mov	r3, r0
 8014c04:	461a      	mov	r2, r3
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	4413      	add	r3, r2
 8014c0a:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN2, fnt7x10);
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	b298      	uxth	r0, r3
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	b299      	uxth	r1, r3
 8014c18:	4b7f      	ldr	r3, [pc, #508]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014c1a:	4a81      	ldr	r2, [pc, #516]	; (8014e20 <defaultStatusADCsAndGPIOs+0x5a0>)
 8014c1c:	f7ec feea 	bl	80019f4 <LCD_PutStr>
 8014c20:	4603      	mov	r3, r0
 8014c22:	461a      	mov	r2, r3
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	4413      	add	r3, r2
 8014c28:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN2_GPIO, fnt7x10)+adjacentSpacing;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	b298      	uxth	r0, r3
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	b299      	uxth	r1, r3
 8014c32:	4b7c      	ldr	r3, [pc, #496]	; (8014e24 <defaultStatusADCsAndGPIOs+0x5a4>)
 8014c34:	789b      	ldrb	r3, [r3, #2]
 8014c36:	461a      	mov	r2, r3
 8014c38:	4b7b      	ldr	r3, [pc, #492]	; (8014e28 <defaultStatusADCsAndGPIOs+0x5a8>)
 8014c3a:	5c9b      	ldrb	r3, [r3, r2]
 8014c3c:	461a      	mov	r2, r3
 8014c3e:	4b76      	ldr	r3, [pc, #472]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014c40:	f7ec ff10 	bl	8001a64 <LCD_PutInt>
 8014c44:	4603      	mov	r3, r0
 8014c46:	461a      	mov	r2, r3
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	68fa      	ldr	r2, [r7, #12]
 8014c4e:	4413      	add	r3, r2
 8014c50:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN11, fnt7x10);
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	b298      	uxth	r0, r3
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	b299      	uxth	r1, r3
 8014c5a:	4b6f      	ldr	r3, [pc, #444]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014c5c:	4a73      	ldr	r2, [pc, #460]	; (8014e2c <defaultStatusADCsAndGPIOs+0x5ac>)
 8014c5e:	f7ec fec9 	bl	80019f4 <LCD_PutStr>
 8014c62:	4603      	mov	r3, r0
 8014c64:	461a      	mov	r2, r3
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	4413      	add	r3, r2
 8014c6a:	60fb      	str	r3, [r7, #12]
	i+=LCD_PutInt(i,j,DEFAULT_IN11_GPIO, fnt7x10);
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	b298      	uxth	r0, r3
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	b299      	uxth	r1, r3
 8014c74:	4b6b      	ldr	r3, [pc, #428]	; (8014e24 <defaultStatusADCsAndGPIOs+0x5a4>)
 8014c76:	7adb      	ldrb	r3, [r3, #11]
 8014c78:	461a      	mov	r2, r3
 8014c7a:	4b6b      	ldr	r3, [pc, #428]	; (8014e28 <defaultStatusADCsAndGPIOs+0x5a8>)
 8014c7c:	5c9b      	ldrb	r3, [r3, r2]
 8014c7e:	461a      	mov	r2, r3
 8014c80:	4b65      	ldr	r3, [pc, #404]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014c82:	f7ec feef 	bl	8001a64 <LCD_PutInt>
 8014c86:	4603      	mov	r3, r0
 8014c88:	461a      	mov	r2, r3
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	60fb      	str	r3, [r7, #12]

	i=10;
 8014c90:	230a      	movs	r3, #10
 8014c92:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	330f      	adds	r3, #15
 8014c98:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI3, fnt7x10);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	b298      	uxth	r0, r3
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	b299      	uxth	r1, r3
 8014ca2:	4b5d      	ldr	r3, [pc, #372]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014ca4:	4a62      	ldr	r2, [pc, #392]	; (8014e30 <defaultStatusADCsAndGPIOs+0x5b0>)
 8014ca6:	f7ec fea5 	bl	80019f4 <LCD_PutStr>
 8014caa:	4603      	mov	r3, r0
 8014cac:	461a      	mov	r2, r3
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	4413      	add	r3, r2
 8014cb2:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI3_VAL;
 8014cb4:	4b55      	ldr	r3, [pc, #340]	; (8014e0c <defaultStatusADCsAndGPIOs+0x58c>)
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	4a55      	ldr	r2, [pc, #340]	; (8014e10 <defaultStatusADCsAndGPIOs+0x590>)
 8014cba:	009b      	lsls	r3, r3, #2
 8014cbc:	4413      	add	r3, r2
 8014cbe:	edd3 7a00 	vldr	s15, [r3]
 8014cc2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014e14 <defaultStatusADCsAndGPIOs+0x594>
 8014cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cce:	ee17 3a90 	vmov	r3, s15
 8014cd2:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	b298      	uxth	r0, r3
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	b299      	uxth	r1, r3
 8014cdc:	4b4e      	ldr	r3, [pc, #312]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	2303      	movs	r3, #3
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	f7ec ff24 	bl	8001b30 <LCD_PutIntF>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	461a      	mov	r2, r3
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	4413      	add	r3, r2
 8014cf0:	68fa      	ldr	r2, [r7, #12]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI12, fnt7x10);
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	b298      	uxth	r0, r3
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	b299      	uxth	r1, r3
 8014cfe:	4b46      	ldr	r3, [pc, #280]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014d00:	4a4c      	ldr	r2, [pc, #304]	; (8014e34 <defaultStatusADCsAndGPIOs+0x5b4>)
 8014d02:	f7ec fe77 	bl	80019f4 <LCD_PutStr>
 8014d06:	4603      	mov	r3, r0
 8014d08:	461a      	mov	r2, r3
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI12_VAL;
 8014d10:	4b3e      	ldr	r3, [pc, #248]	; (8014e0c <defaultStatusADCsAndGPIOs+0x58c>)
 8014d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d14:	4a3e      	ldr	r2, [pc, #248]	; (8014e10 <defaultStatusADCsAndGPIOs+0x590>)
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	4413      	add	r3, r2
 8014d1a:	edd3 7a00 	vldr	s15, [r3]
 8014d1e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8014e14 <defaultStatusADCsAndGPIOs+0x594>
 8014d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d2a:	ee17 3a90 	vmov	r3, s15
 8014d2e:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	b298      	uxth	r0, r3
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	b299      	uxth	r1, r3
 8014d38:	4b37      	ldr	r3, [pc, #220]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014d3a:	9300      	str	r3, [sp, #0]
 8014d3c:	2303      	movs	r3, #3
 8014d3e:	687a      	ldr	r2, [r7, #4]
 8014d40:	f7ec fef6 	bl	8001b30 <LCD_PutIntF>
 8014d44:	4603      	mov	r3, r0
 8014d46:	461a      	mov	r2, r3
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	4413      	add	r3, r2
 8014d4c:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN3, fnt7x10);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	b298      	uxth	r0, r3
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	b299      	uxth	r1, r3
 8014d5a:	4b2f      	ldr	r3, [pc, #188]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014d5c:	4a36      	ldr	r2, [pc, #216]	; (8014e38 <defaultStatusADCsAndGPIOs+0x5b8>)
 8014d5e:	f7ec fe49 	bl	80019f4 <LCD_PutStr>
 8014d62:	4603      	mov	r3, r0
 8014d64:	461a      	mov	r2, r3
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	4413      	add	r3, r2
 8014d6a:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN3_GPIO, fnt7x10);
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	b298      	uxth	r0, r3
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	b299      	uxth	r1, r3
 8014d74:	4b2b      	ldr	r3, [pc, #172]	; (8014e24 <defaultStatusADCsAndGPIOs+0x5a4>)
 8014d76:	78db      	ldrb	r3, [r3, #3]
 8014d78:	461a      	mov	r2, r3
 8014d7a:	4b2b      	ldr	r3, [pc, #172]	; (8014e28 <defaultStatusADCsAndGPIOs+0x5a8>)
 8014d7c:	5c9b      	ldrb	r3, [r3, r2]
 8014d7e:	461a      	mov	r2, r3
 8014d80:	4b25      	ldr	r3, [pc, #148]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014d82:	f7ec fe6f 	bl	8001a64 <LCD_PutInt>


	i=10;
 8014d86:	230a      	movs	r3, #10
 8014d88:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	330f      	adds	r3, #15
 8014d8e:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI4, fnt7x10);
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	b298      	uxth	r0, r3
 8014d94:	68bb      	ldr	r3, [r7, #8]
 8014d96:	b299      	uxth	r1, r3
 8014d98:	4b1f      	ldr	r3, [pc, #124]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014d9a:	4a28      	ldr	r2, [pc, #160]	; (8014e3c <defaultStatusADCsAndGPIOs+0x5bc>)
 8014d9c:	f7ec fe2a 	bl	80019f4 <LCD_PutStr>
 8014da0:	4603      	mov	r3, r0
 8014da2:	461a      	mov	r2, r3
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	4413      	add	r3, r2
 8014da8:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI4_VAL;
 8014daa:	4b18      	ldr	r3, [pc, #96]	; (8014e0c <defaultStatusADCsAndGPIOs+0x58c>)
 8014dac:	691b      	ldr	r3, [r3, #16]
 8014dae:	4a18      	ldr	r2, [pc, #96]	; (8014e10 <defaultStatusADCsAndGPIOs+0x590>)
 8014db0:	009b      	lsls	r3, r3, #2
 8014db2:	4413      	add	r3, r2
 8014db4:	edd3 7a00 	vldr	s15, [r3]
 8014db8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014e14 <defaultStatusADCsAndGPIOs+0x594>
 8014dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dc4:	ee17 3a90 	vmov	r3, s15
 8014dc8:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	b298      	uxth	r0, r3
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	b299      	uxth	r1, r3
 8014dd2:	4b11      	ldr	r3, [pc, #68]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014dd4:	9300      	str	r3, [sp, #0]
 8014dd6:	2303      	movs	r3, #3
 8014dd8:	687a      	ldr	r2, [r7, #4]
 8014dda:	f7ec fea9 	bl	8001b30 <LCD_PutIntF>
 8014dde:	4603      	mov	r3, r0
 8014de0:	461a      	mov	r2, r3
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	4413      	add	r3, r2
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	4413      	add	r3, r2
 8014dea:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI13, fnt7x10);
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	b298      	uxth	r0, r3
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	b299      	uxth	r1, r3
 8014df4:	4b08      	ldr	r3, [pc, #32]	; (8014e18 <defaultStatusADCsAndGPIOs+0x598>)
 8014df6:	4a12      	ldr	r2, [pc, #72]	; (8014e40 <defaultStatusADCsAndGPIOs+0x5c0>)
 8014df8:	f7ec fdfc 	bl	80019f4 <LCD_PutStr>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	461a      	mov	r2, r3
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	4413      	add	r3, r2
 8014e04:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI13_VAL;
 8014e06:	4b01      	ldr	r3, [pc, #4]	; (8014e0c <defaultStatusADCsAndGPIOs+0x58c>)
 8014e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e0a:	e01b      	b.n	8014e44 <defaultStatusADCsAndGPIOs+0x5c4>
 8014e0c:	200001f4 	.word	0x200001f4
 8014e10:	2003119c 	.word	0x2003119c
 8014e14:	447a0000 	.word	0x447a0000
 8014e18:	0801bfc8 	.word	0x0801bfc8
 8014e1c:	0801af48 	.word	0x0801af48
 8014e20:	0801af50 	.word	0x0801af50
 8014e24:	200001e8 	.word	0x200001e8
 8014e28:	20028df0 	.word	0x20028df0
 8014e2c:	0801af58 	.word	0x0801af58
 8014e30:	0801af60 	.word	0x0801af60
 8014e34:	0801af68 	.word	0x0801af68
 8014e38:	0801af70 	.word	0x0801af70
 8014e3c:	0801af78 	.word	0x0801af78
 8014e40:	0801af80 	.word	0x0801af80
 8014e44:	4aa7      	ldr	r2, [pc, #668]	; (80150e4 <defaultStatusADCsAndGPIOs+0x864>)
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	4413      	add	r3, r2
 8014e4a:	edd3 7a00 	vldr	s15, [r3]
 8014e4e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80150e8 <defaultStatusADCsAndGPIOs+0x868>
 8014e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e5a:	ee17 3a90 	vmov	r3, s15
 8014e5e:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	b298      	uxth	r0, r3
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	b299      	uxth	r1, r3
 8014e68:	4ba0      	ldr	r3, [pc, #640]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	2303      	movs	r3, #3
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	f7ec fe5e 	bl	8001b30 <LCD_PutIntF>
 8014e74:	4603      	mov	r3, r0
 8014e76:	461a      	mov	r2, r3
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	4413      	add	r3, r2
 8014e7c:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN4, fnt7x10);
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	b298      	uxth	r0, r3
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	b299      	uxth	r1, r3
 8014e8a:	4b98      	ldr	r3, [pc, #608]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014e8c:	4a98      	ldr	r2, [pc, #608]	; (80150f0 <defaultStatusADCsAndGPIOs+0x870>)
 8014e8e:	f7ec fdb1 	bl	80019f4 <LCD_PutStr>
 8014e92:	4603      	mov	r3, r0
 8014e94:	461a      	mov	r2, r3
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	4413      	add	r3, r2
 8014e9a:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN3_GPIO, fnt7x10);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	b298      	uxth	r0, r3
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	b299      	uxth	r1, r3
 8014ea4:	4b93      	ldr	r3, [pc, #588]	; (80150f4 <defaultStatusADCsAndGPIOs+0x874>)
 8014ea6:	78db      	ldrb	r3, [r3, #3]
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	4b93      	ldr	r3, [pc, #588]	; (80150f8 <defaultStatusADCsAndGPIOs+0x878>)
 8014eac:	5c9b      	ldrb	r3, [r3, r2]
 8014eae:	461a      	mov	r2, r3
 8014eb0:	4b8e      	ldr	r3, [pc, #568]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014eb2:	f7ec fdd7 	bl	8001a64 <LCD_PutInt>

	i=10;
 8014eb6:	230a      	movs	r3, #10
 8014eb8:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	330f      	adds	r3, #15
 8014ebe:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI5, fnt7x10);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	b298      	uxth	r0, r3
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	b299      	uxth	r1, r3
 8014ec8:	4b88      	ldr	r3, [pc, #544]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014eca:	4a8c      	ldr	r2, [pc, #560]	; (80150fc <defaultStatusADCsAndGPIOs+0x87c>)
 8014ecc:	f7ec fd92 	bl	80019f4 <LCD_PutStr>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI5_VAL;
 8014eda:	4b89      	ldr	r3, [pc, #548]	; (8015100 <defaultStatusADCsAndGPIOs+0x880>)
 8014edc:	695b      	ldr	r3, [r3, #20]
 8014ede:	4a81      	ldr	r2, [pc, #516]	; (80150e4 <defaultStatusADCsAndGPIOs+0x864>)
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	4413      	add	r3, r2
 8014ee4:	edd3 7a00 	vldr	s15, [r3]
 8014ee8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80150e8 <defaultStatusADCsAndGPIOs+0x868>
 8014eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ef4:	ee17 3a90 	vmov	r3, s15
 8014ef8:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	b298      	uxth	r0, r3
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	b299      	uxth	r1, r3
 8014f02:	4b7a      	ldr	r3, [pc, #488]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014f04:	9300      	str	r3, [sp, #0]
 8014f06:	2303      	movs	r3, #3
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	f7ec fe11 	bl	8001b30 <LCD_PutIntF>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	461a      	mov	r2, r3
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	4413      	add	r3, r2
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	4413      	add	r3, r2
 8014f1a:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI14, fnt7x10);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	b298      	uxth	r0, r3
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	b299      	uxth	r1, r3
 8014f24:	4b71      	ldr	r3, [pc, #452]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014f26:	4a77      	ldr	r2, [pc, #476]	; (8015104 <defaultStatusADCsAndGPIOs+0x884>)
 8014f28:	f7ec fd64 	bl	80019f4 <LCD_PutStr>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	461a      	mov	r2, r3
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	4413      	add	r3, r2
 8014f34:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI14_VAL;
 8014f36:	4b72      	ldr	r3, [pc, #456]	; (8015100 <defaultStatusADCsAndGPIOs+0x880>)
 8014f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f3a:	4a6a      	ldr	r2, [pc, #424]	; (80150e4 <defaultStatusADCsAndGPIOs+0x864>)
 8014f3c:	009b      	lsls	r3, r3, #2
 8014f3e:	4413      	add	r3, r2
 8014f40:	edd3 7a00 	vldr	s15, [r3]
 8014f44:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80150e8 <defaultStatusADCsAndGPIOs+0x868>
 8014f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f50:	ee17 3a90 	vmov	r3, s15
 8014f54:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	b298      	uxth	r0, r3
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	b299      	uxth	r1, r3
 8014f5e:	4b63      	ldr	r3, [pc, #396]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	2303      	movs	r3, #3
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	f7ec fde3 	bl	8001b30 <LCD_PutIntF>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	4413      	add	r3, r2
 8014f72:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN5, fnt7x10);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	b298      	uxth	r0, r3
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	b299      	uxth	r1, r3
 8014f80:	4b5a      	ldr	r3, [pc, #360]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014f82:	4a61      	ldr	r2, [pc, #388]	; (8015108 <defaultStatusADCsAndGPIOs+0x888>)
 8014f84:	f7ec fd36 	bl	80019f4 <LCD_PutStr>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	461a      	mov	r2, r3
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	4413      	add	r3, r2
 8014f90:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN5_GPIO, fnt7x10);
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	b298      	uxth	r0, r3
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	b299      	uxth	r1, r3
 8014f9a:	4b56      	ldr	r3, [pc, #344]	; (80150f4 <defaultStatusADCsAndGPIOs+0x874>)
 8014f9c:	795b      	ldrb	r3, [r3, #5]
 8014f9e:	461a      	mov	r2, r3
 8014fa0:	4b55      	ldr	r3, [pc, #340]	; (80150f8 <defaultStatusADCsAndGPIOs+0x878>)
 8014fa2:	5c9b      	ldrb	r3, [r3, r2]
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	4b51      	ldr	r3, [pc, #324]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014fa8:	f7ec fd5c 	bl	8001a64 <LCD_PutInt>

	i=10;
 8014fac:	230a      	movs	r3, #10
 8014fae:	60fb      	str	r3, [r7, #12]
	j+=15;
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	330f      	adds	r3, #15
 8014fb4:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI6, fnt7x10);
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	b298      	uxth	r0, r3
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	b299      	uxth	r1, r3
 8014fbe:	4b4b      	ldr	r3, [pc, #300]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014fc0:	4a52      	ldr	r2, [pc, #328]	; (801510c <defaultStatusADCsAndGPIOs+0x88c>)
 8014fc2:	f7ec fd17 	bl	80019f4 <LCD_PutStr>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	461a      	mov	r2, r3
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	4413      	add	r3, r2
 8014fce:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI6_VAL;
 8014fd0:	4b4b      	ldr	r3, [pc, #300]	; (8015100 <defaultStatusADCsAndGPIOs+0x880>)
 8014fd2:	699b      	ldr	r3, [r3, #24]
 8014fd4:	4a43      	ldr	r2, [pc, #268]	; (80150e4 <defaultStatusADCsAndGPIOs+0x864>)
 8014fd6:	009b      	lsls	r3, r3, #2
 8014fd8:	4413      	add	r3, r2
 8014fda:	edd3 7a00 	vldr	s15, [r3]
 8014fde:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80150e8 <defaultStatusADCsAndGPIOs+0x868>
 8014fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014fea:	ee17 3a90 	vmov	r3, s15
 8014fee:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	b298      	uxth	r0, r3
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	b299      	uxth	r1, r3
 8014ff8:	4b3c      	ldr	r3, [pc, #240]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	2303      	movs	r3, #3
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	f7ec fd96 	bl	8001b30 <LCD_PutIntF>
 8015004:	4603      	mov	r3, r0
 8015006:	461a      	mov	r2, r3
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	4413      	add	r3, r2
 801500c:	68fa      	ldr	r2, [r7, #12]
 801500e:	4413      	add	r3, r2
 8015010:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_AI15, fnt7x10);
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	b298      	uxth	r0, r3
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	b299      	uxth	r1, r3
 801501a:	4b34      	ldr	r3, [pc, #208]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 801501c:	4a3c      	ldr	r2, [pc, #240]	; (8015110 <defaultStatusADCsAndGPIOs+0x890>)
 801501e:	f7ec fce9 	bl	80019f4 <LCD_PutStr>
 8015022:	4603      	mov	r3, r0
 8015024:	461a      	mov	r2, r3
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	4413      	add	r3, r2
 801502a:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI15_VAL;
 801502c:	4b34      	ldr	r3, [pc, #208]	; (8015100 <defaultStatusADCsAndGPIOs+0x880>)
 801502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015030:	4a2c      	ldr	r2, [pc, #176]	; (80150e4 <defaultStatusADCsAndGPIOs+0x864>)
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	edd3 7a00 	vldr	s15, [r3]
 801503a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80150e8 <defaultStatusADCsAndGPIOs+0x868>
 801503e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015046:	ee17 3a90 	vmov	r3, s15
 801504a:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	b298      	uxth	r0, r3
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	b299      	uxth	r1, r3
 8015054:	4b25      	ldr	r3, [pc, #148]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8015056:	9300      	str	r3, [sp, #0]
 8015058:	2303      	movs	r3, #3
 801505a:	687a      	ldr	r2, [r7, #4]
 801505c:	f7ec fd68 	bl	8001b30 <LCD_PutIntF>
 8015060:	4603      	mov	r3, r0
 8015062:	461a      	mov	r2, r3
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	4413      	add	r3, r2
 8015068:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN6, fnt7x10);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	b298      	uxth	r0, r3
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	b299      	uxth	r1, r3
 8015076:	4b1d      	ldr	r3, [pc, #116]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 8015078:	4a26      	ldr	r2, [pc, #152]	; (8015114 <defaultStatusADCsAndGPIOs+0x894>)
 801507a:	f7ec fcbb 	bl	80019f4 <LCD_PutStr>
 801507e:	4603      	mov	r3, r0
 8015080:	461a      	mov	r2, r3
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	4413      	add	r3, r2
 8015086:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN6_GPIO, fnt7x10);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	b298      	uxth	r0, r3
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	b299      	uxth	r1, r3
 8015090:	4b18      	ldr	r3, [pc, #96]	; (80150f4 <defaultStatusADCsAndGPIOs+0x874>)
 8015092:	799b      	ldrb	r3, [r3, #6]
 8015094:	461a      	mov	r2, r3
 8015096:	4b18      	ldr	r3, [pc, #96]	; (80150f8 <defaultStatusADCsAndGPIOs+0x878>)
 8015098:	5c9b      	ldrb	r3, [r3, r2]
 801509a:	461a      	mov	r2, r3
 801509c:	4b13      	ldr	r3, [pc, #76]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 801509e:	f7ec fce1 	bl	8001a64 <LCD_PutInt>

	i=10;
 80150a2:	230a      	movs	r3, #10
 80150a4:	60fb      	str	r3, [r7, #12]
	j+=15;
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	330f      	adds	r3, #15
 80150aa:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI7, fnt7x10);
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	b298      	uxth	r0, r3
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	b299      	uxth	r1, r3
 80150b4:	4b0d      	ldr	r3, [pc, #52]	; (80150ec <defaultStatusADCsAndGPIOs+0x86c>)
 80150b6:	4a18      	ldr	r2, [pc, #96]	; (8015118 <defaultStatusADCsAndGPIOs+0x898>)
 80150b8:	f7ec fc9c 	bl	80019f4 <LCD_PutStr>
 80150bc:	4603      	mov	r3, r0
 80150be:	461a      	mov	r2, r3
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	4413      	add	r3, r2
 80150c4:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI7_VAL;
 80150c6:	4b0e      	ldr	r3, [pc, #56]	; (8015100 <defaultStatusADCsAndGPIOs+0x880>)
 80150c8:	69db      	ldr	r3, [r3, #28]
 80150ca:	4a06      	ldr	r2, [pc, #24]	; (80150e4 <defaultStatusADCsAndGPIOs+0x864>)
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	4413      	add	r3, r2
 80150d0:	edd3 7a00 	vldr	s15, [r3]
 80150d4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80150e8 <defaultStatusADCsAndGPIOs+0x868>
 80150d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80150dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150e0:	e01c      	b.n	801511c <defaultStatusADCsAndGPIOs+0x89c>
 80150e2:	bf00      	nop
 80150e4:	2003119c 	.word	0x2003119c
 80150e8:	447a0000 	.word	0x447a0000
 80150ec:	0801bfc8 	.word	0x0801bfc8
 80150f0:	0801af88 	.word	0x0801af88
 80150f4:	200001e8 	.word	0x200001e8
 80150f8:	20028df0 	.word	0x20028df0
 80150fc:	0801af90 	.word	0x0801af90
 8015100:	200001f4 	.word	0x200001f4
 8015104:	0801af98 	.word	0x0801af98
 8015108:	0801afa0 	.word	0x0801afa0
 801510c:	0801afa8 	.word	0x0801afa8
 8015110:	0801afb0 	.word	0x0801afb0
 8015114:	0801afb8 	.word	0x0801afb8
 8015118:	0801afc0 	.word	0x0801afc0
 801511c:	ee17 3a90 	vmov	r3, s15
 8015120:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	b298      	uxth	r0, r3
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	b299      	uxth	r1, r3
 801512a:	4b4d      	ldr	r3, [pc, #308]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 801512c:	9300      	str	r3, [sp, #0]
 801512e:	2303      	movs	r3, #3
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	f7ec fcfd 	bl	8001b30 <LCD_PutIntF>
 8015136:	4603      	mov	r3, r0
 8015138:	461a      	mov	r2, r3
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	4413      	add	r3, r2
 801513e:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN7, fnt7x10);
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	b298      	uxth	r0, r3
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	b299      	uxth	r1, r3
 801514c:	4b44      	ldr	r3, [pc, #272]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 801514e:	4a45      	ldr	r2, [pc, #276]	; (8015264 <defaultStatusADCsAndGPIOs+0x9e4>)
 8015150:	f7ec fc50 	bl	80019f4 <LCD_PutStr>
 8015154:	4603      	mov	r3, r0
 8015156:	461a      	mov	r2, r3
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	4413      	add	r3, r2
 801515c:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN7_GPIO, fnt7x10);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	b298      	uxth	r0, r3
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	b299      	uxth	r1, r3
 8015166:	4b40      	ldr	r3, [pc, #256]	; (8015268 <defaultStatusADCsAndGPIOs+0x9e8>)
 8015168:	79db      	ldrb	r3, [r3, #7]
 801516a:	461a      	mov	r2, r3
 801516c:	4b3f      	ldr	r3, [pc, #252]	; (801526c <defaultStatusADCsAndGPIOs+0x9ec>)
 801516e:	5c9b      	ldrb	r3, [r3, r2]
 8015170:	461a      	mov	r2, r3
 8015172:	4b3b      	ldr	r3, [pc, #236]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 8015174:	f7ec fc76 	bl	8001a64 <LCD_PutInt>

	i=10;
 8015178:	230a      	movs	r3, #10
 801517a:	60fb      	str	r3, [r7, #12]
	j+=15;
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	330f      	adds	r3, #15
 8015180:	60bb      	str	r3, [r7, #8]
	i+= LCD_PutStr(i, j, DEFAULT_AI8, fnt7x10);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	b298      	uxth	r0, r3
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	b299      	uxth	r1, r3
 801518a:	4b35      	ldr	r3, [pc, #212]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 801518c:	4a38      	ldr	r2, [pc, #224]	; (8015270 <defaultStatusADCsAndGPIOs+0x9f0>)
 801518e:	f7ec fc31 	bl	80019f4 <LCD_PutStr>
 8015192:	4603      	mov	r3, r0
 8015194:	461a      	mov	r2, r3
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	4413      	add	r3, r2
 801519a:	60fb      	str	r3, [r7, #12]
	convertedFloat = 1000 * DEFAULT_AI8_VAL;
 801519c:	4b35      	ldr	r3, [pc, #212]	; (8015274 <defaultStatusADCsAndGPIOs+0x9f4>)
 801519e:	6a1b      	ldr	r3, [r3, #32]
 80151a0:	4a35      	ldr	r2, [pc, #212]	; (8015278 <defaultStatusADCsAndGPIOs+0x9f8>)
 80151a2:	009b      	lsls	r3, r3, #2
 80151a4:	4413      	add	r3, r2
 80151a6:	edd3 7a00 	vldr	s15, [r3]
 80151aa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801527c <defaultStatusADCsAndGPIOs+0x9fc>
 80151ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151b6:	ee17 3a90 	vmov	r3, s15
 80151ba:	607b      	str	r3, [r7, #4]
	i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	b298      	uxth	r0, r3
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	b299      	uxth	r1, r3
 80151c4:	4b26      	ldr	r3, [pc, #152]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 80151c6:	9300      	str	r3, [sp, #0]
 80151c8:	2303      	movs	r3, #3
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	f7ec fcb0 	bl	8001b30 <LCD_PutIntF>
 80151d0:	4603      	mov	r3, r0
 80151d2:	461a      	mov	r2, r3
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	4413      	add	r3, r2
 80151d8:	60fb      	str	r3, [r7, #12]
	i=inputGpioAlignment;
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	60fb      	str	r3, [r7, #12]
	i+= LCD_PutStr(i, j, DEFAULT_IN8, fnt7x10);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	b298      	uxth	r0, r3
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	b299      	uxth	r1, r3
 80151e6:	4b1e      	ldr	r3, [pc, #120]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 80151e8:	4a25      	ldr	r2, [pc, #148]	; (8015280 <defaultStatusADCsAndGPIOs+0xa00>)
 80151ea:	f7ec fc03 	bl	80019f4 <LCD_PutStr>
 80151ee:	4603      	mov	r3, r0
 80151f0:	461a      	mov	r2, r3
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	4413      	add	r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
	LCD_PutInt(i,j,DEFAULT_IN8_GPIO, fnt7x10);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	b298      	uxth	r0, r3
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	b299      	uxth	r1, r3
 8015200:	4b19      	ldr	r3, [pc, #100]	; (8015268 <defaultStatusADCsAndGPIOs+0x9e8>)
 8015202:	7a1b      	ldrb	r3, [r3, #8]
 8015204:	461a      	mov	r2, r3
 8015206:	4b19      	ldr	r3, [pc, #100]	; (801526c <defaultStatusADCsAndGPIOs+0x9ec>)
 8015208:	5c9b      	ldrb	r3, [r3, r2]
 801520a:	461a      	mov	r2, r3
 801520c:	4b14      	ldr	r3, [pc, #80]	; (8015260 <defaultStatusADCsAndGPIOs+0x9e0>)
 801520e:	f7ec fc29 	bl	8001a64 <LCD_PutInt>
	//horizontal divider
	j=65;
 8015212:	2341      	movs	r3, #65	; 0x41
 8015214:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	b29b      	uxth	r3, r3
 801521a:	3b01      	subs	r3, #1
 801521c:	b299      	uxth	r1, r3
 801521e:	4b19      	ldr	r3, [pc, #100]	; (8015284 <defaultStatusADCsAndGPIOs+0xa04>)
 8015220:	881b      	ldrh	r3, [r3, #0]
 8015222:	3b02      	subs	r3, #2
 8015224:	b29a      	uxth	r2, r3
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	b29b      	uxth	r3, r3
 801522a:	3301      	adds	r3, #1
 801522c:	b29b      	uxth	r3, r3
 801522e:	2002      	movs	r0, #2
 8015230:	f7ec f892 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 8015234:	23e6      	movs	r3, #230	; 0xe6
 8015236:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	b29b      	uxth	r3, r3
 801523c:	3b03      	subs	r3, #3
 801523e:	b298      	uxth	r0, r3
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	b299      	uxth	r1, r3
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	b29b      	uxth	r3, r3
 8015248:	3303      	adds	r3, #3
 801524a:	b29a      	uxth	r2, r3
 801524c:	4b0e      	ldr	r3, [pc, #56]	; (8015288 <defaultStatusADCsAndGPIOs+0xa08>)
 801524e:	881b      	ldrh	r3, [r3, #0]
 8015250:	3b02      	subs	r3, #2
 8015252:	b29b      	uxth	r3, r3
 8015254:	f7ec f880 	bl	8001358 <LCD_FillRect>
}
 8015258:	bf00      	nop
 801525a:	3718      	adds	r7, #24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	0801bfc8 	.word	0x0801bfc8
 8015264:	0801afc8 	.word	0x0801afc8
 8015268:	200001e8 	.word	0x200001e8
 801526c:	20028df0 	.word	0x20028df0
 8015270:	0801afd0 	.word	0x0801afd0
 8015274:	200001f4 	.word	0x200001f4
 8015278:	2003119c 	.word	0x2003119c
 801527c:	447a0000 	.word	0x447a0000
 8015280:	0801afd8 	.word	0x0801afd8
 8015284:	20028b62 	.word	0x20028b62
 8015288:	20028b64 	.word	0x20028b64

0801528c <defaultStatusFaults>:

void defaultStatusFaults(){
 801528c:	b580      	push	{r7, lr}
 801528e:	b086      	sub	sp, #24
 8015290:	af00      	add	r7, sp, #0
	int i=10;
 8015292:	230a      	movs	r3, #10
 8015294:	617b      	str	r3, [r7, #20]
	int j=95;
 8015296:	235f      	movs	r3, #95	; 0x5f
 8015298:	613b      	str	r3, [r7, #16]
	int daughterCardAlignment=240;
 801529a:	23f0      	movs	r3, #240	; 0xf0
 801529c:	60fb      	str	r3, [r7, #12]
	int faultVerticalSpacing = 15;
 801529e:	230f      	movs	r3, #15
 80152a0:	60bb      	str	r3, [r7, #8]
	int faultHorizontalSpacing=10;
 80152a2:	230a      	movs	r3, #10
 80152a4:	607b      	str	r3, [r7, #4]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT1_LBL, fnt7x10);
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	b298      	uxth	r0, r3
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	b299      	uxth	r1, r3
 80152ae:	4b91      	ldr	r3, [pc, #580]	; (80154f4 <defaultStatusFaults+0x268>)
 80152b0:	4a91      	ldr	r2, [pc, #580]	; (80154f8 <defaultStatusFaults+0x26c>)
 80152b2:	f7ec fb9f 	bl	80019f4 <LCD_PutStr>
 80152b6:	4603      	mov	r3, r0
 80152b8:	461a      	mov	r2, r3
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	4413      	add	r3, r2
 80152be:	617b      	str	r3, [r7, #20]
	if(errorLED.zionFault){
 80152c0:	4b8e      	ldr	r3, [pc, #568]	; (80154fc <defaultStatusFaults+0x270>)
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d008      	beq.n	80152da <defaultStatusFaults+0x4e>
		LCD_PutStr(i, j, DEFAULT_FAULT1_TRIGGER_MSG, fnt7x10);
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	b298      	uxth	r0, r3
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	b299      	uxth	r1, r3
 80152d0:	4b88      	ldr	r3, [pc, #544]	; (80154f4 <defaultStatusFaults+0x268>)
 80152d2:	4a8b      	ldr	r2, [pc, #556]	; (8015500 <defaultStatusFaults+0x274>)
 80152d4:	f7ec fb8e 	bl	80019f4 <LCD_PutStr>
 80152d8:	e007      	b.n	80152ea <defaultStatusFaults+0x5e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	b298      	uxth	r0, r3
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	b299      	uxth	r1, r3
 80152e2:	4b84      	ldr	r3, [pc, #528]	; (80154f4 <defaultStatusFaults+0x268>)
 80152e4:	4a87      	ldr	r2, [pc, #540]	; (8015504 <defaultStatusFaults+0x278>)
 80152e6:	f7ec fb85 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	b298      	uxth	r0, r3
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	b299      	uxth	r1, r3
 80152f6:	4b7f      	ldr	r3, [pc, #508]	; (80154f4 <defaultStatusFaults+0x268>)
 80152f8:	4a83      	ldr	r2, [pc, #524]	; (8015508 <defaultStatusFaults+0x27c>)
 80152fa:	f7ec fb7b 	bl	80019f4 <LCD_PutStr>
 80152fe:	4603      	mov	r3, r0
 8015300:	461a      	mov	r2, r3
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	4413      	add	r3, r2
 8015306:	617b      	str	r3, [r7, #20]
	if(ZION.SOC_EEPROM_Detected){
 8015308:	4b80      	ldr	r3, [pc, #512]	; (801550c <defaultStatusFaults+0x280>)
 801530a:	689b      	ldr	r3, [r3, #8]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d008      	beq.n	8015322 <defaultStatusFaults+0x96>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	b298      	uxth	r0, r3
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	b299      	uxth	r1, r3
 8015318:	4b76      	ldr	r3, [pc, #472]	; (80154f4 <defaultStatusFaults+0x268>)
 801531a:	4a7d      	ldr	r2, [pc, #500]	; (8015510 <defaultStatusFaults+0x284>)
 801531c:	f7ec fb6a 	bl	80019f4 <LCD_PutStr>
 8015320:	e007      	b.n	8015332 <defaultStatusFaults+0xa6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	b298      	uxth	r0, r3
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	b299      	uxth	r1, r3
 801532a:	4b72      	ldr	r3, [pc, #456]	; (80154f4 <defaultStatusFaults+0x268>)
 801532c:	4a79      	ldr	r2, [pc, #484]	; (8015514 <defaultStatusFaults+0x288>)
 801532e:	f7ec fb61 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8015336:	693a      	ldr	r2, [r7, #16]
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	4413      	add	r3, r2
 801533c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT2_LBL, fnt7x10);
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	b298      	uxth	r0, r3
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	b299      	uxth	r1, r3
 8015346:	4b6b      	ldr	r3, [pc, #428]	; (80154f4 <defaultStatusFaults+0x268>)
 8015348:	4a73      	ldr	r2, [pc, #460]	; (8015518 <defaultStatusFaults+0x28c>)
 801534a:	f7ec fb53 	bl	80019f4 <LCD_PutStr>
 801534e:	4603      	mov	r3, r0
 8015350:	461a      	mov	r2, r3
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	4413      	add	r3, r2
 8015356:	617b      	str	r3, [r7, #20]
	if(errorLED.vsysPMIFault){
 8015358:	4b68      	ldr	r3, [pc, #416]	; (80154fc <defaultStatusFaults+0x270>)
 801535a:	785b      	ldrb	r3, [r3, #1]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d008      	beq.n	8015372 <defaultStatusFaults+0xe6>
		LCD_PutStr(i, j, DEFAULT_FAULT2_TRIGGER_MSG, fnt7x10);
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	b298      	uxth	r0, r3
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	b299      	uxth	r1, r3
 8015368:	4b62      	ldr	r3, [pc, #392]	; (80154f4 <defaultStatusFaults+0x268>)
 801536a:	4a6c      	ldr	r2, [pc, #432]	; (801551c <defaultStatusFaults+0x290>)
 801536c:	f7ec fb42 	bl	80019f4 <LCD_PutStr>
 8015370:	e007      	b.n	8015382 <defaultStatusFaults+0xf6>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	b298      	uxth	r0, r3
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	b299      	uxth	r1, r3
 801537a:	4b5e      	ldr	r3, [pc, #376]	; (80154f4 <defaultStatusFaults+0x268>)
 801537c:	4a61      	ldr	r2, [pc, #388]	; (8015504 <defaultStatusFaults+0x278>)
 801537e:	f7ec fb39 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	b298      	uxth	r0, r3
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	b299      	uxth	r1, r3
 801538e:	4b59      	ldr	r3, [pc, #356]	; (80154f4 <defaultStatusFaults+0x268>)
 8015390:	4a63      	ldr	r2, [pc, #396]	; (8015520 <defaultStatusFaults+0x294>)
 8015392:	f7ec fb2f 	bl	80019f4 <LCD_PutStr>
 8015396:	4603      	mov	r3, r0
 8015398:	461a      	mov	r2, r3
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	4413      	add	r3, r2
 801539e:	617b      	str	r3, [r7, #20]
	if(ZION.ASIC_EEPROM_Detected){
 80153a0:	4b5a      	ldr	r3, [pc, #360]	; (801550c <defaultStatusFaults+0x280>)
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d008      	beq.n	80153ba <defaultStatusFaults+0x12e>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	b298      	uxth	r0, r3
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	b299      	uxth	r1, r3
 80153b0:	4b50      	ldr	r3, [pc, #320]	; (80154f4 <defaultStatusFaults+0x268>)
 80153b2:	4a57      	ldr	r2, [pc, #348]	; (8015510 <defaultStatusFaults+0x284>)
 80153b4:	f7ec fb1e 	bl	80019f4 <LCD_PutStr>
 80153b8:	e007      	b.n	80153ca <defaultStatusFaults+0x13e>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	b298      	uxth	r0, r3
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	b299      	uxth	r1, r3
 80153c2:	4b4c      	ldr	r3, [pc, #304]	; (80154f4 <defaultStatusFaults+0x268>)
 80153c4:	4a53      	ldr	r2, [pc, #332]	; (8015514 <defaultStatusFaults+0x288>)
 80153c6:	f7ec fb15 	bl	80019f4 <LCD_PutStr>
	}
	i=faultHorizontalSpacing;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80153ce:	693a      	ldr	r2, [r7, #16]
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	4413      	add	r3, r2
 80153d4:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT3_LBL, fnt7x10);
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	b298      	uxth	r0, r3
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	b299      	uxth	r1, r3
 80153de:	4b45      	ldr	r3, [pc, #276]	; (80154f4 <defaultStatusFaults+0x268>)
 80153e0:	4a50      	ldr	r2, [pc, #320]	; (8015524 <defaultStatusFaults+0x298>)
 80153e2:	f7ec fb07 	bl	80019f4 <LCD_PutStr>
 80153e6:	4603      	mov	r3, r0
 80153e8:	461a      	mov	r2, r3
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	4413      	add	r3, r2
 80153ee:	617b      	str	r3, [r7, #20]
	if(errorLED.fault3){
 80153f0:	4b42      	ldr	r3, [pc, #264]	; (80154fc <defaultStatusFaults+0x270>)
 80153f2:	789b      	ldrb	r3, [r3, #2]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d008      	beq.n	801540a <defaultStatusFaults+0x17e>
		LCD_PutStr(i, j, DEFAULT_FAULT3_TRIGGER_MSG, fnt7x10);
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	b298      	uxth	r0, r3
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	b299      	uxth	r1, r3
 8015400:	4b3c      	ldr	r3, [pc, #240]	; (80154f4 <defaultStatusFaults+0x268>)
 8015402:	4a49      	ldr	r2, [pc, #292]	; (8015528 <defaultStatusFaults+0x29c>)
 8015404:	f7ec faf6 	bl	80019f4 <LCD_PutStr>
 8015408:	e007      	b.n	801541a <defaultStatusFaults+0x18e>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	b298      	uxth	r0, r3
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	b299      	uxth	r1, r3
 8015412:	4b38      	ldr	r3, [pc, #224]	; (80154f4 <defaultStatusFaults+0x268>)
 8015414:	4a3b      	ldr	r2, [pc, #236]	; (8015504 <defaultStatusFaults+0x278>)
 8015416:	f7ec faed 	bl	80019f4 <LCD_PutStr>
	}
	i=daughterCardAlignment;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	617b      	str	r3, [r7, #20]
	i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	b298      	uxth	r0, r3
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	b299      	uxth	r1, r3
 8015426:	4b33      	ldr	r3, [pc, #204]	; (80154f4 <defaultStatusFaults+0x268>)
 8015428:	4a40      	ldr	r2, [pc, #256]	; (801552c <defaultStatusFaults+0x2a0>)
 801542a:	f7ec fae3 	bl	80019f4 <LCD_PutStr>
 801542e:	4603      	mov	r3, r0
 8015430:	461a      	mov	r2, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	4413      	add	r3, r2
 8015436:	617b      	str	r3, [r7, #20]
	if(ZION.DISPLAY_EEPROM_Detected){
 8015438:	4b34      	ldr	r3, [pc, #208]	; (801550c <defaultStatusFaults+0x280>)
 801543a:	691b      	ldr	r3, [r3, #16]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d008      	beq.n	8015452 <defaultStatusFaults+0x1c6>
		LCD_PutStr(i,j,"Detected", fnt7x10);
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	b298      	uxth	r0, r3
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	b299      	uxth	r1, r3
 8015448:	4b2a      	ldr	r3, [pc, #168]	; (80154f4 <defaultStatusFaults+0x268>)
 801544a:	4a31      	ldr	r2, [pc, #196]	; (8015510 <defaultStatusFaults+0x284>)
 801544c:	f7ec fad2 	bl	80019f4 <LCD_PutStr>
 8015450:	e007      	b.n	8015462 <defaultStatusFaults+0x1d6>
	}
	else{
		LCD_PutStr(i,j,"Undetected", fnt7x10);
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	b298      	uxth	r0, r3
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	b299      	uxth	r1, r3
 801545a:	4b26      	ldr	r3, [pc, #152]	; (80154f4 <defaultStatusFaults+0x268>)
 801545c:	4a2d      	ldr	r2, [pc, #180]	; (8015514 <defaultStatusFaults+0x288>)
 801545e:	f7ec fac9 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8015466:	693a      	ldr	r2, [r7, #16]
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	4413      	add	r3, r2
 801546c:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT4_LBL, fnt7x10);
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	b298      	uxth	r0, r3
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	b299      	uxth	r1, r3
 8015476:	4b1f      	ldr	r3, [pc, #124]	; (80154f4 <defaultStatusFaults+0x268>)
 8015478:	4a2d      	ldr	r2, [pc, #180]	; (8015530 <defaultStatusFaults+0x2a4>)
 801547a:	f7ec fabb 	bl	80019f4 <LCD_PutStr>
 801547e:	4603      	mov	r3, r0
 8015480:	461a      	mov	r2, r3
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	4413      	add	r3, r2
 8015486:	617b      	str	r3, [r7, #20]
	if(errorLED.fault4){
 8015488:	4b1c      	ldr	r3, [pc, #112]	; (80154fc <defaultStatusFaults+0x270>)
 801548a:	78db      	ldrb	r3, [r3, #3]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d008      	beq.n	80154a2 <defaultStatusFaults+0x216>
		LCD_PutStr(i, j, DEFAULT_FAULT4_TRIGGER_MSG, fnt7x10);
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	b298      	uxth	r0, r3
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	b299      	uxth	r1, r3
 8015498:	4b16      	ldr	r3, [pc, #88]	; (80154f4 <defaultStatusFaults+0x268>)
 801549a:	4a26      	ldr	r2, [pc, #152]	; (8015534 <defaultStatusFaults+0x2a8>)
 801549c:	f7ec faaa 	bl	80019f4 <LCD_PutStr>
 80154a0:	e007      	b.n	80154b2 <defaultStatusFaults+0x226>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	b298      	uxth	r0, r3
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	b299      	uxth	r1, r3
 80154aa:	4b12      	ldr	r3, [pc, #72]	; (80154f4 <defaultStatusFaults+0x268>)
 80154ac:	4a15      	ldr	r2, [pc, #84]	; (8015504 <defaultStatusFaults+0x278>)
 80154ae:	f7ec faa1 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80154b6:	693a      	ldr	r2, [r7, #16]
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	4413      	add	r3, r2
 80154bc:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT5_LBL, fnt7x10);
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	b298      	uxth	r0, r3
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	b299      	uxth	r1, r3
 80154c6:	4b0b      	ldr	r3, [pc, #44]	; (80154f4 <defaultStatusFaults+0x268>)
 80154c8:	4a1b      	ldr	r2, [pc, #108]	; (8015538 <defaultStatusFaults+0x2ac>)
 80154ca:	f7ec fa93 	bl	80019f4 <LCD_PutStr>
 80154ce:	4603      	mov	r3, r0
 80154d0:	461a      	mov	r2, r3
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	4413      	add	r3, r2
 80154d6:	617b      	str	r3, [r7, #20]
	if(errorLED.fault5){
 80154d8:	4b08      	ldr	r3, [pc, #32]	; (80154fc <defaultStatusFaults+0x270>)
 80154da:	791b      	ldrb	r3, [r3, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d02f      	beq.n	8015540 <defaultStatusFaults+0x2b4>
		LCD_PutStr(i, j, DEFAULT_FAULT5_TRIGGER_MSG, fnt7x10);
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	b298      	uxth	r0, r3
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	b299      	uxth	r1, r3
 80154e8:	4b02      	ldr	r3, [pc, #8]	; (80154f4 <defaultStatusFaults+0x268>)
 80154ea:	4a14      	ldr	r2, [pc, #80]	; (801553c <defaultStatusFaults+0x2b0>)
 80154ec:	f7ec fa82 	bl	80019f4 <LCD_PutStr>
 80154f0:	e02e      	b.n	8015550 <defaultStatusFaults+0x2c4>
 80154f2:	bf00      	nop
 80154f4:	0801bfc8 	.word	0x0801bfc8
 80154f8:	0801afe0 	.word	0x0801afe0
 80154fc:	2000338c 	.word	0x2000338c
 8015500:	0801afec 	.word	0x0801afec
 8015504:	0801affc 	.word	0x0801affc
 8015508:	0801b004 	.word	0x0801b004
 801550c:	20003328 	.word	0x20003328
 8015510:	0801b00c 	.word	0x0801b00c
 8015514:	0801b018 	.word	0x0801b018
 8015518:	0801b024 	.word	0x0801b024
 801551c:	0801b030 	.word	0x0801b030
 8015520:	0801b040 	.word	0x0801b040
 8015524:	0801b048 	.word	0x0801b048
 8015528:	0801b050 	.word	0x0801b050
 801552c:	0801b064 	.word	0x0801b064
 8015530:	0801b070 	.word	0x0801b070
 8015534:	0801b078 	.word	0x0801b078
 8015538:	0801b08c 	.word	0x0801b08c
 801553c:	0801b094 	.word	0x0801b094
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	b298      	uxth	r0, r3
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	b299      	uxth	r1, r3
 8015548:	4b65      	ldr	r3, [pc, #404]	; (80156e0 <defaultStatusFaults+0x454>)
 801554a:	4a66      	ldr	r2, [pc, #408]	; (80156e4 <defaultStatusFaults+0x458>)
 801554c:	f7ec fa52 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8015554:	693a      	ldr	r2, [r7, #16]
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	4413      	add	r3, r2
 801555a:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT6_LBL, fnt7x10);
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	b298      	uxth	r0, r3
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	b299      	uxth	r1, r3
 8015564:	4b5e      	ldr	r3, [pc, #376]	; (80156e0 <defaultStatusFaults+0x454>)
 8015566:	4a60      	ldr	r2, [pc, #384]	; (80156e8 <defaultStatusFaults+0x45c>)
 8015568:	f7ec fa44 	bl	80019f4 <LCD_PutStr>
 801556c:	4603      	mov	r3, r0
 801556e:	461a      	mov	r2, r3
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	4413      	add	r3, r2
 8015574:	617b      	str	r3, [r7, #20]
	if(errorLED.fault6){
 8015576:	4b5d      	ldr	r3, [pc, #372]	; (80156ec <defaultStatusFaults+0x460>)
 8015578:	795b      	ldrb	r3, [r3, #5]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d008      	beq.n	8015590 <defaultStatusFaults+0x304>
		LCD_PutStr(i, j, DEFAULT_FAULT6_TRIGGER_MSG, fnt7x10);
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	b298      	uxth	r0, r3
 8015582:	693b      	ldr	r3, [r7, #16]
 8015584:	b299      	uxth	r1, r3
 8015586:	4b56      	ldr	r3, [pc, #344]	; (80156e0 <defaultStatusFaults+0x454>)
 8015588:	4a59      	ldr	r2, [pc, #356]	; (80156f0 <defaultStatusFaults+0x464>)
 801558a:	f7ec fa33 	bl	80019f4 <LCD_PutStr>
 801558e:	e007      	b.n	80155a0 <defaultStatusFaults+0x314>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	b298      	uxth	r0, r3
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	b299      	uxth	r1, r3
 8015598:	4b51      	ldr	r3, [pc, #324]	; (80156e0 <defaultStatusFaults+0x454>)
 801559a:	4a52      	ldr	r2, [pc, #328]	; (80156e4 <defaultStatusFaults+0x458>)
 801559c:	f7ec fa2a 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80155a4:	693a      	ldr	r2, [r7, #16]
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	4413      	add	r3, r2
 80155aa:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT7_LBL, fnt7x10);
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	b298      	uxth	r0, r3
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	b299      	uxth	r1, r3
 80155b4:	4b4a      	ldr	r3, [pc, #296]	; (80156e0 <defaultStatusFaults+0x454>)
 80155b6:	4a4f      	ldr	r2, [pc, #316]	; (80156f4 <defaultStatusFaults+0x468>)
 80155b8:	f7ec fa1c 	bl	80019f4 <LCD_PutStr>
 80155bc:	4603      	mov	r3, r0
 80155be:	461a      	mov	r2, r3
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	4413      	add	r3, r2
 80155c4:	617b      	str	r3, [r7, #20]
	if(errorLED.fault7){
 80155c6:	4b49      	ldr	r3, [pc, #292]	; (80156ec <defaultStatusFaults+0x460>)
 80155c8:	799b      	ldrb	r3, [r3, #6]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d008      	beq.n	80155e0 <defaultStatusFaults+0x354>
		LCD_PutStr(i, j, DEFAULT_FAULT7_TRIGGER_MSG, fnt7x10);
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	b298      	uxth	r0, r3
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	b299      	uxth	r1, r3
 80155d6:	4b42      	ldr	r3, [pc, #264]	; (80156e0 <defaultStatusFaults+0x454>)
 80155d8:	4a47      	ldr	r2, [pc, #284]	; (80156f8 <defaultStatusFaults+0x46c>)
 80155da:	f7ec fa0b 	bl	80019f4 <LCD_PutStr>
 80155de:	e007      	b.n	80155f0 <defaultStatusFaults+0x364>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	b298      	uxth	r0, r3
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	b299      	uxth	r1, r3
 80155e8:	4b3d      	ldr	r3, [pc, #244]	; (80156e0 <defaultStatusFaults+0x454>)
 80155ea:	4a3e      	ldr	r2, [pc, #248]	; (80156e4 <defaultStatusFaults+0x458>)
 80155ec:	f7ec fa02 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 80155f4:	693a      	ldr	r2, [r7, #16]
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	4413      	add	r3, r2
 80155fa:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT8_LBL, fnt7x10);
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	b298      	uxth	r0, r3
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	b299      	uxth	r1, r3
 8015604:	4b36      	ldr	r3, [pc, #216]	; (80156e0 <defaultStatusFaults+0x454>)
 8015606:	4a3d      	ldr	r2, [pc, #244]	; (80156fc <defaultStatusFaults+0x470>)
 8015608:	f7ec f9f4 	bl	80019f4 <LCD_PutStr>
 801560c:	4603      	mov	r3, r0
 801560e:	461a      	mov	r2, r3
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	4413      	add	r3, r2
 8015614:	617b      	str	r3, [r7, #20]
	if(errorLED.fault8){
 8015616:	4b35      	ldr	r3, [pc, #212]	; (80156ec <defaultStatusFaults+0x460>)
 8015618:	7adb      	ldrb	r3, [r3, #11]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d008      	beq.n	8015630 <defaultStatusFaults+0x3a4>
		LCD_PutStr(i, j, DEFAULT_FAULT8_TRIGGER_MSG, fnt7x10);
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	b298      	uxth	r0, r3
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	b299      	uxth	r1, r3
 8015626:	4b2e      	ldr	r3, [pc, #184]	; (80156e0 <defaultStatusFaults+0x454>)
 8015628:	4a35      	ldr	r2, [pc, #212]	; (8015700 <defaultStatusFaults+0x474>)
 801562a:	f7ec f9e3 	bl	80019f4 <LCD_PutStr>
 801562e:	e007      	b.n	8015640 <defaultStatusFaults+0x3b4>
	}
	else{
		LCD_PutStr(i, j, "Clear", fnt7x10);
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	b298      	uxth	r0, r3
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	b299      	uxth	r1, r3
 8015638:	4b29      	ldr	r3, [pc, #164]	; (80156e0 <defaultStatusFaults+0x454>)
 801563a:	4a32      	ldr	r2, [pc, #200]	; (8015704 <defaultStatusFaults+0x478>)
 801563c:	f7ec f9da 	bl	80019f4 <LCD_PutStr>
	}

	i=faultHorizontalSpacing;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	617b      	str	r3, [r7, #20]
	j+=faultVerticalSpacing;
 8015644:	693a      	ldr	r2, [r7, #16]
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	4413      	add	r3, r2
 801564a:	613b      	str	r3, [r7, #16]
	i+= LCD_PutStr(i, j, DEFAULT_FAULT9_LBL, fnt7x10);
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	b298      	uxth	r0, r3
 8015650:	693b      	ldr	r3, [r7, #16]
 8015652:	b299      	uxth	r1, r3
 8015654:	4b22      	ldr	r3, [pc, #136]	; (80156e0 <defaultStatusFaults+0x454>)
 8015656:	4a2c      	ldr	r2, [pc, #176]	; (8015708 <defaultStatusFaults+0x47c>)
 8015658:	f7ec f9cc 	bl	80019f4 <LCD_PutStr>
 801565c:	4603      	mov	r3, r0
 801565e:	461a      	mov	r2, r3
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	4413      	add	r3, r2
 8015664:	617b      	str	r3, [r7, #20]
	if(errorLED.fault9){
 8015666:	4b21      	ldr	r3, [pc, #132]	; (80156ec <defaultStatusFaults+0x460>)
 8015668:	7b1b      	ldrb	r3, [r3, #12]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d008      	beq.n	8015680 <defaultStatusFaults+0x3f4>
		LCD_PutStr(i, j, DEFAULT_FAULT9_TRIGGER_MSG, fnt7x10);
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	b298      	uxth	r0, r3
 8015672:	693b      	ldr	r3, [r7, #16]
 8015674:	b299      	uxth	r1, r3
 8015676:	4b1a      	ldr	r3, [pc, #104]	; (80156e0 <defaultStatusFaults+0x454>)
 8015678:	4a24      	ldr	r2, [pc, #144]	; (801570c <defaultStatusFaults+0x480>)
 801567a:	f7ec f9bb 	bl	80019f4 <LCD_PutStr>
 801567e:	e007      	b.n	8015690 <defaultStatusFaults+0x404>
	}
	else{
		LCD_PutStr(i, j, " Clear", fnt7x10);
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	b298      	uxth	r0, r3
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	b299      	uxth	r1, r3
 8015688:	4b15      	ldr	r3, [pc, #84]	; (80156e0 <defaultStatusFaults+0x454>)
 801568a:	4a16      	ldr	r2, [pc, #88]	; (80156e4 <defaultStatusFaults+0x458>)
 801568c:	f7ec f9b2 	bl	80019f4 <LCD_PutStr>
	}


	//horizontal divider
	j=65;
 8015690:	2341      	movs	r3, #65	; 0x41
 8015692:	613b      	str	r3, [r7, #16]
	LCD_FillRect(2, j-1, scr_width-2, j+1);
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	b29b      	uxth	r3, r3
 8015698:	3b01      	subs	r3, #1
 801569a:	b299      	uxth	r1, r3
 801569c:	4b1c      	ldr	r3, [pc, #112]	; (8015710 <defaultStatusFaults+0x484>)
 801569e:	881b      	ldrh	r3, [r3, #0]
 80156a0:	3b02      	subs	r3, #2
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	3301      	adds	r3, #1
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	2002      	movs	r0, #2
 80156ae:	f7eb fe53 	bl	8001358 <LCD_FillRect>
	//vertical divider
	i=230;
 80156b2:	23e6      	movs	r3, #230	; 0xe6
 80156b4:	617b      	str	r3, [r7, #20]
	LCD_FillRect(i-3, j, i+3, scr_height-2);
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	3b03      	subs	r3, #3
 80156bc:	b298      	uxth	r0, r3
 80156be:	693b      	ldr	r3, [r7, #16]
 80156c0:	b299      	uxth	r1, r3
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	3303      	adds	r3, #3
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	4b12      	ldr	r3, [pc, #72]	; (8015714 <defaultStatusFaults+0x488>)
 80156cc:	881b      	ldrh	r3, [r3, #0]
 80156ce:	3b02      	subs	r3, #2
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	f7eb fe41 	bl	8001358 <LCD_FillRect>

}
 80156d6:	bf00      	nop
 80156d8:	3718      	adds	r7, #24
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	0801bfc8 	.word	0x0801bfc8
 80156e4:	0801affc 	.word	0x0801affc
 80156e8:	0801b0a8 	.word	0x0801b0a8
 80156ec:	2000338c 	.word	0x2000338c
 80156f0:	0801b0b0 	.word	0x0801b0b0
 80156f4:	0801b0c4 	.word	0x0801b0c4
 80156f8:	0801b0cc 	.word	0x0801b0cc
 80156fc:	0801b0e0 	.word	0x0801b0e0
 8015700:	0801b0e8 	.word	0x0801b0e8
 8015704:	0801b0fc 	.word	0x0801b0fc
 8015708:	0801b104 	.word	0x0801b104
 801570c:	0801b10c 	.word	0x0801b10c
 8015710:	20028b62 	.word	0x20028b62
 8015714:	20028b64 	.word	0x20028b64

08015718 <defaultBootButtons>:

int defaultBootButtons(int pwrBtnReady){
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
	while((DEFAULT_VSYS > VSYS_FLT)){
 8015720:	bf00      	nop
 8015722:	4b84      	ldr	r3, [pc, #528]	; (8015934 <defaultBootButtons+0x21c>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4a84      	ldr	r2, [pc, #528]	; (8015938 <defaultBootButtons+0x220>)
 8015728:	009b      	lsls	r3, r3, #2
 801572a:	4413      	add	r3, r2
 801572c:	edd3 7a00 	vldr	s15, [r3]
 8015730:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8015734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801573c:	f340 80f5 	ble.w	801592a <defaultBootButtons+0x212>
	  if(bootButtons.bootMode !=0){
 8015740:	4b7e      	ldr	r3, [pc, #504]	; (801593c <defaultBootButtons+0x224>)
 8015742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015744:	2b00      	cmp	r3, #0
 8015746:	d073      	beq.n	8015830 <defaultBootButtons+0x118>
		  bootButtons.modeClear=0;
 8015748:	4b7c      	ldr	r3, [pc, #496]	; (801593c <defaultBootButtons+0x224>)
 801574a:	2200      	movs	r2, #0
 801574c:	625a      	str	r2, [r3, #36]	; 0x24
		  DEFAULT_PWR_ON;
 801574e:	2201      	movs	r2, #1
 8015750:	2104      	movs	r1, #4
 8015752:	487b      	ldr	r0, [pc, #492]	; (8015940 <defaultBootButtons+0x228>)
 8015754:	f7f3 ff2e 	bl	80095b4 <HAL_GPIO_WritePin>
		  //using OS delay in a method leads to getting lost in the ether. Swapping to hal_delay but also breaking down the delays
		  //so that the while loop can end somewhat succiently
		  for(int x = 0; x<130;x++){
 8015758:	2300      	movs	r3, #0
 801575a:	60fb      	str	r3, [r7, #12]
 801575c:	e005      	b.n	801576a <defaultBootButtons+0x52>
			  HAL_Delay(100);
 801575e:	2064      	movs	r0, #100	; 0x64
 8015760:	f7f2 faa8 	bl	8007cb4 <HAL_Delay>
		  for(int x = 0; x<130;x++){
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	3301      	adds	r3, #1
 8015768:	60fb      	str	r3, [r7, #12]
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2b81      	cmp	r3, #129	; 0x81
 801576e:	ddf6      	ble.n	801575e <defaultBootButtons+0x46>
		  }
		  DEFAULT_PWR_OFF;
 8015770:	2200      	movs	r2, #0
 8015772:	2104      	movs	r1, #4
 8015774:	4872      	ldr	r0, [pc, #456]	; (8015940 <defaultBootButtons+0x228>)
 8015776:	f7f3 ff1d 	bl	80095b4 <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 801577a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801577e:	f7f2 fa99 	bl	8007cb4 <HAL_Delay>
		  DEFAULT_PWR_ON;
 8015782:	2201      	movs	r2, #1
 8015784:	2104      	movs	r1, #4
 8015786:	486e      	ldr	r0, [pc, #440]	; (8015940 <defaultBootButtons+0x228>)
 8015788:	f7f3 ff14 	bl	80095b4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 801578c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015790:	f7f2 fa90 	bl	8007cb4 <HAL_Delay>
		  DEFAULT_PWR_OFF;
 8015794:	2200      	movs	r2, #0
 8015796:	2104      	movs	r1, #4
 8015798:	4869      	ldr	r0, [pc, #420]	; (8015940 <defaultBootButtons+0x228>)
 801579a:	f7f3 ff0b 	bl	80095b4 <HAL_GPIO_WritePin>

		  BTN1_OFF;
 801579e:	2200      	movs	r2, #0
 80157a0:	2108      	movs	r1, #8
 80157a2:	4867      	ldr	r0, [pc, #412]	; (8015940 <defaultBootButtons+0x228>)
 80157a4:	f7f3 ff06 	bl	80095b4 <HAL_GPIO_WritePin>
		  BTN2_OFF;
 80157a8:	2200      	movs	r2, #0
 80157aa:	2110      	movs	r1, #16
 80157ac:	4864      	ldr	r0, [pc, #400]	; (8015940 <defaultBootButtons+0x228>)
 80157ae:	f7f3 ff01 	bl	80095b4 <HAL_GPIO_WritePin>
		  BTN3_OFF;
 80157b2:	2200      	movs	r2, #0
 80157b4:	2120      	movs	r1, #32
 80157b6:	4862      	ldr	r0, [pc, #392]	; (8015940 <defaultBootButtons+0x228>)
 80157b8:	f7f3 fefc 	bl	80095b4 <HAL_GPIO_WritePin>
		  BTN4_OFF;
 80157bc:	2200      	movs	r2, #0
 80157be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80157c2:	485f      	ldr	r0, [pc, #380]	; (8015940 <defaultBootButtons+0x228>)
 80157c4:	f7f3 fef6 	bl	80095b4 <HAL_GPIO_WritePin>
		  BTN5_OFF;
 80157c8:	2200      	movs	r2, #0
 80157ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80157ce:	485c      	ldr	r0, [pc, #368]	; (8015940 <defaultBootButtons+0x228>)
 80157d0:	f7f3 fef0 	bl	80095b4 <HAL_GPIO_WritePin>
		  EDL_SW_OFF;
 80157d4:	2200      	movs	r2, #0
 80157d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80157da:	485a      	ldr	r0, [pc, #360]	; (8015944 <defaultBootButtons+0x22c>)
 80157dc:	f7f3 feea 	bl	80095b4 <HAL_GPIO_WritePin>
		  EX_SW_OFF;
 80157e0:	2200      	movs	r2, #0
 80157e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80157e6:	4857      	ldr	r0, [pc, #348]	; (8015944 <defaultBootButtons+0x22c>)
 80157e8:	f7f3 fee4 	bl	80095b4 <HAL_GPIO_WritePin>

		  bootButtons.bootMode=STANDARD;
 80157ec:	4b53      	ldr	r3, [pc, #332]	; (801593c <defaultBootButtons+0x224>)
 80157ee:	2201      	movs	r2, #1
 80157f0:	629a      	str	r2, [r3, #40]	; 0x28
		  bootButtons.btn0=0;
 80157f2:	4b52      	ldr	r3, [pc, #328]	; (801593c <defaultBootButtons+0x224>)
 80157f4:	2200      	movs	r2, #0
 80157f6:	605a      	str	r2, [r3, #4]
		  bootButtons.btn1=0;
 80157f8:	4b50      	ldr	r3, [pc, #320]	; (801593c <defaultBootButtons+0x224>)
 80157fa:	2200      	movs	r2, #0
 80157fc:	609a      	str	r2, [r3, #8]
		  bootButtons.btn2=0;
 80157fe:	4b4f      	ldr	r3, [pc, #316]	; (801593c <defaultBootButtons+0x224>)
 8015800:	2200      	movs	r2, #0
 8015802:	60da      	str	r2, [r3, #12]
		  bootButtons.btn3=0;
 8015804:	4b4d      	ldr	r3, [pc, #308]	; (801593c <defaultBootButtons+0x224>)
 8015806:	2200      	movs	r2, #0
 8015808:	611a      	str	r2, [r3, #16]
		  bootButtons.btn4=0;
 801580a:	4b4c      	ldr	r3, [pc, #304]	; (801593c <defaultBootButtons+0x224>)
 801580c:	2200      	movs	r2, #0
 801580e:	615a      	str	r2, [r3, #20]
		  bootButtons.btn5=0;
 8015810:	4b4a      	ldr	r3, [pc, #296]	; (801593c <defaultBootButtons+0x224>)
 8015812:	2200      	movs	r2, #0
 8015814:	619a      	str	r2, [r3, #24]
		  bootButtons.edl_sw=0;
 8015816:	4b49      	ldr	r3, [pc, #292]	; (801593c <defaultBootButtons+0x224>)
 8015818:	2200      	movs	r2, #0
 801581a:	61da      	str	r2, [r3, #28]
		  bootButtons.ex_sw=0;
 801581c:	4b47      	ldr	r3, [pc, #284]	; (801593c <defaultBootButtons+0x224>)
 801581e:	2200      	movs	r2, #0
 8015820:	621a      	str	r2, [r3, #32]
		  bootButtons.modeClear=1;
 8015822:	4b46      	ldr	r3, [pc, #280]	; (801593c <defaultBootButtons+0x224>)
 8015824:	2201      	movs	r2, #1
 8015826:	625a      	str	r2, [r3, #36]	; 0x24
		  bootButtons.bootModeSet=0;
 8015828:	4b44      	ldr	r3, [pc, #272]	; (801593c <defaultBootButtons+0x224>)
 801582a:	2200      	movs	r2, #0
 801582c:	601a      	str	r2, [r3, #0]
		  if(!(bootButtons.ex_sw)){
			  EX_SW_OFF;
			  //osDelay(300);
		  }
	  }
	  break;
 801582e:	e07b      	b.n	8015928 <defaultBootButtons+0x210>
		  bootButtons.modeClear=0;
 8015830:	4b42      	ldr	r3, [pc, #264]	; (801593c <defaultBootButtons+0x224>)
 8015832:	2200      	movs	r2, #0
 8015834:	625a      	str	r2, [r3, #36]	; 0x24
		  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8015836:	4b41      	ldr	r3, [pc, #260]	; (801593c <defaultBootButtons+0x224>)
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d102      	bne.n	8015844 <defaultBootButtons+0x12c>
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d02e      	beq.n	80158a2 <defaultBootButtons+0x18a>
			  DEFAULT_PWR_ON;
 8015844:	2201      	movs	r2, #1
 8015846:	2104      	movs	r1, #4
 8015848:	483d      	ldr	r0, [pc, #244]	; (8015940 <defaultBootButtons+0x228>)
 801584a:	f7f3 feb3 	bl	80095b4 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 801584e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015852:	f7f2 fa2f 	bl	8007cb4 <HAL_Delay>
			  DEFAULT_PWR_OFF;
 8015856:	2200      	movs	r2, #0
 8015858:	2104      	movs	r1, #4
 801585a:	4839      	ldr	r0, [pc, #228]	; (8015940 <defaultBootButtons+0x228>)
 801585c:	f7f3 feaa 	bl	80095b4 <HAL_GPIO_WritePin>
			  bootButtons.bootMode= STANDARD;
 8015860:	4b36      	ldr	r3, [pc, #216]	; (801593c <defaultBootButtons+0x224>)
 8015862:	2201      	movs	r2, #1
 8015864:	629a      	str	r2, [r3, #40]	; 0x28
			  bootButtons.btn0=0;
 8015866:	4b35      	ldr	r3, [pc, #212]	; (801593c <defaultBootButtons+0x224>)
 8015868:	2200      	movs	r2, #0
 801586a:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 801586c:	4b33      	ldr	r3, [pc, #204]	; (801593c <defaultBootButtons+0x224>)
 801586e:	2200      	movs	r2, #0
 8015870:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8015872:	4b32      	ldr	r3, [pc, #200]	; (801593c <defaultBootButtons+0x224>)
 8015874:	2200      	movs	r2, #0
 8015876:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8015878:	4b30      	ldr	r3, [pc, #192]	; (801593c <defaultBootButtons+0x224>)
 801587a:	2200      	movs	r2, #0
 801587c:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 801587e:	4b2f      	ldr	r3, [pc, #188]	; (801593c <defaultBootButtons+0x224>)
 8015880:	2200      	movs	r2, #0
 8015882:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8015884:	4b2d      	ldr	r3, [pc, #180]	; (801593c <defaultBootButtons+0x224>)
 8015886:	2200      	movs	r2, #0
 8015888:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 801588a:	4b2c      	ldr	r3, [pc, #176]	; (801593c <defaultBootButtons+0x224>)
 801588c:	2200      	movs	r2, #0
 801588e:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8015890:	4b2a      	ldr	r3, [pc, #168]	; (801593c <defaultBootButtons+0x224>)
 8015892:	2200      	movs	r2, #0
 8015894:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8015896:	4b29      	ldr	r3, [pc, #164]	; (801593c <defaultBootButtons+0x224>)
 8015898:	2201      	movs	r2, #1
 801589a:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 801589c:	4b27      	ldr	r3, [pc, #156]	; (801593c <defaultBootButtons+0x224>)
 801589e:	2200      	movs	r2, #0
 80158a0:	601a      	str	r2, [r3, #0]
		  if(!(bootButtons.btn1)){
 80158a2:	4b26      	ldr	r3, [pc, #152]	; (801593c <defaultBootButtons+0x224>)
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d104      	bne.n	80158b4 <defaultBootButtons+0x19c>
			  BTN1_OFF;
 80158aa:	2200      	movs	r2, #0
 80158ac:	2108      	movs	r1, #8
 80158ae:	4824      	ldr	r0, [pc, #144]	; (8015940 <defaultBootButtons+0x228>)
 80158b0:	f7f3 fe80 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn2)){
 80158b4:	4b21      	ldr	r3, [pc, #132]	; (801593c <defaultBootButtons+0x224>)
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d104      	bne.n	80158c6 <defaultBootButtons+0x1ae>
			  BTN2_OFF;
 80158bc:	2200      	movs	r2, #0
 80158be:	2110      	movs	r1, #16
 80158c0:	481f      	ldr	r0, [pc, #124]	; (8015940 <defaultBootButtons+0x228>)
 80158c2:	f7f3 fe77 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn3)){
 80158c6:	4b1d      	ldr	r3, [pc, #116]	; (801593c <defaultBootButtons+0x224>)
 80158c8:	691b      	ldr	r3, [r3, #16]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d104      	bne.n	80158d8 <defaultBootButtons+0x1c0>
			  BTN3_OFF;
 80158ce:	2200      	movs	r2, #0
 80158d0:	2120      	movs	r1, #32
 80158d2:	481b      	ldr	r0, [pc, #108]	; (8015940 <defaultBootButtons+0x228>)
 80158d4:	f7f3 fe6e 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn4)){
 80158d8:	4b18      	ldr	r3, [pc, #96]	; (801593c <defaultBootButtons+0x224>)
 80158da:	695b      	ldr	r3, [r3, #20]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d105      	bne.n	80158ec <defaultBootButtons+0x1d4>
			  BTN4_OFF;
 80158e0:	2200      	movs	r2, #0
 80158e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80158e6:	4816      	ldr	r0, [pc, #88]	; (8015940 <defaultBootButtons+0x228>)
 80158e8:	f7f3 fe64 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(!(bootButtons.btn5)){
 80158ec:	4b13      	ldr	r3, [pc, #76]	; (801593c <defaultBootButtons+0x224>)
 80158ee:	699b      	ldr	r3, [r3, #24]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d105      	bne.n	8015900 <defaultBootButtons+0x1e8>
			  BTN5_OFF;
 80158f4:	2200      	movs	r2, #0
 80158f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80158fa:	4811      	ldr	r0, [pc, #68]	; (8015940 <defaultBootButtons+0x228>)
 80158fc:	f7f3 fe5a 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(!(bootButtons.edl_sw)){
 8015900:	4b0e      	ldr	r3, [pc, #56]	; (801593c <defaultBootButtons+0x224>)
 8015902:	69db      	ldr	r3, [r3, #28]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d105      	bne.n	8015914 <defaultBootButtons+0x1fc>
			  EDL_SW_OFF;
 8015908:	2200      	movs	r2, #0
 801590a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801590e:	480d      	ldr	r0, [pc, #52]	; (8015944 <defaultBootButtons+0x22c>)
 8015910:	f7f3 fe50 	bl	80095b4 <HAL_GPIO_WritePin>
		  if(!(bootButtons.ex_sw)){
 8015914:	4b09      	ldr	r3, [pc, #36]	; (801593c <defaultBootButtons+0x224>)
 8015916:	6a1b      	ldr	r3, [r3, #32]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d105      	bne.n	8015928 <defaultBootButtons+0x210>
			  EX_SW_OFF;
 801591c:	2200      	movs	r2, #0
 801591e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015922:	4808      	ldr	r0, [pc, #32]	; (8015944 <defaultBootButtons+0x22c>)
 8015924:	f7f3 fe46 	bl	80095b4 <HAL_GPIO_WritePin>
	  break;
 8015928:	bf00      	nop
	}
	  return pwrBtnReady;
 801592a:	687b      	ldr	r3, [r7, #4]
}
 801592c:	4618      	mov	r0, r3
 801592e:	3710      	adds	r7, #16
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}
 8015934:	200001f4 	.word	0x200001f4
 8015938:	2003119c 	.word	0x2003119c
 801593c:	20003360 	.word	0x20003360
 8015940:	40021400 	.word	0x40021400
 8015944:	40020400 	.word	0x40020400

08015948 <defaultErrorLEDs>:

void defaultErrorLEDs(){
 8015948:	b580      	push	{r7, lr}
 801594a:	b08a      	sub	sp, #40	; 0x28
 801594c:	af02      	add	r7, sp, #8
	float *presentADCValues;
	// An array of voltage rails that are monitored for faults.  Each element maps to the apporpriate ADC channel for monitoring
		// PLATFORM TEMPLATE: edit this array to include the voltages that you would like to monitor for faults.  The names are defined in main.h

		uint8_t monitor_rails[] = {VSYS};
 801594e:	2300      	movs	r3, #0
 8015950:	723b      	strb	r3, [r7, #8]

		// An array of falling edge fault thresholds for the voltage rails that are monitored for faults.  Size of the array and index for each fault should match the voltage name in monitor_rails[].
		double monitor_fault_thresholds[] = {VSYS_FLT};
 8015952:	f04f 0200 	mov.w	r2, #0
 8015956:	4b7b      	ldr	r3, [pc, #492]	; (8015b44 <defaultErrorLEDs+0x1fc>)
 8015958:	e9c7 2300 	strd	r2, r3, [r7]

		// An array of logic fault thresholds for the GPIO input rails that are monitored for faults.  The fault thresholds should match the mapping used in monitor_gpio[].
		uint8_t gpio_thresholds[] = {};

		uint8_t * errorLEDptr;
		uint8_t R = false;
 801595c:	2300      	movs	r3, #0
 801595e:	76fb      	strb	r3, [r7, #27]
		uint8_t G = false;
 8015960:	2300      	movs	r3, #0
 8015962:	76bb      	strb	r3, [r7, #26]
		uint8_t B = false;
 8015964:	2300      	movs	r3, #0
 8015966:	74fb      	strb	r3, [r7, #19]
		  // Check that the ADC are available, and if they are, retrieve the last recorded ADC outputs.
		  if(adcStates.adcBank1Finished && adcStates.adcBank2Finished && adcStates.adcBank3Finished){
 8015968:	4b77      	ldr	r3, [pc, #476]	; (8015b48 <defaultErrorLEDs+0x200>)
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d00b      	beq.n	8015988 <defaultErrorLEDs+0x40>
 8015970:	4b75      	ldr	r3, [pc, #468]	; (8015b48 <defaultErrorLEDs+0x200>)
 8015972:	785b      	ldrb	r3, [r3, #1]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d007      	beq.n	8015988 <defaultErrorLEDs+0x40>
 8015978:	4b73      	ldr	r3, [pc, #460]	; (8015b48 <defaultErrorLEDs+0x200>)
 801597a:	789b      	ldrb	r3, [r3, #2]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d003      	beq.n	8015988 <defaultErrorLEDs+0x40>
			  presentADCValues = getADCValues();
 8015980:	f7ee fab8 	bl	8003ef4 <getADCValues>
 8015984:	4603      	mov	r3, r0
 8015986:	617b      	str	r3, [r7, #20]
		  }

		  // Iterate through all the ADC channels that are monitored for faults
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 8015988:	2300      	movs	r3, #0
 801598a:	767b      	strb	r3, [r7, #25]
 801598c:	e02f      	b.n	80159ee <defaultErrorLEDs+0xa6>
		  {
			  // This switch statement maps the appropriate errorLED struct fault flag to the errorLEDptr so that we can clear or set it.
			  // To add more faults simply add more case statements.
			  // PLATFORM TEMPLATE: edit the switch statement labels to match the entries in monitor_rails[] array.
			  switch (monitor_rails[rail])
 801598e:	7e7b      	ldrb	r3, [r7, #25]
 8015990:	f107 0220 	add.w	r2, r7, #32
 8015994:	4413      	add	r3, r2
 8015996:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d102      	bne.n	80159a4 <defaultErrorLEDs+0x5c>
			  {
			  case VSYS:
				  errorLEDptr = &errorLED.vsysPMIFault;
 801599e:	4b6b      	ldr	r3, [pc, #428]	; (8015b4c <defaultErrorLEDs+0x204>)
 80159a0:	61fb      	str	r3, [r7, #28]
				  break;
 80159a2:	e000      	b.n	80159a6 <defaultErrorLEDs+0x5e>
			  default:
				  break;
 80159a4:	bf00      	nop
			  }
			  // If the voltage level is above the low fault threshold then clear the fault flag.
			  if (*(presentADCValues+monitor_rails[rail]) > monitor_fault_thresholds[rail])
 80159a6:	7e7b      	ldrb	r3, [r7, #25]
 80159a8:	f107 0220 	add.w	r2, r7, #32
 80159ac:	4413      	add	r3, r2
 80159ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	697a      	ldr	r2, [r7, #20]
 80159b6:	4413      	add	r3, r2
 80159b8:	edd3 7a00 	vldr	s15, [r3]
 80159bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80159c0:	7e7b      	ldrb	r3, [r7, #25]
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	f107 0220 	add.w	r2, r7, #32
 80159c8:	4413      	add	r3, r2
 80159ca:	3b20      	subs	r3, #32
 80159cc:	ed93 7b00 	vldr	d7, [r3]
 80159d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80159d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d8:	dd03      	ble.n	80159e2 <defaultErrorLEDs+0x9a>
			  {
				  *errorLEDptr = false;
 80159da:	69fb      	ldr	r3, [r7, #28]
 80159dc:	2200      	movs	r2, #0
 80159de:	701a      	strb	r2, [r3, #0]
 80159e0:	e002      	b.n	80159e8 <defaultErrorLEDs+0xa0>
			  }
			  else
			  {
				  *errorLEDptr = true;
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	2201      	movs	r2, #1
 80159e6:	701a      	strb	r2, [r3, #0]
		  for (uint8_t rail = 0; rail < sizeof(monitor_rails)/sizeof(monitor_rails[0]); rail++)
 80159e8:	7e7b      	ldrb	r3, [r7, #25]
 80159ea:	3301      	adds	r3, #1
 80159ec:	767b      	strb	r3, [r7, #25]
 80159ee:	7e7b      	ldrb	r3, [r7, #25]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d0cc      	beq.n	801598e <defaultErrorLEDs+0x46>
			  }
		  }

		  // Check GPIO inputs for faults. Iterate through the inputs that are supposed to be monitored for faults.
		  for (uint8_t input = 0; input < sizeof(monitor_gpio)/sizeof(monitor_gpio[0]); input++)
 80159f4:	2300      	movs	r3, #0
 80159f6:	74bb      	strb	r3, [r7, #18]
 80159f8:	bf00      	nop
		//	  errorLED.vsysPMIFault=false;
		  //}
		  //else{
		//	  errorLED.vsysPMIFault=true;
		 // }
		  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 80159fa:	4b55      	ldr	r3, [pc, #340]	; (8015b50 <defaultErrorLEDs+0x208>)
 80159fc:	689b      	ldr	r3, [r3, #8]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d103      	bne.n	8015a0a <defaultErrorLEDs+0xc2>
 8015a02:	4b53      	ldr	r3, [pc, #332]	; (8015b50 <defaultErrorLEDs+0x208>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d103      	bne.n	8015a12 <defaultErrorLEDs+0xca>
 8015a0a:	4b51      	ldr	r3, [pc, #324]	; (8015b50 <defaultErrorLEDs+0x208>)
 8015a0c:	699b      	ldr	r3, [r3, #24]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	da03      	bge.n	8015a1a <defaultErrorLEDs+0xd2>
			  errorLED.zionFault=true;
 8015a12:	4b50      	ldr	r3, [pc, #320]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a14:	2201      	movs	r2, #1
 8015a16:	701a      	strb	r2, [r3, #0]
 8015a18:	e002      	b.n	8015a20 <defaultErrorLEDs+0xd8>
		  }
		  else{
			  errorLED.zionFault=false;
 8015a1a:	4b4e      	ldr	r3, [pc, #312]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	701a      	strb	r2, [r3, #0]
		  }
		  //HAL_I2C_IsDeviceReady(&hi2c1, SOC_ADDRESS, 2, 100)
		  int i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8015a20:	4b4d      	ldr	r3, [pc, #308]	; (8015b58 <defaultErrorLEDs+0x210>)
 8015a22:	7818      	ldrb	r0, [r3, #0]
 8015a24:	4b4c      	ldr	r3, [pc, #304]	; (8015b58 <defaultErrorLEDs+0x210>)
 8015a26:	68db      	ldr	r3, [r3, #12]
 8015a28:	9300      	str	r3, [sp, #0]
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	21f0      	movs	r1, #240	; 0xf0
 8015a30:	f7ed fff0 	bl	8003a14 <writeI2CRegister>
 8015a34:	60f8      	str	r0, [r7, #12]

		  //only allow the error led write commands if the led driver responds.
		  if(i2cCheck == HAL_OK)
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d17c      	bne.n	8015b36 <defaultErrorLEDs+0x1ee>
		  {
			  errorLED.ledDriver=false;
 8015a3c:	4b45      	ldr	r3, [pc, #276]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a3e:	2200      	movs	r2, #0
 8015a40:	735a      	strb	r2, [r3, #13]

			  switch(bootButtons.bootMode)
 8015a42:	4b46      	ldr	r3, [pc, #280]	; (8015b5c <defaultErrorLEDs+0x214>)
 8015a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d002      	beq.n	8015a50 <defaultErrorLEDs+0x108>
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d00f      	beq.n	8015a6e <defaultErrorLEDs+0x126>
					errorLED.edl_boot=false;
					errorLED.boot_fault=false;
					G = true;
					break;
				default:
					break;
 8015a4e:	e01d      	b.n	8015a8c <defaultErrorLEDs+0x144>
					errorLED.standard_boot=false;
 8015a50:	4b40      	ldr	r3, [pc, #256]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a52:	2200      	movs	r2, #0
 8015a54:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8015a56:	4b3f      	ldr	r3, [pc, #252]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a58:	2200      	movs	r2, #0
 8015a5a:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8015a5c:	4b3d      	ldr	r3, [pc, #244]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a5e:	2200      	movs	r2, #0
 8015a60:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8015a62:	4b3c      	ldr	r3, [pc, #240]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a64:	2200      	movs	r2, #0
 8015a66:	71da      	strb	r2, [r3, #7]
					R = false;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	76fb      	strb	r3, [r7, #27]
					break;
 8015a6c:	e00e      	b.n	8015a8c <defaultErrorLEDs+0x144>
					errorLED.standard_boot=true;
 8015a6e:	4b39      	ldr	r3, [pc, #228]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a70:	2201      	movs	r2, #1
 8015a72:	721a      	strb	r2, [r3, #8]
					errorLED.uefi_boot=false;
 8015a74:	4b37      	ldr	r3, [pc, #220]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a76:	2200      	movs	r2, #0
 8015a78:	725a      	strb	r2, [r3, #9]
					errorLED.edl_boot=false;
 8015a7a:	4b36      	ldr	r3, [pc, #216]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	729a      	strb	r2, [r3, #10]
					errorLED.boot_fault=false;
 8015a80:	4b34      	ldr	r3, [pc, #208]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a82:	2200      	movs	r2, #0
 8015a84:	71da      	strb	r2, [r3, #7]
					G = true;
 8015a86:	2301      	movs	r3, #1
 8015a88:	76bb      	strb	r3, [r7, #26]
					break;
 8015a8a:	bf00      	nop
			  }
			  setRGBLED(R,G,B);
 8015a8c:	7efb      	ldrb	r3, [r7, #27]
 8015a8e:	7eb9      	ldrb	r1, [r7, #26]
 8015a90:	7cfa      	ldrb	r2, [r7, #19]
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7ee f8e6 	bl	8003c64 <setRGBLED>
			  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8015a98:	4b2e      	ldr	r3, [pc, #184]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	4619      	mov	r1, r3
 8015a9e:	2000      	movs	r0, #0
 8015aa0:	f7ee f90c 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015aa4:	2014      	movs	r0, #20
 8015aa6:	f7f2 f905 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 8015aaa:	4b2a      	ldr	r3, [pc, #168]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015aac:	785b      	ldrb	r3, [r3, #1]
 8015aae:	4619      	mov	r1, r3
 8015ab0:	2001      	movs	r0, #1
 8015ab2:	f7ee f903 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015ab6:	2014      	movs	r0, #20
 8015ab8:	f7f2 f8fc 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT3,errorLED.fault3);
 8015abc:	4b25      	ldr	r3, [pc, #148]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015abe:	789b      	ldrb	r3, [r3, #2]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	2002      	movs	r0, #2
 8015ac4:	f7ee f8fa 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015ac8:	2014      	movs	r0, #20
 8015aca:	f7f2 f8f3 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT4,errorLED.fault4);
 8015ace:	4b21      	ldr	r3, [pc, #132]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015ad0:	78db      	ldrb	r3, [r3, #3]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	2003      	movs	r0, #3
 8015ad6:	f7ee f8f1 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015ada:	2014      	movs	r0, #20
 8015adc:	f7f2 f8ea 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT5,errorLED.fault5);
 8015ae0:	4b1c      	ldr	r3, [pc, #112]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015ae2:	791b      	ldrb	r3, [r3, #4]
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	2004      	movs	r0, #4
 8015ae8:	f7ee f8e8 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015aec:	2014      	movs	r0, #20
 8015aee:	f7f2 f8e1 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT6,errorLED.fault6);
 8015af2:	4b18      	ldr	r3, [pc, #96]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015af4:	795b      	ldrb	r3, [r3, #5]
 8015af6:	4619      	mov	r1, r3
 8015af8:	2005      	movs	r0, #5
 8015afa:	f7ee f8df 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015afe:	2014      	movs	r0, #20
 8015b00:	f7f2 f8d8 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT7,errorLED.fault7);
 8015b04:	4b13      	ldr	r3, [pc, #76]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015b06:	799b      	ldrb	r3, [r3, #6]
 8015b08:	4619      	mov	r1, r3
 8015b0a:	2006      	movs	r0, #6
 8015b0c:	f7ee f8d6 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015b10:	2014      	movs	r0, #20
 8015b12:	f7f2 f8cf 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT8,errorLED.fault8);
 8015b16:	4b0f      	ldr	r3, [pc, #60]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015b18:	7adb      	ldrb	r3, [r3, #11]
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	200a      	movs	r0, #10
 8015b1e:	f7ee f8cd 	bl	8003cbc <setErrorLED>
			  HAL_Delay(20);
 8015b22:	2014      	movs	r0, #20
 8015b24:	f7f2 f8c6 	bl	8007cb4 <HAL_Delay>
			  setErrorLED(FAULT9,errorLED.fault9);
 8015b28:	4b0a      	ldr	r3, [pc, #40]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015b2a:	7b1b      	ldrb	r3, [r3, #12]
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	200b      	movs	r0, #11
 8015b30:	f7ee f8c4 	bl	8003cbc <setErrorLED>
		  }
		  else{
			  errorLED.ledDriver = true;
		  }
}
 8015b34:	e002      	b.n	8015b3c <defaultErrorLEDs+0x1f4>
			  errorLED.ledDriver = true;
 8015b36:	4b07      	ldr	r3, [pc, #28]	; (8015b54 <defaultErrorLEDs+0x20c>)
 8015b38:	2201      	movs	r2, #1
 8015b3a:	735a      	strb	r2, [r3, #13]
}
 8015b3c:	bf00      	nop
 8015b3e:	3720      	adds	r7, #32
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	400c0000 	.word	0x400c0000
 8015b48:	20003324 	.word	0x20003324
 8015b4c:	2000338d 	.word	0x2000338d
 8015b50:	20003328 	.word	0x20003328
 8015b54:	2000338c 	.word	0x2000338c
 8015b58:	200001d8 	.word	0x200001d8
 8015b5c:	20003360 	.word	0x20003360

08015b60 <__errno>:
 8015b60:	4b01      	ldr	r3, [pc, #4]	; (8015b68 <__errno+0x8>)
 8015b62:	6818      	ldr	r0, [r3, #0]
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop
 8015b68:	20000254 	.word	0x20000254

08015b6c <__libc_init_array>:
 8015b6c:	b570      	push	{r4, r5, r6, lr}
 8015b6e:	4d0d      	ldr	r5, [pc, #52]	; (8015ba4 <__libc_init_array+0x38>)
 8015b70:	4c0d      	ldr	r4, [pc, #52]	; (8015ba8 <__libc_init_array+0x3c>)
 8015b72:	1b64      	subs	r4, r4, r5
 8015b74:	10a4      	asrs	r4, r4, #2
 8015b76:	2600      	movs	r6, #0
 8015b78:	42a6      	cmp	r6, r4
 8015b7a:	d109      	bne.n	8015b90 <__libc_init_array+0x24>
 8015b7c:	4d0b      	ldr	r5, [pc, #44]	; (8015bac <__libc_init_array+0x40>)
 8015b7e:	4c0c      	ldr	r4, [pc, #48]	; (8015bb0 <__libc_init_array+0x44>)
 8015b80:	f004 fc00 	bl	801a384 <_init>
 8015b84:	1b64      	subs	r4, r4, r5
 8015b86:	10a4      	asrs	r4, r4, #2
 8015b88:	2600      	movs	r6, #0
 8015b8a:	42a6      	cmp	r6, r4
 8015b8c:	d105      	bne.n	8015b9a <__libc_init_array+0x2e>
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}
 8015b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b94:	4798      	blx	r3
 8015b96:	3601      	adds	r6, #1
 8015b98:	e7ee      	b.n	8015b78 <__libc_init_array+0xc>
 8015b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b9e:	4798      	blx	r3
 8015ba0:	3601      	adds	r6, #1
 8015ba2:	e7f2      	b.n	8015b8a <__libc_init_array+0x1e>
 8015ba4:	0801caf4 	.word	0x0801caf4
 8015ba8:	0801caf4 	.word	0x0801caf4
 8015bac:	0801caf4 	.word	0x0801caf4
 8015bb0:	0801caf8 	.word	0x0801caf8

08015bb4 <memcpy>:
 8015bb4:	440a      	add	r2, r1
 8015bb6:	4291      	cmp	r1, r2
 8015bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8015bbc:	d100      	bne.n	8015bc0 <memcpy+0xc>
 8015bbe:	4770      	bx	lr
 8015bc0:	b510      	push	{r4, lr}
 8015bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015bca:	4291      	cmp	r1, r2
 8015bcc:	d1f9      	bne.n	8015bc2 <memcpy+0xe>
 8015bce:	bd10      	pop	{r4, pc}

08015bd0 <memset>:
 8015bd0:	4402      	add	r2, r0
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	4293      	cmp	r3, r2
 8015bd6:	d100      	bne.n	8015bda <memset+0xa>
 8015bd8:	4770      	bx	lr
 8015bda:	f803 1b01 	strb.w	r1, [r3], #1
 8015bde:	e7f9      	b.n	8015bd4 <memset+0x4>

08015be0 <__cvt>:
 8015be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015be2:	ed2d 8b02 	vpush	{d8}
 8015be6:	eeb0 8b40 	vmov.f64	d8, d0
 8015bea:	b085      	sub	sp, #20
 8015bec:	4617      	mov	r7, r2
 8015bee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015bf0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015bf2:	ee18 2a90 	vmov	r2, s17
 8015bf6:	f025 0520 	bic.w	r5, r5, #32
 8015bfa:	2a00      	cmp	r2, #0
 8015bfc:	bfb6      	itet	lt
 8015bfe:	222d      	movlt	r2, #45	; 0x2d
 8015c00:	2200      	movge	r2, #0
 8015c02:	eeb1 8b40 	vneglt.f64	d8, d0
 8015c06:	2d46      	cmp	r5, #70	; 0x46
 8015c08:	460c      	mov	r4, r1
 8015c0a:	701a      	strb	r2, [r3, #0]
 8015c0c:	d004      	beq.n	8015c18 <__cvt+0x38>
 8015c0e:	2d45      	cmp	r5, #69	; 0x45
 8015c10:	d100      	bne.n	8015c14 <__cvt+0x34>
 8015c12:	3401      	adds	r4, #1
 8015c14:	2102      	movs	r1, #2
 8015c16:	e000      	b.n	8015c1a <__cvt+0x3a>
 8015c18:	2103      	movs	r1, #3
 8015c1a:	ab03      	add	r3, sp, #12
 8015c1c:	9301      	str	r3, [sp, #4]
 8015c1e:	ab02      	add	r3, sp, #8
 8015c20:	9300      	str	r3, [sp, #0]
 8015c22:	4622      	mov	r2, r4
 8015c24:	4633      	mov	r3, r6
 8015c26:	eeb0 0b48 	vmov.f64	d0, d8
 8015c2a:	f001 fe9d 	bl	8017968 <_dtoa_r>
 8015c2e:	2d47      	cmp	r5, #71	; 0x47
 8015c30:	d109      	bne.n	8015c46 <__cvt+0x66>
 8015c32:	07fb      	lsls	r3, r7, #31
 8015c34:	d407      	bmi.n	8015c46 <__cvt+0x66>
 8015c36:	9b03      	ldr	r3, [sp, #12]
 8015c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c3a:	1a1b      	subs	r3, r3, r0
 8015c3c:	6013      	str	r3, [r2, #0]
 8015c3e:	b005      	add	sp, #20
 8015c40:	ecbd 8b02 	vpop	{d8}
 8015c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c46:	2d46      	cmp	r5, #70	; 0x46
 8015c48:	eb00 0204 	add.w	r2, r0, r4
 8015c4c:	d10c      	bne.n	8015c68 <__cvt+0x88>
 8015c4e:	7803      	ldrb	r3, [r0, #0]
 8015c50:	2b30      	cmp	r3, #48	; 0x30
 8015c52:	d107      	bne.n	8015c64 <__cvt+0x84>
 8015c54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5c:	bf1c      	itt	ne
 8015c5e:	f1c4 0401 	rsbne	r4, r4, #1
 8015c62:	6034      	strne	r4, [r6, #0]
 8015c64:	6833      	ldr	r3, [r6, #0]
 8015c66:	441a      	add	r2, r3
 8015c68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c70:	bf08      	it	eq
 8015c72:	9203      	streq	r2, [sp, #12]
 8015c74:	2130      	movs	r1, #48	; 0x30
 8015c76:	9b03      	ldr	r3, [sp, #12]
 8015c78:	4293      	cmp	r3, r2
 8015c7a:	d2dc      	bcs.n	8015c36 <__cvt+0x56>
 8015c7c:	1c5c      	adds	r4, r3, #1
 8015c7e:	9403      	str	r4, [sp, #12]
 8015c80:	7019      	strb	r1, [r3, #0]
 8015c82:	e7f8      	b.n	8015c76 <__cvt+0x96>

08015c84 <__exponent>:
 8015c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c86:	4603      	mov	r3, r0
 8015c88:	2900      	cmp	r1, #0
 8015c8a:	bfb8      	it	lt
 8015c8c:	4249      	neglt	r1, r1
 8015c8e:	f803 2b02 	strb.w	r2, [r3], #2
 8015c92:	bfb4      	ite	lt
 8015c94:	222d      	movlt	r2, #45	; 0x2d
 8015c96:	222b      	movge	r2, #43	; 0x2b
 8015c98:	2909      	cmp	r1, #9
 8015c9a:	7042      	strb	r2, [r0, #1]
 8015c9c:	dd2a      	ble.n	8015cf4 <__exponent+0x70>
 8015c9e:	f10d 0407 	add.w	r4, sp, #7
 8015ca2:	46a4      	mov	ip, r4
 8015ca4:	270a      	movs	r7, #10
 8015ca6:	46a6      	mov	lr, r4
 8015ca8:	460a      	mov	r2, r1
 8015caa:	fb91 f6f7 	sdiv	r6, r1, r7
 8015cae:	fb07 1516 	mls	r5, r7, r6, r1
 8015cb2:	3530      	adds	r5, #48	; 0x30
 8015cb4:	2a63      	cmp	r2, #99	; 0x63
 8015cb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8015cba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015cbe:	4631      	mov	r1, r6
 8015cc0:	dcf1      	bgt.n	8015ca6 <__exponent+0x22>
 8015cc2:	3130      	adds	r1, #48	; 0x30
 8015cc4:	f1ae 0502 	sub.w	r5, lr, #2
 8015cc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015ccc:	1c44      	adds	r4, r0, #1
 8015cce:	4629      	mov	r1, r5
 8015cd0:	4561      	cmp	r1, ip
 8015cd2:	d30a      	bcc.n	8015cea <__exponent+0x66>
 8015cd4:	f10d 0209 	add.w	r2, sp, #9
 8015cd8:	eba2 020e 	sub.w	r2, r2, lr
 8015cdc:	4565      	cmp	r5, ip
 8015cde:	bf88      	it	hi
 8015ce0:	2200      	movhi	r2, #0
 8015ce2:	4413      	add	r3, r2
 8015ce4:	1a18      	subs	r0, r3, r0
 8015ce6:	b003      	add	sp, #12
 8015ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015cee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015cf2:	e7ed      	b.n	8015cd0 <__exponent+0x4c>
 8015cf4:	2330      	movs	r3, #48	; 0x30
 8015cf6:	3130      	adds	r1, #48	; 0x30
 8015cf8:	7083      	strb	r3, [r0, #2]
 8015cfa:	70c1      	strb	r1, [r0, #3]
 8015cfc:	1d03      	adds	r3, r0, #4
 8015cfe:	e7f1      	b.n	8015ce4 <__exponent+0x60>

08015d00 <_printf_float>:
 8015d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d04:	b08b      	sub	sp, #44	; 0x2c
 8015d06:	460c      	mov	r4, r1
 8015d08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015d0c:	4616      	mov	r6, r2
 8015d0e:	461f      	mov	r7, r3
 8015d10:	4605      	mov	r5, r0
 8015d12:	f003 f8d1 	bl	8018eb8 <_localeconv_r>
 8015d16:	f8d0 b000 	ldr.w	fp, [r0]
 8015d1a:	4658      	mov	r0, fp
 8015d1c:	f7ea fa90 	bl	8000240 <strlen>
 8015d20:	2300      	movs	r3, #0
 8015d22:	9308      	str	r3, [sp, #32]
 8015d24:	f8d8 3000 	ldr.w	r3, [r8]
 8015d28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015d2c:	6822      	ldr	r2, [r4, #0]
 8015d2e:	3307      	adds	r3, #7
 8015d30:	f023 0307 	bic.w	r3, r3, #7
 8015d34:	f103 0108 	add.w	r1, r3, #8
 8015d38:	f8c8 1000 	str.w	r1, [r8]
 8015d3c:	4682      	mov	sl, r0
 8015d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8015d46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8015fa8 <_printf_float+0x2a8>
 8015d4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8015d4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8015d52:	eeb4 6b47 	vcmp.f64	d6, d7
 8015d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5a:	dd24      	ble.n	8015da6 <_printf_float+0xa6>
 8015d5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d64:	d502      	bpl.n	8015d6c <_printf_float+0x6c>
 8015d66:	232d      	movs	r3, #45	; 0x2d
 8015d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d6c:	4b90      	ldr	r3, [pc, #576]	; (8015fb0 <_printf_float+0x2b0>)
 8015d6e:	4891      	ldr	r0, [pc, #580]	; (8015fb4 <_printf_float+0x2b4>)
 8015d70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015d74:	bf94      	ite	ls
 8015d76:	4698      	movls	r8, r3
 8015d78:	4680      	movhi	r8, r0
 8015d7a:	2303      	movs	r3, #3
 8015d7c:	6123      	str	r3, [r4, #16]
 8015d7e:	f022 0204 	bic.w	r2, r2, #4
 8015d82:	2300      	movs	r3, #0
 8015d84:	6022      	str	r2, [r4, #0]
 8015d86:	9304      	str	r3, [sp, #16]
 8015d88:	9700      	str	r7, [sp, #0]
 8015d8a:	4633      	mov	r3, r6
 8015d8c:	aa09      	add	r2, sp, #36	; 0x24
 8015d8e:	4621      	mov	r1, r4
 8015d90:	4628      	mov	r0, r5
 8015d92:	f000 f9d3 	bl	801613c <_printf_common>
 8015d96:	3001      	adds	r0, #1
 8015d98:	f040 808a 	bne.w	8015eb0 <_printf_float+0x1b0>
 8015d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8015da0:	b00b      	add	sp, #44	; 0x2c
 8015da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015da6:	eeb4 0b40 	vcmp.f64	d0, d0
 8015daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dae:	d709      	bvc.n	8015dc4 <_printf_float+0xc4>
 8015db0:	ee10 3a90 	vmov	r3, s1
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	bfbc      	itt	lt
 8015db8:	232d      	movlt	r3, #45	; 0x2d
 8015dba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015dbe:	487e      	ldr	r0, [pc, #504]	; (8015fb8 <_printf_float+0x2b8>)
 8015dc0:	4b7e      	ldr	r3, [pc, #504]	; (8015fbc <_printf_float+0x2bc>)
 8015dc2:	e7d5      	b.n	8015d70 <_printf_float+0x70>
 8015dc4:	6863      	ldr	r3, [r4, #4]
 8015dc6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8015dca:	9104      	str	r1, [sp, #16]
 8015dcc:	1c59      	adds	r1, r3, #1
 8015dce:	d13c      	bne.n	8015e4a <_printf_float+0x14a>
 8015dd0:	2306      	movs	r3, #6
 8015dd2:	6063      	str	r3, [r4, #4]
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	9303      	str	r3, [sp, #12]
 8015dd8:	ab08      	add	r3, sp, #32
 8015dda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015dde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015de2:	ab07      	add	r3, sp, #28
 8015de4:	6861      	ldr	r1, [r4, #4]
 8015de6:	9300      	str	r3, [sp, #0]
 8015de8:	6022      	str	r2, [r4, #0]
 8015dea:	f10d 031b 	add.w	r3, sp, #27
 8015dee:	4628      	mov	r0, r5
 8015df0:	f7ff fef6 	bl	8015be0 <__cvt>
 8015df4:	9b04      	ldr	r3, [sp, #16]
 8015df6:	9907      	ldr	r1, [sp, #28]
 8015df8:	2b47      	cmp	r3, #71	; 0x47
 8015dfa:	4680      	mov	r8, r0
 8015dfc:	d108      	bne.n	8015e10 <_printf_float+0x110>
 8015dfe:	1cc8      	adds	r0, r1, #3
 8015e00:	db02      	blt.n	8015e08 <_printf_float+0x108>
 8015e02:	6863      	ldr	r3, [r4, #4]
 8015e04:	4299      	cmp	r1, r3
 8015e06:	dd41      	ble.n	8015e8c <_printf_float+0x18c>
 8015e08:	f1a9 0902 	sub.w	r9, r9, #2
 8015e0c:	fa5f f989 	uxtb.w	r9, r9
 8015e10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015e14:	d820      	bhi.n	8015e58 <_printf_float+0x158>
 8015e16:	3901      	subs	r1, #1
 8015e18:	464a      	mov	r2, r9
 8015e1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015e1e:	9107      	str	r1, [sp, #28]
 8015e20:	f7ff ff30 	bl	8015c84 <__exponent>
 8015e24:	9a08      	ldr	r2, [sp, #32]
 8015e26:	9004      	str	r0, [sp, #16]
 8015e28:	1813      	adds	r3, r2, r0
 8015e2a:	2a01      	cmp	r2, #1
 8015e2c:	6123      	str	r3, [r4, #16]
 8015e2e:	dc02      	bgt.n	8015e36 <_printf_float+0x136>
 8015e30:	6822      	ldr	r2, [r4, #0]
 8015e32:	07d2      	lsls	r2, r2, #31
 8015e34:	d501      	bpl.n	8015e3a <_printf_float+0x13a>
 8015e36:	3301      	adds	r3, #1
 8015e38:	6123      	str	r3, [r4, #16]
 8015e3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d0a2      	beq.n	8015d88 <_printf_float+0x88>
 8015e42:	232d      	movs	r3, #45	; 0x2d
 8015e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e48:	e79e      	b.n	8015d88 <_printf_float+0x88>
 8015e4a:	9904      	ldr	r1, [sp, #16]
 8015e4c:	2947      	cmp	r1, #71	; 0x47
 8015e4e:	d1c1      	bne.n	8015dd4 <_printf_float+0xd4>
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d1bf      	bne.n	8015dd4 <_printf_float+0xd4>
 8015e54:	2301      	movs	r3, #1
 8015e56:	e7bc      	b.n	8015dd2 <_printf_float+0xd2>
 8015e58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8015e5c:	d118      	bne.n	8015e90 <_printf_float+0x190>
 8015e5e:	2900      	cmp	r1, #0
 8015e60:	6863      	ldr	r3, [r4, #4]
 8015e62:	dd0b      	ble.n	8015e7c <_printf_float+0x17c>
 8015e64:	6121      	str	r1, [r4, #16]
 8015e66:	b913      	cbnz	r3, 8015e6e <_printf_float+0x16e>
 8015e68:	6822      	ldr	r2, [r4, #0]
 8015e6a:	07d0      	lsls	r0, r2, #31
 8015e6c:	d502      	bpl.n	8015e74 <_printf_float+0x174>
 8015e6e:	3301      	adds	r3, #1
 8015e70:	440b      	add	r3, r1
 8015e72:	6123      	str	r3, [r4, #16]
 8015e74:	2300      	movs	r3, #0
 8015e76:	65a1      	str	r1, [r4, #88]	; 0x58
 8015e78:	9304      	str	r3, [sp, #16]
 8015e7a:	e7de      	b.n	8015e3a <_printf_float+0x13a>
 8015e7c:	b913      	cbnz	r3, 8015e84 <_printf_float+0x184>
 8015e7e:	6822      	ldr	r2, [r4, #0]
 8015e80:	07d2      	lsls	r2, r2, #31
 8015e82:	d501      	bpl.n	8015e88 <_printf_float+0x188>
 8015e84:	3302      	adds	r3, #2
 8015e86:	e7f4      	b.n	8015e72 <_printf_float+0x172>
 8015e88:	2301      	movs	r3, #1
 8015e8a:	e7f2      	b.n	8015e72 <_printf_float+0x172>
 8015e8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8015e90:	9b08      	ldr	r3, [sp, #32]
 8015e92:	4299      	cmp	r1, r3
 8015e94:	db05      	blt.n	8015ea2 <_printf_float+0x1a2>
 8015e96:	6823      	ldr	r3, [r4, #0]
 8015e98:	6121      	str	r1, [r4, #16]
 8015e9a:	07d8      	lsls	r0, r3, #31
 8015e9c:	d5ea      	bpl.n	8015e74 <_printf_float+0x174>
 8015e9e:	1c4b      	adds	r3, r1, #1
 8015ea0:	e7e7      	b.n	8015e72 <_printf_float+0x172>
 8015ea2:	2900      	cmp	r1, #0
 8015ea4:	bfd4      	ite	le
 8015ea6:	f1c1 0202 	rsble	r2, r1, #2
 8015eaa:	2201      	movgt	r2, #1
 8015eac:	4413      	add	r3, r2
 8015eae:	e7e0      	b.n	8015e72 <_printf_float+0x172>
 8015eb0:	6823      	ldr	r3, [r4, #0]
 8015eb2:	055a      	lsls	r2, r3, #21
 8015eb4:	d407      	bmi.n	8015ec6 <_printf_float+0x1c6>
 8015eb6:	6923      	ldr	r3, [r4, #16]
 8015eb8:	4642      	mov	r2, r8
 8015eba:	4631      	mov	r1, r6
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	47b8      	blx	r7
 8015ec0:	3001      	adds	r0, #1
 8015ec2:	d12a      	bne.n	8015f1a <_printf_float+0x21a>
 8015ec4:	e76a      	b.n	8015d9c <_printf_float+0x9c>
 8015ec6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015eca:	f240 80e2 	bls.w	8016092 <_printf_float+0x392>
 8015ece:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015ed2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eda:	d133      	bne.n	8015f44 <_printf_float+0x244>
 8015edc:	4a38      	ldr	r2, [pc, #224]	; (8015fc0 <_printf_float+0x2c0>)
 8015ede:	2301      	movs	r3, #1
 8015ee0:	4631      	mov	r1, r6
 8015ee2:	4628      	mov	r0, r5
 8015ee4:	47b8      	blx	r7
 8015ee6:	3001      	adds	r0, #1
 8015ee8:	f43f af58 	beq.w	8015d9c <_printf_float+0x9c>
 8015eec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	db02      	blt.n	8015efa <_printf_float+0x1fa>
 8015ef4:	6823      	ldr	r3, [r4, #0]
 8015ef6:	07d8      	lsls	r0, r3, #31
 8015ef8:	d50f      	bpl.n	8015f1a <_printf_float+0x21a>
 8015efa:	4653      	mov	r3, sl
 8015efc:	465a      	mov	r2, fp
 8015efe:	4631      	mov	r1, r6
 8015f00:	4628      	mov	r0, r5
 8015f02:	47b8      	blx	r7
 8015f04:	3001      	adds	r0, #1
 8015f06:	f43f af49 	beq.w	8015d9c <_printf_float+0x9c>
 8015f0a:	f04f 0800 	mov.w	r8, #0
 8015f0e:	f104 091a 	add.w	r9, r4, #26
 8015f12:	9b08      	ldr	r3, [sp, #32]
 8015f14:	3b01      	subs	r3, #1
 8015f16:	4543      	cmp	r3, r8
 8015f18:	dc09      	bgt.n	8015f2e <_printf_float+0x22e>
 8015f1a:	6823      	ldr	r3, [r4, #0]
 8015f1c:	079b      	lsls	r3, r3, #30
 8015f1e:	f100 8108 	bmi.w	8016132 <_printf_float+0x432>
 8015f22:	68e0      	ldr	r0, [r4, #12]
 8015f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f26:	4298      	cmp	r0, r3
 8015f28:	bfb8      	it	lt
 8015f2a:	4618      	movlt	r0, r3
 8015f2c:	e738      	b.n	8015da0 <_printf_float+0xa0>
 8015f2e:	2301      	movs	r3, #1
 8015f30:	464a      	mov	r2, r9
 8015f32:	4631      	mov	r1, r6
 8015f34:	4628      	mov	r0, r5
 8015f36:	47b8      	blx	r7
 8015f38:	3001      	adds	r0, #1
 8015f3a:	f43f af2f 	beq.w	8015d9c <_printf_float+0x9c>
 8015f3e:	f108 0801 	add.w	r8, r8, #1
 8015f42:	e7e6      	b.n	8015f12 <_printf_float+0x212>
 8015f44:	9b07      	ldr	r3, [sp, #28]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	dc3c      	bgt.n	8015fc4 <_printf_float+0x2c4>
 8015f4a:	4a1d      	ldr	r2, [pc, #116]	; (8015fc0 <_printf_float+0x2c0>)
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	4631      	mov	r1, r6
 8015f50:	4628      	mov	r0, r5
 8015f52:	47b8      	blx	r7
 8015f54:	3001      	adds	r0, #1
 8015f56:	f43f af21 	beq.w	8015d9c <_printf_float+0x9c>
 8015f5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015f5e:	4313      	orrs	r3, r2
 8015f60:	d102      	bne.n	8015f68 <_printf_float+0x268>
 8015f62:	6823      	ldr	r3, [r4, #0]
 8015f64:	07d9      	lsls	r1, r3, #31
 8015f66:	d5d8      	bpl.n	8015f1a <_printf_float+0x21a>
 8015f68:	4653      	mov	r3, sl
 8015f6a:	465a      	mov	r2, fp
 8015f6c:	4631      	mov	r1, r6
 8015f6e:	4628      	mov	r0, r5
 8015f70:	47b8      	blx	r7
 8015f72:	3001      	adds	r0, #1
 8015f74:	f43f af12 	beq.w	8015d9c <_printf_float+0x9c>
 8015f78:	f04f 0900 	mov.w	r9, #0
 8015f7c:	f104 0a1a 	add.w	sl, r4, #26
 8015f80:	9b07      	ldr	r3, [sp, #28]
 8015f82:	425b      	negs	r3, r3
 8015f84:	454b      	cmp	r3, r9
 8015f86:	dc01      	bgt.n	8015f8c <_printf_float+0x28c>
 8015f88:	9b08      	ldr	r3, [sp, #32]
 8015f8a:	e795      	b.n	8015eb8 <_printf_float+0x1b8>
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	4652      	mov	r2, sl
 8015f90:	4631      	mov	r1, r6
 8015f92:	4628      	mov	r0, r5
 8015f94:	47b8      	blx	r7
 8015f96:	3001      	adds	r0, #1
 8015f98:	f43f af00 	beq.w	8015d9c <_printf_float+0x9c>
 8015f9c:	f109 0901 	add.w	r9, r9, #1
 8015fa0:	e7ee      	b.n	8015f80 <_printf_float+0x280>
 8015fa2:	bf00      	nop
 8015fa4:	f3af 8000 	nop.w
 8015fa8:	ffffffff 	.word	0xffffffff
 8015fac:	7fefffff 	.word	0x7fefffff
 8015fb0:	0801c63c 	.word	0x0801c63c
 8015fb4:	0801c640 	.word	0x0801c640
 8015fb8:	0801c648 	.word	0x0801c648
 8015fbc:	0801c644 	.word	0x0801c644
 8015fc0:	0801c64c 	.word	0x0801c64c
 8015fc4:	9a08      	ldr	r2, [sp, #32]
 8015fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	bfa8      	it	ge
 8015fcc:	461a      	movge	r2, r3
 8015fce:	2a00      	cmp	r2, #0
 8015fd0:	4691      	mov	r9, r2
 8015fd2:	dc38      	bgt.n	8016046 <_printf_float+0x346>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	9305      	str	r3, [sp, #20]
 8015fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015fdc:	f104 021a 	add.w	r2, r4, #26
 8015fe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015fe2:	9905      	ldr	r1, [sp, #20]
 8015fe4:	9304      	str	r3, [sp, #16]
 8015fe6:	eba3 0309 	sub.w	r3, r3, r9
 8015fea:	428b      	cmp	r3, r1
 8015fec:	dc33      	bgt.n	8016056 <_printf_float+0x356>
 8015fee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	db3c      	blt.n	8016070 <_printf_float+0x370>
 8015ff6:	6823      	ldr	r3, [r4, #0]
 8015ff8:	07da      	lsls	r2, r3, #31
 8015ffa:	d439      	bmi.n	8016070 <_printf_float+0x370>
 8015ffc:	9a08      	ldr	r2, [sp, #32]
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	9907      	ldr	r1, [sp, #28]
 8016002:	1ad3      	subs	r3, r2, r3
 8016004:	eba2 0901 	sub.w	r9, r2, r1
 8016008:	4599      	cmp	r9, r3
 801600a:	bfa8      	it	ge
 801600c:	4699      	movge	r9, r3
 801600e:	f1b9 0f00 	cmp.w	r9, #0
 8016012:	dc35      	bgt.n	8016080 <_printf_float+0x380>
 8016014:	f04f 0800 	mov.w	r8, #0
 8016018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801601c:	f104 0a1a 	add.w	sl, r4, #26
 8016020:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016024:	1a9b      	subs	r3, r3, r2
 8016026:	eba3 0309 	sub.w	r3, r3, r9
 801602a:	4543      	cmp	r3, r8
 801602c:	f77f af75 	ble.w	8015f1a <_printf_float+0x21a>
 8016030:	2301      	movs	r3, #1
 8016032:	4652      	mov	r2, sl
 8016034:	4631      	mov	r1, r6
 8016036:	4628      	mov	r0, r5
 8016038:	47b8      	blx	r7
 801603a:	3001      	adds	r0, #1
 801603c:	f43f aeae 	beq.w	8015d9c <_printf_float+0x9c>
 8016040:	f108 0801 	add.w	r8, r8, #1
 8016044:	e7ec      	b.n	8016020 <_printf_float+0x320>
 8016046:	4613      	mov	r3, r2
 8016048:	4631      	mov	r1, r6
 801604a:	4642      	mov	r2, r8
 801604c:	4628      	mov	r0, r5
 801604e:	47b8      	blx	r7
 8016050:	3001      	adds	r0, #1
 8016052:	d1bf      	bne.n	8015fd4 <_printf_float+0x2d4>
 8016054:	e6a2      	b.n	8015d9c <_printf_float+0x9c>
 8016056:	2301      	movs	r3, #1
 8016058:	4631      	mov	r1, r6
 801605a:	4628      	mov	r0, r5
 801605c:	9204      	str	r2, [sp, #16]
 801605e:	47b8      	blx	r7
 8016060:	3001      	adds	r0, #1
 8016062:	f43f ae9b 	beq.w	8015d9c <_printf_float+0x9c>
 8016066:	9b05      	ldr	r3, [sp, #20]
 8016068:	9a04      	ldr	r2, [sp, #16]
 801606a:	3301      	adds	r3, #1
 801606c:	9305      	str	r3, [sp, #20]
 801606e:	e7b7      	b.n	8015fe0 <_printf_float+0x2e0>
 8016070:	4653      	mov	r3, sl
 8016072:	465a      	mov	r2, fp
 8016074:	4631      	mov	r1, r6
 8016076:	4628      	mov	r0, r5
 8016078:	47b8      	blx	r7
 801607a:	3001      	adds	r0, #1
 801607c:	d1be      	bne.n	8015ffc <_printf_float+0x2fc>
 801607e:	e68d      	b.n	8015d9c <_printf_float+0x9c>
 8016080:	9a04      	ldr	r2, [sp, #16]
 8016082:	464b      	mov	r3, r9
 8016084:	4442      	add	r2, r8
 8016086:	4631      	mov	r1, r6
 8016088:	4628      	mov	r0, r5
 801608a:	47b8      	blx	r7
 801608c:	3001      	adds	r0, #1
 801608e:	d1c1      	bne.n	8016014 <_printf_float+0x314>
 8016090:	e684      	b.n	8015d9c <_printf_float+0x9c>
 8016092:	9a08      	ldr	r2, [sp, #32]
 8016094:	2a01      	cmp	r2, #1
 8016096:	dc01      	bgt.n	801609c <_printf_float+0x39c>
 8016098:	07db      	lsls	r3, r3, #31
 801609a:	d537      	bpl.n	801610c <_printf_float+0x40c>
 801609c:	2301      	movs	r3, #1
 801609e:	4642      	mov	r2, r8
 80160a0:	4631      	mov	r1, r6
 80160a2:	4628      	mov	r0, r5
 80160a4:	47b8      	blx	r7
 80160a6:	3001      	adds	r0, #1
 80160a8:	f43f ae78 	beq.w	8015d9c <_printf_float+0x9c>
 80160ac:	4653      	mov	r3, sl
 80160ae:	465a      	mov	r2, fp
 80160b0:	4631      	mov	r1, r6
 80160b2:	4628      	mov	r0, r5
 80160b4:	47b8      	blx	r7
 80160b6:	3001      	adds	r0, #1
 80160b8:	f43f ae70 	beq.w	8015d9c <_printf_float+0x9c>
 80160bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80160c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80160c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c8:	d01b      	beq.n	8016102 <_printf_float+0x402>
 80160ca:	9b08      	ldr	r3, [sp, #32]
 80160cc:	f108 0201 	add.w	r2, r8, #1
 80160d0:	3b01      	subs	r3, #1
 80160d2:	4631      	mov	r1, r6
 80160d4:	4628      	mov	r0, r5
 80160d6:	47b8      	blx	r7
 80160d8:	3001      	adds	r0, #1
 80160da:	d10e      	bne.n	80160fa <_printf_float+0x3fa>
 80160dc:	e65e      	b.n	8015d9c <_printf_float+0x9c>
 80160de:	2301      	movs	r3, #1
 80160e0:	464a      	mov	r2, r9
 80160e2:	4631      	mov	r1, r6
 80160e4:	4628      	mov	r0, r5
 80160e6:	47b8      	blx	r7
 80160e8:	3001      	adds	r0, #1
 80160ea:	f43f ae57 	beq.w	8015d9c <_printf_float+0x9c>
 80160ee:	f108 0801 	add.w	r8, r8, #1
 80160f2:	9b08      	ldr	r3, [sp, #32]
 80160f4:	3b01      	subs	r3, #1
 80160f6:	4543      	cmp	r3, r8
 80160f8:	dcf1      	bgt.n	80160de <_printf_float+0x3de>
 80160fa:	9b04      	ldr	r3, [sp, #16]
 80160fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016100:	e6db      	b.n	8015eba <_printf_float+0x1ba>
 8016102:	f04f 0800 	mov.w	r8, #0
 8016106:	f104 091a 	add.w	r9, r4, #26
 801610a:	e7f2      	b.n	80160f2 <_printf_float+0x3f2>
 801610c:	2301      	movs	r3, #1
 801610e:	4642      	mov	r2, r8
 8016110:	e7df      	b.n	80160d2 <_printf_float+0x3d2>
 8016112:	2301      	movs	r3, #1
 8016114:	464a      	mov	r2, r9
 8016116:	4631      	mov	r1, r6
 8016118:	4628      	mov	r0, r5
 801611a:	47b8      	blx	r7
 801611c:	3001      	adds	r0, #1
 801611e:	f43f ae3d 	beq.w	8015d9c <_printf_float+0x9c>
 8016122:	f108 0801 	add.w	r8, r8, #1
 8016126:	68e3      	ldr	r3, [r4, #12]
 8016128:	9909      	ldr	r1, [sp, #36]	; 0x24
 801612a:	1a5b      	subs	r3, r3, r1
 801612c:	4543      	cmp	r3, r8
 801612e:	dcf0      	bgt.n	8016112 <_printf_float+0x412>
 8016130:	e6f7      	b.n	8015f22 <_printf_float+0x222>
 8016132:	f04f 0800 	mov.w	r8, #0
 8016136:	f104 0919 	add.w	r9, r4, #25
 801613a:	e7f4      	b.n	8016126 <_printf_float+0x426>

0801613c <_printf_common>:
 801613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016140:	4616      	mov	r6, r2
 8016142:	4699      	mov	r9, r3
 8016144:	688a      	ldr	r2, [r1, #8]
 8016146:	690b      	ldr	r3, [r1, #16]
 8016148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801614c:	4293      	cmp	r3, r2
 801614e:	bfb8      	it	lt
 8016150:	4613      	movlt	r3, r2
 8016152:	6033      	str	r3, [r6, #0]
 8016154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016158:	4607      	mov	r7, r0
 801615a:	460c      	mov	r4, r1
 801615c:	b10a      	cbz	r2, 8016162 <_printf_common+0x26>
 801615e:	3301      	adds	r3, #1
 8016160:	6033      	str	r3, [r6, #0]
 8016162:	6823      	ldr	r3, [r4, #0]
 8016164:	0699      	lsls	r1, r3, #26
 8016166:	bf42      	ittt	mi
 8016168:	6833      	ldrmi	r3, [r6, #0]
 801616a:	3302      	addmi	r3, #2
 801616c:	6033      	strmi	r3, [r6, #0]
 801616e:	6825      	ldr	r5, [r4, #0]
 8016170:	f015 0506 	ands.w	r5, r5, #6
 8016174:	d106      	bne.n	8016184 <_printf_common+0x48>
 8016176:	f104 0a19 	add.w	sl, r4, #25
 801617a:	68e3      	ldr	r3, [r4, #12]
 801617c:	6832      	ldr	r2, [r6, #0]
 801617e:	1a9b      	subs	r3, r3, r2
 8016180:	42ab      	cmp	r3, r5
 8016182:	dc26      	bgt.n	80161d2 <_printf_common+0x96>
 8016184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016188:	1e13      	subs	r3, r2, #0
 801618a:	6822      	ldr	r2, [r4, #0]
 801618c:	bf18      	it	ne
 801618e:	2301      	movne	r3, #1
 8016190:	0692      	lsls	r2, r2, #26
 8016192:	d42b      	bmi.n	80161ec <_printf_common+0xb0>
 8016194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016198:	4649      	mov	r1, r9
 801619a:	4638      	mov	r0, r7
 801619c:	47c0      	blx	r8
 801619e:	3001      	adds	r0, #1
 80161a0:	d01e      	beq.n	80161e0 <_printf_common+0xa4>
 80161a2:	6823      	ldr	r3, [r4, #0]
 80161a4:	68e5      	ldr	r5, [r4, #12]
 80161a6:	6832      	ldr	r2, [r6, #0]
 80161a8:	f003 0306 	and.w	r3, r3, #6
 80161ac:	2b04      	cmp	r3, #4
 80161ae:	bf08      	it	eq
 80161b0:	1aad      	subeq	r5, r5, r2
 80161b2:	68a3      	ldr	r3, [r4, #8]
 80161b4:	6922      	ldr	r2, [r4, #16]
 80161b6:	bf0c      	ite	eq
 80161b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80161bc:	2500      	movne	r5, #0
 80161be:	4293      	cmp	r3, r2
 80161c0:	bfc4      	itt	gt
 80161c2:	1a9b      	subgt	r3, r3, r2
 80161c4:	18ed      	addgt	r5, r5, r3
 80161c6:	2600      	movs	r6, #0
 80161c8:	341a      	adds	r4, #26
 80161ca:	42b5      	cmp	r5, r6
 80161cc:	d11a      	bne.n	8016204 <_printf_common+0xc8>
 80161ce:	2000      	movs	r0, #0
 80161d0:	e008      	b.n	80161e4 <_printf_common+0xa8>
 80161d2:	2301      	movs	r3, #1
 80161d4:	4652      	mov	r2, sl
 80161d6:	4649      	mov	r1, r9
 80161d8:	4638      	mov	r0, r7
 80161da:	47c0      	blx	r8
 80161dc:	3001      	adds	r0, #1
 80161de:	d103      	bne.n	80161e8 <_printf_common+0xac>
 80161e0:	f04f 30ff 	mov.w	r0, #4294967295
 80161e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e8:	3501      	adds	r5, #1
 80161ea:	e7c6      	b.n	801617a <_printf_common+0x3e>
 80161ec:	18e1      	adds	r1, r4, r3
 80161ee:	1c5a      	adds	r2, r3, #1
 80161f0:	2030      	movs	r0, #48	; 0x30
 80161f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80161f6:	4422      	add	r2, r4
 80161f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80161fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016200:	3302      	adds	r3, #2
 8016202:	e7c7      	b.n	8016194 <_printf_common+0x58>
 8016204:	2301      	movs	r3, #1
 8016206:	4622      	mov	r2, r4
 8016208:	4649      	mov	r1, r9
 801620a:	4638      	mov	r0, r7
 801620c:	47c0      	blx	r8
 801620e:	3001      	adds	r0, #1
 8016210:	d0e6      	beq.n	80161e0 <_printf_common+0xa4>
 8016212:	3601      	adds	r6, #1
 8016214:	e7d9      	b.n	80161ca <_printf_common+0x8e>
	...

08016218 <_printf_i>:
 8016218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801621c:	460c      	mov	r4, r1
 801621e:	4691      	mov	r9, r2
 8016220:	7e27      	ldrb	r7, [r4, #24]
 8016222:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016224:	2f78      	cmp	r7, #120	; 0x78
 8016226:	4680      	mov	r8, r0
 8016228:	469a      	mov	sl, r3
 801622a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801622e:	d807      	bhi.n	8016240 <_printf_i+0x28>
 8016230:	2f62      	cmp	r7, #98	; 0x62
 8016232:	d80a      	bhi.n	801624a <_printf_i+0x32>
 8016234:	2f00      	cmp	r7, #0
 8016236:	f000 80d8 	beq.w	80163ea <_printf_i+0x1d2>
 801623a:	2f58      	cmp	r7, #88	; 0x58
 801623c:	f000 80a3 	beq.w	8016386 <_printf_i+0x16e>
 8016240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016248:	e03a      	b.n	80162c0 <_printf_i+0xa8>
 801624a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801624e:	2b15      	cmp	r3, #21
 8016250:	d8f6      	bhi.n	8016240 <_printf_i+0x28>
 8016252:	a001      	add	r0, pc, #4	; (adr r0, 8016258 <_printf_i+0x40>)
 8016254:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016258:	080162b1 	.word	0x080162b1
 801625c:	080162c5 	.word	0x080162c5
 8016260:	08016241 	.word	0x08016241
 8016264:	08016241 	.word	0x08016241
 8016268:	08016241 	.word	0x08016241
 801626c:	08016241 	.word	0x08016241
 8016270:	080162c5 	.word	0x080162c5
 8016274:	08016241 	.word	0x08016241
 8016278:	08016241 	.word	0x08016241
 801627c:	08016241 	.word	0x08016241
 8016280:	08016241 	.word	0x08016241
 8016284:	080163d1 	.word	0x080163d1
 8016288:	080162f5 	.word	0x080162f5
 801628c:	080163b3 	.word	0x080163b3
 8016290:	08016241 	.word	0x08016241
 8016294:	08016241 	.word	0x08016241
 8016298:	080163f3 	.word	0x080163f3
 801629c:	08016241 	.word	0x08016241
 80162a0:	080162f5 	.word	0x080162f5
 80162a4:	08016241 	.word	0x08016241
 80162a8:	08016241 	.word	0x08016241
 80162ac:	080163bb 	.word	0x080163bb
 80162b0:	680b      	ldr	r3, [r1, #0]
 80162b2:	1d1a      	adds	r2, r3, #4
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	600a      	str	r2, [r1, #0]
 80162b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80162bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162c0:	2301      	movs	r3, #1
 80162c2:	e0a3      	b.n	801640c <_printf_i+0x1f4>
 80162c4:	6825      	ldr	r5, [r4, #0]
 80162c6:	6808      	ldr	r0, [r1, #0]
 80162c8:	062e      	lsls	r6, r5, #24
 80162ca:	f100 0304 	add.w	r3, r0, #4
 80162ce:	d50a      	bpl.n	80162e6 <_printf_i+0xce>
 80162d0:	6805      	ldr	r5, [r0, #0]
 80162d2:	600b      	str	r3, [r1, #0]
 80162d4:	2d00      	cmp	r5, #0
 80162d6:	da03      	bge.n	80162e0 <_printf_i+0xc8>
 80162d8:	232d      	movs	r3, #45	; 0x2d
 80162da:	426d      	negs	r5, r5
 80162dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162e0:	485e      	ldr	r0, [pc, #376]	; (801645c <_printf_i+0x244>)
 80162e2:	230a      	movs	r3, #10
 80162e4:	e019      	b.n	801631a <_printf_i+0x102>
 80162e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80162ea:	6805      	ldr	r5, [r0, #0]
 80162ec:	600b      	str	r3, [r1, #0]
 80162ee:	bf18      	it	ne
 80162f0:	b22d      	sxthne	r5, r5
 80162f2:	e7ef      	b.n	80162d4 <_printf_i+0xbc>
 80162f4:	680b      	ldr	r3, [r1, #0]
 80162f6:	6825      	ldr	r5, [r4, #0]
 80162f8:	1d18      	adds	r0, r3, #4
 80162fa:	6008      	str	r0, [r1, #0]
 80162fc:	0628      	lsls	r0, r5, #24
 80162fe:	d501      	bpl.n	8016304 <_printf_i+0xec>
 8016300:	681d      	ldr	r5, [r3, #0]
 8016302:	e002      	b.n	801630a <_printf_i+0xf2>
 8016304:	0669      	lsls	r1, r5, #25
 8016306:	d5fb      	bpl.n	8016300 <_printf_i+0xe8>
 8016308:	881d      	ldrh	r5, [r3, #0]
 801630a:	4854      	ldr	r0, [pc, #336]	; (801645c <_printf_i+0x244>)
 801630c:	2f6f      	cmp	r7, #111	; 0x6f
 801630e:	bf0c      	ite	eq
 8016310:	2308      	moveq	r3, #8
 8016312:	230a      	movne	r3, #10
 8016314:	2100      	movs	r1, #0
 8016316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801631a:	6866      	ldr	r6, [r4, #4]
 801631c:	60a6      	str	r6, [r4, #8]
 801631e:	2e00      	cmp	r6, #0
 8016320:	bfa2      	ittt	ge
 8016322:	6821      	ldrge	r1, [r4, #0]
 8016324:	f021 0104 	bicge.w	r1, r1, #4
 8016328:	6021      	strge	r1, [r4, #0]
 801632a:	b90d      	cbnz	r5, 8016330 <_printf_i+0x118>
 801632c:	2e00      	cmp	r6, #0
 801632e:	d04d      	beq.n	80163cc <_printf_i+0x1b4>
 8016330:	4616      	mov	r6, r2
 8016332:	fbb5 f1f3 	udiv	r1, r5, r3
 8016336:	fb03 5711 	mls	r7, r3, r1, r5
 801633a:	5dc7      	ldrb	r7, [r0, r7]
 801633c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016340:	462f      	mov	r7, r5
 8016342:	42bb      	cmp	r3, r7
 8016344:	460d      	mov	r5, r1
 8016346:	d9f4      	bls.n	8016332 <_printf_i+0x11a>
 8016348:	2b08      	cmp	r3, #8
 801634a:	d10b      	bne.n	8016364 <_printf_i+0x14c>
 801634c:	6823      	ldr	r3, [r4, #0]
 801634e:	07df      	lsls	r7, r3, #31
 8016350:	d508      	bpl.n	8016364 <_printf_i+0x14c>
 8016352:	6923      	ldr	r3, [r4, #16]
 8016354:	6861      	ldr	r1, [r4, #4]
 8016356:	4299      	cmp	r1, r3
 8016358:	bfde      	ittt	le
 801635a:	2330      	movle	r3, #48	; 0x30
 801635c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016360:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016364:	1b92      	subs	r2, r2, r6
 8016366:	6122      	str	r2, [r4, #16]
 8016368:	f8cd a000 	str.w	sl, [sp]
 801636c:	464b      	mov	r3, r9
 801636e:	aa03      	add	r2, sp, #12
 8016370:	4621      	mov	r1, r4
 8016372:	4640      	mov	r0, r8
 8016374:	f7ff fee2 	bl	801613c <_printf_common>
 8016378:	3001      	adds	r0, #1
 801637a:	d14c      	bne.n	8016416 <_printf_i+0x1fe>
 801637c:	f04f 30ff 	mov.w	r0, #4294967295
 8016380:	b004      	add	sp, #16
 8016382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016386:	4835      	ldr	r0, [pc, #212]	; (801645c <_printf_i+0x244>)
 8016388:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801638c:	6823      	ldr	r3, [r4, #0]
 801638e:	680e      	ldr	r6, [r1, #0]
 8016390:	061f      	lsls	r7, r3, #24
 8016392:	f856 5b04 	ldr.w	r5, [r6], #4
 8016396:	600e      	str	r6, [r1, #0]
 8016398:	d514      	bpl.n	80163c4 <_printf_i+0x1ac>
 801639a:	07d9      	lsls	r1, r3, #31
 801639c:	bf44      	itt	mi
 801639e:	f043 0320 	orrmi.w	r3, r3, #32
 80163a2:	6023      	strmi	r3, [r4, #0]
 80163a4:	b91d      	cbnz	r5, 80163ae <_printf_i+0x196>
 80163a6:	6823      	ldr	r3, [r4, #0]
 80163a8:	f023 0320 	bic.w	r3, r3, #32
 80163ac:	6023      	str	r3, [r4, #0]
 80163ae:	2310      	movs	r3, #16
 80163b0:	e7b0      	b.n	8016314 <_printf_i+0xfc>
 80163b2:	6823      	ldr	r3, [r4, #0]
 80163b4:	f043 0320 	orr.w	r3, r3, #32
 80163b8:	6023      	str	r3, [r4, #0]
 80163ba:	2378      	movs	r3, #120	; 0x78
 80163bc:	4828      	ldr	r0, [pc, #160]	; (8016460 <_printf_i+0x248>)
 80163be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80163c2:	e7e3      	b.n	801638c <_printf_i+0x174>
 80163c4:	065e      	lsls	r6, r3, #25
 80163c6:	bf48      	it	mi
 80163c8:	b2ad      	uxthmi	r5, r5
 80163ca:	e7e6      	b.n	801639a <_printf_i+0x182>
 80163cc:	4616      	mov	r6, r2
 80163ce:	e7bb      	b.n	8016348 <_printf_i+0x130>
 80163d0:	680b      	ldr	r3, [r1, #0]
 80163d2:	6826      	ldr	r6, [r4, #0]
 80163d4:	6960      	ldr	r0, [r4, #20]
 80163d6:	1d1d      	adds	r5, r3, #4
 80163d8:	600d      	str	r5, [r1, #0]
 80163da:	0635      	lsls	r5, r6, #24
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	d501      	bpl.n	80163e4 <_printf_i+0x1cc>
 80163e0:	6018      	str	r0, [r3, #0]
 80163e2:	e002      	b.n	80163ea <_printf_i+0x1d2>
 80163e4:	0671      	lsls	r1, r6, #25
 80163e6:	d5fb      	bpl.n	80163e0 <_printf_i+0x1c8>
 80163e8:	8018      	strh	r0, [r3, #0]
 80163ea:	2300      	movs	r3, #0
 80163ec:	6123      	str	r3, [r4, #16]
 80163ee:	4616      	mov	r6, r2
 80163f0:	e7ba      	b.n	8016368 <_printf_i+0x150>
 80163f2:	680b      	ldr	r3, [r1, #0]
 80163f4:	1d1a      	adds	r2, r3, #4
 80163f6:	600a      	str	r2, [r1, #0]
 80163f8:	681e      	ldr	r6, [r3, #0]
 80163fa:	6862      	ldr	r2, [r4, #4]
 80163fc:	2100      	movs	r1, #0
 80163fe:	4630      	mov	r0, r6
 8016400:	f7e9 ff26 	bl	8000250 <memchr>
 8016404:	b108      	cbz	r0, 801640a <_printf_i+0x1f2>
 8016406:	1b80      	subs	r0, r0, r6
 8016408:	6060      	str	r0, [r4, #4]
 801640a:	6863      	ldr	r3, [r4, #4]
 801640c:	6123      	str	r3, [r4, #16]
 801640e:	2300      	movs	r3, #0
 8016410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016414:	e7a8      	b.n	8016368 <_printf_i+0x150>
 8016416:	6923      	ldr	r3, [r4, #16]
 8016418:	4632      	mov	r2, r6
 801641a:	4649      	mov	r1, r9
 801641c:	4640      	mov	r0, r8
 801641e:	47d0      	blx	sl
 8016420:	3001      	adds	r0, #1
 8016422:	d0ab      	beq.n	801637c <_printf_i+0x164>
 8016424:	6823      	ldr	r3, [r4, #0]
 8016426:	079b      	lsls	r3, r3, #30
 8016428:	d413      	bmi.n	8016452 <_printf_i+0x23a>
 801642a:	68e0      	ldr	r0, [r4, #12]
 801642c:	9b03      	ldr	r3, [sp, #12]
 801642e:	4298      	cmp	r0, r3
 8016430:	bfb8      	it	lt
 8016432:	4618      	movlt	r0, r3
 8016434:	e7a4      	b.n	8016380 <_printf_i+0x168>
 8016436:	2301      	movs	r3, #1
 8016438:	4632      	mov	r2, r6
 801643a:	4649      	mov	r1, r9
 801643c:	4640      	mov	r0, r8
 801643e:	47d0      	blx	sl
 8016440:	3001      	adds	r0, #1
 8016442:	d09b      	beq.n	801637c <_printf_i+0x164>
 8016444:	3501      	adds	r5, #1
 8016446:	68e3      	ldr	r3, [r4, #12]
 8016448:	9903      	ldr	r1, [sp, #12]
 801644a:	1a5b      	subs	r3, r3, r1
 801644c:	42ab      	cmp	r3, r5
 801644e:	dcf2      	bgt.n	8016436 <_printf_i+0x21e>
 8016450:	e7eb      	b.n	801642a <_printf_i+0x212>
 8016452:	2500      	movs	r5, #0
 8016454:	f104 0619 	add.w	r6, r4, #25
 8016458:	e7f5      	b.n	8016446 <_printf_i+0x22e>
 801645a:	bf00      	nop
 801645c:	0801c64e 	.word	0x0801c64e
 8016460:	0801c65f 	.word	0x0801c65f

08016464 <_scanf_float>:
 8016464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016468:	b087      	sub	sp, #28
 801646a:	4617      	mov	r7, r2
 801646c:	9303      	str	r3, [sp, #12]
 801646e:	688b      	ldr	r3, [r1, #8]
 8016470:	1e5a      	subs	r2, r3, #1
 8016472:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016476:	bf83      	ittte	hi
 8016478:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801647c:	195b      	addhi	r3, r3, r5
 801647e:	9302      	strhi	r3, [sp, #8]
 8016480:	2300      	movls	r3, #0
 8016482:	bf86      	itte	hi
 8016484:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016488:	608b      	strhi	r3, [r1, #8]
 801648a:	9302      	strls	r3, [sp, #8]
 801648c:	680b      	ldr	r3, [r1, #0]
 801648e:	468b      	mov	fp, r1
 8016490:	2500      	movs	r5, #0
 8016492:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016496:	f84b 3b1c 	str.w	r3, [fp], #28
 801649a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801649e:	4680      	mov	r8, r0
 80164a0:	460c      	mov	r4, r1
 80164a2:	465e      	mov	r6, fp
 80164a4:	46aa      	mov	sl, r5
 80164a6:	46a9      	mov	r9, r5
 80164a8:	9501      	str	r5, [sp, #4]
 80164aa:	68a2      	ldr	r2, [r4, #8]
 80164ac:	b152      	cbz	r2, 80164c4 <_scanf_float+0x60>
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	2b4e      	cmp	r3, #78	; 0x4e
 80164b4:	d864      	bhi.n	8016580 <_scanf_float+0x11c>
 80164b6:	2b40      	cmp	r3, #64	; 0x40
 80164b8:	d83c      	bhi.n	8016534 <_scanf_float+0xd0>
 80164ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80164be:	b2c8      	uxtb	r0, r1
 80164c0:	280e      	cmp	r0, #14
 80164c2:	d93a      	bls.n	801653a <_scanf_float+0xd6>
 80164c4:	f1b9 0f00 	cmp.w	r9, #0
 80164c8:	d003      	beq.n	80164d2 <_scanf_float+0x6e>
 80164ca:	6823      	ldr	r3, [r4, #0]
 80164cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164d0:	6023      	str	r3, [r4, #0]
 80164d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80164d6:	f1ba 0f01 	cmp.w	sl, #1
 80164da:	f200 8113 	bhi.w	8016704 <_scanf_float+0x2a0>
 80164de:	455e      	cmp	r6, fp
 80164e0:	f200 8105 	bhi.w	80166ee <_scanf_float+0x28a>
 80164e4:	2501      	movs	r5, #1
 80164e6:	4628      	mov	r0, r5
 80164e8:	b007      	add	sp, #28
 80164ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80164f2:	2a0d      	cmp	r2, #13
 80164f4:	d8e6      	bhi.n	80164c4 <_scanf_float+0x60>
 80164f6:	a101      	add	r1, pc, #4	; (adr r1, 80164fc <_scanf_float+0x98>)
 80164f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80164fc:	0801663b 	.word	0x0801663b
 8016500:	080164c5 	.word	0x080164c5
 8016504:	080164c5 	.word	0x080164c5
 8016508:	080164c5 	.word	0x080164c5
 801650c:	0801669b 	.word	0x0801669b
 8016510:	08016673 	.word	0x08016673
 8016514:	080164c5 	.word	0x080164c5
 8016518:	080164c5 	.word	0x080164c5
 801651c:	08016649 	.word	0x08016649
 8016520:	080164c5 	.word	0x080164c5
 8016524:	080164c5 	.word	0x080164c5
 8016528:	080164c5 	.word	0x080164c5
 801652c:	080164c5 	.word	0x080164c5
 8016530:	08016601 	.word	0x08016601
 8016534:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016538:	e7db      	b.n	80164f2 <_scanf_float+0x8e>
 801653a:	290e      	cmp	r1, #14
 801653c:	d8c2      	bhi.n	80164c4 <_scanf_float+0x60>
 801653e:	a001      	add	r0, pc, #4	; (adr r0, 8016544 <_scanf_float+0xe0>)
 8016540:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016544:	080165f3 	.word	0x080165f3
 8016548:	080164c5 	.word	0x080164c5
 801654c:	080165f3 	.word	0x080165f3
 8016550:	08016687 	.word	0x08016687
 8016554:	080164c5 	.word	0x080164c5
 8016558:	080165a1 	.word	0x080165a1
 801655c:	080165dd 	.word	0x080165dd
 8016560:	080165dd 	.word	0x080165dd
 8016564:	080165dd 	.word	0x080165dd
 8016568:	080165dd 	.word	0x080165dd
 801656c:	080165dd 	.word	0x080165dd
 8016570:	080165dd 	.word	0x080165dd
 8016574:	080165dd 	.word	0x080165dd
 8016578:	080165dd 	.word	0x080165dd
 801657c:	080165dd 	.word	0x080165dd
 8016580:	2b6e      	cmp	r3, #110	; 0x6e
 8016582:	d809      	bhi.n	8016598 <_scanf_float+0x134>
 8016584:	2b60      	cmp	r3, #96	; 0x60
 8016586:	d8b2      	bhi.n	80164ee <_scanf_float+0x8a>
 8016588:	2b54      	cmp	r3, #84	; 0x54
 801658a:	d077      	beq.n	801667c <_scanf_float+0x218>
 801658c:	2b59      	cmp	r3, #89	; 0x59
 801658e:	d199      	bne.n	80164c4 <_scanf_float+0x60>
 8016590:	2d07      	cmp	r5, #7
 8016592:	d197      	bne.n	80164c4 <_scanf_float+0x60>
 8016594:	2508      	movs	r5, #8
 8016596:	e029      	b.n	80165ec <_scanf_float+0x188>
 8016598:	2b74      	cmp	r3, #116	; 0x74
 801659a:	d06f      	beq.n	801667c <_scanf_float+0x218>
 801659c:	2b79      	cmp	r3, #121	; 0x79
 801659e:	e7f6      	b.n	801658e <_scanf_float+0x12a>
 80165a0:	6821      	ldr	r1, [r4, #0]
 80165a2:	05c8      	lsls	r0, r1, #23
 80165a4:	d51a      	bpl.n	80165dc <_scanf_float+0x178>
 80165a6:	9b02      	ldr	r3, [sp, #8]
 80165a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80165ac:	6021      	str	r1, [r4, #0]
 80165ae:	f109 0901 	add.w	r9, r9, #1
 80165b2:	b11b      	cbz	r3, 80165bc <_scanf_float+0x158>
 80165b4:	3b01      	subs	r3, #1
 80165b6:	3201      	adds	r2, #1
 80165b8:	9302      	str	r3, [sp, #8]
 80165ba:	60a2      	str	r2, [r4, #8]
 80165bc:	68a3      	ldr	r3, [r4, #8]
 80165be:	3b01      	subs	r3, #1
 80165c0:	60a3      	str	r3, [r4, #8]
 80165c2:	6923      	ldr	r3, [r4, #16]
 80165c4:	3301      	adds	r3, #1
 80165c6:	6123      	str	r3, [r4, #16]
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	3b01      	subs	r3, #1
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	607b      	str	r3, [r7, #4]
 80165d0:	f340 8084 	ble.w	80166dc <_scanf_float+0x278>
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	3301      	adds	r3, #1
 80165d8:	603b      	str	r3, [r7, #0]
 80165da:	e766      	b.n	80164aa <_scanf_float+0x46>
 80165dc:	eb1a 0f05 	cmn.w	sl, r5
 80165e0:	f47f af70 	bne.w	80164c4 <_scanf_float+0x60>
 80165e4:	6822      	ldr	r2, [r4, #0]
 80165e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80165ea:	6022      	str	r2, [r4, #0]
 80165ec:	f806 3b01 	strb.w	r3, [r6], #1
 80165f0:	e7e4      	b.n	80165bc <_scanf_float+0x158>
 80165f2:	6822      	ldr	r2, [r4, #0]
 80165f4:	0610      	lsls	r0, r2, #24
 80165f6:	f57f af65 	bpl.w	80164c4 <_scanf_float+0x60>
 80165fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80165fe:	e7f4      	b.n	80165ea <_scanf_float+0x186>
 8016600:	f1ba 0f00 	cmp.w	sl, #0
 8016604:	d10e      	bne.n	8016624 <_scanf_float+0x1c0>
 8016606:	f1b9 0f00 	cmp.w	r9, #0
 801660a:	d10e      	bne.n	801662a <_scanf_float+0x1c6>
 801660c:	6822      	ldr	r2, [r4, #0]
 801660e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016612:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016616:	d108      	bne.n	801662a <_scanf_float+0x1c6>
 8016618:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801661c:	6022      	str	r2, [r4, #0]
 801661e:	f04f 0a01 	mov.w	sl, #1
 8016622:	e7e3      	b.n	80165ec <_scanf_float+0x188>
 8016624:	f1ba 0f02 	cmp.w	sl, #2
 8016628:	d055      	beq.n	80166d6 <_scanf_float+0x272>
 801662a:	2d01      	cmp	r5, #1
 801662c:	d002      	beq.n	8016634 <_scanf_float+0x1d0>
 801662e:	2d04      	cmp	r5, #4
 8016630:	f47f af48 	bne.w	80164c4 <_scanf_float+0x60>
 8016634:	3501      	adds	r5, #1
 8016636:	b2ed      	uxtb	r5, r5
 8016638:	e7d8      	b.n	80165ec <_scanf_float+0x188>
 801663a:	f1ba 0f01 	cmp.w	sl, #1
 801663e:	f47f af41 	bne.w	80164c4 <_scanf_float+0x60>
 8016642:	f04f 0a02 	mov.w	sl, #2
 8016646:	e7d1      	b.n	80165ec <_scanf_float+0x188>
 8016648:	b97d      	cbnz	r5, 801666a <_scanf_float+0x206>
 801664a:	f1b9 0f00 	cmp.w	r9, #0
 801664e:	f47f af3c 	bne.w	80164ca <_scanf_float+0x66>
 8016652:	6822      	ldr	r2, [r4, #0]
 8016654:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016658:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801665c:	f47f af39 	bne.w	80164d2 <_scanf_float+0x6e>
 8016660:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016664:	6022      	str	r2, [r4, #0]
 8016666:	2501      	movs	r5, #1
 8016668:	e7c0      	b.n	80165ec <_scanf_float+0x188>
 801666a:	2d03      	cmp	r5, #3
 801666c:	d0e2      	beq.n	8016634 <_scanf_float+0x1d0>
 801666e:	2d05      	cmp	r5, #5
 8016670:	e7de      	b.n	8016630 <_scanf_float+0x1cc>
 8016672:	2d02      	cmp	r5, #2
 8016674:	f47f af26 	bne.w	80164c4 <_scanf_float+0x60>
 8016678:	2503      	movs	r5, #3
 801667a:	e7b7      	b.n	80165ec <_scanf_float+0x188>
 801667c:	2d06      	cmp	r5, #6
 801667e:	f47f af21 	bne.w	80164c4 <_scanf_float+0x60>
 8016682:	2507      	movs	r5, #7
 8016684:	e7b2      	b.n	80165ec <_scanf_float+0x188>
 8016686:	6822      	ldr	r2, [r4, #0]
 8016688:	0591      	lsls	r1, r2, #22
 801668a:	f57f af1b 	bpl.w	80164c4 <_scanf_float+0x60>
 801668e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016692:	6022      	str	r2, [r4, #0]
 8016694:	f8cd 9004 	str.w	r9, [sp, #4]
 8016698:	e7a8      	b.n	80165ec <_scanf_float+0x188>
 801669a:	6822      	ldr	r2, [r4, #0]
 801669c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80166a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80166a4:	d006      	beq.n	80166b4 <_scanf_float+0x250>
 80166a6:	0550      	lsls	r0, r2, #21
 80166a8:	f57f af0c 	bpl.w	80164c4 <_scanf_float+0x60>
 80166ac:	f1b9 0f00 	cmp.w	r9, #0
 80166b0:	f43f af0f 	beq.w	80164d2 <_scanf_float+0x6e>
 80166b4:	0591      	lsls	r1, r2, #22
 80166b6:	bf58      	it	pl
 80166b8:	9901      	ldrpl	r1, [sp, #4]
 80166ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80166be:	bf58      	it	pl
 80166c0:	eba9 0101 	subpl.w	r1, r9, r1
 80166c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80166c8:	bf58      	it	pl
 80166ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80166ce:	6022      	str	r2, [r4, #0]
 80166d0:	f04f 0900 	mov.w	r9, #0
 80166d4:	e78a      	b.n	80165ec <_scanf_float+0x188>
 80166d6:	f04f 0a03 	mov.w	sl, #3
 80166da:	e787      	b.n	80165ec <_scanf_float+0x188>
 80166dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166e0:	4639      	mov	r1, r7
 80166e2:	4640      	mov	r0, r8
 80166e4:	4798      	blx	r3
 80166e6:	2800      	cmp	r0, #0
 80166e8:	f43f aedf 	beq.w	80164aa <_scanf_float+0x46>
 80166ec:	e6ea      	b.n	80164c4 <_scanf_float+0x60>
 80166ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80166f6:	463a      	mov	r2, r7
 80166f8:	4640      	mov	r0, r8
 80166fa:	4798      	blx	r3
 80166fc:	6923      	ldr	r3, [r4, #16]
 80166fe:	3b01      	subs	r3, #1
 8016700:	6123      	str	r3, [r4, #16]
 8016702:	e6ec      	b.n	80164de <_scanf_float+0x7a>
 8016704:	1e6b      	subs	r3, r5, #1
 8016706:	2b06      	cmp	r3, #6
 8016708:	d825      	bhi.n	8016756 <_scanf_float+0x2f2>
 801670a:	2d02      	cmp	r5, #2
 801670c:	d836      	bhi.n	801677c <_scanf_float+0x318>
 801670e:	455e      	cmp	r6, fp
 8016710:	f67f aee8 	bls.w	80164e4 <_scanf_float+0x80>
 8016714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016718:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801671c:	463a      	mov	r2, r7
 801671e:	4640      	mov	r0, r8
 8016720:	4798      	blx	r3
 8016722:	6923      	ldr	r3, [r4, #16]
 8016724:	3b01      	subs	r3, #1
 8016726:	6123      	str	r3, [r4, #16]
 8016728:	e7f1      	b.n	801670e <_scanf_float+0x2aa>
 801672a:	9802      	ldr	r0, [sp, #8]
 801672c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016730:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016734:	9002      	str	r0, [sp, #8]
 8016736:	463a      	mov	r2, r7
 8016738:	4640      	mov	r0, r8
 801673a:	4798      	blx	r3
 801673c:	6923      	ldr	r3, [r4, #16]
 801673e:	3b01      	subs	r3, #1
 8016740:	6123      	str	r3, [r4, #16]
 8016742:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016746:	fa5f fa8a 	uxtb.w	sl, sl
 801674a:	f1ba 0f02 	cmp.w	sl, #2
 801674e:	d1ec      	bne.n	801672a <_scanf_float+0x2c6>
 8016750:	3d03      	subs	r5, #3
 8016752:	b2ed      	uxtb	r5, r5
 8016754:	1b76      	subs	r6, r6, r5
 8016756:	6823      	ldr	r3, [r4, #0]
 8016758:	05da      	lsls	r2, r3, #23
 801675a:	d52f      	bpl.n	80167bc <_scanf_float+0x358>
 801675c:	055b      	lsls	r3, r3, #21
 801675e:	d510      	bpl.n	8016782 <_scanf_float+0x31e>
 8016760:	455e      	cmp	r6, fp
 8016762:	f67f aebf 	bls.w	80164e4 <_scanf_float+0x80>
 8016766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801676a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801676e:	463a      	mov	r2, r7
 8016770:	4640      	mov	r0, r8
 8016772:	4798      	blx	r3
 8016774:	6923      	ldr	r3, [r4, #16]
 8016776:	3b01      	subs	r3, #1
 8016778:	6123      	str	r3, [r4, #16]
 801677a:	e7f1      	b.n	8016760 <_scanf_float+0x2fc>
 801677c:	46aa      	mov	sl, r5
 801677e:	9602      	str	r6, [sp, #8]
 8016780:	e7df      	b.n	8016742 <_scanf_float+0x2de>
 8016782:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016786:	6923      	ldr	r3, [r4, #16]
 8016788:	2965      	cmp	r1, #101	; 0x65
 801678a:	f103 33ff 	add.w	r3, r3, #4294967295
 801678e:	f106 35ff 	add.w	r5, r6, #4294967295
 8016792:	6123      	str	r3, [r4, #16]
 8016794:	d00c      	beq.n	80167b0 <_scanf_float+0x34c>
 8016796:	2945      	cmp	r1, #69	; 0x45
 8016798:	d00a      	beq.n	80167b0 <_scanf_float+0x34c>
 801679a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801679e:	463a      	mov	r2, r7
 80167a0:	4640      	mov	r0, r8
 80167a2:	4798      	blx	r3
 80167a4:	6923      	ldr	r3, [r4, #16]
 80167a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80167aa:	3b01      	subs	r3, #1
 80167ac:	1eb5      	subs	r5, r6, #2
 80167ae:	6123      	str	r3, [r4, #16]
 80167b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167b4:	463a      	mov	r2, r7
 80167b6:	4640      	mov	r0, r8
 80167b8:	4798      	blx	r3
 80167ba:	462e      	mov	r6, r5
 80167bc:	6825      	ldr	r5, [r4, #0]
 80167be:	f015 0510 	ands.w	r5, r5, #16
 80167c2:	d14d      	bne.n	8016860 <_scanf_float+0x3fc>
 80167c4:	7035      	strb	r5, [r6, #0]
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80167cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167d0:	d11a      	bne.n	8016808 <_scanf_float+0x3a4>
 80167d2:	9b01      	ldr	r3, [sp, #4]
 80167d4:	454b      	cmp	r3, r9
 80167d6:	eba3 0209 	sub.w	r2, r3, r9
 80167da:	d122      	bne.n	8016822 <_scanf_float+0x3be>
 80167dc:	2200      	movs	r2, #0
 80167de:	4659      	mov	r1, fp
 80167e0:	4640      	mov	r0, r8
 80167e2:	f000 fee7 	bl	80175b4 <_strtod_r>
 80167e6:	9b03      	ldr	r3, [sp, #12]
 80167e8:	6821      	ldr	r1, [r4, #0]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	f011 0f02 	tst.w	r1, #2
 80167f0:	f103 0204 	add.w	r2, r3, #4
 80167f4:	d020      	beq.n	8016838 <_scanf_float+0x3d4>
 80167f6:	9903      	ldr	r1, [sp, #12]
 80167f8:	600a      	str	r2, [r1, #0]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	ed83 0b00 	vstr	d0, [r3]
 8016800:	68e3      	ldr	r3, [r4, #12]
 8016802:	3301      	adds	r3, #1
 8016804:	60e3      	str	r3, [r4, #12]
 8016806:	e66e      	b.n	80164e6 <_scanf_float+0x82>
 8016808:	9b04      	ldr	r3, [sp, #16]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d0e6      	beq.n	80167dc <_scanf_float+0x378>
 801680e:	9905      	ldr	r1, [sp, #20]
 8016810:	230a      	movs	r3, #10
 8016812:	462a      	mov	r2, r5
 8016814:	3101      	adds	r1, #1
 8016816:	4640      	mov	r0, r8
 8016818:	f000 ff56 	bl	80176c8 <_strtol_r>
 801681c:	9b04      	ldr	r3, [sp, #16]
 801681e:	9e05      	ldr	r6, [sp, #20]
 8016820:	1ac2      	subs	r2, r0, r3
 8016822:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016826:	429e      	cmp	r6, r3
 8016828:	bf28      	it	cs
 801682a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801682e:	490d      	ldr	r1, [pc, #52]	; (8016864 <_scanf_float+0x400>)
 8016830:	4630      	mov	r0, r6
 8016832:	f000 f8af 	bl	8016994 <siprintf>
 8016836:	e7d1      	b.n	80167dc <_scanf_float+0x378>
 8016838:	f011 0f04 	tst.w	r1, #4
 801683c:	9903      	ldr	r1, [sp, #12]
 801683e:	600a      	str	r2, [r1, #0]
 8016840:	d1db      	bne.n	80167fa <_scanf_float+0x396>
 8016842:	eeb4 0b40 	vcmp.f64	d0, d0
 8016846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684a:	681e      	ldr	r6, [r3, #0]
 801684c:	d705      	bvc.n	801685a <_scanf_float+0x3f6>
 801684e:	4806      	ldr	r0, [pc, #24]	; (8016868 <_scanf_float+0x404>)
 8016850:	f000 f89a 	bl	8016988 <nanf>
 8016854:	ed86 0a00 	vstr	s0, [r6]
 8016858:	e7d2      	b.n	8016800 <_scanf_float+0x39c>
 801685a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801685e:	e7f9      	b.n	8016854 <_scanf_float+0x3f0>
 8016860:	2500      	movs	r5, #0
 8016862:	e640      	b.n	80164e6 <_scanf_float+0x82>
 8016864:	0801c670 	.word	0x0801c670
 8016868:	0801cae8 	.word	0x0801cae8

0801686c <iprintf>:
 801686c:	b40f      	push	{r0, r1, r2, r3}
 801686e:	4b0a      	ldr	r3, [pc, #40]	; (8016898 <iprintf+0x2c>)
 8016870:	b513      	push	{r0, r1, r4, lr}
 8016872:	681c      	ldr	r4, [r3, #0]
 8016874:	b124      	cbz	r4, 8016880 <iprintf+0x14>
 8016876:	69a3      	ldr	r3, [r4, #24]
 8016878:	b913      	cbnz	r3, 8016880 <iprintf+0x14>
 801687a:	4620      	mov	r0, r4
 801687c:	f001 ff10 	bl	80186a0 <__sinit>
 8016880:	ab05      	add	r3, sp, #20
 8016882:	9a04      	ldr	r2, [sp, #16]
 8016884:	68a1      	ldr	r1, [r4, #8]
 8016886:	9301      	str	r3, [sp, #4]
 8016888:	4620      	mov	r0, r4
 801688a:	f003 fa97 	bl	8019dbc <_vfiprintf_r>
 801688e:	b002      	add	sp, #8
 8016890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016894:	b004      	add	sp, #16
 8016896:	4770      	bx	lr
 8016898:	20000254 	.word	0x20000254

0801689c <_puts_r>:
 801689c:	b570      	push	{r4, r5, r6, lr}
 801689e:	460e      	mov	r6, r1
 80168a0:	4605      	mov	r5, r0
 80168a2:	b118      	cbz	r0, 80168ac <_puts_r+0x10>
 80168a4:	6983      	ldr	r3, [r0, #24]
 80168a6:	b90b      	cbnz	r3, 80168ac <_puts_r+0x10>
 80168a8:	f001 fefa 	bl	80186a0 <__sinit>
 80168ac:	69ab      	ldr	r3, [r5, #24]
 80168ae:	68ac      	ldr	r4, [r5, #8]
 80168b0:	b913      	cbnz	r3, 80168b8 <_puts_r+0x1c>
 80168b2:	4628      	mov	r0, r5
 80168b4:	f001 fef4 	bl	80186a0 <__sinit>
 80168b8:	4b2c      	ldr	r3, [pc, #176]	; (801696c <_puts_r+0xd0>)
 80168ba:	429c      	cmp	r4, r3
 80168bc:	d120      	bne.n	8016900 <_puts_r+0x64>
 80168be:	686c      	ldr	r4, [r5, #4]
 80168c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168c2:	07db      	lsls	r3, r3, #31
 80168c4:	d405      	bmi.n	80168d2 <_puts_r+0x36>
 80168c6:	89a3      	ldrh	r3, [r4, #12]
 80168c8:	0598      	lsls	r0, r3, #22
 80168ca:	d402      	bmi.n	80168d2 <_puts_r+0x36>
 80168cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168ce:	f002 faf8 	bl	8018ec2 <__retarget_lock_acquire_recursive>
 80168d2:	89a3      	ldrh	r3, [r4, #12]
 80168d4:	0719      	lsls	r1, r3, #28
 80168d6:	d51d      	bpl.n	8016914 <_puts_r+0x78>
 80168d8:	6923      	ldr	r3, [r4, #16]
 80168da:	b1db      	cbz	r3, 8016914 <_puts_r+0x78>
 80168dc:	3e01      	subs	r6, #1
 80168de:	68a3      	ldr	r3, [r4, #8]
 80168e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168e4:	3b01      	subs	r3, #1
 80168e6:	60a3      	str	r3, [r4, #8]
 80168e8:	bb39      	cbnz	r1, 801693a <_puts_r+0x9e>
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	da38      	bge.n	8016960 <_puts_r+0xc4>
 80168ee:	4622      	mov	r2, r4
 80168f0:	210a      	movs	r1, #10
 80168f2:	4628      	mov	r0, r5
 80168f4:	f000 feea 	bl	80176cc <__swbuf_r>
 80168f8:	3001      	adds	r0, #1
 80168fa:	d011      	beq.n	8016920 <_puts_r+0x84>
 80168fc:	250a      	movs	r5, #10
 80168fe:	e011      	b.n	8016924 <_puts_r+0x88>
 8016900:	4b1b      	ldr	r3, [pc, #108]	; (8016970 <_puts_r+0xd4>)
 8016902:	429c      	cmp	r4, r3
 8016904:	d101      	bne.n	801690a <_puts_r+0x6e>
 8016906:	68ac      	ldr	r4, [r5, #8]
 8016908:	e7da      	b.n	80168c0 <_puts_r+0x24>
 801690a:	4b1a      	ldr	r3, [pc, #104]	; (8016974 <_puts_r+0xd8>)
 801690c:	429c      	cmp	r4, r3
 801690e:	bf08      	it	eq
 8016910:	68ec      	ldreq	r4, [r5, #12]
 8016912:	e7d5      	b.n	80168c0 <_puts_r+0x24>
 8016914:	4621      	mov	r1, r4
 8016916:	4628      	mov	r0, r5
 8016918:	f000 ff2a 	bl	8017770 <__swsetup_r>
 801691c:	2800      	cmp	r0, #0
 801691e:	d0dd      	beq.n	80168dc <_puts_r+0x40>
 8016920:	f04f 35ff 	mov.w	r5, #4294967295
 8016924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016926:	07da      	lsls	r2, r3, #31
 8016928:	d405      	bmi.n	8016936 <_puts_r+0x9a>
 801692a:	89a3      	ldrh	r3, [r4, #12]
 801692c:	059b      	lsls	r3, r3, #22
 801692e:	d402      	bmi.n	8016936 <_puts_r+0x9a>
 8016930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016932:	f002 fac7 	bl	8018ec4 <__retarget_lock_release_recursive>
 8016936:	4628      	mov	r0, r5
 8016938:	bd70      	pop	{r4, r5, r6, pc}
 801693a:	2b00      	cmp	r3, #0
 801693c:	da04      	bge.n	8016948 <_puts_r+0xac>
 801693e:	69a2      	ldr	r2, [r4, #24]
 8016940:	429a      	cmp	r2, r3
 8016942:	dc06      	bgt.n	8016952 <_puts_r+0xb6>
 8016944:	290a      	cmp	r1, #10
 8016946:	d004      	beq.n	8016952 <_puts_r+0xb6>
 8016948:	6823      	ldr	r3, [r4, #0]
 801694a:	1c5a      	adds	r2, r3, #1
 801694c:	6022      	str	r2, [r4, #0]
 801694e:	7019      	strb	r1, [r3, #0]
 8016950:	e7c5      	b.n	80168de <_puts_r+0x42>
 8016952:	4622      	mov	r2, r4
 8016954:	4628      	mov	r0, r5
 8016956:	f000 feb9 	bl	80176cc <__swbuf_r>
 801695a:	3001      	adds	r0, #1
 801695c:	d1bf      	bne.n	80168de <_puts_r+0x42>
 801695e:	e7df      	b.n	8016920 <_puts_r+0x84>
 8016960:	6823      	ldr	r3, [r4, #0]
 8016962:	250a      	movs	r5, #10
 8016964:	1c5a      	adds	r2, r3, #1
 8016966:	6022      	str	r2, [r4, #0]
 8016968:	701d      	strb	r5, [r3, #0]
 801696a:	e7db      	b.n	8016924 <_puts_r+0x88>
 801696c:	0801c880 	.word	0x0801c880
 8016970:	0801c8a0 	.word	0x0801c8a0
 8016974:	0801c860 	.word	0x0801c860

08016978 <puts>:
 8016978:	4b02      	ldr	r3, [pc, #8]	; (8016984 <puts+0xc>)
 801697a:	4601      	mov	r1, r0
 801697c:	6818      	ldr	r0, [r3, #0]
 801697e:	f7ff bf8d 	b.w	801689c <_puts_r>
 8016982:	bf00      	nop
 8016984:	20000254 	.word	0x20000254

08016988 <nanf>:
 8016988:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016990 <nanf+0x8>
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	7fc00000 	.word	0x7fc00000

08016994 <siprintf>:
 8016994:	b40e      	push	{r1, r2, r3}
 8016996:	b500      	push	{lr}
 8016998:	b09c      	sub	sp, #112	; 0x70
 801699a:	ab1d      	add	r3, sp, #116	; 0x74
 801699c:	9002      	str	r0, [sp, #8]
 801699e:	9006      	str	r0, [sp, #24]
 80169a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169a4:	4809      	ldr	r0, [pc, #36]	; (80169cc <siprintf+0x38>)
 80169a6:	9107      	str	r1, [sp, #28]
 80169a8:	9104      	str	r1, [sp, #16]
 80169aa:	4909      	ldr	r1, [pc, #36]	; (80169d0 <siprintf+0x3c>)
 80169ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80169b0:	9105      	str	r1, [sp, #20]
 80169b2:	6800      	ldr	r0, [r0, #0]
 80169b4:	9301      	str	r3, [sp, #4]
 80169b6:	a902      	add	r1, sp, #8
 80169b8:	f003 f8d6 	bl	8019b68 <_svfiprintf_r>
 80169bc:	9b02      	ldr	r3, [sp, #8]
 80169be:	2200      	movs	r2, #0
 80169c0:	701a      	strb	r2, [r3, #0]
 80169c2:	b01c      	add	sp, #112	; 0x70
 80169c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80169c8:	b003      	add	sp, #12
 80169ca:	4770      	bx	lr
 80169cc:	20000254 	.word	0x20000254
 80169d0:	ffff0208 	.word	0xffff0208

080169d4 <sulp>:
 80169d4:	b570      	push	{r4, r5, r6, lr}
 80169d6:	4604      	mov	r4, r0
 80169d8:	460d      	mov	r5, r1
 80169da:	4616      	mov	r6, r2
 80169dc:	ec45 4b10 	vmov	d0, r4, r5
 80169e0:	f002 fe5c 	bl	801969c <__ulp>
 80169e4:	b17e      	cbz	r6, 8016a06 <sulp+0x32>
 80169e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80169ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	dd09      	ble.n	8016a06 <sulp+0x32>
 80169f2:	051b      	lsls	r3, r3, #20
 80169f4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80169f8:	2000      	movs	r0, #0
 80169fa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80169fe:	ec41 0b17 	vmov	d7, r0, r1
 8016a02:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016a06:	bd70      	pop	{r4, r5, r6, pc}

08016a08 <_strtod_l>:
 8016a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0c:	ed2d 8b0c 	vpush	{d8-d13}
 8016a10:	b09d      	sub	sp, #116	; 0x74
 8016a12:	461f      	mov	r7, r3
 8016a14:	2300      	movs	r3, #0
 8016a16:	9318      	str	r3, [sp, #96]	; 0x60
 8016a18:	4ba6      	ldr	r3, [pc, #664]	; (8016cb4 <_strtod_l+0x2ac>)
 8016a1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	9308      	str	r3, [sp, #32]
 8016a20:	4604      	mov	r4, r0
 8016a22:	4618      	mov	r0, r3
 8016a24:	468a      	mov	sl, r1
 8016a26:	f7e9 fc0b 	bl	8000240 <strlen>
 8016a2a:	f04f 0800 	mov.w	r8, #0
 8016a2e:	4605      	mov	r5, r0
 8016a30:	f04f 0900 	mov.w	r9, #0
 8016a34:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016a38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a3a:	781a      	ldrb	r2, [r3, #0]
 8016a3c:	2a2b      	cmp	r2, #43	; 0x2b
 8016a3e:	d04d      	beq.n	8016adc <_strtod_l+0xd4>
 8016a40:	d83a      	bhi.n	8016ab8 <_strtod_l+0xb0>
 8016a42:	2a0d      	cmp	r2, #13
 8016a44:	d833      	bhi.n	8016aae <_strtod_l+0xa6>
 8016a46:	2a08      	cmp	r2, #8
 8016a48:	d833      	bhi.n	8016ab2 <_strtod_l+0xaa>
 8016a4a:	2a00      	cmp	r2, #0
 8016a4c:	d03d      	beq.n	8016aca <_strtod_l+0xc2>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016a54:	7833      	ldrb	r3, [r6, #0]
 8016a56:	2b30      	cmp	r3, #48	; 0x30
 8016a58:	f040 80b6 	bne.w	8016bc8 <_strtod_l+0x1c0>
 8016a5c:	7873      	ldrb	r3, [r6, #1]
 8016a5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a62:	2b58      	cmp	r3, #88	; 0x58
 8016a64:	d16d      	bne.n	8016b42 <_strtod_l+0x13a>
 8016a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a68:	9301      	str	r3, [sp, #4]
 8016a6a:	ab18      	add	r3, sp, #96	; 0x60
 8016a6c:	9702      	str	r7, [sp, #8]
 8016a6e:	9300      	str	r3, [sp, #0]
 8016a70:	4a91      	ldr	r2, [pc, #580]	; (8016cb8 <_strtod_l+0x2b0>)
 8016a72:	ab19      	add	r3, sp, #100	; 0x64
 8016a74:	a917      	add	r1, sp, #92	; 0x5c
 8016a76:	4620      	mov	r0, r4
 8016a78:	f001 ff16 	bl	80188a8 <__gethex>
 8016a7c:	f010 0507 	ands.w	r5, r0, #7
 8016a80:	4607      	mov	r7, r0
 8016a82:	d005      	beq.n	8016a90 <_strtod_l+0x88>
 8016a84:	2d06      	cmp	r5, #6
 8016a86:	d12b      	bne.n	8016ae0 <_strtod_l+0xd8>
 8016a88:	3601      	adds	r6, #1
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8016a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f040 856e 	bne.w	8017574 <_strtod_l+0xb6c>
 8016a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a9a:	b1e3      	cbz	r3, 8016ad6 <_strtod_l+0xce>
 8016a9c:	ec49 8b17 	vmov	d7, r8, r9
 8016aa0:	eeb1 0b47 	vneg.f64	d0, d7
 8016aa4:	b01d      	add	sp, #116	; 0x74
 8016aa6:	ecbd 8b0c 	vpop	{d8-d13}
 8016aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aae:	2a20      	cmp	r2, #32
 8016ab0:	d1cd      	bne.n	8016a4e <_strtod_l+0x46>
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	9317      	str	r3, [sp, #92]	; 0x5c
 8016ab6:	e7bf      	b.n	8016a38 <_strtod_l+0x30>
 8016ab8:	2a2d      	cmp	r2, #45	; 0x2d
 8016aba:	d1c8      	bne.n	8016a4e <_strtod_l+0x46>
 8016abc:	2201      	movs	r2, #1
 8016abe:	920b      	str	r2, [sp, #44]	; 0x2c
 8016ac0:	1c5a      	adds	r2, r3, #1
 8016ac2:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ac4:	785b      	ldrb	r3, [r3, #1]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d1c3      	bne.n	8016a52 <_strtod_l+0x4a>
 8016aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016acc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	f040 854d 	bne.w	8017570 <_strtod_l+0xb68>
 8016ad6:	ec49 8b10 	vmov	d0, r8, r9
 8016ada:	e7e3      	b.n	8016aa4 <_strtod_l+0x9c>
 8016adc:	2200      	movs	r2, #0
 8016ade:	e7ee      	b.n	8016abe <_strtod_l+0xb6>
 8016ae0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016ae2:	b13a      	cbz	r2, 8016af4 <_strtod_l+0xec>
 8016ae4:	2135      	movs	r1, #53	; 0x35
 8016ae6:	a81a      	add	r0, sp, #104	; 0x68
 8016ae8:	f002 fee4 	bl	80198b4 <__copybits>
 8016aec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016aee:	4620      	mov	r0, r4
 8016af0:	f002 faa8 	bl	8019044 <_Bfree>
 8016af4:	3d01      	subs	r5, #1
 8016af6:	2d05      	cmp	r5, #5
 8016af8:	d807      	bhi.n	8016b0a <_strtod_l+0x102>
 8016afa:	e8df f005 	tbb	[pc, r5]
 8016afe:	0b0e      	.short	0x0b0e
 8016b00:	030e1d18 	.word	0x030e1d18
 8016b04:	f04f 0900 	mov.w	r9, #0
 8016b08:	46c8      	mov	r8, r9
 8016b0a:	073b      	lsls	r3, r7, #28
 8016b0c:	d5c0      	bpl.n	8016a90 <_strtod_l+0x88>
 8016b0e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8016b12:	e7bd      	b.n	8016a90 <_strtod_l+0x88>
 8016b14:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8016b18:	e7f7      	b.n	8016b0a <_strtod_l+0x102>
 8016b1a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8016b1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016b20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016b24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016b28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016b2c:	e7ed      	b.n	8016b0a <_strtod_l+0x102>
 8016b2e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8016cbc <_strtod_l+0x2b4>
 8016b32:	f04f 0800 	mov.w	r8, #0
 8016b36:	e7e8      	b.n	8016b0a <_strtod_l+0x102>
 8016b38:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016b3c:	f04f 38ff 	mov.w	r8, #4294967295
 8016b40:	e7e3      	b.n	8016b0a <_strtod_l+0x102>
 8016b42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b44:	1c5a      	adds	r2, r3, #1
 8016b46:	9217      	str	r2, [sp, #92]	; 0x5c
 8016b48:	785b      	ldrb	r3, [r3, #1]
 8016b4a:	2b30      	cmp	r3, #48	; 0x30
 8016b4c:	d0f9      	beq.n	8016b42 <_strtod_l+0x13a>
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d09e      	beq.n	8016a90 <_strtod_l+0x88>
 8016b52:	2301      	movs	r3, #1
 8016b54:	9306      	str	r3, [sp, #24]
 8016b56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b58:	930c      	str	r3, [sp, #48]	; 0x30
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	9304      	str	r3, [sp, #16]
 8016b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8016b60:	461e      	mov	r6, r3
 8016b62:	220a      	movs	r2, #10
 8016b64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016b66:	f890 b000 	ldrb.w	fp, [r0]
 8016b6a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8016b6e:	b2d9      	uxtb	r1, r3
 8016b70:	2909      	cmp	r1, #9
 8016b72:	d92b      	bls.n	8016bcc <_strtod_l+0x1c4>
 8016b74:	9908      	ldr	r1, [sp, #32]
 8016b76:	462a      	mov	r2, r5
 8016b78:	f003 faad 	bl	801a0d6 <strncmp>
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	d035      	beq.n	8016bec <_strtod_l+0x1e4>
 8016b80:	2000      	movs	r0, #0
 8016b82:	465a      	mov	r2, fp
 8016b84:	4633      	mov	r3, r6
 8016b86:	4683      	mov	fp, r0
 8016b88:	4601      	mov	r1, r0
 8016b8a:	2a65      	cmp	r2, #101	; 0x65
 8016b8c:	d001      	beq.n	8016b92 <_strtod_l+0x18a>
 8016b8e:	2a45      	cmp	r2, #69	; 0x45
 8016b90:	d118      	bne.n	8016bc4 <_strtod_l+0x1bc>
 8016b92:	b91b      	cbnz	r3, 8016b9c <_strtod_l+0x194>
 8016b94:	9b06      	ldr	r3, [sp, #24]
 8016b96:	4303      	orrs	r3, r0
 8016b98:	d097      	beq.n	8016aca <_strtod_l+0xc2>
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8016ba0:	f10a 0201 	add.w	r2, sl, #1
 8016ba4:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ba6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016baa:	2a2b      	cmp	r2, #43	; 0x2b
 8016bac:	d077      	beq.n	8016c9e <_strtod_l+0x296>
 8016bae:	2a2d      	cmp	r2, #45	; 0x2d
 8016bb0:	d07d      	beq.n	8016cae <_strtod_l+0x2a6>
 8016bb2:	f04f 0e00 	mov.w	lr, #0
 8016bb6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8016bba:	2d09      	cmp	r5, #9
 8016bbc:	f240 8084 	bls.w	8016cc8 <_strtod_l+0x2c0>
 8016bc0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016bc4:	2500      	movs	r5, #0
 8016bc6:	e09f      	b.n	8016d08 <_strtod_l+0x300>
 8016bc8:	2300      	movs	r3, #0
 8016bca:	e7c3      	b.n	8016b54 <_strtod_l+0x14c>
 8016bcc:	2e08      	cmp	r6, #8
 8016bce:	bfd5      	itete	le
 8016bd0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8016bd2:	9904      	ldrgt	r1, [sp, #16]
 8016bd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8016bd8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016bdc:	f100 0001 	add.w	r0, r0, #1
 8016be0:	bfd4      	ite	le
 8016be2:	930a      	strle	r3, [sp, #40]	; 0x28
 8016be4:	9304      	strgt	r3, [sp, #16]
 8016be6:	3601      	adds	r6, #1
 8016be8:	9017      	str	r0, [sp, #92]	; 0x5c
 8016bea:	e7bb      	b.n	8016b64 <_strtod_l+0x15c>
 8016bec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016bee:	195a      	adds	r2, r3, r5
 8016bf0:	9217      	str	r2, [sp, #92]	; 0x5c
 8016bf2:	5d5a      	ldrb	r2, [r3, r5]
 8016bf4:	b3ae      	cbz	r6, 8016c62 <_strtod_l+0x25a>
 8016bf6:	4683      	mov	fp, r0
 8016bf8:	4633      	mov	r3, r6
 8016bfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016bfe:	2909      	cmp	r1, #9
 8016c00:	d912      	bls.n	8016c28 <_strtod_l+0x220>
 8016c02:	2101      	movs	r1, #1
 8016c04:	e7c1      	b.n	8016b8a <_strtod_l+0x182>
 8016c06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c08:	1c5a      	adds	r2, r3, #1
 8016c0a:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c0c:	785a      	ldrb	r2, [r3, #1]
 8016c0e:	3001      	adds	r0, #1
 8016c10:	2a30      	cmp	r2, #48	; 0x30
 8016c12:	d0f8      	beq.n	8016c06 <_strtod_l+0x1fe>
 8016c14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016c18:	2b08      	cmp	r3, #8
 8016c1a:	f200 84b0 	bhi.w	801757e <_strtod_l+0xb76>
 8016c1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c20:	930c      	str	r3, [sp, #48]	; 0x30
 8016c22:	4683      	mov	fp, r0
 8016c24:	2000      	movs	r0, #0
 8016c26:	4603      	mov	r3, r0
 8016c28:	3a30      	subs	r2, #48	; 0x30
 8016c2a:	f100 0101 	add.w	r1, r0, #1
 8016c2e:	d012      	beq.n	8016c56 <_strtod_l+0x24e>
 8016c30:	448b      	add	fp, r1
 8016c32:	eb00 0c03 	add.w	ip, r0, r3
 8016c36:	4619      	mov	r1, r3
 8016c38:	250a      	movs	r5, #10
 8016c3a:	4561      	cmp	r1, ip
 8016c3c:	d113      	bne.n	8016c66 <_strtod_l+0x25e>
 8016c3e:	1819      	adds	r1, r3, r0
 8016c40:	2908      	cmp	r1, #8
 8016c42:	f103 0301 	add.w	r3, r3, #1
 8016c46:	4403      	add	r3, r0
 8016c48:	dc1d      	bgt.n	8016c86 <_strtod_l+0x27e>
 8016c4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c4c:	210a      	movs	r1, #10
 8016c4e:	fb01 2200 	mla	r2, r1, r0, r2
 8016c52:	920a      	str	r2, [sp, #40]	; 0x28
 8016c54:	2100      	movs	r1, #0
 8016c56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016c58:	1c50      	adds	r0, r2, #1
 8016c5a:	9017      	str	r0, [sp, #92]	; 0x5c
 8016c5c:	7852      	ldrb	r2, [r2, #1]
 8016c5e:	4608      	mov	r0, r1
 8016c60:	e7cb      	b.n	8016bfa <_strtod_l+0x1f2>
 8016c62:	4630      	mov	r0, r6
 8016c64:	e7d4      	b.n	8016c10 <_strtod_l+0x208>
 8016c66:	2908      	cmp	r1, #8
 8016c68:	dc04      	bgt.n	8016c74 <_strtod_l+0x26c>
 8016c6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016c6c:	436f      	muls	r7, r5
 8016c6e:	970a      	str	r7, [sp, #40]	; 0x28
 8016c70:	3101      	adds	r1, #1
 8016c72:	e7e2      	b.n	8016c3a <_strtod_l+0x232>
 8016c74:	f101 0e01 	add.w	lr, r1, #1
 8016c78:	f1be 0f10 	cmp.w	lr, #16
 8016c7c:	bfde      	ittt	le
 8016c7e:	9f04      	ldrle	r7, [sp, #16]
 8016c80:	436f      	mulle	r7, r5
 8016c82:	9704      	strle	r7, [sp, #16]
 8016c84:	e7f4      	b.n	8016c70 <_strtod_l+0x268>
 8016c86:	2b10      	cmp	r3, #16
 8016c88:	bfdf      	itttt	le
 8016c8a:	9804      	ldrle	r0, [sp, #16]
 8016c8c:	210a      	movle	r1, #10
 8016c8e:	fb01 2200 	mlale	r2, r1, r0, r2
 8016c92:	9204      	strle	r2, [sp, #16]
 8016c94:	e7de      	b.n	8016c54 <_strtod_l+0x24c>
 8016c96:	f04f 0b00 	mov.w	fp, #0
 8016c9a:	2101      	movs	r1, #1
 8016c9c:	e77a      	b.n	8016b94 <_strtod_l+0x18c>
 8016c9e:	f04f 0e00 	mov.w	lr, #0
 8016ca2:	f10a 0202 	add.w	r2, sl, #2
 8016ca6:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ca8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8016cac:	e783      	b.n	8016bb6 <_strtod_l+0x1ae>
 8016cae:	f04f 0e01 	mov.w	lr, #1
 8016cb2:	e7f6      	b.n	8016ca2 <_strtod_l+0x29a>
 8016cb4:	0801c92c 	.word	0x0801c92c
 8016cb8:	0801c678 	.word	0x0801c678
 8016cbc:	7ff00000 	.word	0x7ff00000
 8016cc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016cc2:	1c55      	adds	r5, r2, #1
 8016cc4:	9517      	str	r5, [sp, #92]	; 0x5c
 8016cc6:	7852      	ldrb	r2, [r2, #1]
 8016cc8:	2a30      	cmp	r2, #48	; 0x30
 8016cca:	d0f9      	beq.n	8016cc0 <_strtod_l+0x2b8>
 8016ccc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8016cd0:	2d08      	cmp	r5, #8
 8016cd2:	f63f af77 	bhi.w	8016bc4 <_strtod_l+0x1bc>
 8016cd6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8016cda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016cdc:	9208      	str	r2, [sp, #32]
 8016cde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ce0:	1c55      	adds	r5, r2, #1
 8016ce2:	9517      	str	r5, [sp, #92]	; 0x5c
 8016ce4:	7852      	ldrb	r2, [r2, #1]
 8016ce6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8016cea:	2f09      	cmp	r7, #9
 8016cec:	d937      	bls.n	8016d5e <_strtod_l+0x356>
 8016cee:	9f08      	ldr	r7, [sp, #32]
 8016cf0:	1bed      	subs	r5, r5, r7
 8016cf2:	2d08      	cmp	r5, #8
 8016cf4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016cf8:	dc02      	bgt.n	8016d00 <_strtod_l+0x2f8>
 8016cfa:	4565      	cmp	r5, ip
 8016cfc:	bfa8      	it	ge
 8016cfe:	4665      	movge	r5, ip
 8016d00:	f1be 0f00 	cmp.w	lr, #0
 8016d04:	d000      	beq.n	8016d08 <_strtod_l+0x300>
 8016d06:	426d      	negs	r5, r5
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d14f      	bne.n	8016dac <_strtod_l+0x3a4>
 8016d0c:	9b06      	ldr	r3, [sp, #24]
 8016d0e:	4303      	orrs	r3, r0
 8016d10:	f47f aebe 	bne.w	8016a90 <_strtod_l+0x88>
 8016d14:	2900      	cmp	r1, #0
 8016d16:	f47f aed8 	bne.w	8016aca <_strtod_l+0xc2>
 8016d1a:	2a69      	cmp	r2, #105	; 0x69
 8016d1c:	d027      	beq.n	8016d6e <_strtod_l+0x366>
 8016d1e:	dc24      	bgt.n	8016d6a <_strtod_l+0x362>
 8016d20:	2a49      	cmp	r2, #73	; 0x49
 8016d22:	d024      	beq.n	8016d6e <_strtod_l+0x366>
 8016d24:	2a4e      	cmp	r2, #78	; 0x4e
 8016d26:	f47f aed0 	bne.w	8016aca <_strtod_l+0xc2>
 8016d2a:	499b      	ldr	r1, [pc, #620]	; (8016f98 <_strtod_l+0x590>)
 8016d2c:	a817      	add	r0, sp, #92	; 0x5c
 8016d2e:	f002 f813 	bl	8018d58 <__match>
 8016d32:	2800      	cmp	r0, #0
 8016d34:	f43f aec9 	beq.w	8016aca <_strtod_l+0xc2>
 8016d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	2b28      	cmp	r3, #40	; 0x28
 8016d3e:	d12d      	bne.n	8016d9c <_strtod_l+0x394>
 8016d40:	4996      	ldr	r1, [pc, #600]	; (8016f9c <_strtod_l+0x594>)
 8016d42:	aa1a      	add	r2, sp, #104	; 0x68
 8016d44:	a817      	add	r0, sp, #92	; 0x5c
 8016d46:	f002 f81b 	bl	8018d80 <__hexnan>
 8016d4a:	2805      	cmp	r0, #5
 8016d4c:	d126      	bne.n	8016d9c <_strtod_l+0x394>
 8016d4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016d54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016d58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016d5c:	e698      	b.n	8016a90 <_strtod_l+0x88>
 8016d5e:	250a      	movs	r5, #10
 8016d60:	fb05 250c 	mla	r5, r5, ip, r2
 8016d64:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8016d68:	e7b9      	b.n	8016cde <_strtod_l+0x2d6>
 8016d6a:	2a6e      	cmp	r2, #110	; 0x6e
 8016d6c:	e7db      	b.n	8016d26 <_strtod_l+0x31e>
 8016d6e:	498c      	ldr	r1, [pc, #560]	; (8016fa0 <_strtod_l+0x598>)
 8016d70:	a817      	add	r0, sp, #92	; 0x5c
 8016d72:	f001 fff1 	bl	8018d58 <__match>
 8016d76:	2800      	cmp	r0, #0
 8016d78:	f43f aea7 	beq.w	8016aca <_strtod_l+0xc2>
 8016d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d7e:	4989      	ldr	r1, [pc, #548]	; (8016fa4 <_strtod_l+0x59c>)
 8016d80:	3b01      	subs	r3, #1
 8016d82:	a817      	add	r0, sp, #92	; 0x5c
 8016d84:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d86:	f001 ffe7 	bl	8018d58 <__match>
 8016d8a:	b910      	cbnz	r0, 8016d92 <_strtod_l+0x38a>
 8016d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d8e:	3301      	adds	r3, #1
 8016d90:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d92:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8016fb8 <_strtod_l+0x5b0>
 8016d96:	f04f 0800 	mov.w	r8, #0
 8016d9a:	e679      	b.n	8016a90 <_strtod_l+0x88>
 8016d9c:	4882      	ldr	r0, [pc, #520]	; (8016fa8 <_strtod_l+0x5a0>)
 8016d9e:	f003 f93f 	bl	801a020 <nan>
 8016da2:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016da6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016daa:	e671      	b.n	8016a90 <_strtod_l+0x88>
 8016dac:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8016db0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016db4:	eba5 020b 	sub.w	r2, r5, fp
 8016db8:	2e00      	cmp	r6, #0
 8016dba:	bf08      	it	eq
 8016dbc:	461e      	moveq	r6, r3
 8016dbe:	2b10      	cmp	r3, #16
 8016dc0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016dc4:	9206      	str	r2, [sp, #24]
 8016dc6:	461a      	mov	r2, r3
 8016dc8:	bfa8      	it	ge
 8016dca:	2210      	movge	r2, #16
 8016dcc:	2b09      	cmp	r3, #9
 8016dce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8016dd2:	dd0e      	ble.n	8016df2 <_strtod_l+0x3ea>
 8016dd4:	4975      	ldr	r1, [pc, #468]	; (8016fac <_strtod_l+0x5a4>)
 8016dd6:	eddd 7a04 	vldr	s15, [sp, #16]
 8016dda:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016dde:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8016de2:	ed9d 5b08 	vldr	d5, [sp, #32]
 8016de6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016dea:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016dee:	ec59 8b17 	vmov	r8, r9, d7
 8016df2:	2b0f      	cmp	r3, #15
 8016df4:	dc37      	bgt.n	8016e66 <_strtod_l+0x45e>
 8016df6:	9906      	ldr	r1, [sp, #24]
 8016df8:	2900      	cmp	r1, #0
 8016dfa:	f43f ae49 	beq.w	8016a90 <_strtod_l+0x88>
 8016dfe:	dd23      	ble.n	8016e48 <_strtod_l+0x440>
 8016e00:	2916      	cmp	r1, #22
 8016e02:	dc0b      	bgt.n	8016e1c <_strtod_l+0x414>
 8016e04:	4b69      	ldr	r3, [pc, #420]	; (8016fac <_strtod_l+0x5a4>)
 8016e06:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8016e0a:	ed93 7b00 	vldr	d7, [r3]
 8016e0e:	ec49 8b16 	vmov	d6, r8, r9
 8016e12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e16:	ec59 8b17 	vmov	r8, r9, d7
 8016e1a:	e639      	b.n	8016a90 <_strtod_l+0x88>
 8016e1c:	9806      	ldr	r0, [sp, #24]
 8016e1e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016e22:	4281      	cmp	r1, r0
 8016e24:	db1f      	blt.n	8016e66 <_strtod_l+0x45e>
 8016e26:	4a61      	ldr	r2, [pc, #388]	; (8016fac <_strtod_l+0x5a4>)
 8016e28:	f1c3 030f 	rsb	r3, r3, #15
 8016e2c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016e30:	ed91 7b00 	vldr	d7, [r1]
 8016e34:	ec49 8b16 	vmov	d6, r8, r9
 8016e38:	1ac3      	subs	r3, r0, r3
 8016e3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e42:	ed92 6b00 	vldr	d6, [r2]
 8016e46:	e7e4      	b.n	8016e12 <_strtod_l+0x40a>
 8016e48:	9906      	ldr	r1, [sp, #24]
 8016e4a:	3116      	adds	r1, #22
 8016e4c:	db0b      	blt.n	8016e66 <_strtod_l+0x45e>
 8016e4e:	4b57      	ldr	r3, [pc, #348]	; (8016fac <_strtod_l+0x5a4>)
 8016e50:	ebab 0505 	sub.w	r5, fp, r5
 8016e54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016e58:	ed95 7b00 	vldr	d7, [r5]
 8016e5c:	ec49 8b16 	vmov	d6, r8, r9
 8016e60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016e64:	e7d7      	b.n	8016e16 <_strtod_l+0x40e>
 8016e66:	9906      	ldr	r1, [sp, #24]
 8016e68:	1a9a      	subs	r2, r3, r2
 8016e6a:	440a      	add	r2, r1
 8016e6c:	2a00      	cmp	r2, #0
 8016e6e:	dd74      	ble.n	8016f5a <_strtod_l+0x552>
 8016e70:	f012 000f 	ands.w	r0, r2, #15
 8016e74:	d00a      	beq.n	8016e8c <_strtod_l+0x484>
 8016e76:	494d      	ldr	r1, [pc, #308]	; (8016fac <_strtod_l+0x5a4>)
 8016e78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016e7c:	ed91 7b00 	vldr	d7, [r1]
 8016e80:	ec49 8b16 	vmov	d6, r8, r9
 8016e84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e88:	ec59 8b17 	vmov	r8, r9, d7
 8016e8c:	f032 020f 	bics.w	r2, r2, #15
 8016e90:	d04f      	beq.n	8016f32 <_strtod_l+0x52a>
 8016e92:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016e96:	dd22      	ble.n	8016ede <_strtod_l+0x4d6>
 8016e98:	2500      	movs	r5, #0
 8016e9a:	462e      	mov	r6, r5
 8016e9c:	950a      	str	r5, [sp, #40]	; 0x28
 8016e9e:	462f      	mov	r7, r5
 8016ea0:	2322      	movs	r3, #34	; 0x22
 8016ea2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8016fb8 <_strtod_l+0x5b0>
 8016ea6:	6023      	str	r3, [r4, #0]
 8016ea8:	f04f 0800 	mov.w	r8, #0
 8016eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	f43f adee 	beq.w	8016a90 <_strtod_l+0x88>
 8016eb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	f002 f8c4 	bl	8019044 <_Bfree>
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	4620      	mov	r0, r4
 8016ec0:	f002 f8c0 	bl	8019044 <_Bfree>
 8016ec4:	4631      	mov	r1, r6
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	f002 f8bc 	bl	8019044 <_Bfree>
 8016ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f002 f8b8 	bl	8019044 <_Bfree>
 8016ed4:	4629      	mov	r1, r5
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	f002 f8b4 	bl	8019044 <_Bfree>
 8016edc:	e5d8      	b.n	8016a90 <_strtod_l+0x88>
 8016ede:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8016ee2:	2000      	movs	r0, #0
 8016ee4:	4f32      	ldr	r7, [pc, #200]	; (8016fb0 <_strtod_l+0x5a8>)
 8016ee6:	1112      	asrs	r2, r2, #4
 8016ee8:	4601      	mov	r1, r0
 8016eea:	2a01      	cmp	r2, #1
 8016eec:	dc24      	bgt.n	8016f38 <_strtod_l+0x530>
 8016eee:	b108      	cbz	r0, 8016ef4 <_strtod_l+0x4ec>
 8016ef0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016ef4:	4a2e      	ldr	r2, [pc, #184]	; (8016fb0 <_strtod_l+0x5a8>)
 8016ef6:	482f      	ldr	r0, [pc, #188]	; (8016fb4 <_strtod_l+0x5ac>)
 8016ef8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8016efc:	ed91 7b00 	vldr	d7, [r1]
 8016f00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016f04:	ec49 8b16 	vmov	d6, r8, r9
 8016f08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016f10:	9905      	ldr	r1, [sp, #20]
 8016f12:	4a29      	ldr	r2, [pc, #164]	; (8016fb8 <_strtod_l+0x5b0>)
 8016f14:	400a      	ands	r2, r1
 8016f16:	4282      	cmp	r2, r0
 8016f18:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016f1c:	d8bc      	bhi.n	8016e98 <_strtod_l+0x490>
 8016f1e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016f22:	4282      	cmp	r2, r0
 8016f24:	bf86      	itte	hi
 8016f26:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8016fbc <_strtod_l+0x5b4>
 8016f2a:	f04f 38ff 	movhi.w	r8, #4294967295
 8016f2e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016f32:	2200      	movs	r2, #0
 8016f34:	9204      	str	r2, [sp, #16]
 8016f36:	e07f      	b.n	8017038 <_strtod_l+0x630>
 8016f38:	f012 0f01 	tst.w	r2, #1
 8016f3c:	d00a      	beq.n	8016f54 <_strtod_l+0x54c>
 8016f3e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8016f42:	ed90 7b00 	vldr	d7, [r0]
 8016f46:	ed9d 6b04 	vldr	d6, [sp, #16]
 8016f4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016f4e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016f52:	2001      	movs	r0, #1
 8016f54:	3101      	adds	r1, #1
 8016f56:	1052      	asrs	r2, r2, #1
 8016f58:	e7c7      	b.n	8016eea <_strtod_l+0x4e2>
 8016f5a:	d0ea      	beq.n	8016f32 <_strtod_l+0x52a>
 8016f5c:	4252      	negs	r2, r2
 8016f5e:	f012 000f 	ands.w	r0, r2, #15
 8016f62:	d00a      	beq.n	8016f7a <_strtod_l+0x572>
 8016f64:	4911      	ldr	r1, [pc, #68]	; (8016fac <_strtod_l+0x5a4>)
 8016f66:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016f6a:	ed91 7b00 	vldr	d7, [r1]
 8016f6e:	ec49 8b16 	vmov	d6, r8, r9
 8016f72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016f76:	ec59 8b17 	vmov	r8, r9, d7
 8016f7a:	1112      	asrs	r2, r2, #4
 8016f7c:	d0d9      	beq.n	8016f32 <_strtod_l+0x52a>
 8016f7e:	2a1f      	cmp	r2, #31
 8016f80:	dd1e      	ble.n	8016fc0 <_strtod_l+0x5b8>
 8016f82:	2500      	movs	r5, #0
 8016f84:	462e      	mov	r6, r5
 8016f86:	950a      	str	r5, [sp, #40]	; 0x28
 8016f88:	462f      	mov	r7, r5
 8016f8a:	2322      	movs	r3, #34	; 0x22
 8016f8c:	f04f 0800 	mov.w	r8, #0
 8016f90:	f04f 0900 	mov.w	r9, #0
 8016f94:	6023      	str	r3, [r4, #0]
 8016f96:	e789      	b.n	8016eac <_strtod_l+0x4a4>
 8016f98:	0801c649 	.word	0x0801c649
 8016f9c:	0801c68c 	.word	0x0801c68c
 8016fa0:	0801c641 	.word	0x0801c641
 8016fa4:	0801c7cc 	.word	0x0801c7cc
 8016fa8:	0801cae8 	.word	0x0801cae8
 8016fac:	0801c9c8 	.word	0x0801c9c8
 8016fb0:	0801c9a0 	.word	0x0801c9a0
 8016fb4:	7ca00000 	.word	0x7ca00000
 8016fb8:	7ff00000 	.word	0x7ff00000
 8016fbc:	7fefffff 	.word	0x7fefffff
 8016fc0:	f012 0110 	ands.w	r1, r2, #16
 8016fc4:	bf18      	it	ne
 8016fc6:	216a      	movne	r1, #106	; 0x6a
 8016fc8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8016fcc:	9104      	str	r1, [sp, #16]
 8016fce:	49c0      	ldr	r1, [pc, #768]	; (80172d0 <_strtod_l+0x8c8>)
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	07d7      	lsls	r7, r2, #31
 8016fd4:	d508      	bpl.n	8016fe8 <_strtod_l+0x5e0>
 8016fd6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8016fda:	ed91 7b00 	vldr	d7, [r1]
 8016fde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016fe2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	1052      	asrs	r2, r2, #1
 8016fea:	f101 0108 	add.w	r1, r1, #8
 8016fee:	d1f0      	bne.n	8016fd2 <_strtod_l+0x5ca>
 8016ff0:	b108      	cbz	r0, 8016ff6 <_strtod_l+0x5ee>
 8016ff2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8016ff6:	9a04      	ldr	r2, [sp, #16]
 8016ff8:	b1ba      	cbz	r2, 801702a <_strtod_l+0x622>
 8016ffa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016ffe:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8017002:	2a00      	cmp	r2, #0
 8017004:	4649      	mov	r1, r9
 8017006:	dd10      	ble.n	801702a <_strtod_l+0x622>
 8017008:	2a1f      	cmp	r2, #31
 801700a:	f340 8132 	ble.w	8017272 <_strtod_l+0x86a>
 801700e:	2a34      	cmp	r2, #52	; 0x34
 8017010:	bfde      	ittt	le
 8017012:	3a20      	suble	r2, #32
 8017014:	f04f 30ff 	movle.w	r0, #4294967295
 8017018:	fa00 f202 	lslle.w	r2, r0, r2
 801701c:	f04f 0800 	mov.w	r8, #0
 8017020:	bfcc      	ite	gt
 8017022:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017026:	ea02 0901 	andle.w	r9, r2, r1
 801702a:	ec49 8b17 	vmov	d7, r8, r9
 801702e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017036:	d0a4      	beq.n	8016f82 <_strtod_l+0x57a>
 8017038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801703a:	9200      	str	r2, [sp, #0]
 801703c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801703e:	4632      	mov	r2, r6
 8017040:	4620      	mov	r0, r4
 8017042:	f002 f86b 	bl	801911c <__s2b>
 8017046:	900a      	str	r0, [sp, #40]	; 0x28
 8017048:	2800      	cmp	r0, #0
 801704a:	f43f af25 	beq.w	8016e98 <_strtod_l+0x490>
 801704e:	9b06      	ldr	r3, [sp, #24]
 8017050:	ebab 0505 	sub.w	r5, fp, r5
 8017054:	2b00      	cmp	r3, #0
 8017056:	bfb4      	ite	lt
 8017058:	462b      	movlt	r3, r5
 801705a:	2300      	movge	r3, #0
 801705c:	930c      	str	r3, [sp, #48]	; 0x30
 801705e:	9b06      	ldr	r3, [sp, #24]
 8017060:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80172b8 <_strtod_l+0x8b0>
 8017064:	ed9f ab96 	vldr	d10, [pc, #600]	; 80172c0 <_strtod_l+0x8b8>
 8017068:	ed9f bb97 	vldr	d11, [pc, #604]	; 80172c8 <_strtod_l+0x8c0>
 801706c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017070:	2500      	movs	r5, #0
 8017072:	9312      	str	r3, [sp, #72]	; 0x48
 8017074:	462e      	mov	r6, r5
 8017076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017078:	4620      	mov	r0, r4
 801707a:	6859      	ldr	r1, [r3, #4]
 801707c:	f001 ffa2 	bl	8018fc4 <_Balloc>
 8017080:	4607      	mov	r7, r0
 8017082:	2800      	cmp	r0, #0
 8017084:	f43f af0c 	beq.w	8016ea0 <_strtod_l+0x498>
 8017088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801708a:	691a      	ldr	r2, [r3, #16]
 801708c:	3202      	adds	r2, #2
 801708e:	f103 010c 	add.w	r1, r3, #12
 8017092:	0092      	lsls	r2, r2, #2
 8017094:	300c      	adds	r0, #12
 8017096:	f7fe fd8d 	bl	8015bb4 <memcpy>
 801709a:	ec49 8b10 	vmov	d0, r8, r9
 801709e:	aa1a      	add	r2, sp, #104	; 0x68
 80170a0:	a919      	add	r1, sp, #100	; 0x64
 80170a2:	4620      	mov	r0, r4
 80170a4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80170a8:	f002 fb74 	bl	8019794 <__d2b>
 80170ac:	9018      	str	r0, [sp, #96]	; 0x60
 80170ae:	2800      	cmp	r0, #0
 80170b0:	f43f aef6 	beq.w	8016ea0 <_strtod_l+0x498>
 80170b4:	2101      	movs	r1, #1
 80170b6:	4620      	mov	r0, r4
 80170b8:	f002 f8ca 	bl	8019250 <__i2b>
 80170bc:	4606      	mov	r6, r0
 80170be:	2800      	cmp	r0, #0
 80170c0:	f43f aeee 	beq.w	8016ea0 <_strtod_l+0x498>
 80170c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80170c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	bfab      	itete	ge
 80170cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80170ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80170d0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80170d4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80170d8:	bfac      	ite	ge
 80170da:	eb03 0b02 	addge.w	fp, r3, r2
 80170de:	eba2 0a03 	sublt.w	sl, r2, r3
 80170e2:	9a04      	ldr	r2, [sp, #16]
 80170e4:	1a9b      	subs	r3, r3, r2
 80170e6:	440b      	add	r3, r1
 80170e8:	4a7a      	ldr	r2, [pc, #488]	; (80172d4 <_strtod_l+0x8cc>)
 80170ea:	3b01      	subs	r3, #1
 80170ec:	4293      	cmp	r3, r2
 80170ee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80170f2:	f280 80d1 	bge.w	8017298 <_strtod_l+0x890>
 80170f6:	1ad2      	subs	r2, r2, r3
 80170f8:	2a1f      	cmp	r2, #31
 80170fa:	eba1 0102 	sub.w	r1, r1, r2
 80170fe:	f04f 0001 	mov.w	r0, #1
 8017102:	f300 80bd 	bgt.w	8017280 <_strtod_l+0x878>
 8017106:	fa00 f302 	lsl.w	r3, r0, r2
 801710a:	930e      	str	r3, [sp, #56]	; 0x38
 801710c:	2300      	movs	r3, #0
 801710e:	930d      	str	r3, [sp, #52]	; 0x34
 8017110:	eb0b 0301 	add.w	r3, fp, r1
 8017114:	9a04      	ldr	r2, [sp, #16]
 8017116:	459b      	cmp	fp, r3
 8017118:	448a      	add	sl, r1
 801711a:	4492      	add	sl, r2
 801711c:	465a      	mov	r2, fp
 801711e:	bfa8      	it	ge
 8017120:	461a      	movge	r2, r3
 8017122:	4552      	cmp	r2, sl
 8017124:	bfa8      	it	ge
 8017126:	4652      	movge	r2, sl
 8017128:	2a00      	cmp	r2, #0
 801712a:	bfc2      	ittt	gt
 801712c:	1a9b      	subgt	r3, r3, r2
 801712e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8017132:	ebab 0b02 	subgt.w	fp, fp, r2
 8017136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017138:	2a00      	cmp	r2, #0
 801713a:	dd18      	ble.n	801716e <_strtod_l+0x766>
 801713c:	4631      	mov	r1, r6
 801713e:	4620      	mov	r0, r4
 8017140:	9315      	str	r3, [sp, #84]	; 0x54
 8017142:	f002 f941 	bl	80193c8 <__pow5mult>
 8017146:	4606      	mov	r6, r0
 8017148:	2800      	cmp	r0, #0
 801714a:	f43f aea9 	beq.w	8016ea0 <_strtod_l+0x498>
 801714e:	4601      	mov	r1, r0
 8017150:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017152:	4620      	mov	r0, r4
 8017154:	f002 f892 	bl	801927c <__multiply>
 8017158:	9014      	str	r0, [sp, #80]	; 0x50
 801715a:	2800      	cmp	r0, #0
 801715c:	f43f aea0 	beq.w	8016ea0 <_strtod_l+0x498>
 8017160:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017162:	4620      	mov	r0, r4
 8017164:	f001 ff6e 	bl	8019044 <_Bfree>
 8017168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801716a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801716c:	9218      	str	r2, [sp, #96]	; 0x60
 801716e:	2b00      	cmp	r3, #0
 8017170:	f300 8097 	bgt.w	80172a2 <_strtod_l+0x89a>
 8017174:	9b06      	ldr	r3, [sp, #24]
 8017176:	2b00      	cmp	r3, #0
 8017178:	dd08      	ble.n	801718c <_strtod_l+0x784>
 801717a:	4639      	mov	r1, r7
 801717c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801717e:	4620      	mov	r0, r4
 8017180:	f002 f922 	bl	80193c8 <__pow5mult>
 8017184:	4607      	mov	r7, r0
 8017186:	2800      	cmp	r0, #0
 8017188:	f43f ae8a 	beq.w	8016ea0 <_strtod_l+0x498>
 801718c:	f1ba 0f00 	cmp.w	sl, #0
 8017190:	dd08      	ble.n	80171a4 <_strtod_l+0x79c>
 8017192:	4639      	mov	r1, r7
 8017194:	4652      	mov	r2, sl
 8017196:	4620      	mov	r0, r4
 8017198:	f002 f970 	bl	801947c <__lshift>
 801719c:	4607      	mov	r7, r0
 801719e:	2800      	cmp	r0, #0
 80171a0:	f43f ae7e 	beq.w	8016ea0 <_strtod_l+0x498>
 80171a4:	f1bb 0f00 	cmp.w	fp, #0
 80171a8:	dd08      	ble.n	80171bc <_strtod_l+0x7b4>
 80171aa:	4631      	mov	r1, r6
 80171ac:	465a      	mov	r2, fp
 80171ae:	4620      	mov	r0, r4
 80171b0:	f002 f964 	bl	801947c <__lshift>
 80171b4:	4606      	mov	r6, r0
 80171b6:	2800      	cmp	r0, #0
 80171b8:	f43f ae72 	beq.w	8016ea0 <_strtod_l+0x498>
 80171bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80171be:	463a      	mov	r2, r7
 80171c0:	4620      	mov	r0, r4
 80171c2:	f002 f9e3 	bl	801958c <__mdiff>
 80171c6:	4605      	mov	r5, r0
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f43f ae69 	beq.w	8016ea0 <_strtod_l+0x498>
 80171ce:	2300      	movs	r3, #0
 80171d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80171d4:	60c3      	str	r3, [r0, #12]
 80171d6:	4631      	mov	r1, r6
 80171d8:	f002 f9bc 	bl	8019554 <__mcmp>
 80171dc:	2800      	cmp	r0, #0
 80171de:	da7f      	bge.n	80172e0 <_strtod_l+0x8d8>
 80171e0:	ea5a 0308 	orrs.w	r3, sl, r8
 80171e4:	f040 80a5 	bne.w	8017332 <_strtod_l+0x92a>
 80171e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f040 80a0 	bne.w	8017332 <_strtod_l+0x92a>
 80171f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80171f6:	0d1b      	lsrs	r3, r3, #20
 80171f8:	051b      	lsls	r3, r3, #20
 80171fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80171fe:	f240 8098 	bls.w	8017332 <_strtod_l+0x92a>
 8017202:	696b      	ldr	r3, [r5, #20]
 8017204:	b91b      	cbnz	r3, 801720e <_strtod_l+0x806>
 8017206:	692b      	ldr	r3, [r5, #16]
 8017208:	2b01      	cmp	r3, #1
 801720a:	f340 8092 	ble.w	8017332 <_strtod_l+0x92a>
 801720e:	4629      	mov	r1, r5
 8017210:	2201      	movs	r2, #1
 8017212:	4620      	mov	r0, r4
 8017214:	f002 f932 	bl	801947c <__lshift>
 8017218:	4631      	mov	r1, r6
 801721a:	4605      	mov	r5, r0
 801721c:	f002 f99a 	bl	8019554 <__mcmp>
 8017220:	2800      	cmp	r0, #0
 8017222:	f340 8086 	ble.w	8017332 <_strtod_l+0x92a>
 8017226:	9904      	ldr	r1, [sp, #16]
 8017228:	4a2b      	ldr	r2, [pc, #172]	; (80172d8 <_strtod_l+0x8d0>)
 801722a:	464b      	mov	r3, r9
 801722c:	2900      	cmp	r1, #0
 801722e:	f000 80a1 	beq.w	8017374 <_strtod_l+0x96c>
 8017232:	ea02 0109 	and.w	r1, r2, r9
 8017236:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801723a:	f300 809b 	bgt.w	8017374 <_strtod_l+0x96c>
 801723e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017242:	f77f aea2 	ble.w	8016f8a <_strtod_l+0x582>
 8017246:	4a25      	ldr	r2, [pc, #148]	; (80172dc <_strtod_l+0x8d4>)
 8017248:	2300      	movs	r3, #0
 801724a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801724e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8017252:	ec49 8b17 	vmov	d7, r8, r9
 8017256:	ee27 7b06 	vmul.f64	d7, d7, d6
 801725a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801725e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017262:	4313      	orrs	r3, r2
 8017264:	bf08      	it	eq
 8017266:	2322      	moveq	r3, #34	; 0x22
 8017268:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801726c:	bf08      	it	eq
 801726e:	6023      	streq	r3, [r4, #0]
 8017270:	e620      	b.n	8016eb4 <_strtod_l+0x4ac>
 8017272:	f04f 31ff 	mov.w	r1, #4294967295
 8017276:	fa01 f202 	lsl.w	r2, r1, r2
 801727a:	ea02 0808 	and.w	r8, r2, r8
 801727e:	e6d4      	b.n	801702a <_strtod_l+0x622>
 8017280:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017284:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017288:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801728c:	33e2      	adds	r3, #226	; 0xe2
 801728e:	fa00 f303 	lsl.w	r3, r0, r3
 8017292:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8017296:	e73b      	b.n	8017110 <_strtod_l+0x708>
 8017298:	2000      	movs	r0, #0
 801729a:	2301      	movs	r3, #1
 801729c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80172a0:	e736      	b.n	8017110 <_strtod_l+0x708>
 80172a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80172a4:	461a      	mov	r2, r3
 80172a6:	4620      	mov	r0, r4
 80172a8:	f002 f8e8 	bl	801947c <__lshift>
 80172ac:	9018      	str	r0, [sp, #96]	; 0x60
 80172ae:	2800      	cmp	r0, #0
 80172b0:	f47f af60 	bne.w	8017174 <_strtod_l+0x76c>
 80172b4:	e5f4      	b.n	8016ea0 <_strtod_l+0x498>
 80172b6:	bf00      	nop
 80172b8:	94a03595 	.word	0x94a03595
 80172bc:	3fcfffff 	.word	0x3fcfffff
 80172c0:	94a03595 	.word	0x94a03595
 80172c4:	3fdfffff 	.word	0x3fdfffff
 80172c8:	35afe535 	.word	0x35afe535
 80172cc:	3fe00000 	.word	0x3fe00000
 80172d0:	0801c6a0 	.word	0x0801c6a0
 80172d4:	fffffc02 	.word	0xfffffc02
 80172d8:	7ff00000 	.word	0x7ff00000
 80172dc:	39500000 	.word	0x39500000
 80172e0:	46cb      	mov	fp, r9
 80172e2:	d165      	bne.n	80173b0 <_strtod_l+0x9a8>
 80172e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80172e8:	f1ba 0f00 	cmp.w	sl, #0
 80172ec:	d02a      	beq.n	8017344 <_strtod_l+0x93c>
 80172ee:	4aaa      	ldr	r2, [pc, #680]	; (8017598 <_strtod_l+0xb90>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d12b      	bne.n	801734c <_strtod_l+0x944>
 80172f4:	9b04      	ldr	r3, [sp, #16]
 80172f6:	4641      	mov	r1, r8
 80172f8:	b1fb      	cbz	r3, 801733a <_strtod_l+0x932>
 80172fa:	4aa8      	ldr	r2, [pc, #672]	; (801759c <_strtod_l+0xb94>)
 80172fc:	ea09 0202 	and.w	r2, r9, r2
 8017300:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017304:	f04f 30ff 	mov.w	r0, #4294967295
 8017308:	d81a      	bhi.n	8017340 <_strtod_l+0x938>
 801730a:	0d12      	lsrs	r2, r2, #20
 801730c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017310:	fa00 f303 	lsl.w	r3, r0, r3
 8017314:	4299      	cmp	r1, r3
 8017316:	d119      	bne.n	801734c <_strtod_l+0x944>
 8017318:	4ba1      	ldr	r3, [pc, #644]	; (80175a0 <_strtod_l+0xb98>)
 801731a:	459b      	cmp	fp, r3
 801731c:	d102      	bne.n	8017324 <_strtod_l+0x91c>
 801731e:	3101      	adds	r1, #1
 8017320:	f43f adbe 	beq.w	8016ea0 <_strtod_l+0x498>
 8017324:	4b9d      	ldr	r3, [pc, #628]	; (801759c <_strtod_l+0xb94>)
 8017326:	ea0b 0303 	and.w	r3, fp, r3
 801732a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801732e:	f04f 0800 	mov.w	r8, #0
 8017332:	9b04      	ldr	r3, [sp, #16]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d186      	bne.n	8017246 <_strtod_l+0x83e>
 8017338:	e5bc      	b.n	8016eb4 <_strtod_l+0x4ac>
 801733a:	f04f 33ff 	mov.w	r3, #4294967295
 801733e:	e7e9      	b.n	8017314 <_strtod_l+0x90c>
 8017340:	4603      	mov	r3, r0
 8017342:	e7e7      	b.n	8017314 <_strtod_l+0x90c>
 8017344:	ea53 0308 	orrs.w	r3, r3, r8
 8017348:	f43f af6d 	beq.w	8017226 <_strtod_l+0x81e>
 801734c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801734e:	b1db      	cbz	r3, 8017388 <_strtod_l+0x980>
 8017350:	ea13 0f0b 	tst.w	r3, fp
 8017354:	d0ed      	beq.n	8017332 <_strtod_l+0x92a>
 8017356:	9a04      	ldr	r2, [sp, #16]
 8017358:	4640      	mov	r0, r8
 801735a:	4649      	mov	r1, r9
 801735c:	f1ba 0f00 	cmp.w	sl, #0
 8017360:	d016      	beq.n	8017390 <_strtod_l+0x988>
 8017362:	f7ff fb37 	bl	80169d4 <sulp>
 8017366:	ed9d 7b08 	vldr	d7, [sp, #32]
 801736a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801736e:	ec59 8b17 	vmov	r8, r9, d7
 8017372:	e7de      	b.n	8017332 <_strtod_l+0x92a>
 8017374:	4013      	ands	r3, r2
 8017376:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801737a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801737e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017382:	f04f 38ff 	mov.w	r8, #4294967295
 8017386:	e7d4      	b.n	8017332 <_strtod_l+0x92a>
 8017388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801738a:	ea13 0f08 	tst.w	r3, r8
 801738e:	e7e1      	b.n	8017354 <_strtod_l+0x94c>
 8017390:	f7ff fb20 	bl	80169d4 <sulp>
 8017394:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017398:	ee37 7b40 	vsub.f64	d7, d7, d0
 801739c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80173a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80173a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80173ac:	d1c1      	bne.n	8017332 <_strtod_l+0x92a>
 80173ae:	e5ec      	b.n	8016f8a <_strtod_l+0x582>
 80173b0:	4631      	mov	r1, r6
 80173b2:	4628      	mov	r0, r5
 80173b4:	f002 fa4a 	bl	801984c <__ratio>
 80173b8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80173bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80173c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173c4:	d867      	bhi.n	8017496 <_strtod_l+0xa8e>
 80173c6:	f1ba 0f00 	cmp.w	sl, #0
 80173ca:	d044      	beq.n	8017456 <_strtod_l+0xa4e>
 80173cc:	4b75      	ldr	r3, [pc, #468]	; (80175a4 <_strtod_l+0xb9c>)
 80173ce:	2200      	movs	r2, #0
 80173d0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80173d4:	4971      	ldr	r1, [pc, #452]	; (801759c <_strtod_l+0xb94>)
 80173d6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80175b0 <_strtod_l+0xba8>
 80173da:	ea0b 0001 	and.w	r0, fp, r1
 80173de:	4560      	cmp	r0, ip
 80173e0:	900d      	str	r0, [sp, #52]	; 0x34
 80173e2:	f040 808b 	bne.w	80174fc <_strtod_l+0xaf4>
 80173e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80173ea:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80173ee:	ec49 8b10 	vmov	d0, r8, r9
 80173f2:	ec43 2b1c 	vmov	d12, r2, r3
 80173f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80173fa:	f002 f94f 	bl	801969c <__ulp>
 80173fe:	ec49 8b1d 	vmov	d13, r8, r9
 8017402:	eeac db00 	vfma.f64	d13, d12, d0
 8017406:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801740a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801740c:	4963      	ldr	r1, [pc, #396]	; (801759c <_strtod_l+0xb94>)
 801740e:	4a66      	ldr	r2, [pc, #408]	; (80175a8 <_strtod_l+0xba0>)
 8017410:	4019      	ands	r1, r3
 8017412:	4291      	cmp	r1, r2
 8017414:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8017418:	d947      	bls.n	80174aa <_strtod_l+0xaa2>
 801741a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801741c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017420:	4293      	cmp	r3, r2
 8017422:	d103      	bne.n	801742c <_strtod_l+0xa24>
 8017424:	9b08      	ldr	r3, [sp, #32]
 8017426:	3301      	adds	r3, #1
 8017428:	f43f ad3a 	beq.w	8016ea0 <_strtod_l+0x498>
 801742c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80175a0 <_strtod_l+0xb98>
 8017430:	f04f 38ff 	mov.w	r8, #4294967295
 8017434:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017436:	4620      	mov	r0, r4
 8017438:	f001 fe04 	bl	8019044 <_Bfree>
 801743c:	4639      	mov	r1, r7
 801743e:	4620      	mov	r0, r4
 8017440:	f001 fe00 	bl	8019044 <_Bfree>
 8017444:	4631      	mov	r1, r6
 8017446:	4620      	mov	r0, r4
 8017448:	f001 fdfc 	bl	8019044 <_Bfree>
 801744c:	4629      	mov	r1, r5
 801744e:	4620      	mov	r0, r4
 8017450:	f001 fdf8 	bl	8019044 <_Bfree>
 8017454:	e60f      	b.n	8017076 <_strtod_l+0x66e>
 8017456:	f1b8 0f00 	cmp.w	r8, #0
 801745a:	d112      	bne.n	8017482 <_strtod_l+0xa7a>
 801745c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017460:	b9b3      	cbnz	r3, 8017490 <_strtod_l+0xa88>
 8017462:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8017466:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801746a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801746e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8017472:	d401      	bmi.n	8017478 <_strtod_l+0xa70>
 8017474:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017478:	eeb1 7b48 	vneg.f64	d7, d8
 801747c:	ec53 2b17 	vmov	r2, r3, d7
 8017480:	e7a8      	b.n	80173d4 <_strtod_l+0x9cc>
 8017482:	f1b8 0f01 	cmp.w	r8, #1
 8017486:	d103      	bne.n	8017490 <_strtod_l+0xa88>
 8017488:	f1b9 0f00 	cmp.w	r9, #0
 801748c:	f43f ad7d 	beq.w	8016f8a <_strtod_l+0x582>
 8017490:	4b46      	ldr	r3, [pc, #280]	; (80175ac <_strtod_l+0xba4>)
 8017492:	2200      	movs	r2, #0
 8017494:	e79c      	b.n	80173d0 <_strtod_l+0x9c8>
 8017496:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801749a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801749e:	f1ba 0f00 	cmp.w	sl, #0
 80174a2:	d0e9      	beq.n	8017478 <_strtod_l+0xa70>
 80174a4:	ec53 2b18 	vmov	r2, r3, d8
 80174a8:	e794      	b.n	80173d4 <_strtod_l+0x9cc>
 80174aa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80174ae:	9b04      	ldr	r3, [sp, #16]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d1bf      	bne.n	8017434 <_strtod_l+0xa2c>
 80174b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80174b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80174ba:	0d1b      	lsrs	r3, r3, #20
 80174bc:	051b      	lsls	r3, r3, #20
 80174be:	429a      	cmp	r2, r3
 80174c0:	d1b8      	bne.n	8017434 <_strtod_l+0xa2c>
 80174c2:	ec51 0b18 	vmov	r0, r1, d8
 80174c6:	f7e9 f8e7 	bl	8000698 <__aeabi_d2lz>
 80174ca:	f7e9 f89f 	bl	800060c <__aeabi_l2d>
 80174ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80174d2:	ec41 0b17 	vmov	d7, r0, r1
 80174d6:	ea43 0308 	orr.w	r3, r3, r8
 80174da:	ea53 030a 	orrs.w	r3, r3, sl
 80174de:	ee38 8b47 	vsub.f64	d8, d8, d7
 80174e2:	d03e      	beq.n	8017562 <_strtod_l+0xb5a>
 80174e4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80174e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ec:	f53f ace2 	bmi.w	8016eb4 <_strtod_l+0x4ac>
 80174f0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80174f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f8:	dd9c      	ble.n	8017434 <_strtod_l+0xa2c>
 80174fa:	e4db      	b.n	8016eb4 <_strtod_l+0x4ac>
 80174fc:	9904      	ldr	r1, [sp, #16]
 80174fe:	b301      	cbz	r1, 8017542 <_strtod_l+0xb3a>
 8017500:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017502:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017506:	d81c      	bhi.n	8017542 <_strtod_l+0xb3a>
 8017508:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017590 <_strtod_l+0xb88>
 801750c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017514:	d811      	bhi.n	801753a <_strtod_l+0xb32>
 8017516:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801751a:	ee18 3a10 	vmov	r3, s16
 801751e:	2b01      	cmp	r3, #1
 8017520:	bf38      	it	cc
 8017522:	2301      	movcc	r3, #1
 8017524:	ee08 3a10 	vmov	s16, r3
 8017528:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801752c:	f1ba 0f00 	cmp.w	sl, #0
 8017530:	d114      	bne.n	801755c <_strtod_l+0xb54>
 8017532:	eeb1 7b48 	vneg.f64	d7, d8
 8017536:	ec53 2b17 	vmov	r2, r3, d7
 801753a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801753c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8017540:	1a0b      	subs	r3, r1, r0
 8017542:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017546:	ec43 2b1c 	vmov	d12, r2, r3
 801754a:	f002 f8a7 	bl	801969c <__ulp>
 801754e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017552:	eeac 7b00 	vfma.f64	d7, d12, d0
 8017556:	ec59 8b17 	vmov	r8, r9, d7
 801755a:	e7a8      	b.n	80174ae <_strtod_l+0xaa6>
 801755c:	ec53 2b18 	vmov	r2, r3, d8
 8017560:	e7eb      	b.n	801753a <_strtod_l+0xb32>
 8017562:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756a:	f57f af63 	bpl.w	8017434 <_strtod_l+0xa2c>
 801756e:	e4a1      	b.n	8016eb4 <_strtod_l+0x4ac>
 8017570:	2300      	movs	r3, #0
 8017572:	930b      	str	r3, [sp, #44]	; 0x2c
 8017574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017578:	6013      	str	r3, [r2, #0]
 801757a:	f7ff ba8d 	b.w	8016a98 <_strtod_l+0x90>
 801757e:	2a65      	cmp	r2, #101	; 0x65
 8017580:	f43f ab89 	beq.w	8016c96 <_strtod_l+0x28e>
 8017584:	2a45      	cmp	r2, #69	; 0x45
 8017586:	f43f ab86 	beq.w	8016c96 <_strtod_l+0x28e>
 801758a:	2101      	movs	r1, #1
 801758c:	f7ff bbbe 	b.w	8016d0c <_strtod_l+0x304>
 8017590:	ffc00000 	.word	0xffc00000
 8017594:	41dfffff 	.word	0x41dfffff
 8017598:	000fffff 	.word	0x000fffff
 801759c:	7ff00000 	.word	0x7ff00000
 80175a0:	7fefffff 	.word	0x7fefffff
 80175a4:	3ff00000 	.word	0x3ff00000
 80175a8:	7c9fffff 	.word	0x7c9fffff
 80175ac:	bff00000 	.word	0xbff00000
 80175b0:	7fe00000 	.word	0x7fe00000

080175b4 <_strtod_r>:
 80175b4:	4b01      	ldr	r3, [pc, #4]	; (80175bc <_strtod_r+0x8>)
 80175b6:	f7ff ba27 	b.w	8016a08 <_strtod_l>
 80175ba:	bf00      	nop
 80175bc:	200002bc 	.word	0x200002bc

080175c0 <_strtol_l.isra.0>:
 80175c0:	2b01      	cmp	r3, #1
 80175c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175c6:	d001      	beq.n	80175cc <_strtol_l.isra.0+0xc>
 80175c8:	2b24      	cmp	r3, #36	; 0x24
 80175ca:	d906      	bls.n	80175da <_strtol_l.isra.0+0x1a>
 80175cc:	f7fe fac8 	bl	8015b60 <__errno>
 80175d0:	2316      	movs	r3, #22
 80175d2:	6003      	str	r3, [r0, #0]
 80175d4:	2000      	movs	r0, #0
 80175d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175da:	4f3a      	ldr	r7, [pc, #232]	; (80176c4 <_strtol_l.isra.0+0x104>)
 80175dc:	468e      	mov	lr, r1
 80175de:	4676      	mov	r6, lr
 80175e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80175e4:	5de5      	ldrb	r5, [r4, r7]
 80175e6:	f015 0508 	ands.w	r5, r5, #8
 80175ea:	d1f8      	bne.n	80175de <_strtol_l.isra.0+0x1e>
 80175ec:	2c2d      	cmp	r4, #45	; 0x2d
 80175ee:	d134      	bne.n	801765a <_strtol_l.isra.0+0x9a>
 80175f0:	f89e 4000 	ldrb.w	r4, [lr]
 80175f4:	f04f 0801 	mov.w	r8, #1
 80175f8:	f106 0e02 	add.w	lr, r6, #2
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d05c      	beq.n	80176ba <_strtol_l.isra.0+0xfa>
 8017600:	2b10      	cmp	r3, #16
 8017602:	d10c      	bne.n	801761e <_strtol_l.isra.0+0x5e>
 8017604:	2c30      	cmp	r4, #48	; 0x30
 8017606:	d10a      	bne.n	801761e <_strtol_l.isra.0+0x5e>
 8017608:	f89e 4000 	ldrb.w	r4, [lr]
 801760c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017610:	2c58      	cmp	r4, #88	; 0x58
 8017612:	d14d      	bne.n	80176b0 <_strtol_l.isra.0+0xf0>
 8017614:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017618:	2310      	movs	r3, #16
 801761a:	f10e 0e02 	add.w	lr, lr, #2
 801761e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017622:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017626:	2600      	movs	r6, #0
 8017628:	fbbc f9f3 	udiv	r9, ip, r3
 801762c:	4635      	mov	r5, r6
 801762e:	fb03 ca19 	mls	sl, r3, r9, ip
 8017632:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017636:	2f09      	cmp	r7, #9
 8017638:	d818      	bhi.n	801766c <_strtol_l.isra.0+0xac>
 801763a:	463c      	mov	r4, r7
 801763c:	42a3      	cmp	r3, r4
 801763e:	dd24      	ble.n	801768a <_strtol_l.isra.0+0xca>
 8017640:	2e00      	cmp	r6, #0
 8017642:	db1f      	blt.n	8017684 <_strtol_l.isra.0+0xc4>
 8017644:	45a9      	cmp	r9, r5
 8017646:	d31d      	bcc.n	8017684 <_strtol_l.isra.0+0xc4>
 8017648:	d101      	bne.n	801764e <_strtol_l.isra.0+0x8e>
 801764a:	45a2      	cmp	sl, r4
 801764c:	db1a      	blt.n	8017684 <_strtol_l.isra.0+0xc4>
 801764e:	fb05 4503 	mla	r5, r5, r3, r4
 8017652:	2601      	movs	r6, #1
 8017654:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017658:	e7eb      	b.n	8017632 <_strtol_l.isra.0+0x72>
 801765a:	2c2b      	cmp	r4, #43	; 0x2b
 801765c:	bf08      	it	eq
 801765e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017662:	46a8      	mov	r8, r5
 8017664:	bf08      	it	eq
 8017666:	f106 0e02 	addeq.w	lr, r6, #2
 801766a:	e7c7      	b.n	80175fc <_strtol_l.isra.0+0x3c>
 801766c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017670:	2f19      	cmp	r7, #25
 8017672:	d801      	bhi.n	8017678 <_strtol_l.isra.0+0xb8>
 8017674:	3c37      	subs	r4, #55	; 0x37
 8017676:	e7e1      	b.n	801763c <_strtol_l.isra.0+0x7c>
 8017678:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801767c:	2f19      	cmp	r7, #25
 801767e:	d804      	bhi.n	801768a <_strtol_l.isra.0+0xca>
 8017680:	3c57      	subs	r4, #87	; 0x57
 8017682:	e7db      	b.n	801763c <_strtol_l.isra.0+0x7c>
 8017684:	f04f 36ff 	mov.w	r6, #4294967295
 8017688:	e7e4      	b.n	8017654 <_strtol_l.isra.0+0x94>
 801768a:	2e00      	cmp	r6, #0
 801768c:	da05      	bge.n	801769a <_strtol_l.isra.0+0xda>
 801768e:	2322      	movs	r3, #34	; 0x22
 8017690:	6003      	str	r3, [r0, #0]
 8017692:	4665      	mov	r5, ip
 8017694:	b942      	cbnz	r2, 80176a8 <_strtol_l.isra.0+0xe8>
 8017696:	4628      	mov	r0, r5
 8017698:	e79d      	b.n	80175d6 <_strtol_l.isra.0+0x16>
 801769a:	f1b8 0f00 	cmp.w	r8, #0
 801769e:	d000      	beq.n	80176a2 <_strtol_l.isra.0+0xe2>
 80176a0:	426d      	negs	r5, r5
 80176a2:	2a00      	cmp	r2, #0
 80176a4:	d0f7      	beq.n	8017696 <_strtol_l.isra.0+0xd6>
 80176a6:	b10e      	cbz	r6, 80176ac <_strtol_l.isra.0+0xec>
 80176a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80176ac:	6011      	str	r1, [r2, #0]
 80176ae:	e7f2      	b.n	8017696 <_strtol_l.isra.0+0xd6>
 80176b0:	2430      	movs	r4, #48	; 0x30
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d1b3      	bne.n	801761e <_strtol_l.isra.0+0x5e>
 80176b6:	2308      	movs	r3, #8
 80176b8:	e7b1      	b.n	801761e <_strtol_l.isra.0+0x5e>
 80176ba:	2c30      	cmp	r4, #48	; 0x30
 80176bc:	d0a4      	beq.n	8017608 <_strtol_l.isra.0+0x48>
 80176be:	230a      	movs	r3, #10
 80176c0:	e7ad      	b.n	801761e <_strtol_l.isra.0+0x5e>
 80176c2:	bf00      	nop
 80176c4:	0801c6c9 	.word	0x0801c6c9

080176c8 <_strtol_r>:
 80176c8:	f7ff bf7a 	b.w	80175c0 <_strtol_l.isra.0>

080176cc <__swbuf_r>:
 80176cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ce:	460e      	mov	r6, r1
 80176d0:	4614      	mov	r4, r2
 80176d2:	4605      	mov	r5, r0
 80176d4:	b118      	cbz	r0, 80176de <__swbuf_r+0x12>
 80176d6:	6983      	ldr	r3, [r0, #24]
 80176d8:	b90b      	cbnz	r3, 80176de <__swbuf_r+0x12>
 80176da:	f000 ffe1 	bl	80186a0 <__sinit>
 80176de:	4b21      	ldr	r3, [pc, #132]	; (8017764 <__swbuf_r+0x98>)
 80176e0:	429c      	cmp	r4, r3
 80176e2:	d12b      	bne.n	801773c <__swbuf_r+0x70>
 80176e4:	686c      	ldr	r4, [r5, #4]
 80176e6:	69a3      	ldr	r3, [r4, #24]
 80176e8:	60a3      	str	r3, [r4, #8]
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	071a      	lsls	r2, r3, #28
 80176ee:	d52f      	bpl.n	8017750 <__swbuf_r+0x84>
 80176f0:	6923      	ldr	r3, [r4, #16]
 80176f2:	b36b      	cbz	r3, 8017750 <__swbuf_r+0x84>
 80176f4:	6923      	ldr	r3, [r4, #16]
 80176f6:	6820      	ldr	r0, [r4, #0]
 80176f8:	1ac0      	subs	r0, r0, r3
 80176fa:	6963      	ldr	r3, [r4, #20]
 80176fc:	b2f6      	uxtb	r6, r6
 80176fe:	4283      	cmp	r3, r0
 8017700:	4637      	mov	r7, r6
 8017702:	dc04      	bgt.n	801770e <__swbuf_r+0x42>
 8017704:	4621      	mov	r1, r4
 8017706:	4628      	mov	r0, r5
 8017708:	f000 ff36 	bl	8018578 <_fflush_r>
 801770c:	bb30      	cbnz	r0, 801775c <__swbuf_r+0x90>
 801770e:	68a3      	ldr	r3, [r4, #8]
 8017710:	3b01      	subs	r3, #1
 8017712:	60a3      	str	r3, [r4, #8]
 8017714:	6823      	ldr	r3, [r4, #0]
 8017716:	1c5a      	adds	r2, r3, #1
 8017718:	6022      	str	r2, [r4, #0]
 801771a:	701e      	strb	r6, [r3, #0]
 801771c:	6963      	ldr	r3, [r4, #20]
 801771e:	3001      	adds	r0, #1
 8017720:	4283      	cmp	r3, r0
 8017722:	d004      	beq.n	801772e <__swbuf_r+0x62>
 8017724:	89a3      	ldrh	r3, [r4, #12]
 8017726:	07db      	lsls	r3, r3, #31
 8017728:	d506      	bpl.n	8017738 <__swbuf_r+0x6c>
 801772a:	2e0a      	cmp	r6, #10
 801772c:	d104      	bne.n	8017738 <__swbuf_r+0x6c>
 801772e:	4621      	mov	r1, r4
 8017730:	4628      	mov	r0, r5
 8017732:	f000 ff21 	bl	8018578 <_fflush_r>
 8017736:	b988      	cbnz	r0, 801775c <__swbuf_r+0x90>
 8017738:	4638      	mov	r0, r7
 801773a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801773c:	4b0a      	ldr	r3, [pc, #40]	; (8017768 <__swbuf_r+0x9c>)
 801773e:	429c      	cmp	r4, r3
 8017740:	d101      	bne.n	8017746 <__swbuf_r+0x7a>
 8017742:	68ac      	ldr	r4, [r5, #8]
 8017744:	e7cf      	b.n	80176e6 <__swbuf_r+0x1a>
 8017746:	4b09      	ldr	r3, [pc, #36]	; (801776c <__swbuf_r+0xa0>)
 8017748:	429c      	cmp	r4, r3
 801774a:	bf08      	it	eq
 801774c:	68ec      	ldreq	r4, [r5, #12]
 801774e:	e7ca      	b.n	80176e6 <__swbuf_r+0x1a>
 8017750:	4621      	mov	r1, r4
 8017752:	4628      	mov	r0, r5
 8017754:	f000 f80c 	bl	8017770 <__swsetup_r>
 8017758:	2800      	cmp	r0, #0
 801775a:	d0cb      	beq.n	80176f4 <__swbuf_r+0x28>
 801775c:	f04f 37ff 	mov.w	r7, #4294967295
 8017760:	e7ea      	b.n	8017738 <__swbuf_r+0x6c>
 8017762:	bf00      	nop
 8017764:	0801c880 	.word	0x0801c880
 8017768:	0801c8a0 	.word	0x0801c8a0
 801776c:	0801c860 	.word	0x0801c860

08017770 <__swsetup_r>:
 8017770:	4b32      	ldr	r3, [pc, #200]	; (801783c <__swsetup_r+0xcc>)
 8017772:	b570      	push	{r4, r5, r6, lr}
 8017774:	681d      	ldr	r5, [r3, #0]
 8017776:	4606      	mov	r6, r0
 8017778:	460c      	mov	r4, r1
 801777a:	b125      	cbz	r5, 8017786 <__swsetup_r+0x16>
 801777c:	69ab      	ldr	r3, [r5, #24]
 801777e:	b913      	cbnz	r3, 8017786 <__swsetup_r+0x16>
 8017780:	4628      	mov	r0, r5
 8017782:	f000 ff8d 	bl	80186a0 <__sinit>
 8017786:	4b2e      	ldr	r3, [pc, #184]	; (8017840 <__swsetup_r+0xd0>)
 8017788:	429c      	cmp	r4, r3
 801778a:	d10f      	bne.n	80177ac <__swsetup_r+0x3c>
 801778c:	686c      	ldr	r4, [r5, #4]
 801778e:	89a3      	ldrh	r3, [r4, #12]
 8017790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017794:	0719      	lsls	r1, r3, #28
 8017796:	d42c      	bmi.n	80177f2 <__swsetup_r+0x82>
 8017798:	06dd      	lsls	r5, r3, #27
 801779a:	d411      	bmi.n	80177c0 <__swsetup_r+0x50>
 801779c:	2309      	movs	r3, #9
 801779e:	6033      	str	r3, [r6, #0]
 80177a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80177a4:	81a3      	strh	r3, [r4, #12]
 80177a6:	f04f 30ff 	mov.w	r0, #4294967295
 80177aa:	e03e      	b.n	801782a <__swsetup_r+0xba>
 80177ac:	4b25      	ldr	r3, [pc, #148]	; (8017844 <__swsetup_r+0xd4>)
 80177ae:	429c      	cmp	r4, r3
 80177b0:	d101      	bne.n	80177b6 <__swsetup_r+0x46>
 80177b2:	68ac      	ldr	r4, [r5, #8]
 80177b4:	e7eb      	b.n	801778e <__swsetup_r+0x1e>
 80177b6:	4b24      	ldr	r3, [pc, #144]	; (8017848 <__swsetup_r+0xd8>)
 80177b8:	429c      	cmp	r4, r3
 80177ba:	bf08      	it	eq
 80177bc:	68ec      	ldreq	r4, [r5, #12]
 80177be:	e7e6      	b.n	801778e <__swsetup_r+0x1e>
 80177c0:	0758      	lsls	r0, r3, #29
 80177c2:	d512      	bpl.n	80177ea <__swsetup_r+0x7a>
 80177c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177c6:	b141      	cbz	r1, 80177da <__swsetup_r+0x6a>
 80177c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177cc:	4299      	cmp	r1, r3
 80177ce:	d002      	beq.n	80177d6 <__swsetup_r+0x66>
 80177d0:	4630      	mov	r0, r6
 80177d2:	f002 f8c3 	bl	801995c <_free_r>
 80177d6:	2300      	movs	r3, #0
 80177d8:	6363      	str	r3, [r4, #52]	; 0x34
 80177da:	89a3      	ldrh	r3, [r4, #12]
 80177dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177e0:	81a3      	strh	r3, [r4, #12]
 80177e2:	2300      	movs	r3, #0
 80177e4:	6063      	str	r3, [r4, #4]
 80177e6:	6923      	ldr	r3, [r4, #16]
 80177e8:	6023      	str	r3, [r4, #0]
 80177ea:	89a3      	ldrh	r3, [r4, #12]
 80177ec:	f043 0308 	orr.w	r3, r3, #8
 80177f0:	81a3      	strh	r3, [r4, #12]
 80177f2:	6923      	ldr	r3, [r4, #16]
 80177f4:	b94b      	cbnz	r3, 801780a <__swsetup_r+0x9a>
 80177f6:	89a3      	ldrh	r3, [r4, #12]
 80177f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80177fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017800:	d003      	beq.n	801780a <__swsetup_r+0x9a>
 8017802:	4621      	mov	r1, r4
 8017804:	4630      	mov	r0, r6
 8017806:	f001 fb83 	bl	8018f10 <__smakebuf_r>
 801780a:	89a0      	ldrh	r0, [r4, #12]
 801780c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017810:	f010 0301 	ands.w	r3, r0, #1
 8017814:	d00a      	beq.n	801782c <__swsetup_r+0xbc>
 8017816:	2300      	movs	r3, #0
 8017818:	60a3      	str	r3, [r4, #8]
 801781a:	6963      	ldr	r3, [r4, #20]
 801781c:	425b      	negs	r3, r3
 801781e:	61a3      	str	r3, [r4, #24]
 8017820:	6923      	ldr	r3, [r4, #16]
 8017822:	b943      	cbnz	r3, 8017836 <__swsetup_r+0xc6>
 8017824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017828:	d1ba      	bne.n	80177a0 <__swsetup_r+0x30>
 801782a:	bd70      	pop	{r4, r5, r6, pc}
 801782c:	0781      	lsls	r1, r0, #30
 801782e:	bf58      	it	pl
 8017830:	6963      	ldrpl	r3, [r4, #20]
 8017832:	60a3      	str	r3, [r4, #8]
 8017834:	e7f4      	b.n	8017820 <__swsetup_r+0xb0>
 8017836:	2000      	movs	r0, #0
 8017838:	e7f7      	b.n	801782a <__swsetup_r+0xba>
 801783a:	bf00      	nop
 801783c:	20000254 	.word	0x20000254
 8017840:	0801c880 	.word	0x0801c880
 8017844:	0801c8a0 	.word	0x0801c8a0
 8017848:	0801c860 	.word	0x0801c860

0801784c <quorem>:
 801784c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017850:	6903      	ldr	r3, [r0, #16]
 8017852:	690c      	ldr	r4, [r1, #16]
 8017854:	42a3      	cmp	r3, r4
 8017856:	4607      	mov	r7, r0
 8017858:	f2c0 8081 	blt.w	801795e <quorem+0x112>
 801785c:	3c01      	subs	r4, #1
 801785e:	f101 0814 	add.w	r8, r1, #20
 8017862:	f100 0514 	add.w	r5, r0, #20
 8017866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801786a:	9301      	str	r3, [sp, #4]
 801786c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017874:	3301      	adds	r3, #1
 8017876:	429a      	cmp	r2, r3
 8017878:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801787c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017880:	fbb2 f6f3 	udiv	r6, r2, r3
 8017884:	d331      	bcc.n	80178ea <quorem+0x9e>
 8017886:	f04f 0e00 	mov.w	lr, #0
 801788a:	4640      	mov	r0, r8
 801788c:	46ac      	mov	ip, r5
 801788e:	46f2      	mov	sl, lr
 8017890:	f850 2b04 	ldr.w	r2, [r0], #4
 8017894:	b293      	uxth	r3, r2
 8017896:	fb06 e303 	mla	r3, r6, r3, lr
 801789a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801789e:	b29b      	uxth	r3, r3
 80178a0:	ebaa 0303 	sub.w	r3, sl, r3
 80178a4:	0c12      	lsrs	r2, r2, #16
 80178a6:	f8dc a000 	ldr.w	sl, [ip]
 80178aa:	fb06 e202 	mla	r2, r6, r2, lr
 80178ae:	fa13 f38a 	uxtah	r3, r3, sl
 80178b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80178b6:	fa1f fa82 	uxth.w	sl, r2
 80178ba:	f8dc 2000 	ldr.w	r2, [ip]
 80178be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80178c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80178c6:	b29b      	uxth	r3, r3
 80178c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178cc:	4581      	cmp	r9, r0
 80178ce:	f84c 3b04 	str.w	r3, [ip], #4
 80178d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80178d6:	d2db      	bcs.n	8017890 <quorem+0x44>
 80178d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80178dc:	b92b      	cbnz	r3, 80178ea <quorem+0x9e>
 80178de:	9b01      	ldr	r3, [sp, #4]
 80178e0:	3b04      	subs	r3, #4
 80178e2:	429d      	cmp	r5, r3
 80178e4:	461a      	mov	r2, r3
 80178e6:	d32e      	bcc.n	8017946 <quorem+0xfa>
 80178e8:	613c      	str	r4, [r7, #16]
 80178ea:	4638      	mov	r0, r7
 80178ec:	f001 fe32 	bl	8019554 <__mcmp>
 80178f0:	2800      	cmp	r0, #0
 80178f2:	db24      	blt.n	801793e <quorem+0xf2>
 80178f4:	3601      	adds	r6, #1
 80178f6:	4628      	mov	r0, r5
 80178f8:	f04f 0c00 	mov.w	ip, #0
 80178fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8017900:	f8d0 e000 	ldr.w	lr, [r0]
 8017904:	b293      	uxth	r3, r2
 8017906:	ebac 0303 	sub.w	r3, ip, r3
 801790a:	0c12      	lsrs	r2, r2, #16
 801790c:	fa13 f38e 	uxtah	r3, r3, lr
 8017910:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017914:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017918:	b29b      	uxth	r3, r3
 801791a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801791e:	45c1      	cmp	r9, r8
 8017920:	f840 3b04 	str.w	r3, [r0], #4
 8017924:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017928:	d2e8      	bcs.n	80178fc <quorem+0xb0>
 801792a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801792e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017932:	b922      	cbnz	r2, 801793e <quorem+0xf2>
 8017934:	3b04      	subs	r3, #4
 8017936:	429d      	cmp	r5, r3
 8017938:	461a      	mov	r2, r3
 801793a:	d30a      	bcc.n	8017952 <quorem+0x106>
 801793c:	613c      	str	r4, [r7, #16]
 801793e:	4630      	mov	r0, r6
 8017940:	b003      	add	sp, #12
 8017942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017946:	6812      	ldr	r2, [r2, #0]
 8017948:	3b04      	subs	r3, #4
 801794a:	2a00      	cmp	r2, #0
 801794c:	d1cc      	bne.n	80178e8 <quorem+0x9c>
 801794e:	3c01      	subs	r4, #1
 8017950:	e7c7      	b.n	80178e2 <quorem+0x96>
 8017952:	6812      	ldr	r2, [r2, #0]
 8017954:	3b04      	subs	r3, #4
 8017956:	2a00      	cmp	r2, #0
 8017958:	d1f0      	bne.n	801793c <quorem+0xf0>
 801795a:	3c01      	subs	r4, #1
 801795c:	e7eb      	b.n	8017936 <quorem+0xea>
 801795e:	2000      	movs	r0, #0
 8017960:	e7ee      	b.n	8017940 <quorem+0xf4>
 8017962:	0000      	movs	r0, r0
 8017964:	0000      	movs	r0, r0
	...

08017968 <_dtoa_r>:
 8017968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796c:	ec59 8b10 	vmov	r8, r9, d0
 8017970:	b095      	sub	sp, #84	; 0x54
 8017972:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017974:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8017976:	9107      	str	r1, [sp, #28]
 8017978:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801797c:	4606      	mov	r6, r0
 801797e:	9209      	str	r2, [sp, #36]	; 0x24
 8017980:	9310      	str	r3, [sp, #64]	; 0x40
 8017982:	b975      	cbnz	r5, 80179a2 <_dtoa_r+0x3a>
 8017984:	2010      	movs	r0, #16
 8017986:	f001 fb03 	bl	8018f90 <malloc>
 801798a:	4602      	mov	r2, r0
 801798c:	6270      	str	r0, [r6, #36]	; 0x24
 801798e:	b920      	cbnz	r0, 801799a <_dtoa_r+0x32>
 8017990:	4bab      	ldr	r3, [pc, #684]	; (8017c40 <_dtoa_r+0x2d8>)
 8017992:	21ea      	movs	r1, #234	; 0xea
 8017994:	48ab      	ldr	r0, [pc, #684]	; (8017c44 <_dtoa_r+0x2dc>)
 8017996:	f002 fbcf 	bl	801a138 <__assert_func>
 801799a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801799e:	6005      	str	r5, [r0, #0]
 80179a0:	60c5      	str	r5, [r0, #12]
 80179a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80179a4:	6819      	ldr	r1, [r3, #0]
 80179a6:	b151      	cbz	r1, 80179be <_dtoa_r+0x56>
 80179a8:	685a      	ldr	r2, [r3, #4]
 80179aa:	604a      	str	r2, [r1, #4]
 80179ac:	2301      	movs	r3, #1
 80179ae:	4093      	lsls	r3, r2
 80179b0:	608b      	str	r3, [r1, #8]
 80179b2:	4630      	mov	r0, r6
 80179b4:	f001 fb46 	bl	8019044 <_Bfree>
 80179b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80179ba:	2200      	movs	r2, #0
 80179bc:	601a      	str	r2, [r3, #0]
 80179be:	f1b9 0300 	subs.w	r3, r9, #0
 80179c2:	bfbb      	ittet	lt
 80179c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80179c8:	9303      	strlt	r3, [sp, #12]
 80179ca:	2300      	movge	r3, #0
 80179cc:	2201      	movlt	r2, #1
 80179ce:	bfac      	ite	ge
 80179d0:	6023      	strge	r3, [r4, #0]
 80179d2:	6022      	strlt	r2, [r4, #0]
 80179d4:	4b9c      	ldr	r3, [pc, #624]	; (8017c48 <_dtoa_r+0x2e0>)
 80179d6:	9c03      	ldr	r4, [sp, #12]
 80179d8:	43a3      	bics	r3, r4
 80179da:	d11a      	bne.n	8017a12 <_dtoa_r+0xaa>
 80179dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80179de:	f242 730f 	movw	r3, #9999	; 0x270f
 80179e2:	6013      	str	r3, [r2, #0]
 80179e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80179e8:	ea53 0308 	orrs.w	r3, r3, r8
 80179ec:	f000 8512 	beq.w	8018414 <_dtoa_r+0xaac>
 80179f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80179f2:	b953      	cbnz	r3, 8017a0a <_dtoa_r+0xa2>
 80179f4:	4b95      	ldr	r3, [pc, #596]	; (8017c4c <_dtoa_r+0x2e4>)
 80179f6:	e01f      	b.n	8017a38 <_dtoa_r+0xd0>
 80179f8:	4b95      	ldr	r3, [pc, #596]	; (8017c50 <_dtoa_r+0x2e8>)
 80179fa:	9300      	str	r3, [sp, #0]
 80179fc:	3308      	adds	r3, #8
 80179fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017a00:	6013      	str	r3, [r2, #0]
 8017a02:	9800      	ldr	r0, [sp, #0]
 8017a04:	b015      	add	sp, #84	; 0x54
 8017a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0a:	4b90      	ldr	r3, [pc, #576]	; (8017c4c <_dtoa_r+0x2e4>)
 8017a0c:	9300      	str	r3, [sp, #0]
 8017a0e:	3303      	adds	r3, #3
 8017a10:	e7f5      	b.n	80179fe <_dtoa_r+0x96>
 8017a12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017a16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017a22:	d10b      	bne.n	8017a3c <_dtoa_r+0xd4>
 8017a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a26:	2301      	movs	r3, #1
 8017a28:	6013      	str	r3, [r2, #0]
 8017a2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	f000 84ee 	beq.w	801840e <_dtoa_r+0xaa6>
 8017a32:	4888      	ldr	r0, [pc, #544]	; (8017c54 <_dtoa_r+0x2ec>)
 8017a34:	6018      	str	r0, [r3, #0]
 8017a36:	1e43      	subs	r3, r0, #1
 8017a38:	9300      	str	r3, [sp, #0]
 8017a3a:	e7e2      	b.n	8017a02 <_dtoa_r+0x9a>
 8017a3c:	a913      	add	r1, sp, #76	; 0x4c
 8017a3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017a42:	aa12      	add	r2, sp, #72	; 0x48
 8017a44:	4630      	mov	r0, r6
 8017a46:	f001 fea5 	bl	8019794 <__d2b>
 8017a4a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017a4e:	4605      	mov	r5, r0
 8017a50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017a52:	2900      	cmp	r1, #0
 8017a54:	d047      	beq.n	8017ae6 <_dtoa_r+0x17e>
 8017a56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017a58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017a5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017a60:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8017a64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017a68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017a6c:	2400      	movs	r4, #0
 8017a6e:	ec43 2b16 	vmov	d6, r2, r3
 8017a72:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017a76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8017c28 <_dtoa_r+0x2c0>
 8017a7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017a7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8017c30 <_dtoa_r+0x2c8>
 8017a82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017a86:	eeb0 7b46 	vmov.f64	d7, d6
 8017a8a:	ee06 1a90 	vmov	s13, r1
 8017a8e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8017a92:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017c38 <_dtoa_r+0x2d0>
 8017a96:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017a9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017a9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa6:	ee16 ba90 	vmov	fp, s13
 8017aaa:	9411      	str	r4, [sp, #68]	; 0x44
 8017aac:	d508      	bpl.n	8017ac0 <_dtoa_r+0x158>
 8017aae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017ab2:	eeb4 6b47 	vcmp.f64	d6, d7
 8017ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aba:	bf18      	it	ne
 8017abc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8017ac0:	f1bb 0f16 	cmp.w	fp, #22
 8017ac4:	d832      	bhi.n	8017b2c <_dtoa_r+0x1c4>
 8017ac6:	4b64      	ldr	r3, [pc, #400]	; (8017c58 <_dtoa_r+0x2f0>)
 8017ac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017acc:	ed93 7b00 	vldr	d7, [r3]
 8017ad0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017ad4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017adc:	d501      	bpl.n	8017ae2 <_dtoa_r+0x17a>
 8017ade:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	e023      	b.n	8017b2e <_dtoa_r+0x1c6>
 8017ae6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017ae8:	4401      	add	r1, r0
 8017aea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017aee:	2b20      	cmp	r3, #32
 8017af0:	bfc3      	ittte	gt
 8017af2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017af6:	fa04 f303 	lslgt.w	r3, r4, r3
 8017afa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017afe:	f1c3 0320 	rsble	r3, r3, #32
 8017b02:	bfc6      	itte	gt
 8017b04:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017b08:	ea43 0308 	orrgt.w	r3, r3, r8
 8017b0c:	fa08 f303 	lslle.w	r3, r8, r3
 8017b10:	ee07 3a90 	vmov	s15, r3
 8017b14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017b18:	3901      	subs	r1, #1
 8017b1a:	ed8d 7b00 	vstr	d7, [sp]
 8017b1e:	9c01      	ldr	r4, [sp, #4]
 8017b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017b28:	2401      	movs	r4, #1
 8017b2a:	e7a0      	b.n	8017a6e <_dtoa_r+0x106>
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b30:	1a43      	subs	r3, r0, r1
 8017b32:	1e5a      	subs	r2, r3, #1
 8017b34:	bf45      	ittet	mi
 8017b36:	f1c3 0301 	rsbmi	r3, r3, #1
 8017b3a:	9305      	strmi	r3, [sp, #20]
 8017b3c:	2300      	movpl	r3, #0
 8017b3e:	2300      	movmi	r3, #0
 8017b40:	9206      	str	r2, [sp, #24]
 8017b42:	bf54      	ite	pl
 8017b44:	9305      	strpl	r3, [sp, #20]
 8017b46:	9306      	strmi	r3, [sp, #24]
 8017b48:	f1bb 0f00 	cmp.w	fp, #0
 8017b4c:	db18      	blt.n	8017b80 <_dtoa_r+0x218>
 8017b4e:	9b06      	ldr	r3, [sp, #24]
 8017b50:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017b54:	445b      	add	r3, fp
 8017b56:	9306      	str	r3, [sp, #24]
 8017b58:	2300      	movs	r3, #0
 8017b5a:	9a07      	ldr	r2, [sp, #28]
 8017b5c:	2a09      	cmp	r2, #9
 8017b5e:	d849      	bhi.n	8017bf4 <_dtoa_r+0x28c>
 8017b60:	2a05      	cmp	r2, #5
 8017b62:	bfc4      	itt	gt
 8017b64:	3a04      	subgt	r2, #4
 8017b66:	9207      	strgt	r2, [sp, #28]
 8017b68:	9a07      	ldr	r2, [sp, #28]
 8017b6a:	f1a2 0202 	sub.w	r2, r2, #2
 8017b6e:	bfcc      	ite	gt
 8017b70:	2400      	movgt	r4, #0
 8017b72:	2401      	movle	r4, #1
 8017b74:	2a03      	cmp	r2, #3
 8017b76:	d848      	bhi.n	8017c0a <_dtoa_r+0x2a2>
 8017b78:	e8df f002 	tbb	[pc, r2]
 8017b7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8017b80:	9b05      	ldr	r3, [sp, #20]
 8017b82:	2200      	movs	r2, #0
 8017b84:	eba3 030b 	sub.w	r3, r3, fp
 8017b88:	9305      	str	r3, [sp, #20]
 8017b8a:	920e      	str	r2, [sp, #56]	; 0x38
 8017b8c:	f1cb 0300 	rsb	r3, fp, #0
 8017b90:	e7e3      	b.n	8017b5a <_dtoa_r+0x1f2>
 8017b92:	2200      	movs	r2, #0
 8017b94:	9208      	str	r2, [sp, #32]
 8017b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b98:	2a00      	cmp	r2, #0
 8017b9a:	dc39      	bgt.n	8017c10 <_dtoa_r+0x2a8>
 8017b9c:	f04f 0a01 	mov.w	sl, #1
 8017ba0:	46d1      	mov	r9, sl
 8017ba2:	4652      	mov	r2, sl
 8017ba4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017ba8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017baa:	2100      	movs	r1, #0
 8017bac:	6079      	str	r1, [r7, #4]
 8017bae:	2004      	movs	r0, #4
 8017bb0:	f100 0c14 	add.w	ip, r0, #20
 8017bb4:	4594      	cmp	ip, r2
 8017bb6:	6879      	ldr	r1, [r7, #4]
 8017bb8:	d92f      	bls.n	8017c1a <_dtoa_r+0x2b2>
 8017bba:	4630      	mov	r0, r6
 8017bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8017bbe:	f001 fa01 	bl	8018fc4 <_Balloc>
 8017bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017bc4:	9000      	str	r0, [sp, #0]
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	d149      	bne.n	8017c60 <_dtoa_r+0x2f8>
 8017bcc:	4b23      	ldr	r3, [pc, #140]	; (8017c5c <_dtoa_r+0x2f4>)
 8017bce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017bd2:	e6df      	b.n	8017994 <_dtoa_r+0x2c>
 8017bd4:	2201      	movs	r2, #1
 8017bd6:	e7dd      	b.n	8017b94 <_dtoa_r+0x22c>
 8017bd8:	2200      	movs	r2, #0
 8017bda:	9208      	str	r2, [sp, #32]
 8017bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bde:	eb0b 0a02 	add.w	sl, fp, r2
 8017be2:	f10a 0901 	add.w	r9, sl, #1
 8017be6:	464a      	mov	r2, r9
 8017be8:	2a01      	cmp	r2, #1
 8017bea:	bfb8      	it	lt
 8017bec:	2201      	movlt	r2, #1
 8017bee:	e7db      	b.n	8017ba8 <_dtoa_r+0x240>
 8017bf0:	2201      	movs	r2, #1
 8017bf2:	e7f2      	b.n	8017bda <_dtoa_r+0x272>
 8017bf4:	2401      	movs	r4, #1
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8017bfc:	f04f 3aff 	mov.w	sl, #4294967295
 8017c00:	2100      	movs	r1, #0
 8017c02:	46d1      	mov	r9, sl
 8017c04:	2212      	movs	r2, #18
 8017c06:	9109      	str	r1, [sp, #36]	; 0x24
 8017c08:	e7ce      	b.n	8017ba8 <_dtoa_r+0x240>
 8017c0a:	2201      	movs	r2, #1
 8017c0c:	9208      	str	r2, [sp, #32]
 8017c0e:	e7f5      	b.n	8017bfc <_dtoa_r+0x294>
 8017c10:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8017c14:	46d1      	mov	r9, sl
 8017c16:	4652      	mov	r2, sl
 8017c18:	e7c6      	b.n	8017ba8 <_dtoa_r+0x240>
 8017c1a:	3101      	adds	r1, #1
 8017c1c:	6079      	str	r1, [r7, #4]
 8017c1e:	0040      	lsls	r0, r0, #1
 8017c20:	e7c6      	b.n	8017bb0 <_dtoa_r+0x248>
 8017c22:	bf00      	nop
 8017c24:	f3af 8000 	nop.w
 8017c28:	636f4361 	.word	0x636f4361
 8017c2c:	3fd287a7 	.word	0x3fd287a7
 8017c30:	8b60c8b3 	.word	0x8b60c8b3
 8017c34:	3fc68a28 	.word	0x3fc68a28
 8017c38:	509f79fb 	.word	0x509f79fb
 8017c3c:	3fd34413 	.word	0x3fd34413
 8017c40:	0801c7d6 	.word	0x0801c7d6
 8017c44:	0801c7ed 	.word	0x0801c7ed
 8017c48:	7ff00000 	.word	0x7ff00000
 8017c4c:	0801c7d2 	.word	0x0801c7d2
 8017c50:	0801c7c9 	.word	0x0801c7c9
 8017c54:	0801c64d 	.word	0x0801c64d
 8017c58:	0801c9c8 	.word	0x0801c9c8
 8017c5c:	0801c84c 	.word	0x0801c84c
 8017c60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017c62:	9900      	ldr	r1, [sp, #0]
 8017c64:	6011      	str	r1, [r2, #0]
 8017c66:	f1b9 0f0e 	cmp.w	r9, #14
 8017c6a:	d872      	bhi.n	8017d52 <_dtoa_r+0x3ea>
 8017c6c:	2c00      	cmp	r4, #0
 8017c6e:	d070      	beq.n	8017d52 <_dtoa_r+0x3ea>
 8017c70:	f1bb 0f00 	cmp.w	fp, #0
 8017c74:	f340 80a6 	ble.w	8017dc4 <_dtoa_r+0x45c>
 8017c78:	49ca      	ldr	r1, [pc, #808]	; (8017fa4 <_dtoa_r+0x63c>)
 8017c7a:	f00b 020f 	and.w	r2, fp, #15
 8017c7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017c82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017c86:	ed92 7b00 	vldr	d7, [r2]
 8017c8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8017c8e:	f000 808d 	beq.w	8017dac <_dtoa_r+0x444>
 8017c92:	4ac5      	ldr	r2, [pc, #788]	; (8017fa8 <_dtoa_r+0x640>)
 8017c94:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8017c98:	ed92 6b08 	vldr	d6, [r2, #32]
 8017c9c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8017ca0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017ca4:	f001 010f 	and.w	r1, r1, #15
 8017ca8:	2203      	movs	r2, #3
 8017caa:	48bf      	ldr	r0, [pc, #764]	; (8017fa8 <_dtoa_r+0x640>)
 8017cac:	2900      	cmp	r1, #0
 8017cae:	d17f      	bne.n	8017db0 <_dtoa_r+0x448>
 8017cb0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017cb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017cbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017cbe:	2900      	cmp	r1, #0
 8017cc0:	f000 80b2 	beq.w	8017e28 <_dtoa_r+0x4c0>
 8017cc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017cc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017ccc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd4:	f140 80a8 	bpl.w	8017e28 <_dtoa_r+0x4c0>
 8017cd8:	f1b9 0f00 	cmp.w	r9, #0
 8017cdc:	f000 80a4 	beq.w	8017e28 <_dtoa_r+0x4c0>
 8017ce0:	f1ba 0f00 	cmp.w	sl, #0
 8017ce4:	dd31      	ble.n	8017d4a <_dtoa_r+0x3e2>
 8017ce6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017cea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017cee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017cf2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017cf6:	3201      	adds	r2, #1
 8017cf8:	4650      	mov	r0, sl
 8017cfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017cfe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8017d02:	ee07 2a90 	vmov	s15, r2
 8017d06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017d0e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8017d12:	9c03      	ldr	r4, [sp, #12]
 8017d14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017d18:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017d1c:	2800      	cmp	r0, #0
 8017d1e:	f040 8086 	bne.w	8017e2e <_dtoa_r+0x4c6>
 8017d22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017d26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017d2a:	ec42 1b17 	vmov	d7, r1, r2
 8017d2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d36:	f300 8272 	bgt.w	801821e <_dtoa_r+0x8b6>
 8017d3a:	eeb1 7b47 	vneg.f64	d7, d7
 8017d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d46:	f100 8267 	bmi.w	8018218 <_dtoa_r+0x8b0>
 8017d4a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017d4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017d52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d54:	2a00      	cmp	r2, #0
 8017d56:	f2c0 8129 	blt.w	8017fac <_dtoa_r+0x644>
 8017d5a:	f1bb 0f0e 	cmp.w	fp, #14
 8017d5e:	f300 8125 	bgt.w	8017fac <_dtoa_r+0x644>
 8017d62:	4b90      	ldr	r3, [pc, #576]	; (8017fa4 <_dtoa_r+0x63c>)
 8017d64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017d68:	ed93 6b00 	vldr	d6, [r3]
 8017d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	f280 80c3 	bge.w	8017efa <_dtoa_r+0x592>
 8017d74:	f1b9 0f00 	cmp.w	r9, #0
 8017d78:	f300 80bf 	bgt.w	8017efa <_dtoa_r+0x592>
 8017d7c:	f040 824c 	bne.w	8018218 <_dtoa_r+0x8b0>
 8017d80:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017d84:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017d88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d94:	464c      	mov	r4, r9
 8017d96:	464f      	mov	r7, r9
 8017d98:	f280 8222 	bge.w	80181e0 <_dtoa_r+0x878>
 8017d9c:	f8dd 8000 	ldr.w	r8, [sp]
 8017da0:	2331      	movs	r3, #49	; 0x31
 8017da2:	f808 3b01 	strb.w	r3, [r8], #1
 8017da6:	f10b 0b01 	add.w	fp, fp, #1
 8017daa:	e21e      	b.n	80181ea <_dtoa_r+0x882>
 8017dac:	2202      	movs	r2, #2
 8017dae:	e77c      	b.n	8017caa <_dtoa_r+0x342>
 8017db0:	07cc      	lsls	r4, r1, #31
 8017db2:	d504      	bpl.n	8017dbe <_dtoa_r+0x456>
 8017db4:	ed90 6b00 	vldr	d6, [r0]
 8017db8:	3201      	adds	r2, #1
 8017dba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017dbe:	1049      	asrs	r1, r1, #1
 8017dc0:	3008      	adds	r0, #8
 8017dc2:	e773      	b.n	8017cac <_dtoa_r+0x344>
 8017dc4:	d02e      	beq.n	8017e24 <_dtoa_r+0x4bc>
 8017dc6:	f1cb 0100 	rsb	r1, fp, #0
 8017dca:	4a76      	ldr	r2, [pc, #472]	; (8017fa4 <_dtoa_r+0x63c>)
 8017dcc:	f001 000f 	and.w	r0, r1, #15
 8017dd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017dd4:	ed92 7b00 	vldr	d7, [r2]
 8017dd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017ddc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017de0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017de4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8017de8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017dec:	486e      	ldr	r0, [pc, #440]	; (8017fa8 <_dtoa_r+0x640>)
 8017dee:	1109      	asrs	r1, r1, #4
 8017df0:	2400      	movs	r4, #0
 8017df2:	2202      	movs	r2, #2
 8017df4:	b939      	cbnz	r1, 8017e06 <_dtoa_r+0x49e>
 8017df6:	2c00      	cmp	r4, #0
 8017df8:	f43f af60 	beq.w	8017cbc <_dtoa_r+0x354>
 8017dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e04:	e75a      	b.n	8017cbc <_dtoa_r+0x354>
 8017e06:	07cf      	lsls	r7, r1, #31
 8017e08:	d509      	bpl.n	8017e1e <_dtoa_r+0x4b6>
 8017e0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8017e0e:	ed90 7b00 	vldr	d7, [r0]
 8017e12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017e16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017e1a:	3201      	adds	r2, #1
 8017e1c:	2401      	movs	r4, #1
 8017e1e:	1049      	asrs	r1, r1, #1
 8017e20:	3008      	adds	r0, #8
 8017e22:	e7e7      	b.n	8017df4 <_dtoa_r+0x48c>
 8017e24:	2202      	movs	r2, #2
 8017e26:	e749      	b.n	8017cbc <_dtoa_r+0x354>
 8017e28:	465f      	mov	r7, fp
 8017e2a:	4648      	mov	r0, r9
 8017e2c:	e765      	b.n	8017cfa <_dtoa_r+0x392>
 8017e2e:	ec42 1b17 	vmov	d7, r1, r2
 8017e32:	4a5c      	ldr	r2, [pc, #368]	; (8017fa4 <_dtoa_r+0x63c>)
 8017e34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017e38:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017e3c:	9a00      	ldr	r2, [sp, #0]
 8017e3e:	1814      	adds	r4, r2, r0
 8017e40:	9a08      	ldr	r2, [sp, #32]
 8017e42:	b352      	cbz	r2, 8017e9a <_dtoa_r+0x532>
 8017e44:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017e48:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017e4c:	f8dd 8000 	ldr.w	r8, [sp]
 8017e50:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017e54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017e58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017e5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017e60:	ee14 2a90 	vmov	r2, s9
 8017e64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017e68:	3230      	adds	r2, #48	; 0x30
 8017e6a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017e6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e76:	f808 2b01 	strb.w	r2, [r8], #1
 8017e7a:	d439      	bmi.n	8017ef0 <_dtoa_r+0x588>
 8017e7c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017e80:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e88:	d472      	bmi.n	8017f70 <_dtoa_r+0x608>
 8017e8a:	45a0      	cmp	r8, r4
 8017e8c:	f43f af5d 	beq.w	8017d4a <_dtoa_r+0x3e2>
 8017e90:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017e94:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017e98:	e7e0      	b.n	8017e5c <_dtoa_r+0x4f4>
 8017e9a:	f8dd 8000 	ldr.w	r8, [sp]
 8017e9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017ea2:	4621      	mov	r1, r4
 8017ea4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017ea8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017eac:	ee14 2a90 	vmov	r2, s9
 8017eb0:	3230      	adds	r2, #48	; 0x30
 8017eb2:	f808 2b01 	strb.w	r2, [r8], #1
 8017eb6:	45a0      	cmp	r8, r4
 8017eb8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017ebc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017ec0:	d118      	bne.n	8017ef4 <_dtoa_r+0x58c>
 8017ec2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8017ec6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017eca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed2:	dc4d      	bgt.n	8017f70 <_dtoa_r+0x608>
 8017ed4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee0:	f57f af33 	bpl.w	8017d4a <_dtoa_r+0x3e2>
 8017ee4:	4688      	mov	r8, r1
 8017ee6:	3901      	subs	r1, #1
 8017ee8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017eec:	2b30      	cmp	r3, #48	; 0x30
 8017eee:	d0f9      	beq.n	8017ee4 <_dtoa_r+0x57c>
 8017ef0:	46bb      	mov	fp, r7
 8017ef2:	e02a      	b.n	8017f4a <_dtoa_r+0x5e2>
 8017ef4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017ef8:	e7d6      	b.n	8017ea8 <_dtoa_r+0x540>
 8017efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017efe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017f02:	f8dd 8000 	ldr.w	r8, [sp]
 8017f06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017f0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017f0e:	ee15 3a10 	vmov	r3, s10
 8017f12:	3330      	adds	r3, #48	; 0x30
 8017f14:	f808 3b01 	strb.w	r3, [r8], #1
 8017f18:	9b00      	ldr	r3, [sp, #0]
 8017f1a:	eba8 0303 	sub.w	r3, r8, r3
 8017f1e:	4599      	cmp	r9, r3
 8017f20:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017f24:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017f28:	d133      	bne.n	8017f92 <_dtoa_r+0x62a>
 8017f2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017f2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f36:	dc1a      	bgt.n	8017f6e <_dtoa_r+0x606>
 8017f38:	eeb4 7b46 	vcmp.f64	d7, d6
 8017f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f40:	d103      	bne.n	8017f4a <_dtoa_r+0x5e2>
 8017f42:	ee15 3a10 	vmov	r3, s10
 8017f46:	07d9      	lsls	r1, r3, #31
 8017f48:	d411      	bmi.n	8017f6e <_dtoa_r+0x606>
 8017f4a:	4629      	mov	r1, r5
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	f001 f879 	bl	8019044 <_Bfree>
 8017f52:	2300      	movs	r3, #0
 8017f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f56:	f888 3000 	strb.w	r3, [r8]
 8017f5a:	f10b 0301 	add.w	r3, fp, #1
 8017f5e:	6013      	str	r3, [r2, #0]
 8017f60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	f43f ad4d 	beq.w	8017a02 <_dtoa_r+0x9a>
 8017f68:	f8c3 8000 	str.w	r8, [r3]
 8017f6c:	e549      	b.n	8017a02 <_dtoa_r+0x9a>
 8017f6e:	465f      	mov	r7, fp
 8017f70:	4643      	mov	r3, r8
 8017f72:	4698      	mov	r8, r3
 8017f74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017f78:	2a39      	cmp	r2, #57	; 0x39
 8017f7a:	d106      	bne.n	8017f8a <_dtoa_r+0x622>
 8017f7c:	9a00      	ldr	r2, [sp, #0]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d1f7      	bne.n	8017f72 <_dtoa_r+0x60a>
 8017f82:	9900      	ldr	r1, [sp, #0]
 8017f84:	2230      	movs	r2, #48	; 0x30
 8017f86:	3701      	adds	r7, #1
 8017f88:	700a      	strb	r2, [r1, #0]
 8017f8a:	781a      	ldrb	r2, [r3, #0]
 8017f8c:	3201      	adds	r2, #1
 8017f8e:	701a      	strb	r2, [r3, #0]
 8017f90:	e7ae      	b.n	8017ef0 <_dtoa_r+0x588>
 8017f92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9e:	d1b2      	bne.n	8017f06 <_dtoa_r+0x59e>
 8017fa0:	e7d3      	b.n	8017f4a <_dtoa_r+0x5e2>
 8017fa2:	bf00      	nop
 8017fa4:	0801c9c8 	.word	0x0801c9c8
 8017fa8:	0801c9a0 	.word	0x0801c9a0
 8017fac:	9908      	ldr	r1, [sp, #32]
 8017fae:	2900      	cmp	r1, #0
 8017fb0:	f000 80d1 	beq.w	8018156 <_dtoa_r+0x7ee>
 8017fb4:	9907      	ldr	r1, [sp, #28]
 8017fb6:	2901      	cmp	r1, #1
 8017fb8:	f300 80b4 	bgt.w	8018124 <_dtoa_r+0x7bc>
 8017fbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017fbe:	2900      	cmp	r1, #0
 8017fc0:	f000 80ac 	beq.w	801811c <_dtoa_r+0x7b4>
 8017fc4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017fc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017fcc:	461c      	mov	r4, r3
 8017fce:	930a      	str	r3, [sp, #40]	; 0x28
 8017fd0:	9b05      	ldr	r3, [sp, #20]
 8017fd2:	4413      	add	r3, r2
 8017fd4:	9305      	str	r3, [sp, #20]
 8017fd6:	9b06      	ldr	r3, [sp, #24]
 8017fd8:	2101      	movs	r1, #1
 8017fda:	4413      	add	r3, r2
 8017fdc:	4630      	mov	r0, r6
 8017fde:	9306      	str	r3, [sp, #24]
 8017fe0:	f001 f936 	bl	8019250 <__i2b>
 8017fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fe6:	4607      	mov	r7, r0
 8017fe8:	f1b8 0f00 	cmp.w	r8, #0
 8017fec:	dd0d      	ble.n	801800a <_dtoa_r+0x6a2>
 8017fee:	9a06      	ldr	r2, [sp, #24]
 8017ff0:	2a00      	cmp	r2, #0
 8017ff2:	dd0a      	ble.n	801800a <_dtoa_r+0x6a2>
 8017ff4:	4542      	cmp	r2, r8
 8017ff6:	9905      	ldr	r1, [sp, #20]
 8017ff8:	bfa8      	it	ge
 8017ffa:	4642      	movge	r2, r8
 8017ffc:	1a89      	subs	r1, r1, r2
 8017ffe:	9105      	str	r1, [sp, #20]
 8018000:	9906      	ldr	r1, [sp, #24]
 8018002:	eba8 0802 	sub.w	r8, r8, r2
 8018006:	1a8a      	subs	r2, r1, r2
 8018008:	9206      	str	r2, [sp, #24]
 801800a:	b303      	cbz	r3, 801804e <_dtoa_r+0x6e6>
 801800c:	9a08      	ldr	r2, [sp, #32]
 801800e:	2a00      	cmp	r2, #0
 8018010:	f000 80a6 	beq.w	8018160 <_dtoa_r+0x7f8>
 8018014:	2c00      	cmp	r4, #0
 8018016:	dd13      	ble.n	8018040 <_dtoa_r+0x6d8>
 8018018:	4639      	mov	r1, r7
 801801a:	4622      	mov	r2, r4
 801801c:	4630      	mov	r0, r6
 801801e:	930c      	str	r3, [sp, #48]	; 0x30
 8018020:	f001 f9d2 	bl	80193c8 <__pow5mult>
 8018024:	462a      	mov	r2, r5
 8018026:	4601      	mov	r1, r0
 8018028:	4607      	mov	r7, r0
 801802a:	4630      	mov	r0, r6
 801802c:	f001 f926 	bl	801927c <__multiply>
 8018030:	4629      	mov	r1, r5
 8018032:	900a      	str	r0, [sp, #40]	; 0x28
 8018034:	4630      	mov	r0, r6
 8018036:	f001 f805 	bl	8019044 <_Bfree>
 801803a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801803c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801803e:	4615      	mov	r5, r2
 8018040:	1b1a      	subs	r2, r3, r4
 8018042:	d004      	beq.n	801804e <_dtoa_r+0x6e6>
 8018044:	4629      	mov	r1, r5
 8018046:	4630      	mov	r0, r6
 8018048:	f001 f9be 	bl	80193c8 <__pow5mult>
 801804c:	4605      	mov	r5, r0
 801804e:	2101      	movs	r1, #1
 8018050:	4630      	mov	r0, r6
 8018052:	f001 f8fd 	bl	8019250 <__i2b>
 8018056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018058:	2b00      	cmp	r3, #0
 801805a:	4604      	mov	r4, r0
 801805c:	f340 8082 	ble.w	8018164 <_dtoa_r+0x7fc>
 8018060:	461a      	mov	r2, r3
 8018062:	4601      	mov	r1, r0
 8018064:	4630      	mov	r0, r6
 8018066:	f001 f9af 	bl	80193c8 <__pow5mult>
 801806a:	9b07      	ldr	r3, [sp, #28]
 801806c:	2b01      	cmp	r3, #1
 801806e:	4604      	mov	r4, r0
 8018070:	dd7b      	ble.n	801816a <_dtoa_r+0x802>
 8018072:	2300      	movs	r3, #0
 8018074:	930a      	str	r3, [sp, #40]	; 0x28
 8018076:	6922      	ldr	r2, [r4, #16]
 8018078:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801807c:	6910      	ldr	r0, [r2, #16]
 801807e:	f001 f897 	bl	80191b0 <__hi0bits>
 8018082:	f1c0 0020 	rsb	r0, r0, #32
 8018086:	9b06      	ldr	r3, [sp, #24]
 8018088:	4418      	add	r0, r3
 801808a:	f010 001f 	ands.w	r0, r0, #31
 801808e:	f000 808d 	beq.w	80181ac <_dtoa_r+0x844>
 8018092:	f1c0 0220 	rsb	r2, r0, #32
 8018096:	2a04      	cmp	r2, #4
 8018098:	f340 8086 	ble.w	80181a8 <_dtoa_r+0x840>
 801809c:	f1c0 001c 	rsb	r0, r0, #28
 80180a0:	9b05      	ldr	r3, [sp, #20]
 80180a2:	4403      	add	r3, r0
 80180a4:	9305      	str	r3, [sp, #20]
 80180a6:	9b06      	ldr	r3, [sp, #24]
 80180a8:	4403      	add	r3, r0
 80180aa:	4480      	add	r8, r0
 80180ac:	9306      	str	r3, [sp, #24]
 80180ae:	9b05      	ldr	r3, [sp, #20]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	dd05      	ble.n	80180c0 <_dtoa_r+0x758>
 80180b4:	4629      	mov	r1, r5
 80180b6:	461a      	mov	r2, r3
 80180b8:	4630      	mov	r0, r6
 80180ba:	f001 f9df 	bl	801947c <__lshift>
 80180be:	4605      	mov	r5, r0
 80180c0:	9b06      	ldr	r3, [sp, #24]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	dd05      	ble.n	80180d2 <_dtoa_r+0x76a>
 80180c6:	4621      	mov	r1, r4
 80180c8:	461a      	mov	r2, r3
 80180ca:	4630      	mov	r0, r6
 80180cc:	f001 f9d6 	bl	801947c <__lshift>
 80180d0:	4604      	mov	r4, r0
 80180d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d06b      	beq.n	80181b0 <_dtoa_r+0x848>
 80180d8:	4621      	mov	r1, r4
 80180da:	4628      	mov	r0, r5
 80180dc:	f001 fa3a 	bl	8019554 <__mcmp>
 80180e0:	2800      	cmp	r0, #0
 80180e2:	da65      	bge.n	80181b0 <_dtoa_r+0x848>
 80180e4:	2300      	movs	r3, #0
 80180e6:	4629      	mov	r1, r5
 80180e8:	220a      	movs	r2, #10
 80180ea:	4630      	mov	r0, r6
 80180ec:	f000 ffcc 	bl	8019088 <__multadd>
 80180f0:	9b08      	ldr	r3, [sp, #32]
 80180f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80180f6:	4605      	mov	r5, r0
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	f000 8192 	beq.w	8018422 <_dtoa_r+0xaba>
 80180fe:	4639      	mov	r1, r7
 8018100:	2300      	movs	r3, #0
 8018102:	220a      	movs	r2, #10
 8018104:	4630      	mov	r0, r6
 8018106:	f000 ffbf 	bl	8019088 <__multadd>
 801810a:	f1ba 0f00 	cmp.w	sl, #0
 801810e:	4607      	mov	r7, r0
 8018110:	f300 808e 	bgt.w	8018230 <_dtoa_r+0x8c8>
 8018114:	9b07      	ldr	r3, [sp, #28]
 8018116:	2b02      	cmp	r3, #2
 8018118:	dc51      	bgt.n	80181be <_dtoa_r+0x856>
 801811a:	e089      	b.n	8018230 <_dtoa_r+0x8c8>
 801811c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801811e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018122:	e751      	b.n	8017fc8 <_dtoa_r+0x660>
 8018124:	f109 34ff 	add.w	r4, r9, #4294967295
 8018128:	42a3      	cmp	r3, r4
 801812a:	bfbf      	itttt	lt
 801812c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801812e:	1ae3      	sublt	r3, r4, r3
 8018130:	18d2      	addlt	r2, r2, r3
 8018132:	4613      	movlt	r3, r2
 8018134:	bfb7      	itett	lt
 8018136:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018138:	1b1c      	subge	r4, r3, r4
 801813a:	4623      	movlt	r3, r4
 801813c:	2400      	movlt	r4, #0
 801813e:	f1b9 0f00 	cmp.w	r9, #0
 8018142:	bfb5      	itete	lt
 8018144:	9a05      	ldrlt	r2, [sp, #20]
 8018146:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801814a:	eba2 0809 	sublt.w	r8, r2, r9
 801814e:	464a      	movge	r2, r9
 8018150:	bfb8      	it	lt
 8018152:	2200      	movlt	r2, #0
 8018154:	e73b      	b.n	8017fce <_dtoa_r+0x666>
 8018156:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801815a:	9f08      	ldr	r7, [sp, #32]
 801815c:	461c      	mov	r4, r3
 801815e:	e743      	b.n	8017fe8 <_dtoa_r+0x680>
 8018160:	461a      	mov	r2, r3
 8018162:	e76f      	b.n	8018044 <_dtoa_r+0x6dc>
 8018164:	9b07      	ldr	r3, [sp, #28]
 8018166:	2b01      	cmp	r3, #1
 8018168:	dc18      	bgt.n	801819c <_dtoa_r+0x834>
 801816a:	9b02      	ldr	r3, [sp, #8]
 801816c:	b9b3      	cbnz	r3, 801819c <_dtoa_r+0x834>
 801816e:	9b03      	ldr	r3, [sp, #12]
 8018170:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018174:	b9a2      	cbnz	r2, 80181a0 <_dtoa_r+0x838>
 8018176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801817a:	0d12      	lsrs	r2, r2, #20
 801817c:	0512      	lsls	r2, r2, #20
 801817e:	b18a      	cbz	r2, 80181a4 <_dtoa_r+0x83c>
 8018180:	9b05      	ldr	r3, [sp, #20]
 8018182:	3301      	adds	r3, #1
 8018184:	9305      	str	r3, [sp, #20]
 8018186:	9b06      	ldr	r3, [sp, #24]
 8018188:	3301      	adds	r3, #1
 801818a:	9306      	str	r3, [sp, #24]
 801818c:	2301      	movs	r3, #1
 801818e:	930a      	str	r3, [sp, #40]	; 0x28
 8018190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018192:	2b00      	cmp	r3, #0
 8018194:	f47f af6f 	bne.w	8018076 <_dtoa_r+0x70e>
 8018198:	2001      	movs	r0, #1
 801819a:	e774      	b.n	8018086 <_dtoa_r+0x71e>
 801819c:	2300      	movs	r3, #0
 801819e:	e7f6      	b.n	801818e <_dtoa_r+0x826>
 80181a0:	9b02      	ldr	r3, [sp, #8]
 80181a2:	e7f4      	b.n	801818e <_dtoa_r+0x826>
 80181a4:	920a      	str	r2, [sp, #40]	; 0x28
 80181a6:	e7f3      	b.n	8018190 <_dtoa_r+0x828>
 80181a8:	d081      	beq.n	80180ae <_dtoa_r+0x746>
 80181aa:	4610      	mov	r0, r2
 80181ac:	301c      	adds	r0, #28
 80181ae:	e777      	b.n	80180a0 <_dtoa_r+0x738>
 80181b0:	f1b9 0f00 	cmp.w	r9, #0
 80181b4:	dc37      	bgt.n	8018226 <_dtoa_r+0x8be>
 80181b6:	9b07      	ldr	r3, [sp, #28]
 80181b8:	2b02      	cmp	r3, #2
 80181ba:	dd34      	ble.n	8018226 <_dtoa_r+0x8be>
 80181bc:	46ca      	mov	sl, r9
 80181be:	f1ba 0f00 	cmp.w	sl, #0
 80181c2:	d10d      	bne.n	80181e0 <_dtoa_r+0x878>
 80181c4:	4621      	mov	r1, r4
 80181c6:	4653      	mov	r3, sl
 80181c8:	2205      	movs	r2, #5
 80181ca:	4630      	mov	r0, r6
 80181cc:	f000 ff5c 	bl	8019088 <__multadd>
 80181d0:	4601      	mov	r1, r0
 80181d2:	4604      	mov	r4, r0
 80181d4:	4628      	mov	r0, r5
 80181d6:	f001 f9bd 	bl	8019554 <__mcmp>
 80181da:	2800      	cmp	r0, #0
 80181dc:	f73f adde 	bgt.w	8017d9c <_dtoa_r+0x434>
 80181e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181e2:	f8dd 8000 	ldr.w	r8, [sp]
 80181e6:	ea6f 0b03 	mvn.w	fp, r3
 80181ea:	f04f 0900 	mov.w	r9, #0
 80181ee:	4621      	mov	r1, r4
 80181f0:	4630      	mov	r0, r6
 80181f2:	f000 ff27 	bl	8019044 <_Bfree>
 80181f6:	2f00      	cmp	r7, #0
 80181f8:	f43f aea7 	beq.w	8017f4a <_dtoa_r+0x5e2>
 80181fc:	f1b9 0f00 	cmp.w	r9, #0
 8018200:	d005      	beq.n	801820e <_dtoa_r+0x8a6>
 8018202:	45b9      	cmp	r9, r7
 8018204:	d003      	beq.n	801820e <_dtoa_r+0x8a6>
 8018206:	4649      	mov	r1, r9
 8018208:	4630      	mov	r0, r6
 801820a:	f000 ff1b 	bl	8019044 <_Bfree>
 801820e:	4639      	mov	r1, r7
 8018210:	4630      	mov	r0, r6
 8018212:	f000 ff17 	bl	8019044 <_Bfree>
 8018216:	e698      	b.n	8017f4a <_dtoa_r+0x5e2>
 8018218:	2400      	movs	r4, #0
 801821a:	4627      	mov	r7, r4
 801821c:	e7e0      	b.n	80181e0 <_dtoa_r+0x878>
 801821e:	46bb      	mov	fp, r7
 8018220:	4604      	mov	r4, r0
 8018222:	4607      	mov	r7, r0
 8018224:	e5ba      	b.n	8017d9c <_dtoa_r+0x434>
 8018226:	9b08      	ldr	r3, [sp, #32]
 8018228:	46ca      	mov	sl, r9
 801822a:	2b00      	cmp	r3, #0
 801822c:	f000 8100 	beq.w	8018430 <_dtoa_r+0xac8>
 8018230:	f1b8 0f00 	cmp.w	r8, #0
 8018234:	dd05      	ble.n	8018242 <_dtoa_r+0x8da>
 8018236:	4639      	mov	r1, r7
 8018238:	4642      	mov	r2, r8
 801823a:	4630      	mov	r0, r6
 801823c:	f001 f91e 	bl	801947c <__lshift>
 8018240:	4607      	mov	r7, r0
 8018242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018244:	2b00      	cmp	r3, #0
 8018246:	d05d      	beq.n	8018304 <_dtoa_r+0x99c>
 8018248:	6879      	ldr	r1, [r7, #4]
 801824a:	4630      	mov	r0, r6
 801824c:	f000 feba 	bl	8018fc4 <_Balloc>
 8018250:	4680      	mov	r8, r0
 8018252:	b928      	cbnz	r0, 8018260 <_dtoa_r+0x8f8>
 8018254:	4b82      	ldr	r3, [pc, #520]	; (8018460 <_dtoa_r+0xaf8>)
 8018256:	4602      	mov	r2, r0
 8018258:	f240 21ea 	movw	r1, #746	; 0x2ea
 801825c:	f7ff bb9a 	b.w	8017994 <_dtoa_r+0x2c>
 8018260:	693a      	ldr	r2, [r7, #16]
 8018262:	3202      	adds	r2, #2
 8018264:	0092      	lsls	r2, r2, #2
 8018266:	f107 010c 	add.w	r1, r7, #12
 801826a:	300c      	adds	r0, #12
 801826c:	f7fd fca2 	bl	8015bb4 <memcpy>
 8018270:	2201      	movs	r2, #1
 8018272:	4641      	mov	r1, r8
 8018274:	4630      	mov	r0, r6
 8018276:	f001 f901 	bl	801947c <__lshift>
 801827a:	9b00      	ldr	r3, [sp, #0]
 801827c:	3301      	adds	r3, #1
 801827e:	9305      	str	r3, [sp, #20]
 8018280:	9b00      	ldr	r3, [sp, #0]
 8018282:	4453      	add	r3, sl
 8018284:	9309      	str	r3, [sp, #36]	; 0x24
 8018286:	9b02      	ldr	r3, [sp, #8]
 8018288:	f003 0301 	and.w	r3, r3, #1
 801828c:	46b9      	mov	r9, r7
 801828e:	9308      	str	r3, [sp, #32]
 8018290:	4607      	mov	r7, r0
 8018292:	9b05      	ldr	r3, [sp, #20]
 8018294:	4621      	mov	r1, r4
 8018296:	3b01      	subs	r3, #1
 8018298:	4628      	mov	r0, r5
 801829a:	9302      	str	r3, [sp, #8]
 801829c:	f7ff fad6 	bl	801784c <quorem>
 80182a0:	4603      	mov	r3, r0
 80182a2:	3330      	adds	r3, #48	; 0x30
 80182a4:	9006      	str	r0, [sp, #24]
 80182a6:	4649      	mov	r1, r9
 80182a8:	4628      	mov	r0, r5
 80182aa:	930a      	str	r3, [sp, #40]	; 0x28
 80182ac:	f001 f952 	bl	8019554 <__mcmp>
 80182b0:	463a      	mov	r2, r7
 80182b2:	4682      	mov	sl, r0
 80182b4:	4621      	mov	r1, r4
 80182b6:	4630      	mov	r0, r6
 80182b8:	f001 f968 	bl	801958c <__mdiff>
 80182bc:	68c2      	ldr	r2, [r0, #12]
 80182be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182c0:	4680      	mov	r8, r0
 80182c2:	bb0a      	cbnz	r2, 8018308 <_dtoa_r+0x9a0>
 80182c4:	4601      	mov	r1, r0
 80182c6:	4628      	mov	r0, r5
 80182c8:	f001 f944 	bl	8019554 <__mcmp>
 80182cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182ce:	4602      	mov	r2, r0
 80182d0:	4641      	mov	r1, r8
 80182d2:	4630      	mov	r0, r6
 80182d4:	920e      	str	r2, [sp, #56]	; 0x38
 80182d6:	930a      	str	r3, [sp, #40]	; 0x28
 80182d8:	f000 feb4 	bl	8019044 <_Bfree>
 80182dc:	9b07      	ldr	r3, [sp, #28]
 80182de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80182e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80182e4:	ea43 0102 	orr.w	r1, r3, r2
 80182e8:	9b08      	ldr	r3, [sp, #32]
 80182ea:	430b      	orrs	r3, r1
 80182ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182ee:	d10d      	bne.n	801830c <_dtoa_r+0x9a4>
 80182f0:	2b39      	cmp	r3, #57	; 0x39
 80182f2:	d029      	beq.n	8018348 <_dtoa_r+0x9e0>
 80182f4:	f1ba 0f00 	cmp.w	sl, #0
 80182f8:	dd01      	ble.n	80182fe <_dtoa_r+0x996>
 80182fa:	9b06      	ldr	r3, [sp, #24]
 80182fc:	3331      	adds	r3, #49	; 0x31
 80182fe:	9a02      	ldr	r2, [sp, #8]
 8018300:	7013      	strb	r3, [r2, #0]
 8018302:	e774      	b.n	80181ee <_dtoa_r+0x886>
 8018304:	4638      	mov	r0, r7
 8018306:	e7b8      	b.n	801827a <_dtoa_r+0x912>
 8018308:	2201      	movs	r2, #1
 801830a:	e7e1      	b.n	80182d0 <_dtoa_r+0x968>
 801830c:	f1ba 0f00 	cmp.w	sl, #0
 8018310:	db06      	blt.n	8018320 <_dtoa_r+0x9b8>
 8018312:	9907      	ldr	r1, [sp, #28]
 8018314:	ea41 0a0a 	orr.w	sl, r1, sl
 8018318:	9908      	ldr	r1, [sp, #32]
 801831a:	ea5a 0101 	orrs.w	r1, sl, r1
 801831e:	d120      	bne.n	8018362 <_dtoa_r+0x9fa>
 8018320:	2a00      	cmp	r2, #0
 8018322:	ddec      	ble.n	80182fe <_dtoa_r+0x996>
 8018324:	4629      	mov	r1, r5
 8018326:	2201      	movs	r2, #1
 8018328:	4630      	mov	r0, r6
 801832a:	9305      	str	r3, [sp, #20]
 801832c:	f001 f8a6 	bl	801947c <__lshift>
 8018330:	4621      	mov	r1, r4
 8018332:	4605      	mov	r5, r0
 8018334:	f001 f90e 	bl	8019554 <__mcmp>
 8018338:	2800      	cmp	r0, #0
 801833a:	9b05      	ldr	r3, [sp, #20]
 801833c:	dc02      	bgt.n	8018344 <_dtoa_r+0x9dc>
 801833e:	d1de      	bne.n	80182fe <_dtoa_r+0x996>
 8018340:	07da      	lsls	r2, r3, #31
 8018342:	d5dc      	bpl.n	80182fe <_dtoa_r+0x996>
 8018344:	2b39      	cmp	r3, #57	; 0x39
 8018346:	d1d8      	bne.n	80182fa <_dtoa_r+0x992>
 8018348:	9a02      	ldr	r2, [sp, #8]
 801834a:	2339      	movs	r3, #57	; 0x39
 801834c:	7013      	strb	r3, [r2, #0]
 801834e:	4643      	mov	r3, r8
 8018350:	4698      	mov	r8, r3
 8018352:	3b01      	subs	r3, #1
 8018354:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018358:	2a39      	cmp	r2, #57	; 0x39
 801835a:	d051      	beq.n	8018400 <_dtoa_r+0xa98>
 801835c:	3201      	adds	r2, #1
 801835e:	701a      	strb	r2, [r3, #0]
 8018360:	e745      	b.n	80181ee <_dtoa_r+0x886>
 8018362:	2a00      	cmp	r2, #0
 8018364:	dd03      	ble.n	801836e <_dtoa_r+0xa06>
 8018366:	2b39      	cmp	r3, #57	; 0x39
 8018368:	d0ee      	beq.n	8018348 <_dtoa_r+0x9e0>
 801836a:	3301      	adds	r3, #1
 801836c:	e7c7      	b.n	80182fe <_dtoa_r+0x996>
 801836e:	9a05      	ldr	r2, [sp, #20]
 8018370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018372:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018376:	428a      	cmp	r2, r1
 8018378:	d02b      	beq.n	80183d2 <_dtoa_r+0xa6a>
 801837a:	4629      	mov	r1, r5
 801837c:	2300      	movs	r3, #0
 801837e:	220a      	movs	r2, #10
 8018380:	4630      	mov	r0, r6
 8018382:	f000 fe81 	bl	8019088 <__multadd>
 8018386:	45b9      	cmp	r9, r7
 8018388:	4605      	mov	r5, r0
 801838a:	f04f 0300 	mov.w	r3, #0
 801838e:	f04f 020a 	mov.w	r2, #10
 8018392:	4649      	mov	r1, r9
 8018394:	4630      	mov	r0, r6
 8018396:	d107      	bne.n	80183a8 <_dtoa_r+0xa40>
 8018398:	f000 fe76 	bl	8019088 <__multadd>
 801839c:	4681      	mov	r9, r0
 801839e:	4607      	mov	r7, r0
 80183a0:	9b05      	ldr	r3, [sp, #20]
 80183a2:	3301      	adds	r3, #1
 80183a4:	9305      	str	r3, [sp, #20]
 80183a6:	e774      	b.n	8018292 <_dtoa_r+0x92a>
 80183a8:	f000 fe6e 	bl	8019088 <__multadd>
 80183ac:	4639      	mov	r1, r7
 80183ae:	4681      	mov	r9, r0
 80183b0:	2300      	movs	r3, #0
 80183b2:	220a      	movs	r2, #10
 80183b4:	4630      	mov	r0, r6
 80183b6:	f000 fe67 	bl	8019088 <__multadd>
 80183ba:	4607      	mov	r7, r0
 80183bc:	e7f0      	b.n	80183a0 <_dtoa_r+0xa38>
 80183be:	f1ba 0f00 	cmp.w	sl, #0
 80183c2:	9a00      	ldr	r2, [sp, #0]
 80183c4:	bfcc      	ite	gt
 80183c6:	46d0      	movgt	r8, sl
 80183c8:	f04f 0801 	movle.w	r8, #1
 80183cc:	4490      	add	r8, r2
 80183ce:	f04f 0900 	mov.w	r9, #0
 80183d2:	4629      	mov	r1, r5
 80183d4:	2201      	movs	r2, #1
 80183d6:	4630      	mov	r0, r6
 80183d8:	9302      	str	r3, [sp, #8]
 80183da:	f001 f84f 	bl	801947c <__lshift>
 80183de:	4621      	mov	r1, r4
 80183e0:	4605      	mov	r5, r0
 80183e2:	f001 f8b7 	bl	8019554 <__mcmp>
 80183e6:	2800      	cmp	r0, #0
 80183e8:	dcb1      	bgt.n	801834e <_dtoa_r+0x9e6>
 80183ea:	d102      	bne.n	80183f2 <_dtoa_r+0xa8a>
 80183ec:	9b02      	ldr	r3, [sp, #8]
 80183ee:	07db      	lsls	r3, r3, #31
 80183f0:	d4ad      	bmi.n	801834e <_dtoa_r+0x9e6>
 80183f2:	4643      	mov	r3, r8
 80183f4:	4698      	mov	r8, r3
 80183f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80183fa:	2a30      	cmp	r2, #48	; 0x30
 80183fc:	d0fa      	beq.n	80183f4 <_dtoa_r+0xa8c>
 80183fe:	e6f6      	b.n	80181ee <_dtoa_r+0x886>
 8018400:	9a00      	ldr	r2, [sp, #0]
 8018402:	429a      	cmp	r2, r3
 8018404:	d1a4      	bne.n	8018350 <_dtoa_r+0x9e8>
 8018406:	f10b 0b01 	add.w	fp, fp, #1
 801840a:	2331      	movs	r3, #49	; 0x31
 801840c:	e778      	b.n	8018300 <_dtoa_r+0x998>
 801840e:	4b15      	ldr	r3, [pc, #84]	; (8018464 <_dtoa_r+0xafc>)
 8018410:	f7ff bb12 	b.w	8017a38 <_dtoa_r+0xd0>
 8018414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018416:	2b00      	cmp	r3, #0
 8018418:	f47f aaee 	bne.w	80179f8 <_dtoa_r+0x90>
 801841c:	4b12      	ldr	r3, [pc, #72]	; (8018468 <_dtoa_r+0xb00>)
 801841e:	f7ff bb0b 	b.w	8017a38 <_dtoa_r+0xd0>
 8018422:	f1ba 0f00 	cmp.w	sl, #0
 8018426:	dc03      	bgt.n	8018430 <_dtoa_r+0xac8>
 8018428:	9b07      	ldr	r3, [sp, #28]
 801842a:	2b02      	cmp	r3, #2
 801842c:	f73f aec7 	bgt.w	80181be <_dtoa_r+0x856>
 8018430:	f8dd 8000 	ldr.w	r8, [sp]
 8018434:	4621      	mov	r1, r4
 8018436:	4628      	mov	r0, r5
 8018438:	f7ff fa08 	bl	801784c <quorem>
 801843c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018440:	f808 3b01 	strb.w	r3, [r8], #1
 8018444:	9a00      	ldr	r2, [sp, #0]
 8018446:	eba8 0202 	sub.w	r2, r8, r2
 801844a:	4592      	cmp	sl, r2
 801844c:	ddb7      	ble.n	80183be <_dtoa_r+0xa56>
 801844e:	4629      	mov	r1, r5
 8018450:	2300      	movs	r3, #0
 8018452:	220a      	movs	r2, #10
 8018454:	4630      	mov	r0, r6
 8018456:	f000 fe17 	bl	8019088 <__multadd>
 801845a:	4605      	mov	r5, r0
 801845c:	e7ea      	b.n	8018434 <_dtoa_r+0xacc>
 801845e:	bf00      	nop
 8018460:	0801c84c 	.word	0x0801c84c
 8018464:	0801c64c 	.word	0x0801c64c
 8018468:	0801c7c9 	.word	0x0801c7c9

0801846c <__sflush_r>:
 801846c:	898a      	ldrh	r2, [r1, #12]
 801846e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018472:	4605      	mov	r5, r0
 8018474:	0710      	lsls	r0, r2, #28
 8018476:	460c      	mov	r4, r1
 8018478:	d458      	bmi.n	801852c <__sflush_r+0xc0>
 801847a:	684b      	ldr	r3, [r1, #4]
 801847c:	2b00      	cmp	r3, #0
 801847e:	dc05      	bgt.n	801848c <__sflush_r+0x20>
 8018480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018482:	2b00      	cmp	r3, #0
 8018484:	dc02      	bgt.n	801848c <__sflush_r+0x20>
 8018486:	2000      	movs	r0, #0
 8018488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801848c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801848e:	2e00      	cmp	r6, #0
 8018490:	d0f9      	beq.n	8018486 <__sflush_r+0x1a>
 8018492:	2300      	movs	r3, #0
 8018494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018498:	682f      	ldr	r7, [r5, #0]
 801849a:	602b      	str	r3, [r5, #0]
 801849c:	d032      	beq.n	8018504 <__sflush_r+0x98>
 801849e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80184a0:	89a3      	ldrh	r3, [r4, #12]
 80184a2:	075a      	lsls	r2, r3, #29
 80184a4:	d505      	bpl.n	80184b2 <__sflush_r+0x46>
 80184a6:	6863      	ldr	r3, [r4, #4]
 80184a8:	1ac0      	subs	r0, r0, r3
 80184aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80184ac:	b10b      	cbz	r3, 80184b2 <__sflush_r+0x46>
 80184ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80184b0:	1ac0      	subs	r0, r0, r3
 80184b2:	2300      	movs	r3, #0
 80184b4:	4602      	mov	r2, r0
 80184b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184b8:	6a21      	ldr	r1, [r4, #32]
 80184ba:	4628      	mov	r0, r5
 80184bc:	47b0      	blx	r6
 80184be:	1c43      	adds	r3, r0, #1
 80184c0:	89a3      	ldrh	r3, [r4, #12]
 80184c2:	d106      	bne.n	80184d2 <__sflush_r+0x66>
 80184c4:	6829      	ldr	r1, [r5, #0]
 80184c6:	291d      	cmp	r1, #29
 80184c8:	d82c      	bhi.n	8018524 <__sflush_r+0xb8>
 80184ca:	4a2a      	ldr	r2, [pc, #168]	; (8018574 <__sflush_r+0x108>)
 80184cc:	40ca      	lsrs	r2, r1
 80184ce:	07d6      	lsls	r6, r2, #31
 80184d0:	d528      	bpl.n	8018524 <__sflush_r+0xb8>
 80184d2:	2200      	movs	r2, #0
 80184d4:	6062      	str	r2, [r4, #4]
 80184d6:	04d9      	lsls	r1, r3, #19
 80184d8:	6922      	ldr	r2, [r4, #16]
 80184da:	6022      	str	r2, [r4, #0]
 80184dc:	d504      	bpl.n	80184e8 <__sflush_r+0x7c>
 80184de:	1c42      	adds	r2, r0, #1
 80184e0:	d101      	bne.n	80184e6 <__sflush_r+0x7a>
 80184e2:	682b      	ldr	r3, [r5, #0]
 80184e4:	b903      	cbnz	r3, 80184e8 <__sflush_r+0x7c>
 80184e6:	6560      	str	r0, [r4, #84]	; 0x54
 80184e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184ea:	602f      	str	r7, [r5, #0]
 80184ec:	2900      	cmp	r1, #0
 80184ee:	d0ca      	beq.n	8018486 <__sflush_r+0x1a>
 80184f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184f4:	4299      	cmp	r1, r3
 80184f6:	d002      	beq.n	80184fe <__sflush_r+0x92>
 80184f8:	4628      	mov	r0, r5
 80184fa:	f001 fa2f 	bl	801995c <_free_r>
 80184fe:	2000      	movs	r0, #0
 8018500:	6360      	str	r0, [r4, #52]	; 0x34
 8018502:	e7c1      	b.n	8018488 <__sflush_r+0x1c>
 8018504:	6a21      	ldr	r1, [r4, #32]
 8018506:	2301      	movs	r3, #1
 8018508:	4628      	mov	r0, r5
 801850a:	47b0      	blx	r6
 801850c:	1c41      	adds	r1, r0, #1
 801850e:	d1c7      	bne.n	80184a0 <__sflush_r+0x34>
 8018510:	682b      	ldr	r3, [r5, #0]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d0c4      	beq.n	80184a0 <__sflush_r+0x34>
 8018516:	2b1d      	cmp	r3, #29
 8018518:	d001      	beq.n	801851e <__sflush_r+0xb2>
 801851a:	2b16      	cmp	r3, #22
 801851c:	d101      	bne.n	8018522 <__sflush_r+0xb6>
 801851e:	602f      	str	r7, [r5, #0]
 8018520:	e7b1      	b.n	8018486 <__sflush_r+0x1a>
 8018522:	89a3      	ldrh	r3, [r4, #12]
 8018524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018528:	81a3      	strh	r3, [r4, #12]
 801852a:	e7ad      	b.n	8018488 <__sflush_r+0x1c>
 801852c:	690f      	ldr	r7, [r1, #16]
 801852e:	2f00      	cmp	r7, #0
 8018530:	d0a9      	beq.n	8018486 <__sflush_r+0x1a>
 8018532:	0793      	lsls	r3, r2, #30
 8018534:	680e      	ldr	r6, [r1, #0]
 8018536:	bf08      	it	eq
 8018538:	694b      	ldreq	r3, [r1, #20]
 801853a:	600f      	str	r7, [r1, #0]
 801853c:	bf18      	it	ne
 801853e:	2300      	movne	r3, #0
 8018540:	eba6 0807 	sub.w	r8, r6, r7
 8018544:	608b      	str	r3, [r1, #8]
 8018546:	f1b8 0f00 	cmp.w	r8, #0
 801854a:	dd9c      	ble.n	8018486 <__sflush_r+0x1a>
 801854c:	6a21      	ldr	r1, [r4, #32]
 801854e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018550:	4643      	mov	r3, r8
 8018552:	463a      	mov	r2, r7
 8018554:	4628      	mov	r0, r5
 8018556:	47b0      	blx	r6
 8018558:	2800      	cmp	r0, #0
 801855a:	dc06      	bgt.n	801856a <__sflush_r+0xfe>
 801855c:	89a3      	ldrh	r3, [r4, #12]
 801855e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018562:	81a3      	strh	r3, [r4, #12]
 8018564:	f04f 30ff 	mov.w	r0, #4294967295
 8018568:	e78e      	b.n	8018488 <__sflush_r+0x1c>
 801856a:	4407      	add	r7, r0
 801856c:	eba8 0800 	sub.w	r8, r8, r0
 8018570:	e7e9      	b.n	8018546 <__sflush_r+0xda>
 8018572:	bf00      	nop
 8018574:	20400001 	.word	0x20400001

08018578 <_fflush_r>:
 8018578:	b538      	push	{r3, r4, r5, lr}
 801857a:	690b      	ldr	r3, [r1, #16]
 801857c:	4605      	mov	r5, r0
 801857e:	460c      	mov	r4, r1
 8018580:	b913      	cbnz	r3, 8018588 <_fflush_r+0x10>
 8018582:	2500      	movs	r5, #0
 8018584:	4628      	mov	r0, r5
 8018586:	bd38      	pop	{r3, r4, r5, pc}
 8018588:	b118      	cbz	r0, 8018592 <_fflush_r+0x1a>
 801858a:	6983      	ldr	r3, [r0, #24]
 801858c:	b90b      	cbnz	r3, 8018592 <_fflush_r+0x1a>
 801858e:	f000 f887 	bl	80186a0 <__sinit>
 8018592:	4b14      	ldr	r3, [pc, #80]	; (80185e4 <_fflush_r+0x6c>)
 8018594:	429c      	cmp	r4, r3
 8018596:	d11b      	bne.n	80185d0 <_fflush_r+0x58>
 8018598:	686c      	ldr	r4, [r5, #4]
 801859a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d0ef      	beq.n	8018582 <_fflush_r+0xa>
 80185a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80185a4:	07d0      	lsls	r0, r2, #31
 80185a6:	d404      	bmi.n	80185b2 <_fflush_r+0x3a>
 80185a8:	0599      	lsls	r1, r3, #22
 80185aa:	d402      	bmi.n	80185b2 <_fflush_r+0x3a>
 80185ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ae:	f000 fc88 	bl	8018ec2 <__retarget_lock_acquire_recursive>
 80185b2:	4628      	mov	r0, r5
 80185b4:	4621      	mov	r1, r4
 80185b6:	f7ff ff59 	bl	801846c <__sflush_r>
 80185ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185bc:	07da      	lsls	r2, r3, #31
 80185be:	4605      	mov	r5, r0
 80185c0:	d4e0      	bmi.n	8018584 <_fflush_r+0xc>
 80185c2:	89a3      	ldrh	r3, [r4, #12]
 80185c4:	059b      	lsls	r3, r3, #22
 80185c6:	d4dd      	bmi.n	8018584 <_fflush_r+0xc>
 80185c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ca:	f000 fc7b 	bl	8018ec4 <__retarget_lock_release_recursive>
 80185ce:	e7d9      	b.n	8018584 <_fflush_r+0xc>
 80185d0:	4b05      	ldr	r3, [pc, #20]	; (80185e8 <_fflush_r+0x70>)
 80185d2:	429c      	cmp	r4, r3
 80185d4:	d101      	bne.n	80185da <_fflush_r+0x62>
 80185d6:	68ac      	ldr	r4, [r5, #8]
 80185d8:	e7df      	b.n	801859a <_fflush_r+0x22>
 80185da:	4b04      	ldr	r3, [pc, #16]	; (80185ec <_fflush_r+0x74>)
 80185dc:	429c      	cmp	r4, r3
 80185de:	bf08      	it	eq
 80185e0:	68ec      	ldreq	r4, [r5, #12]
 80185e2:	e7da      	b.n	801859a <_fflush_r+0x22>
 80185e4:	0801c880 	.word	0x0801c880
 80185e8:	0801c8a0 	.word	0x0801c8a0
 80185ec:	0801c860 	.word	0x0801c860

080185f0 <std>:
 80185f0:	2300      	movs	r3, #0
 80185f2:	b510      	push	{r4, lr}
 80185f4:	4604      	mov	r4, r0
 80185f6:	e9c0 3300 	strd	r3, r3, [r0]
 80185fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80185fe:	6083      	str	r3, [r0, #8]
 8018600:	8181      	strh	r1, [r0, #12]
 8018602:	6643      	str	r3, [r0, #100]	; 0x64
 8018604:	81c2      	strh	r2, [r0, #14]
 8018606:	6183      	str	r3, [r0, #24]
 8018608:	4619      	mov	r1, r3
 801860a:	2208      	movs	r2, #8
 801860c:	305c      	adds	r0, #92	; 0x5c
 801860e:	f7fd fadf 	bl	8015bd0 <memset>
 8018612:	4b05      	ldr	r3, [pc, #20]	; (8018628 <std+0x38>)
 8018614:	6263      	str	r3, [r4, #36]	; 0x24
 8018616:	4b05      	ldr	r3, [pc, #20]	; (801862c <std+0x3c>)
 8018618:	62a3      	str	r3, [r4, #40]	; 0x28
 801861a:	4b05      	ldr	r3, [pc, #20]	; (8018630 <std+0x40>)
 801861c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801861e:	4b05      	ldr	r3, [pc, #20]	; (8018634 <std+0x44>)
 8018620:	6224      	str	r4, [r4, #32]
 8018622:	6323      	str	r3, [r4, #48]	; 0x30
 8018624:	bd10      	pop	{r4, pc}
 8018626:	bf00      	nop
 8018628:	0801a051 	.word	0x0801a051
 801862c:	0801a073 	.word	0x0801a073
 8018630:	0801a0ab 	.word	0x0801a0ab
 8018634:	0801a0cf 	.word	0x0801a0cf

08018638 <_cleanup_r>:
 8018638:	4901      	ldr	r1, [pc, #4]	; (8018640 <_cleanup_r+0x8>)
 801863a:	f000 b8af 	b.w	801879c <_fwalk_reent>
 801863e:	bf00      	nop
 8018640:	08018579 	.word	0x08018579

08018644 <__sfmoreglue>:
 8018644:	b570      	push	{r4, r5, r6, lr}
 8018646:	1e4a      	subs	r2, r1, #1
 8018648:	2568      	movs	r5, #104	; 0x68
 801864a:	4355      	muls	r5, r2
 801864c:	460e      	mov	r6, r1
 801864e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018652:	f001 f9d3 	bl	80199fc <_malloc_r>
 8018656:	4604      	mov	r4, r0
 8018658:	b140      	cbz	r0, 801866c <__sfmoreglue+0x28>
 801865a:	2100      	movs	r1, #0
 801865c:	e9c0 1600 	strd	r1, r6, [r0]
 8018660:	300c      	adds	r0, #12
 8018662:	60a0      	str	r0, [r4, #8]
 8018664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018668:	f7fd fab2 	bl	8015bd0 <memset>
 801866c:	4620      	mov	r0, r4
 801866e:	bd70      	pop	{r4, r5, r6, pc}

08018670 <__sfp_lock_acquire>:
 8018670:	4801      	ldr	r0, [pc, #4]	; (8018678 <__sfp_lock_acquire+0x8>)
 8018672:	f000 bc26 	b.w	8018ec2 <__retarget_lock_acquire_recursive>
 8018676:	bf00      	nop
 8018678:	2003127c 	.word	0x2003127c

0801867c <__sfp_lock_release>:
 801867c:	4801      	ldr	r0, [pc, #4]	; (8018684 <__sfp_lock_release+0x8>)
 801867e:	f000 bc21 	b.w	8018ec4 <__retarget_lock_release_recursive>
 8018682:	bf00      	nop
 8018684:	2003127c 	.word	0x2003127c

08018688 <__sinit_lock_acquire>:
 8018688:	4801      	ldr	r0, [pc, #4]	; (8018690 <__sinit_lock_acquire+0x8>)
 801868a:	f000 bc1a 	b.w	8018ec2 <__retarget_lock_acquire_recursive>
 801868e:	bf00      	nop
 8018690:	20031277 	.word	0x20031277

08018694 <__sinit_lock_release>:
 8018694:	4801      	ldr	r0, [pc, #4]	; (801869c <__sinit_lock_release+0x8>)
 8018696:	f000 bc15 	b.w	8018ec4 <__retarget_lock_release_recursive>
 801869a:	bf00      	nop
 801869c:	20031277 	.word	0x20031277

080186a0 <__sinit>:
 80186a0:	b510      	push	{r4, lr}
 80186a2:	4604      	mov	r4, r0
 80186a4:	f7ff fff0 	bl	8018688 <__sinit_lock_acquire>
 80186a8:	69a3      	ldr	r3, [r4, #24]
 80186aa:	b11b      	cbz	r3, 80186b4 <__sinit+0x14>
 80186ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186b0:	f7ff bff0 	b.w	8018694 <__sinit_lock_release>
 80186b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80186b8:	6523      	str	r3, [r4, #80]	; 0x50
 80186ba:	4b13      	ldr	r3, [pc, #76]	; (8018708 <__sinit+0x68>)
 80186bc:	4a13      	ldr	r2, [pc, #76]	; (801870c <__sinit+0x6c>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80186c2:	42a3      	cmp	r3, r4
 80186c4:	bf04      	itt	eq
 80186c6:	2301      	moveq	r3, #1
 80186c8:	61a3      	streq	r3, [r4, #24]
 80186ca:	4620      	mov	r0, r4
 80186cc:	f000 f820 	bl	8018710 <__sfp>
 80186d0:	6060      	str	r0, [r4, #4]
 80186d2:	4620      	mov	r0, r4
 80186d4:	f000 f81c 	bl	8018710 <__sfp>
 80186d8:	60a0      	str	r0, [r4, #8]
 80186da:	4620      	mov	r0, r4
 80186dc:	f000 f818 	bl	8018710 <__sfp>
 80186e0:	2200      	movs	r2, #0
 80186e2:	60e0      	str	r0, [r4, #12]
 80186e4:	2104      	movs	r1, #4
 80186e6:	6860      	ldr	r0, [r4, #4]
 80186e8:	f7ff ff82 	bl	80185f0 <std>
 80186ec:	68a0      	ldr	r0, [r4, #8]
 80186ee:	2201      	movs	r2, #1
 80186f0:	2109      	movs	r1, #9
 80186f2:	f7ff ff7d 	bl	80185f0 <std>
 80186f6:	68e0      	ldr	r0, [r4, #12]
 80186f8:	2202      	movs	r2, #2
 80186fa:	2112      	movs	r1, #18
 80186fc:	f7ff ff78 	bl	80185f0 <std>
 8018700:	2301      	movs	r3, #1
 8018702:	61a3      	str	r3, [r4, #24]
 8018704:	e7d2      	b.n	80186ac <__sinit+0xc>
 8018706:	bf00      	nop
 8018708:	0801c638 	.word	0x0801c638
 801870c:	08018639 	.word	0x08018639

08018710 <__sfp>:
 8018710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018712:	4607      	mov	r7, r0
 8018714:	f7ff ffac 	bl	8018670 <__sfp_lock_acquire>
 8018718:	4b1e      	ldr	r3, [pc, #120]	; (8018794 <__sfp+0x84>)
 801871a:	681e      	ldr	r6, [r3, #0]
 801871c:	69b3      	ldr	r3, [r6, #24]
 801871e:	b913      	cbnz	r3, 8018726 <__sfp+0x16>
 8018720:	4630      	mov	r0, r6
 8018722:	f7ff ffbd 	bl	80186a0 <__sinit>
 8018726:	3648      	adds	r6, #72	; 0x48
 8018728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801872c:	3b01      	subs	r3, #1
 801872e:	d503      	bpl.n	8018738 <__sfp+0x28>
 8018730:	6833      	ldr	r3, [r6, #0]
 8018732:	b30b      	cbz	r3, 8018778 <__sfp+0x68>
 8018734:	6836      	ldr	r6, [r6, #0]
 8018736:	e7f7      	b.n	8018728 <__sfp+0x18>
 8018738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801873c:	b9d5      	cbnz	r5, 8018774 <__sfp+0x64>
 801873e:	4b16      	ldr	r3, [pc, #88]	; (8018798 <__sfp+0x88>)
 8018740:	60e3      	str	r3, [r4, #12]
 8018742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018746:	6665      	str	r5, [r4, #100]	; 0x64
 8018748:	f000 fbba 	bl	8018ec0 <__retarget_lock_init_recursive>
 801874c:	f7ff ff96 	bl	801867c <__sfp_lock_release>
 8018750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018758:	6025      	str	r5, [r4, #0]
 801875a:	61a5      	str	r5, [r4, #24]
 801875c:	2208      	movs	r2, #8
 801875e:	4629      	mov	r1, r5
 8018760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018764:	f7fd fa34 	bl	8015bd0 <memset>
 8018768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801876c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018770:	4620      	mov	r0, r4
 8018772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018774:	3468      	adds	r4, #104	; 0x68
 8018776:	e7d9      	b.n	801872c <__sfp+0x1c>
 8018778:	2104      	movs	r1, #4
 801877a:	4638      	mov	r0, r7
 801877c:	f7ff ff62 	bl	8018644 <__sfmoreglue>
 8018780:	4604      	mov	r4, r0
 8018782:	6030      	str	r0, [r6, #0]
 8018784:	2800      	cmp	r0, #0
 8018786:	d1d5      	bne.n	8018734 <__sfp+0x24>
 8018788:	f7ff ff78 	bl	801867c <__sfp_lock_release>
 801878c:	230c      	movs	r3, #12
 801878e:	603b      	str	r3, [r7, #0]
 8018790:	e7ee      	b.n	8018770 <__sfp+0x60>
 8018792:	bf00      	nop
 8018794:	0801c638 	.word	0x0801c638
 8018798:	ffff0001 	.word	0xffff0001

0801879c <_fwalk_reent>:
 801879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187a0:	4606      	mov	r6, r0
 80187a2:	4688      	mov	r8, r1
 80187a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80187a8:	2700      	movs	r7, #0
 80187aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80187ae:	f1b9 0901 	subs.w	r9, r9, #1
 80187b2:	d505      	bpl.n	80187c0 <_fwalk_reent+0x24>
 80187b4:	6824      	ldr	r4, [r4, #0]
 80187b6:	2c00      	cmp	r4, #0
 80187b8:	d1f7      	bne.n	80187aa <_fwalk_reent+0xe>
 80187ba:	4638      	mov	r0, r7
 80187bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187c0:	89ab      	ldrh	r3, [r5, #12]
 80187c2:	2b01      	cmp	r3, #1
 80187c4:	d907      	bls.n	80187d6 <_fwalk_reent+0x3a>
 80187c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80187ca:	3301      	adds	r3, #1
 80187cc:	d003      	beq.n	80187d6 <_fwalk_reent+0x3a>
 80187ce:	4629      	mov	r1, r5
 80187d0:	4630      	mov	r0, r6
 80187d2:	47c0      	blx	r8
 80187d4:	4307      	orrs	r7, r0
 80187d6:	3568      	adds	r5, #104	; 0x68
 80187d8:	e7e9      	b.n	80187ae <_fwalk_reent+0x12>

080187da <rshift>:
 80187da:	6903      	ldr	r3, [r0, #16]
 80187dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80187e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80187e8:	f100 0414 	add.w	r4, r0, #20
 80187ec:	dd45      	ble.n	801887a <rshift+0xa0>
 80187ee:	f011 011f 	ands.w	r1, r1, #31
 80187f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80187f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80187fa:	d10c      	bne.n	8018816 <rshift+0x3c>
 80187fc:	f100 0710 	add.w	r7, r0, #16
 8018800:	4629      	mov	r1, r5
 8018802:	42b1      	cmp	r1, r6
 8018804:	d334      	bcc.n	8018870 <rshift+0x96>
 8018806:	1a9b      	subs	r3, r3, r2
 8018808:	009b      	lsls	r3, r3, #2
 801880a:	1eea      	subs	r2, r5, #3
 801880c:	4296      	cmp	r6, r2
 801880e:	bf38      	it	cc
 8018810:	2300      	movcc	r3, #0
 8018812:	4423      	add	r3, r4
 8018814:	e015      	b.n	8018842 <rshift+0x68>
 8018816:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801881a:	f1c1 0820 	rsb	r8, r1, #32
 801881e:	40cf      	lsrs	r7, r1
 8018820:	f105 0e04 	add.w	lr, r5, #4
 8018824:	46a1      	mov	r9, r4
 8018826:	4576      	cmp	r6, lr
 8018828:	46f4      	mov	ip, lr
 801882a:	d815      	bhi.n	8018858 <rshift+0x7e>
 801882c:	1a9b      	subs	r3, r3, r2
 801882e:	009a      	lsls	r2, r3, #2
 8018830:	3a04      	subs	r2, #4
 8018832:	3501      	adds	r5, #1
 8018834:	42ae      	cmp	r6, r5
 8018836:	bf38      	it	cc
 8018838:	2200      	movcc	r2, #0
 801883a:	18a3      	adds	r3, r4, r2
 801883c:	50a7      	str	r7, [r4, r2]
 801883e:	b107      	cbz	r7, 8018842 <rshift+0x68>
 8018840:	3304      	adds	r3, #4
 8018842:	1b1a      	subs	r2, r3, r4
 8018844:	42a3      	cmp	r3, r4
 8018846:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801884a:	bf08      	it	eq
 801884c:	2300      	moveq	r3, #0
 801884e:	6102      	str	r2, [r0, #16]
 8018850:	bf08      	it	eq
 8018852:	6143      	streq	r3, [r0, #20]
 8018854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018858:	f8dc c000 	ldr.w	ip, [ip]
 801885c:	fa0c fc08 	lsl.w	ip, ip, r8
 8018860:	ea4c 0707 	orr.w	r7, ip, r7
 8018864:	f849 7b04 	str.w	r7, [r9], #4
 8018868:	f85e 7b04 	ldr.w	r7, [lr], #4
 801886c:	40cf      	lsrs	r7, r1
 801886e:	e7da      	b.n	8018826 <rshift+0x4c>
 8018870:	f851 cb04 	ldr.w	ip, [r1], #4
 8018874:	f847 cf04 	str.w	ip, [r7, #4]!
 8018878:	e7c3      	b.n	8018802 <rshift+0x28>
 801887a:	4623      	mov	r3, r4
 801887c:	e7e1      	b.n	8018842 <rshift+0x68>

0801887e <__hexdig_fun>:
 801887e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018882:	2b09      	cmp	r3, #9
 8018884:	d802      	bhi.n	801888c <__hexdig_fun+0xe>
 8018886:	3820      	subs	r0, #32
 8018888:	b2c0      	uxtb	r0, r0
 801888a:	4770      	bx	lr
 801888c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018890:	2b05      	cmp	r3, #5
 8018892:	d801      	bhi.n	8018898 <__hexdig_fun+0x1a>
 8018894:	3847      	subs	r0, #71	; 0x47
 8018896:	e7f7      	b.n	8018888 <__hexdig_fun+0xa>
 8018898:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801889c:	2b05      	cmp	r3, #5
 801889e:	d801      	bhi.n	80188a4 <__hexdig_fun+0x26>
 80188a0:	3827      	subs	r0, #39	; 0x27
 80188a2:	e7f1      	b.n	8018888 <__hexdig_fun+0xa>
 80188a4:	2000      	movs	r0, #0
 80188a6:	4770      	bx	lr

080188a8 <__gethex>:
 80188a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ac:	ed2d 8b02 	vpush	{d8}
 80188b0:	b089      	sub	sp, #36	; 0x24
 80188b2:	ee08 0a10 	vmov	s16, r0
 80188b6:	9304      	str	r3, [sp, #16]
 80188b8:	4bbc      	ldr	r3, [pc, #752]	; (8018bac <__gethex+0x304>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	9301      	str	r3, [sp, #4]
 80188be:	4618      	mov	r0, r3
 80188c0:	468b      	mov	fp, r1
 80188c2:	4690      	mov	r8, r2
 80188c4:	f7e7 fcbc 	bl	8000240 <strlen>
 80188c8:	9b01      	ldr	r3, [sp, #4]
 80188ca:	f8db 2000 	ldr.w	r2, [fp]
 80188ce:	4403      	add	r3, r0
 80188d0:	4682      	mov	sl, r0
 80188d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80188d6:	9305      	str	r3, [sp, #20]
 80188d8:	1c93      	adds	r3, r2, #2
 80188da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80188de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80188e2:	32fe      	adds	r2, #254	; 0xfe
 80188e4:	18d1      	adds	r1, r2, r3
 80188e6:	461f      	mov	r7, r3
 80188e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80188ec:	9100      	str	r1, [sp, #0]
 80188ee:	2830      	cmp	r0, #48	; 0x30
 80188f0:	d0f8      	beq.n	80188e4 <__gethex+0x3c>
 80188f2:	f7ff ffc4 	bl	801887e <__hexdig_fun>
 80188f6:	4604      	mov	r4, r0
 80188f8:	2800      	cmp	r0, #0
 80188fa:	d13a      	bne.n	8018972 <__gethex+0xca>
 80188fc:	9901      	ldr	r1, [sp, #4]
 80188fe:	4652      	mov	r2, sl
 8018900:	4638      	mov	r0, r7
 8018902:	f001 fbe8 	bl	801a0d6 <strncmp>
 8018906:	4605      	mov	r5, r0
 8018908:	2800      	cmp	r0, #0
 801890a:	d168      	bne.n	80189de <__gethex+0x136>
 801890c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018910:	eb07 060a 	add.w	r6, r7, sl
 8018914:	f7ff ffb3 	bl	801887e <__hexdig_fun>
 8018918:	2800      	cmp	r0, #0
 801891a:	d062      	beq.n	80189e2 <__gethex+0x13a>
 801891c:	4633      	mov	r3, r6
 801891e:	7818      	ldrb	r0, [r3, #0]
 8018920:	2830      	cmp	r0, #48	; 0x30
 8018922:	461f      	mov	r7, r3
 8018924:	f103 0301 	add.w	r3, r3, #1
 8018928:	d0f9      	beq.n	801891e <__gethex+0x76>
 801892a:	f7ff ffa8 	bl	801887e <__hexdig_fun>
 801892e:	2301      	movs	r3, #1
 8018930:	fab0 f480 	clz	r4, r0
 8018934:	0964      	lsrs	r4, r4, #5
 8018936:	4635      	mov	r5, r6
 8018938:	9300      	str	r3, [sp, #0]
 801893a:	463a      	mov	r2, r7
 801893c:	4616      	mov	r6, r2
 801893e:	3201      	adds	r2, #1
 8018940:	7830      	ldrb	r0, [r6, #0]
 8018942:	f7ff ff9c 	bl	801887e <__hexdig_fun>
 8018946:	2800      	cmp	r0, #0
 8018948:	d1f8      	bne.n	801893c <__gethex+0x94>
 801894a:	9901      	ldr	r1, [sp, #4]
 801894c:	4652      	mov	r2, sl
 801894e:	4630      	mov	r0, r6
 8018950:	f001 fbc1 	bl	801a0d6 <strncmp>
 8018954:	b980      	cbnz	r0, 8018978 <__gethex+0xd0>
 8018956:	b94d      	cbnz	r5, 801896c <__gethex+0xc4>
 8018958:	eb06 050a 	add.w	r5, r6, sl
 801895c:	462a      	mov	r2, r5
 801895e:	4616      	mov	r6, r2
 8018960:	3201      	adds	r2, #1
 8018962:	7830      	ldrb	r0, [r6, #0]
 8018964:	f7ff ff8b 	bl	801887e <__hexdig_fun>
 8018968:	2800      	cmp	r0, #0
 801896a:	d1f8      	bne.n	801895e <__gethex+0xb6>
 801896c:	1bad      	subs	r5, r5, r6
 801896e:	00ad      	lsls	r5, r5, #2
 8018970:	e004      	b.n	801897c <__gethex+0xd4>
 8018972:	2400      	movs	r4, #0
 8018974:	4625      	mov	r5, r4
 8018976:	e7e0      	b.n	801893a <__gethex+0x92>
 8018978:	2d00      	cmp	r5, #0
 801897a:	d1f7      	bne.n	801896c <__gethex+0xc4>
 801897c:	7833      	ldrb	r3, [r6, #0]
 801897e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018982:	2b50      	cmp	r3, #80	; 0x50
 8018984:	d13b      	bne.n	80189fe <__gethex+0x156>
 8018986:	7873      	ldrb	r3, [r6, #1]
 8018988:	2b2b      	cmp	r3, #43	; 0x2b
 801898a:	d02c      	beq.n	80189e6 <__gethex+0x13e>
 801898c:	2b2d      	cmp	r3, #45	; 0x2d
 801898e:	d02e      	beq.n	80189ee <__gethex+0x146>
 8018990:	1c71      	adds	r1, r6, #1
 8018992:	f04f 0900 	mov.w	r9, #0
 8018996:	7808      	ldrb	r0, [r1, #0]
 8018998:	f7ff ff71 	bl	801887e <__hexdig_fun>
 801899c:	1e43      	subs	r3, r0, #1
 801899e:	b2db      	uxtb	r3, r3
 80189a0:	2b18      	cmp	r3, #24
 80189a2:	d82c      	bhi.n	80189fe <__gethex+0x156>
 80189a4:	f1a0 0210 	sub.w	r2, r0, #16
 80189a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80189ac:	f7ff ff67 	bl	801887e <__hexdig_fun>
 80189b0:	1e43      	subs	r3, r0, #1
 80189b2:	b2db      	uxtb	r3, r3
 80189b4:	2b18      	cmp	r3, #24
 80189b6:	d91d      	bls.n	80189f4 <__gethex+0x14c>
 80189b8:	f1b9 0f00 	cmp.w	r9, #0
 80189bc:	d000      	beq.n	80189c0 <__gethex+0x118>
 80189be:	4252      	negs	r2, r2
 80189c0:	4415      	add	r5, r2
 80189c2:	f8cb 1000 	str.w	r1, [fp]
 80189c6:	b1e4      	cbz	r4, 8018a02 <__gethex+0x15a>
 80189c8:	9b00      	ldr	r3, [sp, #0]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	bf14      	ite	ne
 80189ce:	2700      	movne	r7, #0
 80189d0:	2706      	moveq	r7, #6
 80189d2:	4638      	mov	r0, r7
 80189d4:	b009      	add	sp, #36	; 0x24
 80189d6:	ecbd 8b02 	vpop	{d8}
 80189da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189de:	463e      	mov	r6, r7
 80189e0:	4625      	mov	r5, r4
 80189e2:	2401      	movs	r4, #1
 80189e4:	e7ca      	b.n	801897c <__gethex+0xd4>
 80189e6:	f04f 0900 	mov.w	r9, #0
 80189ea:	1cb1      	adds	r1, r6, #2
 80189ec:	e7d3      	b.n	8018996 <__gethex+0xee>
 80189ee:	f04f 0901 	mov.w	r9, #1
 80189f2:	e7fa      	b.n	80189ea <__gethex+0x142>
 80189f4:	230a      	movs	r3, #10
 80189f6:	fb03 0202 	mla	r2, r3, r2, r0
 80189fa:	3a10      	subs	r2, #16
 80189fc:	e7d4      	b.n	80189a8 <__gethex+0x100>
 80189fe:	4631      	mov	r1, r6
 8018a00:	e7df      	b.n	80189c2 <__gethex+0x11a>
 8018a02:	1bf3      	subs	r3, r6, r7
 8018a04:	3b01      	subs	r3, #1
 8018a06:	4621      	mov	r1, r4
 8018a08:	2b07      	cmp	r3, #7
 8018a0a:	dc0b      	bgt.n	8018a24 <__gethex+0x17c>
 8018a0c:	ee18 0a10 	vmov	r0, s16
 8018a10:	f000 fad8 	bl	8018fc4 <_Balloc>
 8018a14:	4604      	mov	r4, r0
 8018a16:	b940      	cbnz	r0, 8018a2a <__gethex+0x182>
 8018a18:	4b65      	ldr	r3, [pc, #404]	; (8018bb0 <__gethex+0x308>)
 8018a1a:	4602      	mov	r2, r0
 8018a1c:	21de      	movs	r1, #222	; 0xde
 8018a1e:	4865      	ldr	r0, [pc, #404]	; (8018bb4 <__gethex+0x30c>)
 8018a20:	f001 fb8a 	bl	801a138 <__assert_func>
 8018a24:	3101      	adds	r1, #1
 8018a26:	105b      	asrs	r3, r3, #1
 8018a28:	e7ee      	b.n	8018a08 <__gethex+0x160>
 8018a2a:	f100 0914 	add.w	r9, r0, #20
 8018a2e:	f04f 0b00 	mov.w	fp, #0
 8018a32:	f1ca 0301 	rsb	r3, sl, #1
 8018a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8018a3a:	f8cd b000 	str.w	fp, [sp]
 8018a3e:	9306      	str	r3, [sp, #24]
 8018a40:	42b7      	cmp	r7, r6
 8018a42:	d340      	bcc.n	8018ac6 <__gethex+0x21e>
 8018a44:	9802      	ldr	r0, [sp, #8]
 8018a46:	9b00      	ldr	r3, [sp, #0]
 8018a48:	f840 3b04 	str.w	r3, [r0], #4
 8018a4c:	eba0 0009 	sub.w	r0, r0, r9
 8018a50:	1080      	asrs	r0, r0, #2
 8018a52:	0146      	lsls	r6, r0, #5
 8018a54:	6120      	str	r0, [r4, #16]
 8018a56:	4618      	mov	r0, r3
 8018a58:	f000 fbaa 	bl	80191b0 <__hi0bits>
 8018a5c:	1a30      	subs	r0, r6, r0
 8018a5e:	f8d8 6000 	ldr.w	r6, [r8]
 8018a62:	42b0      	cmp	r0, r6
 8018a64:	dd63      	ble.n	8018b2e <__gethex+0x286>
 8018a66:	1b87      	subs	r7, r0, r6
 8018a68:	4639      	mov	r1, r7
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f000 ff45 	bl	80198fa <__any_on>
 8018a70:	4682      	mov	sl, r0
 8018a72:	b1a8      	cbz	r0, 8018aa0 <__gethex+0x1f8>
 8018a74:	1e7b      	subs	r3, r7, #1
 8018a76:	1159      	asrs	r1, r3, #5
 8018a78:	f003 021f 	and.w	r2, r3, #31
 8018a7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018a80:	f04f 0a01 	mov.w	sl, #1
 8018a84:	fa0a f202 	lsl.w	r2, sl, r2
 8018a88:	420a      	tst	r2, r1
 8018a8a:	d009      	beq.n	8018aa0 <__gethex+0x1f8>
 8018a8c:	4553      	cmp	r3, sl
 8018a8e:	dd05      	ble.n	8018a9c <__gethex+0x1f4>
 8018a90:	1eb9      	subs	r1, r7, #2
 8018a92:	4620      	mov	r0, r4
 8018a94:	f000 ff31 	bl	80198fa <__any_on>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	d145      	bne.n	8018b28 <__gethex+0x280>
 8018a9c:	f04f 0a02 	mov.w	sl, #2
 8018aa0:	4639      	mov	r1, r7
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	f7ff fe99 	bl	80187da <rshift>
 8018aa8:	443d      	add	r5, r7
 8018aaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018aae:	42ab      	cmp	r3, r5
 8018ab0:	da4c      	bge.n	8018b4c <__gethex+0x2a4>
 8018ab2:	ee18 0a10 	vmov	r0, s16
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	f000 fac4 	bl	8019044 <_Bfree>
 8018abc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018abe:	2300      	movs	r3, #0
 8018ac0:	6013      	str	r3, [r2, #0]
 8018ac2:	27a3      	movs	r7, #163	; 0xa3
 8018ac4:	e785      	b.n	80189d2 <__gethex+0x12a>
 8018ac6:	1e73      	subs	r3, r6, #1
 8018ac8:	9a05      	ldr	r2, [sp, #20]
 8018aca:	9303      	str	r3, [sp, #12]
 8018acc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018ad0:	4293      	cmp	r3, r2
 8018ad2:	d019      	beq.n	8018b08 <__gethex+0x260>
 8018ad4:	f1bb 0f20 	cmp.w	fp, #32
 8018ad8:	d107      	bne.n	8018aea <__gethex+0x242>
 8018ada:	9b02      	ldr	r3, [sp, #8]
 8018adc:	9a00      	ldr	r2, [sp, #0]
 8018ade:	f843 2b04 	str.w	r2, [r3], #4
 8018ae2:	9302      	str	r3, [sp, #8]
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	9300      	str	r3, [sp, #0]
 8018ae8:	469b      	mov	fp, r3
 8018aea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018aee:	f7ff fec6 	bl	801887e <__hexdig_fun>
 8018af2:	9b00      	ldr	r3, [sp, #0]
 8018af4:	f000 000f 	and.w	r0, r0, #15
 8018af8:	fa00 f00b 	lsl.w	r0, r0, fp
 8018afc:	4303      	orrs	r3, r0
 8018afe:	9300      	str	r3, [sp, #0]
 8018b00:	f10b 0b04 	add.w	fp, fp, #4
 8018b04:	9b03      	ldr	r3, [sp, #12]
 8018b06:	e00d      	b.n	8018b24 <__gethex+0x27c>
 8018b08:	9b03      	ldr	r3, [sp, #12]
 8018b0a:	9a06      	ldr	r2, [sp, #24]
 8018b0c:	4413      	add	r3, r2
 8018b0e:	42bb      	cmp	r3, r7
 8018b10:	d3e0      	bcc.n	8018ad4 <__gethex+0x22c>
 8018b12:	4618      	mov	r0, r3
 8018b14:	9901      	ldr	r1, [sp, #4]
 8018b16:	9307      	str	r3, [sp, #28]
 8018b18:	4652      	mov	r2, sl
 8018b1a:	f001 fadc 	bl	801a0d6 <strncmp>
 8018b1e:	9b07      	ldr	r3, [sp, #28]
 8018b20:	2800      	cmp	r0, #0
 8018b22:	d1d7      	bne.n	8018ad4 <__gethex+0x22c>
 8018b24:	461e      	mov	r6, r3
 8018b26:	e78b      	b.n	8018a40 <__gethex+0x198>
 8018b28:	f04f 0a03 	mov.w	sl, #3
 8018b2c:	e7b8      	b.n	8018aa0 <__gethex+0x1f8>
 8018b2e:	da0a      	bge.n	8018b46 <__gethex+0x29e>
 8018b30:	1a37      	subs	r7, r6, r0
 8018b32:	4621      	mov	r1, r4
 8018b34:	ee18 0a10 	vmov	r0, s16
 8018b38:	463a      	mov	r2, r7
 8018b3a:	f000 fc9f 	bl	801947c <__lshift>
 8018b3e:	1bed      	subs	r5, r5, r7
 8018b40:	4604      	mov	r4, r0
 8018b42:	f100 0914 	add.w	r9, r0, #20
 8018b46:	f04f 0a00 	mov.w	sl, #0
 8018b4a:	e7ae      	b.n	8018aaa <__gethex+0x202>
 8018b4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018b50:	42a8      	cmp	r0, r5
 8018b52:	dd72      	ble.n	8018c3a <__gethex+0x392>
 8018b54:	1b45      	subs	r5, r0, r5
 8018b56:	42ae      	cmp	r6, r5
 8018b58:	dc36      	bgt.n	8018bc8 <__gethex+0x320>
 8018b5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b5e:	2b02      	cmp	r3, #2
 8018b60:	d02a      	beq.n	8018bb8 <__gethex+0x310>
 8018b62:	2b03      	cmp	r3, #3
 8018b64:	d02c      	beq.n	8018bc0 <__gethex+0x318>
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d115      	bne.n	8018b96 <__gethex+0x2ee>
 8018b6a:	42ae      	cmp	r6, r5
 8018b6c:	d113      	bne.n	8018b96 <__gethex+0x2ee>
 8018b6e:	2e01      	cmp	r6, #1
 8018b70:	d10b      	bne.n	8018b8a <__gethex+0x2e2>
 8018b72:	9a04      	ldr	r2, [sp, #16]
 8018b74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018b78:	6013      	str	r3, [r2, #0]
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	6123      	str	r3, [r4, #16]
 8018b7e:	f8c9 3000 	str.w	r3, [r9]
 8018b82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b84:	2762      	movs	r7, #98	; 0x62
 8018b86:	601c      	str	r4, [r3, #0]
 8018b88:	e723      	b.n	80189d2 <__gethex+0x12a>
 8018b8a:	1e71      	subs	r1, r6, #1
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	f000 feb4 	bl	80198fa <__any_on>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	d1ed      	bne.n	8018b72 <__gethex+0x2ca>
 8018b96:	ee18 0a10 	vmov	r0, s16
 8018b9a:	4621      	mov	r1, r4
 8018b9c:	f000 fa52 	bl	8019044 <_Bfree>
 8018ba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	6013      	str	r3, [r2, #0]
 8018ba6:	2750      	movs	r7, #80	; 0x50
 8018ba8:	e713      	b.n	80189d2 <__gethex+0x12a>
 8018baa:	bf00      	nop
 8018bac:	0801c92c 	.word	0x0801c92c
 8018bb0:	0801c84c 	.word	0x0801c84c
 8018bb4:	0801c8c0 	.word	0x0801c8c0
 8018bb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d1eb      	bne.n	8018b96 <__gethex+0x2ee>
 8018bbe:	e7d8      	b.n	8018b72 <__gethex+0x2ca>
 8018bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d1d5      	bne.n	8018b72 <__gethex+0x2ca>
 8018bc6:	e7e6      	b.n	8018b96 <__gethex+0x2ee>
 8018bc8:	1e6f      	subs	r7, r5, #1
 8018bca:	f1ba 0f00 	cmp.w	sl, #0
 8018bce:	d131      	bne.n	8018c34 <__gethex+0x38c>
 8018bd0:	b127      	cbz	r7, 8018bdc <__gethex+0x334>
 8018bd2:	4639      	mov	r1, r7
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	f000 fe90 	bl	80198fa <__any_on>
 8018bda:	4682      	mov	sl, r0
 8018bdc:	117b      	asrs	r3, r7, #5
 8018bde:	2101      	movs	r1, #1
 8018be0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018be4:	f007 071f 	and.w	r7, r7, #31
 8018be8:	fa01 f707 	lsl.w	r7, r1, r7
 8018bec:	421f      	tst	r7, r3
 8018bee:	4629      	mov	r1, r5
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	bf18      	it	ne
 8018bf4:	f04a 0a02 	orrne.w	sl, sl, #2
 8018bf8:	1b76      	subs	r6, r6, r5
 8018bfa:	f7ff fdee 	bl	80187da <rshift>
 8018bfe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018c02:	2702      	movs	r7, #2
 8018c04:	f1ba 0f00 	cmp.w	sl, #0
 8018c08:	d048      	beq.n	8018c9c <__gethex+0x3f4>
 8018c0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018c0e:	2b02      	cmp	r3, #2
 8018c10:	d015      	beq.n	8018c3e <__gethex+0x396>
 8018c12:	2b03      	cmp	r3, #3
 8018c14:	d017      	beq.n	8018c46 <__gethex+0x39e>
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d109      	bne.n	8018c2e <__gethex+0x386>
 8018c1a:	f01a 0f02 	tst.w	sl, #2
 8018c1e:	d006      	beq.n	8018c2e <__gethex+0x386>
 8018c20:	f8d9 0000 	ldr.w	r0, [r9]
 8018c24:	ea4a 0a00 	orr.w	sl, sl, r0
 8018c28:	f01a 0f01 	tst.w	sl, #1
 8018c2c:	d10e      	bne.n	8018c4c <__gethex+0x3a4>
 8018c2e:	f047 0710 	orr.w	r7, r7, #16
 8018c32:	e033      	b.n	8018c9c <__gethex+0x3f4>
 8018c34:	f04f 0a01 	mov.w	sl, #1
 8018c38:	e7d0      	b.n	8018bdc <__gethex+0x334>
 8018c3a:	2701      	movs	r7, #1
 8018c3c:	e7e2      	b.n	8018c04 <__gethex+0x35c>
 8018c3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c40:	f1c3 0301 	rsb	r3, r3, #1
 8018c44:	9315      	str	r3, [sp, #84]	; 0x54
 8018c46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d0f0      	beq.n	8018c2e <__gethex+0x386>
 8018c4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018c50:	f104 0314 	add.w	r3, r4, #20
 8018c54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018c58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018c5c:	f04f 0c00 	mov.w	ip, #0
 8018c60:	4618      	mov	r0, r3
 8018c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018c6a:	d01c      	beq.n	8018ca6 <__gethex+0x3fe>
 8018c6c:	3201      	adds	r2, #1
 8018c6e:	6002      	str	r2, [r0, #0]
 8018c70:	2f02      	cmp	r7, #2
 8018c72:	f104 0314 	add.w	r3, r4, #20
 8018c76:	d13f      	bne.n	8018cf8 <__gethex+0x450>
 8018c78:	f8d8 2000 	ldr.w	r2, [r8]
 8018c7c:	3a01      	subs	r2, #1
 8018c7e:	42b2      	cmp	r2, r6
 8018c80:	d10a      	bne.n	8018c98 <__gethex+0x3f0>
 8018c82:	1171      	asrs	r1, r6, #5
 8018c84:	2201      	movs	r2, #1
 8018c86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c8a:	f006 061f 	and.w	r6, r6, #31
 8018c8e:	fa02 f606 	lsl.w	r6, r2, r6
 8018c92:	421e      	tst	r6, r3
 8018c94:	bf18      	it	ne
 8018c96:	4617      	movne	r7, r2
 8018c98:	f047 0720 	orr.w	r7, r7, #32
 8018c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c9e:	601c      	str	r4, [r3, #0]
 8018ca0:	9b04      	ldr	r3, [sp, #16]
 8018ca2:	601d      	str	r5, [r3, #0]
 8018ca4:	e695      	b.n	80189d2 <__gethex+0x12a>
 8018ca6:	4299      	cmp	r1, r3
 8018ca8:	f843 cc04 	str.w	ip, [r3, #-4]
 8018cac:	d8d8      	bhi.n	8018c60 <__gethex+0x3b8>
 8018cae:	68a3      	ldr	r3, [r4, #8]
 8018cb0:	459b      	cmp	fp, r3
 8018cb2:	db19      	blt.n	8018ce8 <__gethex+0x440>
 8018cb4:	6861      	ldr	r1, [r4, #4]
 8018cb6:	ee18 0a10 	vmov	r0, s16
 8018cba:	3101      	adds	r1, #1
 8018cbc:	f000 f982 	bl	8018fc4 <_Balloc>
 8018cc0:	4681      	mov	r9, r0
 8018cc2:	b918      	cbnz	r0, 8018ccc <__gethex+0x424>
 8018cc4:	4b1a      	ldr	r3, [pc, #104]	; (8018d30 <__gethex+0x488>)
 8018cc6:	4602      	mov	r2, r0
 8018cc8:	2184      	movs	r1, #132	; 0x84
 8018cca:	e6a8      	b.n	8018a1e <__gethex+0x176>
 8018ccc:	6922      	ldr	r2, [r4, #16]
 8018cce:	3202      	adds	r2, #2
 8018cd0:	f104 010c 	add.w	r1, r4, #12
 8018cd4:	0092      	lsls	r2, r2, #2
 8018cd6:	300c      	adds	r0, #12
 8018cd8:	f7fc ff6c 	bl	8015bb4 <memcpy>
 8018cdc:	4621      	mov	r1, r4
 8018cde:	ee18 0a10 	vmov	r0, s16
 8018ce2:	f000 f9af 	bl	8019044 <_Bfree>
 8018ce6:	464c      	mov	r4, r9
 8018ce8:	6923      	ldr	r3, [r4, #16]
 8018cea:	1c5a      	adds	r2, r3, #1
 8018cec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018cf0:	6122      	str	r2, [r4, #16]
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	615a      	str	r2, [r3, #20]
 8018cf6:	e7bb      	b.n	8018c70 <__gethex+0x3c8>
 8018cf8:	6922      	ldr	r2, [r4, #16]
 8018cfa:	455a      	cmp	r2, fp
 8018cfc:	dd0b      	ble.n	8018d16 <__gethex+0x46e>
 8018cfe:	2101      	movs	r1, #1
 8018d00:	4620      	mov	r0, r4
 8018d02:	f7ff fd6a 	bl	80187da <rshift>
 8018d06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d0a:	3501      	adds	r5, #1
 8018d0c:	42ab      	cmp	r3, r5
 8018d0e:	f6ff aed0 	blt.w	8018ab2 <__gethex+0x20a>
 8018d12:	2701      	movs	r7, #1
 8018d14:	e7c0      	b.n	8018c98 <__gethex+0x3f0>
 8018d16:	f016 061f 	ands.w	r6, r6, #31
 8018d1a:	d0fa      	beq.n	8018d12 <__gethex+0x46a>
 8018d1c:	449a      	add	sl, r3
 8018d1e:	f1c6 0620 	rsb	r6, r6, #32
 8018d22:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018d26:	f000 fa43 	bl	80191b0 <__hi0bits>
 8018d2a:	42b0      	cmp	r0, r6
 8018d2c:	dbe7      	blt.n	8018cfe <__gethex+0x456>
 8018d2e:	e7f0      	b.n	8018d12 <__gethex+0x46a>
 8018d30:	0801c84c 	.word	0x0801c84c

08018d34 <L_shift>:
 8018d34:	f1c2 0208 	rsb	r2, r2, #8
 8018d38:	0092      	lsls	r2, r2, #2
 8018d3a:	b570      	push	{r4, r5, r6, lr}
 8018d3c:	f1c2 0620 	rsb	r6, r2, #32
 8018d40:	6843      	ldr	r3, [r0, #4]
 8018d42:	6804      	ldr	r4, [r0, #0]
 8018d44:	fa03 f506 	lsl.w	r5, r3, r6
 8018d48:	432c      	orrs	r4, r5
 8018d4a:	40d3      	lsrs	r3, r2
 8018d4c:	6004      	str	r4, [r0, #0]
 8018d4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018d52:	4288      	cmp	r0, r1
 8018d54:	d3f4      	bcc.n	8018d40 <L_shift+0xc>
 8018d56:	bd70      	pop	{r4, r5, r6, pc}

08018d58 <__match>:
 8018d58:	b530      	push	{r4, r5, lr}
 8018d5a:	6803      	ldr	r3, [r0, #0]
 8018d5c:	3301      	adds	r3, #1
 8018d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d62:	b914      	cbnz	r4, 8018d6a <__match+0x12>
 8018d64:	6003      	str	r3, [r0, #0]
 8018d66:	2001      	movs	r0, #1
 8018d68:	bd30      	pop	{r4, r5, pc}
 8018d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018d72:	2d19      	cmp	r5, #25
 8018d74:	bf98      	it	ls
 8018d76:	3220      	addls	r2, #32
 8018d78:	42a2      	cmp	r2, r4
 8018d7a:	d0f0      	beq.n	8018d5e <__match+0x6>
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	e7f3      	b.n	8018d68 <__match+0x10>

08018d80 <__hexnan>:
 8018d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d84:	680b      	ldr	r3, [r1, #0]
 8018d86:	6801      	ldr	r1, [r0, #0]
 8018d88:	115e      	asrs	r6, r3, #5
 8018d8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018d8e:	f013 031f 	ands.w	r3, r3, #31
 8018d92:	b087      	sub	sp, #28
 8018d94:	bf18      	it	ne
 8018d96:	3604      	addne	r6, #4
 8018d98:	2500      	movs	r5, #0
 8018d9a:	1f37      	subs	r7, r6, #4
 8018d9c:	4682      	mov	sl, r0
 8018d9e:	4690      	mov	r8, r2
 8018da0:	9301      	str	r3, [sp, #4]
 8018da2:	f846 5c04 	str.w	r5, [r6, #-4]
 8018da6:	46b9      	mov	r9, r7
 8018da8:	463c      	mov	r4, r7
 8018daa:	9502      	str	r5, [sp, #8]
 8018dac:	46ab      	mov	fp, r5
 8018dae:	784a      	ldrb	r2, [r1, #1]
 8018db0:	1c4b      	adds	r3, r1, #1
 8018db2:	9303      	str	r3, [sp, #12]
 8018db4:	b342      	cbz	r2, 8018e08 <__hexnan+0x88>
 8018db6:	4610      	mov	r0, r2
 8018db8:	9105      	str	r1, [sp, #20]
 8018dba:	9204      	str	r2, [sp, #16]
 8018dbc:	f7ff fd5f 	bl	801887e <__hexdig_fun>
 8018dc0:	2800      	cmp	r0, #0
 8018dc2:	d14f      	bne.n	8018e64 <__hexnan+0xe4>
 8018dc4:	9a04      	ldr	r2, [sp, #16]
 8018dc6:	9905      	ldr	r1, [sp, #20]
 8018dc8:	2a20      	cmp	r2, #32
 8018dca:	d818      	bhi.n	8018dfe <__hexnan+0x7e>
 8018dcc:	9b02      	ldr	r3, [sp, #8]
 8018dce:	459b      	cmp	fp, r3
 8018dd0:	dd13      	ble.n	8018dfa <__hexnan+0x7a>
 8018dd2:	454c      	cmp	r4, r9
 8018dd4:	d206      	bcs.n	8018de4 <__hexnan+0x64>
 8018dd6:	2d07      	cmp	r5, #7
 8018dd8:	dc04      	bgt.n	8018de4 <__hexnan+0x64>
 8018dda:	462a      	mov	r2, r5
 8018ddc:	4649      	mov	r1, r9
 8018dde:	4620      	mov	r0, r4
 8018de0:	f7ff ffa8 	bl	8018d34 <L_shift>
 8018de4:	4544      	cmp	r4, r8
 8018de6:	d950      	bls.n	8018e8a <__hexnan+0x10a>
 8018de8:	2300      	movs	r3, #0
 8018dea:	f1a4 0904 	sub.w	r9, r4, #4
 8018dee:	f844 3c04 	str.w	r3, [r4, #-4]
 8018df2:	f8cd b008 	str.w	fp, [sp, #8]
 8018df6:	464c      	mov	r4, r9
 8018df8:	461d      	mov	r5, r3
 8018dfa:	9903      	ldr	r1, [sp, #12]
 8018dfc:	e7d7      	b.n	8018dae <__hexnan+0x2e>
 8018dfe:	2a29      	cmp	r2, #41	; 0x29
 8018e00:	d156      	bne.n	8018eb0 <__hexnan+0x130>
 8018e02:	3102      	adds	r1, #2
 8018e04:	f8ca 1000 	str.w	r1, [sl]
 8018e08:	f1bb 0f00 	cmp.w	fp, #0
 8018e0c:	d050      	beq.n	8018eb0 <__hexnan+0x130>
 8018e0e:	454c      	cmp	r4, r9
 8018e10:	d206      	bcs.n	8018e20 <__hexnan+0xa0>
 8018e12:	2d07      	cmp	r5, #7
 8018e14:	dc04      	bgt.n	8018e20 <__hexnan+0xa0>
 8018e16:	462a      	mov	r2, r5
 8018e18:	4649      	mov	r1, r9
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f7ff ff8a 	bl	8018d34 <L_shift>
 8018e20:	4544      	cmp	r4, r8
 8018e22:	d934      	bls.n	8018e8e <__hexnan+0x10e>
 8018e24:	f1a8 0204 	sub.w	r2, r8, #4
 8018e28:	4623      	mov	r3, r4
 8018e2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018e2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018e32:	429f      	cmp	r7, r3
 8018e34:	d2f9      	bcs.n	8018e2a <__hexnan+0xaa>
 8018e36:	1b3b      	subs	r3, r7, r4
 8018e38:	f023 0303 	bic.w	r3, r3, #3
 8018e3c:	3304      	adds	r3, #4
 8018e3e:	3401      	adds	r4, #1
 8018e40:	3e03      	subs	r6, #3
 8018e42:	42b4      	cmp	r4, r6
 8018e44:	bf88      	it	hi
 8018e46:	2304      	movhi	r3, #4
 8018e48:	4443      	add	r3, r8
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	f843 2b04 	str.w	r2, [r3], #4
 8018e50:	429f      	cmp	r7, r3
 8018e52:	d2fb      	bcs.n	8018e4c <__hexnan+0xcc>
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	b91b      	cbnz	r3, 8018e60 <__hexnan+0xe0>
 8018e58:	4547      	cmp	r7, r8
 8018e5a:	d127      	bne.n	8018eac <__hexnan+0x12c>
 8018e5c:	2301      	movs	r3, #1
 8018e5e:	603b      	str	r3, [r7, #0]
 8018e60:	2005      	movs	r0, #5
 8018e62:	e026      	b.n	8018eb2 <__hexnan+0x132>
 8018e64:	3501      	adds	r5, #1
 8018e66:	2d08      	cmp	r5, #8
 8018e68:	f10b 0b01 	add.w	fp, fp, #1
 8018e6c:	dd06      	ble.n	8018e7c <__hexnan+0xfc>
 8018e6e:	4544      	cmp	r4, r8
 8018e70:	d9c3      	bls.n	8018dfa <__hexnan+0x7a>
 8018e72:	2300      	movs	r3, #0
 8018e74:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e78:	2501      	movs	r5, #1
 8018e7a:	3c04      	subs	r4, #4
 8018e7c:	6822      	ldr	r2, [r4, #0]
 8018e7e:	f000 000f 	and.w	r0, r0, #15
 8018e82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018e86:	6022      	str	r2, [r4, #0]
 8018e88:	e7b7      	b.n	8018dfa <__hexnan+0x7a>
 8018e8a:	2508      	movs	r5, #8
 8018e8c:	e7b5      	b.n	8018dfa <__hexnan+0x7a>
 8018e8e:	9b01      	ldr	r3, [sp, #4]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d0df      	beq.n	8018e54 <__hexnan+0xd4>
 8018e94:	f04f 32ff 	mov.w	r2, #4294967295
 8018e98:	f1c3 0320 	rsb	r3, r3, #32
 8018e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8018ea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018ea4:	401a      	ands	r2, r3
 8018ea6:	f846 2c04 	str.w	r2, [r6, #-4]
 8018eaa:	e7d3      	b.n	8018e54 <__hexnan+0xd4>
 8018eac:	3f04      	subs	r7, #4
 8018eae:	e7d1      	b.n	8018e54 <__hexnan+0xd4>
 8018eb0:	2004      	movs	r0, #4
 8018eb2:	b007      	add	sp, #28
 8018eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018eb8 <_localeconv_r>:
 8018eb8:	4800      	ldr	r0, [pc, #0]	; (8018ebc <_localeconv_r+0x4>)
 8018eba:	4770      	bx	lr
 8018ebc:	200003ac 	.word	0x200003ac

08018ec0 <__retarget_lock_init_recursive>:
 8018ec0:	4770      	bx	lr

08018ec2 <__retarget_lock_acquire_recursive>:
 8018ec2:	4770      	bx	lr

08018ec4 <__retarget_lock_release_recursive>:
 8018ec4:	4770      	bx	lr

08018ec6 <__swhatbuf_r>:
 8018ec6:	b570      	push	{r4, r5, r6, lr}
 8018ec8:	460e      	mov	r6, r1
 8018eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ece:	2900      	cmp	r1, #0
 8018ed0:	b096      	sub	sp, #88	; 0x58
 8018ed2:	4614      	mov	r4, r2
 8018ed4:	461d      	mov	r5, r3
 8018ed6:	da07      	bge.n	8018ee8 <__swhatbuf_r+0x22>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	602b      	str	r3, [r5, #0]
 8018edc:	89b3      	ldrh	r3, [r6, #12]
 8018ede:	061a      	lsls	r2, r3, #24
 8018ee0:	d410      	bmi.n	8018f04 <__swhatbuf_r+0x3e>
 8018ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ee6:	e00e      	b.n	8018f06 <__swhatbuf_r+0x40>
 8018ee8:	466a      	mov	r2, sp
 8018eea:	f001 f965 	bl	801a1b8 <_fstat_r>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	dbf2      	blt.n	8018ed8 <__swhatbuf_r+0x12>
 8018ef2:	9a01      	ldr	r2, [sp, #4]
 8018ef4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018ef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018efc:	425a      	negs	r2, r3
 8018efe:	415a      	adcs	r2, r3
 8018f00:	602a      	str	r2, [r5, #0]
 8018f02:	e7ee      	b.n	8018ee2 <__swhatbuf_r+0x1c>
 8018f04:	2340      	movs	r3, #64	; 0x40
 8018f06:	2000      	movs	r0, #0
 8018f08:	6023      	str	r3, [r4, #0]
 8018f0a:	b016      	add	sp, #88	; 0x58
 8018f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018f10 <__smakebuf_r>:
 8018f10:	898b      	ldrh	r3, [r1, #12]
 8018f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f14:	079d      	lsls	r5, r3, #30
 8018f16:	4606      	mov	r6, r0
 8018f18:	460c      	mov	r4, r1
 8018f1a:	d507      	bpl.n	8018f2c <__smakebuf_r+0x1c>
 8018f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f20:	6023      	str	r3, [r4, #0]
 8018f22:	6123      	str	r3, [r4, #16]
 8018f24:	2301      	movs	r3, #1
 8018f26:	6163      	str	r3, [r4, #20]
 8018f28:	b002      	add	sp, #8
 8018f2a:	bd70      	pop	{r4, r5, r6, pc}
 8018f2c:	ab01      	add	r3, sp, #4
 8018f2e:	466a      	mov	r2, sp
 8018f30:	f7ff ffc9 	bl	8018ec6 <__swhatbuf_r>
 8018f34:	9900      	ldr	r1, [sp, #0]
 8018f36:	4605      	mov	r5, r0
 8018f38:	4630      	mov	r0, r6
 8018f3a:	f000 fd5f 	bl	80199fc <_malloc_r>
 8018f3e:	b948      	cbnz	r0, 8018f54 <__smakebuf_r+0x44>
 8018f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f44:	059a      	lsls	r2, r3, #22
 8018f46:	d4ef      	bmi.n	8018f28 <__smakebuf_r+0x18>
 8018f48:	f023 0303 	bic.w	r3, r3, #3
 8018f4c:	f043 0302 	orr.w	r3, r3, #2
 8018f50:	81a3      	strh	r3, [r4, #12]
 8018f52:	e7e3      	b.n	8018f1c <__smakebuf_r+0xc>
 8018f54:	4b0d      	ldr	r3, [pc, #52]	; (8018f8c <__smakebuf_r+0x7c>)
 8018f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8018f58:	89a3      	ldrh	r3, [r4, #12]
 8018f5a:	6020      	str	r0, [r4, #0]
 8018f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f60:	81a3      	strh	r3, [r4, #12]
 8018f62:	9b00      	ldr	r3, [sp, #0]
 8018f64:	6163      	str	r3, [r4, #20]
 8018f66:	9b01      	ldr	r3, [sp, #4]
 8018f68:	6120      	str	r0, [r4, #16]
 8018f6a:	b15b      	cbz	r3, 8018f84 <__smakebuf_r+0x74>
 8018f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f70:	4630      	mov	r0, r6
 8018f72:	f001 f933 	bl	801a1dc <_isatty_r>
 8018f76:	b128      	cbz	r0, 8018f84 <__smakebuf_r+0x74>
 8018f78:	89a3      	ldrh	r3, [r4, #12]
 8018f7a:	f023 0303 	bic.w	r3, r3, #3
 8018f7e:	f043 0301 	orr.w	r3, r3, #1
 8018f82:	81a3      	strh	r3, [r4, #12]
 8018f84:	89a0      	ldrh	r0, [r4, #12]
 8018f86:	4305      	orrs	r5, r0
 8018f88:	81a5      	strh	r5, [r4, #12]
 8018f8a:	e7cd      	b.n	8018f28 <__smakebuf_r+0x18>
 8018f8c:	08018639 	.word	0x08018639

08018f90 <malloc>:
 8018f90:	4b02      	ldr	r3, [pc, #8]	; (8018f9c <malloc+0xc>)
 8018f92:	4601      	mov	r1, r0
 8018f94:	6818      	ldr	r0, [r3, #0]
 8018f96:	f000 bd31 	b.w	80199fc <_malloc_r>
 8018f9a:	bf00      	nop
 8018f9c:	20000254 	.word	0x20000254

08018fa0 <__ascii_mbtowc>:
 8018fa0:	b082      	sub	sp, #8
 8018fa2:	b901      	cbnz	r1, 8018fa6 <__ascii_mbtowc+0x6>
 8018fa4:	a901      	add	r1, sp, #4
 8018fa6:	b142      	cbz	r2, 8018fba <__ascii_mbtowc+0x1a>
 8018fa8:	b14b      	cbz	r3, 8018fbe <__ascii_mbtowc+0x1e>
 8018faa:	7813      	ldrb	r3, [r2, #0]
 8018fac:	600b      	str	r3, [r1, #0]
 8018fae:	7812      	ldrb	r2, [r2, #0]
 8018fb0:	1e10      	subs	r0, r2, #0
 8018fb2:	bf18      	it	ne
 8018fb4:	2001      	movne	r0, #1
 8018fb6:	b002      	add	sp, #8
 8018fb8:	4770      	bx	lr
 8018fba:	4610      	mov	r0, r2
 8018fbc:	e7fb      	b.n	8018fb6 <__ascii_mbtowc+0x16>
 8018fbe:	f06f 0001 	mvn.w	r0, #1
 8018fc2:	e7f8      	b.n	8018fb6 <__ascii_mbtowc+0x16>

08018fc4 <_Balloc>:
 8018fc4:	b570      	push	{r4, r5, r6, lr}
 8018fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018fc8:	4604      	mov	r4, r0
 8018fca:	460d      	mov	r5, r1
 8018fcc:	b976      	cbnz	r6, 8018fec <_Balloc+0x28>
 8018fce:	2010      	movs	r0, #16
 8018fd0:	f7ff ffde 	bl	8018f90 <malloc>
 8018fd4:	4602      	mov	r2, r0
 8018fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8018fd8:	b920      	cbnz	r0, 8018fe4 <_Balloc+0x20>
 8018fda:	4b18      	ldr	r3, [pc, #96]	; (801903c <_Balloc+0x78>)
 8018fdc:	4818      	ldr	r0, [pc, #96]	; (8019040 <_Balloc+0x7c>)
 8018fde:	2166      	movs	r1, #102	; 0x66
 8018fe0:	f001 f8aa 	bl	801a138 <__assert_func>
 8018fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018fe8:	6006      	str	r6, [r0, #0]
 8018fea:	60c6      	str	r6, [r0, #12]
 8018fec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018fee:	68f3      	ldr	r3, [r6, #12]
 8018ff0:	b183      	cbz	r3, 8019014 <_Balloc+0x50>
 8018ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ff4:	68db      	ldr	r3, [r3, #12]
 8018ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018ffa:	b9b8      	cbnz	r0, 801902c <_Balloc+0x68>
 8018ffc:	2101      	movs	r1, #1
 8018ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8019002:	1d72      	adds	r2, r6, #5
 8019004:	0092      	lsls	r2, r2, #2
 8019006:	4620      	mov	r0, r4
 8019008:	f000 fc98 	bl	801993c <_calloc_r>
 801900c:	b160      	cbz	r0, 8019028 <_Balloc+0x64>
 801900e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019012:	e00e      	b.n	8019032 <_Balloc+0x6e>
 8019014:	2221      	movs	r2, #33	; 0x21
 8019016:	2104      	movs	r1, #4
 8019018:	4620      	mov	r0, r4
 801901a:	f000 fc8f 	bl	801993c <_calloc_r>
 801901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019020:	60f0      	str	r0, [r6, #12]
 8019022:	68db      	ldr	r3, [r3, #12]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d1e4      	bne.n	8018ff2 <_Balloc+0x2e>
 8019028:	2000      	movs	r0, #0
 801902a:	bd70      	pop	{r4, r5, r6, pc}
 801902c:	6802      	ldr	r2, [r0, #0]
 801902e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019032:	2300      	movs	r3, #0
 8019034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019038:	e7f7      	b.n	801902a <_Balloc+0x66>
 801903a:	bf00      	nop
 801903c:	0801c7d6 	.word	0x0801c7d6
 8019040:	0801c940 	.word	0x0801c940

08019044 <_Bfree>:
 8019044:	b570      	push	{r4, r5, r6, lr}
 8019046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019048:	4605      	mov	r5, r0
 801904a:	460c      	mov	r4, r1
 801904c:	b976      	cbnz	r6, 801906c <_Bfree+0x28>
 801904e:	2010      	movs	r0, #16
 8019050:	f7ff ff9e 	bl	8018f90 <malloc>
 8019054:	4602      	mov	r2, r0
 8019056:	6268      	str	r0, [r5, #36]	; 0x24
 8019058:	b920      	cbnz	r0, 8019064 <_Bfree+0x20>
 801905a:	4b09      	ldr	r3, [pc, #36]	; (8019080 <_Bfree+0x3c>)
 801905c:	4809      	ldr	r0, [pc, #36]	; (8019084 <_Bfree+0x40>)
 801905e:	218a      	movs	r1, #138	; 0x8a
 8019060:	f001 f86a 	bl	801a138 <__assert_func>
 8019064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019068:	6006      	str	r6, [r0, #0]
 801906a:	60c6      	str	r6, [r0, #12]
 801906c:	b13c      	cbz	r4, 801907e <_Bfree+0x3a>
 801906e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019070:	6862      	ldr	r2, [r4, #4]
 8019072:	68db      	ldr	r3, [r3, #12]
 8019074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019078:	6021      	str	r1, [r4, #0]
 801907a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801907e:	bd70      	pop	{r4, r5, r6, pc}
 8019080:	0801c7d6 	.word	0x0801c7d6
 8019084:	0801c940 	.word	0x0801c940

08019088 <__multadd>:
 8019088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801908c:	690e      	ldr	r6, [r1, #16]
 801908e:	4607      	mov	r7, r0
 8019090:	4698      	mov	r8, r3
 8019092:	460c      	mov	r4, r1
 8019094:	f101 0014 	add.w	r0, r1, #20
 8019098:	2300      	movs	r3, #0
 801909a:	6805      	ldr	r5, [r0, #0]
 801909c:	b2a9      	uxth	r1, r5
 801909e:	fb02 8101 	mla	r1, r2, r1, r8
 80190a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80190a6:	0c2d      	lsrs	r5, r5, #16
 80190a8:	fb02 c505 	mla	r5, r2, r5, ip
 80190ac:	b289      	uxth	r1, r1
 80190ae:	3301      	adds	r3, #1
 80190b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80190b4:	429e      	cmp	r6, r3
 80190b6:	f840 1b04 	str.w	r1, [r0], #4
 80190ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80190be:	dcec      	bgt.n	801909a <__multadd+0x12>
 80190c0:	f1b8 0f00 	cmp.w	r8, #0
 80190c4:	d022      	beq.n	801910c <__multadd+0x84>
 80190c6:	68a3      	ldr	r3, [r4, #8]
 80190c8:	42b3      	cmp	r3, r6
 80190ca:	dc19      	bgt.n	8019100 <__multadd+0x78>
 80190cc:	6861      	ldr	r1, [r4, #4]
 80190ce:	4638      	mov	r0, r7
 80190d0:	3101      	adds	r1, #1
 80190d2:	f7ff ff77 	bl	8018fc4 <_Balloc>
 80190d6:	4605      	mov	r5, r0
 80190d8:	b928      	cbnz	r0, 80190e6 <__multadd+0x5e>
 80190da:	4602      	mov	r2, r0
 80190dc:	4b0d      	ldr	r3, [pc, #52]	; (8019114 <__multadd+0x8c>)
 80190de:	480e      	ldr	r0, [pc, #56]	; (8019118 <__multadd+0x90>)
 80190e0:	21b5      	movs	r1, #181	; 0xb5
 80190e2:	f001 f829 	bl	801a138 <__assert_func>
 80190e6:	6922      	ldr	r2, [r4, #16]
 80190e8:	3202      	adds	r2, #2
 80190ea:	f104 010c 	add.w	r1, r4, #12
 80190ee:	0092      	lsls	r2, r2, #2
 80190f0:	300c      	adds	r0, #12
 80190f2:	f7fc fd5f 	bl	8015bb4 <memcpy>
 80190f6:	4621      	mov	r1, r4
 80190f8:	4638      	mov	r0, r7
 80190fa:	f7ff ffa3 	bl	8019044 <_Bfree>
 80190fe:	462c      	mov	r4, r5
 8019100:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019104:	3601      	adds	r6, #1
 8019106:	f8c3 8014 	str.w	r8, [r3, #20]
 801910a:	6126      	str	r6, [r4, #16]
 801910c:	4620      	mov	r0, r4
 801910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019112:	bf00      	nop
 8019114:	0801c84c 	.word	0x0801c84c
 8019118:	0801c940 	.word	0x0801c940

0801911c <__s2b>:
 801911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019120:	460c      	mov	r4, r1
 8019122:	4615      	mov	r5, r2
 8019124:	461f      	mov	r7, r3
 8019126:	2209      	movs	r2, #9
 8019128:	3308      	adds	r3, #8
 801912a:	4606      	mov	r6, r0
 801912c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019130:	2100      	movs	r1, #0
 8019132:	2201      	movs	r2, #1
 8019134:	429a      	cmp	r2, r3
 8019136:	db09      	blt.n	801914c <__s2b+0x30>
 8019138:	4630      	mov	r0, r6
 801913a:	f7ff ff43 	bl	8018fc4 <_Balloc>
 801913e:	b940      	cbnz	r0, 8019152 <__s2b+0x36>
 8019140:	4602      	mov	r2, r0
 8019142:	4b19      	ldr	r3, [pc, #100]	; (80191a8 <__s2b+0x8c>)
 8019144:	4819      	ldr	r0, [pc, #100]	; (80191ac <__s2b+0x90>)
 8019146:	21ce      	movs	r1, #206	; 0xce
 8019148:	f000 fff6 	bl	801a138 <__assert_func>
 801914c:	0052      	lsls	r2, r2, #1
 801914e:	3101      	adds	r1, #1
 8019150:	e7f0      	b.n	8019134 <__s2b+0x18>
 8019152:	9b08      	ldr	r3, [sp, #32]
 8019154:	6143      	str	r3, [r0, #20]
 8019156:	2d09      	cmp	r5, #9
 8019158:	f04f 0301 	mov.w	r3, #1
 801915c:	6103      	str	r3, [r0, #16]
 801915e:	dd16      	ble.n	801918e <__s2b+0x72>
 8019160:	f104 0909 	add.w	r9, r4, #9
 8019164:	46c8      	mov	r8, r9
 8019166:	442c      	add	r4, r5
 8019168:	f818 3b01 	ldrb.w	r3, [r8], #1
 801916c:	4601      	mov	r1, r0
 801916e:	3b30      	subs	r3, #48	; 0x30
 8019170:	220a      	movs	r2, #10
 8019172:	4630      	mov	r0, r6
 8019174:	f7ff ff88 	bl	8019088 <__multadd>
 8019178:	45a0      	cmp	r8, r4
 801917a:	d1f5      	bne.n	8019168 <__s2b+0x4c>
 801917c:	f1a5 0408 	sub.w	r4, r5, #8
 8019180:	444c      	add	r4, r9
 8019182:	1b2d      	subs	r5, r5, r4
 8019184:	1963      	adds	r3, r4, r5
 8019186:	42bb      	cmp	r3, r7
 8019188:	db04      	blt.n	8019194 <__s2b+0x78>
 801918a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801918e:	340a      	adds	r4, #10
 8019190:	2509      	movs	r5, #9
 8019192:	e7f6      	b.n	8019182 <__s2b+0x66>
 8019194:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019198:	4601      	mov	r1, r0
 801919a:	3b30      	subs	r3, #48	; 0x30
 801919c:	220a      	movs	r2, #10
 801919e:	4630      	mov	r0, r6
 80191a0:	f7ff ff72 	bl	8019088 <__multadd>
 80191a4:	e7ee      	b.n	8019184 <__s2b+0x68>
 80191a6:	bf00      	nop
 80191a8:	0801c84c 	.word	0x0801c84c
 80191ac:	0801c940 	.word	0x0801c940

080191b0 <__hi0bits>:
 80191b0:	0c03      	lsrs	r3, r0, #16
 80191b2:	041b      	lsls	r3, r3, #16
 80191b4:	b9d3      	cbnz	r3, 80191ec <__hi0bits+0x3c>
 80191b6:	0400      	lsls	r0, r0, #16
 80191b8:	2310      	movs	r3, #16
 80191ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80191be:	bf04      	itt	eq
 80191c0:	0200      	lsleq	r0, r0, #8
 80191c2:	3308      	addeq	r3, #8
 80191c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80191c8:	bf04      	itt	eq
 80191ca:	0100      	lsleq	r0, r0, #4
 80191cc:	3304      	addeq	r3, #4
 80191ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80191d2:	bf04      	itt	eq
 80191d4:	0080      	lsleq	r0, r0, #2
 80191d6:	3302      	addeq	r3, #2
 80191d8:	2800      	cmp	r0, #0
 80191da:	db05      	blt.n	80191e8 <__hi0bits+0x38>
 80191dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80191e0:	f103 0301 	add.w	r3, r3, #1
 80191e4:	bf08      	it	eq
 80191e6:	2320      	moveq	r3, #32
 80191e8:	4618      	mov	r0, r3
 80191ea:	4770      	bx	lr
 80191ec:	2300      	movs	r3, #0
 80191ee:	e7e4      	b.n	80191ba <__hi0bits+0xa>

080191f0 <__lo0bits>:
 80191f0:	6803      	ldr	r3, [r0, #0]
 80191f2:	f013 0207 	ands.w	r2, r3, #7
 80191f6:	4601      	mov	r1, r0
 80191f8:	d00b      	beq.n	8019212 <__lo0bits+0x22>
 80191fa:	07da      	lsls	r2, r3, #31
 80191fc:	d424      	bmi.n	8019248 <__lo0bits+0x58>
 80191fe:	0798      	lsls	r0, r3, #30
 8019200:	bf49      	itett	mi
 8019202:	085b      	lsrmi	r3, r3, #1
 8019204:	089b      	lsrpl	r3, r3, #2
 8019206:	2001      	movmi	r0, #1
 8019208:	600b      	strmi	r3, [r1, #0]
 801920a:	bf5c      	itt	pl
 801920c:	600b      	strpl	r3, [r1, #0]
 801920e:	2002      	movpl	r0, #2
 8019210:	4770      	bx	lr
 8019212:	b298      	uxth	r0, r3
 8019214:	b9b0      	cbnz	r0, 8019244 <__lo0bits+0x54>
 8019216:	0c1b      	lsrs	r3, r3, #16
 8019218:	2010      	movs	r0, #16
 801921a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801921e:	bf04      	itt	eq
 8019220:	0a1b      	lsreq	r3, r3, #8
 8019222:	3008      	addeq	r0, #8
 8019224:	071a      	lsls	r2, r3, #28
 8019226:	bf04      	itt	eq
 8019228:	091b      	lsreq	r3, r3, #4
 801922a:	3004      	addeq	r0, #4
 801922c:	079a      	lsls	r2, r3, #30
 801922e:	bf04      	itt	eq
 8019230:	089b      	lsreq	r3, r3, #2
 8019232:	3002      	addeq	r0, #2
 8019234:	07da      	lsls	r2, r3, #31
 8019236:	d403      	bmi.n	8019240 <__lo0bits+0x50>
 8019238:	085b      	lsrs	r3, r3, #1
 801923a:	f100 0001 	add.w	r0, r0, #1
 801923e:	d005      	beq.n	801924c <__lo0bits+0x5c>
 8019240:	600b      	str	r3, [r1, #0]
 8019242:	4770      	bx	lr
 8019244:	4610      	mov	r0, r2
 8019246:	e7e8      	b.n	801921a <__lo0bits+0x2a>
 8019248:	2000      	movs	r0, #0
 801924a:	4770      	bx	lr
 801924c:	2020      	movs	r0, #32
 801924e:	4770      	bx	lr

08019250 <__i2b>:
 8019250:	b510      	push	{r4, lr}
 8019252:	460c      	mov	r4, r1
 8019254:	2101      	movs	r1, #1
 8019256:	f7ff feb5 	bl	8018fc4 <_Balloc>
 801925a:	4602      	mov	r2, r0
 801925c:	b928      	cbnz	r0, 801926a <__i2b+0x1a>
 801925e:	4b05      	ldr	r3, [pc, #20]	; (8019274 <__i2b+0x24>)
 8019260:	4805      	ldr	r0, [pc, #20]	; (8019278 <__i2b+0x28>)
 8019262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019266:	f000 ff67 	bl	801a138 <__assert_func>
 801926a:	2301      	movs	r3, #1
 801926c:	6144      	str	r4, [r0, #20]
 801926e:	6103      	str	r3, [r0, #16]
 8019270:	bd10      	pop	{r4, pc}
 8019272:	bf00      	nop
 8019274:	0801c84c 	.word	0x0801c84c
 8019278:	0801c940 	.word	0x0801c940

0801927c <__multiply>:
 801927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019280:	4614      	mov	r4, r2
 8019282:	690a      	ldr	r2, [r1, #16]
 8019284:	6923      	ldr	r3, [r4, #16]
 8019286:	429a      	cmp	r2, r3
 8019288:	bfb8      	it	lt
 801928a:	460b      	movlt	r3, r1
 801928c:	460d      	mov	r5, r1
 801928e:	bfbc      	itt	lt
 8019290:	4625      	movlt	r5, r4
 8019292:	461c      	movlt	r4, r3
 8019294:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019298:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801929c:	68ab      	ldr	r3, [r5, #8]
 801929e:	6869      	ldr	r1, [r5, #4]
 80192a0:	eb0a 0709 	add.w	r7, sl, r9
 80192a4:	42bb      	cmp	r3, r7
 80192a6:	b085      	sub	sp, #20
 80192a8:	bfb8      	it	lt
 80192aa:	3101      	addlt	r1, #1
 80192ac:	f7ff fe8a 	bl	8018fc4 <_Balloc>
 80192b0:	b930      	cbnz	r0, 80192c0 <__multiply+0x44>
 80192b2:	4602      	mov	r2, r0
 80192b4:	4b42      	ldr	r3, [pc, #264]	; (80193c0 <__multiply+0x144>)
 80192b6:	4843      	ldr	r0, [pc, #268]	; (80193c4 <__multiply+0x148>)
 80192b8:	f240 115d 	movw	r1, #349	; 0x15d
 80192bc:	f000 ff3c 	bl	801a138 <__assert_func>
 80192c0:	f100 0614 	add.w	r6, r0, #20
 80192c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80192c8:	4633      	mov	r3, r6
 80192ca:	2200      	movs	r2, #0
 80192cc:	4543      	cmp	r3, r8
 80192ce:	d31e      	bcc.n	801930e <__multiply+0x92>
 80192d0:	f105 0c14 	add.w	ip, r5, #20
 80192d4:	f104 0314 	add.w	r3, r4, #20
 80192d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80192dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80192e0:	9202      	str	r2, [sp, #8]
 80192e2:	ebac 0205 	sub.w	r2, ip, r5
 80192e6:	3a15      	subs	r2, #21
 80192e8:	f022 0203 	bic.w	r2, r2, #3
 80192ec:	3204      	adds	r2, #4
 80192ee:	f105 0115 	add.w	r1, r5, #21
 80192f2:	458c      	cmp	ip, r1
 80192f4:	bf38      	it	cc
 80192f6:	2204      	movcc	r2, #4
 80192f8:	9201      	str	r2, [sp, #4]
 80192fa:	9a02      	ldr	r2, [sp, #8]
 80192fc:	9303      	str	r3, [sp, #12]
 80192fe:	429a      	cmp	r2, r3
 8019300:	d808      	bhi.n	8019314 <__multiply+0x98>
 8019302:	2f00      	cmp	r7, #0
 8019304:	dc55      	bgt.n	80193b2 <__multiply+0x136>
 8019306:	6107      	str	r7, [r0, #16]
 8019308:	b005      	add	sp, #20
 801930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801930e:	f843 2b04 	str.w	r2, [r3], #4
 8019312:	e7db      	b.n	80192cc <__multiply+0x50>
 8019314:	f8b3 a000 	ldrh.w	sl, [r3]
 8019318:	f1ba 0f00 	cmp.w	sl, #0
 801931c:	d020      	beq.n	8019360 <__multiply+0xe4>
 801931e:	f105 0e14 	add.w	lr, r5, #20
 8019322:	46b1      	mov	r9, r6
 8019324:	2200      	movs	r2, #0
 8019326:	f85e 4b04 	ldr.w	r4, [lr], #4
 801932a:	f8d9 b000 	ldr.w	fp, [r9]
 801932e:	b2a1      	uxth	r1, r4
 8019330:	fa1f fb8b 	uxth.w	fp, fp
 8019334:	fb0a b101 	mla	r1, sl, r1, fp
 8019338:	4411      	add	r1, r2
 801933a:	f8d9 2000 	ldr.w	r2, [r9]
 801933e:	0c24      	lsrs	r4, r4, #16
 8019340:	0c12      	lsrs	r2, r2, #16
 8019342:	fb0a 2404 	mla	r4, sl, r4, r2
 8019346:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801934a:	b289      	uxth	r1, r1
 801934c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019350:	45f4      	cmp	ip, lr
 8019352:	f849 1b04 	str.w	r1, [r9], #4
 8019356:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801935a:	d8e4      	bhi.n	8019326 <__multiply+0xaa>
 801935c:	9901      	ldr	r1, [sp, #4]
 801935e:	5072      	str	r2, [r6, r1]
 8019360:	9a03      	ldr	r2, [sp, #12]
 8019362:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019366:	3304      	adds	r3, #4
 8019368:	f1b9 0f00 	cmp.w	r9, #0
 801936c:	d01f      	beq.n	80193ae <__multiply+0x132>
 801936e:	6834      	ldr	r4, [r6, #0]
 8019370:	f105 0114 	add.w	r1, r5, #20
 8019374:	46b6      	mov	lr, r6
 8019376:	f04f 0a00 	mov.w	sl, #0
 801937a:	880a      	ldrh	r2, [r1, #0]
 801937c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019380:	fb09 b202 	mla	r2, r9, r2, fp
 8019384:	4492      	add	sl, r2
 8019386:	b2a4      	uxth	r4, r4
 8019388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801938c:	f84e 4b04 	str.w	r4, [lr], #4
 8019390:	f851 4b04 	ldr.w	r4, [r1], #4
 8019394:	f8be 2000 	ldrh.w	r2, [lr]
 8019398:	0c24      	lsrs	r4, r4, #16
 801939a:	fb09 2404 	mla	r4, r9, r4, r2
 801939e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80193a2:	458c      	cmp	ip, r1
 80193a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80193a8:	d8e7      	bhi.n	801937a <__multiply+0xfe>
 80193aa:	9a01      	ldr	r2, [sp, #4]
 80193ac:	50b4      	str	r4, [r6, r2]
 80193ae:	3604      	adds	r6, #4
 80193b0:	e7a3      	b.n	80192fa <__multiply+0x7e>
 80193b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d1a5      	bne.n	8019306 <__multiply+0x8a>
 80193ba:	3f01      	subs	r7, #1
 80193bc:	e7a1      	b.n	8019302 <__multiply+0x86>
 80193be:	bf00      	nop
 80193c0:	0801c84c 	.word	0x0801c84c
 80193c4:	0801c940 	.word	0x0801c940

080193c8 <__pow5mult>:
 80193c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193cc:	4615      	mov	r5, r2
 80193ce:	f012 0203 	ands.w	r2, r2, #3
 80193d2:	4606      	mov	r6, r0
 80193d4:	460f      	mov	r7, r1
 80193d6:	d007      	beq.n	80193e8 <__pow5mult+0x20>
 80193d8:	4c25      	ldr	r4, [pc, #148]	; (8019470 <__pow5mult+0xa8>)
 80193da:	3a01      	subs	r2, #1
 80193dc:	2300      	movs	r3, #0
 80193de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80193e2:	f7ff fe51 	bl	8019088 <__multadd>
 80193e6:	4607      	mov	r7, r0
 80193e8:	10ad      	asrs	r5, r5, #2
 80193ea:	d03d      	beq.n	8019468 <__pow5mult+0xa0>
 80193ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80193ee:	b97c      	cbnz	r4, 8019410 <__pow5mult+0x48>
 80193f0:	2010      	movs	r0, #16
 80193f2:	f7ff fdcd 	bl	8018f90 <malloc>
 80193f6:	4602      	mov	r2, r0
 80193f8:	6270      	str	r0, [r6, #36]	; 0x24
 80193fa:	b928      	cbnz	r0, 8019408 <__pow5mult+0x40>
 80193fc:	4b1d      	ldr	r3, [pc, #116]	; (8019474 <__pow5mult+0xac>)
 80193fe:	481e      	ldr	r0, [pc, #120]	; (8019478 <__pow5mult+0xb0>)
 8019400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019404:	f000 fe98 	bl	801a138 <__assert_func>
 8019408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801940c:	6004      	str	r4, [r0, #0]
 801940e:	60c4      	str	r4, [r0, #12]
 8019410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019418:	b94c      	cbnz	r4, 801942e <__pow5mult+0x66>
 801941a:	f240 2171 	movw	r1, #625	; 0x271
 801941e:	4630      	mov	r0, r6
 8019420:	f7ff ff16 	bl	8019250 <__i2b>
 8019424:	2300      	movs	r3, #0
 8019426:	f8c8 0008 	str.w	r0, [r8, #8]
 801942a:	4604      	mov	r4, r0
 801942c:	6003      	str	r3, [r0, #0]
 801942e:	f04f 0900 	mov.w	r9, #0
 8019432:	07eb      	lsls	r3, r5, #31
 8019434:	d50a      	bpl.n	801944c <__pow5mult+0x84>
 8019436:	4639      	mov	r1, r7
 8019438:	4622      	mov	r2, r4
 801943a:	4630      	mov	r0, r6
 801943c:	f7ff ff1e 	bl	801927c <__multiply>
 8019440:	4639      	mov	r1, r7
 8019442:	4680      	mov	r8, r0
 8019444:	4630      	mov	r0, r6
 8019446:	f7ff fdfd 	bl	8019044 <_Bfree>
 801944a:	4647      	mov	r7, r8
 801944c:	106d      	asrs	r5, r5, #1
 801944e:	d00b      	beq.n	8019468 <__pow5mult+0xa0>
 8019450:	6820      	ldr	r0, [r4, #0]
 8019452:	b938      	cbnz	r0, 8019464 <__pow5mult+0x9c>
 8019454:	4622      	mov	r2, r4
 8019456:	4621      	mov	r1, r4
 8019458:	4630      	mov	r0, r6
 801945a:	f7ff ff0f 	bl	801927c <__multiply>
 801945e:	6020      	str	r0, [r4, #0]
 8019460:	f8c0 9000 	str.w	r9, [r0]
 8019464:	4604      	mov	r4, r0
 8019466:	e7e4      	b.n	8019432 <__pow5mult+0x6a>
 8019468:	4638      	mov	r0, r7
 801946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801946e:	bf00      	nop
 8019470:	0801ca90 	.word	0x0801ca90
 8019474:	0801c7d6 	.word	0x0801c7d6
 8019478:	0801c940 	.word	0x0801c940

0801947c <__lshift>:
 801947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019480:	460c      	mov	r4, r1
 8019482:	6849      	ldr	r1, [r1, #4]
 8019484:	6923      	ldr	r3, [r4, #16]
 8019486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801948a:	68a3      	ldr	r3, [r4, #8]
 801948c:	4607      	mov	r7, r0
 801948e:	4691      	mov	r9, r2
 8019490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019494:	f108 0601 	add.w	r6, r8, #1
 8019498:	42b3      	cmp	r3, r6
 801949a:	db0b      	blt.n	80194b4 <__lshift+0x38>
 801949c:	4638      	mov	r0, r7
 801949e:	f7ff fd91 	bl	8018fc4 <_Balloc>
 80194a2:	4605      	mov	r5, r0
 80194a4:	b948      	cbnz	r0, 80194ba <__lshift+0x3e>
 80194a6:	4602      	mov	r2, r0
 80194a8:	4b28      	ldr	r3, [pc, #160]	; (801954c <__lshift+0xd0>)
 80194aa:	4829      	ldr	r0, [pc, #164]	; (8019550 <__lshift+0xd4>)
 80194ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80194b0:	f000 fe42 	bl	801a138 <__assert_func>
 80194b4:	3101      	adds	r1, #1
 80194b6:	005b      	lsls	r3, r3, #1
 80194b8:	e7ee      	b.n	8019498 <__lshift+0x1c>
 80194ba:	2300      	movs	r3, #0
 80194bc:	f100 0114 	add.w	r1, r0, #20
 80194c0:	f100 0210 	add.w	r2, r0, #16
 80194c4:	4618      	mov	r0, r3
 80194c6:	4553      	cmp	r3, sl
 80194c8:	db33      	blt.n	8019532 <__lshift+0xb6>
 80194ca:	6920      	ldr	r0, [r4, #16]
 80194cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80194d0:	f104 0314 	add.w	r3, r4, #20
 80194d4:	f019 091f 	ands.w	r9, r9, #31
 80194d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80194dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80194e0:	d02b      	beq.n	801953a <__lshift+0xbe>
 80194e2:	f1c9 0e20 	rsb	lr, r9, #32
 80194e6:	468a      	mov	sl, r1
 80194e8:	2200      	movs	r2, #0
 80194ea:	6818      	ldr	r0, [r3, #0]
 80194ec:	fa00 f009 	lsl.w	r0, r0, r9
 80194f0:	4302      	orrs	r2, r0
 80194f2:	f84a 2b04 	str.w	r2, [sl], #4
 80194f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194fa:	459c      	cmp	ip, r3
 80194fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8019500:	d8f3      	bhi.n	80194ea <__lshift+0x6e>
 8019502:	ebac 0304 	sub.w	r3, ip, r4
 8019506:	3b15      	subs	r3, #21
 8019508:	f023 0303 	bic.w	r3, r3, #3
 801950c:	3304      	adds	r3, #4
 801950e:	f104 0015 	add.w	r0, r4, #21
 8019512:	4584      	cmp	ip, r0
 8019514:	bf38      	it	cc
 8019516:	2304      	movcc	r3, #4
 8019518:	50ca      	str	r2, [r1, r3]
 801951a:	b10a      	cbz	r2, 8019520 <__lshift+0xa4>
 801951c:	f108 0602 	add.w	r6, r8, #2
 8019520:	3e01      	subs	r6, #1
 8019522:	4638      	mov	r0, r7
 8019524:	612e      	str	r6, [r5, #16]
 8019526:	4621      	mov	r1, r4
 8019528:	f7ff fd8c 	bl	8019044 <_Bfree>
 801952c:	4628      	mov	r0, r5
 801952e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019532:	f842 0f04 	str.w	r0, [r2, #4]!
 8019536:	3301      	adds	r3, #1
 8019538:	e7c5      	b.n	80194c6 <__lshift+0x4a>
 801953a:	3904      	subs	r1, #4
 801953c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019540:	f841 2f04 	str.w	r2, [r1, #4]!
 8019544:	459c      	cmp	ip, r3
 8019546:	d8f9      	bhi.n	801953c <__lshift+0xc0>
 8019548:	e7ea      	b.n	8019520 <__lshift+0xa4>
 801954a:	bf00      	nop
 801954c:	0801c84c 	.word	0x0801c84c
 8019550:	0801c940 	.word	0x0801c940

08019554 <__mcmp>:
 8019554:	b530      	push	{r4, r5, lr}
 8019556:	6902      	ldr	r2, [r0, #16]
 8019558:	690c      	ldr	r4, [r1, #16]
 801955a:	1b12      	subs	r2, r2, r4
 801955c:	d10e      	bne.n	801957c <__mcmp+0x28>
 801955e:	f100 0314 	add.w	r3, r0, #20
 8019562:	3114      	adds	r1, #20
 8019564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801956c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019574:	42a5      	cmp	r5, r4
 8019576:	d003      	beq.n	8019580 <__mcmp+0x2c>
 8019578:	d305      	bcc.n	8019586 <__mcmp+0x32>
 801957a:	2201      	movs	r2, #1
 801957c:	4610      	mov	r0, r2
 801957e:	bd30      	pop	{r4, r5, pc}
 8019580:	4283      	cmp	r3, r0
 8019582:	d3f3      	bcc.n	801956c <__mcmp+0x18>
 8019584:	e7fa      	b.n	801957c <__mcmp+0x28>
 8019586:	f04f 32ff 	mov.w	r2, #4294967295
 801958a:	e7f7      	b.n	801957c <__mcmp+0x28>

0801958c <__mdiff>:
 801958c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019590:	460c      	mov	r4, r1
 8019592:	4606      	mov	r6, r0
 8019594:	4611      	mov	r1, r2
 8019596:	4620      	mov	r0, r4
 8019598:	4617      	mov	r7, r2
 801959a:	f7ff ffdb 	bl	8019554 <__mcmp>
 801959e:	1e05      	subs	r5, r0, #0
 80195a0:	d110      	bne.n	80195c4 <__mdiff+0x38>
 80195a2:	4629      	mov	r1, r5
 80195a4:	4630      	mov	r0, r6
 80195a6:	f7ff fd0d 	bl	8018fc4 <_Balloc>
 80195aa:	b930      	cbnz	r0, 80195ba <__mdiff+0x2e>
 80195ac:	4b39      	ldr	r3, [pc, #228]	; (8019694 <__mdiff+0x108>)
 80195ae:	4602      	mov	r2, r0
 80195b0:	f240 2132 	movw	r1, #562	; 0x232
 80195b4:	4838      	ldr	r0, [pc, #224]	; (8019698 <__mdiff+0x10c>)
 80195b6:	f000 fdbf 	bl	801a138 <__assert_func>
 80195ba:	2301      	movs	r3, #1
 80195bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80195c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195c4:	bfa4      	itt	ge
 80195c6:	463b      	movge	r3, r7
 80195c8:	4627      	movge	r7, r4
 80195ca:	4630      	mov	r0, r6
 80195cc:	6879      	ldr	r1, [r7, #4]
 80195ce:	bfa6      	itte	ge
 80195d0:	461c      	movge	r4, r3
 80195d2:	2500      	movge	r5, #0
 80195d4:	2501      	movlt	r5, #1
 80195d6:	f7ff fcf5 	bl	8018fc4 <_Balloc>
 80195da:	b920      	cbnz	r0, 80195e6 <__mdiff+0x5a>
 80195dc:	4b2d      	ldr	r3, [pc, #180]	; (8019694 <__mdiff+0x108>)
 80195de:	4602      	mov	r2, r0
 80195e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80195e4:	e7e6      	b.n	80195b4 <__mdiff+0x28>
 80195e6:	693e      	ldr	r6, [r7, #16]
 80195e8:	60c5      	str	r5, [r0, #12]
 80195ea:	6925      	ldr	r5, [r4, #16]
 80195ec:	f107 0114 	add.w	r1, r7, #20
 80195f0:	f104 0914 	add.w	r9, r4, #20
 80195f4:	f100 0e14 	add.w	lr, r0, #20
 80195f8:	f107 0210 	add.w	r2, r7, #16
 80195fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019600:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019604:	46f2      	mov	sl, lr
 8019606:	2700      	movs	r7, #0
 8019608:	f859 3b04 	ldr.w	r3, [r9], #4
 801960c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019610:	fa1f f883 	uxth.w	r8, r3
 8019614:	fa17 f78b 	uxtah	r7, r7, fp
 8019618:	0c1b      	lsrs	r3, r3, #16
 801961a:	eba7 0808 	sub.w	r8, r7, r8
 801961e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019626:	fa1f f888 	uxth.w	r8, r8
 801962a:	141f      	asrs	r7, r3, #16
 801962c:	454d      	cmp	r5, r9
 801962e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019632:	f84a 3b04 	str.w	r3, [sl], #4
 8019636:	d8e7      	bhi.n	8019608 <__mdiff+0x7c>
 8019638:	1b2b      	subs	r3, r5, r4
 801963a:	3b15      	subs	r3, #21
 801963c:	f023 0303 	bic.w	r3, r3, #3
 8019640:	3304      	adds	r3, #4
 8019642:	3415      	adds	r4, #21
 8019644:	42a5      	cmp	r5, r4
 8019646:	bf38      	it	cc
 8019648:	2304      	movcc	r3, #4
 801964a:	4419      	add	r1, r3
 801964c:	4473      	add	r3, lr
 801964e:	469e      	mov	lr, r3
 8019650:	460d      	mov	r5, r1
 8019652:	4565      	cmp	r5, ip
 8019654:	d30e      	bcc.n	8019674 <__mdiff+0xe8>
 8019656:	f10c 0203 	add.w	r2, ip, #3
 801965a:	1a52      	subs	r2, r2, r1
 801965c:	f022 0203 	bic.w	r2, r2, #3
 8019660:	3903      	subs	r1, #3
 8019662:	458c      	cmp	ip, r1
 8019664:	bf38      	it	cc
 8019666:	2200      	movcc	r2, #0
 8019668:	441a      	add	r2, r3
 801966a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801966e:	b17b      	cbz	r3, 8019690 <__mdiff+0x104>
 8019670:	6106      	str	r6, [r0, #16]
 8019672:	e7a5      	b.n	80195c0 <__mdiff+0x34>
 8019674:	f855 8b04 	ldr.w	r8, [r5], #4
 8019678:	fa17 f488 	uxtah	r4, r7, r8
 801967c:	1422      	asrs	r2, r4, #16
 801967e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019682:	b2a4      	uxth	r4, r4
 8019684:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019688:	f84e 4b04 	str.w	r4, [lr], #4
 801968c:	1417      	asrs	r7, r2, #16
 801968e:	e7e0      	b.n	8019652 <__mdiff+0xc6>
 8019690:	3e01      	subs	r6, #1
 8019692:	e7ea      	b.n	801966a <__mdiff+0xde>
 8019694:	0801c84c 	.word	0x0801c84c
 8019698:	0801c940 	.word	0x0801c940

0801969c <__ulp>:
 801969c:	b082      	sub	sp, #8
 801969e:	ed8d 0b00 	vstr	d0, [sp]
 80196a2:	9b01      	ldr	r3, [sp, #4]
 80196a4:	4912      	ldr	r1, [pc, #72]	; (80196f0 <__ulp+0x54>)
 80196a6:	4019      	ands	r1, r3
 80196a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80196ac:	2900      	cmp	r1, #0
 80196ae:	dd05      	ble.n	80196bc <__ulp+0x20>
 80196b0:	2200      	movs	r2, #0
 80196b2:	460b      	mov	r3, r1
 80196b4:	ec43 2b10 	vmov	d0, r2, r3
 80196b8:	b002      	add	sp, #8
 80196ba:	4770      	bx	lr
 80196bc:	4249      	negs	r1, r1
 80196be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80196c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80196c6:	f04f 0200 	mov.w	r2, #0
 80196ca:	f04f 0300 	mov.w	r3, #0
 80196ce:	da04      	bge.n	80196da <__ulp+0x3e>
 80196d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80196d4:	fa41 f300 	asr.w	r3, r1, r0
 80196d8:	e7ec      	b.n	80196b4 <__ulp+0x18>
 80196da:	f1a0 0114 	sub.w	r1, r0, #20
 80196de:	291e      	cmp	r1, #30
 80196e0:	bfda      	itte	le
 80196e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80196e6:	fa20 f101 	lsrle.w	r1, r0, r1
 80196ea:	2101      	movgt	r1, #1
 80196ec:	460a      	mov	r2, r1
 80196ee:	e7e1      	b.n	80196b4 <__ulp+0x18>
 80196f0:	7ff00000 	.word	0x7ff00000

080196f4 <__b2d>:
 80196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f6:	6905      	ldr	r5, [r0, #16]
 80196f8:	f100 0714 	add.w	r7, r0, #20
 80196fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019700:	1f2e      	subs	r6, r5, #4
 8019702:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019706:	4620      	mov	r0, r4
 8019708:	f7ff fd52 	bl	80191b0 <__hi0bits>
 801970c:	f1c0 0320 	rsb	r3, r0, #32
 8019710:	280a      	cmp	r0, #10
 8019712:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019790 <__b2d+0x9c>
 8019716:	600b      	str	r3, [r1, #0]
 8019718:	dc14      	bgt.n	8019744 <__b2d+0x50>
 801971a:	f1c0 0e0b 	rsb	lr, r0, #11
 801971e:	fa24 f10e 	lsr.w	r1, r4, lr
 8019722:	42b7      	cmp	r7, r6
 8019724:	ea41 030c 	orr.w	r3, r1, ip
 8019728:	bf34      	ite	cc
 801972a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801972e:	2100      	movcs	r1, #0
 8019730:	3015      	adds	r0, #21
 8019732:	fa04 f000 	lsl.w	r0, r4, r0
 8019736:	fa21 f10e 	lsr.w	r1, r1, lr
 801973a:	ea40 0201 	orr.w	r2, r0, r1
 801973e:	ec43 2b10 	vmov	d0, r2, r3
 8019742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019744:	42b7      	cmp	r7, r6
 8019746:	bf3a      	itte	cc
 8019748:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801974c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019750:	2100      	movcs	r1, #0
 8019752:	380b      	subs	r0, #11
 8019754:	d017      	beq.n	8019786 <__b2d+0x92>
 8019756:	f1c0 0c20 	rsb	ip, r0, #32
 801975a:	fa04 f500 	lsl.w	r5, r4, r0
 801975e:	42be      	cmp	r6, r7
 8019760:	fa21 f40c 	lsr.w	r4, r1, ip
 8019764:	ea45 0504 	orr.w	r5, r5, r4
 8019768:	bf8c      	ite	hi
 801976a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801976e:	2400      	movls	r4, #0
 8019770:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019774:	fa01 f000 	lsl.w	r0, r1, r0
 8019778:	fa24 f40c 	lsr.w	r4, r4, ip
 801977c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019780:	ea40 0204 	orr.w	r2, r0, r4
 8019784:	e7db      	b.n	801973e <__b2d+0x4a>
 8019786:	ea44 030c 	orr.w	r3, r4, ip
 801978a:	460a      	mov	r2, r1
 801978c:	e7d7      	b.n	801973e <__b2d+0x4a>
 801978e:	bf00      	nop
 8019790:	3ff00000 	.word	0x3ff00000

08019794 <__d2b>:
 8019794:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019798:	4689      	mov	r9, r1
 801979a:	2101      	movs	r1, #1
 801979c:	ec57 6b10 	vmov	r6, r7, d0
 80197a0:	4690      	mov	r8, r2
 80197a2:	f7ff fc0f 	bl	8018fc4 <_Balloc>
 80197a6:	4604      	mov	r4, r0
 80197a8:	b930      	cbnz	r0, 80197b8 <__d2b+0x24>
 80197aa:	4602      	mov	r2, r0
 80197ac:	4b25      	ldr	r3, [pc, #148]	; (8019844 <__d2b+0xb0>)
 80197ae:	4826      	ldr	r0, [pc, #152]	; (8019848 <__d2b+0xb4>)
 80197b0:	f240 310a 	movw	r1, #778	; 0x30a
 80197b4:	f000 fcc0 	bl	801a138 <__assert_func>
 80197b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80197bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80197c0:	bb35      	cbnz	r5, 8019810 <__d2b+0x7c>
 80197c2:	2e00      	cmp	r6, #0
 80197c4:	9301      	str	r3, [sp, #4]
 80197c6:	d028      	beq.n	801981a <__d2b+0x86>
 80197c8:	4668      	mov	r0, sp
 80197ca:	9600      	str	r6, [sp, #0]
 80197cc:	f7ff fd10 	bl	80191f0 <__lo0bits>
 80197d0:	9900      	ldr	r1, [sp, #0]
 80197d2:	b300      	cbz	r0, 8019816 <__d2b+0x82>
 80197d4:	9a01      	ldr	r2, [sp, #4]
 80197d6:	f1c0 0320 	rsb	r3, r0, #32
 80197da:	fa02 f303 	lsl.w	r3, r2, r3
 80197de:	430b      	orrs	r3, r1
 80197e0:	40c2      	lsrs	r2, r0
 80197e2:	6163      	str	r3, [r4, #20]
 80197e4:	9201      	str	r2, [sp, #4]
 80197e6:	9b01      	ldr	r3, [sp, #4]
 80197e8:	61a3      	str	r3, [r4, #24]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	bf14      	ite	ne
 80197ee:	2202      	movne	r2, #2
 80197f0:	2201      	moveq	r2, #1
 80197f2:	6122      	str	r2, [r4, #16]
 80197f4:	b1d5      	cbz	r5, 801982c <__d2b+0x98>
 80197f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80197fa:	4405      	add	r5, r0
 80197fc:	f8c9 5000 	str.w	r5, [r9]
 8019800:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019804:	f8c8 0000 	str.w	r0, [r8]
 8019808:	4620      	mov	r0, r4
 801980a:	b003      	add	sp, #12
 801980c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019814:	e7d5      	b.n	80197c2 <__d2b+0x2e>
 8019816:	6161      	str	r1, [r4, #20]
 8019818:	e7e5      	b.n	80197e6 <__d2b+0x52>
 801981a:	a801      	add	r0, sp, #4
 801981c:	f7ff fce8 	bl	80191f0 <__lo0bits>
 8019820:	9b01      	ldr	r3, [sp, #4]
 8019822:	6163      	str	r3, [r4, #20]
 8019824:	2201      	movs	r2, #1
 8019826:	6122      	str	r2, [r4, #16]
 8019828:	3020      	adds	r0, #32
 801982a:	e7e3      	b.n	80197f4 <__d2b+0x60>
 801982c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019834:	f8c9 0000 	str.w	r0, [r9]
 8019838:	6918      	ldr	r0, [r3, #16]
 801983a:	f7ff fcb9 	bl	80191b0 <__hi0bits>
 801983e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019842:	e7df      	b.n	8019804 <__d2b+0x70>
 8019844:	0801c84c 	.word	0x0801c84c
 8019848:	0801c940 	.word	0x0801c940

0801984c <__ratio>:
 801984c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019850:	468a      	mov	sl, r1
 8019852:	4669      	mov	r1, sp
 8019854:	4683      	mov	fp, r0
 8019856:	f7ff ff4d 	bl	80196f4 <__b2d>
 801985a:	a901      	add	r1, sp, #4
 801985c:	4650      	mov	r0, sl
 801985e:	ec59 8b10 	vmov	r8, r9, d0
 8019862:	ee10 6a10 	vmov	r6, s0
 8019866:	f7ff ff45 	bl	80196f4 <__b2d>
 801986a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801986e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8019872:	eba3 0c02 	sub.w	ip, r3, r2
 8019876:	e9dd 3200 	ldrd	r3, r2, [sp]
 801987a:	1a9b      	subs	r3, r3, r2
 801987c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019880:	ec55 4b10 	vmov	r4, r5, d0
 8019884:	2b00      	cmp	r3, #0
 8019886:	ee10 0a10 	vmov	r0, s0
 801988a:	bfce      	itee	gt
 801988c:	464a      	movgt	r2, r9
 801988e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019892:	462a      	movle	r2, r5
 8019894:	464f      	mov	r7, r9
 8019896:	4629      	mov	r1, r5
 8019898:	bfcc      	ite	gt
 801989a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801989e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80198a2:	ec47 6b17 	vmov	d7, r6, r7
 80198a6:	ec41 0b16 	vmov	d6, r0, r1
 80198aa:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80198ae:	b003      	add	sp, #12
 80198b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080198b4 <__copybits>:
 80198b4:	3901      	subs	r1, #1
 80198b6:	b570      	push	{r4, r5, r6, lr}
 80198b8:	1149      	asrs	r1, r1, #5
 80198ba:	6914      	ldr	r4, [r2, #16]
 80198bc:	3101      	adds	r1, #1
 80198be:	f102 0314 	add.w	r3, r2, #20
 80198c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80198c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80198ca:	1f05      	subs	r5, r0, #4
 80198cc:	42a3      	cmp	r3, r4
 80198ce:	d30c      	bcc.n	80198ea <__copybits+0x36>
 80198d0:	1aa3      	subs	r3, r4, r2
 80198d2:	3b11      	subs	r3, #17
 80198d4:	f023 0303 	bic.w	r3, r3, #3
 80198d8:	3211      	adds	r2, #17
 80198da:	42a2      	cmp	r2, r4
 80198dc:	bf88      	it	hi
 80198de:	2300      	movhi	r3, #0
 80198e0:	4418      	add	r0, r3
 80198e2:	2300      	movs	r3, #0
 80198e4:	4288      	cmp	r0, r1
 80198e6:	d305      	bcc.n	80198f4 <__copybits+0x40>
 80198e8:	bd70      	pop	{r4, r5, r6, pc}
 80198ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80198ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80198f2:	e7eb      	b.n	80198cc <__copybits+0x18>
 80198f4:	f840 3b04 	str.w	r3, [r0], #4
 80198f8:	e7f4      	b.n	80198e4 <__copybits+0x30>

080198fa <__any_on>:
 80198fa:	f100 0214 	add.w	r2, r0, #20
 80198fe:	6900      	ldr	r0, [r0, #16]
 8019900:	114b      	asrs	r3, r1, #5
 8019902:	4298      	cmp	r0, r3
 8019904:	b510      	push	{r4, lr}
 8019906:	db11      	blt.n	801992c <__any_on+0x32>
 8019908:	dd0a      	ble.n	8019920 <__any_on+0x26>
 801990a:	f011 011f 	ands.w	r1, r1, #31
 801990e:	d007      	beq.n	8019920 <__any_on+0x26>
 8019910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019914:	fa24 f001 	lsr.w	r0, r4, r1
 8019918:	fa00 f101 	lsl.w	r1, r0, r1
 801991c:	428c      	cmp	r4, r1
 801991e:	d10b      	bne.n	8019938 <__any_on+0x3e>
 8019920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019924:	4293      	cmp	r3, r2
 8019926:	d803      	bhi.n	8019930 <__any_on+0x36>
 8019928:	2000      	movs	r0, #0
 801992a:	bd10      	pop	{r4, pc}
 801992c:	4603      	mov	r3, r0
 801992e:	e7f7      	b.n	8019920 <__any_on+0x26>
 8019930:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019934:	2900      	cmp	r1, #0
 8019936:	d0f5      	beq.n	8019924 <__any_on+0x2a>
 8019938:	2001      	movs	r0, #1
 801993a:	e7f6      	b.n	801992a <__any_on+0x30>

0801993c <_calloc_r>:
 801993c:	b513      	push	{r0, r1, r4, lr}
 801993e:	434a      	muls	r2, r1
 8019940:	4611      	mov	r1, r2
 8019942:	9201      	str	r2, [sp, #4]
 8019944:	f000 f85a 	bl	80199fc <_malloc_r>
 8019948:	4604      	mov	r4, r0
 801994a:	b118      	cbz	r0, 8019954 <_calloc_r+0x18>
 801994c:	9a01      	ldr	r2, [sp, #4]
 801994e:	2100      	movs	r1, #0
 8019950:	f7fc f93e 	bl	8015bd0 <memset>
 8019954:	4620      	mov	r0, r4
 8019956:	b002      	add	sp, #8
 8019958:	bd10      	pop	{r4, pc}
	...

0801995c <_free_r>:
 801995c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801995e:	2900      	cmp	r1, #0
 8019960:	d048      	beq.n	80199f4 <_free_r+0x98>
 8019962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019966:	9001      	str	r0, [sp, #4]
 8019968:	2b00      	cmp	r3, #0
 801996a:	f1a1 0404 	sub.w	r4, r1, #4
 801996e:	bfb8      	it	lt
 8019970:	18e4      	addlt	r4, r4, r3
 8019972:	f000 fc6f 	bl	801a254 <__malloc_lock>
 8019976:	4a20      	ldr	r2, [pc, #128]	; (80199f8 <_free_r+0x9c>)
 8019978:	9801      	ldr	r0, [sp, #4]
 801997a:	6813      	ldr	r3, [r2, #0]
 801997c:	4615      	mov	r5, r2
 801997e:	b933      	cbnz	r3, 801998e <_free_r+0x32>
 8019980:	6063      	str	r3, [r4, #4]
 8019982:	6014      	str	r4, [r2, #0]
 8019984:	b003      	add	sp, #12
 8019986:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801998a:	f000 bc69 	b.w	801a260 <__malloc_unlock>
 801998e:	42a3      	cmp	r3, r4
 8019990:	d90b      	bls.n	80199aa <_free_r+0x4e>
 8019992:	6821      	ldr	r1, [r4, #0]
 8019994:	1862      	adds	r2, r4, r1
 8019996:	4293      	cmp	r3, r2
 8019998:	bf04      	itt	eq
 801999a:	681a      	ldreq	r2, [r3, #0]
 801999c:	685b      	ldreq	r3, [r3, #4]
 801999e:	6063      	str	r3, [r4, #4]
 80199a0:	bf04      	itt	eq
 80199a2:	1852      	addeq	r2, r2, r1
 80199a4:	6022      	streq	r2, [r4, #0]
 80199a6:	602c      	str	r4, [r5, #0]
 80199a8:	e7ec      	b.n	8019984 <_free_r+0x28>
 80199aa:	461a      	mov	r2, r3
 80199ac:	685b      	ldr	r3, [r3, #4]
 80199ae:	b10b      	cbz	r3, 80199b4 <_free_r+0x58>
 80199b0:	42a3      	cmp	r3, r4
 80199b2:	d9fa      	bls.n	80199aa <_free_r+0x4e>
 80199b4:	6811      	ldr	r1, [r2, #0]
 80199b6:	1855      	adds	r5, r2, r1
 80199b8:	42a5      	cmp	r5, r4
 80199ba:	d10b      	bne.n	80199d4 <_free_r+0x78>
 80199bc:	6824      	ldr	r4, [r4, #0]
 80199be:	4421      	add	r1, r4
 80199c0:	1854      	adds	r4, r2, r1
 80199c2:	42a3      	cmp	r3, r4
 80199c4:	6011      	str	r1, [r2, #0]
 80199c6:	d1dd      	bne.n	8019984 <_free_r+0x28>
 80199c8:	681c      	ldr	r4, [r3, #0]
 80199ca:	685b      	ldr	r3, [r3, #4]
 80199cc:	6053      	str	r3, [r2, #4]
 80199ce:	4421      	add	r1, r4
 80199d0:	6011      	str	r1, [r2, #0]
 80199d2:	e7d7      	b.n	8019984 <_free_r+0x28>
 80199d4:	d902      	bls.n	80199dc <_free_r+0x80>
 80199d6:	230c      	movs	r3, #12
 80199d8:	6003      	str	r3, [r0, #0]
 80199da:	e7d3      	b.n	8019984 <_free_r+0x28>
 80199dc:	6825      	ldr	r5, [r4, #0]
 80199de:	1961      	adds	r1, r4, r5
 80199e0:	428b      	cmp	r3, r1
 80199e2:	bf04      	itt	eq
 80199e4:	6819      	ldreq	r1, [r3, #0]
 80199e6:	685b      	ldreq	r3, [r3, #4]
 80199e8:	6063      	str	r3, [r4, #4]
 80199ea:	bf04      	itt	eq
 80199ec:	1949      	addeq	r1, r1, r5
 80199ee:	6021      	streq	r1, [r4, #0]
 80199f0:	6054      	str	r4, [r2, #4]
 80199f2:	e7c7      	b.n	8019984 <_free_r+0x28>
 80199f4:	b003      	add	sp, #12
 80199f6:	bd30      	pop	{r4, r5, pc}
 80199f8:	20028b58 	.word	0x20028b58

080199fc <_malloc_r>:
 80199fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199fe:	1ccd      	adds	r5, r1, #3
 8019a00:	f025 0503 	bic.w	r5, r5, #3
 8019a04:	3508      	adds	r5, #8
 8019a06:	2d0c      	cmp	r5, #12
 8019a08:	bf38      	it	cc
 8019a0a:	250c      	movcc	r5, #12
 8019a0c:	2d00      	cmp	r5, #0
 8019a0e:	4606      	mov	r6, r0
 8019a10:	db01      	blt.n	8019a16 <_malloc_r+0x1a>
 8019a12:	42a9      	cmp	r1, r5
 8019a14:	d903      	bls.n	8019a1e <_malloc_r+0x22>
 8019a16:	230c      	movs	r3, #12
 8019a18:	6033      	str	r3, [r6, #0]
 8019a1a:	2000      	movs	r0, #0
 8019a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a1e:	f000 fc19 	bl	801a254 <__malloc_lock>
 8019a22:	4921      	ldr	r1, [pc, #132]	; (8019aa8 <_malloc_r+0xac>)
 8019a24:	680a      	ldr	r2, [r1, #0]
 8019a26:	4614      	mov	r4, r2
 8019a28:	b99c      	cbnz	r4, 8019a52 <_malloc_r+0x56>
 8019a2a:	4f20      	ldr	r7, [pc, #128]	; (8019aac <_malloc_r+0xb0>)
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	b923      	cbnz	r3, 8019a3a <_malloc_r+0x3e>
 8019a30:	4621      	mov	r1, r4
 8019a32:	4630      	mov	r0, r6
 8019a34:	f000 fafc 	bl	801a030 <_sbrk_r>
 8019a38:	6038      	str	r0, [r7, #0]
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	4630      	mov	r0, r6
 8019a3e:	f000 faf7 	bl	801a030 <_sbrk_r>
 8019a42:	1c43      	adds	r3, r0, #1
 8019a44:	d123      	bne.n	8019a8e <_malloc_r+0x92>
 8019a46:	230c      	movs	r3, #12
 8019a48:	6033      	str	r3, [r6, #0]
 8019a4a:	4630      	mov	r0, r6
 8019a4c:	f000 fc08 	bl	801a260 <__malloc_unlock>
 8019a50:	e7e3      	b.n	8019a1a <_malloc_r+0x1e>
 8019a52:	6823      	ldr	r3, [r4, #0]
 8019a54:	1b5b      	subs	r3, r3, r5
 8019a56:	d417      	bmi.n	8019a88 <_malloc_r+0x8c>
 8019a58:	2b0b      	cmp	r3, #11
 8019a5a:	d903      	bls.n	8019a64 <_malloc_r+0x68>
 8019a5c:	6023      	str	r3, [r4, #0]
 8019a5e:	441c      	add	r4, r3
 8019a60:	6025      	str	r5, [r4, #0]
 8019a62:	e004      	b.n	8019a6e <_malloc_r+0x72>
 8019a64:	6863      	ldr	r3, [r4, #4]
 8019a66:	42a2      	cmp	r2, r4
 8019a68:	bf0c      	ite	eq
 8019a6a:	600b      	streq	r3, [r1, #0]
 8019a6c:	6053      	strne	r3, [r2, #4]
 8019a6e:	4630      	mov	r0, r6
 8019a70:	f000 fbf6 	bl	801a260 <__malloc_unlock>
 8019a74:	f104 000b 	add.w	r0, r4, #11
 8019a78:	1d23      	adds	r3, r4, #4
 8019a7a:	f020 0007 	bic.w	r0, r0, #7
 8019a7e:	1ac2      	subs	r2, r0, r3
 8019a80:	d0cc      	beq.n	8019a1c <_malloc_r+0x20>
 8019a82:	1a1b      	subs	r3, r3, r0
 8019a84:	50a3      	str	r3, [r4, r2]
 8019a86:	e7c9      	b.n	8019a1c <_malloc_r+0x20>
 8019a88:	4622      	mov	r2, r4
 8019a8a:	6864      	ldr	r4, [r4, #4]
 8019a8c:	e7cc      	b.n	8019a28 <_malloc_r+0x2c>
 8019a8e:	1cc4      	adds	r4, r0, #3
 8019a90:	f024 0403 	bic.w	r4, r4, #3
 8019a94:	42a0      	cmp	r0, r4
 8019a96:	d0e3      	beq.n	8019a60 <_malloc_r+0x64>
 8019a98:	1a21      	subs	r1, r4, r0
 8019a9a:	4630      	mov	r0, r6
 8019a9c:	f000 fac8 	bl	801a030 <_sbrk_r>
 8019aa0:	3001      	adds	r0, #1
 8019aa2:	d1dd      	bne.n	8019a60 <_malloc_r+0x64>
 8019aa4:	e7cf      	b.n	8019a46 <_malloc_r+0x4a>
 8019aa6:	bf00      	nop
 8019aa8:	20028b58 	.word	0x20028b58
 8019aac:	20028b5c 	.word	0x20028b5c

08019ab0 <__ssputs_r>:
 8019ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ab4:	688e      	ldr	r6, [r1, #8]
 8019ab6:	429e      	cmp	r6, r3
 8019ab8:	4682      	mov	sl, r0
 8019aba:	460c      	mov	r4, r1
 8019abc:	4690      	mov	r8, r2
 8019abe:	461f      	mov	r7, r3
 8019ac0:	d838      	bhi.n	8019b34 <__ssputs_r+0x84>
 8019ac2:	898a      	ldrh	r2, [r1, #12]
 8019ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019ac8:	d032      	beq.n	8019b30 <__ssputs_r+0x80>
 8019aca:	6825      	ldr	r5, [r4, #0]
 8019acc:	6909      	ldr	r1, [r1, #16]
 8019ace:	eba5 0901 	sub.w	r9, r5, r1
 8019ad2:	6965      	ldr	r5, [r4, #20]
 8019ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019adc:	3301      	adds	r3, #1
 8019ade:	444b      	add	r3, r9
 8019ae0:	106d      	asrs	r5, r5, #1
 8019ae2:	429d      	cmp	r5, r3
 8019ae4:	bf38      	it	cc
 8019ae6:	461d      	movcc	r5, r3
 8019ae8:	0553      	lsls	r3, r2, #21
 8019aea:	d531      	bpl.n	8019b50 <__ssputs_r+0xa0>
 8019aec:	4629      	mov	r1, r5
 8019aee:	f7ff ff85 	bl	80199fc <_malloc_r>
 8019af2:	4606      	mov	r6, r0
 8019af4:	b950      	cbnz	r0, 8019b0c <__ssputs_r+0x5c>
 8019af6:	230c      	movs	r3, #12
 8019af8:	f8ca 3000 	str.w	r3, [sl]
 8019afc:	89a3      	ldrh	r3, [r4, #12]
 8019afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b02:	81a3      	strh	r3, [r4, #12]
 8019b04:	f04f 30ff 	mov.w	r0, #4294967295
 8019b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b0c:	6921      	ldr	r1, [r4, #16]
 8019b0e:	464a      	mov	r2, r9
 8019b10:	f7fc f850 	bl	8015bb4 <memcpy>
 8019b14:	89a3      	ldrh	r3, [r4, #12]
 8019b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b1e:	81a3      	strh	r3, [r4, #12]
 8019b20:	6126      	str	r6, [r4, #16]
 8019b22:	6165      	str	r5, [r4, #20]
 8019b24:	444e      	add	r6, r9
 8019b26:	eba5 0509 	sub.w	r5, r5, r9
 8019b2a:	6026      	str	r6, [r4, #0]
 8019b2c:	60a5      	str	r5, [r4, #8]
 8019b2e:	463e      	mov	r6, r7
 8019b30:	42be      	cmp	r6, r7
 8019b32:	d900      	bls.n	8019b36 <__ssputs_r+0x86>
 8019b34:	463e      	mov	r6, r7
 8019b36:	4632      	mov	r2, r6
 8019b38:	6820      	ldr	r0, [r4, #0]
 8019b3a:	4641      	mov	r1, r8
 8019b3c:	f000 fb70 	bl	801a220 <memmove>
 8019b40:	68a3      	ldr	r3, [r4, #8]
 8019b42:	6822      	ldr	r2, [r4, #0]
 8019b44:	1b9b      	subs	r3, r3, r6
 8019b46:	4432      	add	r2, r6
 8019b48:	60a3      	str	r3, [r4, #8]
 8019b4a:	6022      	str	r2, [r4, #0]
 8019b4c:	2000      	movs	r0, #0
 8019b4e:	e7db      	b.n	8019b08 <__ssputs_r+0x58>
 8019b50:	462a      	mov	r2, r5
 8019b52:	f000 fb8b 	bl	801a26c <_realloc_r>
 8019b56:	4606      	mov	r6, r0
 8019b58:	2800      	cmp	r0, #0
 8019b5a:	d1e1      	bne.n	8019b20 <__ssputs_r+0x70>
 8019b5c:	6921      	ldr	r1, [r4, #16]
 8019b5e:	4650      	mov	r0, sl
 8019b60:	f7ff fefc 	bl	801995c <_free_r>
 8019b64:	e7c7      	b.n	8019af6 <__ssputs_r+0x46>
	...

08019b68 <_svfiprintf_r>:
 8019b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b6c:	4698      	mov	r8, r3
 8019b6e:	898b      	ldrh	r3, [r1, #12]
 8019b70:	061b      	lsls	r3, r3, #24
 8019b72:	b09d      	sub	sp, #116	; 0x74
 8019b74:	4607      	mov	r7, r0
 8019b76:	460d      	mov	r5, r1
 8019b78:	4614      	mov	r4, r2
 8019b7a:	d50e      	bpl.n	8019b9a <_svfiprintf_r+0x32>
 8019b7c:	690b      	ldr	r3, [r1, #16]
 8019b7e:	b963      	cbnz	r3, 8019b9a <_svfiprintf_r+0x32>
 8019b80:	2140      	movs	r1, #64	; 0x40
 8019b82:	f7ff ff3b 	bl	80199fc <_malloc_r>
 8019b86:	6028      	str	r0, [r5, #0]
 8019b88:	6128      	str	r0, [r5, #16]
 8019b8a:	b920      	cbnz	r0, 8019b96 <_svfiprintf_r+0x2e>
 8019b8c:	230c      	movs	r3, #12
 8019b8e:	603b      	str	r3, [r7, #0]
 8019b90:	f04f 30ff 	mov.w	r0, #4294967295
 8019b94:	e0d1      	b.n	8019d3a <_svfiprintf_r+0x1d2>
 8019b96:	2340      	movs	r3, #64	; 0x40
 8019b98:	616b      	str	r3, [r5, #20]
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b9e:	2320      	movs	r3, #32
 8019ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ba8:	2330      	movs	r3, #48	; 0x30
 8019baa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019d54 <_svfiprintf_r+0x1ec>
 8019bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019bb2:	f04f 0901 	mov.w	r9, #1
 8019bb6:	4623      	mov	r3, r4
 8019bb8:	469a      	mov	sl, r3
 8019bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bbe:	b10a      	cbz	r2, 8019bc4 <_svfiprintf_r+0x5c>
 8019bc0:	2a25      	cmp	r2, #37	; 0x25
 8019bc2:	d1f9      	bne.n	8019bb8 <_svfiprintf_r+0x50>
 8019bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8019bc8:	d00b      	beq.n	8019be2 <_svfiprintf_r+0x7a>
 8019bca:	465b      	mov	r3, fp
 8019bcc:	4622      	mov	r2, r4
 8019bce:	4629      	mov	r1, r5
 8019bd0:	4638      	mov	r0, r7
 8019bd2:	f7ff ff6d 	bl	8019ab0 <__ssputs_r>
 8019bd6:	3001      	adds	r0, #1
 8019bd8:	f000 80aa 	beq.w	8019d30 <_svfiprintf_r+0x1c8>
 8019bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bde:	445a      	add	r2, fp
 8019be0:	9209      	str	r2, [sp, #36]	; 0x24
 8019be2:	f89a 3000 	ldrb.w	r3, [sl]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	f000 80a2 	beq.w	8019d30 <_svfiprintf_r+0x1c8>
 8019bec:	2300      	movs	r3, #0
 8019bee:	f04f 32ff 	mov.w	r2, #4294967295
 8019bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019bf6:	f10a 0a01 	add.w	sl, sl, #1
 8019bfa:	9304      	str	r3, [sp, #16]
 8019bfc:	9307      	str	r3, [sp, #28]
 8019bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c02:	931a      	str	r3, [sp, #104]	; 0x68
 8019c04:	4654      	mov	r4, sl
 8019c06:	2205      	movs	r2, #5
 8019c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c0c:	4851      	ldr	r0, [pc, #324]	; (8019d54 <_svfiprintf_r+0x1ec>)
 8019c0e:	f7e6 fb1f 	bl	8000250 <memchr>
 8019c12:	9a04      	ldr	r2, [sp, #16]
 8019c14:	b9d8      	cbnz	r0, 8019c4e <_svfiprintf_r+0xe6>
 8019c16:	06d0      	lsls	r0, r2, #27
 8019c18:	bf44      	itt	mi
 8019c1a:	2320      	movmi	r3, #32
 8019c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c20:	0711      	lsls	r1, r2, #28
 8019c22:	bf44      	itt	mi
 8019c24:	232b      	movmi	r3, #43	; 0x2b
 8019c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8019c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8019c30:	d015      	beq.n	8019c5e <_svfiprintf_r+0xf6>
 8019c32:	9a07      	ldr	r2, [sp, #28]
 8019c34:	4654      	mov	r4, sl
 8019c36:	2000      	movs	r0, #0
 8019c38:	f04f 0c0a 	mov.w	ip, #10
 8019c3c:	4621      	mov	r1, r4
 8019c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c42:	3b30      	subs	r3, #48	; 0x30
 8019c44:	2b09      	cmp	r3, #9
 8019c46:	d94e      	bls.n	8019ce6 <_svfiprintf_r+0x17e>
 8019c48:	b1b0      	cbz	r0, 8019c78 <_svfiprintf_r+0x110>
 8019c4a:	9207      	str	r2, [sp, #28]
 8019c4c:	e014      	b.n	8019c78 <_svfiprintf_r+0x110>
 8019c4e:	eba0 0308 	sub.w	r3, r0, r8
 8019c52:	fa09 f303 	lsl.w	r3, r9, r3
 8019c56:	4313      	orrs	r3, r2
 8019c58:	9304      	str	r3, [sp, #16]
 8019c5a:	46a2      	mov	sl, r4
 8019c5c:	e7d2      	b.n	8019c04 <_svfiprintf_r+0x9c>
 8019c5e:	9b03      	ldr	r3, [sp, #12]
 8019c60:	1d19      	adds	r1, r3, #4
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	9103      	str	r1, [sp, #12]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	bfbb      	ittet	lt
 8019c6a:	425b      	neglt	r3, r3
 8019c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8019c70:	9307      	strge	r3, [sp, #28]
 8019c72:	9307      	strlt	r3, [sp, #28]
 8019c74:	bfb8      	it	lt
 8019c76:	9204      	strlt	r2, [sp, #16]
 8019c78:	7823      	ldrb	r3, [r4, #0]
 8019c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8019c7c:	d10c      	bne.n	8019c98 <_svfiprintf_r+0x130>
 8019c7e:	7863      	ldrb	r3, [r4, #1]
 8019c80:	2b2a      	cmp	r3, #42	; 0x2a
 8019c82:	d135      	bne.n	8019cf0 <_svfiprintf_r+0x188>
 8019c84:	9b03      	ldr	r3, [sp, #12]
 8019c86:	1d1a      	adds	r2, r3, #4
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	9203      	str	r2, [sp, #12]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	bfb8      	it	lt
 8019c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c94:	3402      	adds	r4, #2
 8019c96:	9305      	str	r3, [sp, #20]
 8019c98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019d64 <_svfiprintf_r+0x1fc>
 8019c9c:	7821      	ldrb	r1, [r4, #0]
 8019c9e:	2203      	movs	r2, #3
 8019ca0:	4650      	mov	r0, sl
 8019ca2:	f7e6 fad5 	bl	8000250 <memchr>
 8019ca6:	b140      	cbz	r0, 8019cba <_svfiprintf_r+0x152>
 8019ca8:	2340      	movs	r3, #64	; 0x40
 8019caa:	eba0 000a 	sub.w	r0, r0, sl
 8019cae:	fa03 f000 	lsl.w	r0, r3, r0
 8019cb2:	9b04      	ldr	r3, [sp, #16]
 8019cb4:	4303      	orrs	r3, r0
 8019cb6:	3401      	adds	r4, #1
 8019cb8:	9304      	str	r3, [sp, #16]
 8019cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cbe:	4826      	ldr	r0, [pc, #152]	; (8019d58 <_svfiprintf_r+0x1f0>)
 8019cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019cc4:	2206      	movs	r2, #6
 8019cc6:	f7e6 fac3 	bl	8000250 <memchr>
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	d038      	beq.n	8019d40 <_svfiprintf_r+0x1d8>
 8019cce:	4b23      	ldr	r3, [pc, #140]	; (8019d5c <_svfiprintf_r+0x1f4>)
 8019cd0:	bb1b      	cbnz	r3, 8019d1a <_svfiprintf_r+0x1b2>
 8019cd2:	9b03      	ldr	r3, [sp, #12]
 8019cd4:	3307      	adds	r3, #7
 8019cd6:	f023 0307 	bic.w	r3, r3, #7
 8019cda:	3308      	adds	r3, #8
 8019cdc:	9303      	str	r3, [sp, #12]
 8019cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ce0:	4433      	add	r3, r6
 8019ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8019ce4:	e767      	b.n	8019bb6 <_svfiprintf_r+0x4e>
 8019ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8019cea:	460c      	mov	r4, r1
 8019cec:	2001      	movs	r0, #1
 8019cee:	e7a5      	b.n	8019c3c <_svfiprintf_r+0xd4>
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	3401      	adds	r4, #1
 8019cf4:	9305      	str	r3, [sp, #20]
 8019cf6:	4619      	mov	r1, r3
 8019cf8:	f04f 0c0a 	mov.w	ip, #10
 8019cfc:	4620      	mov	r0, r4
 8019cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d02:	3a30      	subs	r2, #48	; 0x30
 8019d04:	2a09      	cmp	r2, #9
 8019d06:	d903      	bls.n	8019d10 <_svfiprintf_r+0x1a8>
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d0c5      	beq.n	8019c98 <_svfiprintf_r+0x130>
 8019d0c:	9105      	str	r1, [sp, #20]
 8019d0e:	e7c3      	b.n	8019c98 <_svfiprintf_r+0x130>
 8019d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d14:	4604      	mov	r4, r0
 8019d16:	2301      	movs	r3, #1
 8019d18:	e7f0      	b.n	8019cfc <_svfiprintf_r+0x194>
 8019d1a:	ab03      	add	r3, sp, #12
 8019d1c:	9300      	str	r3, [sp, #0]
 8019d1e:	462a      	mov	r2, r5
 8019d20:	4b0f      	ldr	r3, [pc, #60]	; (8019d60 <_svfiprintf_r+0x1f8>)
 8019d22:	a904      	add	r1, sp, #16
 8019d24:	4638      	mov	r0, r7
 8019d26:	f7fb ffeb 	bl	8015d00 <_printf_float>
 8019d2a:	1c42      	adds	r2, r0, #1
 8019d2c:	4606      	mov	r6, r0
 8019d2e:	d1d6      	bne.n	8019cde <_svfiprintf_r+0x176>
 8019d30:	89ab      	ldrh	r3, [r5, #12]
 8019d32:	065b      	lsls	r3, r3, #25
 8019d34:	f53f af2c 	bmi.w	8019b90 <_svfiprintf_r+0x28>
 8019d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d3a:	b01d      	add	sp, #116	; 0x74
 8019d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d40:	ab03      	add	r3, sp, #12
 8019d42:	9300      	str	r3, [sp, #0]
 8019d44:	462a      	mov	r2, r5
 8019d46:	4b06      	ldr	r3, [pc, #24]	; (8019d60 <_svfiprintf_r+0x1f8>)
 8019d48:	a904      	add	r1, sp, #16
 8019d4a:	4638      	mov	r0, r7
 8019d4c:	f7fc fa64 	bl	8016218 <_printf_i>
 8019d50:	e7eb      	b.n	8019d2a <_svfiprintf_r+0x1c2>
 8019d52:	bf00      	nop
 8019d54:	0801ca9c 	.word	0x0801ca9c
 8019d58:	0801caa6 	.word	0x0801caa6
 8019d5c:	08015d01 	.word	0x08015d01
 8019d60:	08019ab1 	.word	0x08019ab1
 8019d64:	0801caa2 	.word	0x0801caa2

08019d68 <__sfputc_r>:
 8019d68:	6893      	ldr	r3, [r2, #8]
 8019d6a:	3b01      	subs	r3, #1
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	b410      	push	{r4}
 8019d70:	6093      	str	r3, [r2, #8]
 8019d72:	da08      	bge.n	8019d86 <__sfputc_r+0x1e>
 8019d74:	6994      	ldr	r4, [r2, #24]
 8019d76:	42a3      	cmp	r3, r4
 8019d78:	db01      	blt.n	8019d7e <__sfputc_r+0x16>
 8019d7a:	290a      	cmp	r1, #10
 8019d7c:	d103      	bne.n	8019d86 <__sfputc_r+0x1e>
 8019d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d82:	f7fd bca3 	b.w	80176cc <__swbuf_r>
 8019d86:	6813      	ldr	r3, [r2, #0]
 8019d88:	1c58      	adds	r0, r3, #1
 8019d8a:	6010      	str	r0, [r2, #0]
 8019d8c:	7019      	strb	r1, [r3, #0]
 8019d8e:	4608      	mov	r0, r1
 8019d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d94:	4770      	bx	lr

08019d96 <__sfputs_r>:
 8019d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d98:	4606      	mov	r6, r0
 8019d9a:	460f      	mov	r7, r1
 8019d9c:	4614      	mov	r4, r2
 8019d9e:	18d5      	adds	r5, r2, r3
 8019da0:	42ac      	cmp	r4, r5
 8019da2:	d101      	bne.n	8019da8 <__sfputs_r+0x12>
 8019da4:	2000      	movs	r0, #0
 8019da6:	e007      	b.n	8019db8 <__sfputs_r+0x22>
 8019da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dac:	463a      	mov	r2, r7
 8019dae:	4630      	mov	r0, r6
 8019db0:	f7ff ffda 	bl	8019d68 <__sfputc_r>
 8019db4:	1c43      	adds	r3, r0, #1
 8019db6:	d1f3      	bne.n	8019da0 <__sfputs_r+0xa>
 8019db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019dbc <_vfiprintf_r>:
 8019dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc0:	460d      	mov	r5, r1
 8019dc2:	b09d      	sub	sp, #116	; 0x74
 8019dc4:	4614      	mov	r4, r2
 8019dc6:	4698      	mov	r8, r3
 8019dc8:	4606      	mov	r6, r0
 8019dca:	b118      	cbz	r0, 8019dd4 <_vfiprintf_r+0x18>
 8019dcc:	6983      	ldr	r3, [r0, #24]
 8019dce:	b90b      	cbnz	r3, 8019dd4 <_vfiprintf_r+0x18>
 8019dd0:	f7fe fc66 	bl	80186a0 <__sinit>
 8019dd4:	4b89      	ldr	r3, [pc, #548]	; (8019ffc <_vfiprintf_r+0x240>)
 8019dd6:	429d      	cmp	r5, r3
 8019dd8:	d11b      	bne.n	8019e12 <_vfiprintf_r+0x56>
 8019dda:	6875      	ldr	r5, [r6, #4]
 8019ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dde:	07d9      	lsls	r1, r3, #31
 8019de0:	d405      	bmi.n	8019dee <_vfiprintf_r+0x32>
 8019de2:	89ab      	ldrh	r3, [r5, #12]
 8019de4:	059a      	lsls	r2, r3, #22
 8019de6:	d402      	bmi.n	8019dee <_vfiprintf_r+0x32>
 8019de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dea:	f7ff f86a 	bl	8018ec2 <__retarget_lock_acquire_recursive>
 8019dee:	89ab      	ldrh	r3, [r5, #12]
 8019df0:	071b      	lsls	r3, r3, #28
 8019df2:	d501      	bpl.n	8019df8 <_vfiprintf_r+0x3c>
 8019df4:	692b      	ldr	r3, [r5, #16]
 8019df6:	b9eb      	cbnz	r3, 8019e34 <_vfiprintf_r+0x78>
 8019df8:	4629      	mov	r1, r5
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f7fd fcb8 	bl	8017770 <__swsetup_r>
 8019e00:	b1c0      	cbz	r0, 8019e34 <_vfiprintf_r+0x78>
 8019e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e04:	07dc      	lsls	r4, r3, #31
 8019e06:	d50e      	bpl.n	8019e26 <_vfiprintf_r+0x6a>
 8019e08:	f04f 30ff 	mov.w	r0, #4294967295
 8019e0c:	b01d      	add	sp, #116	; 0x74
 8019e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e12:	4b7b      	ldr	r3, [pc, #492]	; (801a000 <_vfiprintf_r+0x244>)
 8019e14:	429d      	cmp	r5, r3
 8019e16:	d101      	bne.n	8019e1c <_vfiprintf_r+0x60>
 8019e18:	68b5      	ldr	r5, [r6, #8]
 8019e1a:	e7df      	b.n	8019ddc <_vfiprintf_r+0x20>
 8019e1c:	4b79      	ldr	r3, [pc, #484]	; (801a004 <_vfiprintf_r+0x248>)
 8019e1e:	429d      	cmp	r5, r3
 8019e20:	bf08      	it	eq
 8019e22:	68f5      	ldreq	r5, [r6, #12]
 8019e24:	e7da      	b.n	8019ddc <_vfiprintf_r+0x20>
 8019e26:	89ab      	ldrh	r3, [r5, #12]
 8019e28:	0598      	lsls	r0, r3, #22
 8019e2a:	d4ed      	bmi.n	8019e08 <_vfiprintf_r+0x4c>
 8019e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e2e:	f7ff f849 	bl	8018ec4 <__retarget_lock_release_recursive>
 8019e32:	e7e9      	b.n	8019e08 <_vfiprintf_r+0x4c>
 8019e34:	2300      	movs	r3, #0
 8019e36:	9309      	str	r3, [sp, #36]	; 0x24
 8019e38:	2320      	movs	r3, #32
 8019e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e42:	2330      	movs	r3, #48	; 0x30
 8019e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a008 <_vfiprintf_r+0x24c>
 8019e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e4c:	f04f 0901 	mov.w	r9, #1
 8019e50:	4623      	mov	r3, r4
 8019e52:	469a      	mov	sl, r3
 8019e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e58:	b10a      	cbz	r2, 8019e5e <_vfiprintf_r+0xa2>
 8019e5a:	2a25      	cmp	r2, #37	; 0x25
 8019e5c:	d1f9      	bne.n	8019e52 <_vfiprintf_r+0x96>
 8019e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8019e62:	d00b      	beq.n	8019e7c <_vfiprintf_r+0xc0>
 8019e64:	465b      	mov	r3, fp
 8019e66:	4622      	mov	r2, r4
 8019e68:	4629      	mov	r1, r5
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	f7ff ff93 	bl	8019d96 <__sfputs_r>
 8019e70:	3001      	adds	r0, #1
 8019e72:	f000 80aa 	beq.w	8019fca <_vfiprintf_r+0x20e>
 8019e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e78:	445a      	add	r2, fp
 8019e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8019e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	f000 80a2 	beq.w	8019fca <_vfiprintf_r+0x20e>
 8019e86:	2300      	movs	r3, #0
 8019e88:	f04f 32ff 	mov.w	r2, #4294967295
 8019e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e90:	f10a 0a01 	add.w	sl, sl, #1
 8019e94:	9304      	str	r3, [sp, #16]
 8019e96:	9307      	str	r3, [sp, #28]
 8019e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8019e9e:	4654      	mov	r4, sl
 8019ea0:	2205      	movs	r2, #5
 8019ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ea6:	4858      	ldr	r0, [pc, #352]	; (801a008 <_vfiprintf_r+0x24c>)
 8019ea8:	f7e6 f9d2 	bl	8000250 <memchr>
 8019eac:	9a04      	ldr	r2, [sp, #16]
 8019eae:	b9d8      	cbnz	r0, 8019ee8 <_vfiprintf_r+0x12c>
 8019eb0:	06d1      	lsls	r1, r2, #27
 8019eb2:	bf44      	itt	mi
 8019eb4:	2320      	movmi	r3, #32
 8019eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019eba:	0713      	lsls	r3, r2, #28
 8019ebc:	bf44      	itt	mi
 8019ebe:	232b      	movmi	r3, #43	; 0x2b
 8019ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8019ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8019eca:	d015      	beq.n	8019ef8 <_vfiprintf_r+0x13c>
 8019ecc:	9a07      	ldr	r2, [sp, #28]
 8019ece:	4654      	mov	r4, sl
 8019ed0:	2000      	movs	r0, #0
 8019ed2:	f04f 0c0a 	mov.w	ip, #10
 8019ed6:	4621      	mov	r1, r4
 8019ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019edc:	3b30      	subs	r3, #48	; 0x30
 8019ede:	2b09      	cmp	r3, #9
 8019ee0:	d94e      	bls.n	8019f80 <_vfiprintf_r+0x1c4>
 8019ee2:	b1b0      	cbz	r0, 8019f12 <_vfiprintf_r+0x156>
 8019ee4:	9207      	str	r2, [sp, #28]
 8019ee6:	e014      	b.n	8019f12 <_vfiprintf_r+0x156>
 8019ee8:	eba0 0308 	sub.w	r3, r0, r8
 8019eec:	fa09 f303 	lsl.w	r3, r9, r3
 8019ef0:	4313      	orrs	r3, r2
 8019ef2:	9304      	str	r3, [sp, #16]
 8019ef4:	46a2      	mov	sl, r4
 8019ef6:	e7d2      	b.n	8019e9e <_vfiprintf_r+0xe2>
 8019ef8:	9b03      	ldr	r3, [sp, #12]
 8019efa:	1d19      	adds	r1, r3, #4
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	9103      	str	r1, [sp, #12]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	bfbb      	ittet	lt
 8019f04:	425b      	neglt	r3, r3
 8019f06:	f042 0202 	orrlt.w	r2, r2, #2
 8019f0a:	9307      	strge	r3, [sp, #28]
 8019f0c:	9307      	strlt	r3, [sp, #28]
 8019f0e:	bfb8      	it	lt
 8019f10:	9204      	strlt	r2, [sp, #16]
 8019f12:	7823      	ldrb	r3, [r4, #0]
 8019f14:	2b2e      	cmp	r3, #46	; 0x2e
 8019f16:	d10c      	bne.n	8019f32 <_vfiprintf_r+0x176>
 8019f18:	7863      	ldrb	r3, [r4, #1]
 8019f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8019f1c:	d135      	bne.n	8019f8a <_vfiprintf_r+0x1ce>
 8019f1e:	9b03      	ldr	r3, [sp, #12]
 8019f20:	1d1a      	adds	r2, r3, #4
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	9203      	str	r2, [sp, #12]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	bfb8      	it	lt
 8019f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f2e:	3402      	adds	r4, #2
 8019f30:	9305      	str	r3, [sp, #20]
 8019f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a018 <_vfiprintf_r+0x25c>
 8019f36:	7821      	ldrb	r1, [r4, #0]
 8019f38:	2203      	movs	r2, #3
 8019f3a:	4650      	mov	r0, sl
 8019f3c:	f7e6 f988 	bl	8000250 <memchr>
 8019f40:	b140      	cbz	r0, 8019f54 <_vfiprintf_r+0x198>
 8019f42:	2340      	movs	r3, #64	; 0x40
 8019f44:	eba0 000a 	sub.w	r0, r0, sl
 8019f48:	fa03 f000 	lsl.w	r0, r3, r0
 8019f4c:	9b04      	ldr	r3, [sp, #16]
 8019f4e:	4303      	orrs	r3, r0
 8019f50:	3401      	adds	r4, #1
 8019f52:	9304      	str	r3, [sp, #16]
 8019f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f58:	482c      	ldr	r0, [pc, #176]	; (801a00c <_vfiprintf_r+0x250>)
 8019f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f5e:	2206      	movs	r2, #6
 8019f60:	f7e6 f976 	bl	8000250 <memchr>
 8019f64:	2800      	cmp	r0, #0
 8019f66:	d03f      	beq.n	8019fe8 <_vfiprintf_r+0x22c>
 8019f68:	4b29      	ldr	r3, [pc, #164]	; (801a010 <_vfiprintf_r+0x254>)
 8019f6a:	bb1b      	cbnz	r3, 8019fb4 <_vfiprintf_r+0x1f8>
 8019f6c:	9b03      	ldr	r3, [sp, #12]
 8019f6e:	3307      	adds	r3, #7
 8019f70:	f023 0307 	bic.w	r3, r3, #7
 8019f74:	3308      	adds	r3, #8
 8019f76:	9303      	str	r3, [sp, #12]
 8019f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f7a:	443b      	add	r3, r7
 8019f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8019f7e:	e767      	b.n	8019e50 <_vfiprintf_r+0x94>
 8019f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f84:	460c      	mov	r4, r1
 8019f86:	2001      	movs	r0, #1
 8019f88:	e7a5      	b.n	8019ed6 <_vfiprintf_r+0x11a>
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	3401      	adds	r4, #1
 8019f8e:	9305      	str	r3, [sp, #20]
 8019f90:	4619      	mov	r1, r3
 8019f92:	f04f 0c0a 	mov.w	ip, #10
 8019f96:	4620      	mov	r0, r4
 8019f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f9c:	3a30      	subs	r2, #48	; 0x30
 8019f9e:	2a09      	cmp	r2, #9
 8019fa0:	d903      	bls.n	8019faa <_vfiprintf_r+0x1ee>
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d0c5      	beq.n	8019f32 <_vfiprintf_r+0x176>
 8019fa6:	9105      	str	r1, [sp, #20]
 8019fa8:	e7c3      	b.n	8019f32 <_vfiprintf_r+0x176>
 8019faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fae:	4604      	mov	r4, r0
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	e7f0      	b.n	8019f96 <_vfiprintf_r+0x1da>
 8019fb4:	ab03      	add	r3, sp, #12
 8019fb6:	9300      	str	r3, [sp, #0]
 8019fb8:	462a      	mov	r2, r5
 8019fba:	4b16      	ldr	r3, [pc, #88]	; (801a014 <_vfiprintf_r+0x258>)
 8019fbc:	a904      	add	r1, sp, #16
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	f7fb fe9e 	bl	8015d00 <_printf_float>
 8019fc4:	4607      	mov	r7, r0
 8019fc6:	1c78      	adds	r0, r7, #1
 8019fc8:	d1d6      	bne.n	8019f78 <_vfiprintf_r+0x1bc>
 8019fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fcc:	07d9      	lsls	r1, r3, #31
 8019fce:	d405      	bmi.n	8019fdc <_vfiprintf_r+0x220>
 8019fd0:	89ab      	ldrh	r3, [r5, #12]
 8019fd2:	059a      	lsls	r2, r3, #22
 8019fd4:	d402      	bmi.n	8019fdc <_vfiprintf_r+0x220>
 8019fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fd8:	f7fe ff74 	bl	8018ec4 <__retarget_lock_release_recursive>
 8019fdc:	89ab      	ldrh	r3, [r5, #12]
 8019fde:	065b      	lsls	r3, r3, #25
 8019fe0:	f53f af12 	bmi.w	8019e08 <_vfiprintf_r+0x4c>
 8019fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fe6:	e711      	b.n	8019e0c <_vfiprintf_r+0x50>
 8019fe8:	ab03      	add	r3, sp, #12
 8019fea:	9300      	str	r3, [sp, #0]
 8019fec:	462a      	mov	r2, r5
 8019fee:	4b09      	ldr	r3, [pc, #36]	; (801a014 <_vfiprintf_r+0x258>)
 8019ff0:	a904      	add	r1, sp, #16
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	f7fc f910 	bl	8016218 <_printf_i>
 8019ff8:	e7e4      	b.n	8019fc4 <_vfiprintf_r+0x208>
 8019ffa:	bf00      	nop
 8019ffc:	0801c880 	.word	0x0801c880
 801a000:	0801c8a0 	.word	0x0801c8a0
 801a004:	0801c860 	.word	0x0801c860
 801a008:	0801ca9c 	.word	0x0801ca9c
 801a00c:	0801caa6 	.word	0x0801caa6
 801a010:	08015d01 	.word	0x08015d01
 801a014:	08019d97 	.word	0x08019d97
 801a018:	0801caa2 	.word	0x0801caa2
 801a01c:	00000000 	.word	0x00000000

0801a020 <nan>:
 801a020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a028 <nan+0x8>
 801a024:	4770      	bx	lr
 801a026:	bf00      	nop
 801a028:	00000000 	.word	0x00000000
 801a02c:	7ff80000 	.word	0x7ff80000

0801a030 <_sbrk_r>:
 801a030:	b538      	push	{r3, r4, r5, lr}
 801a032:	4d06      	ldr	r5, [pc, #24]	; (801a04c <_sbrk_r+0x1c>)
 801a034:	2300      	movs	r3, #0
 801a036:	4604      	mov	r4, r0
 801a038:	4608      	mov	r0, r1
 801a03a:	602b      	str	r3, [r5, #0]
 801a03c:	f7ed fae4 	bl	8007608 <_sbrk>
 801a040:	1c43      	adds	r3, r0, #1
 801a042:	d102      	bne.n	801a04a <_sbrk_r+0x1a>
 801a044:	682b      	ldr	r3, [r5, #0]
 801a046:	b103      	cbz	r3, 801a04a <_sbrk_r+0x1a>
 801a048:	6023      	str	r3, [r4, #0]
 801a04a:	bd38      	pop	{r3, r4, r5, pc}
 801a04c:	20031280 	.word	0x20031280

0801a050 <__sread>:
 801a050:	b510      	push	{r4, lr}
 801a052:	460c      	mov	r4, r1
 801a054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a058:	f000 f92e 	bl	801a2b8 <_read_r>
 801a05c:	2800      	cmp	r0, #0
 801a05e:	bfab      	itete	ge
 801a060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a062:	89a3      	ldrhlt	r3, [r4, #12]
 801a064:	181b      	addge	r3, r3, r0
 801a066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a06a:	bfac      	ite	ge
 801a06c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a06e:	81a3      	strhlt	r3, [r4, #12]
 801a070:	bd10      	pop	{r4, pc}

0801a072 <__swrite>:
 801a072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a076:	461f      	mov	r7, r3
 801a078:	898b      	ldrh	r3, [r1, #12]
 801a07a:	05db      	lsls	r3, r3, #23
 801a07c:	4605      	mov	r5, r0
 801a07e:	460c      	mov	r4, r1
 801a080:	4616      	mov	r6, r2
 801a082:	d505      	bpl.n	801a090 <__swrite+0x1e>
 801a084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a088:	2302      	movs	r3, #2
 801a08a:	2200      	movs	r2, #0
 801a08c:	f000 f8b6 	bl	801a1fc <_lseek_r>
 801a090:	89a3      	ldrh	r3, [r4, #12]
 801a092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a09a:	81a3      	strh	r3, [r4, #12]
 801a09c:	4632      	mov	r2, r6
 801a09e:	463b      	mov	r3, r7
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a6:	f000 b835 	b.w	801a114 <_write_r>

0801a0aa <__sseek>:
 801a0aa:	b510      	push	{r4, lr}
 801a0ac:	460c      	mov	r4, r1
 801a0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0b2:	f000 f8a3 	bl	801a1fc <_lseek_r>
 801a0b6:	1c43      	adds	r3, r0, #1
 801a0b8:	89a3      	ldrh	r3, [r4, #12]
 801a0ba:	bf15      	itete	ne
 801a0bc:	6560      	strne	r0, [r4, #84]	; 0x54
 801a0be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a0c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a0c6:	81a3      	strheq	r3, [r4, #12]
 801a0c8:	bf18      	it	ne
 801a0ca:	81a3      	strhne	r3, [r4, #12]
 801a0cc:	bd10      	pop	{r4, pc}

0801a0ce <__sclose>:
 801a0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0d2:	f000 b84f 	b.w	801a174 <_close_r>

0801a0d6 <strncmp>:
 801a0d6:	b510      	push	{r4, lr}
 801a0d8:	b16a      	cbz	r2, 801a0f6 <strncmp+0x20>
 801a0da:	3901      	subs	r1, #1
 801a0dc:	1884      	adds	r4, r0, r2
 801a0de:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a0e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a0e6:	4293      	cmp	r3, r2
 801a0e8:	d103      	bne.n	801a0f2 <strncmp+0x1c>
 801a0ea:	42a0      	cmp	r0, r4
 801a0ec:	d001      	beq.n	801a0f2 <strncmp+0x1c>
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d1f5      	bne.n	801a0de <strncmp+0x8>
 801a0f2:	1a98      	subs	r0, r3, r2
 801a0f4:	bd10      	pop	{r4, pc}
 801a0f6:	4610      	mov	r0, r2
 801a0f8:	e7fc      	b.n	801a0f4 <strncmp+0x1e>

0801a0fa <__ascii_wctomb>:
 801a0fa:	b149      	cbz	r1, 801a110 <__ascii_wctomb+0x16>
 801a0fc:	2aff      	cmp	r2, #255	; 0xff
 801a0fe:	bf85      	ittet	hi
 801a100:	238a      	movhi	r3, #138	; 0x8a
 801a102:	6003      	strhi	r3, [r0, #0]
 801a104:	700a      	strbls	r2, [r1, #0]
 801a106:	f04f 30ff 	movhi.w	r0, #4294967295
 801a10a:	bf98      	it	ls
 801a10c:	2001      	movls	r0, #1
 801a10e:	4770      	bx	lr
 801a110:	4608      	mov	r0, r1
 801a112:	4770      	bx	lr

0801a114 <_write_r>:
 801a114:	b538      	push	{r3, r4, r5, lr}
 801a116:	4d07      	ldr	r5, [pc, #28]	; (801a134 <_write_r+0x20>)
 801a118:	4604      	mov	r4, r0
 801a11a:	4608      	mov	r0, r1
 801a11c:	4611      	mov	r1, r2
 801a11e:	2200      	movs	r2, #0
 801a120:	602a      	str	r2, [r5, #0]
 801a122:	461a      	mov	r2, r3
 801a124:	f7ed fa1f 	bl	8007566 <_write>
 801a128:	1c43      	adds	r3, r0, #1
 801a12a:	d102      	bne.n	801a132 <_write_r+0x1e>
 801a12c:	682b      	ldr	r3, [r5, #0]
 801a12e:	b103      	cbz	r3, 801a132 <_write_r+0x1e>
 801a130:	6023      	str	r3, [r4, #0]
 801a132:	bd38      	pop	{r3, r4, r5, pc}
 801a134:	20031280 	.word	0x20031280

0801a138 <__assert_func>:
 801a138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a13a:	4614      	mov	r4, r2
 801a13c:	461a      	mov	r2, r3
 801a13e:	4b09      	ldr	r3, [pc, #36]	; (801a164 <__assert_func+0x2c>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	4605      	mov	r5, r0
 801a144:	68d8      	ldr	r0, [r3, #12]
 801a146:	b14c      	cbz	r4, 801a15c <__assert_func+0x24>
 801a148:	4b07      	ldr	r3, [pc, #28]	; (801a168 <__assert_func+0x30>)
 801a14a:	9100      	str	r1, [sp, #0]
 801a14c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a150:	4906      	ldr	r1, [pc, #24]	; (801a16c <__assert_func+0x34>)
 801a152:	462b      	mov	r3, r5
 801a154:	f000 f81e 	bl	801a194 <fiprintf>
 801a158:	f000 f8c0 	bl	801a2dc <abort>
 801a15c:	4b04      	ldr	r3, [pc, #16]	; (801a170 <__assert_func+0x38>)
 801a15e:	461c      	mov	r4, r3
 801a160:	e7f3      	b.n	801a14a <__assert_func+0x12>
 801a162:	bf00      	nop
 801a164:	20000254 	.word	0x20000254
 801a168:	0801caad 	.word	0x0801caad
 801a16c:	0801caba 	.word	0x0801caba
 801a170:	0801cae8 	.word	0x0801cae8

0801a174 <_close_r>:
 801a174:	b538      	push	{r3, r4, r5, lr}
 801a176:	4d06      	ldr	r5, [pc, #24]	; (801a190 <_close_r+0x1c>)
 801a178:	2300      	movs	r3, #0
 801a17a:	4604      	mov	r4, r0
 801a17c:	4608      	mov	r0, r1
 801a17e:	602b      	str	r3, [r5, #0]
 801a180:	f7ed fa0d 	bl	800759e <_close>
 801a184:	1c43      	adds	r3, r0, #1
 801a186:	d102      	bne.n	801a18e <_close_r+0x1a>
 801a188:	682b      	ldr	r3, [r5, #0]
 801a18a:	b103      	cbz	r3, 801a18e <_close_r+0x1a>
 801a18c:	6023      	str	r3, [r4, #0]
 801a18e:	bd38      	pop	{r3, r4, r5, pc}
 801a190:	20031280 	.word	0x20031280

0801a194 <fiprintf>:
 801a194:	b40e      	push	{r1, r2, r3}
 801a196:	b503      	push	{r0, r1, lr}
 801a198:	4601      	mov	r1, r0
 801a19a:	ab03      	add	r3, sp, #12
 801a19c:	4805      	ldr	r0, [pc, #20]	; (801a1b4 <fiprintf+0x20>)
 801a19e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1a2:	6800      	ldr	r0, [r0, #0]
 801a1a4:	9301      	str	r3, [sp, #4]
 801a1a6:	f7ff fe09 	bl	8019dbc <_vfiprintf_r>
 801a1aa:	b002      	add	sp, #8
 801a1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1b0:	b003      	add	sp, #12
 801a1b2:	4770      	bx	lr
 801a1b4:	20000254 	.word	0x20000254

0801a1b8 <_fstat_r>:
 801a1b8:	b538      	push	{r3, r4, r5, lr}
 801a1ba:	4d07      	ldr	r5, [pc, #28]	; (801a1d8 <_fstat_r+0x20>)
 801a1bc:	2300      	movs	r3, #0
 801a1be:	4604      	mov	r4, r0
 801a1c0:	4608      	mov	r0, r1
 801a1c2:	4611      	mov	r1, r2
 801a1c4:	602b      	str	r3, [r5, #0]
 801a1c6:	f7ed f9f6 	bl	80075b6 <_fstat>
 801a1ca:	1c43      	adds	r3, r0, #1
 801a1cc:	d102      	bne.n	801a1d4 <_fstat_r+0x1c>
 801a1ce:	682b      	ldr	r3, [r5, #0]
 801a1d0:	b103      	cbz	r3, 801a1d4 <_fstat_r+0x1c>
 801a1d2:	6023      	str	r3, [r4, #0]
 801a1d4:	bd38      	pop	{r3, r4, r5, pc}
 801a1d6:	bf00      	nop
 801a1d8:	20031280 	.word	0x20031280

0801a1dc <_isatty_r>:
 801a1dc:	b538      	push	{r3, r4, r5, lr}
 801a1de:	4d06      	ldr	r5, [pc, #24]	; (801a1f8 <_isatty_r+0x1c>)
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	4604      	mov	r4, r0
 801a1e4:	4608      	mov	r0, r1
 801a1e6:	602b      	str	r3, [r5, #0]
 801a1e8:	f7ed f9f5 	bl	80075d6 <_isatty>
 801a1ec:	1c43      	adds	r3, r0, #1
 801a1ee:	d102      	bne.n	801a1f6 <_isatty_r+0x1a>
 801a1f0:	682b      	ldr	r3, [r5, #0]
 801a1f2:	b103      	cbz	r3, 801a1f6 <_isatty_r+0x1a>
 801a1f4:	6023      	str	r3, [r4, #0]
 801a1f6:	bd38      	pop	{r3, r4, r5, pc}
 801a1f8:	20031280 	.word	0x20031280

0801a1fc <_lseek_r>:
 801a1fc:	b538      	push	{r3, r4, r5, lr}
 801a1fe:	4d07      	ldr	r5, [pc, #28]	; (801a21c <_lseek_r+0x20>)
 801a200:	4604      	mov	r4, r0
 801a202:	4608      	mov	r0, r1
 801a204:	4611      	mov	r1, r2
 801a206:	2200      	movs	r2, #0
 801a208:	602a      	str	r2, [r5, #0]
 801a20a:	461a      	mov	r2, r3
 801a20c:	f7ed f9ee 	bl	80075ec <_lseek>
 801a210:	1c43      	adds	r3, r0, #1
 801a212:	d102      	bne.n	801a21a <_lseek_r+0x1e>
 801a214:	682b      	ldr	r3, [r5, #0]
 801a216:	b103      	cbz	r3, 801a21a <_lseek_r+0x1e>
 801a218:	6023      	str	r3, [r4, #0]
 801a21a:	bd38      	pop	{r3, r4, r5, pc}
 801a21c:	20031280 	.word	0x20031280

0801a220 <memmove>:
 801a220:	4288      	cmp	r0, r1
 801a222:	b510      	push	{r4, lr}
 801a224:	eb01 0402 	add.w	r4, r1, r2
 801a228:	d902      	bls.n	801a230 <memmove+0x10>
 801a22a:	4284      	cmp	r4, r0
 801a22c:	4623      	mov	r3, r4
 801a22e:	d807      	bhi.n	801a240 <memmove+0x20>
 801a230:	1e43      	subs	r3, r0, #1
 801a232:	42a1      	cmp	r1, r4
 801a234:	d008      	beq.n	801a248 <memmove+0x28>
 801a236:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a23e:	e7f8      	b.n	801a232 <memmove+0x12>
 801a240:	4402      	add	r2, r0
 801a242:	4601      	mov	r1, r0
 801a244:	428a      	cmp	r2, r1
 801a246:	d100      	bne.n	801a24a <memmove+0x2a>
 801a248:	bd10      	pop	{r4, pc}
 801a24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a252:	e7f7      	b.n	801a244 <memmove+0x24>

0801a254 <__malloc_lock>:
 801a254:	4801      	ldr	r0, [pc, #4]	; (801a25c <__malloc_lock+0x8>)
 801a256:	f7fe be34 	b.w	8018ec2 <__retarget_lock_acquire_recursive>
 801a25a:	bf00      	nop
 801a25c:	20031278 	.word	0x20031278

0801a260 <__malloc_unlock>:
 801a260:	4801      	ldr	r0, [pc, #4]	; (801a268 <__malloc_unlock+0x8>)
 801a262:	f7fe be2f 	b.w	8018ec4 <__retarget_lock_release_recursive>
 801a266:	bf00      	nop
 801a268:	20031278 	.word	0x20031278

0801a26c <_realloc_r>:
 801a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a26e:	4607      	mov	r7, r0
 801a270:	4614      	mov	r4, r2
 801a272:	460e      	mov	r6, r1
 801a274:	b921      	cbnz	r1, 801a280 <_realloc_r+0x14>
 801a276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a27a:	4611      	mov	r1, r2
 801a27c:	f7ff bbbe 	b.w	80199fc <_malloc_r>
 801a280:	b922      	cbnz	r2, 801a28c <_realloc_r+0x20>
 801a282:	f7ff fb6b 	bl	801995c <_free_r>
 801a286:	4625      	mov	r5, r4
 801a288:	4628      	mov	r0, r5
 801a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a28c:	f000 f82d 	bl	801a2ea <_malloc_usable_size_r>
 801a290:	42a0      	cmp	r0, r4
 801a292:	d20f      	bcs.n	801a2b4 <_realloc_r+0x48>
 801a294:	4621      	mov	r1, r4
 801a296:	4638      	mov	r0, r7
 801a298:	f7ff fbb0 	bl	80199fc <_malloc_r>
 801a29c:	4605      	mov	r5, r0
 801a29e:	2800      	cmp	r0, #0
 801a2a0:	d0f2      	beq.n	801a288 <_realloc_r+0x1c>
 801a2a2:	4631      	mov	r1, r6
 801a2a4:	4622      	mov	r2, r4
 801a2a6:	f7fb fc85 	bl	8015bb4 <memcpy>
 801a2aa:	4631      	mov	r1, r6
 801a2ac:	4638      	mov	r0, r7
 801a2ae:	f7ff fb55 	bl	801995c <_free_r>
 801a2b2:	e7e9      	b.n	801a288 <_realloc_r+0x1c>
 801a2b4:	4635      	mov	r5, r6
 801a2b6:	e7e7      	b.n	801a288 <_realloc_r+0x1c>

0801a2b8 <_read_r>:
 801a2b8:	b538      	push	{r3, r4, r5, lr}
 801a2ba:	4d07      	ldr	r5, [pc, #28]	; (801a2d8 <_read_r+0x20>)
 801a2bc:	4604      	mov	r4, r0
 801a2be:	4608      	mov	r0, r1
 801a2c0:	4611      	mov	r1, r2
 801a2c2:	2200      	movs	r2, #0
 801a2c4:	602a      	str	r2, [r5, #0]
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	f7ed f930 	bl	800752c <_read>
 801a2cc:	1c43      	adds	r3, r0, #1
 801a2ce:	d102      	bne.n	801a2d6 <_read_r+0x1e>
 801a2d0:	682b      	ldr	r3, [r5, #0]
 801a2d2:	b103      	cbz	r3, 801a2d6 <_read_r+0x1e>
 801a2d4:	6023      	str	r3, [r4, #0]
 801a2d6:	bd38      	pop	{r3, r4, r5, pc}
 801a2d8:	20031280 	.word	0x20031280

0801a2dc <abort>:
 801a2dc:	b508      	push	{r3, lr}
 801a2de:	2006      	movs	r0, #6
 801a2e0:	f000 f834 	bl	801a34c <raise>
 801a2e4:	2001      	movs	r0, #1
 801a2e6:	f7ed f917 	bl	8007518 <_exit>

0801a2ea <_malloc_usable_size_r>:
 801a2ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2ee:	1f18      	subs	r0, r3, #4
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	bfbc      	itt	lt
 801a2f4:	580b      	ldrlt	r3, [r1, r0]
 801a2f6:	18c0      	addlt	r0, r0, r3
 801a2f8:	4770      	bx	lr

0801a2fa <_raise_r>:
 801a2fa:	291f      	cmp	r1, #31
 801a2fc:	b538      	push	{r3, r4, r5, lr}
 801a2fe:	4604      	mov	r4, r0
 801a300:	460d      	mov	r5, r1
 801a302:	d904      	bls.n	801a30e <_raise_r+0x14>
 801a304:	2316      	movs	r3, #22
 801a306:	6003      	str	r3, [r0, #0]
 801a308:	f04f 30ff 	mov.w	r0, #4294967295
 801a30c:	bd38      	pop	{r3, r4, r5, pc}
 801a30e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a310:	b112      	cbz	r2, 801a318 <_raise_r+0x1e>
 801a312:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a316:	b94b      	cbnz	r3, 801a32c <_raise_r+0x32>
 801a318:	4620      	mov	r0, r4
 801a31a:	f000 f831 	bl	801a380 <_getpid_r>
 801a31e:	462a      	mov	r2, r5
 801a320:	4601      	mov	r1, r0
 801a322:	4620      	mov	r0, r4
 801a324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a328:	f000 b818 	b.w	801a35c <_kill_r>
 801a32c:	2b01      	cmp	r3, #1
 801a32e:	d00a      	beq.n	801a346 <_raise_r+0x4c>
 801a330:	1c59      	adds	r1, r3, #1
 801a332:	d103      	bne.n	801a33c <_raise_r+0x42>
 801a334:	2316      	movs	r3, #22
 801a336:	6003      	str	r3, [r0, #0]
 801a338:	2001      	movs	r0, #1
 801a33a:	e7e7      	b.n	801a30c <_raise_r+0x12>
 801a33c:	2400      	movs	r4, #0
 801a33e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a342:	4628      	mov	r0, r5
 801a344:	4798      	blx	r3
 801a346:	2000      	movs	r0, #0
 801a348:	e7e0      	b.n	801a30c <_raise_r+0x12>
	...

0801a34c <raise>:
 801a34c:	4b02      	ldr	r3, [pc, #8]	; (801a358 <raise+0xc>)
 801a34e:	4601      	mov	r1, r0
 801a350:	6818      	ldr	r0, [r3, #0]
 801a352:	f7ff bfd2 	b.w	801a2fa <_raise_r>
 801a356:	bf00      	nop
 801a358:	20000254 	.word	0x20000254

0801a35c <_kill_r>:
 801a35c:	b538      	push	{r3, r4, r5, lr}
 801a35e:	4d07      	ldr	r5, [pc, #28]	; (801a37c <_kill_r+0x20>)
 801a360:	2300      	movs	r3, #0
 801a362:	4604      	mov	r4, r0
 801a364:	4608      	mov	r0, r1
 801a366:	4611      	mov	r1, r2
 801a368:	602b      	str	r3, [r5, #0]
 801a36a:	f7ed f8c5 	bl	80074f8 <_kill>
 801a36e:	1c43      	adds	r3, r0, #1
 801a370:	d102      	bne.n	801a378 <_kill_r+0x1c>
 801a372:	682b      	ldr	r3, [r5, #0]
 801a374:	b103      	cbz	r3, 801a378 <_kill_r+0x1c>
 801a376:	6023      	str	r3, [r4, #0]
 801a378:	bd38      	pop	{r3, r4, r5, pc}
 801a37a:	bf00      	nop
 801a37c:	20031280 	.word	0x20031280

0801a380 <_getpid_r>:
 801a380:	f7ed b8b2 	b.w	80074e8 <_getpid>

0801a384 <_init>:
 801a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a386:	bf00      	nop
 801a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a38a:	bc08      	pop	{r3}
 801a38c:	469e      	mov	lr, r3
 801a38e:	4770      	bx	lr

0801a390 <_fini>:
 801a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a392:	bf00      	nop
 801a394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a396:	bc08      	pop	{r3}
 801a398:	469e      	mov	lr, r3
 801a39a:	4770      	bx	lr
